
stm32-speech-recognition-and-traduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f9a8  080115c0  080115c0  000215c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040f68  08040f68  00061144  2**0
                  CONTENTS
  4 .ARM          00000008  08040f68  08040f68  00050f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040f70  08040f70  00061144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040f70  08040f70  00050f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040f74  08040f74  00050f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001144  20000000  08040f78  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053bc  20001148  080420bc  00061148  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  20006504  080420bc  00066504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00061144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122ac  00000000  00000000  00061174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a30  00000000  00000000  00073420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00075e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00076920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021936  00000000  00000000  000772e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f519  00000000  00000000  00098c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1eb5  00000000  00000000  000a8137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000014d  00000000  00000000  00179fec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  0017a13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0017e878  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0017e944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001148 	.word	0x20001148
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011590 	.word	0x08011590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000114c 	.word	0x2000114c
 80001cc:	08011590 	.word	0x08011590

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <GetCoefficient>:
 * binSize - the size of the spectralData array, usually a power of 2
 * m - The mth MFCC coefficient to compute
 *
 */
double GetCoefficient(double* spectralData, unsigned int samplingRate, unsigned int NumFilters, unsigned int binSize, unsigned int m)
{
 8000ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff4:	b08c      	sub	sp, #48	; 0x30
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
	double result = 0.0f;
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double outerSum = 0.0f;
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double innerSum = 0.0f;
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c7 2308 	strd	r2, r3, [r7, #32]
	unsigned int k, l;

	// 0 <= m < L
	if(m >= NumFilters)
 8001024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d304      	bcc.n	8001036 <GetCoefficient+0x46>
	{
		// This represents an error condition - the specified coefficient is greater than or equal to the number of filters. The behavior in this case is undefined.
		return 0.0f;
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e0ab      	b.n	800118e <GetCoefficient+0x19e>
	}

	result = NormalizationFactor(NumFilters, m);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f8b7 	bl	80011b0 <NormalizationFactor>
 8001042:	ed87 0b04 	vstr	d0, [r7, #16]

	
	for(l = 1; l <= NumFilters; l++)
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	e08f      	b.n	800116c <GetCoefficient+0x17c>
	{
		// Compute inner sum
		innerSum = 0.0f;
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(k = 0; k < binSize - 1; k++)
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	e023      	b.n	80010a6 <GetCoefficient+0xb6>
		{
			innerSum += fabs(spectralData[k] * GetFilterParameter(samplingRate, binSize, k, l));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	e9d3 8900 	ldrd	r8, r9, [r3]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f000 f8e1 	bl	8001238 <GetFilterParameter>
 8001076:	ec53 2b10 	vmov	r2, r3, d0
 800107a:	4640      	mov	r0, r8
 800107c:	4649      	mov	r1, r9
 800107e:	f7ff fabb 	bl	80005f8 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4614      	mov	r4, r2
 8001088:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800108c:	4622      	mov	r2, r4
 800108e:	462b      	mov	r3, r5
 8001090:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001094:	f7ff f8fa 	bl	800028c <__adddf3>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(k = 0; k < binSize - 1; k++)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	3301      	adds	r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3d6      	bcc.n	800105e <GetCoefficient+0x6e>
		}

		if(innerSum > 0.0f)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010bc:	f7ff fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <GetCoefficient+0xe2>
		{
			innerSum = log(innerSum); // The log of 0 is undefined, so don't use it
 80010c6:	ed97 0b08 	vldr	d0, [r7, #32]
 80010ca:	f00d fb9d 	bl	800e808 <log>
 80010ce:	ed87 0b08 	vstr	d0, [r7, #32]
		}

		innerSum = innerSum * cos(((m * mfcc_PI) / NumFilters) * (l - 0.5f));
 80010d2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010d4:	f7ff fa16 	bl	8000504 <__aeabi_ui2d>
 80010d8:	a333      	add	r3, pc, #204	; (adr r3, 80011a8 <GetCoefficient+0x1b8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fa8b 	bl	80005f8 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4690      	mov	r8, r2
 80010e8:	4699      	mov	r9, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fa0a 	bl	8000504 <__aeabi_ui2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4640      	mov	r0, r8
 80010f6:	4649      	mov	r1, r9
 80010f8:	f7ff fba8 	bl	800084c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4690      	mov	r8, r2
 8001102:	4699      	mov	r9, r3
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001116:	ee17 0a90 	vmov	r0, s15
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4640      	mov	r0, r8
 8001124:	4649      	mov	r1, r9
 8001126:	f7ff fa67 	bl	80005f8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	ec43 2b17 	vmov	d7, r2, r3
 8001132:	eeb0 0a47 	vmov.f32	s0, s14
 8001136:	eef0 0a67 	vmov.f32	s1, s15
 800113a:	f00d fae5 	bl	800e708 <cos>
 800113e:	ec53 2b10 	vmov	r2, r3, d0
 8001142:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	e9c7 2308 	strd	r2, r3, [r7, #32]

		outerSum += innerSum;
 8001152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800115a:	f7ff f897 	bl	800028c <__adddf3>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for(l = 1; l <= NumFilters; l++)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	3301      	adds	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	f67f af6b 	bls.w	800104c <GetCoefficient+0x5c>
	}

	result *= outerSum;
 8001176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800117a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800117e:	f7ff fa3b 	bl	80005f8 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return result;
 800118a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800118e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001192:	eeb0 0a47 	vmov.f32	s0, s14
 8001196:	eef0 0a67 	vmov.f32	s1, s15
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011a2:	bf00      	nop
 80011a4:	f3af 8000 	nop.w
 80011a8:	54442d18 	.word	0x54442d18
 80011ac:	400921fb 	.word	0x400921fb

080011b0 <NormalizationFactor>:
/* 
 * Computes the Normalization Factor (Equation 6)
 * Used for internal computation only - not to be called directly
 */
double NormalizationFactor(int NumFilters, int m)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	double normalizationFactor = 0.0f;
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(m == 0)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d115      	bne.n	80011f8 <NormalizationFactor+0x48>
	{
		normalizationFactor = sqrt(1.0f / NumFilters);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011de:	ee16 0a90 	vmov	r0, s13
 80011e2:	f7ff f9b1 	bl	8000548 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	ec43 2b10 	vmov	d0, r2, r3
 80011ee:	f00d fc01 	bl	800e9f4 <sqrt>
 80011f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80011f6:	e014      	b.n	8001222 <NormalizationFactor+0x72>
	}
	else 
	{
		normalizationFactor = sqrt(2.0f / NumFilters);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001202:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001206:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800120a:	ee16 0a90 	vmov	r0, s13
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b10 	vmov	d0, r2, r3
 800121a:	f00d fbeb 	bl	800e9f4 <sqrt>
 800121e:	ed87 0b02 	vstr	d0, [r7, #8]
	}
	
	return normalizationFactor;
 8001222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001226:	ec43 2b17 	vmov	d7, r2, r3
}
 800122a:	eeb0 0a47 	vmov.f32	s0, s14
 800122e:	eef0 0a67 	vmov.f32	s1, s15
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <GetFilterParameter>:
/* 
 * Compute the filter parameter for the specified frequency and filter bands (Eq. 2)
 * Used for internal computation only - not the be called directly
 */
double GetFilterParameter(unsigned int samplingRate, unsigned int binSize, unsigned int frequencyBand, unsigned int filterBand)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
	double filterParameter = 0.0f;
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double boundary = (frequencyBand * samplingRate) / binSize;		// k * Fs / N
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	fb02 f203 	mul.w	r2, r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f94f 	bl	8000504 <__aeabi_ui2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double prevCenterFrequency = GetCenterFrequency(filterBand - 1);		// fc(l - 1) etc.
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3b01      	subs	r3, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f910 	bl	8001498 <GetCenterFrequency>
 8001278:	ed87 0b08 	vstr	d0, [r7, #32]
	double thisCenterFrequency = GetCenterFrequency(filterBand);
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f000 f90b 	bl	8001498 <GetCenterFrequency>
 8001282:	ed87 0b06 	vstr	d0, [r7, #24]
	double nextCenterFrequency = GetCenterFrequency(filterBand + 1);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f904 	bl	8001498 <GetCenterFrequency>
 8001290:	ed87 0b04 	vstr	d0, [r7, #16]

	if(boundary >= 0 && boundary < prevCenterFrequency)
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012a0:	f7ff fc30 	bl	8000b04 <__aeabi_dcmpge>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00f      	beq.n	80012ca <GetFilterParameter+0x92>
 80012aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012b2:	f7ff fc13 	bl	8000adc <__aeabi_dcmplt>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <GetFilterParameter+0x92>
	{
		filterParameter = 0.0f;
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80012c8:	e08e      	b.n	80013e8 <GetFilterParameter+0x1b0>
	}
	else if(boundary >= prevCenterFrequency && boundary < thisCenterFrequency)
 80012ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012d2:	f7ff fc17 	bl	8000b04 <__aeabi_dcmpge>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d030      	beq.n	800133e <GetFilterParameter+0x106>
 80012dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012e4:	f7ff fbfa 	bl	8000adc <__aeabi_dcmplt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d027      	beq.n	800133e <GetFilterParameter+0x106>
	{
		filterParameter = (boundary - prevCenterFrequency) / (thisCenterFrequency - prevCenterFrequency);
 80012ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012f6:	f7fe ffc7 	bl	8000288 <__aeabi_dsub>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4614      	mov	r4, r2
 8001300:	461d      	mov	r5, r3
 8001302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001306:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800130a:	f7fe ffbd 	bl	8000288 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7ff fa99 	bl	800084c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		filterParameter *= GetMagnitudeFactor(filterBand);
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f000 f86c 	bl	8001400 <GetMagnitudeFactor>
 8001328:	ec53 2b10 	vmov	r2, r3, d0
 800132c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800133c:	e054      	b.n	80013e8 <GetFilterParameter+0x1b0>
	}
	else if(boundary >= thisCenterFrequency && boundary < nextCenterFrequency)
 800133e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001346:	f7ff fbdd 	bl	8000b04 <__aeabi_dcmpge>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d030      	beq.n	80013b2 <GetFilterParameter+0x17a>
 8001350:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001354:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001358:	f7ff fbc0 	bl	8000adc <__aeabi_dcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d027      	beq.n	80013b2 <GetFilterParameter+0x17a>
	{
		filterParameter = (boundary - nextCenterFrequency) / (thisCenterFrequency - nextCenterFrequency);
 8001362:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800136a:	f7fe ff8d 	bl	8000288 <__aeabi_dsub>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4614      	mov	r4, r2
 8001374:	461d      	mov	r5, r3
 8001376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800137a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800137e:	f7fe ff83 	bl	8000288 <__aeabi_dsub>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7ff fa5f 	bl	800084c <__aeabi_ddiv>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		filterParameter *= GetMagnitudeFactor(filterBand);
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f000 f832 	bl	8001400 <GetMagnitudeFactor>
 800139c:	ec53 2b10 	vmov	r2, r3, d0
 80013a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013a4:	f7ff f928 	bl	80005f8 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80013b0:	e01a      	b.n	80013e8 <GetFilterParameter+0x1b0>
	}
	else if(boundary >= nextCenterFrequency && boundary < samplingRate)
 80013b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013ba:	f7ff fba3 	bl	8000b04 <__aeabi_dcmpge>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d011      	beq.n	80013e8 <GetFilterParameter+0x1b0>
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff f89d 	bl	8000504 <__aeabi_ui2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013d2:	f7ff fb83 	bl	8000adc <__aeabi_dcmplt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <GetFilterParameter+0x1b0>
	{
		filterParameter = 0.0f;
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return filterParameter;
 80013e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f0:	eeb0 0a47 	vmov.f32	s0, s14
 80013f4:	eef0 0a67 	vmov.f32	s1, s15
 80013f8:	3738      	adds	r7, #56	; 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001400 <GetMagnitudeFactor>:
/* 
 * Compute the band-dependent magnitude factor for the given filter band (Eq. 3)
 * Used for internal computation only - not the be called directly
 */
double GetMagnitudeFactor(unsigned int filterBand)
{
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	double magnitudeFactor = 0.0f;
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	if(filterBand >= 1 && filterBand <= 14)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d008      	beq.n	800142c <GetMagnitudeFactor+0x2c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0e      	cmp	r3, #14
 800141e:	d805      	bhi.n	800142c <GetMagnitudeFactor+0x2c>
	{
		magnitudeFactor = 0.015;
 8001420:	a31b      	add	r3, pc, #108	; (adr r3, 8001490 <GetMagnitudeFactor+0x90>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800142a:	e023      	b.n	8001474 <GetMagnitudeFactor+0x74>
	}
	else if(filterBand >= 15 && filterBand <= 48)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b0e      	cmp	r3, #14
 8001430:	d920      	bls.n	8001474 <GetMagnitudeFactor+0x74>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b30      	cmp	r3, #48	; 0x30
 8001436:	d81d      	bhi.n	8001474 <GetMagnitudeFactor+0x74>
	{
		magnitudeFactor = 2.0f / (GetCenterFrequency(filterBand + 1) - GetCenterFrequency(filterBand -1));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3301      	adds	r3, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f82b 	bl	8001498 <GetCenterFrequency>
 8001442:	ec55 4b10 	vmov	r4, r5, d0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3b01      	subs	r3, #1
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f824 	bl	8001498 <GetCenterFrequency>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe ff16 	bl	8000288 <__aeabi_dsub>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001468:	f7ff f9f0 	bl	800084c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	return magnitudeFactor;
 8001474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001478:	ec43 2b17 	vmov	d7, r2, r3
}
 800147c:	eeb0 0a47 	vmov.f32	s0, s14
 8001480:	eef0 0a67 	vmov.f32	s1, s15
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bdb0      	pop	{r4, r5, r7, pc}
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	eb851eb8 	.word	0xeb851eb8
 8001494:	3f8eb851 	.word	0x3f8eb851

08001498 <GetCenterFrequency>:
 * This where the mel-frequency scaling occurs. Filters are specified so that their
 * center frequencies are equally spaced on the mel scale
 * Used for internal computation only - not the be called directly
 */
double GetCenterFrequency(unsigned int filterBand)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	double centerFrequency = 0.0f;
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double exponent;

	if(filterBand == 0)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <GetCenterFrequency+0x28>
	{
		centerFrequency = 0;
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80014be:	e03f      	b.n	8001540 <GetCenterFrequency+0xa8>
	}
	else if(filterBand >= 1 && filterBand <= 14)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d018      	beq.n	80014f8 <GetCenterFrequency+0x60>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0e      	cmp	r3, #14
 80014ca:	d815      	bhi.n	80014f8 <GetCenterFrequency+0x60>
	{
		centerFrequency = (200.0f * filterBand) / 3.0f;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001568 <GetCenterFrequency+0xd0>
 80014da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014de:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014e6:	ee16 0a90 	vmov	r0, s13
 80014ea:	f7ff f82d 	bl	8000548 <__aeabi_f2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80014f6:	e023      	b.n	8001540 <GetCenterFrequency+0xa8>
	}
	else
	{
		exponent = filterBand - 14.0f;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001502:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800150a:	ee17 0a90 	vmov	r0, s15
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	e9c7 2302 	strd	r2, r3, [r7, #8]
		centerFrequency = pow(1.0711703, exponent);
 800151a:	ed97 1b02 	vldr	d1, [r7, #8]
 800151e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001558 <GetCenterFrequency+0xc0>
 8001522:	f00d f9b9 	bl	800e898 <pow>
 8001526:	ed87 0b04 	vstr	d0, [r7, #16]
		centerFrequency *= 1073.4;
 800152a:	a30d      	add	r3, pc, #52	; (adr r3, 8001560 <GetCenterFrequency+0xc8>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001534:	f7ff f860 	bl	80005f8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	
	return centerFrequency;
 8001540:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001544:	ec43 2b17 	vmov	d7, r2, r3
}
 8001548:	eeb0 0a47 	vmov.f32	s0, s14
 800154c:	eef0 0a67 	vmov.f32	s1, s15
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	77ef24e6 	.word	0x77ef24e6
 800155c:	3ff12383 	.word	0x3ff12383
 8001560:	9999999a 	.word	0x9999999a
 8001564:	4090c599 	.word	0x4090c599
 8001568:	43480000 	.word	0x43480000

0800156c <rbit>:
#endif
#endif

// reverse bits (ARM: RBIT)
//__INLINE
uint32_t rbit(uint32_t x) {
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t result;
#if defined(__ARMCC_VERSION) && ((__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300))
  __asm{ rbit result, x }
#elif defined(__GNUC__) && defined(__arm__) && ((__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300))
  __asm("rbit %0, %1":"=r"(result):"r"(x));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	60fb      	str	r3, [r7, #12]
  x = (((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2));
  x = (((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4));
  x = (((x & 0xff00ff00) >> 8) | ((x & 0x00ff00ff) << 8));
  result = (x >> 16) | (x << 16);
#endif
  return result;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <smmlar>:
}

// 32-bit signed multiply -> 32-bit result, add 32-bit (ARM: SMMLAR)
// floating point equivalent: return c + a * b
//__INLINE
int32_t smmlar(int32_t a, int32_t b, int32_t c) {
 800158a:	b480      	push	{r7}
 800158c:	b087      	sub	sp, #28
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  int32_t result;
#if defined(__ARMCC_VERSION) && (__CORTEX_M >= 0x04U)
  __asm{ smmlar result, a, b, c }
#elif defined(__GNUC__) && defined(__arm__) && (__CORTEX_M >= 0x04U)
  __asm("smmlar %0, %1, %2, %3":"=r"(result):"r"(a),"r"(b),"r"(c));
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	fb53 1312 	smmlar	r3, r3, r2, r1
 80015a0:	617b      	str	r3, [r7, #20]
#else
  result = c + ((((int64_t)a * b) + 0x80000000) >> 32);
#endif
  return result;
 80015a2:	697b      	ldr	r3, [r7, #20]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <smmlsr>:

// 32-bit signed multiply -> 32-bit result, subtract 32-bit (ARM: SMMLSR)
// floating point equivalent: return c - a * b
//__INLINE
int32_t smmlsr(int32_t a, int32_t b, int32_t c) {
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  int32_t result;
#if defined(__ARMCC_VERSION) && (__CORTEX_M >= 0x04U)
  __asm{ smmlsr result, a, b, c }
#elif defined(__GNUC__) && defined(__arm__) && (__CORTEX_M >= 0x04U)
  __asm("smmlsr %0, %1, %2, %3":"=r"(result):"r"(a),"r"(b),"r"(c));
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	fb63 1312 	smmlsr	r3, r3, r2, r1
 80015c6:	617b      	str	r3, [r7, #20]
#else
  result = c - ((((int64_t)a * b) + 0x80000000) >> 32);
#endif
  return result;
 80015c8:	697b      	ldr	r3, [r7, #20]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <smmulr>:

// 32-bit signed multiply -> 32-bit result (ARM: SMMULR)
// floating point equivalent: return a * b
//__INLINE
int32_t smmulr(int32_t a, int32_t b) {
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  int32_t result;
#if defined(__ARMCC_VERSION) && (__CORTEX_M >= 0x04U)
  __asm{ smmulr result, a, b }
#elif defined(__GNUC__) && defined(__arm__) && (__CORTEX_M >= 0x04U)
  __asm("smmulr %0, %1, %2":"=r"(result):"r"(a),"r"(b));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	fb53 f312 	smmulr	r3, r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
#else
  result = ((((int64_t)a * b) + 0x80000000) >> 32);
#endif
  return result;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <fft_forward>:

/* == FORWARD AND INVERSE FFT ===================================== */

// Forward FFT transform
// Permutation must be performed prior to (DIT)/after (DIF) call
void fft_forward(fft_complex_t data[], unsigned bits) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0a6      	sub	sp, #152	; 0x98
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  unsigned size = 1 << bits;
 8001602:	2201      	movs	r2, #1
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	67fb      	str	r3, [r7, #124]	; 0x7c
#ifdef FFT_DIT
  unsigned shift = SINE_BITS + 1;
 800160c:	2308      	movs	r3, #8
 800160e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  for(unsigned stride = 2 ; stride <= size; stride <<= 1, shift--) {
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001618:	e1b4      	b.n	8001984 <fft_forward+0x38c>
#else//FFT_DIF
  unsigned shift = SINE_BITS - (bits - 2);
  for(unsigned stride = size; stride >= 2; stride >>= 1, shift++) {
#endif
    // Twiddle and combine for k = 0, having trivial (0 and 1) twiddle factors
    for(unsigned a = 0; a < size; a += stride) {
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001620:	e03f      	b.n	80016a2 <fft_forward+0xaa>
      unsigned b = a + (stride >> 1);
 8001622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800162c:	4413      	add	r3, r2
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
      // # Radix-2 DIT/DIF trivial butterfly #
      FFT_ASSGN(data[a], FFT_D2(FFT_ADD(FFT(A,r), FFT(B,r))), FFT_D2(FFT_ADD(FFT(A,i), FFT(B,i))));
      FFT_ASSGN(data[b], FFT_D2(FFT_SUB(FFT(A,r), FFT(B,r))), FFT_D2(FFT_SUB(FFT(A,i), FFT(B,i))));
*/
      // Special case: GCC optimizes ARMCC style better here
      fft_complex_t A = data[a], B = data[b];
 8001630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	441a      	add	r2, r3
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001642:	e883 0003 	stmia.w	r3, {r0, r1}
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	441a      	add	r2, r3
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001656:	e883 0003 	stmia.w	r3, {r0, r1}
      // # Radix-2 DIT/DIF trivial butterfly #
      data[a] = (fft_complex_t){ .r = FFT_D2(FFT_A(A.r, B.r)), .i = FFT_D2(FFT_A(A.i, B.i)) };
 800165a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	6a39      	ldr	r1, [r7, #32]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	440a      	add	r2, r1
 800166a:	1051      	asrs	r1, r2, #1
 800166c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	4402      	add	r2, r0
 8001672:	1052      	asrs	r2, r2, #1
 8001674:	6019      	str	r1, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
      data[b] = (fft_complex_t){ .r = FFT_D2(FFT_S(A.r, B.r)), .i = FFT_D2(FFT_S(A.i, B.i)) };
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	6a39      	ldr	r1, [r7, #32]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	1a8a      	subs	r2, r1, r2
 8001686:	1051      	asrs	r1, r2, #1
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	1a82      	subs	r2, r0, r2
 800168e:	1052      	asrs	r2, r2, #1
 8001690:	6019      	str	r1, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
    for(unsigned a = 0; a < size; a += stride) {
 8001694:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800169c:	4413      	add	r3, r2
 800169e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80016a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80016a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3ba      	bcc.n	8001622 <fft_forward+0x2a>
    }
    if(!(stride & 2)) {
 80016ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d15c      	bne.n	8001772 <fft_forward+0x17a>
      for(unsigned a = (stride >> 2); a < (stride >> 2) + size; a += stride) {
 80016b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016c2:	e04d      	b.n	8001760 <fft_forward+0x168>
        unsigned b = a + (stride >> 1);
 80016c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80016ce:	4413      	add	r3, r2
 80016d0:	67bb      	str	r3, [r7, #120]	; 0x78
        FFT_DECLC(A, data[a]); FFT_DECLC(B, data[b]);
 80016d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
 80016e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	673b      	str	r3, [r7, #112]	; 0x70
 80016ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	66bb      	str	r3, [r7, #104]	; 0x68
#ifdef FFT_DIT
        // # Radix-2 DIT trivial butterfly #
        FFT_ASSGN(data[a], FFT_D2(FFT_A(FFT(A,r), FFT(B,i))), FFT_D2(FFT_S(FFT(A,i), FFT(B,r))));
 8001706:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800170a:	441a      	add	r2, r3
 800170c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	440b      	add	r3, r1
 8001716:	1052      	asrs	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800171c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800171e:	1ad2      	subs	r2, r2, r3
 8001720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	440b      	add	r3, r1
 800172a:	1052      	asrs	r2, r2, #1
 800172c:	605a      	str	r2, [r3, #4]
        FFT_ASSGN(data[b], FFT_D2(FFT_S(FFT(A,r), FFT(B,i))), FFT_D2(FFT_A(FFT(A,i), FFT(B,r))));
 800172e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001732:	1ad2      	subs	r2, r2, r3
 8001734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	440b      	add	r3, r1
 800173c:	1052      	asrs	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001744:	441a      	add	r2, r3
 8001746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	440b      	add	r3, r1
 800174e:	1052      	asrs	r2, r2, #1
 8001750:	605a      	str	r2, [r3, #4]
      for(unsigned a = (stride >> 2); a < (stride >> 2) + size; a += stride) {
 8001752:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001756:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800175a:	4413      	add	r3, r2
 800175c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001764:	089a      	lsrs	r2, r3, #2
 8001766:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001768:	4413      	add	r3, r2
 800176a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800176e:	429a      	cmp	r2, r3
 8001770:	d3a8      	bcc.n	80016c4 <fft_forward+0xcc>
        FFT_ASSGN(data[b], FFT_D2(FFT_S(FFT(A,i), FFT(B,i))), FFT_D2(FFT_S(FFT(B,r), FFT(A,r))));
#endif
      }
    }
    // Twiddle and combine
    for(unsigned k = 1; k < (stride >> 2); k++) {
 8001772:	2301      	movs	r3, #1
 8001774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001778:	e0f2      	b.n	8001960 <fft_forward+0x368>
      FFT_DECLR(W, FFT_QCOS(k, shift), FFT_QSIN(k, shift));
 800177a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800177e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800178a:	4a84      	ldr	r2, [pc, #528]	; (800199c <fft_forward+0x3a4>)
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	667b      	str	r3, [r7, #100]	; 0x64
 8001792:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	4a7f      	ldr	r2, [pc, #508]	; (800199c <fft_forward+0x3a4>)
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	663b      	str	r3, [r7, #96]	; 0x60
      for(unsigned a = k, b; a < size; a += (stride >> 2) + (stride >> 1)) {
 80017a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017ae:	e0cc      	b.n	800194a <fft_forward+0x352>
        b = a + (stride >> 1);
 80017b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80017ba:	4413      	add	r3, r2
 80017bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        { // These two blocks prevent the compiler from confusing...
          FFT_DECLC(A, data[a]); FFT_DECLC(B, data[b]);
 80017be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80017cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	657b      	str	r3, [r7, #84]	; 0x54
 80017da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	653b      	str	r3, [r7, #80]	; 0x50
 80017e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
#ifdef FFT_DIT
          // # Radix-2 DIT butterfly #
          FFT_DECLR(BW, FFT_MA(FFT(B,i), FFT(W,i), FFT_M(FFT(B,r), FFT(W,r))),
 80017f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80017f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80017f6:	f7ff feee 	bl	80015d6 <smmulr>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001800:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001802:	f7ff fec2 	bl	800158a <smmlar>
 8001806:	64b8      	str	r0, [r7, #72]	; 0x48
 8001808:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800180a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800180c:	f7ff fee3 	bl	80015d6 <smmulr>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001816:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001818:	f7ff feca 	bl	80015b0 <smmlsr>
 800181c:	6478      	str	r0, [r7, #68]	; 0x44
                        FFT_MS(FFT(B,r), FFT(W,i), FFT_M(FFT(B,i), FFT(W,r))));
          FFT_ASSGN(data[a], FFT_A(FFT_D2(FFT(A,r)), FFT(BW,r)), FFT_A(FFT_D2(FFT(A,i)), FFT(BW,i)));
 800181e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001820:	1059      	asrs	r1, r3, #1
 8001822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800182e:	440a      	add	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	1059      	asrs	r1, r3, #1
 8001836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001842:	440a      	add	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
          FFT_ASSGN(data[b], FFT_S(FFT_D2(FFT(A,r)), FFT(BW,r)), FFT_S(FFT_D2(FFT(A,i)), FFT(BW,i)));
 8001846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001848:	1059      	asrs	r1, r3, #1
 800184a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001854:	1a8a      	subs	r2, r1, r2
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	1059      	asrs	r1, r3, #1
 800185c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001866:	1a8a      	subs	r2, r1, r2
 8001868:	605a      	str	r2, [r3, #4]
          FFT_DECLR(D, FFT_S(FFT(A,r), FFT(B,r)), FFT_S(FFT(A,i), FFT(B,i)));
          FFT_ASSGN(data[b], FFT_MA(FFT(D,r), FFT(W,r), FFT_M(FFT(D,i), FFT(W,i))),
                             FFT_MS(FFT(D,r), FFT(W,i), FFT_M(FFT(D,i), FFT(W,r))));
#endif
        }
        a += (stride >> 2); b += (stride >> 2);
 800186a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001874:	4413      	add	r3, r2
 8001876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800187a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001882:	4413      	add	r3, r2
 8001884:	65fb      	str	r3, [r7, #92]	; 0x5c
        { // ...register use resulting in more efficient code
          FFT_DECLC(A, data[a]); FFT_DECLC(B, data[b]);
 8001886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
 8001894:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
#ifdef FFT_DIT
          // # Radix-2 DIT butterfly #
          FFT_DECLR(BW, FFT_MS(FFT(B,r), FFT(W,i), FFT_M(FFT(B,i), FFT(W,r))),
 80018ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80018bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018be:	f7ff fe8a 	bl	80015d6 <smmulr>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018ca:	f7ff fe71 	bl	80015b0 <smmlsr>
 80018ce:	6338      	str	r0, [r7, #48]	; 0x30
 80018d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80018d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018d4:	f7ff fe7f 	bl	80015d6 <smmulr>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018e0:	f7ff fe53 	bl	800158a <smmlar>
 80018e4:	62f8      	str	r0, [r7, #44]	; 0x2c
                        FFT_MA(FFT(B,i), FFT(W,i), FFT_M(FFT(B,r), FFT(W,r))));
          FFT_ASSGN(data[a], FFT_A(FFT_D2(FFT(A,r)), FFT(BW,r)), FFT_S(FFT_D2(FFT(A,i)), FFT(BW,i)));
 80018e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e8:	1059      	asrs	r1, r3, #1
 80018ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f6:	440a      	add	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fc:	1059      	asrs	r1, r3, #1
 80018fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190a:	1a8a      	subs	r2, r1, r2
 800190c:	605a      	str	r2, [r3, #4]
          FFT_ASSGN(data[b], FFT_S(FFT_D2(FFT(A,r)), FFT(BW,r)), FFT_A(FFT_D2(FFT(A,i)), FFT(BW,i)));
 800190e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001910:	1059      	asrs	r1, r3, #1
 8001912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191c:	1a8a      	subs	r2, r1, r2
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001922:	1059      	asrs	r1, r3, #1
 8001924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192e:	440a      	add	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
      for(unsigned a = k, b; a < size; a += (stride >> 2) + (stride >> 1)) {
 8001932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001936:	089a      	lsrs	r2, r3, #2
 8001938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001944:	4413      	add	r3, r2
 8001946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800194a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800194e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001950:	429a      	cmp	r2, r3
 8001952:	f4ff af2d 	bcc.w	80017b0 <fft_forward+0x1b8>
    for(unsigned k = 1; k < (stride >> 2); k++) {
 8001956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800195a:	3301      	adds	r3, #1
 800195c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800196a:	429a      	cmp	r2, r3
 800196c:	f4ff af05 	bcc.w	800177a <fft_forward+0x182>
  for(unsigned stride = 2 ; stride <= size; stride <<= 1, shift--) {
 8001970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800197a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800197e:	3b01      	subs	r3, #1
 8001980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001984:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800198a:	429a      	cmp	r2, r3
 800198c:	f67f ae45 	bls.w	800161a <fft_forward+0x22>
#endif
        }
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3798      	adds	r7, #152	; 0x98
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	08011688 	.word	0x08011688

080019a0 <fft_permutate>:
  if(!invert) { data[0].r <<= 1; data[0].i <<= 1; }
}

// Perform bit-reversal permutation on data set
// (Reverses address bits for all data points)
void fft_permutate(fft_complex_t data[], unsigned bits) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  unsigned size  = 1 << bits;
 80019aa:	2201      	movs	r2, #1
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	61bb      	str	r3, [r7, #24]
  unsigned shift = 32 - bits;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f1c3 0320 	rsb	r3, r3, #32
 80019ba:	617b      	str	r3, [r7, #20]
  for(unsigned i = 1; i < size - 1; i++) {
 80019bc:	2301      	movs	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	e03a      	b.n	8001a38 <fft_permutate+0x98>
    unsigned z = rbit(i) >> shift;
 80019c2:	69f8      	ldr	r0, [r7, #28]
 80019c4:	f7ff fdd2 	bl	800156c <rbit>
 80019c8:	4602      	mov	r2, r0
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
 80019d0:	613b      	str	r3, [r7, #16]
    if(z > i) {
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d92b      	bls.n	8001a32 <fft_permutate+0x92>
      fft_t
      t = data[i].r; data[i].r = data[z].r; data[z].r = t;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	441a      	add	r2, r3
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	440b      	add	r3, r1
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]
      t = data[i].i; data[i].i = data[z].i; data[z].i = t;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	441a      	add	r2, r3
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	440b      	add	r3, r1
 8001a22:	6852      	ldr	r2, [r2, #4]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	605a      	str	r2, [r3, #4]
  for(unsigned i = 1; i < size - 1; i++) {
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3bf      	bcc.n	80019c2 <fft_permutate+0x22>
    }
  }
}
 8001a42:	bf00      	nop
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	f5ad 5d32 	sub.w	sp, sp, #11392	; 0x2c80
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char b[50];
	int buf_len = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001a5c:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_float in_data[AI_SMALL_WORDS_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_float out_data[AI_SMALL_WORDS_MODEL_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle small_words_model = AI_HANDLE_NULL;
 8001a5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a62:	3b04      	subs	r3, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_SMALL_WORDS_MODEL_IN_NUM] = AI_SMALL_WORDS_MODEL_IN;
 8001a68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a6c:	3b1c      	subs	r3, #28
 8001a6e:	4ab6      	ldr	r2, [pc, #728]	; (8001d48 <main+0x2fc>)
 8001a70:	461c      	mov	r4, r3
 8001a72:	4615      	mov	r5, r2
 8001a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a7c:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_SMALL_WORDS_MODEL_OUT_NUM] = AI_SMALL_WORDS_MODEL_OUT;
 8001a80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a84:	3b34      	subs	r3, #52	; 0x34
 8001a86:	4ab1      	ldr	r2, [pc, #708]	; (8001d4c <main+0x300>)
 8001a88:	461c      	mov	r4, r3
 8001a8a:	4615      	mov	r5, r2
 8001a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a94:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params =
 8001a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9c:	3b24      	subs	r3, #36	; 0x24
 8001a9e:	4aac      	ldr	r2, [pc, #688]	; (8001d50 <main+0x304>)
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa6:	3b24      	subs	r3, #36	; 0x24
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	809a      	strh	r2, [r3, #4]
 8001aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab0:	3b24      	subs	r3, #36	; 0x24
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	80da      	strh	r2, [r3, #6]
 8001ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aba:	3b24      	subs	r3, #36	; 0x24
 8001abc:	2201      	movs	r2, #1
 8001abe:	811a      	strh	r2, [r3, #8]
 8001ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac4:	3b24      	subs	r3, #36	; 0x24
 8001ac6:	4aa3      	ldr	r2, [pc, #652]	; (8001d54 <main+0x308>)
 8001ac8:	60da      	str	r2, [r3, #12]
					AI_NETWORK_PARAMS_INIT(
 8001aca:	f003 fe8b 	bl	80057e4 <ai_small_words_model_data_weights_get>
 8001ace:	4602      	mov	r2, r0
	ai_network_params ai_params =
 8001ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad4:	3b24      	subs	r3, #36	; 0x24
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001adc:	3b24      	subs	r3, #36	; 0x24
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae6:	3b24      	subs	r3, #36	; 0x24
 8001ae8:	4a9b      	ldr	r2, [pc, #620]	; (8001d58 <main+0x30c>)
 8001aea:	619a      	str	r2, [r3, #24]
 8001aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af0:	3b24      	subs	r3, #36	; 0x24
 8001af2:	2201      	movs	r2, #1
 8001af4:	839a      	strh	r2, [r3, #28]
 8001af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afa:	3b24      	subs	r3, #36	; 0x24
 8001afc:	2201      	movs	r2, #1
 8001afe:	83da      	strh	r2, [r3, #30]
 8001b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b04:	3b24      	subs	r3, #36	; 0x24
 8001b06:	2201      	movs	r2, #1
 8001b08:	841a      	strh	r2, [r3, #32]
 8001b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0e:	3b24      	subs	r3, #36	; 0x24
 8001b10:	f44f 52ce 	mov.w	r2, #6592	; 0x19c0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
 8001b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b1a:	3b24      	subs	r3, #36	; 0x24
 8001b1c:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001b20:	f102 0208 	add.w	r2, r2, #8
 8001b24:	3a10      	subs	r2, #16
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
 8001b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2c:	3b24      	subs	r3, #36	; 0x24
 8001b2e:	2200      	movs	r2, #0
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
							AI_SMALL_WORDS_MODEL_DATA_WEIGHTS(ai_small_words_model_data_weights_get()),
							AI_SMALL_WORDS_MODEL_DATA_ACTIVATIONS(activations)
					);

	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8001b32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b36:	3b1c      	subs	r3, #28
 8001b38:	2201      	movs	r2, #1
 8001b3a:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001b3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b40:	3b1c      	subs	r3, #28
 8001b42:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8001b46:	3a30      	subs	r2, #48	; 0x30
 8001b48:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8001b4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b4e:	3b34      	subs	r3, #52	; 0x34
 8001b50:	2201      	movs	r2, #1
 8001b52:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001b54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b58:	3b34      	subs	r3, #52	; 0x34
 8001b5a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001b5e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b60:	f000 fe12 	bl	8002788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b64:	f000 fa9a 	bl	800209c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b68:	f000 fb9a 	bl	80022a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b6c:	f000 fb78 	bl	8002260 <MX_DMA_Init>
  MX_I2S2_Init();
 8001b70:	f000 fb1e 	bl	80021b0 <MX_I2S2_Init>
  MX_CRC_Init();
 8001b74:	f000 fb00 	bl	8002178 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8001b78:	f003 fc48 	bl	800540c <MX_PDM2PCM_Init>
  MX_USART2_UART_Init();
 8001b7c:	f000 fb46 	bl	800220c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// Start the DMA with halfof the PDM buffer dimension
	HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0], 128);
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	4976      	ldr	r1, [pc, #472]	; (8001d5c <main+0x310>)
 8001b84:	4876      	ldr	r0, [pc, #472]	; (8001d60 <main+0x314>)
 8001b86:	f001 fe1f 	bl	80037c8 <HAL_I2S_Receive_DMA>

	// Create instance of neural network
	ai_err = ai_small_words_model_create(&small_words_model,
 8001b8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fdd4 	bl	8005740 <ai_small_words_model_create>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 8001b9e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001ba2:	6013      	str	r3, [r2, #0]
	AI_SMALL_WORDS_MODEL_DATA_CONFIG);
	if (ai_err.type != AI_ERROR_NONE) {
 8001ba4:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001ba8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d017      	beq.n	8001be2 <main+0x196>
		buf_len = sprintf(b, "Error: could not create NN instance\r\n");
 8001bb2:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001bb6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001bba:	496a      	ldr	r1, [pc, #424]	; (8001d64 <main+0x318>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f009 fa5b 	bl	800b078 <siprintf>
 8001bc2:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001bc6:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) b, buf_len, 100);
 8001bc8:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f507 5130 	add.w	r1, r7, #11264	; 0x2c00
 8001bd4:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8001bd8:	2364      	movs	r3, #100	; 0x64
 8001bda:	4863      	ldr	r0, [pc, #396]	; (8001d68 <main+0x31c>)
 8001bdc:	f003 f94d 	bl	8004e7a <HAL_UART_Transmit>
		while (1)
 8001be0:	e7fe      	b.n	8001be0 <main+0x194>
			;
	}

	// Initialize neural network
	if (!ai_small_words_model_init(small_words_model, &ai_params)) {
 8001be2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001be6:	3b04      	subs	r3, #4
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bee:	3b24      	subs	r3, #36	; 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f003 fdba 	bl	800576c <ai_small_words_model_init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d017      	beq.n	8001c34 <main+0x1e8>
		buf_len = sprintf(b, "Error: could not initialize NN\r\n");
 8001c04:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001c08:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001c0c:	4957      	ldr	r1, [pc, #348]	; (8001d6c <main+0x320>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f009 fa32 	bl	800b078 <siprintf>
 8001c14:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001c18:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) b, buf_len, 100);
 8001c1a:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f507 5130 	add.w	r1, r7, #11264	; 0x2c00
 8001c26:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8001c2a:	2364      	movs	r3, #100	; 0x64
 8001c2c:	484e      	ldr	r0, [pc, #312]	; (8001d68 <main+0x31c>)
 8001c2e:	f003 f924 	bl	8004e7a <HAL_UART_Transmit>
		while (1)
 8001c32:	e7fe      	b.n	8001c32 <main+0x1e6>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		if (rxstate == 1) {
 8001c34:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <main+0x324>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d134      	bne.n	8001ca6 <main+0x25a>
			// Filter the first half of PDM values and store the results in an intermediate buffer
			PDM_Filter(&pdmRxBuf[0], &MidBuffer[0], &PDM1_filter_handler);
 8001c3c:	4a4d      	ldr	r2, [pc, #308]	; (8001d74 <main+0x328>)
 8001c3e:	494e      	ldr	r1, [pc, #312]	; (8001d78 <main+0x32c>)
 8001c40:	4846      	ldr	r0, [pc, #280]	; (8001d5c <main+0x310>)
 8001c42:	f005 fca5 	bl	8007590 <PDM_Filter>

			// The mid buffer has length 16 because the PDM is configured to produce 16 samples
			// of PCM each time it is called
			for (int i = 0; i < 16; i++) {
 8001c46:	2300      	movs	r3, #0
 8001c48:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001c4c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01e      	b.n	8001c92 <main+0x246>
				fifobuf[fifo_w_ptr] = MidBuffer[i];
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <main+0x330>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <main+0x32c>)
 8001c5c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001c60:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c6a:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <main+0x334>)
 8001c6c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				fifo_w_ptr++;
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <main+0x330>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <main+0x330>)
 8001c7a:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 16; i++) {
 8001c7c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001c80:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001c8c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001c96:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	ddd9      	ble.n	8001c54 <main+0x208>
			}

			// Reset rx state
			rxstate = 0;
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <main+0x324>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]

		}

		if (rxstate == 2) {
 8001ca6:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <main+0x324>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d134      	bne.n	8001d18 <main+0x2cc>
			// Filter the second half of PDM values and store the results in an intermediate buffer
			PDM_Filter(&pdmRxBuf[128], &MidBuffer[0], &PDM1_filter_handler);
 8001cae:	4a31      	ldr	r2, [pc, #196]	; (8001d74 <main+0x328>)
 8001cb0:	4931      	ldr	r1, [pc, #196]	; (8001d78 <main+0x32c>)
 8001cb2:	4834      	ldr	r0, [pc, #208]	; (8001d84 <main+0x338>)
 8001cb4:	f005 fc6c 	bl	8007590 <PDM_Filter>
			for (int i = 0; i < 16; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001cbe:	f102 0220 	add.w	r2, r2, #32
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e01e      	b.n	8001d04 <main+0x2b8>
				fifobuf[fifo_w_ptr] = MidBuffer[i];
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <main+0x330>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <main+0x32c>)
 8001cce:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001cd2:	f103 0320 	add.w	r3, r3, #32
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <main+0x334>)
 8001cde:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				fifo_w_ptr++;
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <main+0x330>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <main+0x330>)
 8001cec:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 16; i++) {
 8001cee:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001cf2:	f103 0320 	add.w	r3, r3, #32
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001cfe:	f102 0220 	add.w	r2, r2, #32
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001d08:	f103 0320 	add.w	r3, r3, #32
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	ddd9      	ble.n	8001cc6 <main+0x27a>
			}
			// Reset rx state
			rxstate = 0;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <main+0x324>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
		}

		// When the PCM buffer is full, compute the MFCCs
		if (fifo_w_ptr == FIFO_BUF_DIM) {
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <main+0x330>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	f5b3 5ffe 	cmp.w	r3, #8128	; 0x1fc0
 8001d20:	d188      	bne.n	8001c34 <main+0x1e8>
			// Stop the DMA
			HAL_I2S_DMAPause(&hi2s2);
 8001d22:	480f      	ldr	r0, [pc, #60]	; (8001d60 <main+0x314>)
 8001d24:	f001 fe0c 	bl	8003940 <HAL_I2S_DMAPause>

			// Reset the buffer pointer to the beginning
			fifo_w_ptr = 0;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <main+0x330>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d32:	4815      	ldr	r0, [pc, #84]	; (8001d88 <main+0x33c>)
 8001d34:	f001 fbed 	bl	8003512 <HAL_GPIO_TogglePin>

			for (int i = 0; i < FIFO_BUF_DIM; i++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001d3e:	f102 021c 	add.w	r2, r2, #28
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	e05d      	b.n	8001e02 <main+0x3b6>
 8001d46:	bf00      	nop
 8001d48:	0801161c 	.word	0x0801161c
 8001d4c:	08011634 	.word	0x08011634
 8001d50:	40040440 	.word	0x40040440
 8001d54:	0002ef54 	.word	0x0002ef54
 8001d58:	00040440 	.word	0x00040440
 8001d5c:	20002290 	.word	0x20002290
 8001d60:	200024d4 	.word	0x200024d4
 8001d64:	080115c0 	.word	0x080115c0
 8001d68:	20002490 	.word	0x20002490
 8001d6c:	080115e8 	.word	0x080115e8
 8001d70:	20001165 	.word	0x20001165
 8001d74:	200064a8 	.word	0x200064a8
 8001d78:	20002270 	.word	0x20002270
 8001d7c:	20001166 	.word	0x20001166
 8001d80:	2000251c 	.word	0x2000251c
 8001d84:	20002390 	.word	0x20002390
 8001d88:	40020c00 	.word	0x40020c00
				int l = sprintf(b, PRI_BYTES_2 "\r\n",
						ARG_BYTES_BE_2(fifobuf[i]));
 8001d8c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001d90:	f103 031c 	add.w	r3, r3, #28
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4ab7      	ldr	r2, [pc, #732]	; (8002078 <main+0x62c>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	781b      	ldrb	r3, [r3, #0]
				int l = sprintf(b, PRI_BYTES_2 "\r\n",
 8001da0:	4619      	mov	r1, r3
						ARG_BYTES_BE_2(fifobuf[i]));
 8001da2:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001da6:	f103 031c 	add.w	r3, r3, #28
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4ab2      	ldr	r2, [pc, #712]	; (8002078 <main+0x62c>)
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
				int l = sprintf(b, PRI_BYTES_2 "\r\n",
 8001db4:	f507 5030 	add.w	r0, r7, #11264	; 0x2c00
 8001db8:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	49af      	ldr	r1, [pc, #700]	; (800207c <main+0x630>)
 8001dc0:	f009 f95a 	bl	800b078 <siprintf>
 8001dc4:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001dc8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001dcc:	6018      	str	r0, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) b, l,
 8001dce:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001dd2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f507 5130 	add.w	r1, r7, #11264	; 0x2c00
 8001dde:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de6:	48a6      	ldr	r0, [pc, #664]	; (8002080 <main+0x634>)
 8001de8:	f003 f847 	bl	8004e7a <HAL_UART_Transmit>
			for (int i = 0; i < FIFO_BUF_DIM; i++) {
 8001dec:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001df0:	f103 031c 	add.w	r3, r3, #28
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001dfc:	f102 021c 	add.w	r2, r2, #28
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001e06:	f103 031c 	add.w	r3, r3, #28
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f5b3 5ffe 	cmp.w	r3, #8128	; 0x1fc0
 8001e10:	dbbc      	blt.n	8001d8c <main+0x340>
				HAL_MAX_DELAY);
			}

			// Temporary value to compute the number of slides the below algorithm computes
			// With window = 128 and hot = 64 => slides = 124
			int slides = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001e18:	f102 0218 	add.w	r2, r2, #24
 8001e1c:	6013      	str	r3, [r2, #0]
			int mfccs_idx = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001e24:	f102 0214 	add.w	r2, r2, #20
 8001e28:	6013      	str	r3, [r2, #0]

			// Perform a sliding window over the PCM buffer
			for (int i = 0; i < (FIFO_BUF_DIM - HOP_LENGTH); i += HOP_LENGTH)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001e30:	f102 0210 	add.w	r2, r2, #16
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e10c      	b.n	8002052 <main+0x606>
			{

				slides++;
 8001e38:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001e3c:	f103 0318 	add.w	r3, r3, #24
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001e48:	f102 0218 	add.w	r2, r2, #24
 8001e4c:	6013      	str	r3, [r2, #0]

				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e52:	488c      	ldr	r0, [pc, #560]	; (8002084 <main+0x638>)
 8001e54:	f001 fb5d 	bl	8003512 <HAL_GPIO_TogglePin>
				// Fill an intermediate buffer with a number of elements equal to the window size
				for (int j = 0; j < WIN_LENGTH; j++) {
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001e5e:	f102 020c 	add.w	r2, r2, #12
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	e021      	b.n	8001eaa <main+0x45e>
					pcm_data[j].r = (fft_t) fifobuf[i + j];
 8001e66:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001e6a:	f103 0310 	add.w	r3, r3, #16
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001e74:	f103 030c 	add.w	r3, r3, #12
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a7e      	ldr	r2, [pc, #504]	; (8002078 <main+0x62c>)
 8001e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e82:	4619      	mov	r1, r3
 8001e84:	4a80      	ldr	r2, [pc, #512]	; (8002088 <main+0x63c>)
 8001e86:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001e8a:	f103 030c 	add.w	r3, r3, #12
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				for (int j = 0; j < WIN_LENGTH; j++) {
 8001e94:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001e98:	f103 030c 	add.w	r3, r3, #12
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001ea4:	f102 020c 	add.w	r2, r2, #12
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001eae:	f103 030c 	add.w	r3, r3, #12
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2bff      	cmp	r3, #255	; 0xff
 8001eb6:	ddd6      	ble.n	8001e66 <main+0x41a>
				 for (int i = 0; i < 128; i++) {
				 pcm_data[i].r = pcm_buf[i];
				 }*/

				// Compute the FFT
				fft_permutate(pcm_data, bits);
 8001eb8:	4b74      	ldr	r3, [pc, #464]	; (800208c <main+0x640>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4872      	ldr	r0, [pc, #456]	; (8002088 <main+0x63c>)
 8001ec0:	f7ff fd6e 	bl	80019a0 <fft_permutate>
				fft_forward(pcm_data, bits);
 8001ec4:	4b71      	ldr	r3, [pc, #452]	; (800208c <main+0x640>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	486f      	ldr	r0, [pc, #444]	; (8002088 <main+0x63c>)
 8001ecc:	f7ff fb94 	bl	80015f8 <fft_forward>

				// make FFT results purely real
				for (int i = 0; i < WIN_LENGTH; i++) {
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001ed6:	f102 0208 	add.w	r2, r2, #8
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e021      	b.n	8001f22 <main+0x4d6>
					spectrum[i] = pcm_data[i].r;
 8001ede:	4a6a      	ldr	r2, [pc, #424]	; (8002088 <main+0x63c>)
 8001ee0:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001ee4:	f103 0308 	add.w	r3, r3, #8
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb18 	bl	8000524 <__aeabi_i2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4865      	ldr	r0, [pc, #404]	; (8002090 <main+0x644>)
 8001efa:	f507 5132 	add.w	r1, r7, #11392	; 0x2c80
 8001efe:	f101 0108 	add.w	r1, r1, #8
 8001f02:	6809      	ldr	r1, [r1, #0]
 8001f04:	00c9      	lsls	r1, r1, #3
 8001f06:	4401      	add	r1, r0
 8001f08:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < WIN_LENGTH; i++) {
 8001f0c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001f10:	f103 0308 	add.w	r3, r3, #8
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001f1c:	f102 0208 	add.w	r2, r2, #8
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001f26:	f103 0308 	add.w	r3, r3, #8
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2bff      	cmp	r3, #255	; 0xff
 8001f2e:	ddd6      	ble.n	8001ede <main+0x492>
				}

				// Compute the MFCCs
				int num_mfccs = 2;
 8001f30:	2302      	movs	r3, #2
 8001f32:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001f36:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001f3a:	6013      	str	r3, [r2, #0]
				for (int coeff = 0; coeff < num_mfccs; coeff++) {
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001f42:	f102 0204 	add.w	r2, r2, #4
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e067      	b.n	800201a <main+0x5ce>
					float mfcc_result = GetCoefficient(spectrum, 8000,
 8001f4a:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001f4e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001f58:	f103 0304 	add.w	r3, r3, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f64:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001f68:	4849      	ldr	r0, [pc, #292]	; (8002090 <main+0x644>)
 8001f6a:	f7ff f841 	bl	8000ff0 <GetCoefficient>
 8001f6e:	ec53 2b10 	vmov	r2, r3, d0
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fe37 	bl	8000be8 <__aeabi_d2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001f80:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001f84:	6013      	str	r3, [r2, #0]
							num_mfccs,
							WIN_LENGTH, coeff);
					in_data[mfccs_idx] = (ai_float) mfcc_result;
 8001f86:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001f8a:	3b30      	subs	r3, #48	; 0x30
 8001f8c:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001f90:	f102 0214 	add.w	r2, r2, #20
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001f9e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	601a      	str	r2, [r3, #0]
					mfccs_idx++;
 8001fa6:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001faa:	f103 0314 	add.w	r3, r3, #20
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001fb6:	f102 0214 	add.w	r2, r2, #20
 8001fba:	6013      	str	r3, [r2, #0]
					int l = sprintf(b, "%f\r\n", (ai_float) mfcc_result);
 8001fbc:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001fc0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	f7fe fabf 	bl	8000548 <__aeabi_f2d>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	f507 5030 	add.w	r0, r7, #11264	; 0x2c00
 8001fd2:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 8001fd6:	492f      	ldr	r1, [pc, #188]	; (8002094 <main+0x648>)
 8001fd8:	f009 f84e 	bl	800b078 <siprintf>
 8001fdc:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001fe0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001fe4:	6018      	str	r0, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) b, l,
 8001fe6:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001fea:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	f507 5130 	add.w	r1, r7, #11264	; 0x2c00
 8001ff6:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffe:	4820      	ldr	r0, [pc, #128]	; (8002080 <main+0x634>)
 8002000:	f002 ff3b 	bl	8004e7a <HAL_UART_Transmit>
				for (int coeff = 0; coeff < num_mfccs; coeff++) {
 8002004:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8002008:	f103 0304 	add.w	r3, r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8002014:	f102 0204 	add.w	r2, r2, #4
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800201e:	f103 0304 	add.w	r3, r3, #4
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8002028:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	db8b      	blt.n	8001f4a <main+0x4fe>
				//buf_len = sprintf(b, "%d-- Slide: %d, Frame: %d ---\r\n",
				//		mfccs_idx, slides, i);
				//HAL_UART_Transmit(&huart2, (uint8_t*) b, buf_len,
				//HAL_MAX_DELAY);

				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8002032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002036:	4813      	ldr	r0, [pc, #76]	; (8002084 <main+0x638>)
 8002038:	f001 fa6b 	bl	8003512 <HAL_GPIO_TogglePin>
			for (int i = 0; i < (FIFO_BUF_DIM - HOP_LENGTH); i += HOP_LENGTH)
 800203c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8002040:	f103 0310 	add.w	r3, r3, #16
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3380      	adds	r3, #128	; 0x80
 8002048:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 800204c:	f102 0210 	add.w	r2, r2, #16
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8002056:	f103 0310 	add.w	r3, r3, #16
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002060:	f6ff aeea 	blt.w	8001e38 <main+0x3ec>
			}

			// The computation of the MFCCs is completed, so start again acquiring new signals
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8002064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <main+0x638>)
 800206a:	f001 fa52 	bl	8003512 <HAL_GPIO_TogglePin>
			HAL_I2S_DMAResume(&hi2s2);
 800206e:	480a      	ldr	r0, [pc, #40]	; (8002098 <main+0x64c>)
 8002070:	f001 fcc8 	bl	8003a04 <HAL_I2S_DMAResume>
		if (rxstate == 1) {
 8002074:	e5de      	b.n	8001c34 <main+0x1e8>
 8002076:	bf00      	nop
 8002078:	2000251c 	.word	0x2000251c
 800207c:	0801160c 	.word	0x0801160c
 8002080:	20002490 	.word	0x20002490
 8002084:	40020c00 	.word	0x40020c00
 8002088:	20001208 	.word	0x20001208
 800208c:	20000400 	.word	0x20000400
 8002090:	20001a70 	.word	0x20001a70
 8002094:	08011614 	.word	0x08011614
 8002098:	200024d4 	.word	0x200024d4

0800209c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b094      	sub	sp, #80	; 0x50
 80020a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	2230      	movs	r2, #48	; 0x30
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f007 ff48 	bl	8009f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(10);
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <SystemClock_Config+0xd4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c8:	4a29      	ldr	r2, [pc, #164]	; (8002170 <SystemClock_Config+0xd4>)
 80020ca:	f043 030a 	orr.w	r3, r3, #10
 80020ce:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <SystemClock_Config+0xd4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <SystemClock_Config+0xd4>)
 80020d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020da:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <SystemClock_Config+0xd4>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <SystemClock_Config+0xd4>)
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <SystemClock_Config+0xd4>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <SystemClock_Config+0xd8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <SystemClock_Config+0xd8>)
 8002102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <SystemClock_Config+0xd8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002114:	2302      	movs	r3, #2
 8002116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002118:	2301      	movs	r3, #1
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800211c:	2310      	movs	r3, #16
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002120:	2300      	movs	r3, #0
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002124:	2300      	movs	r3, #0
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002128:	f107 0320 	add.w	r3, r7, #32
 800212c:	4618      	mov	r0, r3
 800212e:	f002 f8a7 	bl	8004280 <HAL_RCC_OscConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002138:	f000 f932 	bl	80023a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213c:	230f      	movs	r3, #15
 800213e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fb0a 	bl	8004770 <HAL_RCC_ClockConfig>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002162:	f000 f91d 	bl	80023a0 <Error_Handler>
  }
}
 8002166:	bf00      	nop
 8002168:	3750      	adds	r7, #80	; 0x50
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000

08002178 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <MX_CRC_Init+0x30>)
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <MX_CRC_Init+0x34>)
 8002180:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002182:	4809      	ldr	r0, [pc, #36]	; (80021a8 <MX_CRC_Init+0x30>)
 8002184:	f000 fc83 	bl	8002a8e <HAL_CRC_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800218e:	f000 f907 	bl	80023a0 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <MX_CRC_Init+0x30>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <MX_CRC_Init+0x30>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20001a08 	.word	0x20001a08
 80021ac:	40023000 	.word	0x40023000

080021b0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_I2S2_Init+0x54>)
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <MX_I2S2_Init+0x58>)
 80021b8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <MX_I2S2_Init+0x54>)
 80021bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021c0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <MX_I2S2_Init+0x54>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_I2S2_Init+0x54>)
 80021ca:	2203      	movs	r2, #3
 80021cc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <MX_I2S2_Init+0x54>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <MX_I2S2_Init+0x54>)
 80021d6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80021da:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MX_I2S2_Init+0x54>)
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MX_I2S2_Init+0x54>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_I2S2_Init+0x54>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_I2S2_Init+0x54>)
 80021f0:	f001 f9aa 	bl	8003548 <HAL_I2S_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80021fa:	f000 f8d1 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200024d4 	.word	0x200024d4
 8002208:	40003800 	.word	0x40003800

0800220c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <MX_USART2_UART_Init+0x50>)
 8002214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 8002218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800221c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_USART2_UART_Init+0x4c>)
 8002244:	f002 fdcc 	bl	8004de0 <HAL_UART_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800224e:	f000 f8a7 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20002490 	.word	0x20002490
 800225c:	40004400 	.word	0x40004400

08002260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_DMA_Init+0x3c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <MX_DMA_Init+0x3c>)
 8002270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_DMA_Init+0x3c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	200e      	movs	r0, #14
 8002288:	f000 fbcb 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800228c:	200e      	movs	r0, #14
 800228e:	f000 fbe4 	bl	8002a5a <HAL_NVIC_EnableIRQ>

}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <MX_GPIO_Init+0xb8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a26      	ldr	r2, [pc, #152]	; (8002358 <MX_GPIO_Init+0xb8>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <MX_GPIO_Init+0xb8>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <MX_GPIO_Init+0xb8>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <MX_GPIO_Init+0xb8>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_GPIO_Init+0xb8>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_GPIO_Init+0xb8>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a18      	ldr	r2, [pc, #96]	; (8002358 <MX_GPIO_Init+0xb8>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MX_GPIO_Init+0xb8>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <MX_GPIO_Init+0xb8>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <MX_GPIO_Init+0xb8>)
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <MX_GPIO_Init+0xb8>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <MX_GPIO_Init+0xbc>)
 800232e:	f001 f8d7 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8002332:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	4804      	ldr	r0, [pc, #16]	; (800235c <MX_GPIO_Init+0xbc>)
 800234c:	f000 ff2c 	bl	80031a8 <HAL_GPIO_Init>

}
 8002350:	bf00      	nop
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40020c00 	.word	0x40020c00

08002360 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	rxstate = 1;
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_I2S_RxHalfCpltCallback+0x1c>)
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20001165 	.word	0x20001165

08002380 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	rxstate = 2;
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_I2S_RxCpltCallback+0x1c>)
 800238a:	2202      	movs	r2, #2
 800238c:	701a      	strb	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20001165 	.word	0x20001165

080023a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023a8:	e7fe      	b.n	80023a8 <Error_Handler+0x8>
	...

080023ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_MspInit+0x4c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <HAL_MspInit+0x4c>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <HAL_MspInit+0x4c>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <HAL_CRC_MspInit+0x3c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10d      	bne.n	800242a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_CRC_MspInit+0x40>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_CRC_MspInit+0x40>)
 8002418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_CRC_MspInit+0x40>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023000 	.word	0x40023000
 800243c:	40023800 	.word	0x40023800

08002440 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08e      	sub	sp, #56	; 0x38
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a4a      	ldr	r2, [pc, #296]	; (8002594 <HAL_I2S_MspInit+0x154>)
 800246c:	4293      	cmp	r3, r2
 800246e:	f040 808c 	bne.w	800258a <HAL_I2S_MspInit+0x14a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002472:	2301      	movs	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002476:	23c0      	movs	r3, #192	; 0xc0
 8002478:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 800247a:	2305      	movs	r3, #5
 800247c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4618      	mov	r0, r3
 8002484:	f002 fb6e 	bl	8004b64 <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800248e:	f7ff ff87 	bl	80023a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_I2S_MspInit+0x158>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_I2S_MspInit+0x158>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_I2S_MspInit+0x158>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_I2S_MspInit+0x158>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a38      	ldr	r2, [pc, #224]	; (8002598 <HAL_I2S_MspInit+0x158>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_I2S_MspInit+0x158>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	4b32      	ldr	r3, [pc, #200]	; (8002598 <HAL_I2S_MspInit+0x158>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a31      	ldr	r2, [pc, #196]	; (8002598 <HAL_I2S_MspInit+0x158>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <HAL_I2S_MspInit+0x158>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024e6:	2308      	movs	r3, #8
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f6:	2305      	movs	r3, #5
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	4826      	ldr	r0, [pc, #152]	; (800259c <HAL_I2S_MspInit+0x15c>)
 8002502:	f000 fe51 	bl	80031a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002506:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002518:	2305      	movs	r3, #5
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002520:	4619      	mov	r1, r3
 8002522:	481f      	ldr	r0, [pc, #124]	; (80025a0 <HAL_I2S_MspInit+0x160>)
 8002524:	f000 fe40 	bl	80031a8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 800252a:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_I2S_MspInit+0x168>)
 800252c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 800253c:	2200      	movs	r2, #0
 800253e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 8002542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002546:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 800254a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800254e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 8002552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002556:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 800255a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800255e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 8002562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002566:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 800256a:	2200      	movs	r2, #0
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800256e:	480d      	ldr	r0, [pc, #52]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 8002570:	f000 faaa 	bl	8002ac8 <HAL_DMA_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 800257a:	f7ff ff11 	bl	80023a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 8002582:	63da      	str	r2, [r3, #60]	; 0x3c
 8002584:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_I2S_MspInit+0x164>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3738      	adds	r7, #56	; 0x38
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40003800 	.word	0x40003800
 8002598:	40023800 	.word	0x40023800
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020400 	.word	0x40020400
 80025a4:	20001a10 	.word	0x20001a10
 80025a8:	40026058 	.word	0x40026058

080025ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_UART_MspInit+0x84>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d12b      	bne.n	8002626 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a10      	ldr	r2, [pc, #64]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002606:	230c      	movs	r3, #12
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002616:	2307      	movs	r3, #7
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <HAL_UART_MspInit+0x8c>)
 8002622:	f000 fdc1 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002626:	bf00      	nop
 8002628:	3728      	adds	r7, #40	; 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40004400 	.word	0x40004400
 8002634:	40023800 	.word	0x40023800
 8002638:	40020000 	.word	0x40020000

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002688:	f000 f8d0 	bl	800282c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <DMA1_Stream3_IRQHandler+0x10>)
 8002696:	f000 fb1d 	bl	8002cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20001a10 	.word	0x20001a10

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f007 fbe2 	bl	8009e9c <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20020000 	.word	0x20020000
 8002704:	00000800 	.word	0x00000800
 8002708:	20001168 	.word	0x20001168
 800270c:	20006508 	.word	0x20006508

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <SystemInit+0x20>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <SystemInit+0x20>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273a:	490e      	ldr	r1, [pc, #56]	; (8002774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002750:	4c0b      	ldr	r4, [pc, #44]	; (8002780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800275e:	f7ff ffd7 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f007 fbb3 	bl	8009ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7ff f971 	bl	8001a4c <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800276c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	20001144 	.word	0x20001144
  ldr r2, =_sidata
 8002778:	08040f78 	.word	0x08040f78
  ldr r2, =_sbss
 800277c:	20001148 	.word	0x20001148
  ldr r4, =_ebss
 8002780:	20006504 	.word	0x20006504

08002784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC_IRQHandler>
	...

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <HAL_Init+0x40>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_Init+0x40>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_Init+0x40>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f000 f92b 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f000 f808 	bl	80027cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027bc:	f7ff fdf6 	bl	80023ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00

080027cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x54>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_InitTick+0x58>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f943 	bl	8002a76 <HAL_SYSTICK_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00e      	b.n	8002818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b0f      	cmp	r3, #15
 80027fe:	d80a      	bhi.n	8002816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002800:	2200      	movs	r2, #0
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002808:	f000 f90b 	bl	8002a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800280c:	4a06      	ldr	r2, [pc, #24]	; (8002828 <HAL_InitTick+0x5c>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000404 	.word	0x20000404
 8002824:	2000040c 	.word	0x2000040c
 8002828:	20000408 	.word	0x20000408

0800282c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x20>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x24>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4413      	add	r3, r2
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_IncTick+0x24>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	2000040c 	.word	0x2000040c
 8002850:	2000649c 	.word	0x2000649c

08002854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return uwTick;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_GetTick+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	2000649c 	.word	0x2000649c

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a34:	f7ff ff3e 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff ff8e 	bl	8002960 <NVIC_EncodePriority>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff5d 	bl	800290c <__NVIC_SetPriority>
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff31 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffa2 	bl	80029c8 <SysTick_Config>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e00e      	b.n	8002abe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	795b      	ldrb	r3, [r3, #5]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fca3 	bl	80023fc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff febe 	bl	8002854 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e099      	b.n	8002c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b04:	e00f      	b.n	8002b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b06:	f7ff fea5 	bl	8002854 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d908      	bls.n	8002b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e078      	b.n	8002c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e8      	bne.n	8002b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_DMA_Init+0x158>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d107      	bne.n	8002b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0307 	bic.w	r3, r3, #7
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d117      	bne.n	8002bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fa6f 	bl	80030b0 <DMA_CheckFifoParam>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002be6:	2301      	movs	r3, #1
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa26 	bl	8003044 <DMA_CalcBaseAndBitshift>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	223f      	movs	r2, #63	; 0x3f
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	f010803f 	.word	0xf010803f

08002c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Start_IT+0x26>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e040      	b.n	8002ccc <HAL_DMA_Start_IT+0xa8>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d12f      	bne.n	8002cbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f9b8 	bl	8002fe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	223f      	movs	r2, #63	; 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0216 	orr.w	r2, r2, #22
 8002c92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e005      	b.n	8002cca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ce0:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <HAL_DMA_IRQHandler+0x258>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a92      	ldr	r2, [pc, #584]	; (8002f30 <HAL_DMA_IRQHandler+0x25c>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	2208      	movs	r2, #8
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2201      	movs	r2, #1
 8002d46:	409a      	lsls	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	2201      	movs	r2, #1
 8002d64:	409a      	lsls	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2204      	movs	r2, #4
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2210      	movs	r2, #16
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d043      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03c      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2210      	movs	r2, #16
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d018      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d024      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	e01f      	b.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
 8002e14:	e016      	b.n	8002e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0208 	bic.w	r2, r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	2220      	movs	r2, #32
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 808e 	beq.w	8002f72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8086 	beq.w	8002f72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d136      	bne.n	8002eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0216 	bic.w	r2, r2, #22
 8002e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_DMA_IRQHandler+0x1da>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0208 	bic.w	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	223f      	movs	r2, #63	; 0x3f
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d07d      	beq.n	8002fde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
        }
        return;
 8002eea:	e078      	b.n	8002fde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01c      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d108      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d030      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e02b      	b.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e022      	b.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
 8002f2c:	20000404 	.word	0x20000404
 8002f30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0210 	bic.w	r2, r2, #16
 8002f50:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d032      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d022      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2205      	movs	r2, #5
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d307      	bcc.n	8002fba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f2      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x2ca>
 8002fb8:	e000      	b.n	8002fbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e000      	b.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fde:	bf00      	nop
    }
  }
}
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop

08002fe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d108      	bne.n	8003028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003026:	e007      	b.n	8003038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3b10      	subs	r3, #16
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <DMA_CalcBaseAndBitshift+0x68>)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d909      	bls.n	8003086 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
 8003084:	e007      	b.n	8003096 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	aaaaaaab 	.word	0xaaaaaaab
 80030ac:	080118a4 	.word	0x080118a4

080030b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11f      	bne.n	800310a <DMA_CheckFifoParam+0x5a>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d856      	bhi.n	800317e <DMA_CheckFifoParam+0xce>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <DMA_CheckFifoParam+0x28>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030fb 	.word	0x080030fb
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	0800317f 	.word	0x0800317f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d046      	beq.n	8003182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f8:	e043      	b.n	8003182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003102:	d140      	bne.n	8003186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003108:	e03d      	b.n	8003186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003112:	d121      	bne.n	8003158 <DMA_CheckFifoParam+0xa8>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d837      	bhi.n	800318a <DMA_CheckFifoParam+0xda>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <DMA_CheckFifoParam+0x70>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	08003137 	.word	0x08003137
 8003128:	08003131 	.word	0x08003131
 800312c:	08003149 	.word	0x08003149
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e030      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d025      	beq.n	800318e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003146:	e022      	b.n	800318e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003150:	d11f      	bne.n	8003192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003156:	e01c      	b.n	8003192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d903      	bls.n	8003166 <DMA_CheckFifoParam+0xb6>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d003      	beq.n	800316c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003164:	e018      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      break;
 800316a:	e015      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e00b      	b.n	8003196 <DMA_CheckFifoParam+0xe6>
      break;
 800317e:	bf00      	nop
 8003180:	e00a      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e008      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e006      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;   
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
    }
  } 
  
  return status; 
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e16b      	b.n	800349c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 815a 	bne.w	8003496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d005      	beq.n	80031fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d130      	bne.n	800325c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	2203      	movs	r2, #3
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003230:	2201      	movs	r2, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 0201 	and.w	r2, r3, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d017      	beq.n	8003298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d123      	bne.n	80032ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80b4 	beq.w	8003496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a5f      	ldr	r2, [pc, #380]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334a:	4a5b      	ldr	r2, [pc, #364]	; (80034b8 <HAL_GPIO_Init+0x310>)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a52      	ldr	r2, [pc, #328]	; (80034bc <HAL_GPIO_Init+0x314>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <HAL_GPIO_Init+0x226>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a51      	ldr	r2, [pc, #324]	; (80034c0 <HAL_GPIO_Init+0x318>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x222>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a50      	ldr	r2, [pc, #320]	; (80034c4 <HAL_GPIO_Init+0x31c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x21e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a4f      	ldr	r2, [pc, #316]	; (80034c8 <HAL_GPIO_Init+0x320>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x21a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4e      	ldr	r2, [pc, #312]	; (80034cc <HAL_GPIO_Init+0x324>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x216>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4d      	ldr	r2, [pc, #308]	; (80034d0 <HAL_GPIO_Init+0x328>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x212>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4c      	ldr	r2, [pc, #304]	; (80034d4 <HAL_GPIO_Init+0x32c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x20e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4b      	ldr	r2, [pc, #300]	; (80034d8 <HAL_GPIO_Init+0x330>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x20a>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00e      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033b2:	2308      	movs	r3, #8
 80033b4:	e00c      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033b6:	2306      	movs	r3, #6
 80033b8:	e00a      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033be:	2304      	movs	r3, #4
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ce:	2300      	movs	r3, #0
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e0:	4935      	ldr	r1, [pc, #212]	; (80034b8 <HAL_GPIO_Init+0x310>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_GPIO_Init+0x334>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003412:	4a32      	ldr	r2, [pc, #200]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_GPIO_Init+0x334>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <HAL_GPIO_Init+0x334>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_GPIO_Init+0x334>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	f67f ae90 	bls.w	80031c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020800 	.word	0x40020800
 80034c8:	40020c00 	.word	0x40020c00
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40021400 	.word	0x40021400
 80034d4:	40021800 	.word	0x40021800
 80034d8:	40021c00 	.word	0x40021c00
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f0:	787b      	ldrb	r3, [r7, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034fc:	e003      	b.n	8003506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	041a      	lsls	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	619a      	str	r2, [r3, #24]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003524:	887a      	ldrh	r2, [r7, #2]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4013      	ands	r3, r2
 800352a:	041a      	lsls	r2, r3, #16
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43d9      	mvns	r1, r3
 8003530:	887b      	ldrh	r3, [r7, #2]
 8003532:	400b      	ands	r3, r1
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e128      	b.n	80037ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a90      	ldr	r2, [pc, #576]	; (80037b4 <HAL_I2S_Init+0x26c>)
 8003572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fe ff63 	bl	8002440 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003590:	f023 030f 	bic.w	r3, r3, #15
 8003594:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2202      	movs	r2, #2
 800359c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d060      	beq.n	8003668 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80035ae:	2310      	movs	r3, #16
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e001      	b.n	80035b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d802      	bhi.n	80035c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80035c6:	2001      	movs	r0, #1
 80035c8:	f001 fbae 	bl	8004d28 <HAL_RCCEx_GetPeriphCLKFreq>
 80035cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d6:	d125      	bne.n	8003624 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	3305      	adds	r3, #5
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	e01f      	b.n	8003642 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	fbb2 f2f3 	udiv	r2, r2, r3
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	461a      	mov	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	3305      	adds	r3, #5
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e00e      	b.n	8003642 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fbb2 f2f3 	udiv	r2, r2, r3
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	461a      	mov	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	3305      	adds	r3, #5
 8003640:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4a5c      	ldr	r2, [pc, #368]	; (80037b8 <HAL_I2S_Init+0x270>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	08db      	lsrs	r3, r3, #3
 800364c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e003      	b.n	8003670 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003668:	2302      	movs	r3, #2
 800366a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d902      	bls.n	800367c <HAL_I2S_Init+0x134>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2bff      	cmp	r3, #255	; 0xff
 800367a:	d907      	bls.n	800368c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f043 0210 	orr.w	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e08f      	b.n	80037ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	ea42 0103 	orr.w	r1, r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	430a      	orrs	r2, r1
 800369e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036aa:	f023 030f 	bic.w	r3, r3, #15
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6851      	ldr	r1, [r2, #4]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6892      	ldr	r2, [r2, #8]
 80036b6:	4311      	orrs	r1, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68d2      	ldr	r2, [r2, #12]
 80036bc:	4311      	orrs	r1, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6992      	ldr	r2, [r2, #24]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d161      	bne.n	800379c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a38      	ldr	r2, [pc, #224]	; (80037bc <HAL_I2S_Init+0x274>)
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a37      	ldr	r2, [pc, #220]	; (80037c0 <HAL_I2S_Init+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_I2S_Init+0x1a4>
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <HAL_I2S_Init+0x27c>)
 80036ea:	e001      	b.n	80036f0 <HAL_I2S_Init+0x1a8>
 80036ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	4932      	ldr	r1, [pc, #200]	; (80037c0 <HAL_I2S_Init+0x278>)
 80036f8:	428a      	cmp	r2, r1
 80036fa:	d101      	bne.n	8003700 <HAL_I2S_Init+0x1b8>
 80036fc:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <HAL_I2S_Init+0x27c>)
 80036fe:	e001      	b.n	8003704 <HAL_I2S_Init+0x1bc>
 8003700:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003704:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003708:	f023 030f 	bic.w	r3, r3, #15
 800370c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_I2S_Init+0x278>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_I2S_Init+0x1d4>
 8003718:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_I2S_Init+0x27c>)
 800371a:	e001      	b.n	8003720 <HAL_I2S_Init+0x1d8>
 800371c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003720:	2202      	movs	r2, #2
 8003722:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <HAL_I2S_Init+0x278>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_I2S_Init+0x1ea>
 800372e:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_I2S_Init+0x27c>)
 8003730:	e001      	b.n	8003736 <HAL_I2S_Init+0x1ee>
 8003732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003742:	d003      	beq.n	800374c <HAL_I2S_Init+0x204>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800374c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e001      	b.n	8003758 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003762:	4313      	orrs	r3, r2
 8003764:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800376c:	4313      	orrs	r3, r2
 800376e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003776:	4313      	orrs	r3, r2
 8003778:	b29a      	uxth	r2, r3
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	4313      	orrs	r3, r2
 800377e:	b29b      	uxth	r3, r3
 8003780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003784:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <HAL_I2S_Init+0x278>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_I2S_Init+0x24c>
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_I2S_Init+0x27c>)
 8003792:	e001      	b.n	8003798 <HAL_I2S_Init+0x250>
 8003794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003798:	897a      	ldrh	r2, [r7, #10]
 800379a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3720      	adds	r7, #32
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	08003cb9 	.word	0x08003cb9
 80037b8:	cccccccd 	.word	0xcccccccd
 80037bc:	08003dcd 	.word	0x08003dcd
 80037c0:	40003800 	.word	0x40003800
 80037c4:	40003400 	.word	0x40003400

080037c8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_I2S_Receive_DMA+0x1a>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0a1      	b.n	800392a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_I2S_Receive_DMA+0x2e>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e099      	b.n	800392a <HAL_I2S_Receive_DMA+0x162>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d005      	beq.n	8003816 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	e089      	b.n	800392a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2204      	movs	r2, #4
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b03      	cmp	r3, #3
 800383a:	d002      	beq.n	8003842 <HAL_I2S_Receive_DMA+0x7a>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b05      	cmp	r3, #5
 8003840:	d10a      	bne.n	8003858 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	865a      	strh	r2, [r3, #50]	; 0x32
 8003856:	e005      	b.n	8003864 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	4a32      	ldr	r2, [pc, #200]	; (8003934 <HAL_I2S_Receive_DMA+0x16c>)
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	4a31      	ldr	r2, [pc, #196]	; (8003938 <HAL_I2S_Receive_DMA+0x170>)
 8003872:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	4a30      	ldr	r2, [pc, #192]	; (800393c <HAL_I2S_Receive_DMA+0x174>)
 800387a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388a:	d10a      	bne.n	80038a2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	4619      	mov	r1, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80038b8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80038ba:	f7ff f9b3 	bl	8002c24 <HAL_DMA_Start_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00f      	beq.n	80038e4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	f043 0208 	orr.w	r2, r3, #8
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e022      	b.n	800392a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d107      	bne.n	8003902 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003900:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	08003b97 	.word	0x08003b97
 8003938:	08003b55 	.word	0x08003b55
 800393c:	08003bb3 	.word	0x08003bb3

08003940 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_I2S_DMAPause+0x18>
 8003954:	2302      	movs	r3, #2
 8003956:	e04a      	b.n	80039ee <HAL_I2S_DMAPause+0xae>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b03      	cmp	r3, #3
 800396a:	d108      	bne.n	800397e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0202 	bic.w	r2, r2, #2
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	e032      	b.n	80039e4 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b04      	cmp	r3, #4
 8003988:	d108      	bne.n	800399c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e023      	b.n	80039e4 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d11d      	bne.n	80039e4 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0203 	bic.w	r2, r2, #3
 80039b6:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_I2S_DMAPause+0xbc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_I2S_DMAPause+0x86>
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <HAL_I2S_DMAPause+0xc0>)
 80039c4:	e001      	b.n	80039ca <HAL_I2S_DMAPause+0x8a>
 80039c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	490a      	ldr	r1, [pc, #40]	; (80039fc <HAL_I2S_DMAPause+0xbc>)
 80039d2:	428b      	cmp	r3, r1
 80039d4:	d101      	bne.n	80039da <HAL_I2S_DMAPause+0x9a>
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_I2S_DMAPause+0xc0>)
 80039d8:	e001      	b.n	80039de <HAL_I2S_DMAPause+0x9e>
 80039da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039de:	f022 0203 	bic.w	r2, r2, #3
 80039e2:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40003800 	.word	0x40003800
 8003a00:	40003400 	.word	0x40003400

08003a04 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_I2S_DMAResume+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e07d      	b.n	8003b18 <HAL_I2S_DMAResume+0x114>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d108      	bne.n	8003a42 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0202 	orr.w	r2, r2, #2
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	e056      	b.n	8003af0 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d108      	bne.n	8003a60 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	e047      	b.n	8003af0 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d141      	bne.n	8003af0 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0203 	orr.w	r2, r2, #3
 8003a7a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a28      	ldr	r2, [pc, #160]	; (8003b24 <HAL_I2S_DMAResume+0x120>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_I2S_DMAResume+0x86>
 8003a86:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <HAL_I2S_DMAResume+0x124>)
 8003a88:	e001      	b.n	8003a8e <HAL_I2S_DMAResume+0x8a>
 8003a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4923      	ldr	r1, [pc, #140]	; (8003b24 <HAL_I2S_DMAResume+0x120>)
 8003a96:	428b      	cmp	r3, r1
 8003a98:	d101      	bne.n	8003a9e <HAL_I2S_DMAResume+0x9a>
 8003a9a:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <HAL_I2S_DMAResume+0x124>)
 8003a9c:	e001      	b.n	8003aa2 <HAL_I2S_DMAResume+0x9e>
 8003a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa2:	f042 0203 	orr.w	r2, r2, #3
 8003aa6:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_I2S_DMAResume+0x120>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2S_DMAResume+0xb2>
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_I2S_DMAResume+0x124>)
 8003ab4:	e001      	b.n	8003aba <HAL_I2S_DMAResume+0xb6>
 8003ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d115      	bne.n	8003af0 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a16      	ldr	r2, [pc, #88]	; (8003b24 <HAL_I2S_DMAResume+0x120>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2S_DMAResume+0xce>
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <HAL_I2S_DMAResume+0x124>)
 8003ad0:	e001      	b.n	8003ad6 <HAL_I2S_DMAResume+0xd2>
 8003ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4911      	ldr	r1, [pc, #68]	; (8003b24 <HAL_I2S_DMAResume+0x120>)
 8003ade:	428b      	cmp	r3, r1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2S_DMAResume+0xe2>
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_I2S_DMAResume+0x124>)
 8003ae4:	e001      	b.n	8003aea <HAL_I2S_DMAResume+0xe6>
 8003ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aee:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d107      	bne.n	8003b0e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b0c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40003800 	.word	0x40003800
 8003b28:	40003400 	.word	0x40003400

08003b2c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10e      	bne.n	8003b88 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7fe fbf9 	bl	8002380 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7fe fbdb 	bl	8002360 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0203 	bic.w	r2, r2, #3
 8003bce:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f043 0208 	orr.w	r2, r3, #8
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ffa5 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	881a      	ldrh	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10e      	bne.n	8003c52 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c42:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff6d 	bl	8003b2c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	b292      	uxth	r2, r2
 8003c6e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	1c9a      	adds	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10e      	bne.n	8003cb0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ca0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fe fb68 	bl	8002380 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d13a      	bne.n	8003d4a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d109      	bne.n	8003cf2 <I2S_IRQHandler+0x3a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d102      	bne.n	8003cf2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ffb4 	bl	8003c5a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d126      	bne.n	8003d4a <I2S_IRQHandler+0x92>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d11f      	bne.n	8003d4a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d18:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	f043 0202 	orr.w	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff fefb 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d136      	bne.n	8003dc4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d109      	bne.n	8003d74 <I2S_IRQHandler+0xbc>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d102      	bne.n	8003d74 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ff45 	bl	8003bfe <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d122      	bne.n	8003dc4 <I2S_IRQHandler+0x10c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d11b      	bne.n	8003dc4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d9a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f043 0204 	orr.w	r2, r3, #4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff febe 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4aa2      	ldr	r2, [pc, #648]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003de6:	4ba2      	ldr	r3, [pc, #648]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003de8:	e001      	b.n	8003dee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a9b      	ldr	r2, [pc, #620]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e04:	4b9a      	ldr	r3, [pc, #616]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e06:	e001      	b.n	8003e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d004      	beq.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f040 8099 	bne.w	8003f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d107      	bne.n	8003e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f925 	bl	8004088 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9c8 	bl	80041e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d13a      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d035      	beq.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7e      	ldr	r2, [pc, #504]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e76:	4b7e      	ldr	r3, [pc, #504]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e78:	e001      	b.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4979      	ldr	r1, [pc, #484]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e86:	428b      	cmp	r3, r1
 8003e88:	d101      	bne.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e8a:	4b79      	ldr	r3, [pc, #484]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e8c:	e001      	b.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e96:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ea6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0202 	orr.w	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fe34 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	f040 80be 	bne.w	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80b8 	beq.w	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003efe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a59      	ldr	r2, [pc, #356]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f0a:	4b59      	ldr	r3, [pc, #356]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f0c:	e001      	b.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4954      	ldr	r1, [pc, #336]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f1a:	428b      	cmp	r3, r1
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f1e:	4b54      	ldr	r3, [pc, #336]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f20:	e001      	b.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f2a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f043 0204 	orr.w	r2, r3, #4
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff fdf6 	bl	8003b40 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f54:	e084      	b.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d107      	bne.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8be 	bl	80040ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8fd 	bl	8004184 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d12f      	bne.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d02a      	beq.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2e      	ldr	r2, [pc, #184]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fba:	e001      	b.n	8003fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4929      	ldr	r1, [pc, #164]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fce:	e001      	b.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f043 0202 	orr.w	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fda6 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d131      	bne.n	8004062 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d02c      	beq.n	8004062 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a17      	ldr	r2, [pc, #92]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004012:	4b17      	ldr	r3, [pc, #92]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004014:	e001      	b.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4912      	ldr	r1, [pc, #72]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004022:	428b      	cmp	r3, r1
 8004024:	d101      	bne.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004028:	e001      	b.n	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800402a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004032:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004042:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	f043 0204 	orr.w	r2, r3, #4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fd71 	bl	8003b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800405e:	e000      	b.n	8004062 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004060:	bf00      	nop
}
 8004062:	bf00      	nop
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40003800 	.word	0x40003800
 8004070:	40003400 	.word	0x40003400

08004074 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c99      	adds	r1, r3, #2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6251      	str	r1, [r2, #36]	; 0x24
 800409a:	881a      	ldrh	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d113      	bne.n	80040e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ffc9 	bl	8004074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	1c99      	adds	r1, r3, #2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6251      	str	r1, [r2, #36]	; 0x24
 80040fe:	8819      	ldrh	r1, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <I2SEx_TxISR_I2SExt+0x90>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <I2SEx_TxISR_I2SExt+0x22>
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <I2SEx_TxISR_I2SExt+0x94>)
 800410c:	e001      	b.n	8004112 <I2SEx_TxISR_I2SExt+0x26>
 800410e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004112:	460a      	mov	r2, r1
 8004114:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d121      	bne.n	8004172 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <I2SEx_TxISR_I2SExt+0x90>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <I2SEx_TxISR_I2SExt+0x50>
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <I2SEx_TxISR_I2SExt+0x94>)
 800413a:	e001      	b.n	8004140 <I2SEx_TxISR_I2SExt+0x54>
 800413c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	490d      	ldr	r1, [pc, #52]	; (800417c <I2SEx_TxISR_I2SExt+0x90>)
 8004148:	428b      	cmp	r3, r1
 800414a:	d101      	bne.n	8004150 <I2SEx_TxISR_I2SExt+0x64>
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <I2SEx_TxISR_I2SExt+0x94>)
 800414e:	e001      	b.n	8004154 <I2SEx_TxISR_I2SExt+0x68>
 8004150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004154:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004158:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff81 	bl	8004074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40003800 	.word	0x40003800
 8004180:	40003400 	.word	0x40003400

08004184 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68d8      	ldr	r0, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	1c99      	adds	r1, r3, #2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800419c:	b282      	uxth	r2, r0
 800419e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d113      	bne.n	80041e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ff4a 	bl	8004074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a20      	ldr	r2, [pc, #128]	; (8004278 <I2SEx_RxISR_I2SExt+0x90>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <I2SEx_RxISR_I2SExt+0x16>
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <I2SEx_RxISR_I2SExt+0x94>)
 80041fc:	e001      	b.n	8004202 <I2SEx_RxISR_I2SExt+0x1a>
 80041fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004202:	68d8      	ldr	r0, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	1c99      	adds	r1, r3, #2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800420e:	b282      	uxth	r2, r0
 8004210:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d121      	bne.n	800426e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <I2SEx_RxISR_I2SExt+0x90>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <I2SEx_RxISR_I2SExt+0x50>
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <I2SEx_RxISR_I2SExt+0x94>)
 8004236:	e001      	b.n	800423c <I2SEx_RxISR_I2SExt+0x54>
 8004238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	490d      	ldr	r1, [pc, #52]	; (8004278 <I2SEx_RxISR_I2SExt+0x90>)
 8004244:	428b      	cmp	r3, r1
 8004246:	d101      	bne.n	800424c <I2SEx_RxISR_I2SExt+0x64>
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <I2SEx_RxISR_I2SExt+0x94>)
 800424a:	e001      	b.n	8004250 <I2SEx_RxISR_I2SExt+0x68>
 800424c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004250:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004254:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ff03 	bl	8004074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40003800 	.word	0x40003800
 800427c:	40003400 	.word	0x40003400

08004280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e264      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d075      	beq.n	800438a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800429e:	4ba3      	ldr	r3, [pc, #652]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d00c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042aa:	4ba0      	ldr	r3, [pc, #640]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d112      	bne.n	80042dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b6:	4b9d      	ldr	r3, [pc, #628]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c2:	d10b      	bne.n	80042dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	4b99      	ldr	r3, [pc, #612]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05b      	beq.n	8004388 <HAL_RCC_OscConfig+0x108>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d157      	bne.n	8004388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e23f      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d106      	bne.n	80042f4 <HAL_RCC_OscConfig+0x74>
 80042e6:	4b91      	ldr	r3, [pc, #580]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a90      	ldr	r2, [pc, #576]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e01d      	b.n	8004330 <HAL_RCC_OscConfig+0xb0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0x98>
 80042fe:	4b8b      	ldr	r3, [pc, #556]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a8a      	ldr	r2, [pc, #552]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b88      	ldr	r3, [pc, #544]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a87      	ldr	r2, [pc, #540]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e00b      	b.n	8004330 <HAL_RCC_OscConfig+0xb0>
 8004318:	4b84      	ldr	r3, [pc, #528]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a83      	ldr	r2, [pc, #524]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800431e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b81      	ldr	r3, [pc, #516]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a80      	ldr	r2, [pc, #512]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800432a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe fa8c 	bl	8002854 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004340:	f7fe fa88 	bl	8002854 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e204      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004352:	4b76      	ldr	r3, [pc, #472]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0xc0>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe fa78 	bl	8002854 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe fa74 	bl	8002854 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1f0      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437a:	4b6c      	ldr	r3, [pc, #432]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0xe8>
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d063      	beq.n	800445e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004396:	4b65      	ldr	r3, [pc, #404]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a2:	4b62      	ldr	r3, [pc, #392]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d11c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ae:	4b5f      	ldr	r3, [pc, #380]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d116      	bne.n	80043e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	4b5c      	ldr	r3, [pc, #368]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_RCC_OscConfig+0x152>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e1c4      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d2:	4b56      	ldr	r3, [pc, #344]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4952      	ldr	r1, [pc, #328]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e6:	e03a      	b.n	800445e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f0:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <HAL_RCC_OscConfig+0x2b0>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fe fa2d 	bl	8002854 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fe:	f7fe fa29 	bl	8002854 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1a5      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004410:	4b46      	ldr	r3, [pc, #280]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441c:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4940      	ldr	r1, [pc, #256]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]
 8004430:	e015      	b.n	800445e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004432:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <HAL_RCC_OscConfig+0x2b0>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe fa0c 	bl	8002854 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004440:	f7fe fa08 	bl	8002854 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e184      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d030      	beq.n	80044cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCC_OscConfig+0x2b4>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fe f9ec 	bl	8002854 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004480:	f7fe f9e8 	bl	8002854 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e164      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x200>
 800449e:	e015      	b.n	80044cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <HAL_RCC_OscConfig+0x2b4>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fe f9d5 	bl	8002854 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ae:	f7fe f9d1 	bl	8002854 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e14d      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a0 	beq.w	800461a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a0e      	ldr	r2, [pc, #56]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d121      	bne.n	800455a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a07      	ldr	r2, [pc, #28]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fe f997 	bl	8002854 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e011      	b.n	800454e <HAL_RCC_OscConfig+0x2ce>
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	42470000 	.word	0x42470000
 8004534:	42470e80 	.word	0x42470e80
 8004538:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453c:	f7fe f98a 	bl	8002854 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e106      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	4b85      	ldr	r3, [pc, #532]	; (8004764 <HAL_RCC_OscConfig+0x4e4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d106      	bne.n	8004570 <HAL_RCC_OscConfig+0x2f0>
 8004562:	4b81      	ldr	r3, [pc, #516]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a80      	ldr	r2, [pc, #512]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x32a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x312>
 8004578:	4b7b      	ldr	r3, [pc, #492]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a7a      	ldr	r2, [pc, #488]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	4b78      	ldr	r3, [pc, #480]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a77      	ldr	r2, [pc, #476]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x32a>
 8004592:	4b75      	ldr	r3, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a74      	ldr	r2, [pc, #464]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	4b72      	ldr	r3, [pc, #456]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a71      	ldr	r2, [pc, #452]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fe f94f 	bl	8002854 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe f94b 	bl	8002854 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0c5      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b65      	ldr	r3, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x33a>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fe f939 	bl	8002854 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fe f935 	bl	8002854 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0af      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b5a      	ldr	r3, [pc, #360]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b56      	ldr	r3, [pc, #344]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a55      	ldr	r2, [pc, #340]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 809b 	beq.w	800475a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004624:	4b50      	ldr	r3, [pc, #320]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d05c      	beq.n	80046ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d141      	bne.n	80046bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b4c      	ldr	r3, [pc, #304]	; (800476c <HAL_RCC_OscConfig+0x4ec>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe f909 	bl	8002854 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe f905 	bl	8002854 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e081      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004658:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	019b      	lsls	r3, r3, #6
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	4937      	ldr	r1, [pc, #220]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <HAL_RCC_OscConfig+0x4ec>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fe f8de 	bl	8002854 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469c:	f7fe f8da 	bl	8002854 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e056      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x41c>
 80046ba:	e04e      	b.n	800475a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_OscConfig+0x4ec>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fe f8c7 	bl	8002854 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fe f8c3 	bl	8002854 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e03f      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046dc:	4b22      	ldr	r3, [pc, #136]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x44a>
 80046e8:	e037      	b.n	800475a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e032      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <HAL_RCC_OscConfig+0x4e8>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d028      	beq.n	8004756 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d121      	bne.n	8004756 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d11a      	bne.n	8004756 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800472c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800472e:	4293      	cmp	r3, r2
 8004730:	d111      	bne.n	8004756 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d107      	bne.n	8004756 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d001      	beq.n	800475a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40007000 	.word	0x40007000
 8004768:	40023800 	.word	0x40023800
 800476c:	42470060 	.word	0x42470060

08004770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0cc      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b68      	ldr	r3, [pc, #416]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d90c      	bls.n	80047ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b65      	ldr	r3, [pc, #404]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b8      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a58      	ldr	r2, [pc, #352]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047dc:	4b53      	ldr	r3, [pc, #332]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a52      	ldr	r2, [pc, #328]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b50      	ldr	r3, [pc, #320]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	494d      	ldr	r1, [pc, #308]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d044      	beq.n	8004890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d119      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d003      	beq.n	800482e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482a:	2b03      	cmp	r3, #3
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	4b3f      	ldr	r3, [pc, #252]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e06f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483e:	4b3b      	ldr	r3, [pc, #236]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e067      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4934      	ldr	r1, [pc, #208]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004860:	f7fd fff8 	bl	8002854 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	e00a      	b.n	800487e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004868:	f7fd fff4 	bl	8002854 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e04f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	4b2b      	ldr	r3, [pc, #172]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 020c 	and.w	r2, r3, #12
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	429a      	cmp	r2, r3
 800488e:	d1eb      	bne.n	8004868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d20c      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b22      	ldr	r3, [pc, #136]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e032      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4916      	ldr	r1, [pc, #88]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	490e      	ldr	r1, [pc, #56]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048f6:	f000 f821 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490a      	ldr	r1, [pc, #40]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fd ff58 	bl	80027cc <HAL_InitTick>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40023c00 	.word	0x40023c00
 800492c:	40023800 	.word	0x40023800
 8004930:	0801188c 	.word	0x0801188c
 8004934:	20000404 	.word	0x20000404
 8004938:	20000408 	.word	0x20000408

0800493c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800493c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	2300      	movs	r3, #0
 800494e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004954:	4b67      	ldr	r3, [pc, #412]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b08      	cmp	r3, #8
 800495e:	d00d      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x40>
 8004960:	2b08      	cmp	r3, #8
 8004962:	f200 80bd 	bhi.w	8004ae0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x34>
 800496a:	2b04      	cmp	r3, #4
 800496c:	d003      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x3a>
 800496e:	e0b7      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b61      	ldr	r3, [pc, #388]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004972:	60bb      	str	r3, [r7, #8]
       break;
 8004974:	e0b7      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004976:	4b60      	ldr	r3, [pc, #384]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004978:	60bb      	str	r3, [r7, #8]
      break;
 800497a:	e0b4      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800497c:	4b5d      	ldr	r3, [pc, #372]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004984:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004986:	4b5b      	ldr	r3, [pc, #364]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04d      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004992:	4b58      	ldr	r3, [pc, #352]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	461a      	mov	r2, r3
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	ea02 0800 	and.w	r8, r2, r0
 80049aa:	ea03 0901 	and.w	r9, r3, r1
 80049ae:	4640      	mov	r0, r8
 80049b0:	4649      	mov	r1, r9
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	014b      	lsls	r3, r1, #5
 80049bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049c0:	0142      	lsls	r2, r0, #5
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	ebb0 0008 	subs.w	r0, r0, r8
 80049ca:	eb61 0109 	sbc.w	r1, r1, r9
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	018b      	lsls	r3, r1, #6
 80049d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049dc:	0182      	lsls	r2, r0, #6
 80049de:	1a12      	subs	r2, r2, r0
 80049e0:	eb63 0301 	sbc.w	r3, r3, r1
 80049e4:	f04f 0000 	mov.w	r0, #0
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	00d9      	lsls	r1, r3, #3
 80049ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049f2:	00d0      	lsls	r0, r2, #3
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	eb12 0208 	adds.w	r2, r2, r8
 80049fc:	eb43 0309 	adc.w	r3, r3, r9
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	0299      	lsls	r1, r3, #10
 8004a0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a0e:	0290      	lsls	r0, r2, #10
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	f7fc f932 	bl	8000c88 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e04a      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2e:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	461a      	mov	r2, r3
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	ea02 0400 	and.w	r4, r2, r0
 8004a46:	ea03 0501 	and.w	r5, r3, r1
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	014b      	lsls	r3, r1, #5
 8004a58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a5c:	0142      	lsls	r2, r0, #5
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	1b00      	subs	r0, r0, r4
 8004a64:	eb61 0105 	sbc.w	r1, r1, r5
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	018b      	lsls	r3, r1, #6
 8004a72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a76:	0182      	lsls	r2, r0, #6
 8004a78:	1a12      	subs	r2, r2, r0
 8004a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7e:	f04f 0000 	mov.w	r0, #0
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	00d9      	lsls	r1, r3, #3
 8004a88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a8c:	00d0      	lsls	r0, r2, #3
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	1912      	adds	r2, r2, r4
 8004a94:	eb45 0303 	adc.w	r3, r5, r3
 8004a98:	f04f 0000 	mov.w	r0, #0
 8004a9c:	f04f 0100 	mov.w	r1, #0
 8004aa0:	0299      	lsls	r1, r3, #10
 8004aa2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004aa6:	0290      	lsls	r0, r2, #10
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	f7fc f8e6 	bl	8000c88 <__aeabi_uldivmod>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	60bb      	str	r3, [r7, #8]
      break;
 8004ade:	e002      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ae2:	60bb      	str	r3, [r7, #8]
      break;
 8004ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	00f42400 	.word	0x00f42400

08004afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b00:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b02:	681b      	ldr	r3, [r3, #0]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000404 	.word	0x20000404

08004b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b18:	f7ff fff0 	bl	8004afc <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	0a9b      	lsrs	r3, r3, #10
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4903      	ldr	r1, [pc, #12]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40023800 	.word	0x40023800
 8004b38:	0801189c 	.word	0x0801189c

08004b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b40:	f7ff ffdc 	bl	8004afc <HAL_RCC_GetHCLKFreq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	0b5b      	lsrs	r3, r3, #13
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	4903      	ldr	r1, [pc, #12]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b52:	5ccb      	ldrb	r3, [r1, r3]
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	0801189c 	.word	0x0801189c

08004b64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d035      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b8c:	4b62      	ldr	r3, [pc, #392]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b92:	f7fd fe5f 	bl	8002854 <HAL_GetTick>
 8004b96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b9a:	f7fd fe5b 	bl	8002854 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0b0      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bac:	4b5b      	ldr	r3, [pc, #364]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f0      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	019a      	lsls	r2, r3, #6
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	071b      	lsls	r3, r3, #28
 8004bc4:	4955      	ldr	r1, [pc, #340]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bcc:	4b52      	ldr	r3, [pc, #328]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd2:	f7fd fe3f 	bl	8002854 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bda:	f7fd fe3b 	bl	8002854 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e090      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bec:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8083 	beq.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	4b44      	ldr	r3, [pc, #272]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a43      	ldr	r2, [pc, #268]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c22:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3e      	ldr	r2, [pc, #248]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c2e:	f7fd fe11 	bl	8002854 <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c34:	e008      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c36:	f7fd fe0d 	bl	8002854 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e062      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c54:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02f      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d028      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c72:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c7c:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c88:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d114      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fd fddb 	bl	8002854 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fd fdd7 	bl	8002854 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e02a      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb8:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ee      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd0:	d10d      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce6:	490d      	ldr	r1, [pc, #52]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]
 8004cec:	e005      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cf8:	6093      	str	r3, [r2, #8]
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d06:	4905      	ldr	r1, [pc, #20]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	42470068 	.word	0x42470068
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40007000 	.word	0x40007000
 8004d24:	42470e40 	.word	0x42470e40

08004d28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d13e      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d12f      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d5e:	617b      	str	r3, [r7, #20]
          break;
 8004d60:	e02f      	b.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d6e:	d108      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d70:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d78:	4a18      	ldr	r2, [pc, #96]	; (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	e007      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d82:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8a:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d92:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d98:	099b      	lsrs	r3, r3, #6
 8004d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dac:	0f1b      	lsrs	r3, r3, #28
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]
          break;
 8004dba:	e002      	b.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
          break;
 8004dc0:	bf00      	nop
        }
      }
      break;
 8004dc2:	bf00      	nop
    }
  }
  return frequency;
 8004dc4:	697b      	ldr	r3, [r7, #20]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00bb8000 	.word	0x00bb8000
 8004ddc:	00f42400 	.word	0x00f42400

08004de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e03f      	b.n	8004e72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fd fbd0 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	; 0x24
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f929 	bl	800507c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08a      	sub	sp, #40	; 0x28
 8004e7e:	af02      	add	r7, sp, #8
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d17c      	bne.n	8004f94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_UART_Transmit+0x2c>
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e075      	b.n	8004f96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_UART_Transmit+0x3e>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e06e      	b.n	8004f96 <HAL_UART_Transmit+0x11c>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2221      	movs	r2, #33	; 0x21
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ece:	f7fd fcc1 	bl	8002854 <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	88fa      	ldrh	r2, [r7, #6]
 8004ed8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	88fa      	ldrh	r2, [r7, #6]
 8004ede:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee8:	d108      	bne.n	8004efc <HAL_UART_Transmit+0x82>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e003      	b.n	8004f04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f0c:	e02a      	b.n	8004f64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2200      	movs	r2, #0
 8004f16:	2180      	movs	r1, #128	; 0x80
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f840 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e036      	b.n	8004f96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	3302      	adds	r3, #2
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	e007      	b.n	8004f56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	3301      	adds	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1cf      	bne.n	8004f0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2200      	movs	r2, #0
 8004f76:	2140      	movs	r1, #64	; 0x40
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f810 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e006      	b.n	8004f96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b090      	sub	sp, #64	; 0x40
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fae:	e050      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb6:	d04c      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <UART_WaitOnFlagUntilTimeout+0x30>
 8004fbe:	f7fd fc49 	bl	8002854 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d241      	bcs.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fee:	637a      	str	r2, [r7, #52]	; 0x34
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e5      	bne.n	8004fce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3314      	adds	r3, #20
 8005008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	613b      	str	r3, [r7, #16]
   return(result);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005022:	623a      	str	r2, [r7, #32]
 8005024:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	69f9      	ldr	r1, [r7, #28]
 8005028:	6a3a      	ldr	r2, [r7, #32]
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e5      	bne.n	8005002 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e00f      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	429a      	cmp	r2, r3
 800506e:	d09f      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3740      	adds	r7, #64	; 0x40
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	b09f      	sub	sp, #124	; 0x7c
 8005082:	af00      	add	r7, sp, #0
 8005084:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005092:	68d9      	ldr	r1, [r3, #12]
 8005094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	ea40 0301 	orr.w	r3, r0, r1
 800509c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800509e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050c0:	f021 010c 	bic.w	r1, r1, #12
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ca:	430b      	orrs	r3, r1
 80050cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050da:	6999      	ldr	r1, [r3, #24]
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	ea40 0301 	orr.w	r3, r0, r1
 80050e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4bc5      	ldr	r3, [pc, #788]	; (8005400 <UART_SetConfig+0x384>)
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d004      	beq.n	80050fa <UART_SetConfig+0x7e>
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4bc3      	ldr	r3, [pc, #780]	; (8005404 <UART_SetConfig+0x388>)
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d103      	bne.n	8005102 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050fa:	f7ff fd1f 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 80050fe:	6778      	str	r0, [r7, #116]	; 0x74
 8005100:	e002      	b.n	8005108 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005102:	f7ff fd07 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8005106:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005110:	f040 80b6 	bne.w	8005280 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005116:	461c      	mov	r4, r3
 8005118:	f04f 0500 	mov.w	r5, #0
 800511c:	4622      	mov	r2, r4
 800511e:	462b      	mov	r3, r5
 8005120:	1891      	adds	r1, r2, r2
 8005122:	6439      	str	r1, [r7, #64]	; 0x40
 8005124:	415b      	adcs	r3, r3
 8005126:	647b      	str	r3, [r7, #68]	; 0x44
 8005128:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800512c:	1912      	adds	r2, r2, r4
 800512e:	eb45 0303 	adc.w	r3, r5, r3
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f04f 0100 	mov.w	r1, #0
 800513a:	00d9      	lsls	r1, r3, #3
 800513c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005140:	00d0      	lsls	r0, r2, #3
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	1911      	adds	r1, r2, r4
 8005148:	6639      	str	r1, [r7, #96]	; 0x60
 800514a:	416b      	adcs	r3, r5
 800514c:	667b      	str	r3, [r7, #100]	; 0x64
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	461a      	mov	r2, r3
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	1891      	adds	r1, r2, r2
 800515a:	63b9      	str	r1, [r7, #56]	; 0x38
 800515c:	415b      	adcs	r3, r3
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005164:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005168:	f7fb fd8e 	bl	8000c88 <__aeabi_uldivmod>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4ba5      	ldr	r3, [pc, #660]	; (8005408 <UART_SetConfig+0x38c>)
 8005172:	fba3 2302 	umull	r2, r3, r3, r2
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	011e      	lsls	r6, r3, #4
 800517a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800517c:	461c      	mov	r4, r3
 800517e:	f04f 0500 	mov.w	r5, #0
 8005182:	4622      	mov	r2, r4
 8005184:	462b      	mov	r3, r5
 8005186:	1891      	adds	r1, r2, r2
 8005188:	6339      	str	r1, [r7, #48]	; 0x30
 800518a:	415b      	adcs	r3, r3
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
 800518e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005192:	1912      	adds	r2, r2, r4
 8005194:	eb45 0303 	adc.w	r3, r5, r3
 8005198:	f04f 0000 	mov.w	r0, #0
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	00d9      	lsls	r1, r3, #3
 80051a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051a6:	00d0      	lsls	r0, r2, #3
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	1911      	adds	r1, r2, r4
 80051ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80051b0:	416b      	adcs	r3, r5
 80051b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	1891      	adds	r1, r2, r2
 80051c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80051c2:	415b      	adcs	r3, r3
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051ce:	f7fb fd5b 	bl	8000c88 <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4b8c      	ldr	r3, [pc, #560]	; (8005408 <UART_SetConfig+0x38c>)
 80051d8:	fba3 1302 	umull	r1, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	2164      	movs	r1, #100	; 0x64
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	3332      	adds	r3, #50	; 0x32
 80051ea:	4a87      	ldr	r2, [pc, #540]	; (8005408 <UART_SetConfig+0x38c>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f8:	441e      	add	r6, r3
 80051fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fc:	4618      	mov	r0, r3
 80051fe:	f04f 0100 	mov.w	r1, #0
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	1894      	adds	r4, r2, r2
 8005208:	623c      	str	r4, [r7, #32]
 800520a:	415b      	adcs	r3, r3
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005212:	1812      	adds	r2, r2, r0
 8005214:	eb41 0303 	adc.w	r3, r1, r3
 8005218:	f04f 0400 	mov.w	r4, #0
 800521c:	f04f 0500 	mov.w	r5, #0
 8005220:	00dd      	lsls	r5, r3, #3
 8005222:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005226:	00d4      	lsls	r4, r2, #3
 8005228:	4622      	mov	r2, r4
 800522a:	462b      	mov	r3, r5
 800522c:	1814      	adds	r4, r2, r0
 800522e:	653c      	str	r4, [r7, #80]	; 0x50
 8005230:	414b      	adcs	r3, r1
 8005232:	657b      	str	r3, [r7, #84]	; 0x54
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	461a      	mov	r2, r3
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	1891      	adds	r1, r2, r2
 8005240:	61b9      	str	r1, [r7, #24]
 8005242:	415b      	adcs	r3, r3
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800524a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800524e:	f7fb fd1b 	bl	8000c88 <__aeabi_uldivmod>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <UART_SetConfig+0x38c>)
 8005258:	fba3 1302 	umull	r1, r3, r3, r2
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	2164      	movs	r1, #100	; 0x64
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	3332      	adds	r3, #50	; 0x32
 800526a:	4a67      	ldr	r2, [pc, #412]	; (8005408 <UART_SetConfig+0x38c>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	f003 0207 	and.w	r2, r3, #7
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4432      	add	r2, r6
 800527c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800527e:	e0b9      	b.n	80053f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005282:	461c      	mov	r4, r3
 8005284:	f04f 0500 	mov.w	r5, #0
 8005288:	4622      	mov	r2, r4
 800528a:	462b      	mov	r3, r5
 800528c:	1891      	adds	r1, r2, r2
 800528e:	6139      	str	r1, [r7, #16]
 8005290:	415b      	adcs	r3, r3
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005298:	1912      	adds	r2, r2, r4
 800529a:	eb45 0303 	adc.w	r3, r5, r3
 800529e:	f04f 0000 	mov.w	r0, #0
 80052a2:	f04f 0100 	mov.w	r1, #0
 80052a6:	00d9      	lsls	r1, r3, #3
 80052a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ac:	00d0      	lsls	r0, r2, #3
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	eb12 0804 	adds.w	r8, r2, r4
 80052b6:	eb43 0905 	adc.w	r9, r3, r5
 80052ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4618      	mov	r0, r3
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	008b      	lsls	r3, r1, #2
 80052ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052d2:	0082      	lsls	r2, r0, #2
 80052d4:	4640      	mov	r0, r8
 80052d6:	4649      	mov	r1, r9
 80052d8:	f7fb fcd6 	bl	8000c88 <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4b49      	ldr	r3, [pc, #292]	; (8005408 <UART_SetConfig+0x38c>)
 80052e2:	fba3 2302 	umull	r2, r3, r3, r2
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	011e      	lsls	r6, r3, #4
 80052ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ec:	4618      	mov	r0, r3
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	1894      	adds	r4, r2, r2
 80052f8:	60bc      	str	r4, [r7, #8]
 80052fa:	415b      	adcs	r3, r3
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005302:	1812      	adds	r2, r2, r0
 8005304:	eb41 0303 	adc.w	r3, r1, r3
 8005308:	f04f 0400 	mov.w	r4, #0
 800530c:	f04f 0500 	mov.w	r5, #0
 8005310:	00dd      	lsls	r5, r3, #3
 8005312:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005316:	00d4      	lsls	r4, r2, #3
 8005318:	4622      	mov	r2, r4
 800531a:	462b      	mov	r3, r5
 800531c:	1814      	adds	r4, r2, r0
 800531e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005320:	414b      	adcs	r3, r1
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4618      	mov	r0, r3
 800532a:	f04f 0100 	mov.w	r1, #0
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	008b      	lsls	r3, r1, #2
 8005338:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800533c:	0082      	lsls	r2, r0, #2
 800533e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005342:	f7fb fca1 	bl	8000c88 <__aeabi_uldivmod>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <UART_SetConfig+0x38c>)
 800534c:	fba3 1302 	umull	r1, r3, r3, r2
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	2164      	movs	r1, #100	; 0x64
 8005354:	fb01 f303 	mul.w	r3, r1, r3
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	3332      	adds	r3, #50	; 0x32
 800535e:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <UART_SetConfig+0x38c>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800536a:	441e      	add	r6, r3
 800536c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536e:	4618      	mov	r0, r3
 8005370:	f04f 0100 	mov.w	r1, #0
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	1894      	adds	r4, r2, r2
 800537a:	603c      	str	r4, [r7, #0]
 800537c:	415b      	adcs	r3, r3
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005384:	1812      	adds	r2, r2, r0
 8005386:	eb41 0303 	adc.w	r3, r1, r3
 800538a:	f04f 0400 	mov.w	r4, #0
 800538e:	f04f 0500 	mov.w	r5, #0
 8005392:	00dd      	lsls	r5, r3, #3
 8005394:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005398:	00d4      	lsls	r4, r2, #3
 800539a:	4622      	mov	r2, r4
 800539c:	462b      	mov	r3, r5
 800539e:	eb12 0a00 	adds.w	sl, r2, r0
 80053a2:	eb43 0b01 	adc.w	fp, r3, r1
 80053a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	008b      	lsls	r3, r1, #2
 80053ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053be:	0082      	lsls	r2, r0, #2
 80053c0:	4650      	mov	r0, sl
 80053c2:	4659      	mov	r1, fp
 80053c4:	f7fb fc60 	bl	8000c88 <__aeabi_uldivmod>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <UART_SetConfig+0x38c>)
 80053ce:	fba3 1302 	umull	r1, r3, r3, r2
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	2164      	movs	r1, #100	; 0x64
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	3332      	adds	r3, #50	; 0x32
 80053e0:	4a09      	ldr	r2, [pc, #36]	; (8005408 <UART_SetConfig+0x38c>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	f003 020f 	and.w	r2, r3, #15
 80053ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4432      	add	r2, r6
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	377c      	adds	r7, #124	; 0x7c
 80053f8:	46bd      	mov	sp, r7
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	bf00      	nop
 8005400:	40011000 	.word	0x40011000
 8005404:	40011400 	.word	0x40011400
 8005408:	51eb851f 	.word	0x51eb851f

0800540c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
	  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);*/
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <MX_PDM2PCM_Init+0x48>)
 8005412:	2200      	movs	r2, #0
 8005414:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <MX_PDM2PCM_Init+0x48>)
 8005418:	2201      	movs	r2, #1
 800541a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2000000;
 800541c:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <MX_PDM2PCM_Init+0x48>)
 800541e:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <MX_PDM2PCM_Init+0x4c>)
 8005420:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8005422:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <MX_PDM2PCM_Init+0x48>)
 8005424:	2201      	movs	r2, #1
 8005426:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <MX_PDM2PCM_Init+0x48>)
 800542a:	2201      	movs	r2, #1
 800542c:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800542e:	4809      	ldr	r0, [pc, #36]	; (8005454 <MX_PDM2PCM_Init+0x48>)
 8005430:	f001 ff32 	bl	8007298 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <MX_PDM2PCM_Init+0x50>)
 8005436:	2202      	movs	r2, #2
 8005438:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800543a:	4b08      	ldr	r3, [pc, #32]	; (800545c <MX_PDM2PCM_Init+0x50>)
 800543c:	2210      	movs	r2, #16
 800543e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 26;
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <MX_PDM2PCM_Init+0x50>)
 8005442:	221a      	movs	r2, #26
 8005444:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8005446:	4905      	ldr	r1, [pc, #20]	; (800545c <MX_PDM2PCM_Init+0x50>)
 8005448:	4802      	ldr	r0, [pc, #8]	; (8005454 <MX_PDM2PCM_Init+0x48>)
 800544a:	f001 ffaf 	bl	80073ac <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800544e:	bf00      	nop
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	200064a8 	.word	0x200064a8
 8005458:	001e8480 	.word	0x001e8480
 800545c:	200064a0 	.word	0x200064a0

08005460 <small_words_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool small_words_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	2101      	movs	r1, #1
 8005476:	4618      	mov	r0, r3
 8005478:	f002 f91c 	bl	80076b4 <ai_platform_get_activations_map>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d069      	beq.n	8005556 <small_words_model_configure_activations+0xf6>
    /* Updating activations (byte) offsets */
    serving_default_conv2d_1_input0_output_array.data = AI_PTR(NULL);
 8005482:	4b37      	ldr	r3, [pc, #220]	; (8005560 <small_words_model_configure_activations+0x100>)
 8005484:	2200      	movs	r2, #0
 8005486:	609a      	str	r2, [r3, #8]
    serving_default_conv2d_1_input0_output_array.data_start = AI_PTR(NULL);
 8005488:	4b35      	ldr	r3, [pc, #212]	; (8005560 <small_words_model_configure_activations+0x100>)
 800548a:	2200      	movs	r2, #0
 800548c:	60da      	str	r2, [r3, #12]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 2304);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005494:	4a33      	ldr	r2, [pc, #204]	; (8005564 <small_words_model_configure_activations+0x104>)
 8005496:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 2304);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	4a31      	ldr	r2, [pc, #196]	; (8005564 <small_words_model_configure_activations+0x104>)
 80054a0:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 1920);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80054a8:	4a2f      	ldr	r2, [pc, #188]	; (8005568 <small_words_model_configure_activations+0x108>)
 80054aa:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations_map[0] + 1920);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80054b2:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <small_words_model_configure_activations+0x108>)
 80054b4:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 1280);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054bc:	4a2b      	ldr	r2, [pc, #172]	; (800556c <small_words_model_configure_activations+0x10c>)
 80054be:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations_map[0] + 1280);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	4a29      	ldr	r2, [pc, #164]	; (800556c <small_words_model_configure_activations+0x10c>)
 80054c8:	60d3      	str	r3, [r2, #12]
    conv2d_6_output_array.data = AI_PTR(activations_map[0] + 0);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <small_words_model_configure_activations+0x110>)
 80054ce:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a27      	ldr	r2, [pc, #156]	; (8005570 <small_words_model_configure_activations+0x110>)
 80054d4:	60d3      	str	r3, [r2, #12]
    pool_8_output_array.data = AI_PTR(activations_map[0] + 4096);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054dc:	4a25      	ldr	r2, [pc, #148]	; (8005574 <small_words_model_configure_activations+0x114>)
 80054de:	6093      	str	r3, [r2, #8]
    pool_8_output_array.data_start = AI_PTR(activations_map[0] + 4096);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e6:	4a23      	ldr	r2, [pc, #140]	; (8005574 <small_words_model_configure_activations+0x114>)
 80054e8:	60d3      	str	r3, [r2, #12]
    dense_9_output_array.data = AI_PTR(activations_map[0] + 0);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <small_words_model_configure_activations+0x118>)
 80054ee:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a21      	ldr	r2, [pc, #132]	; (8005578 <small_words_model_configure_activations+0x118>)
 80054f4:	60d3      	str	r3, [r2, #12]
    nl_10_output_array.data = AI_PTR(NULL);
 80054f6:	4b21      	ldr	r3, [pc, #132]	; (800557c <small_words_model_configure_activations+0x11c>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	609a      	str	r2, [r3, #8]
    nl_10_output_array.data_start = AI_PTR(NULL);
 80054fc:	4b1f      	ldr	r3, [pc, #124]	; (800557c <small_words_model_configure_activations+0x11c>)
 80054fe:	2200      	movs	r2, #0
 8005500:	60da      	str	r2, [r3, #12]
    conv2d_0_scratch0_array.data = AI_PTR(activations_map[0] + 2176);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8005508:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <small_words_model_configure_activations+0x120>)
 800550a:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(activations_map[0] + 2176);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <small_words_model_configure_activations+0x120>)
 8005514:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 6336);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800551c:	4a19      	ldr	r2, [pc, #100]	; (8005584 <small_words_model_configure_activations+0x124>)
 800551e:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations_map[0] + 6336);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8005526:	4a17      	ldr	r2, [pc, #92]	; (8005584 <small_words_model_configure_activations+0x124>)
 8005528:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 6016);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8005530:	4a15      	ldr	r2, [pc, #84]	; (8005588 <small_words_model_configure_activations+0x128>)
 8005532:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations_map[0] + 6016);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <small_words_model_configure_activations+0x128>)
 800553c:	60d3      	str	r3, [r2, #12]
    conv2d_6_scratch0_array.data = AI_PTR(activations_map[0] + 5376);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <small_words_model_configure_activations+0x12c>)
 8005546:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(activations_map[0] + 5376);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800554e:	4a0f      	ldr	r2, [pc, #60]	; (800558c <small_words_model_configure_activations+0x12c>)
 8005550:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <small_words_model_configure_activations+0xf8>
  }
  return false;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000410 	.word	0x20000410
 8005564:	20000420 	.word	0x20000420
 8005568:	20000430 	.word	0x20000430
 800556c:	20000440 	.word	0x20000440
 8005570:	20000450 	.word	0x20000450
 8005574:	20000460 	.word	0x20000460
 8005578:	20000470 	.word	0x20000470
 800557c:	20000480 	.word	0x20000480
 8005580:	20000530 	.word	0x20000530
 8005584:	20000540 	.word	0x20000540
 8005588:	20000550 	.word	0x20000550
 800558c:	20000560 	.word	0x20000560

08005590 <small_words_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool small_words_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800559e:	f107 030c 	add.w	r3, r7, #12
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	2101      	movs	r1, #1
 80055a6:	4618      	mov	r0, r3
 80055a8:	f002 f850 	bl	800764c <ai_platform_get_weights_map>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80ac 	beq.w	800570c <small_words_model_configure_weights+0x17c>
    /* Updating weights with array addresses */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80055b4:	4b58      	ldr	r3, [pc, #352]	; (8005718 <small_words_model_configure_weights+0x188>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055bc:	4a56      	ldr	r2, [pc, #344]	; (8005718 <small_words_model_configure_weights+0x188>)
 80055be:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a55      	ldr	r2, [pc, #340]	; (8005718 <small_words_model_configure_weights+0x188>)
 80055c4:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a53      	ldr	r2, [pc, #332]	; (8005718 <small_words_model_configure_weights+0x188>)
 80055ca:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80055cc:	4b53      	ldr	r3, [pc, #332]	; (800571c <small_words_model_configure_weights+0x18c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d4:	4a51      	ldr	r2, [pc, #324]	; (800571c <small_words_model_configure_weights+0x18c>)
 80055d6:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 256);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80055de:	4a4f      	ldr	r2, [pc, #316]	; (800571c <small_words_model_configure_weights+0x18c>)
 80055e0:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 256);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80055e8:	4a4c      	ldr	r2, [pc, #304]	; (800571c <small_words_model_configure_weights+0x18c>)
 80055ea:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80055ec:	4b4c      	ldr	r3, [pc, #304]	; (8005720 <small_words_model_configure_weights+0x190>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f4:	4a4a      	ldr	r2, [pc, #296]	; (8005720 <small_words_model_configure_weights+0x190>)
 80055f6:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 320);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80055fe:	4a48      	ldr	r2, [pc, #288]	; (8005720 <small_words_model_configure_weights+0x190>)
 8005600:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights_map[0] + 320);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005608:	4a45      	ldr	r2, [pc, #276]	; (8005720 <small_words_model_configure_weights+0x190>)
 800560a:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800560c:	4b45      	ldr	r3, [pc, #276]	; (8005724 <small_words_model_configure_weights+0x194>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005614:	4a43      	ldr	r2, [pc, #268]	; (8005724 <small_words_model_configure_weights+0x194>)
 8005616:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 8512);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 800561e:	4a41      	ldr	r2, [pc, #260]	; (8005724 <small_words_model_configure_weights+0x194>)
 8005620:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights_map[0] + 8512);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8005628:	4a3e      	ldr	r2, [pc, #248]	; (8005724 <small_words_model_configure_weights+0x194>)
 800562a:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800562c:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <small_words_model_configure_weights+0x198>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005634:	4a3c      	ldr	r2, [pc, #240]	; (8005728 <small_words_model_configure_weights+0x198>)
 8005636:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 8640);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 800563e:	4a3a      	ldr	r2, [pc, #232]	; (8005728 <small_words_model_configure_weights+0x198>)
 8005640:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights_map[0] + 8640);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8005648:	4a37      	ldr	r2, [pc, #220]	; (8005728 <small_words_model_configure_weights+0x198>)
 800564a:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800564c:	4b37      	ldr	r3, [pc, #220]	; (800572c <small_words_model_configure_weights+0x19c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005654:	4a35      	ldr	r2, [pc, #212]	; (800572c <small_words_model_configure_weights+0x19c>)
 8005656:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 41408);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 4321 	add.w	r3, r3, #41216	; 0xa100
 800565e:	33c0      	adds	r3, #192	; 0xc0
 8005660:	4a32      	ldr	r2, [pc, #200]	; (800572c <small_words_model_configure_weights+0x19c>)
 8005662:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights_map[0] + 41408);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 4321 	add.w	r3, r3, #41216	; 0xa100
 800566a:	33c0      	adds	r3, #192	; 0xc0
 800566c:	4a2f      	ldr	r2, [pc, #188]	; (800572c <small_words_model_configure_weights+0x19c>)
 800566e:	60d3      	str	r3, [r2, #12]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005670:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <small_words_model_configure_weights+0x1a0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005678:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <small_words_model_configure_weights+0x1a0>)
 800567a:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(weights_map[0] + 41664);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 8005682:	33c0      	adds	r3, #192	; 0xc0
 8005684:	4a2a      	ldr	r2, [pc, #168]	; (8005730 <small_words_model_configure_weights+0x1a0>)
 8005686:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(weights_map[0] + 41664);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 800568e:	33c0      	adds	r3, #192	; 0xc0
 8005690:	4a27      	ldr	r2, [pc, #156]	; (8005730 <small_words_model_configure_weights+0x1a0>)
 8005692:	60d3      	str	r3, [r2, #12]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005694:	4b27      	ldr	r3, [pc, #156]	; (8005734 <small_words_model_configure_weights+0x1a4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569c:	4a25      	ldr	r2, [pc, #148]	; (8005734 <small_words_model_configure_weights+0x1a4>)
 800569e:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(weights_map[0] + 172736);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 3328 	add.w	r3, r3, #172032	; 0x2a000
 80056a6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80056aa:	4a22      	ldr	r2, [pc, #136]	; (8005734 <small_words_model_configure_weights+0x1a4>)
 80056ac:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(weights_map[0] + 172736);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 3328 	add.w	r3, r3, #172032	; 0x2a000
 80056b4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80056b8:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <small_words_model_configure_weights+0x1a4>)
 80056ba:	60d3      	str	r3, [r2, #12]
    dense_9_weights_array.format |= AI_FMT_FLAG_CONST;
 80056bc:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <small_words_model_configure_weights+0x1a8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c4:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <small_words_model_configure_weights+0x1a8>)
 80056c6:	6013      	str	r3, [r2, #0]
    dense_9_weights_array.data = AI_PTR(weights_map[0] + 173248);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 3329 	add.w	r3, r3, #173056	; 0x2a400
 80056ce:	33c0      	adds	r3, #192	; 0xc0
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <small_words_model_configure_weights+0x1a8>)
 80056d2:	6093      	str	r3, [r2, #8]
    dense_9_weights_array.data_start = AI_PTR(weights_map[0] + 173248);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 3329 	add.w	r3, r3, #173056	; 0x2a400
 80056da:	33c0      	adds	r3, #192	; 0xc0
 80056dc:	4a16      	ldr	r2, [pc, #88]	; (8005738 <small_words_model_configure_weights+0x1a8>)
 80056de:	60d3      	str	r3, [r2, #12]
    dense_9_bias_array.format |= AI_FMT_FLAG_CONST;
 80056e0:	4b16      	ldr	r3, [pc, #88]	; (800573c <small_words_model_configure_weights+0x1ac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056e8:	4a14      	ldr	r2, [pc, #80]	; (800573c <small_words_model_configure_weights+0x1ac>)
 80056ea:	6013      	str	r3, [r2, #0]
    dense_9_bias_array.data = AI_PTR(weights_map[0] + 192192);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 333b 	add.w	r3, r3, #191488	; 0x2ec00
 80056f2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80056f6:	4a11      	ldr	r2, [pc, #68]	; (800573c <small_words_model_configure_weights+0x1ac>)
 80056f8:	6093      	str	r3, [r2, #8]
    dense_9_bias_array.data_start = AI_PTR(weights_map[0] + 192192);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 333b 	add.w	r3, r3, #191488	; 0x2ec00
 8005700:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8005704:	4a0d      	ldr	r2, [pc, #52]	; (800573c <small_words_model_configure_weights+0x1ac>)
 8005706:	60d3      	str	r3, [r2, #12]
    return true;
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <small_words_model_configure_weights+0x17e>
  }
  return false;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000490 	.word	0x20000490
 800571c:	200004a0 	.word	0x200004a0
 8005720:	200004b0 	.word	0x200004b0
 8005724:	200004c0 	.word	0x200004c0
 8005728:	200004d0 	.word	0x200004d0
 800572c:	200004e0 	.word	0x200004e0
 8005730:	200004f0 	.word	0x200004f0
 8005734:	20000500 	.word	0x20000500
 8005738:	20000510 	.word	0x20000510
 800573c:	20000520 	.word	0x20000520

08005740 <ai_small_words_model_create>:
}

AI_API_ENTRY
ai_error ai_small_words_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af02      	add	r7, sp, #8
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800574a:	2300      	movs	r3, #0
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	2304      	movs	r3, #4
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2301      	movs	r3, #1
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <ai_small_words_model_create+0x28>)
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 ffdf 	bl	800771c <ai_platform_network_create>
 800575e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000f24 	.word	0x20000f24

0800576c <ai_small_words_model_init>:
}

AI_API_ENTRY
ai_bool ai_small_words_model_init(
  ai_handle network, const ai_network_params* params)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f002 f8a5 	bl	80078c8 <ai_platform_network_init>
 800577e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <ai_small_words_model_init+0x1e>
 8005786:	2300      	movs	r3, #0
 8005788:	e028      	b.n	80057dc <ai_small_words_model_init+0x70>

  ai_bool ok = true;
 800578a:	2301      	movs	r3, #1
 800578c:	72fb      	strb	r3, [r7, #11]
  ok &= small_words_model_configure_weights(net_ctx, params);
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff fefd 	bl	8005590 <small_words_model_configure_weights>
 8005796:	4603      	mov	r3, r0
 8005798:	461a      	mov	r2, r3
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	72fb      	strb	r3, [r7, #11]
  ok &= small_words_model_configure_activations(net_ctx, params);
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f7ff fe58 	bl	8005460 <small_words_model_configure_activations>
 80057b0:	4603      	mov	r3, r0
 80057b2:	461a      	mov	r2, r3
 80057b4:	7afb      	ldrb	r3, [r7, #11]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f002 f992 	bl	8007aec <ai_platform_network_post_init>
 80057c8:	4603      	mov	r3, r0
 80057ca:	461a      	mov	r2, r3
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80057da:	7afb      	ldrb	r3, [r7, #11]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <ai_small_words_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_small_words_model_data_weights_get(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_small_words_model_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_small_words_model_weights_map);
 80057e8:	4b02      	ldr	r3, [pc, #8]	; (80057f4 <ai_small_words_model_data_weights_get+0x10>)

}
 80057ea:	4618      	mov	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	08040858 	.word	0x08040858

080057f8 <D16_GENERIC>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	b089      	sub	sp, #36	; 0x24
 80057fe:	68d4      	ldr	r4, [r2, #12]
 8005800:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005802:	6993      	ldr	r3, [r2, #24]
 8005804:	9407      	str	r4, [sp, #28]
 8005806:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005808:	9306      	str	r3, [sp, #24]
 800580a:	9402      	str	r4, [sp, #8]
 800580c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005810:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8005814:	69d3      	ldr	r3, [r2, #28]
 8005816:	6896      	ldr	r6, [r2, #8]
 8005818:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800581a:	9103      	str	r1, [sp, #12]
 800581c:	2d00      	cmp	r5, #0
 800581e:	d066      	beq.n	80058ee <D16_GENERIC+0xf6>
 8005820:	f004 0510 	and.w	r5, r4, #16
 8005824:	f004 0420 	and.w	r4, r4, #32
 8005828:	9504      	str	r5, [sp, #16]
 800582a:	4938      	ldr	r1, [pc, #224]	; (800590c <D16_GENERIC+0x114>)
 800582c:	9405      	str	r4, [sp, #20]
 800582e:	f04f 0e00 	mov.w	lr, #0
 8005832:	4635      	mov	r5, r6
 8005834:	e04f      	b.n	80058d6 <D16_GENERIC+0xde>
 8005836:	5d87      	ldrb	r7, [r0, r6]
 8005838:	7804      	ldrb	r4, [r0, #0]
 800583a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800583e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8005842:	b2e6      	uxtb	r6, r4
 8005844:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005848:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800584c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8005850:	4433      	add	r3, r6
 8005852:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8005856:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800585a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800585e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8005862:	0aa3      	lsrs	r3, r4, #10
 8005864:	4c2a      	ldr	r4, [pc, #168]	; (8005910 <D16_GENERIC+0x118>)
 8005866:	fb26 5404 	smlad	r4, r6, r4, r5
 800586a:	4d2a      	ldr	r5, [pc, #168]	; (8005914 <D16_GENERIC+0x11c>)
 800586c:	fb26 f505 	smuad	r5, r6, r5
 8005870:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8005874:	eb04 080a 	add.w	r8, r4, sl
 8005878:	eba8 080b 	sub.w	r8, r8, fp
 800587c:	4646      	mov	r6, r8
 800587e:	17f7      	asrs	r7, r6, #31
 8005880:	e9cd 6700 	strd	r6, r7, [sp]
 8005884:	9e04      	ldr	r6, [sp, #16]
 8005886:	f10e 0c01 	add.w	ip, lr, #1
 800588a:	b16e      	cbz	r6, 80058a8 <D16_GENERIC+0xb0>
 800588c:	6a16      	ldr	r6, [r2, #32]
 800588e:	9f01      	ldr	r7, [sp, #4]
 8005890:	fba8 8906 	umull	r8, r9, r8, r6
 8005894:	fb06 9907 	mla	r9, r6, r7, r9
 8005898:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800589c:	f149 0900 	adc.w	r9, r9, #0
 80058a0:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80058a4:	46a3      	mov	fp, r4
 80058a6:	4654      	mov	r4, sl
 80058a8:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80058aa:	9f02      	ldr	r7, [sp, #8]
 80058ac:	0424      	lsls	r4, r4, #16
 80058ae:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80058b2:	f04f 0900 	mov.w	r9, #0
 80058b6:	fb0e fe06 	mul.w	lr, lr, r6
 80058ba:	fbc7 8904 	smlal	r8, r9, r7, r4
 80058be:	9e03      	ldr	r6, [sp, #12]
 80058c0:	464f      	mov	r7, r9
 80058c2:	10bc      	asrs	r4, r7, #2
 80058c4:	f304 040f 	ssat	r4, #16, r4
 80058c8:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 80058cc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80058ce:	fa1f fe8c 	uxth.w	lr, ip
 80058d2:	4574      	cmp	r4, lr
 80058d4:	d90a      	bls.n	80058ec <D16_GENERIC+0xf4>
 80058d6:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80058d8:	2c01      	cmp	r4, #1
 80058da:	b2e6      	uxtb	r6, r4
 80058dc:	d1ab      	bne.n	8005836 <D16_GENERIC+0x3e>
 80058de:	9e05      	ldr	r6, [sp, #20]
 80058e0:	f850 4b02 	ldr.w	r4, [r0], #2
 80058e4:	2e00      	cmp	r6, #0
 80058e6:	d0ac      	beq.n	8005842 <D16_GENERIC+0x4a>
 80058e8:	ba64      	rev16	r4, r4
 80058ea:	e7aa      	b.n	8005842 <D16_GENERIC+0x4a>
 80058ec:	462e      	mov	r6, r5
 80058ee:	9907      	ldr	r1, [sp, #28]
 80058f0:	61d3      	str	r3, [r2, #28]
 80058f2:	9b06      	ldr	r3, [sp, #24]
 80058f4:	6096      	str	r6, [r2, #8]
 80058f6:	2000      	movs	r0, #0
 80058f8:	60d1      	str	r1, [r2, #12]
 80058fa:	f8c2 a010 	str.w	sl, [r2, #16]
 80058fe:	f8c2 b014 	str.w	fp, [r2, #20]
 8005902:	6193      	str	r3, [r2, #24]
 8005904:	b009      	add	sp, #36	; 0x24
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590a:	bf00      	nop
 800590c:	20000000 	.word	0x20000000
 8005910:	00030001 	.word	0x00030001
 8005914:	00010003 	.word	0x00010003

08005918 <D24_GENERIC>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800591e:	6993      	ldr	r3, [r2, #24]
 8005920:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8005922:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005926:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800592a:	6894      	ldr	r4, [r2, #8]
 800592c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005930:	b089      	sub	sp, #36	; 0x24
 8005932:	9307      	str	r3, [sp, #28]
 8005934:	9503      	str	r5, [sp, #12]
 8005936:	69d3      	ldr	r3, [r2, #28]
 8005938:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800593a:	9104      	str	r1, [sp, #16]
 800593c:	2e00      	cmp	r6, #0
 800593e:	f000 8096 	beq.w	8005a6e <D24_GENERIC+0x156>
 8005942:	f005 0610 	and.w	r6, r5, #16
 8005946:	f005 0520 	and.w	r5, r5, #32
 800594a:	4954      	ldr	r1, [pc, #336]	; (8005a9c <D24_GENERIC+0x184>)
 800594c:	9605      	str	r6, [sp, #20]
 800594e:	9506      	str	r5, [sp, #24]
 8005950:	f04f 0e00 	mov.w	lr, #0
 8005954:	f8cd 9008 	str.w	r9, [sp, #8]
 8005958:	e06a      	b.n	8005a30 <D24_GENERIC+0x118>
 800595a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800595e:	f810 8007 	ldrb.w	r8, [r0, r7]
 8005962:	f890 c000 	ldrb.w	ip, [r0]
 8005966:	042d      	lsls	r5, r5, #16
 8005968:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800596c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8005970:	44ac      	add	ip, r5
 8005972:	4438      	add	r0, r7
 8005974:	fa5f f68c 	uxtb.w	r6, ip
 8005978:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800597c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005980:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8005984:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005988:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800598c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005990:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8005994:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8005998:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800599c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80059a0:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80059a4:	4d3e      	ldr	r5, [pc, #248]	; (8005aa0 <D24_GENERIC+0x188>)
 80059a6:	fb26 b705 	smlad	r7, r6, r5, fp
 80059aa:	4d3e      	ldr	r5, [pc, #248]	; (8005aa4 <D24_GENERIC+0x18c>)
 80059ac:	fb26 4b05 	smlad	fp, r6, r5, r4
 80059b0:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80059b4:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80059b8:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80059bc:	2401      	movs	r4, #1
 80059be:	fb26 f604 	smuad	r6, r6, r4
 80059c2:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80059c6:	9f02      	ldr	r7, [sp, #8]
 80059c8:	eb0e 0c04 	add.w	ip, lr, r4
 80059cc:	eb08 0406 	add.w	r4, r8, r6
 80059d0:	eb05 060a 	add.w	r6, r5, sl
 80059d4:	1bf6      	subs	r6, r6, r7
 80059d6:	4637      	mov	r7, r6
 80059d8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80059dc:	e9cd 7800 	strd	r7, r8, [sp]
 80059e0:	9f05      	ldr	r7, [sp, #20]
 80059e2:	b177      	cbz	r7, 8005a02 <D24_GENERIC+0xea>
 80059e4:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80059e8:	9502      	str	r5, [sp, #8]
 80059ea:	fba6 9a08 	umull	r9, sl, r6, r8
 80059ee:	9e01      	ldr	r6, [sp, #4]
 80059f0:	fb08 aa06 	mla	sl, r8, r6, sl
 80059f4:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 80059f8:	f14a 0700 	adc.w	r7, sl, #0
 80059fc:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8005a00:	4655      	mov	r5, sl
 8005a02:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8005a04:	9f03      	ldr	r7, [sp, #12]
 8005a06:	03ad      	lsls	r5, r5, #14
 8005a08:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005a0c:	f04f 0900 	mov.w	r9, #0
 8005a10:	fb0e fe06 	mul.w	lr, lr, r6
 8005a14:	fbc7 8905 	smlal	r8, r9, r7, r5
 8005a18:	9e04      	ldr	r6, [sp, #16]
 8005a1a:	464f      	mov	r7, r9
 8005a1c:	10bd      	asrs	r5, r7, #2
 8005a1e:	f305 050f 	ssat	r5, #16, r5
 8005a22:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8005a26:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005a28:	fa1f fe8c 	uxth.w	lr, ip
 8005a2c:	4575      	cmp	r5, lr
 8005a2e:	d91c      	bls.n	8005a6a <D24_GENERIC+0x152>
 8005a30:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8005a32:	b2ef      	uxtb	r7, r5
 8005a34:	2d01      	cmp	r5, #1
 8005a36:	b23e      	sxth	r6, r7
 8005a38:	d18f      	bne.n	800595a <D24_GENERIC+0x42>
 8005a3a:	9d06      	ldr	r5, [sp, #24]
 8005a3c:	b15d      	cbz	r5, 8005a56 <D24_GENERIC+0x13e>
 8005a3e:	f01e 0f01 	tst.w	lr, #1
 8005a42:	d122      	bne.n	8005a8a <D24_GENERIC+0x172>
 8005a44:	7805      	ldrb	r5, [r0, #0]
 8005a46:	78c7      	ldrb	r7, [r0, #3]
 8005a48:	7846      	ldrb	r6, [r0, #1]
 8005a4a:	022d      	lsls	r5, r5, #8
 8005a4c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005a50:	44b4      	add	ip, r6
 8005a52:	3002      	adds	r0, #2
 8005a54:	e78e      	b.n	8005974 <D24_GENERIC+0x5c>
 8005a56:	7846      	ldrb	r6, [r0, #1]
 8005a58:	f890 c002 	ldrb.w	ip, [r0, #2]
 8005a5c:	f810 5b03 	ldrb.w	r5, [r0], #3
 8005a60:	0236      	lsls	r6, r6, #8
 8005a62:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8005a66:	44ac      	add	ip, r5
 8005a68:	e784      	b.n	8005974 <D24_GENERIC+0x5c>
 8005a6a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005a6e:	61d3      	str	r3, [r2, #28]
 8005a70:	9b07      	ldr	r3, [sp, #28]
 8005a72:	6094      	str	r4, [r2, #8]
 8005a74:	2000      	movs	r0, #0
 8005a76:	f8c2 b00c 	str.w	fp, [r2, #12]
 8005a7a:	f8c2 a010 	str.w	sl, [r2, #16]
 8005a7e:	f8c2 9014 	str.w	r9, [r2, #20]
 8005a82:	6193      	str	r3, [r2, #24]
 8005a84:	b009      	add	sp, #36	; 0x24
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	78c5      	ldrb	r5, [r0, #3]
 8005a8c:	7887      	ldrb	r7, [r0, #2]
 8005a8e:	f810 6b04 	ldrb.w	r6, [r0], #4
 8005a92:	022d      	lsls	r5, r5, #8
 8005a94:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005a98:	44b4      	add	ip, r6
 8005a9a:	e76b      	b.n	8005974 <D24_GENERIC+0x5c>
 8005a9c:	20000000 	.word	0x20000000
 8005aa0:	00030001 	.word	0x00030001
 8005aa4:	00060007 	.word	0x00060007

08005aa8 <D32_GENERIC>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005aae:	6993      	ldr	r3, [r2, #24]
 8005ab0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005ab2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005ab6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8005aba:	69d6      	ldr	r6, [r2, #28]
 8005abc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005ac0:	b089      	sub	sp, #36	; 0x24
 8005ac2:	9307      	str	r3, [sp, #28]
 8005ac4:	9403      	str	r4, [sp, #12]
 8005ac6:	6893      	ldr	r3, [r2, #8]
 8005ac8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005aca:	9104      	str	r1, [sp, #16]
 8005acc:	2d00      	cmp	r5, #0
 8005ace:	f000 809f 	beq.w	8005c10 <D32_GENERIC+0x168>
 8005ad2:	f004 0510 	and.w	r5, r4, #16
 8005ad6:	f004 0420 	and.w	r4, r4, #32
 8005ada:	9505      	str	r5, [sp, #20]
 8005adc:	4953      	ldr	r1, [pc, #332]	; (8005c2c <D32_GENERIC+0x184>)
 8005ade:	9406      	str	r4, [sp, #24]
 8005ae0:	f04f 0c00 	mov.w	ip, #0
 8005ae4:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ae8:	461d      	mov	r5, r3
 8005aea:	4617      	mov	r7, r2
 8005aec:	e077      	b.n	8005bde <D32_GENERIC+0x136>
 8005aee:	f818 3003 	ldrb.w	r3, [r8, r3]
 8005af2:	f810 800e 	ldrb.w	r8, [r0, lr]
 8005af6:	f810 e002 	ldrb.w	lr, [r0, r2]
 8005afa:	7800      	ldrb	r0, [r0, #0]
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005b02:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8005b06:	4403      	add	r3, r0
 8005b08:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8005b0c:	b2dc      	uxtb	r4, r3
 8005b0e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005b12:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8005b16:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8005b1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b1e:	0e1b      	lsrs	r3, r3, #24
 8005b20:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8005b24:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8005b28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b2c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005b30:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8005b34:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8005b38:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8005b3c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005b40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005b44:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005b48:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8005b4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005b50:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <D32_GENERIC+0x188>)
 8005b52:	fb22 b403 	smlad	r4, r2, r3, fp
 8005b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b5a:	fb2e 4803 	smlad	r8, lr, r3, r4
 8005b5e:	4b35      	ldr	r3, [pc, #212]	; (8005c34 <D32_GENERIC+0x18c>)
 8005b60:	fb22 5503 	smlad	r5, r2, r3, r5
 8005b64:	4b34      	ldr	r3, [pc, #208]	; (8005c38 <D32_GENERIC+0x190>)
 8005b66:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	fb22 f203 	smuad	r2, r2, r3
 8005b70:	4b32      	ldr	r3, [pc, #200]	; (8005c3c <D32_GENERIC+0x194>)
 8005b72:	fb2e 2503 	smlad	r5, lr, r3, r2
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8005b7c:	eb04 080a 	add.w	r8, r4, sl
 8005b80:	eba8 0803 	sub.w	r8, r8, r3
 8005b84:	4642      	mov	r2, r8
 8005b86:	17d3      	asrs	r3, r2, #31
 8005b88:	e9cd 2300 	strd	r2, r3, [sp]
 8005b8c:	9b05      	ldr	r3, [sp, #20]
 8005b8e:	f10c 0e01 	add.w	lr, ip, #1
 8005b92:	b16b      	cbz	r3, 8005bb0 <D32_GENERIC+0x108>
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	9402      	str	r4, [sp, #8]
 8005b9a:	fba8 8902 	umull	r8, r9, r8, r2
 8005b9e:	fb02 9903 	mla	r9, r2, r3, r9
 8005ba2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005ba6:	f149 0900 	adc.w	r9, r9, #0
 8005baa:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005bae:	4654      	mov	r4, sl
 8005bb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	fb0c fc03 	mul.w	ip, ip, r3
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	0364      	lsls	r4, r4, #13
 8005bbc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005bc0:	f04f 0900 	mov.w	r9, #0
 8005bc4:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005bc8:	464b      	mov	r3, r9
 8005bca:	109b      	asrs	r3, r3, #2
 8005bcc:	f303 030f 	ssat	r3, #16, r3
 8005bd0:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8005bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bd6:	fa1f fc8e 	uxth.w	ip, lr
 8005bda:	4563      	cmp	r3, ip
 8005bdc:	d914      	bls.n	8005c08 <D32_GENERIC+0x160>
 8005bde:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005be0:	b2e2      	uxtb	r2, r4
 8005be2:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8005be6:	eb00 080e 	add.w	r8, r0, lr
 8005bea:	4253      	negs	r3, r2
 8005bec:	2c01      	cmp	r4, #1
 8005bee:	eb08 0403 	add.w	r4, r8, r3
 8005bf2:	f47f af7c 	bne.w	8005aee <D32_GENERIC+0x46>
 8005bf6:	1d02      	adds	r2, r0, #4
 8005bf8:	6803      	ldr	r3, [r0, #0]
 8005bfa:	9806      	ldr	r0, [sp, #24]
 8005bfc:	b110      	cbz	r0, 8005c04 <D32_GENERIC+0x15c>
 8005bfe:	ba5b      	rev16	r3, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	e783      	b.n	8005b0c <D32_GENERIC+0x64>
 8005c04:	4610      	mov	r0, r2
 8005c06:	e781      	b.n	8005b0c <D32_GENERIC+0x64>
 8005c08:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	463a      	mov	r2, r7
 8005c10:	6093      	str	r3, [r2, #8]
 8005c12:	9b07      	ldr	r3, [sp, #28]
 8005c14:	f8c2 b00c 	str.w	fp, [r2, #12]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	61d6      	str	r6, [r2, #28]
 8005c1c:	f8c2 a010 	str.w	sl, [r2, #16]
 8005c20:	f8c2 9014 	str.w	r9, [r2, #20]
 8005c24:	6193      	str	r3, [r2, #24]
 8005c26:	b009      	add	sp, #36	; 0x24
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	20000000 	.word	0x20000000
 8005c30:	00060003 	.word	0x00060003
 8005c34:	000a000c 	.word	0x000a000c
 8005c38:	000c000a 	.word	0x000c000a
 8005c3c:	00030006 	.word	0x00030006

08005c40 <D48_GENERIC>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	b089      	sub	sp, #36	; 0x24
 8005c46:	6953      	ldr	r3, [r2, #20]
 8005c48:	68d4      	ldr	r4, [r2, #12]
 8005c4a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005c4c:	9302      	str	r3, [sp, #8]
 8005c4e:	9400      	str	r4, [sp, #0]
 8005c50:	6993      	ldr	r3, [r2, #24]
 8005c52:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005c54:	9307      	str	r3, [sp, #28]
 8005c56:	9403      	str	r4, [sp, #12]
 8005c58:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005c5c:	69d6      	ldr	r6, [r2, #28]
 8005c5e:	6893      	ldr	r3, [r2, #8]
 8005c60:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005c62:	9104      	str	r1, [sp, #16]
 8005c64:	2d00      	cmp	r5, #0
 8005c66:	f000 80c5 	beq.w	8005df4 <D48_GENERIC+0x1b4>
 8005c6a:	f004 0510 	and.w	r5, r4, #16
 8005c6e:	f004 0420 	and.w	r4, r4, #32
 8005c72:	4967      	ldr	r1, [pc, #412]	; (8005e10 <D48_GENERIC+0x1d0>)
 8005c74:	9505      	str	r5, [sp, #20]
 8005c76:	9406      	str	r4, [sp, #24]
 8005c78:	f04f 0c00 	mov.w	ip, #0
 8005c7c:	4657      	mov	r7, sl
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	e09c      	b.n	8005dbc <D48_GENERIC+0x17c>
 8005c82:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8005c86:	f810 b009 	ldrb.w	fp, [r0, r9]
 8005c8a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8005c8e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8005c92:	7800      	ldrb	r0, [r0, #0]
 8005c94:	0424      	lsls	r4, r4, #16
 8005c96:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8005c9a:	f818 4005 	ldrb.w	r4, [r8, r5]
 8005c9e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8005ca2:	44a8      	add	r8, r5
 8005ca4:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8005ca8:	eb0b 0500 	add.w	r5, fp, r0
 8005cac:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8005cb0:	fa5f f885 	uxtb.w	r8, r5
 8005cb4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8005cb8:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8005cbc:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8005cc0:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8005cc4:	0e2d      	lsrs	r5, r5, #24
 8005cc6:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8005cca:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8005cce:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8005cd2:	b2e6      	uxtb	r6, r4
 8005cd4:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8005cd8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005cdc:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8005ce0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005ce4:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8005ce8:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8005cec:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005cf0:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8005cf4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005cf8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005cfc:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8005d00:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005d04:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005d08:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005d0c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8005d10:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8005d14:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8005d18:	4c3e      	ldr	r4, [pc, #248]	; (8005e14 <D48_GENERIC+0x1d4>)
 8005d1a:	9d00      	ldr	r5, [sp, #0]
 8005d1c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8005d20:	4d3d      	ldr	r5, [pc, #244]	; (8005e18 <D48_GENERIC+0x1d8>)
 8005d22:	fb28 4405 	smlad	r4, r8, r5, r4
 8005d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d2a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8005d2e:	4c3b      	ldr	r4, [pc, #236]	; (8005e1c <D48_GENERIC+0x1dc>)
 8005d30:	9b01      	ldr	r3, [sp, #4]
 8005d32:	fb2a 3304 	smlad	r3, sl, r4, r3
 8005d36:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8005d3a:	fb28 3304 	smlad	r3, r8, r4, r3
 8005d3e:	4c38      	ldr	r4, [pc, #224]	; (8005e20 <D48_GENERIC+0x1e0>)
 8005d40:	fb2e 3304 	smlad	r3, lr, r4, r3
 8005d44:	2501      	movs	r5, #1
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	fb2a fa05 	smuad	sl, sl, r5
 8005d4c:	4b35      	ldr	r3, [pc, #212]	; (8005e24 <D48_GENERIC+0x1e4>)
 8005d4e:	fb28 a803 	smlad	r8, r8, r3, sl
 8005d52:	4b35      	ldr	r3, [pc, #212]	; (8005e28 <D48_GENERIC+0x1e8>)
 8005d54:	fb2e 8303 	smlad	r3, lr, r3, r8
 8005d58:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	9b02      	ldr	r3, [sp, #8]
 8005d60:	eb04 0807 	add.w	r8, r4, r7
 8005d64:	eba8 0803 	sub.w	r8, r8, r3
 8005d68:	9b05      	ldr	r3, [sp, #20]
 8005d6a:	4465      	add	r5, ip
 8005d6c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8005d70:	b163      	cbz	r3, 8005d8c <D48_GENERIC+0x14c>
 8005d72:	6a17      	ldr	r7, [r2, #32]
 8005d74:	9402      	str	r4, [sp, #8]
 8005d76:	fba8 8907 	umull	r8, r9, r8, r7
 8005d7a:	fb07 990b 	mla	r9, r7, fp, r9
 8005d7e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005d82:	f149 0900 	adc.w	r9, r9, #0
 8005d86:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8005d8a:	463c      	mov	r4, r7
 8005d8c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	02e4      	lsls	r4, r4, #11
 8005d94:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005d98:	f04f 0900 	mov.w	r9, #0
 8005d9c:	fb0c fc0e 	mul.w	ip, ip, lr
 8005da0:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8005daa:	f304 040f 	ssat	r4, #16, r4
 8005dae:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8005db2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005db4:	fa1f fc85 	uxth.w	ip, r5
 8005db8:	4564      	cmp	r4, ip
 8005dba:	d919      	bls.n	8005df0 <D48_GENERIC+0x1b0>
 8005dbc:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8005dbe:	fa5f fe84 	uxtb.w	lr, r4
 8005dc2:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8005dc6:	f1ce 0500 	rsb	r5, lr, #0
 8005dca:	eb00 0b09 	add.w	fp, r0, r9
 8005dce:	eb0b 0a05 	add.w	sl, fp, r5
 8005dd2:	2c01      	cmp	r4, #1
 8005dd4:	eb0a 0809 	add.w	r8, sl, r9
 8005dd8:	f47f af53 	bne.w	8005c82 <D48_GENERIC+0x42>
 8005ddc:	9b06      	ldr	r3, [sp, #24]
 8005dde:	6805      	ldr	r5, [r0, #0]
 8005de0:	6844      	ldr	r4, [r0, #4]
 8005de2:	3006      	adds	r0, #6
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f43f af63 	beq.w	8005cb0 <D48_GENERIC+0x70>
 8005dea:	ba6d      	rev16	r5, r5
 8005dec:	ba64      	rev16	r4, r4
 8005dee:	e75f      	b.n	8005cb0 <D48_GENERIC+0x70>
 8005df0:	9b01      	ldr	r3, [sp, #4]
 8005df2:	46ba      	mov	sl, r7
 8005df4:	6093      	str	r3, [r2, #8]
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	60d3      	str	r3, [r2, #12]
 8005dfa:	9b02      	ldr	r3, [sp, #8]
 8005dfc:	6153      	str	r3, [r2, #20]
 8005dfe:	9b07      	ldr	r3, [sp, #28]
 8005e00:	61d6      	str	r6, [r2, #28]
 8005e02:	2000      	movs	r0, #0
 8005e04:	f8c2 a010 	str.w	sl, [r2, #16]
 8005e08:	6193      	str	r3, [r2, #24]
 8005e0a:	b009      	add	sp, #36	; 0x24
 8005e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e10:	20000000 	.word	0x20000000
 8005e14:	000f000a 	.word	0x000f000a
 8005e18:	00060003 	.word	0x00060003
 8005e1c:	00150019 	.word	0x00150019
 8005e20:	00190015 	.word	0x00190015
 8005e24:	00030006 	.word	0x00030006
 8005e28:	000a000f 	.word	0x000a000f

08005e2c <D64_GENERIC>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	b089      	sub	sp, #36	; 0x24
 8005e32:	6913      	ldr	r3, [r2, #16]
 8005e34:	6895      	ldr	r5, [r2, #8]
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	9501      	str	r5, [sp, #4]
 8005e3a:	6953      	ldr	r3, [r2, #20]
 8005e3c:	68d5      	ldr	r5, [r2, #12]
 8005e3e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	9500      	str	r5, [sp, #0]
 8005e44:	6993      	ldr	r3, [r2, #24]
 8005e46:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8005e48:	9307      	str	r3, [sp, #28]
 8005e4a:	9505      	str	r5, [sp, #20]
 8005e4c:	69d3      	ldr	r3, [r2, #28]
 8005e4e:	9106      	str	r1, [sp, #24]
 8005e50:	2c00      	cmp	r4, #0
 8005e52:	f000 80d9 	beq.w	8006008 <D64_GENERIC+0x1dc>
 8005e56:	6a11      	ldr	r1, [r2, #32]
 8005e58:	9102      	str	r1, [sp, #8]
 8005e5a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8006048 <D64_GENERIC+0x21c>
 8005e5e:	f04f 0c00 	mov.w	ip, #0
 8005e62:	4681      	mov	r9, r0
 8005e64:	e0c1      	b.n	8005fea <D64_GENERIC+0x1be>
 8005e66:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8005e6a:	4274      	negs	r4, r6
 8005e6c:	eb09 0708 	add.w	r7, r9, r8
 8005e70:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8005e74:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8005e78:	5d38      	ldrb	r0, [r7, r4]
 8005e7a:	5d29      	ldrb	r1, [r5, r4]
 8005e7c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8005e80:	f819 a008 	ldrb.w	sl, [r9, r8]
 8005e84:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8005e88:	f899 7000 	ldrb.w	r7, [r9]
 8005e8c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8005e90:	4425      	add	r5, r4
 8005e92:	0409      	lsls	r1, r1, #16
 8005e94:	0400      	lsls	r0, r0, #16
 8005e96:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8005e9a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8005e9e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8005ea2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8005ea6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8005eaa:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005eae:	4459      	add	r1, fp
 8005eb0:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8005eb4:	4438      	add	r0, r7
 8005eb6:	b2c5      	uxtb	r5, r0
 8005eb8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005ebc:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8005ec0:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8005ec4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8005ec8:	0e00      	lsrs	r0, r0, #24
 8005eca:	eb03 0806 	add.w	r8, r3, r6
 8005ece:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8005ed2:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8005ed6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005eda:	b2c8      	uxtb	r0, r1
 8005edc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005ee0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005ee4:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8005ee8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8005eec:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005ef0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005ef4:	0e09      	lsrs	r1, r1, #24
 8005ef6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8005efa:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8005efe:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8005f02:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005f06:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8005f0a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8005f0e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8005f12:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005f16:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005f1a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005f1e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8005f22:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005f26:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005f2a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005f2e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005f32:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8005f36:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8005f3a:	0a8b      	lsrs	r3, r1, #10
 8005f3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005f40:	4939      	ldr	r1, [pc, #228]	; (8006028 <D64_GENERIC+0x1fc>)
 8005f42:	9c00      	ldr	r4, [sp, #0]
 8005f44:	fb28 4101 	smlad	r1, r8, r1, r4
 8005f48:	4c38      	ldr	r4, [pc, #224]	; (800602c <D64_GENERIC+0x200>)
 8005f4a:	fb27 1104 	smlad	r1, r7, r4, r1
 8005f4e:	4c38      	ldr	r4, [pc, #224]	; (8006030 <D64_GENERIC+0x204>)
 8005f50:	fb20 1104 	smlad	r1, r0, r4, r1
 8005f54:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8005f58:	fb2a 1106 	smlad	r1, sl, r6, r1
 8005f5c:	4c35      	ldr	r4, [pc, #212]	; (8006034 <D64_GENERIC+0x208>)
 8005f5e:	9d01      	ldr	r5, [sp, #4]
 8005f60:	fb28 5404 	smlad	r4, r8, r4, r5
 8005f64:	4d33      	ldr	r5, [pc, #204]	; (8006034 <D64_GENERIC+0x208>)
 8005f66:	fb2a 4415 	smladx	r4, sl, r5, r4
 8005f6a:	4d33      	ldr	r5, [pc, #204]	; (8006038 <D64_GENERIC+0x20c>)
 8005f6c:	fb27 4405 	smlad	r4, r7, r5, r4
 8005f70:	fb20 4415 	smladx	r4, r0, r5, r4
 8005f74:	2501      	movs	r5, #1
 8005f76:	9400      	str	r4, [sp, #0]
 8005f78:	fb28 f805 	smuad	r8, r8, r5
 8005f7c:	4c2f      	ldr	r4, [pc, #188]	; (800603c <D64_GENERIC+0x210>)
 8005f7e:	fb27 8704 	smlad	r7, r7, r4, r8
 8005f82:	4c2f      	ldr	r4, [pc, #188]	; (8006040 <D64_GENERIC+0x214>)
 8005f84:	fb20 7004 	smlad	r0, r0, r4, r7
 8005f88:	4c2e      	ldr	r4, [pc, #184]	; (8006044 <D64_GENERIC+0x218>)
 8005f8a:	fb2a 0004 	smlad	r0, sl, r4, r0
 8005f8e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8005f92:	9902      	ldr	r1, [sp, #8]
 8005f94:	9001      	str	r0, [sp, #4]
 8005f96:	b189      	cbz	r1, 8005fbc <D64_GENERIC+0x190>
 8005f98:	9803      	ldr	r0, [sp, #12]
 8005f9a:	9c04      	ldr	r4, [sp, #16]
 8005f9c:	9604      	str	r6, [sp, #16]
 8005f9e:	4430      	add	r0, r6
 8005fa0:	1b00      	subs	r0, r0, r4
 8005fa2:	17c5      	asrs	r5, r0, #31
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	fba0 0101 	umull	r0, r1, r0, r1
 8005faa:	fb07 1105 	mla	r1, r7, r5, r1
 8005fae:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005fb2:	f141 0100 	adc.w	r1, r1, #0
 8005fb6:	0049      	lsls	r1, r1, #1
 8005fb8:	9103      	str	r1, [sp, #12]
 8005fba:	460e      	mov	r6, r1
 8005fbc:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8005fbe:	9905      	ldr	r1, [sp, #20]
 8005fc0:	9806      	ldr	r0, [sp, #24]
 8005fc2:	02b6      	lsls	r6, r6, #10
 8005fc4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005fc8:	f04f 0800 	mov.w	r8, #0
 8005fcc:	fb0c f404 	mul.w	r4, ip, r4
 8005fd0:	fbc1 7806 	smlal	r7, r8, r1, r6
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	1089      	asrs	r1, r1, #2
 8005fd8:	f301 010f 	ssat	r1, #16, r1
 8005fdc:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005fe0:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8005fe2:	f10c 0c01 	add.w	ip, ip, #1
 8005fe6:	4561      	cmp	r1, ip
 8005fe8:	dd0e      	ble.n	8006008 <D64_GENERIC+0x1dc>
 8005fea:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8005fec:	2e01      	cmp	r6, #1
 8005fee:	f47f af3a 	bne.w	8005e66 <D64_GENERIC+0x3a>
 8005ff2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005ff4:	06b4      	lsls	r4, r6, #26
 8005ff6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8005ffa:	f109 0908 	add.w	r9, r9, #8
 8005ffe:	f57f af5a 	bpl.w	8005eb6 <D64_GENERIC+0x8a>
 8006002:	ba40      	rev16	r0, r0
 8006004:	ba49      	rev16	r1, r1
 8006006:	e756      	b.n	8005eb6 <D64_GENERIC+0x8a>
 8006008:	61d3      	str	r3, [r2, #28]
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	9901      	ldr	r1, [sp, #4]
 800600e:	6113      	str	r3, [r2, #16]
 8006010:	9b04      	ldr	r3, [sp, #16]
 8006012:	6091      	str	r1, [r2, #8]
 8006014:	6153      	str	r3, [r2, #20]
 8006016:	9900      	ldr	r1, [sp, #0]
 8006018:	9b07      	ldr	r3, [sp, #28]
 800601a:	60d1      	str	r1, [r2, #12]
 800601c:	2000      	movs	r0, #0
 800601e:	6193      	str	r3, [r2, #24]
 8006020:	b009      	add	sp, #36	; 0x24
 8006022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006026:	bf00      	nop
 8006028:	001c0015 	.word	0x001c0015
 800602c:	000f000a 	.word	0x000f000a
 8006030:	00060003 	.word	0x00060003
 8006034:	0024002a 	.word	0x0024002a
 8006038:	002e0030 	.word	0x002e0030
 800603c:	00030006 	.word	0x00030006
 8006040:	000a000f 	.word	0x000a000f
 8006044:	0015001c 	.word	0x0015001c
 8006048:	20000000 	.word	0x20000000

0800604c <D80_GENERIC>:
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	b08b      	sub	sp, #44	; 0x2c
 8006052:	6914      	ldr	r4, [r2, #16]
 8006054:	9404      	str	r4, [sp, #16]
 8006056:	6954      	ldr	r4, [r2, #20]
 8006058:	9405      	str	r4, [sp, #20]
 800605a:	6994      	ldr	r4, [r2, #24]
 800605c:	9409      	str	r4, [sp, #36]	; 0x24
 800605e:	6894      	ldr	r4, [r2, #8]
 8006060:	9402      	str	r4, [sp, #8]
 8006062:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006064:	68d4      	ldr	r4, [r2, #12]
 8006066:	9401      	str	r4, [sp, #4]
 8006068:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800606a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800606e:	9406      	str	r4, [sp, #24]
 8006070:	9107      	str	r1, [sp, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 810f 	beq.w	8006296 <D80_GENERIC+0x24a>
 8006078:	6a13      	ldr	r3, [r2, #32]
 800607a:	9308      	str	r3, [sp, #32]
 800607c:	2300      	movs	r3, #0
 800607e:	9200      	str	r2, [sp, #0]
 8006080:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80062e8 <D80_GENERIC+0x29c>
 8006084:	f8cd b00c 	str.w	fp, [sp, #12]
 8006088:	461a      	mov	r2, r3
 800608a:	e0ed      	b.n	8006268 <D80_GENERIC+0x21c>
 800608c:	fa5f fc8c 	uxtb.w	ip, ip
 8006090:	fa0f f48c 	sxth.w	r4, ip
 8006094:	0066      	lsls	r6, r4, #1
 8006096:	eb06 0804 	add.w	r8, r6, r4
 800609a:	f1cc 0500 	rsb	r5, ip, #0
 800609e:	eb00 0108 	add.w	r1, r0, r8
 80060a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80060a6:	194b      	adds	r3, r1, r5
 80060a8:	5d49      	ldrb	r1, [r1, r5]
 80060aa:	f810 a008 	ldrb.w	sl, [r0, r8]
 80060ae:	f813 b004 	ldrb.w	fp, [r3, r4]
 80060b2:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80060b6:	f890 8000 	ldrb.w	r8, [r0]
 80060ba:	eb03 0e04 	add.w	lr, r3, r4
 80060be:	eb0e 0705 	add.w	r7, lr, r5
 80060c2:	0409      	lsls	r1, r1, #16
 80060c4:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80060c8:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80060cc:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80060d0:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80060d4:	eb0a 0004 	add.w	r0, sl, r4
 80060d8:	041b      	lsls	r3, r3, #16
 80060da:	f81a a004 	ldrb.w	sl, [sl, r4]
 80060de:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80060e2:	5d44      	ldrb	r4, [r0, r5]
 80060e4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80060e8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80060ec:	4428      	add	r0, r5
 80060ee:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80060f2:	4441      	add	r1, r8
 80060f4:	4430      	add	r0, r6
 80060f6:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80060fa:	441f      	add	r7, r3
 80060fc:	b2cd      	uxtb	r5, r1
 80060fe:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006102:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8006106:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8006110:	0e09      	lsrs	r1, r1, #24
 8006112:	4433      	add	r3, r6
 8006114:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8006118:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800611c:	b2fd      	uxtb	r5, r7
 800611e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8006122:	469b      	mov	fp, r3
 8006124:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8006128:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800612c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8006130:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8006134:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8006138:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800613c:	0e3b      	lsrs	r3, r7, #24
 800613e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8006142:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8006146:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800614a:	fa5f fe84 	uxtb.w	lr, r4
 800614e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8006152:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006156:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800615a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800615e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8006162:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8006166:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800616a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800616e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006176:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800617a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800617e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006182:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006186:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800618a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800618e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8006192:	0aa3      	lsrs	r3, r4, #10
 8006194:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006198:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800619c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80061a0:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80061aa:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 80061ae:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <D80_GENERIC+0x26c>)
 80061b0:	9901      	ldr	r1, [sp, #4]
 80061b2:	fb2b 1303 	smlad	r3, fp, r3, r1
 80061b6:	4941      	ldr	r1, [pc, #260]	; (80062bc <D80_GENERIC+0x270>)
 80061b8:	fb28 3301 	smlad	r3, r8, r1, r3
 80061bc:	4940      	ldr	r1, [pc, #256]	; (80062c0 <D80_GENERIC+0x274>)
 80061be:	fb2c 3301 	smlad	r3, ip, r1, r3
 80061c2:	4940      	ldr	r1, [pc, #256]	; (80062c4 <D80_GENERIC+0x278>)
 80061c4:	fb27 3301 	smlad	r3, r7, r1, r3
 80061c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80061cc:	fb2e 3301 	smlad	r3, lr, r1, r3
 80061d0:	493d      	ldr	r1, [pc, #244]	; (80062c8 <D80_GENERIC+0x27c>)
 80061d2:	9c02      	ldr	r4, [sp, #8]
 80061d4:	fb2b 4401 	smlad	r4, fp, r1, r4
 80061d8:	493c      	ldr	r1, [pc, #240]	; (80062cc <D80_GENERIC+0x280>)
 80061da:	fb28 4401 	smlad	r4, r8, r1, r4
 80061de:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 80061e2:	fb2c 4101 	smlad	r1, ip, r1, r4
 80061e6:	4c3a      	ldr	r4, [pc, #232]	; (80062d0 <D80_GENERIC+0x284>)
 80061e8:	fb27 1104 	smlad	r1, r7, r4, r1
 80061ec:	4c39      	ldr	r4, [pc, #228]	; (80062d4 <D80_GENERIC+0x288>)
 80061ee:	fb2e 1104 	smlad	r1, lr, r4, r1
 80061f2:	9101      	str	r1, [sp, #4]
 80061f4:	2101      	movs	r1, #1
 80061f6:	fb2b fb01 	smuad	fp, fp, r1
 80061fa:	4937      	ldr	r1, [pc, #220]	; (80062d8 <D80_GENERIC+0x28c>)
 80061fc:	fb28 b801 	smlad	r8, r8, r1, fp
 8006200:	4d36      	ldr	r5, [pc, #216]	; (80062dc <D80_GENERIC+0x290>)
 8006202:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8006206:	4d36      	ldr	r5, [pc, #216]	; (80062e0 <D80_GENERIC+0x294>)
 8006208:	fb27 c705 	smlad	r7, r7, r5, ip
 800620c:	4d35      	ldr	r5, [pc, #212]	; (80062e4 <D80_GENERIC+0x298>)
 800620e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8006212:	9102      	str	r1, [sp, #8]
 8006214:	9908      	ldr	r1, [sp, #32]
 8006216:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800621a:	b181      	cbz	r1, 800623e <D80_GENERIC+0x1f2>
 800621c:	9c04      	ldr	r4, [sp, #16]
 800621e:	9d05      	ldr	r5, [sp, #20]
 8006220:	9305      	str	r3, [sp, #20]
 8006222:	441c      	add	r4, r3
 8006224:	1b64      	subs	r4, r4, r5
 8006226:	17e7      	asrs	r7, r4, #31
 8006228:	fba4 4501 	umull	r4, r5, r4, r1
 800622c:	fb01 5507 	mla	r5, r1, r7, r5
 8006230:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8006234:	f145 0500 	adc.w	r5, r5, #0
 8006238:	0069      	lsls	r1, r5, #1
 800623a:	9104      	str	r1, [sp, #16]
 800623c:	460b      	mov	r3, r1
 800623e:	9e00      	ldr	r6, [sp, #0]
 8006240:	9f06      	ldr	r7, [sp, #24]
 8006242:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8006244:	025b      	lsls	r3, r3, #9
 8006246:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800624a:	2500      	movs	r5, #0
 800624c:	fb02 f101 	mul.w	r1, r2, r1
 8006250:	fbc7 4503 	smlal	r4, r5, r7, r3
 8006254:	9c07      	ldr	r4, [sp, #28]
 8006256:	10ab      	asrs	r3, r5, #2
 8006258:	f303 030f 	ssat	r3, #16, r3
 800625c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8006260:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8006262:	3201      	adds	r2, #1
 8006264:	4293      	cmp	r3, r2
 8006266:	dd13      	ble.n	8006290 <D80_GENERIC+0x244>
 8006268:	9b00      	ldr	r3, [sp, #0]
 800626a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800626e:	f1bc 0f01 	cmp.w	ip, #1
 8006272:	f47f af0b 	bne.w	800608c <D80_GENERIC+0x40>
 8006276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006278:	6884      	ldr	r4, [r0, #8]
 800627a:	069b      	lsls	r3, r3, #26
 800627c:	e890 0082 	ldmia.w	r0, {r1, r7}
 8006280:	f100 000a 	add.w	r0, r0, #10
 8006284:	f57f af3a 	bpl.w	80060fc <D80_GENERIC+0xb0>
 8006288:	ba49      	rev16	r1, r1
 800628a:	ba7f      	rev16	r7, r7
 800628c:	ba64      	rev16	r4, r4
 800628e:	e735      	b.n	80060fc <D80_GENERIC+0xb0>
 8006290:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006294:	4632      	mov	r2, r6
 8006296:	9b02      	ldr	r3, [sp, #8]
 8006298:	6093      	str	r3, [r2, #8]
 800629a:	9b01      	ldr	r3, [sp, #4]
 800629c:	60d3      	str	r3, [r2, #12]
 800629e:	9b04      	ldr	r3, [sp, #16]
 80062a0:	6113      	str	r3, [r2, #16]
 80062a2:	9b05      	ldr	r3, [sp, #20]
 80062a4:	6153      	str	r3, [r2, #20]
 80062a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a8:	f8c2 b01c 	str.w	fp, [r2, #28]
 80062ac:	2000      	movs	r0, #0
 80062ae:	6193      	str	r3, [r2, #24]
 80062b0:	b00b      	add	sp, #44	; 0x2c
 80062b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b6:	bf00      	nop
 80062b8:	002d0024 	.word	0x002d0024
 80062bc:	001c0015 	.word	0x001c0015
 80062c0:	000f000a 	.word	0x000f000a
 80062c4:	00060003 	.word	0x00060003
 80062c8:	0037003f 	.word	0x0037003f
 80062cc:	00450049 	.word	0x00450049
 80062d0:	00490045 	.word	0x00490045
 80062d4:	003f0037 	.word	0x003f0037
 80062d8:	00030006 	.word	0x00030006
 80062dc:	000a000f 	.word	0x000a000f
 80062e0:	0015001c 	.word	0x0015001c
 80062e4:	0024002d 	.word	0x0024002d
 80062e8:	20000000 	.word	0x20000000

080062ec <D128_GENERIC>:
 80062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f0:	b093      	sub	sp, #76	; 0x4c
 80062f2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80062f4:	9005      	str	r0, [sp, #20]
 80062f6:	4610      	mov	r0, r2
 80062f8:	9201      	str	r2, [sp, #4]
 80062fa:	6912      	ldr	r2, [r2, #16]
 80062fc:	920c      	str	r2, [sp, #48]	; 0x30
 80062fe:	4602      	mov	r2, r0
 8006300:	6940      	ldr	r0, [r0, #20]
 8006302:	900d      	str	r0, [sp, #52]	; 0x34
 8006304:	4610      	mov	r0, r2
 8006306:	4614      	mov	r4, r2
 8006308:	6992      	ldr	r2, [r2, #24]
 800630a:	9211      	str	r2, [sp, #68]	; 0x44
 800630c:	69c2      	ldr	r2, [r0, #28]
 800630e:	9202      	str	r2, [sp, #8]
 8006310:	68e2      	ldr	r2, [r4, #12]
 8006312:	6880      	ldr	r0, [r0, #8]
 8006314:	9203      	str	r2, [sp, #12]
 8006316:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006318:	9004      	str	r0, [sp, #16]
 800631a:	920e      	str	r2, [sp, #56]	; 0x38
 800631c:	910f      	str	r1, [sp, #60]	; 0x3c
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 819b 	beq.w	800665a <D128_GENERIC+0x36e>
 8006324:	6a23      	ldr	r3, [r4, #32]
 8006326:	9310      	str	r3, [sp, #64]	; 0x40
 8006328:	2300      	movs	r3, #0
 800632a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 80066d4 <D128_GENERIC+0x3e8>
 800632e:	9306      	str	r3, [sp, #24]
 8006330:	e17a      	b.n	8006628 <D128_GENERIC+0x33c>
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	9d05      	ldr	r5, [sp, #20]
 8006336:	b214      	sxth	r4, r2
 8006338:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800633c:	4250      	negs	r0, r2
 800633e:	eb05 010a 	add.w	r1, r5, sl
 8006342:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006346:	eb01 0800 	add.w	r8, r1, r0
 800634a:	eb0b 0c04 	add.w	ip, fp, r4
 800634e:	eb08 070c 	add.w	r7, r8, ip
 8006352:	183b      	adds	r3, r7, r0
 8006354:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8006358:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800635c:	eb0e 0604 	add.w	r6, lr, r4
 8006360:	9307      	str	r3, [sp, #28]
 8006362:	1833      	adds	r3, r6, r0
 8006364:	9305      	str	r3, [sp, #20]
 8006366:	462b      	mov	r3, r5
 8006368:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800636c:	f8cd a020 	str.w	sl, [sp, #32]
 8006370:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8006374:	f813 c002 	ldrb.w	ip, [r3, r2]
 8006378:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800637c:	5c3a      	ldrb	r2, [r7, r0]
 800637e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8006382:	781f      	ldrb	r7, [r3, #0]
 8006384:	9b07      	ldr	r3, [sp, #28]
 8006386:	9d05      	ldr	r5, [sp, #20]
 8006388:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800638c:	5c09      	ldrb	r1, [r1, r0]
 800638e:	9709      	str	r7, [sp, #36]	; 0x24
 8006390:	9307      	str	r3, [sp, #28]
 8006392:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8006396:	5c33      	ldrb	r3, [r6, r0]
 8006398:	0412      	lsls	r2, r2, #16
 800639a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800639e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 80063a2:	9d08      	ldr	r5, [sp, #32]
 80063a4:	eb06 0a04 	add.w	sl, r6, r4
 80063a8:	0409      	lsls	r1, r1, #16
 80063aa:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 80063ae:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80063b2:	5d36      	ldrb	r6, [r6, r4]
 80063b4:	9c05      	ldr	r4, [sp, #20]
 80063b6:	042d      	lsls	r5, r5, #16
 80063b8:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 80063bc:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80063c0:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 80063c4:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 80063c8:	eb0a 0c00 	add.w	ip, sl, r0
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80063d2:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80063d6:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 80063da:	9d07      	ldr	r5, [sp, #28]
 80063dc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80063e0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 80063e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80063e6:	4458      	add	r0, fp
 80063e8:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 80063ec:	9005      	str	r0, [sp, #20]
 80063ee:	4439      	add	r1, r7
 80063f0:	442a      	add	r2, r5
 80063f2:	44b2      	add	sl, r6
 80063f4:	1918      	adds	r0, r3, r4
 80063f6:	b2cb      	uxtb	r3, r1
 80063f8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80063fc:	9e02      	ldr	r6, [sp, #8]
 80063fe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006402:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8006406:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800640a:	441e      	add	r6, r3
 800640c:	0e09      	lsrs	r1, r1, #24
 800640e:	4633      	mov	r3, r6
 8006410:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8006414:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8006418:	b2d4      	uxtb	r4, r2
 800641a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800641e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006422:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8006426:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800642a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800642e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006432:	0e12      	lsrs	r2, r2, #24
 8006434:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8006438:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800643c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8006440:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8006444:	9702      	str	r7, [sp, #8]
 8006446:	b2c2      	uxtb	r2, r0
 8006448:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800644c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8006450:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8006454:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8006458:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800645c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8006460:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8006464:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8006468:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800646c:	0e00      	lsrs	r0, r0, #24
 800646e:	fa5f f68a 	uxtb.w	r6, sl
 8006472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006476:	9309      	str	r3, [sp, #36]	; 0x24
 8006478:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800647c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8006480:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8006484:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8006488:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800648c:	950a      	str	r5, [sp, #40]	; 0x28
 800648e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8006492:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8006496:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800649a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800649e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 80064a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80064a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80064a8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80064ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ae:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80064b2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80064bc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80064c0:	9b02      	ldr	r3, [sp, #8]
 80064c2:	f8cd c008 	str.w	ip, [sp, #8]
 80064c6:	4694      	mov	ip, r2
 80064c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ca:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 80064ce:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80064d2:	9a02      	ldr	r2, [sp, #8]
 80064d4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80064d8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80064dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80064e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064e2:	f8cd a020 	str.w	sl, [sp, #32]
 80064e6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80064ea:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80064ee:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80064f2:	9b07      	ldr	r3, [sp, #28]
 80064f4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80064f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80064fc:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8006500:	9a08      	ldr	r2, [sp, #32]
 8006502:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800650a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800650e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006512:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8006516:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800651a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800651e:	0a96      	lsrs	r6, r2, #10
 8006520:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006524:	9602      	str	r6, [sp, #8]
 8006526:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800652a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800652e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8006532:	4e53      	ldr	r6, [pc, #332]	; (8006680 <D128_GENERIC+0x394>)
 8006534:	9f03      	ldr	r7, [sp, #12]
 8006536:	fb2c 7606 	smlad	r6, ip, r6, r7
 800653a:	4f52      	ldr	r7, [pc, #328]	; (8006684 <D128_GENERIC+0x398>)
 800653c:	fb2a 6607 	smlad	r6, sl, r7, r6
 8006540:	4f51      	ldr	r7, [pc, #324]	; (8006688 <D128_GENERIC+0x39c>)
 8006542:	fb21 6607 	smlad	r6, r1, r7, r6
 8006546:	4f51      	ldr	r7, [pc, #324]	; (800668c <D128_GENERIC+0x3a0>)
 8006548:	fb24 6607 	smlad	r6, r4, r7, r6
 800654c:	4f50      	ldr	r7, [pc, #320]	; (8006690 <D128_GENERIC+0x3a4>)
 800654e:	fb28 6607 	smlad	r6, r8, r7, r6
 8006552:	4f50      	ldr	r7, [pc, #320]	; (8006694 <D128_GENERIC+0x3a8>)
 8006554:	fb20 6607 	smlad	r6, r0, r7, r6
 8006558:	4f4f      	ldr	r7, [pc, #316]	; (8006698 <D128_GENERIC+0x3ac>)
 800655a:	fb23 6607 	smlad	r6, r3, r7, r6
 800655e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8006562:	fb25 6607 	smlad	r6, r5, r7, r6
 8006566:	4f4d      	ldr	r7, [pc, #308]	; (800669c <D128_GENERIC+0x3b0>)
 8006568:	9a04      	ldr	r2, [sp, #16]
 800656a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800656e:	4a4c      	ldr	r2, [pc, #304]	; (80066a0 <D128_GENERIC+0x3b4>)
 8006570:	fb2a ee02 	smlad	lr, sl, r2, lr
 8006574:	4f4b      	ldr	r7, [pc, #300]	; (80066a4 <D128_GENERIC+0x3b8>)
 8006576:	fb21 ee07 	smlad	lr, r1, r7, lr
 800657a:	4f4b      	ldr	r7, [pc, #300]	; (80066a8 <D128_GENERIC+0x3bc>)
 800657c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8006580:	4f4a      	ldr	r7, [pc, #296]	; (80066ac <D128_GENERIC+0x3c0>)
 8006582:	fb28 ee07 	smlad	lr, r8, r7, lr
 8006586:	4f4a      	ldr	r7, [pc, #296]	; (80066b0 <D128_GENERIC+0x3c4>)
 8006588:	fb20 ee07 	smlad	lr, r0, r7, lr
 800658c:	4f49      	ldr	r7, [pc, #292]	; (80066b4 <D128_GENERIC+0x3c8>)
 800658e:	fb23 e707 	smlad	r7, r3, r7, lr
 8006592:	f8df e144 	ldr.w	lr, [pc, #324]	; 80066d8 <D128_GENERIC+0x3ec>
 8006596:	fb25 720e 	smlad	r2, r5, lr, r7
 800659a:	f04f 0b01 	mov.w	fp, #1
 800659e:	9203      	str	r2, [sp, #12]
 80065a0:	fb2c fb0b 	smuad	fp, ip, fp
 80065a4:	4f44      	ldr	r7, [pc, #272]	; (80066b8 <D128_GENERIC+0x3cc>)
 80065a6:	fb2a ba07 	smlad	sl, sl, r7, fp
 80065aa:	4f44      	ldr	r7, [pc, #272]	; (80066bc <D128_GENERIC+0x3d0>)
 80065ac:	fb21 aa07 	smlad	sl, r1, r7, sl
 80065b0:	4f43      	ldr	r7, [pc, #268]	; (80066c0 <D128_GENERIC+0x3d4>)
 80065b2:	fb24 aa07 	smlad	sl, r4, r7, sl
 80065b6:	4f43      	ldr	r7, [pc, #268]	; (80066c4 <D128_GENERIC+0x3d8>)
 80065b8:	fb28 a707 	smlad	r7, r8, r7, sl
 80065bc:	4a42      	ldr	r2, [pc, #264]	; (80066c8 <D128_GENERIC+0x3dc>)
 80065be:	fb20 7702 	smlad	r7, r0, r2, r7
 80065c2:	4a42      	ldr	r2, [pc, #264]	; (80066cc <D128_GENERIC+0x3e0>)
 80065c4:	fb23 7702 	smlad	r7, r3, r2, r7
 80065c8:	4b41      	ldr	r3, [pc, #260]	; (80066d0 <D128_GENERIC+0x3e4>)
 80065ca:	fb25 7303 	smlad	r3, r5, r3, r7
 80065ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80065d6:	b185      	cbz	r5, 80065fa <D128_GENERIC+0x30e>
 80065d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065dc:	960d      	str	r6, [sp, #52]	; 0x34
 80065de:	4432      	add	r2, r6
 80065e0:	1a52      	subs	r2, r2, r1
 80065e2:	17d1      	asrs	r1, r2, #31
 80065e4:	fba2 2305 	umull	r2, r3, r2, r5
 80065e8:	fb05 3301 	mla	r3, r5, r1, r3
 80065ec:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80065f0:	f143 0300 	adc.w	r3, r3, #0
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	930c      	str	r3, [sp, #48]	; 0x30
 80065f8:	461e      	mov	r6, r3
 80065fa:	9801      	ldr	r0, [sp, #4]
 80065fc:	9c06      	ldr	r4, [sp, #24]
 80065fe:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8006600:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006602:	01f6      	lsls	r6, r6, #7
 8006604:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006608:	2300      	movs	r3, #0
 800660a:	fbc5 2306 	smlal	r2, r3, r5, r6
 800660e:	fb04 f101 	mul.w	r1, r4, r1
 8006612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006614:	109b      	asrs	r3, r3, #2
 8006616:	f303 030f 	ssat	r3, #16, r3
 800661a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800661e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8006620:	1c62      	adds	r2, r4, #1
 8006622:	4293      	cmp	r3, r2
 8006624:	9206      	str	r2, [sp, #24]
 8006626:	dd18      	ble.n	800665a <D128_GENERIC+0x36e>
 8006628:	9b01      	ldr	r3, [sp, #4]
 800662a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800662c:	2a01      	cmp	r2, #1
 800662e:	f47f ae80 	bne.w	8006332 <D128_GENERIC+0x46>
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	9d05      	ldr	r5, [sp, #20]
 8006636:	069b      	lsls	r3, r3, #26
 8006638:	6829      	ldr	r1, [r5, #0]
 800663a:	686a      	ldr	r2, [r5, #4]
 800663c:	68a8      	ldr	r0, [r5, #8]
 800663e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006642:	f105 0410 	add.w	r4, r5, #16
 8006646:	d506      	bpl.n	8006656 <D128_GENERIC+0x36a>
 8006648:	ba49      	rev16	r1, r1
 800664a:	ba52      	rev16	r2, r2
 800664c:	ba40      	rev16	r0, r0
 800664e:	fa9a fa9a 	rev16.w	sl, sl
 8006652:	9405      	str	r4, [sp, #20]
 8006654:	e6cf      	b.n	80063f6 <D128_GENERIC+0x10a>
 8006656:	9405      	str	r4, [sp, #20]
 8006658:	e6cd      	b.n	80063f6 <D128_GENERIC+0x10a>
 800665a:	9a01      	ldr	r2, [sp, #4]
 800665c:	9904      	ldr	r1, [sp, #16]
 800665e:	6091      	str	r1, [r2, #8]
 8006660:	9903      	ldr	r1, [sp, #12]
 8006662:	60d1      	str	r1, [r2, #12]
 8006664:	9b02      	ldr	r3, [sp, #8]
 8006666:	61d3      	str	r3, [r2, #28]
 8006668:	4611      	mov	r1, r2
 800666a:	4613      	mov	r3, r2
 800666c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800666e:	610a      	str	r2, [r1, #16]
 8006670:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006672:	6159      	str	r1, [r3, #20]
 8006674:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006676:	6199      	str	r1, [r3, #24]
 8006678:	2000      	movs	r0, #0
 800667a:	b013      	add	sp, #76	; 0x4c
 800667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006680:	00780069 	.word	0x00780069
 8006684:	005b004e 	.word	0x005b004e
 8006688:	00420037 	.word	0x00420037
 800668c:	002d0024 	.word	0x002d0024
 8006690:	001c0015 	.word	0x001c0015
 8006694:	000f000a 	.word	0x000f000a
 8006698:	00060003 	.word	0x00060003
 800669c:	00880096 	.word	0x00880096
 80066a0:	00a200ac 	.word	0x00a200ac
 80066a4:	00b400ba 	.word	0x00b400ba
 80066a8:	00be00c0 	.word	0x00be00c0
 80066ac:	00c000be 	.word	0x00c000be
 80066b0:	00ba00b4 	.word	0x00ba00b4
 80066b4:	00ac00a2 	.word	0x00ac00a2
 80066b8:	00030006 	.word	0x00030006
 80066bc:	000a000f 	.word	0x000a000f
 80066c0:	0015001c 	.word	0x0015001c
 80066c4:	0024002d 	.word	0x0024002d
 80066c8:	00370042 	.word	0x00370042
 80066cc:	004e005b 	.word	0x004e005b
 80066d0:	00690078 	.word	0x00690078
 80066d4:	20000000 	.word	0x20000000
 80066d8:	00960088 	.word	0x00960088

080066dc <D16_1CH_HTONS_VOL_HP>:
 80066dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e0:	4691      	mov	r9, r2
 80066e2:	b083      	sub	sp, #12
 80066e4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80066e6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80066ea:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4680      	mov	r8, r0
 80066f2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80066f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80066fa:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80066fe:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8006702:	9401      	str	r4, [sp, #4]
 8006704:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8006708:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800670c:	2a00      	cmp	r2, #0
 800670e:	d04e      	beq.n	80067ae <D16_1CH_HTONS_VOL_HP+0xd2>
 8006710:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80067bc <D16_1CH_HTONS_VOL_HP+0xe0>
 8006714:	1e8c      	subs	r4, r1, #2
 8006716:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800671a:	f858 2b02 	ldr.w	r2, [r8], #2
 800671e:	ba52      	rev16	r2, r2
 8006720:	b2d6      	uxtb	r6, r2
 8006722:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006726:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800672a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800672e:	4413      	add	r3, r2
 8006730:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8006734:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8006738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800673c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006740:	0a93      	lsrs	r3, r2, #10
 8006742:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8006744:	fb21 5202 	smlad	r2, r1, r2, r5
 8006748:	4d1b      	ldr	r5, [pc, #108]	; (80067b8 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800674a:	fb21 f505 	smuad	r5, r1, r5
 800674e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006752:	4410      	add	r0, r2
 8006754:	1bc0      	subs	r0, r0, r7
 8006756:	17c7      	asrs	r7, r0, #31
 8006758:	fba0 010e 	umull	r0, r1, r0, lr
 800675c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006760:	fb0e 1107 	mla	r1, lr, r7, r1
 8006764:	f141 0100 	adc.w	r1, r1, #0
 8006768:	0448      	lsls	r0, r1, #17
 800676a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800676e:	2700      	movs	r7, #0
 8006770:	fbc0 670a 	smlal	r6, r7, r0, sl
 8006774:	45d8      	cmp	r8, fp
 8006776:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800677a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800677e:	4617      	mov	r7, r2
 8006780:	f301 010f 	ssat	r1, #16, r1
 8006784:	f824 1f02 	strh.w	r1, [r4, #2]!
 8006788:	d1c7      	bne.n	800671a <D16_1CH_HTONS_VOL_HP+0x3e>
 800678a:	9901      	ldr	r1, [sp, #4]
 800678c:	f8c9 301c 	str.w	r3, [r9, #28]
 8006790:	9b00      	ldr	r3, [sp, #0]
 8006792:	f8c9 0010 	str.w	r0, [r9, #16]
 8006796:	2000      	movs	r0, #0
 8006798:	f8c9 5008 	str.w	r5, [r9, #8]
 800679c:	f8c9 100c 	str.w	r1, [r9, #12]
 80067a0:	f8c9 2014 	str.w	r2, [r9, #20]
 80067a4:	f8c9 3018 	str.w	r3, [r9, #24]
 80067a8:	b003      	add	sp, #12
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	463a      	mov	r2, r7
 80067b0:	4621      	mov	r1, r4
 80067b2:	e7eb      	b.n	800678c <D16_1CH_HTONS_VOL_HP+0xb0>
 80067b4:	00030001 	.word	0x00030001
 80067b8:	00010003 	.word	0x00010003
 80067bc:	20000000 	.word	0x20000000

080067c0 <D24_1CH_HTONS_VOL_HP>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	b089      	sub	sp, #36	; 0x24
 80067c6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80067c8:	6996      	ldr	r6, [r2, #24]
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80067ce:	9207      	str	r2, [sp, #28]
 80067d0:	6915      	ldr	r5, [r2, #16]
 80067d2:	6954      	ldr	r4, [r2, #20]
 80067d4:	9606      	str	r6, [sp, #24]
 80067d6:	6893      	ldr	r3, [r2, #8]
 80067d8:	69d6      	ldr	r6, [r2, #28]
 80067da:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80067de:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80067e2:	9a04      	ldr	r2, [sp, #16]
 80067e4:	9705      	str	r7, [sp, #20]
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	d07e      	beq.n	80068e8 <D24_1CH_HTONS_VOL_HP+0x128>
 80067ea:	f1a1 0b02 	sub.w	fp, r1, #2
 80067ee:	2700      	movs	r7, #0
 80067f0:	46a8      	mov	r8, r5
 80067f2:	f8cd b004 	str.w	fp, [sp, #4]
 80067f6:	4655      	mov	r5, sl
 80067f8:	46e3      	mov	fp, ip
 80067fa:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 80068f4 <D24_1CH_HTONS_VOL_HP+0x134>
 80067fe:	46ba      	mov	sl, r7
 8006800:	469c      	mov	ip, r3
 8006802:	e055      	b.n	80068b0 <D24_1CH_HTONS_VOL_HP+0xf0>
 8006804:	7802      	ldrb	r2, [r0, #0]
 8006806:	78c3      	ldrb	r3, [r0, #3]
 8006808:	7841      	ldrb	r1, [r0, #1]
 800680a:	0212      	lsls	r2, r2, #8
 800680c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8006810:	440b      	add	r3, r1
 8006812:	3002      	adds	r0, #2
 8006814:	b2d9      	uxtb	r1, r3
 8006816:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800681a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800681e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8006828:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800682c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8006830:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8006834:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006838:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800683c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8006840:	4a2a      	ldr	r2, [pc, #168]	; (80068ec <D24_1CH_HTONS_VOL_HP+0x12c>)
 8006842:	fb23 b102 	smlad	r1, r3, r2, fp
 8006846:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <D24_1CH_HTONS_VOL_HP+0x130>)
 8006848:	fb23 cb02 	smlad	fp, r3, r2, ip
 800684c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8006850:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8006854:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8006858:	2201      	movs	r2, #1
 800685a:	fb23 f702 	smuad	r7, r3, r2
 800685e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8006862:	eb01 0208 	add.w	r2, r1, r8
 8006866:	1b12      	subs	r2, r2, r4
 8006868:	17d4      	asrs	r4, r2, #31
 800686a:	fba2 2305 	umull	r2, r3, r2, r5
 800686e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006872:	fb05 3304 	mla	r3, r5, r4, r3
 8006876:	f143 0300 	adc.w	r3, r3, #0
 800687a:	9c05      	ldr	r4, [sp, #20]
 800687c:	03da      	lsls	r2, r3, #15
 800687e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006882:	f04f 0900 	mov.w	r9, #0
 8006886:	fbc4 8902 	smlal	r8, r9, r4, r2
 800688a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800688e:	9a01      	ldr	r2, [sp, #4]
 8006890:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	109b      	asrs	r3, r3, #2
 8006898:	f303 030f 	ssat	r3, #16, r3
 800689c:	f822 3f02 	strh.w	r3, [r2, #2]!
 80068a0:	9b04      	ldr	r3, [sp, #16]
 80068a2:	9201      	str	r2, [sp, #4]
 80068a4:	f10a 0a01 	add.w	sl, sl, #1
 80068a8:	459a      	cmp	sl, r3
 80068aa:	44bc      	add	ip, r7
 80068ac:	460c      	mov	r4, r1
 80068ae:	d00b      	beq.n	80068c8 <D24_1CH_HTONS_VOL_HP+0x108>
 80068b0:	f01a 0f01 	tst.w	sl, #1
 80068b4:	d0a6      	beq.n	8006804 <D24_1CH_HTONS_VOL_HP+0x44>
 80068b6:	78c2      	ldrb	r2, [r0, #3]
 80068b8:	7883      	ldrb	r3, [r0, #2]
 80068ba:	f810 1b04 	ldrb.w	r1, [r0], #4
 80068be:	0212      	lsls	r2, r2, #8
 80068c0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80068c4:	440b      	add	r3, r1
 80068c6:	e7a5      	b.n	8006814 <D24_1CH_HTONS_VOL_HP+0x54>
 80068c8:	4663      	mov	r3, ip
 80068ca:	4645      	mov	r5, r8
 80068cc:	46dc      	mov	ip, fp
 80068ce:	9807      	ldr	r0, [sp, #28]
 80068d0:	6141      	str	r1, [r0, #20]
 80068d2:	9906      	ldr	r1, [sp, #24]
 80068d4:	6083      	str	r3, [r0, #8]
 80068d6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80068da:	61c6      	str	r6, [r0, #28]
 80068dc:	6105      	str	r5, [r0, #16]
 80068de:	6181      	str	r1, [r0, #24]
 80068e0:	2000      	movs	r0, #0
 80068e2:	b009      	add	sp, #36	; 0x24
 80068e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e8:	4621      	mov	r1, r4
 80068ea:	e7f0      	b.n	80068ce <D24_1CH_HTONS_VOL_HP+0x10e>
 80068ec:	00030001 	.word	0x00030001
 80068f0:	00060007 	.word	0x00060007
 80068f4:	20000000 	.word	0x20000000

080068f8 <D32_1CH_HTONS_VOL_HP>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	4692      	mov	sl, r2
 80068fe:	b087      	sub	sp, #28
 8006900:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006902:	f8da 3018 	ldr.w	r3, [sl, #24]
 8006906:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	f8da 4010 	ldr.w	r4, [sl, #16]
 8006910:	f8da 8014 	ldr.w	r8, [sl, #20]
 8006914:	f8da 601c 	ldr.w	r6, [sl, #28]
 8006918:	f8da 3008 	ldr.w	r3, [sl, #8]
 800691c:	f8da e00c 	ldr.w	lr, [sl, #12]
 8006920:	9501      	str	r5, [sp, #4]
 8006922:	f8da c020 	ldr.w	ip, [sl, #32]
 8006926:	2a00      	cmp	r2, #0
 8006928:	d07b      	beq.n	8006a22 <D32_1CH_HTONS_VOL_HP+0x12a>
 800692a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800692e:	4f3e      	ldr	r7, [pc, #248]	; (8006a28 <D32_1CH_HTONS_VOL_HP+0x130>)
 8006930:	f8cd c00c 	str.w	ip, [sp, #12]
 8006934:	9202      	str	r2, [sp, #8]
 8006936:	460d      	mov	r5, r1
 8006938:	46a1      	mov	r9, r4
 800693a:	4684      	mov	ip, r0
 800693c:	f8cd a014 	str.w	sl, [sp, #20]
 8006940:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006944:	ba49      	rev16	r1, r1
 8006946:	b2c8      	uxtb	r0, r1
 8006948:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800694c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8006950:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8006954:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006958:	0e09      	lsrs	r1, r1, #24
 800695a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800695e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8006962:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8006966:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800696a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800696e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8006972:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006976:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800697a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800697e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006982:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8006986:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800698a:	4a28      	ldr	r2, [pc, #160]	; (8006a2c <D32_1CH_HTONS_VOL_HP+0x134>)
 800698c:	fb20 e202 	smlad	r2, r0, r2, lr
 8006990:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006994:	fb2a 2101 	smlad	r1, sl, r1, r2
 8006998:	4a25      	ldr	r2, [pc, #148]	; (8006a30 <D32_1CH_HTONS_VOL_HP+0x138>)
 800699a:	fb20 3302 	smlad	r3, r0, r2, r3
 800699e:	4a25      	ldr	r2, [pc, #148]	; (8006a34 <D32_1CH_HTONS_VOL_HP+0x13c>)
 80069a0:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80069a4:	2301      	movs	r3, #1
 80069a6:	fb20 f003 	smuad	r0, r0, r3
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <D32_1CH_HTONS_VOL_HP+0x140>)
 80069ac:	fb2a 0303 	smlad	r3, sl, r3, r0
 80069b0:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 80069b4:	9c03      	ldr	r4, [sp, #12]
 80069b6:	eb02 0009 	add.w	r0, r2, r9
 80069ba:	eba0 0008 	sub.w	r0, r0, r8
 80069be:	ea4f 7be0 	mov.w	fp, r0, asr #31
 80069c2:	fba0 0104 	umull	r0, r1, r0, r4
 80069c6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80069ca:	fb04 110b 	mla	r1, r4, fp, r1
 80069ce:	f141 0100 	adc.w	r1, r1, #0
 80069d2:	9c01      	ldr	r4, [sp, #4]
 80069d4:	0388      	lsls	r0, r1, #14
 80069d6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80069da:	f04f 0900 	mov.w	r9, #0
 80069de:	fbc0 8904 	smlal	r8, r9, r0, r4
 80069e2:	ea4f 00a9 	mov.w	r0, r9, asr #2
 80069e6:	ea4f 0941 	mov.w	r9, r1, lsl #1
 80069ea:	f300 000f 	ssat	r0, #16, r0
 80069ee:	9902      	ldr	r1, [sp, #8]
 80069f0:	f825 0b02 	strh.w	r0, [r5], #2
 80069f4:	428d      	cmp	r5, r1
 80069f6:	4690      	mov	r8, r2
 80069f8:	d1a2      	bne.n	8006940 <D32_1CH_HTONS_VOL_HP+0x48>
 80069fa:	f8dd a014 	ldr.w	sl, [sp, #20]
 80069fe:	464c      	mov	r4, r9
 8006a00:	f8ca 3008 	str.w	r3, [sl, #8]
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	f8ca e00c 	str.w	lr, [sl, #12]
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f8ca 601c 	str.w	r6, [sl, #28]
 8006a10:	f8ca 4010 	str.w	r4, [sl, #16]
 8006a14:	f8ca 2014 	str.w	r2, [sl, #20]
 8006a18:	f8ca 3018 	str.w	r3, [sl, #24]
 8006a1c:	b007      	add	sp, #28
 8006a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a22:	4642      	mov	r2, r8
 8006a24:	e7ec      	b.n	8006a00 <D32_1CH_HTONS_VOL_HP+0x108>
 8006a26:	bf00      	nop
 8006a28:	20000000 	.word	0x20000000
 8006a2c:	00060003 	.word	0x00060003
 8006a30:	000a000c 	.word	0x000a000c
 8006a34:	000c000a 	.word	0x000c000a
 8006a38:	00030006 	.word	0x00030006

08006a3c <D48_1CH_HTONS_VOL_HP>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	4613      	mov	r3, r2
 8006a42:	461c      	mov	r4, r3
 8006a44:	b087      	sub	sp, #28
 8006a46:	4625      	mov	r5, r4
 8006a48:	4626      	mov	r6, r4
 8006a4a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8006a4c:	9205      	str	r2, [sp, #20]
 8006a4e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006a50:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8006a54:	9501      	str	r5, [sp, #4]
 8006a56:	4680      	mov	r8, r0
 8006a58:	6a35      	ldr	r5, [r6, #32]
 8006a5a:	6918      	ldr	r0, [r3, #16]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	9304      	str	r3, [sp, #16]
 8006a60:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8006a64:	68a3      	ldr	r3, [r4, #8]
 8006a66:	9502      	str	r5, [sp, #8]
 8006a68:	68e4      	ldr	r4, [r4, #12]
 8006a6a:	2a00      	cmp	r2, #0
 8006a6c:	f000 808c 	beq.w	8006b88 <D48_1CH_HTONS_VOL_HP+0x14c>
 8006a70:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006a74:	4d45      	ldr	r5, [pc, #276]	; (8006b8c <D48_1CH_HTONS_VOL_HP+0x150>)
 8006a76:	9203      	str	r2, [sp, #12]
 8006a78:	468c      	mov	ip, r1
 8006a7a:	e898 0044 	ldmia.w	r8, {r2, r6}
 8006a7e:	f108 0806 	add.w	r8, r8, #6
 8006a82:	ba52      	rev16	r2, r2
 8006a84:	ba76      	rev16	r6, r6
 8006a86:	b2d7      	uxtb	r7, r2
 8006a88:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006a8c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8006a90:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8006a94:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8006a98:	0e12      	lsrs	r2, r2, #24
 8006a9a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8006a9e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8006aa2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8006aa6:	fa5f fb86 	uxtb.w	fp, r6
 8006aaa:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8006aae:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8006ab2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8006ab6:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8006aba:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8006abe:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006ac2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8006ac6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8006aca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006ace:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006ad2:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8006ad6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006ada:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006ade:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006ae2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8006ae6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8006aea:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8006aee:	4a28      	ldr	r2, [pc, #160]	; (8006b90 <D48_1CH_HTONS_VOL_HP+0x154>)
 8006af0:	fb2a 4202 	smlad	r2, sl, r2, r4
 8006af4:	4927      	ldr	r1, [pc, #156]	; (8006b94 <D48_1CH_HTONS_VOL_HP+0x158>)
 8006af6:	fb27 2201 	smlad	r2, r7, r1, r2
 8006afa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006afe:	fb26 2201 	smlad	r2, r6, r1, r2
 8006b02:	4925      	ldr	r1, [pc, #148]	; (8006b98 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8006b04:	fb2a 3401 	smlad	r4, sl, r1, r3
 8006b08:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8006b0c:	fb27 4403 	smlad	r4, r7, r3, r4
 8006b10:	4b22      	ldr	r3, [pc, #136]	; (8006b9c <D48_1CH_HTONS_VOL_HP+0x160>)
 8006b12:	fb26 4403 	smlad	r4, r6, r3, r4
 8006b16:	2101      	movs	r1, #1
 8006b18:	fb2a fa01 	smuad	sl, sl, r1
 8006b1c:	4b20      	ldr	r3, [pc, #128]	; (8006ba0 <D48_1CH_HTONS_VOL_HP+0x164>)
 8006b1e:	fb27 a703 	smlad	r7, r7, r3, sl
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <D48_1CH_HTONS_VOL_HP+0x168>)
 8006b24:	fb26 7303 	smlad	r3, r6, r3, r7
 8006b28:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8006b2c:	9e02      	ldr	r6, [sp, #8]
 8006b2e:	9f01      	ldr	r7, [sp, #4]
 8006b30:	4410      	add	r0, r2
 8006b32:	eba0 0009 	sub.w	r0, r0, r9
 8006b36:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8006b3a:	fba0 0106 	umull	r0, r1, r0, r6
 8006b3e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006b42:	fb06 110a 	mla	r1, r6, sl, r1
 8006b46:	f141 0100 	adc.w	r1, r1, #0
 8006b4a:	0308      	lsls	r0, r1, #12
 8006b4c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8006b50:	f04f 0a00 	mov.w	sl, #0
 8006b54:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8006b58:	4657      	mov	r7, sl
 8006b5a:	10b8      	asrs	r0, r7, #2
 8006b5c:	f300 000f 	ssat	r0, #16, r0
 8006b60:	f82c 0b02 	strh.w	r0, [ip], #2
 8006b64:	0048      	lsls	r0, r1, #1
 8006b66:	9903      	ldr	r1, [sp, #12]
 8006b68:	458c      	cmp	ip, r1
 8006b6a:	4691      	mov	r9, r2
 8006b6c:	d185      	bne.n	8006a7a <D48_1CH_HTONS_VOL_HP+0x3e>
 8006b6e:	9d05      	ldr	r5, [sp, #20]
 8006b70:	616a      	str	r2, [r5, #20]
 8006b72:	9a04      	ldr	r2, [sp, #16]
 8006b74:	6128      	str	r0, [r5, #16]
 8006b76:	2000      	movs	r0, #0
 8006b78:	60ab      	str	r3, [r5, #8]
 8006b7a:	60ec      	str	r4, [r5, #12]
 8006b7c:	f8c5 e01c 	str.w	lr, [r5, #28]
 8006b80:	61aa      	str	r2, [r5, #24]
 8006b82:	b007      	add	sp, #28
 8006b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b88:	464a      	mov	r2, r9
 8006b8a:	e7f0      	b.n	8006b6e <D48_1CH_HTONS_VOL_HP+0x132>
 8006b8c:	20000000 	.word	0x20000000
 8006b90:	000f000a 	.word	0x000f000a
 8006b94:	00060003 	.word	0x00060003
 8006b98:	00150019 	.word	0x00150019
 8006b9c:	00190015 	.word	0x00190015
 8006ba0:	00030006 	.word	0x00030006
 8006ba4:	000a000f 	.word	0x000a000f

08006ba8 <D64_1CH_HTONS_VOL_HP>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	b089      	sub	sp, #36	; 0x24
 8006bae:	4614      	mov	r4, r2
 8006bb0:	9207      	str	r2, [sp, #28]
 8006bb2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006bb4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8006bb8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8006bbc:	6992      	ldr	r2, [r2, #24]
 8006bbe:	9206      	str	r2, [sp, #24]
 8006bc0:	68e2      	ldr	r2, [r4, #12]
 8006bc2:	9201      	str	r2, [sp, #4]
 8006bc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006bc6:	9203      	str	r2, [sp, #12]
 8006bc8:	6a22      	ldr	r2, [r4, #32]
 8006bca:	69e5      	ldr	r5, [r4, #28]
 8006bcc:	68a6      	ldr	r6, [r4, #8]
 8006bce:	9204      	str	r2, [sp, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80b0 	beq.w	8006d36 <D64_1CH_HTONS_VOL_HP+0x18e>
 8006bd6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006bda:	4f58      	ldr	r7, [pc, #352]	; (8006d3c <D64_1CH_HTONS_VOL_HP+0x194>)
 8006bdc:	9305      	str	r3, [sp, #20]
 8006bde:	9102      	str	r1, [sp, #8]
 8006be0:	f850 2b08 	ldr.w	r2, [r0], #8
 8006be4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006be8:	ba52      	rev16	r2, r2
 8006bea:	fa93 f993 	rev16.w	r9, r3
 8006bee:	b2d4      	uxtb	r4, r2
 8006bf0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006bf4:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8006bf8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006bfc:	9901      	ldr	r1, [sp, #4]
 8006bfe:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006c02:	0e12      	lsrs	r2, r2, #24
 8006c04:	44ab      	add	fp, r5
 8006c06:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006c0a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8006c0e:	fa5f f289 	uxtb.w	r2, r9
 8006c12:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8006c16:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8006c1a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8006c1e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006c22:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006c26:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8006c2a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8006c2e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006c32:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8006c36:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8006c3a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8006c3e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8006c42:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006c46:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8006c4a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006c4e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006c52:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c5a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006c5e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8006c62:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006c66:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8006c6a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006c6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8006c72:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8006c76:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c7a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8006c7e:	4b30      	ldr	r3, [pc, #192]	; (8006d40 <D64_1CH_HTONS_VOL_HP+0x198>)
 8006c80:	fb2b 1303 	smlad	r3, fp, r3, r1
 8006c84:	492f      	ldr	r1, [pc, #188]	; (8006d44 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8006c86:	fb24 3301 	smlad	r3, r4, r1, r3
 8006c8a:	492f      	ldr	r1, [pc, #188]	; (8006d48 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8006c8c:	fb22 3301 	smlad	r3, r2, r1, r3
 8006c90:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8006c94:	fb2e 390a 	smlad	r9, lr, sl, r3
 8006c98:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8006c9a:	fb2b 6603 	smlad	r6, fp, r3, r6
 8006c9e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8006ca2:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8006ca4:	fb24 6603 	smlad	r6, r4, r3, r6
 8006ca8:	fb22 6313 	smladx	r3, r2, r3, r6
 8006cac:	f04f 0a01 	mov.w	sl, #1
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	fb2b fb0a 	smuad	fp, fp, sl
 8006cb6:	4b27      	ldr	r3, [pc, #156]	; (8006d54 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8006cb8:	fb24 ba03 	smlad	sl, r4, r3, fp
 8006cbc:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8006cbe:	fb22 a203 	smlad	r2, r2, r3, sl
 8006cc2:	4b26      	ldr	r3, [pc, #152]	; (8006d5c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8006cc4:	fb2e 2603 	smlad	r6, lr, r3, r2
 8006cc8:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8006ccc:	eb0a 020c 	add.w	r2, sl, ip
 8006cd0:	9c04      	ldr	r4, [sp, #16]
 8006cd2:	9903      	ldr	r1, [sp, #12]
 8006cd4:	eba2 0208 	sub.w	r2, r2, r8
 8006cd8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8006cdc:	fba2 2304 	umull	r2, r3, r2, r4
 8006ce0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006ce4:	fb04 3309 	mla	r3, r4, r9, r3
 8006ce8:	f143 0300 	adc.w	r3, r3, #0
 8006cec:	02da      	lsls	r2, r3, #11
 8006cee:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006cf2:	f04f 0900 	mov.w	r9, #0
 8006cf6:	fbc1 8902 	smlal	r8, r9, r1, r2
 8006cfa:	9902      	ldr	r1, [sp, #8]
 8006cfc:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8006d00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006d04:	f302 020f 	ssat	r2, #16, r2
 8006d08:	9b05      	ldr	r3, [sp, #20]
 8006d0a:	f821 2b02 	strh.w	r2, [r1], #2
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	9102      	str	r1, [sp, #8]
 8006d12:	46d0      	mov	r8, sl
 8006d14:	f47f af64 	bne.w	8006be0 <D64_1CH_HTONS_VOL_HP+0x38>
 8006d18:	9a07      	ldr	r2, [sp, #28]
 8006d1a:	9901      	ldr	r1, [sp, #4]
 8006d1c:	60d1      	str	r1, [r2, #12]
 8006d1e:	9906      	ldr	r1, [sp, #24]
 8006d20:	6096      	str	r6, [r2, #8]
 8006d22:	2000      	movs	r0, #0
 8006d24:	61d5      	str	r5, [r2, #28]
 8006d26:	f8c2 c010 	str.w	ip, [r2, #16]
 8006d2a:	f8c2 a014 	str.w	sl, [r2, #20]
 8006d2e:	6191      	str	r1, [r2, #24]
 8006d30:	b009      	add	sp, #36	; 0x24
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	46c2      	mov	sl, r8
 8006d38:	4622      	mov	r2, r4
 8006d3a:	e7ee      	b.n	8006d1a <D64_1CH_HTONS_VOL_HP+0x172>
 8006d3c:	20000000 	.word	0x20000000
 8006d40:	001c0015 	.word	0x001c0015
 8006d44:	000f000a 	.word	0x000f000a
 8006d48:	00060003 	.word	0x00060003
 8006d4c:	0024002a 	.word	0x0024002a
 8006d50:	002e0030 	.word	0x002e0030
 8006d54:	00030006 	.word	0x00030006
 8006d58:	000a000f 	.word	0x000a000f
 8006d5c:	0015001c 	.word	0x0015001c

08006d60 <D80_1CH_HTONS_VOL_HP>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	4613      	mov	r3, r2
 8006d66:	b089      	sub	sp, #36	; 0x24
 8006d68:	4686      	mov	lr, r0
 8006d6a:	6918      	ldr	r0, [r3, #16]
 8006d6c:	9000      	str	r0, [sp, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	461c      	mov	r4, r3
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	9302      	str	r3, [sp, #8]
 8006d76:	6983      	ldr	r3, [r0, #24]
 8006d78:	9306      	str	r3, [sp, #24]
 8006d7a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8006d7e:	69c3      	ldr	r3, [r0, #28]
 8006d80:	68c0      	ldr	r0, [r0, #12]
 8006d82:	9207      	str	r2, [sp, #28]
 8006d84:	9001      	str	r0, [sp, #4]
 8006d86:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006d88:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006d8a:	9003      	str	r0, [sp, #12]
 8006d8c:	6a20      	ldr	r0, [r4, #32]
 8006d8e:	9004      	str	r0, [sp, #16]
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	f000 80d2 	beq.w	8006f3a <D80_1CH_HTONS_VOL_HP+0x1da>
 8006d96:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006d9a:	4869      	ldr	r0, [pc, #420]	; (8006f40 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8006d9c:	9205      	str	r2, [sp, #20]
 8006d9e:	461c      	mov	r4, r3
 8006da0:	f8de 5000 	ldr.w	r5, [lr]
 8006da4:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006da8:	f8de 3008 	ldr.w	r3, [lr, #8]
 8006dac:	f10e 0e0a 	add.w	lr, lr, #10
 8006db0:	ba6d      	rev16	r5, r5
 8006db2:	ba52      	rev16	r2, r2
 8006db4:	fa93 fb93 	rev16.w	fp, r3
 8006db8:	b2ee      	uxtb	r6, r5
 8006dba:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8006dbe:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8006dc2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006dc6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8006dca:	eb04 0a07 	add.w	sl, r4, r7
 8006dce:	0e2d      	lsrs	r5, r5, #24
 8006dd0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8006dd4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8006dd8:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8006ddc:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8006de0:	b2d5      	uxtb	r5, r2
 8006de2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8006de6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8006dea:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8006dee:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006df2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8006df6:	0e12      	lsrs	r2, r2, #24
 8006df8:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8006dfc:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8006e00:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006e04:	fa5f f48b 	uxtb.w	r4, fp
 8006e08:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8006e0c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8006e10:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8006e14:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8006e18:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8006e1c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006e20:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8006e24:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8006e28:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006e2c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8006e30:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006e34:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006e38:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006e3c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006e40:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8006e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e48:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8006e4c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006e50:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006e54:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8006e58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006e5c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8006e60:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006e64:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8006e68:	4d36      	ldr	r5, [pc, #216]	; (8006f44 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8006e6a:	9f01      	ldr	r7, [sp, #4]
 8006e6c:	fb23 7505 	smlad	r5, r3, r5, r7
 8006e70:	4f35      	ldr	r7, [pc, #212]	; (8006f48 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8006e72:	fb29 5507 	smlad	r5, r9, r7, r5
 8006e76:	4f35      	ldr	r7, [pc, #212]	; (8006f4c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8006e78:	fb28 5507 	smlad	r5, r8, r7, r5
 8006e7c:	4f34      	ldr	r7, [pc, #208]	; (8006f50 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8006e7e:	fb22 5507 	smlad	r5, r2, r7, r5
 8006e82:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8006e86:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8006e8a:	4d32      	ldr	r5, [pc, #200]	; (8006f54 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8006e8c:	fb23 cc05 	smlad	ip, r3, r5, ip
 8006e90:	4d31      	ldr	r5, [pc, #196]	; (8006f58 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8006e92:	fb29 cc05 	smlad	ip, r9, r5, ip
 8006e96:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8006e9a:	fb28 c505 	smlad	r5, r8, r5, ip
 8006e9e:	4f2f      	ldr	r7, [pc, #188]	; (8006f5c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8006ea0:	fb22 5507 	smlad	r5, r2, r7, r5
 8006ea4:	4f2e      	ldr	r7, [pc, #184]	; (8006f60 <D80_1CH_HTONS_VOL_HP+0x200>)
 8006ea6:	fb26 5507 	smlad	r5, r6, r7, r5
 8006eaa:	f04f 0a01 	mov.w	sl, #1
 8006eae:	9501      	str	r5, [sp, #4]
 8006eb0:	fb23 fa0a 	smuad	sl, r3, sl
 8006eb4:	4b2b      	ldr	r3, [pc, #172]	; (8006f64 <D80_1CH_HTONS_VOL_HP+0x204>)
 8006eb6:	fb29 a903 	smlad	r9, r9, r3, sl
 8006eba:	4d2b      	ldr	r5, [pc, #172]	; (8006f68 <D80_1CH_HTONS_VOL_HP+0x208>)
 8006ebc:	fb28 9805 	smlad	r8, r8, r5, r9
 8006ec0:	4d2a      	ldr	r5, [pc, #168]	; (8006f6c <D80_1CH_HTONS_VOL_HP+0x20c>)
 8006ec2:	fb22 8205 	smlad	r2, r2, r5, r8
 8006ec6:	4b2a      	ldr	r3, [pc, #168]	; (8006f70 <D80_1CH_HTONS_VOL_HP+0x210>)
 8006ec8:	fb26 2c03 	smlad	ip, r6, r3, r2
 8006ecc:	9b00      	ldr	r3, [sp, #0]
 8006ece:	9d04      	ldr	r5, [sp, #16]
 8006ed0:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8006ed4:	4453      	add	r3, sl
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	9b02      	ldr	r3, [sp, #8]
 8006eda:	f8cd a008 	str.w	sl, [sp, #8]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	17d7      	asrs	r7, r2, #31
 8006ee2:	fba2 2305 	umull	r2, r3, r2, r5
 8006ee6:	fb05 3307 	mla	r3, r5, r7, r3
 8006eea:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006eee:	f143 0300 	adc.w	r3, r3, #0
 8006ef2:	9d03      	ldr	r5, [sp, #12]
 8006ef4:	029a      	lsls	r2, r3, #10
 8006ef6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006efa:	2700      	movs	r7, #0
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	fbc5 6702 	smlal	r6, r7, r5, r2
 8006f02:	10ba      	asrs	r2, r7, #2
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	f302 020f 	ssat	r2, #16, r2
 8006f0a:	9b05      	ldr	r3, [sp, #20]
 8006f0c:	f821 2b02 	strh.w	r2, [r1], #2
 8006f10:	4299      	cmp	r1, r3
 8006f12:	f47f af45 	bne.w	8006da0 <D80_1CH_HTONS_VOL_HP+0x40>
 8006f16:	4623      	mov	r3, r4
 8006f18:	9907      	ldr	r1, [sp, #28]
 8006f1a:	9801      	ldr	r0, [sp, #4]
 8006f1c:	60c8      	str	r0, [r1, #12]
 8006f1e:	9a00      	ldr	r2, [sp, #0]
 8006f20:	f8c1 c008 	str.w	ip, [r1, #8]
 8006f24:	4608      	mov	r0, r1
 8006f26:	61cb      	str	r3, [r1, #28]
 8006f28:	610a      	str	r2, [r1, #16]
 8006f2a:	f8c1 a014 	str.w	sl, [r1, #20]
 8006f2e:	9906      	ldr	r1, [sp, #24]
 8006f30:	6181      	str	r1, [r0, #24]
 8006f32:	2000      	movs	r0, #0
 8006f34:	b009      	add	sp, #36	; 0x24
 8006f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8006f3e:	e7eb      	b.n	8006f18 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8006f40:	20000000 	.word	0x20000000
 8006f44:	002d0024 	.word	0x002d0024
 8006f48:	001c0015 	.word	0x001c0015
 8006f4c:	000f000a 	.word	0x000f000a
 8006f50:	00060003 	.word	0x00060003
 8006f54:	0037003f 	.word	0x0037003f
 8006f58:	00450049 	.word	0x00450049
 8006f5c:	00490045 	.word	0x00490045
 8006f60:	003f0037 	.word	0x003f0037
 8006f64:	00030006 	.word	0x00030006
 8006f68:	000a000f 	.word	0x000a000f
 8006f6c:	0015001c 	.word	0x0015001c
 8006f70:	0024002d 	.word	0x0024002d

08006f74 <D128_1CH_HTONS_VOL_HP>:
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	b093      	sub	sp, #76	; 0x4c
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	9211      	str	r2, [sp, #68]	; 0x44
 8006f7e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006f80:	6912      	ldr	r2, [r2, #16]
 8006f82:	9203      	str	r2, [sp, #12]
 8006f84:	4622      	mov	r2, r4
 8006f86:	4615      	mov	r5, r2
 8006f88:	6964      	ldr	r4, [r4, #20]
 8006f8a:	9406      	str	r4, [sp, #24]
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	6992      	ldr	r2, [r2, #24]
 8006f90:	9210      	str	r2, [sp, #64]	; 0x40
 8006f92:	68ea      	ldr	r2, [r5, #12]
 8006f94:	9204      	str	r2, [sp, #16]
 8006f96:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006f98:	69e6      	ldr	r6, [r4, #28]
 8006f9a:	920d      	str	r2, [sp, #52]	; 0x34
 8006f9c:	68a4      	ldr	r4, [r4, #8]
 8006f9e:	6a2a      	ldr	r2, [r5, #32]
 8006fa0:	9405      	str	r4, [sp, #20]
 8006fa2:	920e      	str	r2, [sp, #56]	; 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8145 	beq.w	8007234 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8006faa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb0:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8007290 <D128_1CH_HTONS_VOL_HP+0x31c>
 8006fb4:	9107      	str	r1, [sp, #28]
 8006fb6:	f100 0310 	add.w	r3, r0, #16
 8006fba:	4699      	mov	r9, r3
 8006fbc:	f1a9 0110 	sub.w	r1, r9, #16
 8006fc0:	c90e      	ldmia	r1, {r1, r2, r3}
 8006fc2:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8006fc6:	ba49      	rev16	r1, r1
 8006fc8:	ba52      	rev16	r2, r2
 8006fca:	ba5b      	rev16	r3, r3
 8006fcc:	fa90 fa90 	rev16.w	sl, r0
 8006fd0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006fd4:	b2cc      	uxtb	r4, r1
 8006fd6:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8006fda:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8006fde:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8006fe2:	0e09      	lsrs	r1, r1, #24
 8006fe4:	4426      	add	r6, r4
 8006fe6:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006fea:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8006fee:	b2d0      	uxtb	r0, r2
 8006ff0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8006ff4:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8006ff8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006ffc:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8007000:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8007004:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8007008:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800700c:	0e12      	lsrs	r2, r2, #24
 800700e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8007012:	9701      	str	r7, [sp, #4]
 8007014:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8007018:	4627      	mov	r7, r4
 800701a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800701e:	9702      	str	r7, [sp, #8]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007026:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800702a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800702e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8007032:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8007036:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800703a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800703e:	0e1b      	lsrs	r3, r3, #24
 8007040:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8007044:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8007048:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800704c:	fa5f f38a 	uxtb.w	r3, sl
 8007050:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007054:	960a      	str	r6, [sp, #40]	; 0x28
 8007056:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800705a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800705e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007062:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8007066:	950b      	str	r5, [sp, #44]	; 0x2c
 8007068:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800706c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8007070:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8007074:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8007078:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800707c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007080:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8007084:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8007088:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800708c:	9308      	str	r3, [sp, #32]
 800708e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8007092:	9b01      	ldr	r3, [sp, #4]
 8007094:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007098:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800709c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80070a0:	9b02      	ldr	r3, [sp, #8]
 80070a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070a6:	9302      	str	r3, [sp, #8]
 80070a8:	9b08      	ldr	r3, [sp, #32]
 80070aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ae:	9308      	str	r3, [sp, #32]
 80070b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070b2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80070b6:	950c      	str	r5, [sp, #48]	; 0x30
 80070b8:	461d      	mov	r5, r3
 80070ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070bc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80070c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80070c4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80070c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	9202      	str	r2, [sp, #8]
 80070d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80070da:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80070de:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80070e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80070e6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80070ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80070ee:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	9f01      	ldr	r7, [sp, #4]
 80070f6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80070fa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80070fe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007102:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007106:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800710a:	46be      	mov	lr, r7
 800710c:	0a96      	lsrs	r6, r2, #10
 800710e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8007112:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8007116:	4f49      	ldr	r7, [pc, #292]	; (800723c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8007118:	9a04      	ldr	r2, [sp, #16]
 800711a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800711e:	4a48      	ldr	r2, [pc, #288]	; (8007240 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8007120:	fb2a ee02 	smlad	lr, sl, r2, lr
 8007124:	4a47      	ldr	r2, [pc, #284]	; (8007244 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8007126:	fb21 ee02 	smlad	lr, r1, r2, lr
 800712a:	4a47      	ldr	r2, [pc, #284]	; (8007248 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800712c:	fb24 ee02 	smlad	lr, r4, r2, lr
 8007130:	4a46      	ldr	r2, [pc, #280]	; (800724c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8007132:	9f02      	ldr	r7, [sp, #8]
 8007134:	fb27 ee02 	smlad	lr, r7, r2, lr
 8007138:	4a45      	ldr	r2, [pc, #276]	; (8007250 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800713a:	fb20 ee02 	smlad	lr, r0, r2, lr
 800713e:	4a45      	ldr	r2, [pc, #276]	; (8007254 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8007140:	fb23 e702 	smlad	r7, r3, r2, lr
 8007144:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8007148:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800714c:	9f01      	ldr	r7, [sp, #4]
 800714e:	4a42      	ldr	r2, [pc, #264]	; (8007258 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8007150:	46bc      	mov	ip, r7
 8007152:	9f05      	ldr	r7, [sp, #20]
 8007154:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8007158:	4a40      	ldr	r2, [pc, #256]	; (800725c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800715a:	fb2a cc02 	smlad	ip, sl, r2, ip
 800715e:	4f40      	ldr	r7, [pc, #256]	; (8007260 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8007160:	fb21 cc07 	smlad	ip, r1, r7, ip
 8007164:	4f3f      	ldr	r7, [pc, #252]	; (8007264 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8007166:	fb24 cc07 	smlad	ip, r4, r7, ip
 800716a:	4f3f      	ldr	r7, [pc, #252]	; (8007268 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800716c:	9a02      	ldr	r2, [sp, #8]
 800716e:	fb22 cc07 	smlad	ip, r2, r7, ip
 8007172:	4f3e      	ldr	r7, [pc, #248]	; (800726c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8007174:	fb20 cc07 	smlad	ip, r0, r7, ip
 8007178:	4f3d      	ldr	r7, [pc, #244]	; (8007270 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800717a:	fb23 c707 	smlad	r7, r3, r7, ip
 800717e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8007294 <D128_1CH_HTONS_VOL_HP+0x320>
 8007182:	fb25 720c 	smlad	r2, r5, ip, r7
 8007186:	f04f 0b01 	mov.w	fp, #1
 800718a:	9204      	str	r2, [sp, #16]
 800718c:	9f01      	ldr	r7, [sp, #4]
 800718e:	fb27 fb0b 	smuad	fp, r7, fp
 8007192:	4f38      	ldr	r7, [pc, #224]	; (8007274 <D128_1CH_HTONS_VOL_HP+0x300>)
 8007194:	fb2a ba07 	smlad	sl, sl, r7, fp
 8007198:	4f37      	ldr	r7, [pc, #220]	; (8007278 <D128_1CH_HTONS_VOL_HP+0x304>)
 800719a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800719e:	4f37      	ldr	r7, [pc, #220]	; (800727c <D128_1CH_HTONS_VOL_HP+0x308>)
 80071a0:	fb24 aa07 	smlad	sl, r4, r7, sl
 80071a4:	4f36      	ldr	r7, [pc, #216]	; (8007280 <D128_1CH_HTONS_VOL_HP+0x30c>)
 80071a6:	9a02      	ldr	r2, [sp, #8]
 80071a8:	fb22 a707 	smlad	r7, r2, r7, sl
 80071ac:	4a35      	ldr	r2, [pc, #212]	; (8007284 <D128_1CH_HTONS_VOL_HP+0x310>)
 80071ae:	fb20 7702 	smlad	r7, r0, r2, r7
 80071b2:	4a35      	ldr	r2, [pc, #212]	; (8007288 <D128_1CH_HTONS_VOL_HP+0x314>)
 80071b4:	fb23 7702 	smlad	r7, r3, r2, r7
 80071b8:	4b34      	ldr	r3, [pc, #208]	; (800728c <D128_1CH_HTONS_VOL_HP+0x318>)
 80071ba:	fb25 7303 	smlad	r3, r5, r3, r7
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80071c4:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80071c8:	4473      	add	r3, lr
 80071ca:	461a      	mov	r2, r3
 80071cc:	9b06      	ldr	r3, [sp, #24]
 80071ce:	f8cd e018 	str.w	lr, [sp, #24]
 80071d2:	1ad2      	subs	r2, r2, r3
 80071d4:	17d1      	asrs	r1, r2, #31
 80071d6:	fba2 2304 	umull	r2, r3, r2, r4
 80071da:	fb04 3301 	mla	r3, r4, r1, r3
 80071de:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80071e2:	f143 0300 	adc.w	r3, r3, #0
 80071e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80071e8:	021a      	lsls	r2, r3, #8
 80071ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80071ee:	2100      	movs	r1, #0
 80071f0:	fbc4 0102 	smlal	r0, r1, r4, r2
 80071f4:	108a      	asrs	r2, r1, #2
 80071f6:	9907      	ldr	r1, [sp, #28]
 80071f8:	f302 020f 	ssat	r2, #16, r2
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	f821 2b02 	strh.w	r2, [r1], #2
 8007202:	9303      	str	r3, [sp, #12]
 8007204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007206:	9107      	str	r1, [sp, #28]
 8007208:	4299      	cmp	r1, r3
 800720a:	f109 0910 	add.w	r9, r9, #16
 800720e:	f47f aed5 	bne.w	8006fbc <D128_1CH_HTONS_VOL_HP+0x48>
 8007212:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007214:	9905      	ldr	r1, [sp, #20]
 8007216:	6091      	str	r1, [r2, #8]
 8007218:	9904      	ldr	r1, [sp, #16]
 800721a:	60d1      	str	r1, [r2, #12]
 800721c:	4613      	mov	r3, r2
 800721e:	61d6      	str	r6, [r2, #28]
 8007220:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007222:	9a03      	ldr	r2, [sp, #12]
 8007224:	611a      	str	r2, [r3, #16]
 8007226:	2000      	movs	r0, #0
 8007228:	f8c3 e014 	str.w	lr, [r3, #20]
 800722c:	6199      	str	r1, [r3, #24]
 800722e:	b013      	add	sp, #76	; 0x4c
 8007230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007234:	f8dd e018 	ldr.w	lr, [sp, #24]
 8007238:	e7eb      	b.n	8007212 <D128_1CH_HTONS_VOL_HP+0x29e>
 800723a:	bf00      	nop
 800723c:	00780069 	.word	0x00780069
 8007240:	005b004e 	.word	0x005b004e
 8007244:	00420037 	.word	0x00420037
 8007248:	002d0024 	.word	0x002d0024
 800724c:	001c0015 	.word	0x001c0015
 8007250:	000f000a 	.word	0x000f000a
 8007254:	00060003 	.word	0x00060003
 8007258:	00880096 	.word	0x00880096
 800725c:	00a200ac 	.word	0x00a200ac
 8007260:	00b400ba 	.word	0x00b400ba
 8007264:	00be00c0 	.word	0x00be00c0
 8007268:	00c000be 	.word	0x00c000be
 800726c:	00ba00b4 	.word	0x00ba00b4
 8007270:	00ac00a2 	.word	0x00ac00a2
 8007274:	00030006 	.word	0x00030006
 8007278:	000a000f 	.word	0x000a000f
 800727c:	0015001c 	.word	0x0015001c
 8007280:	0024002d 	.word	0x0024002d
 8007284:	00370042 	.word	0x00370042
 8007288:	004e005b 	.word	0x004e005b
 800728c:	00690078 	.word	0x00690078
 8007290:	20000000 	.word	0x20000000
 8007294:	00960088 	.word	0x00960088

08007298 <PDM_Filter_Init>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	2240      	movs	r2, #64	; 0x40
 800729c:	4604      	mov	r4, r0
 800729e:	2100      	movs	r1, #0
 80072a0:	300c      	adds	r0, #12
 80072a2:	f002 fe4d 	bl	8009f40 <memset>
 80072a6:	493b      	ldr	r1, [pc, #236]	; (8007394 <PDM_Filter_Init+0xfc>)
 80072a8:	483b      	ldr	r0, [pc, #236]	; (8007398 <PDM_Filter_Init+0x100>)
 80072aa:	f000 f98d 	bl	80075c8 <CRC_Lock>
 80072ae:	8822      	ldrh	r2, [r4, #0]
 80072b0:	8963      	ldrh	r3, [r4, #10]
 80072b2:	4938      	ldr	r1, [pc, #224]	; (8007394 <PDM_Filter_Init+0xfc>)
 80072b4:	8925      	ldrh	r5, [r4, #8]
 80072b6:	86a3      	strh	r3, [r4, #52]	; 0x34
 80072b8:	2801      	cmp	r0, #1
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	bf18      	it	ne
 80072c0:	2100      	movne	r1, #0
 80072c2:	2a01      	cmp	r2, #1
 80072c4:	6461      	str	r1, [r4, #68]	; 0x44
 80072c6:	86e5      	strh	r5, [r4, #54]	; 0x36
 80072c8:	61a3      	str	r3, [r4, #24]
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	6163      	str	r3, [r4, #20]
 80072ce:	60e3      	str	r3, [r4, #12]
 80072d0:	6263      	str	r3, [r4, #36]	; 0x24
 80072d2:	61e3      	str	r3, [r4, #28]
 80072d4:	6223      	str	r3, [r4, #32]
 80072d6:	6423      	str	r3, [r4, #64]	; 0x40
 80072d8:	d918      	bls.n	800730c <PDM_Filter_Init+0x74>
 80072da:	2003      	movs	r0, #3
 80072dc:	2302      	movs	r3, #2
 80072de:	8862      	ldrh	r2, [r4, #2]
 80072e0:	2a01      	cmp	r2, #1
 80072e2:	d91d      	bls.n	8007320 <PDM_Filter_Init+0x88>
 80072e4:	2140      	movs	r1, #64	; 0x40
 80072e6:	2300      	movs	r3, #0
 80072e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80072ea:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 80072ee:	6862      	ldr	r2, [r4, #4]
 80072f0:	bf04      	itt	eq
 80072f2:	6421      	streq	r1, [r4, #64]	; 0x40
 80072f4:	460b      	moveq	r3, r1
 80072f6:	b11a      	cbz	r2, 8007300 <PDM_Filter_Init+0x68>
 80072f8:	f043 0310 	orr.w	r3, r3, #16
 80072fc:	6423      	str	r3, [r4, #64]	; 0x40
 80072fe:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007300:	2200      	movs	r2, #0
 8007302:	8722      	strh	r2, [r4, #56]	; 0x38
 8007304:	b908      	cbnz	r0, 800730a <PDM_Filter_Init+0x72>
 8007306:	3380      	adds	r3, #128	; 0x80
 8007308:	6423      	str	r3, [r4, #64]	; 0x40
 800730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800730c:	4d23      	ldr	r5, [pc, #140]	; (800739c <PDM_Filter_Init+0x104>)
 800730e:	d010      	beq.n	8007332 <PDM_Filter_Init+0x9a>
 8007310:	782a      	ldrb	r2, [r5, #0]
 8007312:	2a01      	cmp	r2, #1
 8007314:	d027      	beq.n	8007366 <PDM_Filter_Init+0xce>
 8007316:	8862      	ldrh	r2, [r4, #2]
 8007318:	2a01      	cmp	r2, #1
 800731a:	f04f 0001 	mov.w	r0, #1
 800731e:	d8e1      	bhi.n	80072e4 <PDM_Filter_Init+0x4c>
 8007320:	d001      	beq.n	8007326 <PDM_Filter_Init+0x8e>
 8007322:	4618      	mov	r0, r3
 8007324:	e7de      	b.n	80072e4 <PDM_Filter_Init+0x4c>
 8007326:	2220      	movs	r2, #32
 8007328:	4618      	mov	r0, r3
 800732a:	6422      	str	r2, [r4, #64]	; 0x40
 800732c:	4613      	mov	r3, r2
 800732e:	2160      	movs	r1, #96	; 0x60
 8007330:	e7da      	b.n	80072e8 <PDM_Filter_Init+0x50>
 8007332:	7829      	ldrb	r1, [r5, #0]
 8007334:	2900      	cmp	r1, #0
 8007336:	d1ee      	bne.n	8007316 <PDM_Filter_Init+0x7e>
 8007338:	4919      	ldr	r1, [pc, #100]	; (80073a0 <PDM_Filter_Init+0x108>)
 800733a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80073a8 <PDM_Filter_Init+0x110>
 800733e:	4f19      	ldr	r7, [pc, #100]	; (80073a4 <PDM_Filter_Init+0x10c>)
 8007340:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8007344:	684a      	ldr	r2, [r1, #4]
 8007346:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800734a:	ea02 0007 	and.w	r0, r2, r7
 800734e:	4303      	orrs	r3, r0
 8007350:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8007354:	4413      	add	r3, r2
 8007356:	f841 3f04 	str.w	r3, [r1, #4]!
 800735a:	428e      	cmp	r6, r1
 800735c:	d1f2      	bne.n	8007344 <PDM_Filter_Init+0xac>
 800735e:	2001      	movs	r0, #1
 8007360:	7028      	strb	r0, [r5, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	e7bb      	b.n	80072de <PDM_Filter_Init+0x46>
 8007366:	490e      	ldr	r1, [pc, #56]	; (80073a0 <PDM_Filter_Init+0x108>)
 8007368:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80073a8 <PDM_Filter_Init+0x110>
 800736c:	4f0d      	ldr	r7, [pc, #52]	; (80073a4 <PDM_Filter_Init+0x10c>)
 800736e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8007372:	684a      	ldr	r2, [r1, #4]
 8007374:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8007378:	ea02 0007 	and.w	r0, r2, r7
 800737c:	4303      	orrs	r3, r0
 800737e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8007382:	4413      	add	r3, r2
 8007384:	f841 3f04 	str.w	r3, [r1, #4]!
 8007388:	428e      	cmp	r6, r1
 800738a:	d1f2      	bne.n	8007372 <PDM_Filter_Init+0xda>
 800738c:	2300      	movs	r3, #0
 800738e:	702b      	strb	r3, [r5, #0]
 8007390:	e7c1      	b.n	8007316 <PDM_Filter_Init+0x7e>
 8007392:	bf00      	nop
 8007394:	b5e8b5cd 	.word	0xb5e8b5cd
 8007398:	f407a5c2 	.word	0xf407a5c2
 800739c:	20001164 	.word	0x20001164
 80073a0:	1ffffffc 	.word	0x1ffffffc
 80073a4:	000ffc00 	.word	0x000ffc00
 80073a8:	3ff00000 	.word	0x3ff00000

080073ac <PDM_Filter_setConfig>:
 80073ac:	4b66      	ldr	r3, [pc, #408]	; (8007548 <PDM_Filter_setConfig+0x19c>)
 80073ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d001      	beq.n	80073b8 <PDM_Filter_setConfig+0xc>
 80073b4:	2004      	movs	r0, #4
 80073b6:	4770      	bx	lr
 80073b8:	b530      	push	{r4, r5, lr}
 80073ba:	880a      	ldrh	r2, [r1, #0]
 80073bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80073be:	ed2d 8b04 	vpush	{d8-d9}
 80073c2:	4604      	mov	r4, r0
 80073c4:	460d      	mov	r5, r1
 80073c6:	1e51      	subs	r1, r2, #1
 80073c8:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 80073cc:	2906      	cmp	r1, #6
 80073ce:	b083      	sub	sp, #12
 80073d0:	6420      	str	r0, [r4, #64]	; 0x40
 80073d2:	d91a      	bls.n	800740a <PDM_Filter_setConfig+0x5e>
 80073d4:	2008      	movs	r0, #8
 80073d6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80073da:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80073de:	4299      	cmp	r1, r3
 80073e0:	d07e      	beq.n	80074e0 <PDM_Filter_setConfig+0x134>
 80073e2:	f113 0f0c 	cmn.w	r3, #12
 80073e6:	da2a      	bge.n	800743e <PDM_Filter_setConfig+0x92>
 80073e8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80073ec:	3040      	adds	r0, #64	; 0x40
 80073ee:	80ab      	strh	r3, [r5, #4]
 80073f0:	8622      	strh	r2, [r4, #48]	; 0x30
 80073f2:	886b      	ldrh	r3, [r5, #2]
 80073f4:	8663      	strh	r3, [r4, #50]	; 0x32
 80073f6:	b920      	cbnz	r0, 8007402 <PDM_Filter_setConfig+0x56>
 80073f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fe:	6423      	str	r3, [r4, #64]	; 0x40
 8007400:	2000      	movs	r0, #0
 8007402:	b003      	add	sp, #12
 8007404:	ecbd 8b04 	vpop	{d8-d9}
 8007408:	bd30      	pop	{r4, r5, pc}
 800740a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800740c:	4291      	cmp	r1, r2
 800740e:	d06c      	beq.n	80074ea <PDM_Filter_setConfig+0x13e>
 8007410:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	4313      	orrs	r3, r2
 800741a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800741e:	6423      	str	r3, [r4, #64]	; 0x40
 8007420:	2970      	cmp	r1, #112	; 0x70
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800742a:	d066      	beq.n	80074fa <PDM_Filter_setConfig+0x14e>
 800742c:	2b06      	cmp	r3, #6
 800742e:	f200 8089 	bhi.w	8007544 <PDM_Filter_setConfig+0x198>
 8007432:	e8df f003 	tbb	[pc, r3]
 8007436:	4f52      	.short	0x4f52
 8007438:	3d43494c 	.word	0x3d43494c
 800743c:	46          	.byte	0x46
 800743d:	00          	.byte	0x00
 800743e:	2b33      	cmp	r3, #51	; 0x33
 8007440:	dc32      	bgt.n	80074a8 <PDM_Filter_setConfig+0xfc>
 8007442:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007444:	f002 020f 	and.w	r2, r2, #15
 8007448:	3a01      	subs	r2, #1
 800744a:	2a06      	cmp	r2, #6
 800744c:	d872      	bhi.n	8007534 <PDM_Filter_setConfig+0x188>
 800744e:	493f      	ldr	r1, [pc, #252]	; (800754c <PDM_Filter_setConfig+0x1a0>)
 8007450:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007454:	ed92 9a00 	vldr	s18, [r2]
 8007458:	ed92 8a07 	vldr	s16, [r2, #28]
 800745c:	9001      	str	r0, [sp, #4]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007466:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800746a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800746e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8007472:	f007 fb31 	bl	800ead8 <powf>
 8007476:	eddf 0a36 	vldr	s1, [pc, #216]	; 8007550 <PDM_Filter_setConfig+0x1a4>
 800747a:	eef0 8a40 	vmov.f32	s17, s0
 800747e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8007482:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007486:	f007 fb27 	bl	800ead8 <powf>
 800748a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800748e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007492:	f007 f991 	bl	800e7b8 <roundf>
 8007496:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800749a:	88ab      	ldrh	r3, [r5, #4]
 800749c:	882a      	ldrh	r2, [r5, #0]
 800749e:	9801      	ldr	r0, [sp, #4]
 80074a0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 80074a4:	8723      	strh	r3, [r4, #56]	; 0x38
 80074a6:	e7a3      	b.n	80073f0 <PDM_Filter_setConfig+0x44>
 80074a8:	2333      	movs	r3, #51	; 0x33
 80074aa:	3040      	adds	r0, #64	; 0x40
 80074ac:	80ab      	strh	r3, [r5, #4]
 80074ae:	e79f      	b.n	80073f0 <PDM_Filter_setConfig+0x44>
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <PDM_Filter_setConfig+0x1a8>)
 80074b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80074b4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80074b8:	2000      	movs	r0, #0
 80074ba:	e792      	b.n	80073e2 <PDM_Filter_setConfig+0x36>
 80074bc:	4b26      	ldr	r3, [pc, #152]	; (8007558 <PDM_Filter_setConfig+0x1ac>)
 80074be:	64a3      	str	r3, [r4, #72]	; 0x48
 80074c0:	e7f8      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <PDM_Filter_setConfig+0x1b0>)
 80074c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80074c6:	e7f5      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 80074c8:	4b25      	ldr	r3, [pc, #148]	; (8007560 <PDM_Filter_setConfig+0x1b4>)
 80074ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80074cc:	e7f2      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 80074ce:	4b25      	ldr	r3, [pc, #148]	; (8007564 <PDM_Filter_setConfig+0x1b8>)
 80074d0:	64a3      	str	r3, [r4, #72]	; 0x48
 80074d2:	e7ef      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <PDM_Filter_setConfig+0x1bc>)
 80074d6:	64a3      	str	r3, [r4, #72]	; 0x48
 80074d8:	e7ec      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 80074da:	4b24      	ldr	r3, [pc, #144]	; (800756c <PDM_Filter_setConfig+0x1c0>)
 80074dc:	64a3      	str	r3, [r4, #72]	; 0x48
 80074de:	e7e9      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 80074e0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80074e2:	4291      	cmp	r1, r2
 80074e4:	f47f af7d 	bne.w	80073e2 <PDM_Filter_setConfig+0x36>
 80074e8:	e783      	b.n	80073f2 <PDM_Filter_setConfig+0x46>
 80074ea:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80074ee:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80074f2:	4299      	cmp	r1, r3
 80074f4:	d023      	beq.n	800753e <PDM_Filter_setConfig+0x192>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e773      	b.n	80073e2 <PDM_Filter_setConfig+0x36>
 80074fa:	2b06      	cmp	r3, #6
 80074fc:	d822      	bhi.n	8007544 <PDM_Filter_setConfig+0x198>
 80074fe:	e8df f003 	tbb	[pc, r3]
 8007502:	1316      	.short	0x1316
 8007504:	070a0d10 	.word	0x070a0d10
 8007508:	04          	.byte	0x04
 8007509:	00          	.byte	0x00
 800750a:	4b19      	ldr	r3, [pc, #100]	; (8007570 <PDM_Filter_setConfig+0x1c4>)
 800750c:	64a3      	str	r3, [r4, #72]	; 0x48
 800750e:	e7d1      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 8007510:	4b18      	ldr	r3, [pc, #96]	; (8007574 <PDM_Filter_setConfig+0x1c8>)
 8007512:	64a3      	str	r3, [r4, #72]	; 0x48
 8007514:	e7ce      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <PDM_Filter_setConfig+0x1cc>)
 8007518:	64a3      	str	r3, [r4, #72]	; 0x48
 800751a:	e7cb      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 800751c:	4b17      	ldr	r3, [pc, #92]	; (800757c <PDM_Filter_setConfig+0x1d0>)
 800751e:	64a3      	str	r3, [r4, #72]	; 0x48
 8007520:	e7c8      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 8007522:	4b17      	ldr	r3, [pc, #92]	; (8007580 <PDM_Filter_setConfig+0x1d4>)
 8007524:	64a3      	str	r3, [r4, #72]	; 0x48
 8007526:	e7c5      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 8007528:	4b16      	ldr	r3, [pc, #88]	; (8007584 <PDM_Filter_setConfig+0x1d8>)
 800752a:	64a3      	str	r3, [r4, #72]	; 0x48
 800752c:	e7c2      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 800752e:	4b16      	ldr	r3, [pc, #88]	; (8007588 <PDM_Filter_setConfig+0x1dc>)
 8007530:	64a3      	str	r3, [r4, #72]	; 0x48
 8007532:	e7bf      	b.n	80074b4 <PDM_Filter_setConfig+0x108>
 8007534:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800758c <PDM_Filter_setConfig+0x1e0>
 8007538:	eeb0 9a48 	vmov.f32	s18, s16
 800753c:	e78e      	b.n	800745c <PDM_Filter_setConfig+0xb0>
 800753e:	886b      	ldrh	r3, [r5, #2]
 8007540:	8663      	strh	r3, [r4, #50]	; 0x32
 8007542:	e759      	b.n	80073f8 <PDM_Filter_setConfig+0x4c>
 8007544:	2000      	movs	r0, #0
 8007546:	e746      	b.n	80073d6 <PDM_Filter_setConfig+0x2a>
 8007548:	b5e8b5cd 	.word	0xb5e8b5cd
 800754c:	0801164c 	.word	0x0801164c
 8007550:	42000000 	.word	0x42000000
 8007554:	08005919 	.word	0x08005919
 8007558:	080057f9 	.word	0x080057f9
 800755c:	08005aa9 	.word	0x08005aa9
 8007560:	080062ed 	.word	0x080062ed
 8007564:	0800604d 	.word	0x0800604d
 8007568:	08005e2d 	.word	0x08005e2d
 800756c:	08005c41 	.word	0x08005c41
 8007570:	080068f9 	.word	0x080068f9
 8007574:	080067c1 	.word	0x080067c1
 8007578:	080066dd 	.word	0x080066dd
 800757c:	08006f75 	.word	0x08006f75
 8007580:	08006d61 	.word	0x08006d61
 8007584:	08006ba9 	.word	0x08006ba9
 8007588:	08006a3d 	.word	0x08006a3d
 800758c:	00000000 	.word	0x00000000

08007590 <PDM_Filter>:
 8007590:	b410      	push	{r4}
 8007592:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <PDM_Filter+0x34>)
 8007594:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8007596:	429c      	cmp	r4, r3
 8007598:	d003      	beq.n	80075a2 <PDM_Filter+0x12>
 800759a:	2004      	movs	r0, #4
 800759c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80075a4:	05dc      	lsls	r4, r3, #23
 80075a6:	d407      	bmi.n	80075b8 <PDM_Filter+0x28>
 80075a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075ac:	bf14      	ite	ne
 80075ae:	2020      	movne	r0, #32
 80075b0:	2030      	moveq	r0, #48	; 0x30
 80075b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80075ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075be:	320c      	adds	r2, #12
 80075c0:	4718      	bx	r3
 80075c2:	bf00      	nop
 80075c4:	b5e8b5cd 	.word	0xb5e8b5cd

080075c8 <CRC_Lock>:
 80075c8:	4a17      	ldr	r2, [pc, #92]	; (8007628 <CRC_Lock+0x60>)
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	b410      	push	{r4}
 80075ce:	f023 0301 	bic.w	r3, r3, #1
 80075d2:	4c16      	ldr	r4, [pc, #88]	; (800762c <CRC_Lock+0x64>)
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	b933      	cbnz	r3, 80075e8 <CRC_Lock+0x20>
 80075da:	4b15      	ldr	r3, [pc, #84]	; (8007630 <CRC_Lock+0x68>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80075e6:	d00f      	beq.n	8007608 <CRC_Lock+0x40>
 80075e8:	4a12      	ldr	r2, [pc, #72]	; (8007634 <CRC_Lock+0x6c>)
 80075ea:	2301      	movs	r3, #1
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	6813      	ldr	r3, [r2, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1fc      	bne.n	80075ee <CRC_Lock+0x26>
 80075f4:	4b10      	ldr	r3, [pc, #64]	; (8007638 <CRC_Lock+0x70>)
 80075f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075fa:	6018      	str	r0, [r3, #0]
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	1a08      	subs	r0, r1, r0
 8007600:	fab0 f080 	clz	r0, r0
 8007604:	0940      	lsrs	r0, r0, #5
 8007606:	4770      	bx	lr
 8007608:	4a0c      	ldr	r2, [pc, #48]	; (800763c <CRC_Lock+0x74>)
 800760a:	2301      	movs	r3, #1
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1fc      	bne.n	800760e <CRC_Lock+0x46>
 8007614:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <CRC_Lock+0x78>)
 8007616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800761a:	6018      	str	r0, [r3, #0]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	1a40      	subs	r0, r0, r1
 8007620:	fab0 f080 	clz	r0, r0
 8007624:	0940      	lsrs	r0, r0, #5
 8007626:	4770      	bx	lr
 8007628:	e0002000 	.word	0xe0002000
 800762c:	e0042000 	.word	0xe0042000
 8007630:	5c001000 	.word	0x5c001000
 8007634:	40023008 	.word	0x40023008
 8007638:	40023000 	.word	0x40023000
 800763c:	58024c08 	.word	0x58024c08
 8007640:	58024c00 	.word	0x58024c00

08007644 <_ai_platform_acquire_crc>:
 8007644:	2001      	movs	r0, #1
 8007646:	4770      	bx	lr

08007648 <_ai_platform_release_crc>:
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop

0800764c <ai_platform_get_weights_map>:
 800764c:	b132      	cbz	r2, 800765c <ai_platform_get_weights_map+0x10>
 800764e:	6912      	ldr	r2, [r2, #16]
 8007650:	b122      	cbz	r2, 800765c <ai_platform_get_weights_map+0x10>
 8007652:	b110      	cbz	r0, 800765a <ai_platform_get_weights_map+0xe>
 8007654:	b921      	cbnz	r1, 8007660 <ai_platform_get_weights_map+0x14>
 8007656:	4608      	mov	r0, r1
 8007658:	4770      	bx	lr
 800765a:	4770      	bx	lr
 800765c:	4610      	mov	r0, r2
 800765e:	4770      	bx	lr
 8007660:	b470      	push	{r4, r5, r6}
 8007662:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <ai_platform_get_weights_map+0x64>)
 8007664:	6815      	ldr	r5, [r2, #0]
 8007666:	429d      	cmp	r5, r3
 8007668:	d007      	beq.n	800767a <ai_platform_get_weights_map+0x2e>
 800766a:	6002      	str	r2, [r0, #0]
 800766c:	f1a1 0001 	sub.w	r0, r1, #1
 8007670:	fab0 f080 	clz	r0, r0
 8007674:	0940      	lsrs	r0, r0, #5
 8007676:	bc70      	pop	{r4, r5, r6}
 8007678:	4770      	bx	lr
 800767a:	6854      	ldr	r4, [r2, #4]
 800767c:	42ac      	cmp	r4, r5
 800767e:	f102 0204 	add.w	r2, r2, #4
 8007682:	d011      	beq.n	80076a8 <ai_platform_get_weights_map+0x5c>
 8007684:	1f03      	subs	r3, r0, #4
 8007686:	4616      	mov	r6, r2
 8007688:	2000      	movs	r0, #0
 800768a:	e003      	b.n	8007694 <ai_platform_get_weights_map+0x48>
 800768c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8007690:	42ac      	cmp	r4, r5
 8007692:	d009      	beq.n	80076a8 <ai_platform_get_weights_map+0x5c>
 8007694:	3001      	adds	r0, #1
 8007696:	4281      	cmp	r1, r0
 8007698:	f843 4f04 	str.w	r4, [r3, #4]!
 800769c:	d1f6      	bne.n	800768c <ai_platform_get_weights_map+0x40>
 800769e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80076a2:	4b03      	ldr	r3, [pc, #12]	; (80076b0 <ai_platform_get_weights_map+0x64>)
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d001      	beq.n	80076ac <ai_platform_get_weights_map+0x60>
 80076a8:	2000      	movs	r0, #0
 80076aa:	e7e4      	b.n	8007676 <ai_platform_get_weights_map+0x2a>
 80076ac:	2001      	movs	r0, #1
 80076ae:	e7e2      	b.n	8007676 <ai_platform_get_weights_map+0x2a>
 80076b0:	a1facade 	.word	0xa1facade

080076b4 <ai_platform_get_activations_map>:
 80076b4:	b132      	cbz	r2, 80076c4 <ai_platform_get_activations_map+0x10>
 80076b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80076b8:	b122      	cbz	r2, 80076c4 <ai_platform_get_activations_map+0x10>
 80076ba:	b110      	cbz	r0, 80076c2 <ai_platform_get_activations_map+0xe>
 80076bc:	b921      	cbnz	r1, 80076c8 <ai_platform_get_activations_map+0x14>
 80076be:	4608      	mov	r0, r1
 80076c0:	4770      	bx	lr
 80076c2:	4770      	bx	lr
 80076c4:	4610      	mov	r0, r2
 80076c6:	4770      	bx	lr
 80076c8:	b470      	push	{r4, r5, r6}
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <ai_platform_get_activations_map+0x64>)
 80076cc:	6815      	ldr	r5, [r2, #0]
 80076ce:	429d      	cmp	r5, r3
 80076d0:	d007      	beq.n	80076e2 <ai_platform_get_activations_map+0x2e>
 80076d2:	6002      	str	r2, [r0, #0]
 80076d4:	f1a1 0001 	sub.w	r0, r1, #1
 80076d8:	fab0 f080 	clz	r0, r0
 80076dc:	0940      	lsrs	r0, r0, #5
 80076de:	bc70      	pop	{r4, r5, r6}
 80076e0:	4770      	bx	lr
 80076e2:	6854      	ldr	r4, [r2, #4]
 80076e4:	42ac      	cmp	r4, r5
 80076e6:	f102 0204 	add.w	r2, r2, #4
 80076ea:	d011      	beq.n	8007710 <ai_platform_get_activations_map+0x5c>
 80076ec:	1f03      	subs	r3, r0, #4
 80076ee:	4616      	mov	r6, r2
 80076f0:	2000      	movs	r0, #0
 80076f2:	e003      	b.n	80076fc <ai_platform_get_activations_map+0x48>
 80076f4:	f856 4f04 	ldr.w	r4, [r6, #4]!
 80076f8:	42ac      	cmp	r4, r5
 80076fa:	d009      	beq.n	8007710 <ai_platform_get_activations_map+0x5c>
 80076fc:	3001      	adds	r0, #1
 80076fe:	4281      	cmp	r1, r0
 8007700:	f843 4f04 	str.w	r4, [r3, #4]!
 8007704:	d1f6      	bne.n	80076f4 <ai_platform_get_activations_map+0x40>
 8007706:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800770a:	4b03      	ldr	r3, [pc, #12]	; (8007718 <ai_platform_get_activations_map+0x64>)
 800770c:	429a      	cmp	r2, r3
 800770e:	d001      	beq.n	8007714 <ai_platform_get_activations_map+0x60>
 8007710:	2000      	movs	r0, #0
 8007712:	e7e4      	b.n	80076de <ai_platform_get_activations_map+0x2a>
 8007714:	2001      	movs	r0, #1
 8007716:	e7e2      	b.n	80076de <ai_platform_get_activations_map+0x2a>
 8007718:	a1facade 	.word	0xa1facade

0800771c <ai_platform_network_create>:
 800771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	4607      	mov	r7, r0
 8007724:	4616      	mov	r6, r2
 8007726:	461d      	mov	r5, r3
 8007728:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800772c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8007730:	f7ff ff88 	bl	8007644 <_ai_platform_acquire_crc>
 8007734:	b178      	cbz	r0, 8007756 <ai_platform_network_create+0x3a>
 8007736:	4b5a      	ldr	r3, [pc, #360]	; (80078a0 <ai_platform_network_create+0x184>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800773e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007742:	4602      	mov	r2, r0
 8007744:	d00c      	beq.n	8007760 <ai_platform_network_create+0x44>
 8007746:	4b57      	ldr	r3, [pc, #348]	; (80078a4 <ai_platform_network_create+0x188>)
 8007748:	2118      	movs	r1, #24
 800774a:	6019      	str	r1, [r3, #0]
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	2918      	cmp	r1, #24
 8007750:	d034      	beq.n	80077bc <ai_platform_network_create+0xa0>
 8007752:	f7ff ff79 	bl	8007648 <_ai_platform_release_crc>
 8007756:	f241 0033 	movw	r0, #4147	; 0x1033
 800775a:	b002      	add	sp, #8
 800775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007760:	4b51      	ldr	r3, [pc, #324]	; (80078a8 <ai_platform_network_create+0x18c>)
 8007762:	2101      	movs	r1, #1
 8007764:	6019      	str	r1, [r3, #0]
 8007766:	2114      	movs	r1, #20
 8007768:	e001      	b.n	800776e <ai_platform_network_create+0x52>
 800776a:	3901      	subs	r1, #1
 800776c:	d002      	beq.n	8007774 <ai_platform_network_create+0x58>
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	2800      	cmp	r0, #0
 8007772:	d1fa      	bne.n	800776a <ai_platform_network_create+0x4e>
 8007774:	4b4c      	ldr	r3, [pc, #304]	; (80078a8 <ai_platform_network_create+0x18c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	b9f3      	cbnz	r3, 80077b8 <ai_platform_network_create+0x9c>
 800777a:	4610      	mov	r0, r2
 800777c:	f7ff ff64 	bl	8007648 <_ai_platform_release_crc>
 8007780:	4a4a      	ldr	r2, [pc, #296]	; (80078ac <ai_platform_network_create+0x190>)
 8007782:	6813      	ldr	r3, [r2, #0]
 8007784:	f023 0301 	bic.w	r3, r3, #1
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	f7ff ff5b 	bl	8007644 <_ai_platform_acquire_crc>
 800778e:	4b44      	ldr	r3, [pc, #272]	; (80078a0 <ai_platform_network_create+0x184>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779a:	d015      	beq.n	80077c8 <ai_platform_network_create+0xac>
 800779c:	4b41      	ldr	r3, [pc, #260]	; (80078a4 <ai_platform_network_create+0x188>)
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	d1fc      	bne.n	80077a2 <ai_platform_network_create+0x86>
 80077a8:	4b41      	ldr	r3, [pc, #260]	; (80078b0 <ai_platform_network_create+0x194>)
 80077aa:	4a42      	ldr	r2, [pc, #264]	; (80078b4 <ai_platform_network_create+0x198>)
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	4b41      	ldr	r3, [pc, #260]	; (80078b8 <ai_platform_network_create+0x19c>)
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d016      	beq.n	80077e4 <ai_platform_network_create+0xc8>
 80077b6:	e7fe      	b.n	80077b6 <ai_platform_network_create+0x9a>
 80077b8:	4610      	mov	r0, r2
 80077ba:	e7ca      	b.n	8007752 <ai_platform_network_create+0x36>
 80077bc:	2101      	movs	r1, #1
 80077be:	6019      	str	r1, [r3, #0]
 80077c0:	6819      	ldr	r1, [r3, #0]
 80077c2:	2900      	cmp	r1, #0
 80077c4:	d1fc      	bne.n	80077c0 <ai_platform_network_create+0xa4>
 80077c6:	e7d8      	b.n	800777a <ai_platform_network_create+0x5e>
 80077c8:	4b37      	ldr	r3, [pc, #220]	; (80078a8 <ai_platform_network_create+0x18c>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	d1fc      	bne.n	80077ce <ai_platform_network_create+0xb2>
 80077d4:	4b39      	ldr	r3, [pc, #228]	; (80078bc <ai_platform_network_create+0x1a0>)
 80077d6:	4a37      	ldr	r2, [pc, #220]	; (80078b4 <ai_platform_network_create+0x198>)
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	4b36      	ldr	r3, [pc, #216]	; (80078b8 <ai_platform_network_create+0x19c>)
 80077de:	429a      	cmp	r2, r3
 80077e0:	d000      	beq.n	80077e4 <ai_platform_network_create+0xc8>
 80077e2:	e7fe      	b.n	80077e2 <ai_platform_network_create+0xc6>
 80077e4:	f7ff ff30 	bl	8007648 <_ai_platform_release_crc>
 80077e8:	b1af      	cbz	r7, 8007816 <ai_platform_network_create+0xfa>
 80077ea:	4b35      	ldr	r3, [pc, #212]	; (80078c0 <ai_platform_network_create+0x1a4>)
 80077ec:	6033      	str	r3, [r6, #0]
 80077ee:	603e      	str	r6, [r7, #0]
 80077f0:	f000 fa10 	bl	8007c14 <core_init>
 80077f4:	b990      	cbnz	r0, 800781c <ai_platform_network_create+0x100>
 80077f6:	062d      	lsls	r5, r5, #24
 80077f8:	0424      	lsls	r4, r4, #16
 80077fa:	2230      	movs	r2, #48	; 0x30
 80077fc:	2300      	movs	r3, #0
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	2110      	movs	r1, #16
 8007802:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 8007806:	2000      	movs	r0, #0
 8007808:	432b      	orrs	r3, r5
 800780a:	f362 0007 	bfi	r0, r2, #0, #8
 800780e:	6473      	str	r3, [r6, #68]	; 0x44
 8007810:	f361 201f 	bfi	r0, r1, #8, #24
 8007814:	e7a1      	b.n	800775a <ai_platform_network_create+0x3e>
 8007816:	f241 0010 	movw	r0, #4112	; 0x1010
 800781a:	e79e      	b.n	800775a <ai_platform_network_create+0x3e>
 800781c:	4a23      	ldr	r2, [pc, #140]	; (80078ac <ai_platform_network_create+0x190>)
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	f023 0301 	bic.w	r3, r3, #1
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	f7ff ff0d 	bl	8007644 <_ai_platform_acquire_crc>
 800782a:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <ai_platform_network_create+0x184>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007836:	d00d      	beq.n	8007854 <ai_platform_network_create+0x138>
 8007838:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <ai_platform_network_create+0x188>)
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	2a00      	cmp	r2, #0
 8007842:	d1fc      	bne.n	800783e <ai_platform_network_create+0x122>
 8007844:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <ai_platform_network_create+0x194>)
 8007846:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <ai_platform_network_create+0x198>)
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <ai_platform_network_create+0x19c>)
 800784e:	429a      	cmp	r2, r3
 8007850:	d00e      	beq.n	8007870 <ai_platform_network_create+0x154>
 8007852:	e7fe      	b.n	8007852 <ai_platform_network_create+0x136>
 8007854:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <ai_platform_network_create+0x18c>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	2a00      	cmp	r2, #0
 800785e:	d1fc      	bne.n	800785a <ai_platform_network_create+0x13e>
 8007860:	4b16      	ldr	r3, [pc, #88]	; (80078bc <ai_platform_network_create+0x1a0>)
 8007862:	4a14      	ldr	r2, [pc, #80]	; (80078b4 <ai_platform_network_create+0x198>)
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	4b13      	ldr	r3, [pc, #76]	; (80078b8 <ai_platform_network_create+0x19c>)
 800786a:	429a      	cmp	r2, r3
 800786c:	d000      	beq.n	8007870 <ai_platform_network_create+0x154>
 800786e:	e7fe      	b.n	800786e <ai_platform_network_create+0x152>
 8007870:	062d      	lsls	r5, r5, #24
 8007872:	0424      	lsls	r4, r4, #16
 8007874:	f7ff fee8 	bl	8007648 <_ai_platform_release_crc>
 8007878:	ea45 0304 	orr.w	r3, r5, r4
 800787c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8007880:	d001      	beq.n	8007886 <ai_platform_network_create+0x16a>
 8007882:	2201      	movs	r2, #1
 8007884:	e7ba      	b.n	80077fc <ai_platform_network_create+0xe0>
 8007886:	a802      	add	r0, sp, #8
 8007888:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <ai_platform_network_create+0x1a8>)
 800788a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800788e:	f002 fa6f 	bl	8009d70 <ai_check_custom_types>
 8007892:	b110      	cbz	r0, 800789a <ai_platform_network_create+0x17e>
 8007894:	2100      	movs	r1, #0
 8007896:	460a      	mov	r2, r1
 8007898:	e7b3      	b.n	8007802 <ai_platform_network_create+0xe6>
 800789a:	2202      	movs	r2, #2
 800789c:	e7ae      	b.n	80077fc <ai_platform_network_create+0xe0>
 800789e:	bf00      	nop
 80078a0:	e0042000 	.word	0xe0042000
 80078a4:	58024c08 	.word	0x58024c08
 80078a8:	40023008 	.word	0x40023008
 80078ac:	e0002000 	.word	0xe0002000
 80078b0:	58024c00 	.word	0x58024c00
 80078b4:	f407a5c2 	.word	0xf407a5c2
 80078b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80078bc:	40023000 	.word	0x40023000
 80078c0:	a1c00100 	.word	0xa1c00100
 80078c4:	84048403 	.word	0x84048403

080078c8 <ai_platform_network_init>:
 80078c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d04d      	beq.n	800796c <ai_platform_network_init+0xa4>
 80078d0:	4b7c      	ldr	r3, [pc, #496]	; (8007ac4 <ai_platform_network_init+0x1fc>)
 80078d2:	6802      	ldr	r2, [r0, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	4604      	mov	r4, r0
 80078d8:	d148      	bne.n	800796c <ai_platform_network_init+0xa4>
 80078da:	4a7b      	ldr	r2, [pc, #492]	; (8007ac8 <ai_platform_network_init+0x200>)
 80078dc:	6813      	ldr	r3, [r2, #0]
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	460d      	mov	r5, r1
 80078e6:	f7ff fead 	bl	8007644 <_ai_platform_acquire_crc>
 80078ea:	4b78      	ldr	r3, [pc, #480]	; (8007acc <ai_platform_network_init+0x204>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f6:	d00d      	beq.n	8007914 <ai_platform_network_init+0x4c>
 80078f8:	4b75      	ldr	r3, [pc, #468]	; (8007ad0 <ai_platform_network_init+0x208>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	2a00      	cmp	r2, #0
 8007902:	d1fc      	bne.n	80078fe <ai_platform_network_init+0x36>
 8007904:	4b73      	ldr	r3, [pc, #460]	; (8007ad4 <ai_platform_network_init+0x20c>)
 8007906:	4a74      	ldr	r2, [pc, #464]	; (8007ad8 <ai_platform_network_init+0x210>)
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	4b73      	ldr	r3, [pc, #460]	; (8007adc <ai_platform_network_init+0x214>)
 800790e:	429a      	cmp	r2, r3
 8007910:	d00d      	beq.n	800792e <ai_platform_network_init+0x66>
 8007912:	e7fe      	b.n	8007912 <ai_platform_network_init+0x4a>
 8007914:	4b72      	ldr	r3, [pc, #456]	; (8007ae0 <ai_platform_network_init+0x218>)
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	2a00      	cmp	r2, #0
 800791e:	d1fc      	bne.n	800791a <ai_platform_network_init+0x52>
 8007920:	4b70      	ldr	r3, [pc, #448]	; (8007ae4 <ai_platform_network_init+0x21c>)
 8007922:	4a6d      	ldr	r2, [pc, #436]	; (8007ad8 <ai_platform_network_init+0x210>)
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4b6c      	ldr	r3, [pc, #432]	; (8007adc <ai_platform_network_init+0x214>)
 800792a:	429a      	cmp	r2, r3
 800792c:	d11d      	bne.n	800796a <ai_platform_network_init+0xa2>
 800792e:	f7ff fe8b 	bl	8007648 <_ai_platform_release_crc>
 8007932:	2d00      	cmp	r5, #0
 8007934:	d076      	beq.n	8007a24 <ai_platform_network_init+0x15c>
 8007936:	4b6c      	ldr	r3, [pc, #432]	; (8007ae8 <ai_platform_network_init+0x220>)
 8007938:	682a      	ldr	r2, [r5, #0]
 800793a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800793e:	429a      	cmp	r2, r3
 8007940:	d030      	beq.n	80079a4 <ai_platform_network_init+0xdc>
 8007942:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007944:	46a9      	mov	r9, r5
 8007946:	f105 0118 	add.w	r1, r5, #24
 800794a:	2e00      	cmp	r6, #0
 800794c:	f000 8095 	beq.w	8007a7a <ai_platform_network_init+0x1b2>
 8007950:	f1bc 0f00 	cmp.w	ip, #0
 8007954:	f000 80a4 	beq.w	8007aa0 <ai_platform_network_init+0x1d8>
 8007958:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800795c:	f1b8 0f01 	cmp.w	r8, #1
 8007960:	d16a      	bne.n	8007a38 <ai_platform_network_init+0x170>
 8007962:	2700      	movs	r7, #0
 8007964:	468c      	mov	ip, r1
 8007966:	83a7      	strh	r7, [r4, #28]
 8007968:	e028      	b.n	80079bc <ai_platform_network_init+0xf4>
 800796a:	e7fe      	b.n	800796a <ai_platform_network_init+0xa2>
 800796c:	4a56      	ldr	r2, [pc, #344]	; (8007ac8 <ai_platform_network_init+0x200>)
 800796e:	6813      	ldr	r3, [r2, #0]
 8007970:	f023 0301 	bic.w	r3, r3, #1
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	f7ff fe65 	bl	8007644 <_ai_platform_acquire_crc>
 800797a:	4b54      	ldr	r3, [pc, #336]	; (8007acc <ai_platform_network_init+0x204>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007986:	d067      	beq.n	8007a58 <ai_platform_network_init+0x190>
 8007988:	4b51      	ldr	r3, [pc, #324]	; (8007ad0 <ai_platform_network_init+0x208>)
 800798a:	2201      	movs	r2, #1
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	2a00      	cmp	r2, #0
 8007992:	d1fc      	bne.n	800798e <ai_platform_network_init+0xc6>
 8007994:	4b4f      	ldr	r3, [pc, #316]	; (8007ad4 <ai_platform_network_init+0x20c>)
 8007996:	4a50      	ldr	r2, [pc, #320]	; (8007ad8 <ai_platform_network_init+0x210>)
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	4b4f      	ldr	r3, [pc, #316]	; (8007adc <ai_platform_network_init+0x214>)
 800799e:	429a      	cmp	r2, r3
 80079a0:	d067      	beq.n	8007a72 <ai_platform_network_init+0x1aa>
 80079a2:	e7fe      	b.n	80079a2 <ai_platform_network_init+0xda>
 80079a4:	8be1      	ldrh	r1, [r4, #30]
 80079a6:	88eb      	ldrh	r3, [r5, #6]
 80079a8:	89af      	ldrh	r7, [r5, #12]
 80079aa:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 80079ae:	88aa      	ldrh	r2, [r5, #4]
 80079b0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 80079b4:	428b      	cmp	r3, r1
 80079b6:	d13f      	bne.n	8007a38 <ai_platform_network_init+0x170>
 80079b8:	83a2      	strh	r2, [r4, #28]
 80079ba:	b19b      	cbz	r3, 80079e4 <ai_platform_network_init+0x11c>
 80079bc:	f04f 0e00 	mov.w	lr, #0
 80079c0:	46f2      	mov	sl, lr
 80079c2:	eb09 060e 	add.w	r6, r9, lr
 80079c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80079c8:	6a25      	ldr	r5, [r4, #32]
 80079ca:	4475      	add	r5, lr
 80079cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 80079d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80079d6:	8be3      	ldrh	r3, [r4, #30]
 80079d8:	f10a 0a01 	add.w	sl, sl, #1
 80079dc:	459a      	cmp	sl, r3
 80079de:	f10e 0e18 	add.w	lr, lr, #24
 80079e2:	d3ee      	bcc.n	80079c2 <ai_platform_network_init+0xfa>
 80079e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80079e6:	4598      	cmp	r8, r3
 80079e8:	d12e      	bne.n	8007a48 <ai_platform_network_init+0x180>
 80079ea:	84a7      	strh	r7, [r4, #36]	; 0x24
 80079ec:	f1b8 0f00 	cmp.w	r8, #0
 80079f0:	d012      	beq.n	8007a18 <ai_platform_network_init+0x150>
 80079f2:	2700      	movs	r7, #0
 80079f4:	46be      	mov	lr, r7
 80079f6:	eb0c 0607 	add.w	r6, ip, r7
 80079fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80079fc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80079fe:	443d      	add	r5, r7
 8007a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a02:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8007a0a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007a0c:	f10e 0e01 	add.w	lr, lr, #1
 8007a10:	459e      	cmp	lr, r3
 8007a12:	f107 0718 	add.w	r7, r7, #24
 8007a16:	d3ee      	bcc.n	80079f6 <ai_platform_network_init+0x12e>
 8007a18:	2303      	movs	r3, #3
 8007a1a:	60e3      	str	r3, [r4, #12]
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f002 f9d1 	bl	8009dc4 <ai_layers_init_all>
 8007a22:	e006      	b.n	8007a32 <ai_platform_network_init+0x16a>
 8007a24:	f104 0010 	add.w	r0, r4, #16
 8007a28:	2211      	movs	r2, #17
 8007a2a:	2110      	movs	r1, #16
 8007a2c:	462c      	mov	r4, r5
 8007a2e:	f000 f8f3 	bl	8007c18 <core_set_error>
 8007a32:	4620      	mov	r0, r4
 8007a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a38:	f104 0010 	add.w	r0, r4, #16
 8007a3c:	2212      	movs	r2, #18
 8007a3e:	2116      	movs	r1, #22
 8007a40:	f000 f8ea 	bl	8007c18 <core_set_error>
 8007a44:	2400      	movs	r4, #0
 8007a46:	e7f4      	b.n	8007a32 <ai_platform_network_init+0x16a>
 8007a48:	f104 0010 	add.w	r0, r4, #16
 8007a4c:	2213      	movs	r2, #19
 8007a4e:	2116      	movs	r1, #22
 8007a50:	f000 f8e2 	bl	8007c18 <core_set_error>
 8007a54:	2400      	movs	r4, #0
 8007a56:	e7ec      	b.n	8007a32 <ai_platform_network_init+0x16a>
 8007a58:	4b21      	ldr	r3, [pc, #132]	; (8007ae0 <ai_platform_network_init+0x218>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d1fc      	bne.n	8007a5e <ai_platform_network_init+0x196>
 8007a64:	4b1f      	ldr	r3, [pc, #124]	; (8007ae4 <ai_platform_network_init+0x21c>)
 8007a66:	4a1c      	ldr	r2, [pc, #112]	; (8007ad8 <ai_platform_network_init+0x210>)
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <ai_platform_network_init+0x214>)
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d115      	bne.n	8007a9e <ai_platform_network_init+0x1d6>
 8007a72:	f7ff fde9 	bl	8007648 <_ai_platform_release_crc>
 8007a76:	2400      	movs	r4, #0
 8007a78:	e7db      	b.n	8007a32 <ai_platform_network_init+0x16a>
 8007a7a:	8c28      	ldrh	r0, [r5, #32]
 8007a7c:	8bea      	ldrh	r2, [r5, #30]
 8007a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a80:	fb02 f200 	mul.w	r2, r2, r0
 8007a84:	fb03 f302 	mul.w	r3, r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f43f af61 	beq.w	8007950 <ai_platform_network_init+0x88>
 8007a8e:	f104 0010 	add.w	r0, r4, #16
 8007a92:	2213      	movs	r2, #19
 8007a94:	2110      	movs	r1, #16
 8007a96:	4634      	mov	r4, r6
 8007a98:	f000 f8be 	bl	8007c18 <core_set_error>
 8007a9c:	e7c9      	b.n	8007a32 <ai_platform_network_init+0x16a>
 8007a9e:	e7fe      	b.n	8007a9e <ai_platform_network_init+0x1d6>
 8007aa0:	8928      	ldrh	r0, [r5, #8]
 8007aa2:	88ea      	ldrh	r2, [r5, #6]
 8007aa4:	68eb      	ldr	r3, [r5, #12]
 8007aa6:	fb02 f200 	mul.w	r2, r2, r0
 8007aaa:	fb03 f302 	mul.w	r3, r3, r2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f43f af52 	beq.w	8007958 <ai_platform_network_init+0x90>
 8007ab4:	f104 0010 	add.w	r0, r4, #16
 8007ab8:	2212      	movs	r2, #18
 8007aba:	2110      	movs	r1, #16
 8007abc:	4664      	mov	r4, ip
 8007abe:	f000 f8ab 	bl	8007c18 <core_set_error>
 8007ac2:	e7b6      	b.n	8007a32 <ai_platform_network_init+0x16a>
 8007ac4:	a1c00100 	.word	0xa1c00100
 8007ac8:	e0002000 	.word	0xe0002000
 8007acc:	e0042000 	.word	0xe0042000
 8007ad0:	58024c08 	.word	0x58024c08
 8007ad4:	58024c00 	.word	0x58024c00
 8007ad8:	f407a5c2 	.word	0xf407a5c2
 8007adc:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ae0:	40023008 	.word	0x40023008
 8007ae4:	40023000 	.word	0x40023000
 8007ae8:	a1facade 	.word	0xa1facade

08007aec <ai_platform_network_post_init>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	b120      	cbz	r0, 8007afa <ai_platform_network_post_init+0xe>
 8007af0:	4b3f      	ldr	r3, [pc, #252]	; (8007bf0 <ai_platform_network_post_init+0x104>)
 8007af2:	6802      	ldr	r2, [r0, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	4604      	mov	r4, r0
 8007af8:	d02d      	beq.n	8007b56 <ai_platform_network_post_init+0x6a>
 8007afa:	4a3e      	ldr	r2, [pc, #248]	; (8007bf4 <ai_platform_network_post_init+0x108>)
 8007afc:	6813      	ldr	r3, [r2, #0]
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	f7ff fd9e 	bl	8007644 <_ai_platform_acquire_crc>
 8007b08:	4b3b      	ldr	r3, [pc, #236]	; (8007bf8 <ai_platform_network_post_init+0x10c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b14:	d00d      	beq.n	8007b32 <ai_platform_network_post_init+0x46>
 8007b16:	4b39      	ldr	r3, [pc, #228]	; (8007bfc <ai_platform_network_post_init+0x110>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	d1fc      	bne.n	8007b1c <ai_platform_network_post_init+0x30>
 8007b22:	4b37      	ldr	r3, [pc, #220]	; (8007c00 <ai_platform_network_post_init+0x114>)
 8007b24:	4a37      	ldr	r2, [pc, #220]	; (8007c04 <ai_platform_network_post_init+0x118>)
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	4b37      	ldr	r3, [pc, #220]	; (8007c08 <ai_platform_network_post_init+0x11c>)
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d00d      	beq.n	8007b4c <ai_platform_network_post_init+0x60>
 8007b30:	e7fe      	b.n	8007b30 <ai_platform_network_post_init+0x44>
 8007b32:	4b36      	ldr	r3, [pc, #216]	; (8007c0c <ai_platform_network_post_init+0x120>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	d1fc      	bne.n	8007b38 <ai_platform_network_post_init+0x4c>
 8007b3e:	4b34      	ldr	r3, [pc, #208]	; (8007c10 <ai_platform_network_post_init+0x124>)
 8007b40:	4a30      	ldr	r2, [pc, #192]	; (8007c04 <ai_platform_network_post_init+0x118>)
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b30      	ldr	r3, [pc, #192]	; (8007c08 <ai_platform_network_post_init+0x11c>)
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d103      	bne.n	8007b54 <ai_platform_network_post_init+0x68>
 8007b4c:	f7ff fd7c 	bl	8007648 <_ai_platform_release_crc>
 8007b50:	2000      	movs	r0, #0
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	e7fe      	b.n	8007b54 <ai_platform_network_post_init+0x68>
 8007b56:	4a27      	ldr	r2, [pc, #156]	; (8007bf4 <ai_platform_network_post_init+0x108>)
 8007b58:	6813      	ldr	r3, [r2, #0]
 8007b5a:	f023 0301 	bic.w	r3, r3, #1
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	f7ff fd70 	bl	8007644 <_ai_platform_acquire_crc>
 8007b64:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <ai_platform_network_post_init+0x10c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b70:	d00d      	beq.n	8007b8e <ai_platform_network_post_init+0xa2>
 8007b72:	4b22      	ldr	r3, [pc, #136]	; (8007bfc <ai_platform_network_post_init+0x110>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	d1fc      	bne.n	8007b78 <ai_platform_network_post_init+0x8c>
 8007b7e:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <ai_platform_network_post_init+0x114>)
 8007b80:	4a20      	ldr	r2, [pc, #128]	; (8007c04 <ai_platform_network_post_init+0x118>)
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4b20      	ldr	r3, [pc, #128]	; (8007c08 <ai_platform_network_post_init+0x11c>)
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d00e      	beq.n	8007baa <ai_platform_network_post_init+0xbe>
 8007b8c:	e7fe      	b.n	8007b8c <ai_platform_network_post_init+0xa0>
 8007b8e:	4b1f      	ldr	r3, [pc, #124]	; (8007c0c <ai_platform_network_post_init+0x120>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	d1fc      	bne.n	8007b94 <ai_platform_network_post_init+0xa8>
 8007b9a:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <ai_platform_network_post_init+0x124>)
 8007b9c:	4a19      	ldr	r2, [pc, #100]	; (8007c04 <ai_platform_network_post_init+0x118>)
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	4b19      	ldr	r3, [pc, #100]	; (8007c08 <ai_platform_network_post_init+0x11c>)
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d000      	beq.n	8007baa <ai_platform_network_post_init+0xbe>
 8007ba8:	e7fe      	b.n	8007ba8 <ai_platform_network_post_init+0xbc>
 8007baa:	f7ff fd4d 	bl	8007648 <_ai_platform_release_crc>
 8007bae:	68e3      	ldr	r3, [r4, #12]
 8007bb0:	f013 0502 	ands.w	r5, r3, #2
 8007bb4:	d011      	beq.n	8007bda <ai_platform_network_post_init+0xee>
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f002 f918 	bl	8009dec <ai_layers_post_init_all>
 8007bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bbe:	b1a3      	cbz	r3, 8007bea <ai_platform_network_post_init+0xfe>
 8007bc0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007bc2:	b195      	cbz	r5, 8007bea <ai_platform_network_post_init+0xfe>
 8007bc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	2000      	movs	r0, #0
 8007bca:	4798      	blx	r3
 8007bcc:	692b      	ldr	r3, [r5, #16]
 8007bce:	42ab      	cmp	r3, r5
 8007bd0:	d00b      	beq.n	8007bea <ai_platform_network_post_init+0xfe>
 8007bd2:	461d      	mov	r5, r3
 8007bd4:	b14b      	cbz	r3, 8007bea <ai_platform_network_post_init+0xfe>
 8007bd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bd8:	e7f4      	b.n	8007bc4 <ai_platform_network_post_init+0xd8>
 8007bda:	f104 0010 	add.w	r0, r4, #16
 8007bde:	2210      	movs	r2, #16
 8007be0:	2111      	movs	r1, #17
 8007be2:	f000 f819 	bl	8007c18 <core_set_error>
 8007be6:	4628      	mov	r0, r5
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
 8007bea:	2001      	movs	r0, #1
 8007bec:	bd38      	pop	{r3, r4, r5, pc}
 8007bee:	bf00      	nop
 8007bf0:	a1c00100 	.word	0xa1c00100
 8007bf4:	e0002000 	.word	0xe0002000
 8007bf8:	e0042000 	.word	0xe0042000
 8007bfc:	58024c08 	.word	0x58024c08
 8007c00:	58024c00 	.word	0x58024c00
 8007c04:	f407a5c2 	.word	0xf407a5c2
 8007c08:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c0c:	40023008 	.word	0x40023008
 8007c10:	40023000 	.word	0x40023000

08007c14 <core_init>:
 8007c14:	2001      	movs	r0, #1
 8007c16:	4770      	bx	lr

08007c18 <core_set_error>:
 8007c18:	7803      	ldrb	r3, [r0, #0]
 8007c1a:	b933      	cbnz	r3, 8007c2a <core_set_error+0x12>
 8007c1c:	7001      	strb	r1, [r0, #0]
 8007c1e:	6803      	ldr	r3, [r0, #0]
 8007c20:	f362 231f 	bfi	r3, r2, #8, #24
 8007c24:	6003      	str	r3, [r0, #0]
 8007c26:	2001      	movs	r0, #1
 8007c28:	4770      	bx	lr
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop

08007c30 <func_dummy>:
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop

08007c34 <ai_dict8_dot_array_f32>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007c3c:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8007c40:	f000 80c0 	beq.w	8007dc4 <ai_dict8_dot_array_f32+0x190>
 8007c44:	f101 0408 	add.w	r4, r1, #8
 8007c48:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007c4c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007dcc <ai_dict8_dot_array_f32+0x198>
 8007c50:	eb04 0e09 	add.w	lr, r4, r9
 8007c54:	f103 0520 	add.w	r5, r3, #32
 8007c58:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8007c5c:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8007c60:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8007c64:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007c68:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8007c6c:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8007c70:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007c74:	ed55 3a04 	vldr	s7, [r5, #-16]
 8007c78:	ed55 4a03 	vldr	s9, [r5, #-12]
 8007c7c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007c80:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007c84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c88:	edd6 7a00 	vldr	s15, [r6]
 8007c8c:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8007c90:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007c94:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007c98:	ed9a 3a00 	vldr	s6, [sl]
 8007c9c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8007ca0:	eee3 7a05 	vfma.f32	s15, s6, s10
 8007ca4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007ca8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007cac:	ed97 3a00 	vldr	s6, [r7]
 8007cb0:	ed96 5a00 	vldr	s10, [r6]
 8007cb4:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8007cb8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8007cbc:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007cc0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007cc8:	ed9a 3a00 	vldr	s6, [sl]
 8007ccc:	ed96 4a00 	vldr	s8, [r6]
 8007cd0:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8007cd4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007cd8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007cdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ce0:	ed97 5a00 	vldr	s10, [r7]
 8007ce4:	ed96 6a00 	vldr	s12, [r6]
 8007ce8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007cec:	3408      	adds	r4, #8
 8007cee:	45a6      	cmp	lr, r4
 8007cf0:	f105 0520 	add.w	r5, r5, #32
 8007cf4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007cf8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007cfc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d04:	d1a8      	bne.n	8007c58 <ai_dict8_dot_array_f32+0x24>
 8007d06:	4449      	add	r1, r9
 8007d08:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007d0c:	f01c 0c07 	ands.w	ip, ip, #7
 8007d10:	d050      	beq.n	8007db4 <ai_dict8_dot_array_f32+0x180>
 8007d12:	780c      	ldrb	r4, [r1, #0]
 8007d14:	edd3 6a00 	vldr	s13, [r3]
 8007d18:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d1c:	edd4 7a00 	vldr	s15, [r4]
 8007d20:	f1bc 0f01 	cmp.w	ip, #1
 8007d24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d28:	d044      	beq.n	8007db4 <ai_dict8_dot_array_f32+0x180>
 8007d2a:	784c      	ldrb	r4, [r1, #1]
 8007d2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8007d30:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d34:	edd4 7a00 	vldr	s15, [r4]
 8007d38:	f1bc 0f02 	cmp.w	ip, #2
 8007d3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d40:	d038      	beq.n	8007db4 <ai_dict8_dot_array_f32+0x180>
 8007d42:	788c      	ldrb	r4, [r1, #2]
 8007d44:	edd3 6a02 	vldr	s13, [r3, #8]
 8007d48:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d4c:	edd4 7a00 	vldr	s15, [r4]
 8007d50:	f1bc 0f03 	cmp.w	ip, #3
 8007d54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d58:	d02c      	beq.n	8007db4 <ai_dict8_dot_array_f32+0x180>
 8007d5a:	78cc      	ldrb	r4, [r1, #3]
 8007d5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8007d60:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d64:	edd4 7a00 	vldr	s15, [r4]
 8007d68:	f1bc 0f04 	cmp.w	ip, #4
 8007d6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d70:	d020      	beq.n	8007db4 <ai_dict8_dot_array_f32+0x180>
 8007d72:	790c      	ldrb	r4, [r1, #4]
 8007d74:	edd3 6a04 	vldr	s13, [r3, #16]
 8007d78:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d7c:	edd4 7a00 	vldr	s15, [r4]
 8007d80:	f1bc 0f05 	cmp.w	ip, #5
 8007d84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d88:	d014      	beq.n	8007db4 <ai_dict8_dot_array_f32+0x180>
 8007d8a:	794c      	ldrb	r4, [r1, #5]
 8007d8c:	edd3 6a05 	vldr	s13, [r3, #20]
 8007d90:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d94:	edd4 7a00 	vldr	s15, [r4]
 8007d98:	f1bc 0f06 	cmp.w	ip, #6
 8007d9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007da0:	d008      	beq.n	8007db4 <ai_dict8_dot_array_f32+0x180>
 8007da2:	7989      	ldrb	r1, [r1, #6]
 8007da4:	edd3 7a06 	vldr	s15, [r3, #24]
 8007da8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007dac:	edd2 6a00 	vldr	s13, [r2]
 8007db0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007db4:	edd0 7a00 	vldr	s15, [r0]
 8007db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dbc:	ed80 7a00 	vstr	s14, [r0]
 8007dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc4:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007dcc <ai_dict8_dot_array_f32+0x198>
 8007dc8:	e7a0      	b.n	8007d0c <ai_dict8_dot_array_f32+0xd8>
 8007dca:	bf00      	nop
 8007dcc:	00000000 	.word	0x00000000

08007dd0 <ai_dict4_dot_array_f32>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007dd6:	f027 0c01 	bic.w	ip, r7, #1
 8007dda:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8007dde:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007de2:	f000 80ae 	beq.w	8007f42 <ai_dict4_dot_array_f32+0x172>
 8007de6:	1d0d      	adds	r5, r1, #4
 8007de8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007dec:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007f48 <ai_dict4_dot_array_f32+0x178>
 8007df0:	eb05 0e09 	add.w	lr, r5, r9
 8007df4:	f103 0420 	add.w	r4, r3, #32
 8007df8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007dfc:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8007e00:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8007e04:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8007e08:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8007e0c:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8007e10:	ed14 5a04 	vldr	s10, [r4, #-16]
 8007e14:	ed54 5a03 	vldr	s11, [r4, #-12]
 8007e18:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007e1c:	ed54 6a01 	vldr	s13, [r4, #-4]
 8007e20:	f006 0a0f 	and.w	sl, r6, #15
 8007e24:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007e28:	edda 7a00 	vldr	s15, [sl]
 8007e2c:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8007e30:	0936      	lsrs	r6, r6, #4
 8007e32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e36:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007e3a:	ed96 3a00 	vldr	s6, [r6]
 8007e3e:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8007e42:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007e46:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e4a:	f00b 0b0f 	and.w	fp, fp, #15
 8007e4e:	edd6 3a00 	vldr	s7, [r6]
 8007e52:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8007e56:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007e5a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8007e5e:	3504      	adds	r5, #4
 8007e60:	ed9b 4a00 	vldr	s8, [fp]
 8007e64:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8007e68:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007e6c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8007e70:	f00a 0a0f 	and.w	sl, sl, #15
 8007e74:	eddb 4a00 	vldr	s9, [fp]
 8007e78:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e7c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007e80:	45ae      	cmp	lr, r5
 8007e82:	ed9a 5a00 	vldr	s10, [sl]
 8007e86:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8007e8a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e8e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007e92:	f006 060f 	and.w	r6, r6, #15
 8007e96:	edda 5a00 	vldr	s11, [sl]
 8007e9a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ea2:	f104 0420 	add.w	r4, r4, #32
 8007ea6:	ed96 6a00 	vldr	s12, [r6]
 8007eaa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007eb2:	d1a1      	bne.n	8007df8 <ai_dict4_dot_array_f32+0x28>
 8007eb4:	4449      	add	r1, r9
 8007eb6:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007eba:	459c      	cmp	ip, r3
 8007ebc:	d92d      	bls.n	8007f1a <ai_dict4_dot_array_f32+0x14a>
 8007ebe:	f10c 0c07 	add.w	ip, ip, #7
 8007ec2:	f103 0508 	add.w	r5, r3, #8
 8007ec6:	ebac 0c05 	sub.w	ip, ip, r5
 8007eca:	f02c 0407 	bic.w	r4, ip, #7
 8007ece:	f103 0810 	add.w	r8, r3, #16
 8007ed2:	44a0      	add	r8, r4
 8007ed4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8007ed8:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8007edc:	ed15 6a01 	vldr	s12, [r5, #-4]
 8007ee0:	ed55 6a02 	vldr	s13, [r5, #-8]
 8007ee4:	f004 060f 	and.w	r6, r4, #15
 8007ee8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007eec:	0924      	lsrs	r4, r4, #4
 8007eee:	edd6 7a00 	vldr	s15, [r6]
 8007ef2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007ef6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007efa:	ed94 6a00 	vldr	s12, [r4]
 8007efe:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007f02:	3508      	adds	r5, #8
 8007f04:	45a8      	cmp	r8, r5
 8007f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f0a:	d1e5      	bne.n	8007ed8 <ai_dict4_dot_array_f32+0x108>
 8007f0c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007f10:	f10c 0c01 	add.w	ip, ip, #1
 8007f14:	4461      	add	r1, ip
 8007f16:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8007f1a:	07fc      	lsls	r4, r7, #31
 8007f1c:	d509      	bpl.n	8007f32 <ai_dict4_dot_array_f32+0x162>
 8007f1e:	7809      	ldrb	r1, [r1, #0]
 8007f20:	edd3 7a00 	vldr	s15, [r3]
 8007f24:	090b      	lsrs	r3, r1, #4
 8007f26:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007f2a:	edd2 6a00 	vldr	s13, [r2]
 8007f2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f32:	edd0 7a00 	vldr	s15, [r0]
 8007f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f3a:	ed80 7a00 	vstr	s14, [r0]
 8007f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f42:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007f48 <ai_dict4_dot_array_f32+0x178>
 8007f46:	e7b8      	b.n	8007eba <ai_dict4_dot_array_f32+0xea>
 8007f48:	00000000 	.word	0x00000000

08007f4c <ai_dict_decompress_f32>:
 8007f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f50:	9f08      	ldr	r7, [sp, #32]
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007f58:	d00e      	beq.n	8007f78 <ai_dict_decompress_f32+0x2c>
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d10a      	bne.n	8007f74 <ai_dict_decompress_f32+0x28>
 8007f5e:	42b8      	cmp	r0, r7
 8007f60:	d208      	bcs.n	8007f74 <ai_dict_decompress_f32+0x28>
 8007f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f840 3b04 	str.w	r3, [r0], #4
 8007f70:	4287      	cmp	r7, r0
 8007f72:	d8f6      	bhi.n	8007f62 <ai_dict_decompress_f32+0x16>
 8007f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f78:	9b07      	ldr	r3, [sp, #28]
 8007f7a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8007f7e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8007f82:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 8007f86:	f003 0e01 	and.w	lr, r3, #1
 8007f8a:	42b8      	cmp	r0, r7
 8007f8c:	d2f2      	bcs.n	8007f74 <ai_dict_decompress_f32+0x28>
 8007f8e:	f1bc 0f00 	cmp.w	ip, #0
 8007f92:	d01a      	beq.n	8007fca <ai_dict_decompress_f32+0x7e>
 8007f94:	f100 0508 	add.w	r5, r0, #8
 8007f98:	1e4c      	subs	r4, r1, #1
 8007f9a:	eb01 0608 	add.w	r6, r1, r8
 8007f9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fa8:	42a6      	cmp	r6, r4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f845 3c08 	str.w	r3, [r5, #-8]
 8007fb0:	7823      	ldrb	r3, [r4, #0]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fba:	f105 0508 	add.w	r5, r5, #8
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007fc4:	d1eb      	bne.n	8007f9e <ai_dict_decompress_f32+0x52>
 8007fc6:	4461      	add	r1, ip
 8007fc8:	4448      	add	r0, r9
 8007fca:	f1be 0f00 	cmp.w	lr, #0
 8007fce:	d103      	bne.n	8007fd8 <ai_dict_decompress_f32+0x8c>
 8007fd0:	4287      	cmp	r7, r0
 8007fd2:	d8dc      	bhi.n	8007f8e <ai_dict_decompress_f32+0x42>
 8007fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fd8:	780b      	ldrb	r3, [r1, #0]
 8007fda:	091b      	lsrs	r3, r3, #4
 8007fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	3004      	adds	r0, #4
 8007fe8:	e7cf      	b.n	8007f8a <ai_dict_decompress_f32+0x3e>
 8007fea:	bf00      	nop

08007fec <forward_conv2d_nl_pool>:
 8007fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff0:	ed2d 8b10 	vpush	{d8-d15}
 8007ff4:	b0e1      	sub	sp, #388	; 0x184
 8007ff6:	6983      	ldr	r3, [r0, #24]
 8007ff8:	881e      	ldrh	r6, [r3, #0]
 8007ffa:	af0a      	add	r7, sp, #40	; 0x28
 8007ffc:	2e00      	cmp	r6, #0
 8007ffe:	f000 859b 	beq.w	8008b38 <forward_conv2d_nl_pool+0xb4c>
 8008002:	6859      	ldr	r1, [r3, #4]
 8008004:	684a      	ldr	r2, [r1, #4]
 8008006:	2a00      	cmp	r2, #0
 8008008:	f000 8593 	beq.w	8008b32 <forward_conv2d_nl_pool+0xb46>
 800800c:	f8d2 c000 	ldr.w	ip, [r2]
 8008010:	2e01      	cmp	r6, #1
 8008012:	f240 858b 	bls.w	8008b2c <forward_conv2d_nl_pool+0xb40>
 8008016:	690a      	ldr	r2, [r1, #16]
 8008018:	2a00      	cmp	r2, #0
 800801a:	f000 8582 	beq.w	8008b22 <forward_conv2d_nl_pool+0xb36>
 800801e:	f8d2 9000 	ldr.w	r9, [r2]
 8008022:	2e02      	cmp	r6, #2
 8008024:	f000 8582 	beq.w	8008b2c <forward_conv2d_nl_pool+0xb40>
 8008028:	69cd      	ldr	r5, [r1, #28]
 800802a:	2d00      	cmp	r5, #0
 800802c:	f000 8571 	beq.w	8008b12 <forward_conv2d_nl_pool+0xb26>
 8008030:	682a      	ldr	r2, [r5, #0]
 8008032:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008036:	f111 0218 	adds.w	r2, r1, #24
 800803a:	d004      	beq.n	8008046 <forward_conv2d_nl_pool+0x5a>
 800803c:	8b0a      	ldrh	r2, [r1, #24]
 800803e:	2a01      	cmp	r2, #1
 8008040:	f240 857c 	bls.w	8008b3c <forward_conv2d_nl_pool+0xb50>
 8008044:	686a      	ldr	r2, [r5, #4]
 8008046:	68a9      	ldr	r1, [r5, #8]
 8008048:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800804a:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800804e:	f8dc b018 	ldr.w	fp, [ip, #24]
 8008052:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8008056:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800805a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800805e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8008062:	f8db 4008 	ldr.w	r4, [fp, #8]
 8008066:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800806a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800806e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8008072:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8008076:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800807a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800807e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008082:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8008086:	f8de 4004 	ldr.w	r4, [lr, #4]
 800808a:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800808e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8008092:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8008096:	f8de 4008 	ldr.w	r4, [lr, #8]
 800809a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800809e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80080a2:	6824      	ldr	r4, [r4, #0]
 80080a4:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 80080a8:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80080ac:	6864      	ldr	r4, [r4, #4]
 80080ae:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80080b2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80080b6:	68a5      	ldr	r5, [r4, #8]
 80080b8:	f8da 4004 	ldr.w	r4, [sl, #4]
 80080bc:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80080c0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80080c4:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80080c8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80080ca:	6824      	ldr	r4, [r4, #0]
 80080cc:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 80080d0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80080d2:	6864      	ldr	r4, [r4, #4]
 80080d4:	643c      	str	r4, [r7, #64]	; 0x40
 80080d6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80080da:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80080de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80080e0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80080e4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80080e6:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80080ea:	69c4      	ldr	r4, [r0, #28]
 80080ec:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 80080f0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80080f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80080f4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80080f6:	647c      	str	r4, [r7, #68]	; 0x44
 80080f8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80080fa:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80080fe:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8008102:	2a00      	cmp	r2, #0
 8008104:	f000 84f8 	beq.w	8008af8 <forward_conv2d_nl_pool+0xb0c>
 8008108:	6992      	ldr	r2, [r2, #24]
 800810a:	6892      	ldr	r2, [r2, #8]
 800810c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008110:	4680      	mov	r8, r0
 8008112:	6a00      	ldr	r0, [r0, #32]
 8008114:	2900      	cmp	r1, #0
 8008116:	f000 84e4 	beq.w	8008ae2 <forward_conv2d_nl_pool+0xaf6>
 800811a:	698a      	ldr	r2, [r1, #24]
 800811c:	2a00      	cmp	r2, #0
 800811e:	f000 8533 	beq.w	8008b88 <forward_conv2d_nl_pool+0xb9c>
 8008122:	694b      	ldr	r3, [r1, #20]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800812a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800812e:	6893      	ldr	r3, [r2, #8]
 8008130:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008134:	f001 fe72 	bl	8009e1c <ai_array_get_byte_size>
 8008138:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800813c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008140:	881e      	ldrh	r6, [r3, #0]
 8008142:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8008146:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800814a:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800814e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008150:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8008154:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8008158:	fa11 f585 	uxtah	r5, r1, r5
 800815c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008160:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008164:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8008168:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800816c:	3901      	subs	r1, #1
 800816e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8008172:	eb05 0e00 	add.w	lr, r5, r0
 8008176:	fa1f f28a 	uxth.w	r2, sl
 800817a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800817e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8008182:	f8dc 4000 	ldr.w	r4, [ip]
 8008186:	f8dc 1000 	ldr.w	r1, [ip]
 800818a:	3a01      	subs	r2, #1
 800818c:	fb00 5002 	mla	r0, r0, r2, r5
 8008190:	fa1f f28b 	uxth.w	r2, fp
 8008194:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8008198:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800819c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80081a0:	1e50      	subs	r0, r2, #1
 80081a2:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80081a6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80081aa:	fa44 f101 	asr.w	r1, r4, r1
 80081ae:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80081b2:	f8dc 4000 	ldr.w	r4, [ip]
 80081b6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80081ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80081be:	f3c4 4543 	ubfx	r5, r4, #17, #4
 80081c2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80081c6:	ebae 0202 	sub.w	r2, lr, r2
 80081ca:	fa1f fe81 	uxth.w	lr, r1
 80081ce:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80081d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80081d6:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80081da:	3c01      	subs	r4, #1
 80081dc:	fb04 1100 	mla	r1, r4, r0, r1
 80081e0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80081e4:	1c51      	adds	r1, r2, #1
 80081e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081ea:	487c      	ldr	r0, [pc, #496]	; (80083dc <forward_conv2d_nl_pool+0x3f0>)
 80081ec:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80081f0:	4611      	mov	r1, r2
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	bf08      	it	eq
 80081f6:	4601      	moveq	r1, r0
 80081f8:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 80081fc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008200:	2d04      	cmp	r5, #4
 8008202:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008206:	f000 849e 	beq.w	8008b46 <forward_conv2d_nl_pool+0xb5a>
 800820a:	2d08      	cmp	r5, #8
 800820c:	f000 849b 	beq.w	8008b46 <forward_conv2d_nl_pool+0xb5a>
 8008210:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8008214:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008218:	2e03      	cmp	r6, #3
 800821a:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800821e:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8008222:	f240 8483 	bls.w	8008b2c <forward_conv2d_nl_pool+0xb40>
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8489 	beq.w	8008b42 <forward_conv2d_nl_pool+0xb56>
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800823e:	6899      	ldr	r1, [r3, #8]
 8008240:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8008244:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008248:	6896      	ldr	r6, [r2, #8]
 800824a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800824e:	4249      	negs	r1, r1
 8008250:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008254:	2800      	cmp	r0, #0
 8008256:	f000 82dd 	beq.w	8008814 <forward_conv2d_nl_pool+0x828>
 800825a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800825e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008262:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008266:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800826a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 80083e0 <forward_conv2d_nl_pool+0x3f4>
 800826e:	fb03 f200 	mul.w	r2, r3, r0
 8008272:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008276:	008c      	lsls	r4, r1, #2
 8008278:	fb04 f000 	mul.w	r0, r4, r0
 800827c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8008280:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8008284:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8008288:	fb01 fc02 	mul.w	ip, r1, r2
 800828c:	00a2      	lsls	r2, r4, #2
 800828e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8008292:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008296:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800829a:	00ab      	lsls	r3, r5, #2
 800829c:	4694      	mov	ip, r2
 800829e:	fb0c f204 	mul.w	r2, ip, r4
 80082a2:	fb04 f303 	mul.w	r3, r4, r3
 80082a6:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80082aa:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80082ae:	00a4      	lsls	r4, r4, #2
 80082b0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80082b4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80082b8:	f04f 0c00 	mov.w	ip, #0
 80082bc:	fa0f f58b 	sxth.w	r5, fp
 80082c0:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 80082c4:	46a4      	mov	ip, r4
 80082c6:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 80082ca:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 80082ce:	fa0f f58a 	sxth.w	r5, sl
 80082d2:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 80082d6:	fb0c fc04 	mul.w	ip, ip, r4
 80082da:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 80082de:	fb06 fc03 	mul.w	ip, r6, r3
 80082e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082e6:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80082ea:	4240      	negs	r0, r0
 80082ec:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80082f0:	469c      	mov	ip, r3
 80082f2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80082f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082fa:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 80082fe:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8008302:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8008306:	fb00 f303 	mul.w	r3, r0, r3
 800830a:	460d      	mov	r5, r1
 800830c:	fb0c fc04 	mul.w	ip, ip, r4
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
 8008312:	fb04 f305 	mul.w	r3, r4, r5
 8008316:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800831a:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800831e:	623b      	str	r3, [r7, #32]
 8008320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008324:	46a6      	mov	lr, r4
 8008326:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800832a:	fb05 f503 	mul.w	r5, r5, r3
 800832e:	667d      	str	r5, [r7, #100]	; 0x64
 8008330:	4625      	mov	r5, r4
 8008332:	fb05 f503 	mul.w	r5, r5, r3
 8008336:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800833a:	66bd      	str	r5, [r7, #104]	; 0x68
 800833c:	fb00 f101 	mul.w	r1, r0, r1
 8008340:	fb03 f306 	mul.w	r3, r3, r6
 8008344:	657b      	str	r3, [r7, #84]	; 0x54
 8008346:	008b      	lsls	r3, r1, #2
 8008348:	633b      	str	r3, [r7, #48]	; 0x30
 800834a:	0093      	lsls	r3, r2, #2
 800834c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800834e:	0083      	lsls	r3, r0, #2
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008356:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800835a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800835e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008362:	2400      	movs	r4, #0
 8008364:	63bb      	str	r3, [r7, #56]	; 0x38
 8008366:	4603      	mov	r3, r0
 8008368:	fb03 f301 	mul.w	r3, r3, r1
 800836c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8008370:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008374:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008378:	00d1      	lsls	r1, r2, #3
 800837a:	0113      	lsls	r3, r2, #4
 800837c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8008380:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008384:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008388:	fb00 f004 	mul.w	r0, r0, r4
 800838c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8008390:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008392:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8008396:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800839a:	469a      	mov	sl, r3
 800839c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f340 81d0 	ble.w	8008746 <forward_conv2d_nl_pool+0x75a>
 80083a6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80083aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80083ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80083b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80083b6:	2900      	cmp	r1, #0
 80083b8:	441a      	add	r2, r3
 80083ba:	bfb4      	ite	lt
 80083bc:	2100      	movlt	r1, #0
 80083be:	2300      	movge	r3, #0
 80083c0:	4282      	cmp	r2, r0
 80083c2:	bf28      	it	cs
 80083c4:	4602      	movcs	r2, r0
 80083c6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80083ca:	2801      	cmp	r0, #1
 80083cc:	f000 83f6 	beq.w	8008bbc <forward_conv2d_nl_pool+0xbd0>
 80083d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80083d4:	4281      	cmp	r1, r0
 80083d6:	f000 822a 	beq.w	800882e <forward_conv2d_nl_pool+0x842>
 80083da:	e003      	b.n	80083e4 <forward_conv2d_nl_pool+0x3f8>
 80083dc:	08007c31 	.word	0x08007c31
 80083e0:	00000000 	.word	0x00000000
 80083e4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80083e8:	2900      	cmp	r1, #0
 80083ea:	f000 819f 	beq.w	800872c <forward_conv2d_nl_pool+0x740>
 80083ee:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80083f2:	fb93 f1f0 	sdiv	r1, r3, r0
 80083f6:	fb00 3111 	mls	r1, r0, r1, r3
 80083fa:	1a41      	subs	r1, r0, r1
 80083fc:	1ad2      	subs	r2, r2, r3
 80083fe:	fb91 f5f0 	sdiv	r5, r1, r0
 8008402:	fb00 1515 	mls	r5, r0, r5, r1
 8008406:	1b52      	subs	r2, r2, r5
 8008408:	4601      	mov	r1, r0
 800840a:	4402      	add	r2, r0
 800840c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008410:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8008414:	4604      	mov	r4, r0
 8008416:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800841a:	fbb4 f4f0 	udiv	r4, r4, r0
 800841e:	6a38      	ldr	r0, [r7, #32]
 8008420:	3a01      	subs	r2, #1
 8008422:	fb92 f8f1 	sdiv	r8, r2, r1
 8008426:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800842a:	eba0 0c04 	sub.w	ip, r0, r4
 800842e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008432:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8008436:	4614      	mov	r4, r2
 8008438:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800843c:	fbb4 f2f2 	udiv	r2, r4, r2
 8008440:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8008444:	663a      	str	r2, [r7, #96]	; 0x60
 8008446:	441d      	add	r5, r3
 8008448:	fb0e f000 	mul.w	r0, lr, r0
 800844c:	440b      	add	r3, r1
 800844e:	eba6 0608 	sub.w	r6, r6, r8
 8008452:	fb04 f505 	mul.w	r5, r4, r5
 8008456:	3b01      	subs	r3, #1
 8008458:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800845c:	fb93 f3f4 	sdiv	r3, r3, r4
 8008460:	fb00 f406 	mul.w	r4, r0, r6
 8008464:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008468:	677d      	str	r5, [r7, #116]	; 0x74
 800846a:	0091      	lsls	r1, r2, #2
 800846c:	fb00 f003 	mul.w	r0, r0, r3
 8008470:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8008474:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800847a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800847e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8008482:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8008486:	1ac3      	subs	r3, r0, r3
 8008488:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800848c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008490:	008b      	lsls	r3, r1, #2
 8008492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008494:	00d3      	lsls	r3, r2, #3
 8008496:	61fb      	str	r3, [r7, #28]
 8008498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084a8:	2300      	movs	r3, #0
 80084aa:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80084ae:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80084b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80084b4:	46c2      	mov	sl, r8
 80084b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80084be:	eb03 0c02 	add.w	ip, r3, r2
 80084c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f2c0 811c 	blt.w	8008704 <forward_conv2d_nl_pool+0x718>
 80084cc:	2000      	movs	r0, #0
 80084ce:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80084d0:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 80084d4:	4605      	mov	r5, r0
 80084d6:	4606      	mov	r6, r0
 80084d8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80084e0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80084e4:	4413      	add	r3, r2
 80084e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80084ea:	440a      	add	r2, r1
 80084ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf94      	ite	ls
 80084f4:	ebc6 0303 	rsbls	r3, r6, r3
 80084f8:	ebc6 0301 	rsbhi	r3, r6, r1
 80084fc:	4415      	add	r5, r2
 80084fe:	1a1b      	subs	r3, r3, r0
 8008500:	00a4      	lsls	r4, r4, #2
 8008502:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8008506:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800850a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800850e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8008510:	4602      	mov	r2, r0
 8008512:	2800      	cmp	r0, #0
 8008514:	bf08      	it	eq
 8008516:	4662      	moveq	r2, ip
 8008518:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800851c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8008520:	fb91 f1f0 	sdiv	r1, r1, r0
 8008524:	4429      	add	r1, r5
 8008526:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800852a:	fb0e 5501 	mla	r5, lr, r1, r5
 800852e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008532:	4403      	add	r3, r0
 8008534:	fb01 6104 	mla	r1, r1, r4, r6
 8008538:	3b01      	subs	r3, #1
 800853a:	fb93 f6f0 	sdiv	r6, r3, r0
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8008544:	fb06 3110 	mls	r1, r6, r0, r3
 8008548:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800854c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008550:	4562      	cmp	r2, ip
 8008552:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008556:	bf08      	it	eq
 8008558:	eeb0 6a48 	vmoveq.f32	s12, s16
 800855c:	1b9b      	subs	r3, r3, r6
 800855e:	2800      	cmp	r0, #0
 8008560:	d070      	beq.n	8008644 <forward_conv2d_nl_pool+0x658>
 8008562:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008566:	fb0e f803 	mul.w	r8, lr, r3
 800856a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800856c:	fb00 fb01 	mul.w	fp, r0, r1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d067      	beq.n	8008644 <forward_conv2d_nl_pool+0x658>
 8008574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008578:	18d3      	adds	r3, r2, r3
 800857a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800857e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	62bb      	str	r3, [r7, #40]	; 0x28
 8008586:	2300      	movs	r3, #0
 8008588:	673b      	str	r3, [r7, #112]	; 0x70
 800858a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	4413      	add	r3, r2
 8008592:	65bb      	str	r3, [r7, #88]	; 0x58
 8008594:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	4413      	add	r3, r2
 800859c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80085a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80085a4:	ecf3 7a01 	vldmia	r3!, {s15}
 80085a8:	f1ba 0f00 	cmp.w	sl, #0
 80085ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80085b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80085b4:	f340 80a4 	ble.w	8008700 <forward_conv2d_nl_pool+0x714>
 80085b8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80085bc:	f04f 0c00 	mov.w	ip, #0
 80085c0:	2e00      	cmp	r6, #0
 80085c2:	dd19      	ble.n	80085f8 <forward_conv2d_nl_pool+0x60c>
 80085c4:	2100      	movs	r1, #0
 80085c6:	eb00 040e 	add.w	r4, r0, lr
 80085ca:	4284      	cmp	r4, r0
 80085cc:	d910      	bls.n	80085f0 <forward_conv2d_nl_pool+0x604>
 80085ce:	4603      	mov	r3, r0
 80085d0:	462a      	mov	r2, r5
 80085d2:	ecb3 7a01 	vldmia	r3!, {s14}
 80085d6:	ecf2 6a01 	vldmia	r2!, {s13}
 80085da:	429c      	cmp	r4, r3
 80085dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085e0:	d8f7      	bhi.n	80085d2 <forward_conv2d_nl_pool+0x5e6>
 80085e2:	43c3      	mvns	r3, r0
 80085e4:	441c      	add	r4, r3
 80085e6:	f024 0403 	bic.w	r4, r4, #3
 80085ea:	3404      	adds	r4, #4
 80085ec:	4425      	add	r5, r4
 80085ee:	4420      	add	r0, r4
 80085f0:	3101      	adds	r1, #1
 80085f2:	428e      	cmp	r6, r1
 80085f4:	4448      	add	r0, r9
 80085f6:	d1e6      	bne.n	80085c6 <forward_conv2d_nl_pool+0x5da>
 80085f8:	f10c 0c01 	add.w	ip, ip, #1
 80085fc:	45e2      	cmp	sl, ip
 80085fe:	4458      	add	r0, fp
 8008600:	4445      	add	r5, r8
 8008602:	d1dd      	bne.n	80085c0 <forward_conv2d_nl_pool+0x5d4>
 8008604:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860c:	441d      	add	r5, r3
 800860e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008612:	ece3 7a01 	vstmia	r3!, {s15}
 8008616:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861e:	4293      	cmp	r3, r2
 8008620:	d1be      	bne.n	80085a0 <forward_conv2d_nl_pool+0x5b4>
 8008622:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008626:	69f9      	ldr	r1, [r7, #28]
 8008628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800862a:	4472      	add	r2, lr
 800862c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008632:	1a52      	subs	r2, r2, r1
 8008634:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008638:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800863c:	3301      	adds	r3, #1
 800863e:	429a      	cmp	r2, r3
 8008640:	673b      	str	r3, [r7, #112]	; 0x70
 8008642:	d1a2      	bne.n	800858a <forward_conv2d_nl_pool+0x59e>
 8008644:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008648:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800864c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864e:	4608      	mov	r0, r1
 8008650:	4410      	add	r0, r2
 8008652:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008656:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800865a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800865e:	4401      	add	r1, r0
 8008660:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8008664:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008668:	1a8a      	subs	r2, r1, r2
 800866a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800866e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008672:	3301      	adds	r3, #1
 8008674:	429a      	cmp	r2, r3
 8008676:	67bb      	str	r3, [r7, #120]	; 0x78
 8008678:	f47f af1d 	bne.w	80084b6 <forward_conv2d_nl_pool+0x4ca>
 800867c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008680:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008684:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	2a00      	cmp	r2, #0
 800868c:	f000 8210 	beq.w	8008ab0 <forward_conv2d_nl_pool+0xac4>
 8008690:	2400      	movs	r4, #0
 8008692:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8008696:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800869a:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800869e:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 80086a2:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80086a6:	609e      	str	r6, [r3, #8]
 80086a8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80086ac:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 80086b0:	462b      	mov	r3, r5
 80086b2:	4641      	mov	r1, r8
 80086b4:	4640      	mov	r0, r8
 80086b6:	47a0      	blx	r4
 80086b8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80086bc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80086c0:	6859      	ldr	r1, [r3, #4]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80086c8:	4405      	add	r5, r0
 80086ca:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80086ce:	0089      	lsls	r1, r1, #2
 80086d0:	4406      	add	r6, r0
 80086d2:	eba5 0c09 	sub.w	ip, r5, r9
 80086d6:	1850      	adds	r0, r2, r1
 80086d8:	45a4      	cmp	ip, r4
 80086da:	bfa8      	it	ge
 80086dc:	464d      	movge	r5, r9
 80086de:	4286      	cmp	r6, r0
 80086e0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80086e4:	bf28      	it	cs
 80086e6:	1a76      	subcs	r6, r6, r1
 80086e8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80086ec:	3001      	adds	r0, #1
 80086ee:	4281      	cmp	r1, r0
 80086f0:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 80086f4:	d1d7      	bne.n	80086a6 <forward_conv2d_nl_pool+0x6ba>
 80086f6:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80086fa:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 80086fe:	e019      	b.n	8008734 <forward_conv2d_nl_pool+0x748>
 8008700:	461a      	mov	r2, r3
 8008702:	e781      	b.n	8008608 <forward_conv2d_nl_pool+0x61c>
 8008704:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008708:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800870c:	fb90 f3f2 	sdiv	r3, r0, r2
 8008710:	fb02 0313 	mls	r3, r2, r3, r0
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	4605      	mov	r5, r0
 8008718:	fb93 f0f2 	sdiv	r0, r3, r2
 800871c:	fb02 3010 	mls	r0, r2, r0, r3
 8008720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008722:	462e      	mov	r6, r5
 8008724:	18c4      	adds	r4, r0, r3
 8008726:	eb02 0805 	add.w	r8, r2, r5
 800872a:	e6d5      	b.n	80084d8 <forward_conv2d_nl_pool+0x4ec>
 800872c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	609a      	str	r2, [r3, #8]
 8008736:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800873a:	3301      	adds	r3, #1
 800873c:	b21b      	sxth	r3, r3
 800873e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008746:	3b01      	subs	r3, #1
 8008748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800874c:	f100 83bf 	bmi.w	8008ece <forward_conv2d_nl_pool+0xee2>
 8008750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008754:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8008758:	42a3      	cmp	r3, r4
 800875a:	f200 839d 	bhi.w	8008e98 <forward_conv2d_nl_pool+0xeac>
 800875e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008762:	b29b      	uxth	r3, r3
 8008764:	6990      	ldr	r0, [r2, #24]
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800876c:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8008770:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	fa1f f188 	uxth.w	r1, r8
 800877a:	b29a      	uxth	r2, r3
 800877c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008780:	9308      	str	r3, [sp, #32]
 8008782:	9105      	str	r1, [sp, #20]
 8008784:	2601      	movs	r6, #1
 8008786:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800878a:	9607      	str	r6, [sp, #28]
 800878c:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8008790:	9506      	str	r5, [sp, #24]
 8008792:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8008796:	9304      	str	r3, [sp, #16]
 8008798:	1a64      	subs	r4, r4, r1
 800879a:	b2b1      	uxth	r1, r6
 800879c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80087a6:	b224      	sxth	r4, r4
 80087a8:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80087ac:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 80087b0:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80087b4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80087b6:	47a0      	blx	r4
 80087b8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80087bc:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 80087c0:	688a      	ldr	r2, [r1, #8]
 80087c2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80087c4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80087c8:	fa0f f388 	sxth.w	r3, r8
 80087cc:	1af3      	subs	r3, r6, r3
 80087ce:	4422      	add	r2, r4
 80087d0:	462e      	mov	r6, r5
 80087d2:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80087d6:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 80087da:	608a      	str	r2, [r1, #8]
 80087dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80087e0:	4426      	add	r6, r4
 80087e2:	b21b      	sxth	r3, r3
 80087e4:	1b2c      	subs	r4, r5, r4
 80087e6:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80087ea:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80087ec:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80087f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087f8:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 80087fc:	3001      	adds	r0, #1
 80087fe:	442c      	add	r4, r5
 8008800:	4283      	cmp	r3, r0
 8008802:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8008806:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800880a:	f63f adc7 	bhi.w	800839c <forward_conv2d_nl_pool+0x3b0>
 800880e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	609a      	str	r2, [r3, #8]
 8008818:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800881c:	68d3      	ldr	r3, [r2, #12]
 800881e:	6093      	str	r3, [r2, #8]
 8008820:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008824:	46bd      	mov	sp, r7
 8008826:	ecbd 8b10 	vpop	{d8-d15}
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008830:	2901      	cmp	r1, #1
 8008832:	f47f add7 	bne.w	80083e4 <forward_conv2d_nl_pool+0x3f8>
 8008836:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800883a:	2900      	cmp	r1, #0
 800883c:	f43f af76 	beq.w	800872c <forward_conv2d_nl_pool+0x740>
 8008840:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008844:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8008848:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800884c:	1ad2      	subs	r2, r2, r3
 800884e:	1a8c      	subs	r4, r1, r2
 8008850:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8008854:	00b2      	lsls	r2, r6, #2
 8008856:	fb02 f204 	mul.w	r2, r2, r4
 800885a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800885e:	fbb1 f1f0 	udiv	r1, r1, r0
 8008862:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8008866:	460d      	mov	r5, r1
 8008868:	62f9      	str	r1, [r7, #44]	; 0x2c
 800886a:	62ba      	str	r2, [r7, #40]	; 0x28
 800886c:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8008870:	0082      	lsls	r2, r0, #2
 8008872:	65ba      	str	r2, [r7, #88]	; 0x58
 8008874:	00ca      	lsls	r2, r1, #3
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	00aa      	lsls	r2, r5, #2
 800887a:	60ba      	str	r2, [r7, #8]
 800887c:	fb03 f206 	mul.w	r2, r3, r6
 8008880:	67ba      	str	r2, [r7, #120]	; 0x78
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	617b      	str	r3, [r7, #20]
 800888a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800888e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008892:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008896:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800889a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800889e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80088a2:	2300      	movs	r3, #0
 80088a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f2c0 8112 	blt.w	8008ad6 <forward_conv2d_nl_pool+0xaea>
 80088b2:	2100      	movs	r1, #0
 80088b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088b6:	460a      	mov	r2, r1
 80088b8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80088bc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80088c0:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80088c4:	4420      	add	r0, r4
 80088c6:	4408      	add	r0, r1
 80088c8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80088cc:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80088d0:	190c      	adds	r4, r1, r4
 80088d2:	42ac      	cmp	r4, r5
 80088d4:	bf28      	it	cs
 80088d6:	462c      	movcs	r4, r5
 80088d8:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 80088dc:	0080      	lsls	r0, r0, #2
 80088de:	1aa4      	subs	r4, r4, r2
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	f000 80e9 	beq.w	8008ab8 <forward_conv2d_nl_pool+0xacc>
 80088e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80088ea:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 80088ee:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80088f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80088f6:	42b5      	cmp	r5, r6
 80088f8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80088fc:	eba3 0204 	sub.w	r2, r3, r4
 8008900:	eba1 0104 	sub.w	r1, r1, r4
 8008904:	bf08      	it	eq
 8008906:	eef0 3a48 	vmoveq.f32	s7, s16
 800890a:	462b      	mov	r3, r5
 800890c:	697d      	ldr	r5, [r7, #20]
 800890e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8008912:	4428      	add	r0, r5
 8008914:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8008918:	fb05 6e00 	mla	lr, r5, r0, r6
 800891c:	eb0e 000b 	add.w	r0, lr, fp
 8008920:	4586      	cmp	lr, r0
 8008922:	61f8      	str	r0, [r7, #28]
 8008924:	f080 80a5 	bcs.w	8008a72 <forward_conv2d_nl_pool+0xa86>
 8008928:	0092      	lsls	r2, r2, #2
 800892a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800892e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008930:	fb01 f10b 	mul.w	r1, r1, fp
 8008934:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8008938:	f024 0803 	bic.w	r8, r4, #3
 800893c:	2a00      	cmp	r2, #0
 800893e:	f000 8098 	beq.w	8008a72 <forward_conv2d_nl_pool+0xa86>
 8008942:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8008946:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008948:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800894c:	0892      	lsrs	r2, r2, #2
 800894e:	3201      	adds	r2, #1
 8008950:	4401      	add	r1, r0
 8008952:	fb02 f00a 	mul.w	r0, r2, sl
 8008956:	6638      	str	r0, [r7, #96]	; 0x60
 8008958:	0110      	lsls	r0, r2, #4
 800895a:	0092      	lsls	r2, r2, #2
 800895c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800895e:	1aca      	subs	r2, r1, r3
 8008960:	613a      	str	r2, [r7, #16]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	6738      	str	r0, [r7, #112]	; 0x70
 8008966:	4413      	add	r3, r2
 8008968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800896c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008972:	4413      	add	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	4413      	add	r3, r2
 800897e:	677b      	str	r3, [r7, #116]	; 0x74
 8008980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008984:	ecf3 6a01 	vldmia	r3!, {s13}
 8008988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800898c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008990:	2b00      	cmp	r3, #0
 8008992:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008996:	dd57      	ble.n	8008a48 <forward_conv2d_nl_pool+0xa5c>
 8008998:	4676      	mov	r6, lr
 800899a:	f04f 0c00 	mov.w	ip, #0
 800899e:	f1b8 0f00 	cmp.w	r8, #0
 80089a2:	f340 8087 	ble.w	8008ab4 <forward_conv2d_nl_pool+0xac8>
 80089a6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80089aa:	f109 0310 	add.w	r3, r9, #16
 80089ae:	18b1      	adds	r1, r6, r2
 80089b0:	2000      	movs	r0, #0
 80089b2:	4632      	mov	r2, r6
 80089b4:	eb02 050b 	add.w	r5, r2, fp
 80089b8:	ed95 7a00 	vldr	s14, [r5]
 80089bc:	ed53 7a03 	vldr	s15, [r3, #-12]
 80089c0:	ed92 4a00 	vldr	s8, [r2]
 80089c4:	ed53 4a04 	vldr	s9, [r3, #-16]
 80089c8:	ed91 5a00 	vldr	s10, [r1]
 80089cc:	ed53 5a02 	vldr	s11, [r3, #-8]
 80089d0:	ed13 6a01 	vldr	s12, [r3, #-4]
 80089d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d8:	eb01 050b 	add.w	r5, r1, fp
 80089dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089e0:	3004      	adds	r0, #4
 80089e2:	4540      	cmp	r0, r8
 80089e4:	ed95 7a00 	vldr	s14, [r5]
 80089e8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089ec:	4452      	add	r2, sl
 80089ee:	4451      	add	r1, sl
 80089f0:	f103 0310 	add.w	r3, r3, #16
 80089f4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80089f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80089fc:	dbda      	blt.n	80089b4 <forward_conv2d_nl_pool+0x9c8>
 80089fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a00:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008a02:	441e      	add	r6, r3
 8008a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a06:	4499      	add	r9, r3
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	da11      	bge.n	8008a30 <forward_conv2d_nl_pool+0xa44>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	4633      	mov	r3, r6
 8008a10:	4649      	mov	r1, r9
 8008a12:	edd3 7a00 	vldr	s15, [r3]
 8008a16:	ecb1 7a01 	vldmia	r1!, {s14}
 8008a1a:	3201      	adds	r2, #1
 8008a1c:	42a2      	cmp	r2, r4
 8008a1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008a22:	445b      	add	r3, fp
 8008a24:	d1f5      	bne.n	8008a12 <forward_conv2d_nl_pool+0xa26>
 8008a26:	1a20      	subs	r0, r4, r0
 8008a28:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8008a2c:	fb00 660b 	mla	r6, r0, fp, r6
 8008a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a34:	441e      	add	r6, r3
 8008a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a3a:	4499      	add	r9, r3
 8008a3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a40:	f10c 0c01 	add.w	ip, ip, #1
 8008a44:	4563      	cmp	r3, ip
 8008a46:	d1aa      	bne.n	800899e <forward_conv2d_nl_pool+0x9b2>
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	4499      	add	r9, r3
 8008a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a4e:	ece3 6a01 	vstmia	r3!, {s13}
 8008a52:	677b      	str	r3, [r7, #116]	; 0x74
 8008a54:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d191      	bne.n	8008980 <forward_conv2d_nl_pool+0x994>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	1a9b      	subs	r3, r3, r2
 8008a62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f10e 0e04 	add.w	lr, lr, #4
 8008a6c:	459e      	cmp	lr, r3
 8008a6e:	f4ff af7d 	bcc.w	800896c <forward_conv2d_nl_pool+0x980>
 8008a72:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008a76:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a7e:	440a      	add	r2, r1
 8008a80:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008a84:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008a88:	4608      	mov	r0, r1
 8008a8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008a8e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8008a92:	4410      	add	r0, r2
 8008a94:	1a8a      	subs	r2, r1, r2
 8008a96:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008a9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008a9e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008aaa:	f47f aefd 	bne.w	80088a8 <forward_conv2d_nl_pool+0x8bc>
 8008aae:	e5e7      	b.n	8008680 <forward_conv2d_nl_pool+0x694>
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	e63f      	b.n	8008734 <forward_conv2d_nl_pool+0x748>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e7a7      	b.n	8008a08 <forward_conv2d_nl_pool+0xa1c>
 8008ab8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008abc:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008ac0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ac4:	1b19      	subs	r1, r3, r4
 8008ac6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008aca:	eef0 3a48 	vmov.f32	s7, s16
 8008ace:	1b1a      	subs	r2, r3, r4
 8008ad0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008ad4:	e71a      	b.n	800890c <forward_conv2d_nl_pool+0x920>
 8008ad6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8008ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008adc:	460a      	mov	r2, r1
 8008ade:	440b      	add	r3, r1
 8008ae0:	e6ea      	b.n	80088b8 <forward_conv2d_nl_pool+0x8cc>
 8008ae2:	b168      	cbz	r0, 8008b00 <forward_conv2d_nl_pool+0xb14>
 8008ae4:	6882      	ldr	r2, [r0, #8]
 8008ae6:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8008aea:	2201      	movs	r2, #1
 8008aec:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008af0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008af4:	f7ff bb29 	b.w	800814a <forward_conv2d_nl_pool+0x15e>
 8008af8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008afc:	f7ff bb08 	b.w	8008110 <forward_conv2d_nl_pool+0x124>
 8008b00:	2201      	movs	r2, #1
 8008b02:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008b06:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008b0a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008b0e:	f7ff bb1c 	b.w	800814a <forward_conv2d_nl_pool+0x15e>
 8008b12:	3118      	adds	r1, #24
 8008b14:	d008      	beq.n	8008b28 <forward_conv2d_nl_pool+0xb3c>
 8008b16:	462a      	mov	r2, r5
 8008b18:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f7ff ba93 	b.w	8008048 <forward_conv2d_nl_pool+0x5c>
 8008b22:	4691      	mov	r9, r2
 8008b24:	f7ff ba7d 	b.w	8008022 <forward_conv2d_nl_pool+0x36>
 8008b28:	68cb      	ldr	r3, [r1, #12]
 8008b2a:	deff      	udf	#255	; 0xff
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	deff      	udf	#255	; 0xff
 8008b32:	4694      	mov	ip, r2
 8008b34:	f7ff ba6c 	b.w	8008010 <forward_conv2d_nl_pool+0x24>
 8008b38:	6873      	ldr	r3, [r6, #4]
 8008b3a:	deff      	udf	#255	; 0xff
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f7ff ba82 	b.w	8008046 <forward_conv2d_nl_pool+0x5a>
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	deff      	udf	#255	; 0xff
 8008b46:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	f43f ab60 	beq.w	8008210 <forward_conv2d_nl_pool+0x224>
 8008b50:	2e03      	cmp	r6, #3
 8008b52:	d9eb      	bls.n	8008b2c <forward_conv2d_nl_pool+0xb40>
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b58:	b323      	cbz	r3, 8008ba4 <forward_conv2d_nl_pool+0xbb8>
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	b313      	cbz	r3, 8008ba4 <forward_conv2d_nl_pool+0xbb8>
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008b64:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008b6e:	9000      	str	r0, [sp, #0]
 8008b70:	4673      	mov	r3, lr
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7ff f9ea 	bl	8007f4c <ai_dict_decompress_f32>
 8008b78:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008b7c:	b17c      	cbz	r4, 8008b9e <forward_conv2d_nl_pool+0xbb2>
 8008b7e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8008b82:	881e      	ldrh	r6, [r3, #0]
 8008b84:	f7ff bb44 	b.w	8008210 <forward_conv2d_nl_pool+0x224>
 8008b88:	b178      	cbz	r0, 8008baa <forward_conv2d_nl_pool+0xbbe>
 8008b8a:	6881      	ldr	r1, [r0, #8]
 8008b8c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008b90:	2201      	movs	r2, #1
 8008b92:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008b96:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008b9a:	f7ff bad6 	b.w	800814a <forward_conv2d_nl_pool+0x15e>
 8008b9e:	881e      	ldrh	r6, [r3, #0]
 8008ba0:	f7ff bb36 	b.w	8008210 <forward_conv2d_nl_pool+0x224>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	deff      	udf	#255	; 0xff
 8008baa:	2201      	movs	r2, #1
 8008bac:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8008bb0:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8008bb4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008bb8:	f7ff bac7 	b.w	800814a <forward_conv2d_nl_pool+0x15e>
 8008bbc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008bbe:	2801      	cmp	r0, #1
 8008bc0:	f47f ac10 	bne.w	80083e4 <forward_conv2d_nl_pool+0x3f8>
 8008bc4:	1ad2      	subs	r2, r2, r3
 8008bc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bc8:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8008bcc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bd2:	fb00 4101 	mla	r1, r0, r1, r4
 8008bd6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008bda:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8008bde:	f080 81c4 	bcs.w	8008f6a <forward_conv2d_nl_pool+0xf7e>
 8008be2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008be6:	2a00      	cmp	r2, #0
 8008be8:	f43f ad4a 	beq.w	8008680 <forward_conv2d_nl_pool+0x694>
 8008bec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008bf0:	fb02 f303 	mul.w	r3, r2, r3
 8008bf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bf6:	677b      	str	r3, [r7, #116]	; 0x74
 8008bf8:	1a9b      	subs	r3, r3, r2
 8008bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8008bfc:	188b      	adds	r3, r1, r2
 8008bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c10:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8008c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 8133 	beq.w	8008e92 <forward_conv2d_nl_pool+0xea6>
 8008c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c30:	ed93 6a00 	vldr	s12, [r3]
 8008c34:	3304      	adds	r3, #4
 8008c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c3a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 8101 	beq.w	8008e46 <forward_conv2d_nl_pool+0xe5a>
 8008c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c48:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008c4c:	eb03 0802 	add.w	r8, r3, r2
 8008c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c6a:	f04f 0b00 	mov.w	fp, #0
 8008c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f2c0 8104 	blt.w	8008e80 <forward_conv2d_nl_pool+0xe94>
 8008c78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008c7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8008c84:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008c88:	eb02 0c04 	add.w	ip, r2, r4
 8008c8c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008c90:	4540      	cmp	r0, r8
 8008c92:	bf94      	ite	ls
 8008c94:	ebc3 0300 	rsbls	r3, r3, r0
 8008c98:	ebc3 0308 	rsbhi	r3, r3, r8
 8008c9c:	eba2 0903 	sub.w	r9, r2, r3
 8008ca0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008ca4:	1ac4      	subs	r4, r0, r3
 8008ca6:	fb03 f302 	mul.w	r3, r3, r2
 8008caa:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008cae:	2a00      	cmp	r2, #0
 8008cb0:	f340 80e3 	ble.w	8008e7a <forward_conv2d_nl_pool+0xe8e>
 8008cb4:	f023 050f 	bic.w	r5, r3, #15
 8008cb8:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8008cbc:	1e68      	subs	r0, r5, #1
 8008cbe:	0900      	lsrs	r0, r0, #4
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	fb06 f204 	mul.w	r2, r6, r4
 8008cc6:	673a      	str	r2, [r7, #112]	; 0x70
 8008cc8:	0102      	lsls	r2, r0, #4
 8008cca:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ccc:	fb06 f909 	mul.w	r9, r6, r9
 8008cd0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008cd4:	eef0 6a46 	vmov.f32	s13, s12
 8008cd8:	f04f 0e00 	mov.w	lr, #0
 8008cdc:	4662      	mov	r2, ip
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	f340 80c9 	ble.w	8008e76 <forward_conv2d_nl_pool+0xe8a>
 8008ce4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008ce8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008cec:	2600      	movs	r6, #0
 8008cee:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8008cf2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008cf6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8008cfa:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8008cfe:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8008d02:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8008d06:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8008d0a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008d0e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8008d12:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8008d16:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008d1a:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8008d1e:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8008d22:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8008d26:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8008d2a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8008d2e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8008d32:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8008d36:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8008d3a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8008d3e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8008d42:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008d46:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8008d4a:	ed50 3a04 	vldr	s7, [r0, #-16]
 8008d4e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8008d52:	ed50 4a03 	vldr	s9, [r0, #-12]
 8008d56:	ed14 5a03 	vldr	s10, [r4, #-12]
 8008d5a:	ed50 5a02 	vldr	s11, [r0, #-8]
 8008d5e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008d62:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8008d66:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8008d6a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008d6e:	3610      	adds	r6, #16
 8008d70:	42ae      	cmp	r6, r5
 8008d72:	ed14 fa01 	vldr	s30, [r4, #-4]
 8008d76:	ed50 ea01 	vldr	s29, [r0, #-4]
 8008d7a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008d7e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008d82:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008d86:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008d8a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008d8e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008d92:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008d96:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008d9a:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008d9e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008da2:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008da6:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008daa:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008dae:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008db2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008db6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008dba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008dbe:	db96      	blt.n	8008cee <forward_conv2d_nl_pool+0xd02>
 8008dc0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008dc2:	4451      	add	r1, sl
 8008dc4:	4452      	add	r2, sl
 8008dc6:	4283      	cmp	r3, r0
 8008dc8:	dd0f      	ble.n	8008dea <forward_conv2d_nl_pool+0xdfe>
 8008dca:	4604      	mov	r4, r0
 8008dcc:	468c      	mov	ip, r1
 8008dce:	4616      	mov	r6, r2
 8008dd0:	ecb6 7a01 	vldmia	r6!, {s14}
 8008dd4:	ecfc 7a01 	vldmia	ip!, {s15}
 8008dd8:	3401      	adds	r4, #1
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008de0:	d1f6      	bne.n	8008dd0 <forward_conv2d_nl_pool+0xde4>
 8008de2:	1a18      	subs	r0, r3, r0
 8008de4:	0080      	lsls	r0, r0, #2
 8008de6:	4402      	add	r2, r0
 8008de8:	4401      	add	r1, r0
 8008dea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008dec:	4402      	add	r2, r0
 8008dee:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8008df2:	f10e 0e01 	add.w	lr, lr, #1
 8008df6:	4570      	cmp	r0, lr
 8008df8:	4449      	add	r1, r9
 8008dfa:	f47f af70 	bne.w	8008cde <forward_conv2d_nl_pool+0xcf2>
 8008dfe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e04:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008e08:	edc3 6a00 	vstr	s13, [r3]
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008e12:	440b      	add	r3, r1
 8008e14:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e1a:	4410      	add	r0, r2
 8008e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e1e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8008e22:	4608      	mov	r0, r1
 8008e24:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008e28:	4418      	add	r0, r3
 8008e2a:	1acb      	subs	r3, r1, r3
 8008e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008e34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8008e38:	f10b 0b01 	add.w	fp, fp, #1
 8008e3c:	455b      	cmp	r3, fp
 8008e3e:	eba8 0802 	sub.w	r8, r8, r2
 8008e42:	f47f af14 	bne.w	8008c6e <forward_conv2d_nl_pool+0xc82>
 8008e46:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008e4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e50:	440a      	add	r2, r1
 8008e52:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008e56:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008e5a:	3204      	adds	r2, #4
 8008e5c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008e60:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008e64:	3301      	adds	r3, #1
 8008e66:	429a      	cmp	r2, r3
 8008e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e6c:	f47f aed9 	bne.w	8008c22 <forward_conv2d_nl_pool+0xc36>
 8008e70:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8008e74:	e404      	b.n	8008680 <forward_conv2d_nl_pool+0x694>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e7a5      	b.n	8008dc6 <forward_conv2d_nl_pool+0xdda>
 8008e7a:	eef0 6a46 	vmov.f32	s13, s12
 8008e7e:	e7be      	b.n	8008dfe <forward_conv2d_nl_pool+0xe12>
 8008e80:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008e84:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008e88:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008e8c:	eba8 0303 	sub.w	r3, r8, r3
 8008e90:	e6f6      	b.n	8008c80 <forward_conv2d_nl_pool+0xc94>
 8008e92:	eeb0 6a48 	vmov.f32	s12, s16
 8008e96:	e6d0      	b.n	8008c3a <forward_conv2d_nl_pool+0xc4e>
 8008e98:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008ea6:	4419      	add	r1, r3
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008eae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008eb8:	4413      	add	r3, r2
 8008eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008ebe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	f63f aa68 	bhi.w	800839c <forward_conv2d_nl_pool+0x3b0>
 8008ecc:	e49f      	b.n	800880e <forward_conv2d_nl_pool+0x822>
 8008ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ed2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8008ed6:	699a      	ldr	r2, [r3, #24]
 8008ed8:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8008edc:	68d1      	ldr	r1, [r2, #12]
 8008ede:	6853      	ldr	r3, [r2, #4]
 8008ee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ee2:	fb00 4012 	mls	r0, r0, r2, r4
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4281      	cmp	r1, r0
 8008eea:	bf88      	it	hi
 8008eec:	18c0      	addhi	r0, r0, r3
 8008eee:	4281      	cmp	r1, r0
 8008ef0:	eb01 0203 	add.w	r2, r1, r3
 8008ef4:	d216      	bcs.n	8008f24 <forward_conv2d_nl_pool+0xf38>
 8008ef6:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 8008efa:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8008efe:	42a1      	cmp	r1, r4
 8008f00:	d010      	beq.n	8008f24 <forward_conv2d_nl_pool+0xf38>
 8008f02:	4290      	cmp	r0, r2
 8008f04:	d20e      	bcs.n	8008f24 <forward_conv2d_nl_pool+0xf38>
 8008f06:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8008f0a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8008f0e:	f850 3b04 	ldr.w	r3, [r0], #4
 8008f12:	f841 3b04 	str.w	r3, [r1], #4
 8008f16:	69a2      	ldr	r2, [r4, #24]
 8008f18:	6853      	ldr	r3, [r2, #4]
 8008f1a:	68d2      	ldr	r2, [r2, #12]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	441a      	add	r2, r3
 8008f20:	4282      	cmp	r2, r0
 8008f22:	d8f4      	bhi.n	8008f0e <forward_conv2d_nl_pool+0xf22>
 8008f24:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8008f28:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8008f2c:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8008f30:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8008f32:	4420      	add	r0, r4
 8008f34:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8008f38:	1a40      	subs	r0, r0, r1
 8008f3a:	4421      	add	r1, r4
 8008f3c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8008f40:	442c      	add	r4, r5
 8008f42:	b209      	sxth	r1, r1
 8008f44:	b200      	sxth	r0, r0
 8008f46:	4294      	cmp	r4, r2
 8008f48:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8008f4c:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8008f50:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008f54:	4621      	mov	r1, r4
 8008f56:	f4ff abfb 	bcc.w	8008750 <forward_conv2d_nl_pool+0x764>
 8008f5a:	425b      	negs	r3, r3
 8008f5c:	4419      	add	r1, r3
 8008f5e:	4291      	cmp	r1, r2
 8008f60:	d2fc      	bcs.n	8008f5c <forward_conv2d_nl_pool+0xf70>
 8008f62:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8008f66:	f7ff bbf3 	b.w	8008750 <forward_conv2d_nl_pool+0x764>
 8008f6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f6e:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8008f72:	320a      	adds	r2, #10
 8008f74:	f022 0207 	bic.w	r2, r2, #7
 8008f78:	ebad 0d02 	sub.w	sp, sp, r2
 8008f7c:	aa0a      	add	r2, sp, #40	; 0x28
 8008f7e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8008f82:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	f000 8153 	beq.w	8009232 <forward_conv2d_nl_pool+0x1246>
 8008f8c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008f90:	f8c7 b01c 	str.w	fp, [r7, #28]
 8008f94:	fb02 f303 	mul.w	r3, r2, r3
 8008f98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fa4:	f8c7 a014 	str.w	sl, [r7, #20]
 8008fa8:	4413      	add	r3, r2
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008fcc:	b13b      	cbz	r3, 8008fde <forward_conv2d_nl_pool+0xff2>
 8008fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fd2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008fd6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008fda:	f000 ffa3 	bl	8009f24 <memcpy>
 8008fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 8137 	beq.w	8009256 <forward_conv2d_nl_pool+0x126a>
 8008fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fea:	ed93 6a00 	vldr	s12, [r3]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ff2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 8101 	beq.w	80091fe <forward_conv2d_nl_pool+0x1212>
 8008ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009000:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009004:	eb03 0802 	add.w	r8, r3, r2
 8009008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800900a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009018:	677b      	str	r3, [r7, #116]	; 0x74
 800901a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800901e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009022:	f04f 0b00 	mov.w	fp, #0
 8009026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800902a:	2b00      	cmp	r3, #0
 800902c:	f2c0 810a 	blt.w	8009244 <forward_conv2d_nl_pool+0x1258>
 8009030:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009036:	2300      	movs	r3, #0
 8009038:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800903c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009040:	eb02 0c04 	add.w	ip, r2, r4
 8009044:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009048:	4540      	cmp	r0, r8
 800904a:	bf94      	ite	ls
 800904c:	ebc3 0300 	rsbls	r3, r3, r0
 8009050:	ebc3 0308 	rsbhi	r3, r3, r8
 8009054:	eba2 0903 	sub.w	r9, r2, r3
 8009058:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800905c:	1ac4      	subs	r4, r0, r3
 800905e:	fb03 f302 	mul.w	r3, r3, r2
 8009062:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009066:	2a00      	cmp	r2, #0
 8009068:	f340 80e9 	ble.w	800923e <forward_conv2d_nl_pool+0x1252>
 800906c:	f023 050f 	bic.w	r5, r3, #15
 8009070:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8009074:	1e68      	subs	r0, r5, #1
 8009076:	0900      	lsrs	r0, r0, #4
 8009078:	3001      	adds	r0, #1
 800907a:	fb06 f204 	mul.w	r2, r6, r4
 800907e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009080:	0102      	lsls	r2, r0, #4
 8009082:	62ba      	str	r2, [r7, #40]	; 0x28
 8009084:	fb06 f909 	mul.w	r9, r6, r9
 8009088:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800908c:	eef0 6a46 	vmov.f32	s13, s12
 8009090:	f04f 0e00 	mov.w	lr, #0
 8009094:	4662      	mov	r2, ip
 8009096:	2d00      	cmp	r5, #0
 8009098:	f340 80cf 	ble.w	800923a <forward_conv2d_nl_pool+0x124e>
 800909c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80090a0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80090a4:	2600      	movs	r6, #0
 80090a6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80090aa:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80090ae:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80090b2:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80090b6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80090ba:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80090be:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80090c2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80090c6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80090ca:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80090ce:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80090d2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80090d6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80090da:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80090de:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80090e2:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 80090e6:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80090ea:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80090ee:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80090f2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80090f6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80090fa:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80090fe:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8009102:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009106:	ed14 4a04 	vldr	s8, [r4, #-16]
 800910a:	ed54 4a03 	vldr	s9, [r4, #-12]
 800910e:	ed10 5a03 	vldr	s10, [r0, #-12]
 8009112:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009116:	ed14 7a02 	vldr	s14, [r4, #-8]
 800911a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800911e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8009122:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009126:	3610      	adds	r6, #16
 8009128:	42ae      	cmp	r6, r5
 800912a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800912e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8009132:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009136:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800913a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800913e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009142:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009146:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800914a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800914e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009152:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009156:	eee0 7a81 	vfma.f32	s15, s1, s2
 800915a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800915e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009162:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009166:	eee4 7a85 	vfma.f32	s15, s9, s10
 800916a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800916e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009172:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009176:	db96      	blt.n	80090a6 <forward_conv2d_nl_pool+0x10ba>
 8009178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800917a:	4451      	add	r1, sl
 800917c:	4452      	add	r2, sl
 800917e:	4283      	cmp	r3, r0
 8009180:	dd0f      	ble.n	80091a2 <forward_conv2d_nl_pool+0x11b6>
 8009182:	4604      	mov	r4, r0
 8009184:	468c      	mov	ip, r1
 8009186:	4616      	mov	r6, r2
 8009188:	ecb6 7a01 	vldmia	r6!, {s14}
 800918c:	ecfc 7a01 	vldmia	ip!, {s15}
 8009190:	3401      	adds	r4, #1
 8009192:	42a3      	cmp	r3, r4
 8009194:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009198:	d1f6      	bne.n	8009188 <forward_conv2d_nl_pool+0x119c>
 800919a:	1a18      	subs	r0, r3, r0
 800919c:	0080      	lsls	r0, r0, #2
 800919e:	4402      	add	r2, r0
 80091a0:	4401      	add	r1, r0
 80091a2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80091a4:	4402      	add	r2, r0
 80091a6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80091aa:	f10e 0e01 	add.w	lr, lr, #1
 80091ae:	4570      	cmp	r0, lr
 80091b0:	4449      	add	r1, r9
 80091b2:	f47f af70 	bne.w	8009096 <forward_conv2d_nl_pool+0x10aa>
 80091b6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80091ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80091c0:	edc3 6a00 	vstr	s13, [r3]
 80091c4:	4608      	mov	r0, r1
 80091c6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80091ca:	440b      	add	r3, r1
 80091cc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80091d0:	677b      	str	r3, [r7, #116]	; 0x74
 80091d2:	4410      	add	r0, r2
 80091d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091d6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80091da:	4608      	mov	r0, r1
 80091dc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80091e0:	4418      	add	r0, r3
 80091e2:	1acb      	subs	r3, r1, r3
 80091e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80091ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80091f0:	f10b 0b01 	add.w	fp, fp, #1
 80091f4:	455b      	cmp	r3, fp
 80091f6:	eba8 0802 	sub.w	r8, r8, r2
 80091fa:	f47f af14 	bne.w	8009026 <forward_conv2d_nl_pool+0x103a>
 80091fe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009202:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8009206:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800920a:	440a      	add	r2, r1
 800920c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009210:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009214:	3204      	adds	r2, #4
 8009216:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800921a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800921e:	3301      	adds	r3, #1
 8009220:	429a      	cmp	r2, r3
 8009222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009226:	f47f aecf 	bne.w	8008fc8 <forward_conv2d_nl_pool+0xfdc>
 800922a:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800922e:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8009232:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8009236:	f7ff ba23 	b.w	8008680 <forward_conv2d_nl_pool+0x694>
 800923a:	2000      	movs	r0, #0
 800923c:	e79f      	b.n	800917e <forward_conv2d_nl_pool+0x1192>
 800923e:	eef0 6a46 	vmov.f32	s13, s12
 8009242:	e7b8      	b.n	80091b6 <forward_conv2d_nl_pool+0x11ca>
 8009244:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009248:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800924c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009250:	eba8 0303 	sub.w	r3, r8, r3
 8009254:	e6f0      	b.n	8009038 <forward_conv2d_nl_pool+0x104c>
 8009256:	eeb0 6a48 	vmov.f32	s12, s16
 800925a:	e6ca      	b.n	8008ff2 <forward_conv2d_nl_pool+0x1006>

0800925c <forward_dense>:
 800925c:	6983      	ldr	r3, [r0, #24]
 800925e:	881a      	ldrh	r2, [r3, #0]
 8009260:	2a00      	cmp	r2, #0
 8009262:	f000 80b5 	beq.w	80093d0 <forward_dense+0x174>
 8009266:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926a:	ed2d 8b10 	vpush	{d8-d15}
 800926e:	685f      	ldr	r7, [r3, #4]
 8009270:	687e      	ldr	r6, [r7, #4]
 8009272:	b091      	sub	sp, #68	; 0x44
 8009274:	b106      	cbz	r6, 8009278 <forward_dense+0x1c>
 8009276:	6836      	ldr	r6, [r6, #0]
 8009278:	2a01      	cmp	r2, #1
 800927a:	f240 80a6 	bls.w	80093ca <forward_dense+0x16e>
 800927e:	693d      	ldr	r5, [r7, #16]
 8009280:	b105      	cbz	r5, 8009284 <forward_dense+0x28>
 8009282:	682d      	ldr	r5, [r5, #0]
 8009284:	2a02      	cmp	r2, #2
 8009286:	f000 80a5 	beq.w	80093d4 <forward_dense+0x178>
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 821b 	beq.w	80096c8 <forward_dense+0x46c>
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	9106      	str	r1, [sp, #24]
 8009296:	f117 0118 	adds.w	r1, r7, #24
 800929a:	f000 80c9 	beq.w	8009430 <forward_dense+0x1d4>
 800929e:	8b39      	ldrh	r1, [r7, #24]
 80092a0:	2901      	cmp	r1, #1
 80092a2:	f240 820e 	bls.w	80096c2 <forward_dense+0x466>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 80c4 	beq.w	8009434 <forward_dense+0x1d8>
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	9307      	str	r3, [sp, #28]
 80092b0:	9b06      	ldr	r3, [sp, #24]
 80092b2:	68ec      	ldr	r4, [r5, #12]
 80092b4:	6998      	ldr	r0, [r3, #24]
 80092b6:	68f1      	ldr	r1, [r6, #12]
 80092b8:	6803      	ldr	r3, [r0, #0]
 80092ba:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80092be:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 80092c2:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 80092c6:	f3c3 5141 	ubfx	r1, r3, #21, #2
 80092ca:	fa49 f101 	asr.w	r1, r9, r1
 80092ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80092d0:	2a03      	cmp	r2, #3
 80092d2:	fb0e f10c 	mul.w	r1, lr, ip
 80092d6:	6864      	ldr	r4, [r4, #4]
 80092d8:	9108      	str	r1, [sp, #32]
 80092da:	f000 81de 	beq.w	800969a <forward_dense+0x43e>
 80092de:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80092e0:	b117      	cbz	r7, 80092e8 <forward_dense+0x8c>
 80092e2:	683f      	ldr	r7, [r7, #0]
 80092e4:	b107      	cbz	r7, 80092e8 <forward_dense+0x8c>
 80092e6:	69bf      	ldr	r7, [r7, #24]
 80092e8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	f000 81d7 	beq.w	80096a0 <forward_dense+0x444>
 80092f2:	2b08      	cmp	r3, #8
 80092f4:	f000 81d4 	beq.w	80096a0 <forward_dense+0x444>
 80092f8:	f04f 0a00 	mov.w	sl, #0
 80092fc:	69ab      	ldr	r3, [r5, #24]
 80092fe:	69b2      	ldr	r2, [r6, #24]
 8009300:	6899      	ldr	r1, [r3, #8]
 8009302:	9b06      	ldr	r3, [sp, #24]
 8009304:	9104      	str	r1, [sp, #16]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	6897      	ldr	r7, [r2, #8]
 800930a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800930e:	00a3      	lsls	r3, r4, #2
 8009310:	9309      	str	r3, [sp, #36]	; 0x24
 8009312:	18ce      	adds	r6, r1, r3
 8009314:	9b08      	ldr	r3, [sp, #32]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d052      	beq.n	80093c0 <forward_dense+0x164>
 800931a:	f1a8 0310 	sub.w	r3, r8, #16
 800931e:	091b      	lsrs	r3, r3, #4
 8009320:	3301      	adds	r3, #1
 8009322:	019b      	lsls	r3, r3, #6
 8009324:	930c      	str	r3, [sp, #48]	; 0x30
 8009326:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800932a:	930a      	str	r3, [sp, #40]	; 0x28
 800932c:	2300      	movs	r3, #0
 800932e:	9305      	str	r3, [sp, #20]
 8009330:	eddf aace 	vldr	s21, [pc, #824]	; 800966c <forward_dense+0x410>
 8009334:	f008 030f 	and.w	r3, r8, #15
 8009338:	930d      	str	r3, [sp, #52]	; 0x34
 800933a:	9b06      	ldr	r3, [sp, #24]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	689d      	ldr	r5, [r3, #8]
 8009340:	9b07      	ldr	r3, [sp, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 818f 	beq.w	8009666 <forward_dense+0x40a>
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	689c      	ldr	r4, [r3, #8]
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	f1ba 0f00 	cmp.w	sl, #0
 8009352:	d071      	beq.n	8009438 <forward_dense+0x1dc>
 8009354:	42b3      	cmp	r3, r6
 8009356:	d229      	bcs.n	80093ac <forward_dense+0x150>
 8009358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800935a:	469b      	mov	fp, r3
 800935c:	ab0f      	add	r3, sp, #60	; 0x3c
 800935e:	9303      	str	r3, [sp, #12]
 8009360:	2a04      	cmp	r2, #4
 8009362:	4633      	mov	r3, r6
 8009364:	4646      	mov	r6, r8
 8009366:	4698      	mov	r8, r3
 8009368:	d037      	beq.n	80093da <forward_dense+0x17e>
 800936a:	2c00      	cmp	r4, #0
 800936c:	f000 8180 	beq.w	8009670 <forward_dense+0x414>
 8009370:	f8d4 c000 	ldr.w	ip, [r4]
 8009374:	9803      	ldr	r0, [sp, #12]
 8009376:	9600      	str	r6, [sp, #0]
 8009378:	463b      	mov	r3, r7
 800937a:	4629      	mov	r1, r5
 800937c:	4652      	mov	r2, sl
 800937e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009382:	f7fe fc57 	bl	8007c34 <ai_dict8_dot_array_f32>
 8009386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009388:	f84b 3b04 	str.w	r3, [fp], #4
 800938c:	45c3      	cmp	fp, r8
 800938e:	f104 0404 	add.w	r4, r4, #4
 8009392:	444d      	add	r5, r9
 8009394:	d3e9      	bcc.n	800936a <forward_dense+0x10e>
 8009396:	4643      	mov	r3, r8
 8009398:	46b0      	mov	r8, r6
 800939a:	461e      	mov	r6, r3
 800939c:	9a04      	ldr	r2, [sp, #16]
 800939e:	43d3      	mvns	r3, r2
 80093a0:	4433      	add	r3, r6
 80093a2:	f023 0303 	bic.w	r3, r3, #3
 80093a6:	3304      	adds	r3, #4
 80093a8:	18d3      	adds	r3, r2, r3
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093ae:	9b05      	ldr	r3, [sp, #20]
 80093b0:	4417      	add	r7, r2
 80093b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b4:	4416      	add	r6, r2
 80093b6:	9a08      	ldr	r2, [sp, #32]
 80093b8:	3301      	adds	r3, #1
 80093ba:	4293      	cmp	r3, r2
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	d1bc      	bne.n	800933a <forward_dense+0xde>
 80093c0:	b011      	add	sp, #68	; 0x44
 80093c2:	ecbd 8b10 	vpop	{d8-d15}
 80093c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ca:	2300      	movs	r3, #0
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	deff      	udf	#255	; 0xff
 80093d0:	6853      	ldr	r3, [r2, #4]
 80093d2:	deff      	udf	#255	; 0xff
 80093d4:	2300      	movs	r3, #0
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	deff      	udf	#255	; 0xff
 80093da:	b1a4      	cbz	r4, 8009406 <forward_dense+0x1aa>
 80093dc:	f8d4 c000 	ldr.w	ip, [r4]
 80093e0:	9803      	ldr	r0, [sp, #12]
 80093e2:	9600      	str	r6, [sp, #0]
 80093e4:	463b      	mov	r3, r7
 80093e6:	4629      	mov	r1, r5
 80093e8:	4652      	mov	r2, sl
 80093ea:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80093ee:	f7fe fcef 	bl	8007dd0 <ai_dict4_dot_array_f32>
 80093f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093f4:	f84b 3b04 	str.w	r3, [fp], #4
 80093f8:	45c3      	cmp	fp, r8
 80093fa:	f104 0404 	add.w	r4, r4, #4
 80093fe:	444d      	add	r5, r9
 8009400:	d2c9      	bcs.n	8009396 <forward_dense+0x13a>
 8009402:	2c00      	cmp	r4, #0
 8009404:	d1ea      	bne.n	80093dc <forward_dense+0x180>
 8009406:	4634      	mov	r4, r6
 8009408:	4646      	mov	r6, r8
 800940a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800940e:	9400      	str	r4, [sp, #0]
 8009410:	463b      	mov	r3, r7
 8009412:	4629      	mov	r1, r5
 8009414:	4652      	mov	r2, sl
 8009416:	4640      	mov	r0, r8
 8009418:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800941c:	f7fe fcd8 	bl	8007dd0 <ai_dict4_dot_array_f32>
 8009420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009422:	f84b 3b04 	str.w	r3, [fp], #4
 8009426:	45b3      	cmp	fp, r6
 8009428:	444d      	add	r5, r9
 800942a:	d3f0      	bcc.n	800940e <forward_dense+0x1b2>
 800942c:	46a0      	mov	r8, r4
 800942e:	e7b5      	b.n	800939c <forward_dense+0x140>
 8009430:	9107      	str	r1, [sp, #28]
 8009432:	e73d      	b.n	80092b0 <forward_dense+0x54>
 8009434:	9307      	str	r3, [sp, #28]
 8009436:	e73b      	b.n	80092b0 <forward_dense+0x54>
 8009438:	42b3      	cmp	r3, r6
 800943a:	d2b7      	bcs.n	80093ac <forward_dense+0x150>
 800943c:	4618      	mov	r0, r3
 800943e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009440:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8009444:	eb07 0c03 	add.w	ip, r7, r3
 8009448:	469e      	mov	lr, r3
 800944a:	2c00      	cmp	r4, #0
 800944c:	f000 80ff 	beq.w	800964e <forward_dense+0x3f2>
 8009450:	f1b8 0f0f 	cmp.w	r8, #15
 8009454:	edd4 fa00 	vldr	s31, [r4]
 8009458:	eddf 6a84 	vldr	s13, [pc, #528]	; 800966c <forward_dense+0x410>
 800945c:	f104 0404 	add.w	r4, r4, #4
 8009460:	f240 80fd 	bls.w	800965e <forward_dense+0x402>
 8009464:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009468:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800946c:	4641      	mov	r1, r8
 800946e:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8009472:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009476:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800947a:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800947e:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8009482:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8009486:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800948a:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800948e:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8009492:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8009496:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800949a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800949e:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 80094a2:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 80094a6:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 80094aa:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 80094ae:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 80094b2:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 80094b6:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80094ba:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 80094be:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80094c2:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 80094c6:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80094ca:	ed12 4a04 	vldr	s8, [r2, #-16]
 80094ce:	ed53 4a04 	vldr	s9, [r3, #-16]
 80094d2:	ed13 5a03 	vldr	s10, [r3, #-12]
 80094d6:	ed52 5a03 	vldr	s11, [r2, #-12]
 80094da:	ed13 6a02 	vldr	s12, [r3, #-8]
 80094de:	ed12 7a02 	vldr	s14, [r2, #-8]
 80094e2:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80094e6:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80094ea:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80094ee:	3910      	subs	r1, #16
 80094f0:	290f      	cmp	r1, #15
 80094f2:	ed52 ea01 	vldr	s29, [r2, #-4]
 80094f6:	ed13 ea01 	vldr	s28, [r3, #-4]
 80094fa:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80094fe:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009502:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009506:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800950a:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800950e:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8009512:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009516:	eee8 7a88 	vfma.f32	s15, s17, s16
 800951a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800951e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009522:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009526:	eee3 7a23 	vfma.f32	s15, s6, s7
 800952a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800952e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009532:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009536:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800953a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800953e:	d896      	bhi.n	800946e <forward_dense+0x212>
 8009540:	eb05 010e 	add.w	r1, r5, lr
 8009544:	465b      	mov	r3, fp
 8009546:	4662      	mov	r2, ip
 8009548:	2b00      	cmp	r3, #0
 800954a:	d075      	beq.n	8009638 <forward_dense+0x3dc>
 800954c:	ed91 7a00 	vldr	s14, [r1]
 8009550:	edd2 7a00 	vldr	s15, [r2]
 8009554:	2b01      	cmp	r3, #1
 8009556:	eee7 6a27 	vfma.f32	s13, s14, s15
 800955a:	d06d      	beq.n	8009638 <forward_dense+0x3dc>
 800955c:	ed91 7a01 	vldr	s14, [r1, #4]
 8009560:	edd2 7a01 	vldr	s15, [r2, #4]
 8009564:	2b02      	cmp	r3, #2
 8009566:	eee7 6a27 	vfma.f32	s13, s14, s15
 800956a:	d065      	beq.n	8009638 <forward_dense+0x3dc>
 800956c:	ed91 7a02 	vldr	s14, [r1, #8]
 8009570:	edd2 7a02 	vldr	s15, [r2, #8]
 8009574:	2b03      	cmp	r3, #3
 8009576:	eee7 6a27 	vfma.f32	s13, s14, s15
 800957a:	d05d      	beq.n	8009638 <forward_dense+0x3dc>
 800957c:	ed91 7a03 	vldr	s14, [r1, #12]
 8009580:	edd2 7a03 	vldr	s15, [r2, #12]
 8009584:	2b04      	cmp	r3, #4
 8009586:	eee7 6a27 	vfma.f32	s13, s14, s15
 800958a:	d055      	beq.n	8009638 <forward_dense+0x3dc>
 800958c:	ed91 7a04 	vldr	s14, [r1, #16]
 8009590:	edd2 7a04 	vldr	s15, [r2, #16]
 8009594:	2b05      	cmp	r3, #5
 8009596:	eee7 6a27 	vfma.f32	s13, s14, s15
 800959a:	d04d      	beq.n	8009638 <forward_dense+0x3dc>
 800959c:	ed91 7a05 	vldr	s14, [r1, #20]
 80095a0:	edd2 7a05 	vldr	s15, [r2, #20]
 80095a4:	2b06      	cmp	r3, #6
 80095a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095aa:	d045      	beq.n	8009638 <forward_dense+0x3dc>
 80095ac:	ed91 7a06 	vldr	s14, [r1, #24]
 80095b0:	edd2 7a06 	vldr	s15, [r2, #24]
 80095b4:	2b07      	cmp	r3, #7
 80095b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095ba:	d03d      	beq.n	8009638 <forward_dense+0x3dc>
 80095bc:	ed91 7a07 	vldr	s14, [r1, #28]
 80095c0:	edd2 7a07 	vldr	s15, [r2, #28]
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095ca:	d035      	beq.n	8009638 <forward_dense+0x3dc>
 80095cc:	ed91 7a08 	vldr	s14, [r1, #32]
 80095d0:	edd2 7a08 	vldr	s15, [r2, #32]
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095da:	d02d      	beq.n	8009638 <forward_dense+0x3dc>
 80095dc:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80095e0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80095e4:	2b0a      	cmp	r3, #10
 80095e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095ea:	d025      	beq.n	8009638 <forward_dense+0x3dc>
 80095ec:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80095f0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80095f4:	2b0b      	cmp	r3, #11
 80095f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095fa:	d01d      	beq.n	8009638 <forward_dense+0x3dc>
 80095fc:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8009600:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8009604:	2b0c      	cmp	r3, #12
 8009606:	eee7 6a27 	vfma.f32	s13, s14, s15
 800960a:	d015      	beq.n	8009638 <forward_dense+0x3dc>
 800960c:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8009610:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8009614:	2b0d      	cmp	r3, #13
 8009616:	eee7 6a27 	vfma.f32	s13, s14, s15
 800961a:	d00d      	beq.n	8009638 <forward_dense+0x3dc>
 800961c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8009620:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8009624:	2b0e      	cmp	r3, #14
 8009626:	eee7 6a27 	vfma.f32	s13, s14, s15
 800962a:	d005      	beq.n	8009638 <forward_dense+0x3dc>
 800962c:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8009630:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009634:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009638:	444d      	add	r5, r9
 800963a:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800963e:	ece0 6a01 	vstmia	r0!, {s13}
 8009642:	42b0      	cmp	r0, r6
 8009644:	f4bf aeaa 	bcs.w	800939c <forward_dense+0x140>
 8009648:	2c00      	cmp	r4, #0
 800964a:	f47f af01 	bne.w	8009450 <forward_dense+0x1f4>
 800964e:	f1b8 0f0f 	cmp.w	r8, #15
 8009652:	eef0 fa6a 	vmov.f32	s31, s21
 8009656:	eddf 6a05 	vldr	s13, [pc, #20]	; 800966c <forward_dense+0x410>
 800965a:	f63f af03 	bhi.w	8009464 <forward_dense+0x208>
 800965e:	4643      	mov	r3, r8
 8009660:	4629      	mov	r1, r5
 8009662:	463a      	mov	r2, r7
 8009664:	e770      	b.n	8009548 <forward_dense+0x2ec>
 8009666:	461c      	mov	r4, r3
 8009668:	e670      	b.n	800934c <forward_dense+0xf0>
 800966a:	bf00      	nop
 800966c:	00000000 	.word	0x00000000
 8009670:	4634      	mov	r4, r6
 8009672:	4646      	mov	r6, r8
 8009674:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009678:	9400      	str	r4, [sp, #0]
 800967a:	463b      	mov	r3, r7
 800967c:	4629      	mov	r1, r5
 800967e:	4652      	mov	r2, sl
 8009680:	4640      	mov	r0, r8
 8009682:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8009686:	f7fe fad5 	bl	8007c34 <ai_dict8_dot_array_f32>
 800968a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800968c:	f84b 3b04 	str.w	r3, [fp], #4
 8009690:	455e      	cmp	r6, fp
 8009692:	444d      	add	r5, r9
 8009694:	d8f0      	bhi.n	8009678 <forward_dense+0x41c>
 8009696:	46a0      	mov	r8, r4
 8009698:	e680      	b.n	800939c <forward_dense+0x140>
 800969a:	2300      	movs	r3, #0
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	deff      	udf	#255	; 0xff
 80096a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80096a4:	2f00      	cmp	r7, #0
 80096a6:	f43f ae29 	beq.w	80092fc <forward_dense+0xa0>
 80096aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096ae:	f000 fbb5 	bl	8009e1c <ai_array_get_byte_size>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4602      	mov	r2, r0
 80096b6:	4651      	mov	r1, sl
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 fc33 	bl	8009f24 <memcpy>
 80096be:	4682      	mov	sl, r0
 80096c0:	e61c      	b.n	80092fc <forward_dense+0xa0>
 80096c2:	2300      	movs	r3, #0
 80096c4:	9307      	str	r3, [sp, #28]
 80096c6:	e5f3      	b.n	80092b0 <forward_dense+0x54>
 80096c8:	9306      	str	r3, [sp, #24]
 80096ca:	e5e4      	b.n	8009296 <forward_dense+0x3a>

080096cc <nl_func_relu_array_f32>:
 80096cc:	b410      	push	{r4}
 80096ce:	698c      	ldr	r4, [r1, #24]
 80096d0:	6981      	ldr	r1, [r0, #24]
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	6889      	ldr	r1, [r1, #8]
 80096d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80096da:	3a01      	subs	r2, #1
 80096dc:	0092      	lsls	r2, r2, #2
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	d216      	bcs.n	8009710 <nl_func_relu_array_f32+0x44>
 80096e2:	3204      	adds	r2, #4
 80096e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009718 <nl_func_relu_array_f32+0x4c>
 80096e8:	4411      	add	r1, r2
 80096ea:	3304      	adds	r3, #4
 80096ec:	ed53 7a01 	vldr	s15, [r3, #-4]
 80096f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f8:	bfb8      	it	lt
 80096fa:	eef0 7a47 	vmovlt.f32	s15, s14
 80096fe:	ed61 7a01 	vstmdb	r1!, {s15}
 8009702:	68a0      	ldr	r0, [r4, #8]
 8009704:	f1a3 0208 	sub.w	r2, r3, #8
 8009708:	4290      	cmp	r0, r2
 800970a:	f1a3 0304 	sub.w	r3, r3, #4
 800970e:	d9ed      	bls.n	80096ec <nl_func_relu_array_f32+0x20>
 8009710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	00000000 	.word	0x00000000

0800971c <nl_func_sm_array_f32>:
 800971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009720:	ed2d 8b04 	vpush	{d8-d9}
 8009724:	b089      	sub	sp, #36	; 0x24
 8009726:	698f      	ldr	r7, [r1, #24]
 8009728:	6984      	ldr	r4, [r0, #24]
 800972a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800972e:	68bd      	ldr	r5, [r7, #8]
 8009730:	9402      	str	r4, [sp, #8]
 8009732:	4626      	mov	r6, r4
 8009734:	4696      	mov	lr, r2
 8009736:	eba2 020c 	sub.w	r2, r2, ip
 800973a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800973e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	68b6      	ldr	r6, [r6, #8]
 8009744:	ebae 0e04 	sub.w	lr, lr, r4
 8009748:	4295      	cmp	r5, r2
 800974a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800974e:	d354      	bcc.n	80097fa <nl_func_sm_array_f32+0xde>
 8009750:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8009754:	f1cc 0200 	rsb	r2, ip, #0
 8009758:	00a4      	lsls	r4, r4, #2
 800975a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800975e:	9303      	str	r3, [sp, #12]
 8009760:	9204      	str	r2, [sp, #16]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4262      	negs	r2, r4
 8009766:	9205      	str	r2, [sp, #20]
 8009768:	9301      	str	r3, [sp, #4]
 800976a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800976e:	9b02      	ldr	r3, [sp, #8]
 8009770:	9a07      	ldr	r2, [sp, #28]
 8009772:	60bd      	str	r5, [r7, #8]
 8009774:	609e      	str	r6, [r3, #8]
 8009776:	9b06      	ldr	r3, [sp, #24]
 8009778:	6992      	ldr	r2, [r2, #24]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	6894      	ldr	r4, [r2, #8]
 800977e:	9a03      	ldr	r2, [sp, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	2a01      	cmp	r2, #1
 8009784:	ed93 8a00 	vldr	s16, [r3]
 8009788:	d940      	bls.n	800980c <nl_func_sm_array_f32+0xf0>
 800978a:	9901      	ldr	r1, [sp, #4]
 800978c:	1d1a      	adds	r2, r3, #4
 800978e:	eb03 0b01 	add.w	fp, r3, r1
 8009792:	ecf2 7a01 	vldmia	r2!, {s15}
 8009796:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800979a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979e:	bfb8      	it	lt
 80097a0:	eeb0 8a67 	vmovlt.f32	s16, s15
 80097a4:	4593      	cmp	fp, r2
 80097a6:	d1f4      	bne.n	8009792 <nl_func_sm_array_f32+0x76>
 80097a8:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8009818 <nl_func_sm_array_f32+0xfc>
 80097ac:	469a      	mov	sl, r3
 80097ae:	46a1      	mov	r9, r4
 80097b0:	46a0      	mov	r8, r4
 80097b2:	ecba 0a01 	vldmia	sl!, {s0}
 80097b6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80097ba:	f005 f94f 	bl	800ea5c <expf>
 80097be:	45d3      	cmp	fp, sl
 80097c0:	eca8 0a01 	vstmia	r8!, {s0}
 80097c4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80097c8:	d1f3      	bne.n	80097b2 <nl_func_sm_array_f32+0x96>
 80097ca:	eef5 8a40 	vcmp.f32	s17, #0.0
 80097ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d2:	d00b      	beq.n	80097ec <nl_func_sm_array_f32+0xd0>
 80097d4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	441c      	add	r4, r3
 80097dc:	edd9 7a00 	vldr	s15, [r9]
 80097e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097e4:	ece9 7a01 	vstmia	r9!, {s15}
 80097e8:	454c      	cmp	r4, r9
 80097ea:	d1f7      	bne.n	80097dc <nl_func_sm_array_f32+0xc0>
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	441d      	add	r5, r3
 80097f2:	9b05      	ldr	r3, [sp, #20]
 80097f4:	42aa      	cmp	r2, r5
 80097f6:	441e      	add	r6, r3
 80097f8:	d9b9      	bls.n	800976e <nl_func_sm_array_f32+0x52>
 80097fa:	60ba      	str	r2, [r7, #8]
 80097fc:	9a02      	ldr	r2, [sp, #8]
 80097fe:	68d3      	ldr	r3, [r2, #12]
 8009800:	6093      	str	r3, [r2, #8]
 8009802:	b009      	add	sp, #36	; 0x24
 8009804:	ecbd 8b04 	vpop	{d8-d9}
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	2a00      	cmp	r2, #0
 800980e:	d0ed      	beq.n	80097ec <nl_func_sm_array_f32+0xd0>
 8009810:	9a01      	ldr	r2, [sp, #4]
 8009812:	eb03 0b02 	add.w	fp, r3, r2
 8009816:	e7c7      	b.n	80097a8 <nl_func_sm_array_f32+0x8c>
 8009818:	00000000 	.word	0x00000000

0800981c <forward_sm>:
 800981c:	6982      	ldr	r2, [r0, #24]
 800981e:	8813      	ldrh	r3, [r2, #0]
 8009820:	b32b      	cbz	r3, 800986e <forward_sm+0x52>
 8009822:	6852      	ldr	r2, [r2, #4]
 8009824:	6851      	ldr	r1, [r2, #4]
 8009826:	b101      	cbz	r1, 800982a <forward_sm+0xe>
 8009828:	6809      	ldr	r1, [r1, #0]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d91c      	bls.n	8009868 <forward_sm+0x4c>
 800982e:	6913      	ldr	r3, [r2, #16]
 8009830:	b1c3      	cbz	r3, 8009864 <forward_sm+0x48>
 8009832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009834:	6818      	ldr	r0, [r3, #0]
 8009836:	688c      	ldr	r4, [r1, #8]
 8009838:	68c3      	ldr	r3, [r0, #12]
 800983a:	68ce      	ldr	r6, [r1, #12]
 800983c:	685f      	ldr	r7, [r3, #4]
 800983e:	6873      	ldr	r3, [r6, #4]
 8009840:	0a24      	lsrs	r4, r4, #8
 8009842:	b083      	sub	sp, #12
 8009844:	d015      	beq.n	8009872 <forward_sm+0x56>
 8009846:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800984a:	2201      	movs	r2, #1
 800984c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009850:	42a6      	cmp	r6, r4
 8009852:	fb05 f202 	mul.w	r2, r5, r2
 8009856:	d1f9      	bne.n	800984c <forward_sm+0x30>
 8009858:	e9cd 3700 	strd	r3, r7, [sp]
 800985c:	f7ff ff5e 	bl	800971c <nl_func_sm_array_f32>
 8009860:	b003      	add	sp, #12
 8009862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	deff      	udf	#255	; 0xff
 8009868:	2300      	movs	r3, #0
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	deff      	udf	#255	; 0xff
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	deff      	udf	#255	; 0xff
 8009872:	2201      	movs	r2, #1
 8009874:	e9cd 3700 	strd	r3, r7, [sp]
 8009878:	f7ff ff50 	bl	800971c <nl_func_sm_array_f32>
 800987c:	b003      	add	sp, #12
 800987e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009880 <pool_func_mp_array_f32>:
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	b093      	sub	sp, #76	; 0x4c
 8009886:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800988a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800988c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8009890:	68a8      	ldr	r0, [r5, #8]
 8009892:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 8009896:	9508      	str	r5, [sp, #32]
 8009898:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800989c:	9002      	str	r0, [sp, #8]
 800989e:	950d      	str	r5, [sp, #52]	; 0x34
 80098a0:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 80098a4:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 80098a8:	9004      	str	r0, [sp, #16]
 80098aa:	9506      	str	r5, [sp, #24]
 80098ac:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 80098b0:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 80098b4:	9009      	str	r0, [sp, #36]	; 0x24
 80098b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80098b8:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 80098bc:	9200      	str	r2, [sp, #0]
 80098be:	468a      	mov	sl, r1
 80098c0:	4699      	mov	r9, r3
 80098c2:	b95c      	cbnz	r4, 80098dc <pool_func_mp_array_f32+0x5c>
 80098c4:	b950      	cbnz	r0, 80098dc <pool_func_mp_array_f32+0x5c>
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	1a5a      	subs	r2, r3, r1
 80098ca:	9b06      	ldr	r3, [sp, #24]
 80098cc:	9908      	ldr	r1, [sp, #32]
 80098ce:	3a01      	subs	r2, #1
 80098d0:	3b01      	subs	r3, #1
 80098d2:	fb13 2301 	smlabb	r3, r3, r1, r2
 80098d6:	041a      	lsls	r2, r3, #16
 80098d8:	f100 809b 	bmi.w	8009a12 <pool_func_mp_array_f32+0x192>
 80098dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 808b 	beq.w	80099fa <pool_func_mp_array_f32+0x17a>
 80098e4:	9b06      	ldr	r3, [sp, #24]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 8087 	beq.w	80099fa <pool_func_mp_array_f32+0x17a>
 80098ec:	f1b9 0f00 	cmp.w	r9, #0
 80098f0:	f000 8083 	beq.w	80099fa <pool_func_mp_array_f32+0x17a>
 80098f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f6:	1b1c      	subs	r4, r3, r4
 80098f8:	9b04      	ldr	r3, [sp, #16]
 80098fa:	1a1b      	subs	r3, r3, r0
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4240      	negs	r0, r0
 8009900:	2200      	movs	r2, #0
 8009902:	b2a1      	uxth	r1, r4
 8009904:	930f      	str	r3, [sp, #60]	; 0x3c
 8009906:	b283      	uxth	r3, r0
 8009908:	920e      	str	r2, [sp, #56]	; 0x38
 800990a:	910c      	str	r1, [sp, #48]	; 0x30
 800990c:	9310      	str	r3, [sp, #64]	; 0x40
 800990e:	9c06      	ldr	r4, [sp, #24]
 8009910:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009914:	fb02 f204 	mul.w	r2, r2, r4
 8009918:	1acb      	subs	r3, r1, r3
 800991a:	920a      	str	r2, [sp, #40]	; 0x28
 800991c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800991e:	9205      	str	r2, [sp, #20]
 8009920:	2000      	movs	r0, #0
 8009922:	b21b      	sxth	r3, r3
 8009924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	9007      	str	r0, [sp, #28]
 800992a:	4603      	mov	r3, r0
 800992c:	fa0f f881 	sxth.w	r8, r1
 8009930:	9204      	str	r2, [sp, #16]
 8009932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009934:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8009938:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800993c:	4413      	add	r3, r2
 800993e:	f04f 0e00 	mov.w	lr, #0
 8009942:	fb09 f303 	mul.w	r3, r9, r3
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800994c:	4675      	mov	r5, lr
 800994e:	9903      	ldr	r1, [sp, #12]
 8009950:	eddf 7a78 	vldr	s15, [pc, #480]	; 8009b34 <pool_func_mp_array_f32+0x2b4>
 8009954:	4588      	cmp	r8, r1
 8009956:	dd24      	ble.n	80099a2 <pool_func_mp_array_f32+0x122>
 8009958:	4564      	cmp	r4, ip
 800995a:	dd1e      	ble.n	800999a <pool_func_mp_array_f32+0x11a>
 800995c:	2900      	cmp	r1, #0
 800995e:	fb0a f601 	mul.w	r6, sl, r1
 8009962:	db1a      	blt.n	800999a <pool_func_mp_array_f32+0x11a>
 8009964:	9b00      	ldr	r3, [sp, #0]
 8009966:	4299      	cmp	r1, r3
 8009968:	da17      	bge.n	800999a <pool_func_mp_array_f32+0x11a>
 800996a:	f1bc 0f00 	cmp.w	ip, #0
 800996e:	4663      	mov	r3, ip
 8009970:	db46      	blt.n	8009a00 <pool_func_mp_array_f32+0x180>
 8009972:	18f2      	adds	r2, r6, r3
 8009974:	fb09 5202 	mla	r2, r9, r2, r5
 8009978:	1c58      	adds	r0, r3, #1
 800997a:	459a      	cmp	sl, r3
 800997c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8009980:	b203      	sxth	r3, r0
 8009982:	dd08      	ble.n	8009996 <pool_func_mp_array_f32+0x116>
 8009984:	ed92 7a00 	vldr	s14, [r2]
 8009988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800998c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009990:	bfb8      	it	lt
 8009992:	eef0 7a47 	vmovlt.f32	s15, s14
 8009996:	429c      	cmp	r4, r3
 8009998:	dceb      	bgt.n	8009972 <pool_func_mp_array_f32+0xf2>
 800999a:	3101      	adds	r1, #1
 800999c:	b209      	sxth	r1, r1
 800999e:	4588      	cmp	r8, r1
 80099a0:	dcda      	bgt.n	8009958 <pool_func_mp_array_f32+0xd8>
 80099a2:	9b01      	ldr	r3, [sp, #4]
 80099a4:	f10e 0e01 	add.w	lr, lr, #1
 80099a8:	441d      	add	r5, r3
 80099aa:	9b02      	ldr	r3, [sp, #8]
 80099ac:	fa0f fe8e 	sxth.w	lr, lr
 80099b0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80099b4:	45ce      	cmp	lr, r9
 80099b6:	edc5 7a00 	vstr	s15, [r5]
 80099ba:	4675      	mov	r5, lr
 80099bc:	dbc7      	blt.n	800994e <pool_func_mp_array_f32+0xce>
 80099be:	9b07      	ldr	r3, [sp, #28]
 80099c0:	9808      	ldr	r0, [sp, #32]
 80099c2:	3301      	adds	r3, #1
 80099c4:	b219      	sxth	r1, r3
 80099c6:	9b05      	ldr	r3, [sp, #20]
 80099c8:	9107      	str	r1, [sp, #28]
 80099ca:	461a      	mov	r2, r3
 80099cc:	4402      	add	r2, r0
 80099ce:	9b04      	ldr	r3, [sp, #16]
 80099d0:	b292      	uxth	r2, r2
 80099d2:	9205      	str	r2, [sp, #20]
 80099d4:	9a06      	ldr	r2, [sp, #24]
 80099d6:	4403      	add	r3, r0
 80099d8:	b29b      	uxth	r3, r3
 80099da:	428a      	cmp	r2, r1
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	460b      	mov	r3, r1
 80099e0:	dca7      	bgt.n	8009932 <pool_func_mp_array_f32+0xb2>
 80099e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e4:	3301      	adds	r3, #1
 80099e6:	b21a      	sxth	r2, r3
 80099e8:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 80099ec:	440b      	add	r3, r1
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	930c      	str	r3, [sp, #48]	; 0x30
 80099f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f4:	920e      	str	r2, [sp, #56]	; 0x38
 80099f6:	4293      	cmp	r3, r2
 80099f8:	dc89      	bgt.n	800990e <pool_func_mp_array_f32+0x8e>
 80099fa:	b013      	add	sp, #76	; 0x4c
 80099fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a00:	3301      	adds	r3, #1
 8009a02:	b21b      	sxth	r3, r3
 8009a04:	42bb      	cmp	r3, r7
 8009a06:	dac6      	bge.n	8009996 <pool_func_mp_array_f32+0x116>
 8009a08:	3301      	adds	r3, #1
 8009a0a:	b21b      	sxth	r3, r3
 8009a0c:	42bb      	cmp	r3, r7
 8009a0e:	dbf7      	blt.n	8009a00 <pool_func_mp_array_f32+0x180>
 8009a10:	e7c1      	b.n	8009996 <pool_func_mp_array_f32+0x116>
 8009a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a14:	9a00      	ldr	r2, [sp, #0]
 8009a16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a18:	1a9a      	subs	r2, r3, r2
 8009a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1c:	3a01      	subs	r2, #1
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	fb13 2301 	smlabb	r3, r3, r1, r2
 8009a24:	041b      	lsls	r3, r3, #16
 8009a26:	f57f af59 	bpl.w	80098dc <pool_func_mp_array_f32+0x5c>
 8009a2a:	fb0a f309 	mul.w	r3, sl, r9
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8009a34:	930e      	str	r3, [sp, #56]	; 0x38
 8009a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a38:	9001      	str	r0, [sp, #4]
 8009a3a:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8009a44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a46:	429a      	cmp	r2, r3
 8009a48:	ddd7      	ble.n	80099fa <pool_func_mp_array_f32+0x17a>
 8009a4a:	9a00      	ldr	r2, [sp, #0]
 8009a4c:	9906      	ldr	r1, [sp, #24]
 8009a4e:	fa0f f882 	sxth.w	r8, r2
 8009a52:	2900      	cmp	r1, #0
 8009a54:	d062      	beq.n	8009b1c <pool_func_mp_array_f32+0x29c>
 8009a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	1a12      	subs	r2, r2, r0
 8009a5e:	9305      	str	r3, [sp, #20]
 8009a60:	b213      	sxth	r3, r2
 8009a62:	9307      	str	r3, [sp, #28]
 8009a64:	f1b9 0f00 	cmp.w	r9, #0
 8009a68:	d058      	beq.n	8009b1c <pool_func_mp_array_f32+0x29c>
 8009a6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a6c:	fb02 f303 	mul.w	r3, r2, r3
 8009a70:	2600      	movs	r6, #0
 8009a72:	930c      	str	r3, [sp, #48]	; 0x30
 8009a74:	9b04      	ldr	r3, [sp, #16]
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	4637      	mov	r7, r6
 8009a7a:	46b2      	mov	sl, r6
 8009a7c:	9b05      	ldr	r3, [sp, #20]
 8009a7e:	9611      	str	r6, [sp, #68]	; 0x44
 8009a80:	eb0a 0b03 	add.w	fp, sl, r3
 8009a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a86:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8009a8a:	b235      	sxth	r5, r6
 8009a8c:	18eb      	adds	r3, r5, r3
 8009a8e:	f04f 0a00 	mov.w	sl, #0
 8009a92:	fb09 f303 	mul.w	r3, r9, r3
 8009a96:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009a98:	930a      	str	r3, [sp, #40]	; 0x28
 8009a9a:	fb09 fb0b 	mul.w	fp, r9, fp
 8009a9e:	46d6      	mov	lr, sl
 8009aa0:	9807      	ldr	r0, [sp, #28]
 8009aa2:	4580      	cmp	r8, r0
 8009aa4:	dd43      	ble.n	8009b2e <pool_func_mp_array_f32+0x2ae>
 8009aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa8:	eddf 7a22 	vldr	s15, [pc, #136]	; 8009b34 <pool_func_mp_array_f32+0x2b4>
 8009aac:	eb0e 0403 	add.w	r4, lr, r3
 8009ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ab2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ab6:	42a9      	cmp	r1, r5
 8009ab8:	dd0f      	ble.n	8009ada <pool_func_mp_array_f32+0x25a>
 8009aba:	4622      	mov	r2, r4
 8009abc:	462b      	mov	r3, r5
 8009abe:	ed92 7a00 	vldr	s14, [r2]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009acc:	b21b      	sxth	r3, r3
 8009ace:	bfb8      	it	lt
 8009ad0:	eef0 7a47 	vmovlt.f32	s15, s14
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	4462      	add	r2, ip
 8009ad8:	d1f1      	bne.n	8009abe <pool_func_mp_array_f32+0x23e>
 8009ada:	3001      	adds	r0, #1
 8009adc:	b200      	sxth	r0, r0
 8009ade:	4580      	cmp	r8, r0
 8009ae0:	4434      	add	r4, r6
 8009ae2:	d1e8      	bne.n	8009ab6 <pool_func_mp_array_f32+0x236>
 8009ae4:	f10a 0a01 	add.w	sl, sl, #1
 8009ae8:	9a02      	ldr	r2, [sp, #8]
 8009aea:	eb0b 030e 	add.w	r3, fp, lr
 8009aee:	fa0f fa8a 	sxth.w	sl, sl
 8009af2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009af6:	45ca      	cmp	sl, r9
 8009af8:	edc3 7a00 	vstr	s15, [r3]
 8009afc:	46d6      	mov	lr, sl
 8009afe:	dbcf      	blt.n	8009aa0 <pool_func_mp_array_f32+0x220>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	9a08      	ldr	r2, [sp, #32]
 8009b04:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009b06:	4413      	add	r3, r2
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3701      	adds	r7, #1
 8009b0c:	9303      	str	r3, [sp, #12]
 8009b0e:	9b06      	ldr	r3, [sp, #24]
 8009b10:	b23f      	sxth	r7, r7
 8009b12:	4416      	add	r6, r2
 8009b14:	42bb      	cmp	r3, r7
 8009b16:	b2b6      	uxth	r6, r6
 8009b18:	46ba      	mov	sl, r7
 8009b1a:	dcaf      	bgt.n	8009a7c <pool_func_mp_array_f32+0x1fc>
 8009b1c:	9b00      	ldr	r3, [sp, #0]
 8009b1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b20:	4413      	add	r3, r2
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	e788      	b.n	8009a40 <pool_func_mp_array_f32+0x1c0>
 8009b2e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8009b34 <pool_func_mp_array_f32+0x2b4>
 8009b32:	e7d7      	b.n	8009ae4 <pool_func_mp_array_f32+0x264>
 8009b34:	cf000000 	.word	0xcf000000

08009b38 <forward_ap>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	6983      	ldr	r3, [r0, #24]
 8009b3e:	b09d      	sub	sp, #116	; 0x74
 8009b40:	881a      	ldrh	r2, [r3, #0]
 8009b42:	900a      	str	r0, [sp, #40]	; 0x28
 8009b44:	2a00      	cmp	r2, #0
 8009b46:	f000 8110 	beq.w	8009d6a <forward_ap+0x232>
 8009b4a:	6859      	ldr	r1, [r3, #4]
 8009b4c:	684b      	ldr	r3, [r1, #4]
 8009b4e:	b103      	cbz	r3, 8009b52 <forward_ap+0x1a>
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2a01      	cmp	r2, #1
 8009b54:	f240 8106 	bls.w	8009d64 <forward_ap+0x22c>
 8009b58:	690a      	ldr	r2, [r1, #16]
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	f000 8100 	beq.w	8009d60 <forward_ap+0x228>
 8009b60:	6812      	ldr	r2, [r2, #0]
 8009b62:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009b64:	68d4      	ldr	r4, [r2, #12]
 8009b66:	6995      	ldr	r5, [r2, #24]
 8009b68:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8009b6a:	68d8      	ldr	r0, [r3, #12]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	68e2      	ldr	r2, [r4, #12]
 8009b70:	68ad      	ldr	r5, [r5, #8]
 8009b72:	9214      	str	r2, [sp, #80]	; 0x50
 8009b74:	9513      	str	r5, [sp, #76]	; 0x4c
 8009b76:	680a      	ldr	r2, [r1, #0]
 8009b78:	684d      	ldr	r5, [r1, #4]
 8009b7a:	6899      	ldr	r1, [r3, #8]
 8009b7c:	910e      	str	r1, [sp, #56]	; 0x38
 8009b7e:	e9d0 7102 	ldrd	r7, r1, [r0, #8]
 8009b82:	4633      	mov	r3, r6
 8009b84:	9715      	str	r7, [sp, #84]	; 0x54
 8009b86:	6847      	ldr	r7, [r0, #4]
 8009b88:	69f0      	ldr	r0, [r6, #28]
 8009b8a:	6a36      	ldr	r6, [r6, #32]
 8009b8c:	9616      	str	r6, [sp, #88]	; 0x58
 8009b8e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	9318      	str	r3, [sp, #96]	; 0x60
 8009b94:	4253      	negs	r3, r2
 8009b96:	9311      	str	r3, [sp, #68]	; 0x44
 8009b98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b9a:	68a4      	ldr	r4, [r4, #8]
 8009b9c:	9409      	str	r4, [sp, #36]	; 0x24
 8009b9e:	9519      	str	r5, [sp, #100]	; 0x64
 8009ba0:	900c      	str	r0, [sp, #48]	; 0x30
 8009ba2:	960d      	str	r6, [sp, #52]	; 0x34
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 80c9 	beq.w	8009d3c <forward_ap+0x204>
 8009baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bac:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8009bae:	fb07 f303 	mul.w	r3, r7, r3
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	9303      	str	r3, [sp, #12]
 8009bb6:	fb06 f300 	mul.w	r3, r6, r0
 8009bba:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8009bbe:	188a      	adds	r2, r1, r2
 8009bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bc2:	426b      	negs	r3, r5
 8009bc4:	9212      	str	r2, [sp, #72]	; 0x48
 8009bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8009bc8:	fb04 f20b 	mul.w	r2, r4, fp
 8009bcc:	2300      	movs	r3, #0
 8009bce:	921b      	str	r2, [sp, #108]	; 0x6c
 8009bd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd6:	46da      	mov	sl, fp
 8009bd8:	463e      	mov	r6, r7
 8009bda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009bdc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009bde:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009be0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009be4:	42a0      	cmp	r0, r4
 8009be6:	bf94      	ite	ls
 8009be8:	1812      	addls	r2, r2, r0
 8009bea:	1912      	addhi	r2, r2, r4
 8009bec:	4611      	mov	r1, r2
 8009bee:	9201      	str	r2, [sp, #4]
 8009bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bf2:	9308      	str	r3, [sp, #32]
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	f000 8093 	beq.w	8009d20 <forward_ap+0x1e8>
 8009bfa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009bfc:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8009c00:	fb00 f203 	mul.w	r2, r0, r3
 8009c04:	1a5b      	subs	r3, r3, r1
 8009c06:	9310      	str	r3, [sp, #64]	; 0x40
 8009c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c0c:	18c3      	adds	r3, r0, r3
 8009c0e:	9304      	str	r3, [sp, #16]
 8009c10:	2200      	movs	r2, #0
 8009c12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009c14:	9207      	str	r2, [sp, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	9306      	str	r3, [sp, #24]
 8009c1a:	f2c0 809a 	blt.w	8009d52 <forward_ap+0x21a>
 8009c1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c20:	18d0      	adds	r0, r2, r3
 8009c22:	461a      	mov	r2, r3
 8009c24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c26:	9c04      	ldr	r4, [sp, #16]
 8009c28:	42a1      	cmp	r1, r4
 8009c2a:	bf94      	ite	ls
 8009c2c:	1852      	addls	r2, r2, r1
 8009c2e:	1912      	addhi	r2, r2, r4
 8009c30:	eba3 0902 	sub.w	r9, r3, r2
 8009c34:	4690      	mov	r8, r2
 8009c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c38:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009c3a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009c3e:	eba8 0803 	sub.w	r8, r8, r3
 8009c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c44:	fb01 f909 	mul.w	r9, r1, r9
 8009c48:	2a00      	cmp	r2, #0
 8009c4a:	bf08      	it	eq
 8009c4c:	464b      	moveq	r3, r9
 8009c4e:	9305      	str	r3, [sp, #20]
 8009c50:	9a08      	ldr	r2, [sp, #32]
 8009c52:	9b01      	ldr	r3, [sp, #4]
 8009c54:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c56:	4293      	cmp	r3, r2
 8009c58:	fb00 100a 	mla	r0, r0, sl, r1
 8009c5c:	dd7d      	ble.n	8009d5a <forward_ap+0x222>
 8009c5e:	fb0a f308 	mul.w	r3, sl, r8
 8009c62:	4694      	mov	ip, r2
 8009c64:	9302      	str	r3, [sp, #8]
 8009c66:	eb0a 050b 	add.w	r5, sl, fp
 8009c6a:	46c6      	mov	lr, r8
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	9902      	ldr	r1, [sp, #8]
 8009c70:	45f1      	cmp	r9, lr
 8009c72:	4603      	mov	r3, r0
 8009c74:	eb01 0400 	add.w	r4, r1, r0
 8009c78:	d065      	beq.n	8009d46 <forward_ap+0x20e>
 8009c7a:	4284      	cmp	r4, r0
 8009c7c:	d934      	bls.n	8009ce8 <forward_ap+0x1b0>
 8009c7e:	2700      	movs	r7, #0
 8009c80:	b156      	cbz	r6, 8009c98 <forward_ap+0x160>
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	d063      	beq.n	8009d4e <forward_ap+0x216>
 8009c86:	eb00 010a 	add.w	r1, r0, sl
 8009c8a:	465a      	mov	r2, fp
 8009c8c:	ecf3 7a01 	vldmia	r3!, {s15}
 8009c90:	4299      	cmp	r1, r3
 8009c92:	ece2 7a01 	vstmia	r2!, {s15}
 8009c96:	d1f9      	bne.n	8009c8c <forward_ap+0x154>
 8009c98:	eb00 010a 	add.w	r1, r0, sl
 8009c9c:	42a1      	cmp	r1, r4
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	d211      	bcs.n	8009cc6 <forward_ap+0x18e>
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d04d      	beq.n	8009d42 <forward_ap+0x20a>
 8009ca6:	eb03 010a 	add.w	r1, r3, sl
 8009caa:	465a      	mov	r2, fp
 8009cac:	ecf3 7a01 	vldmia	r3!, {s15}
 8009cb0:	ed92 7a00 	vldr	s14, [r2]
 8009cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cb8:	4299      	cmp	r1, r3
 8009cba:	ece2 7a01 	vstmia	r2!, {s15}
 8009cbe:	d1f5      	bne.n	8009cac <forward_ap+0x174>
 8009cc0:	42a1      	cmp	r1, r4
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	d3ed      	bcc.n	8009ca2 <forward_ap+0x16a>
 8009cc6:	b17f      	cbz	r7, 8009ce8 <forward_ap+0x1b0>
 8009cc8:	ee07 7a90 	vmov	s15, r7
 8009ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd4:	b146      	cbz	r6, 8009ce8 <forward_ap+0x1b0>
 8009cd6:	465b      	mov	r3, fp
 8009cd8:	edd3 7a00 	vldr	s15, [r3]
 8009cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce0:	ece3 7a01 	vstmia	r3!, {s15}
 8009ce4:	429d      	cmp	r5, r3
 8009ce6:	d1f7      	bne.n	8009cd8 <forward_ap+0x1a0>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	4418      	add	r0, r3
 8009cec:	9b01      	ldr	r3, [sp, #4]
 8009cee:	f10c 0c01 	add.w	ip, ip, #1
 8009cf2:	4563      	cmp	r3, ip
 8009cf4:	44c6      	add	lr, r8
 8009cf6:	f04f 0200 	mov.w	r2, #0
 8009cfa:	d1b8      	bne.n	8009c6e <forward_ap+0x136>
 8009cfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cfe:	9b04      	ldr	r3, [sp, #16]
 8009d00:	9a07      	ldr	r2, [sp, #28]
 8009d02:	1a5b      	subs	r3, r3, r1
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	9b06      	ldr	r3, [sp, #24]
 8009d08:	440b      	add	r3, r1
 8009d0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d0c:	3201      	adds	r2, #1
 8009d0e:	4291      	cmp	r1, r2
 8009d10:	9207      	str	r2, [sp, #28]
 8009d12:	46ab      	mov	fp, r5
 8009d14:	f47f af7f 	bne.w	8009c16 <forward_ap+0xde>
 8009d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d1a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d1c:	4413      	add	r3, r2
 8009d1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d22:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d26:	1a89      	subs	r1, r1, r2
 8009d28:	9112      	str	r1, [sp, #72]	; 0x48
 8009d2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d2c:	4411      	add	r1, r2
 8009d2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d30:	9111      	str	r1, [sp, #68]	; 0x44
 8009d32:	3301      	adds	r3, #1
 8009d34:	429a      	cmp	r2, r3
 8009d36:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d38:	f47f af4f 	bne.w	8009bda <forward_ap+0xa2>
 8009d3c:	b01d      	add	sp, #116	; 0x74
 8009d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d42:	4451      	add	r1, sl
 8009d44:	e7aa      	b.n	8009c9c <forward_ap+0x164>
 8009d46:	4284      	cmp	r4, r0
 8009d48:	9f05      	ldr	r7, [sp, #20]
 8009d4a:	d899      	bhi.n	8009c80 <forward_ap+0x148>
 8009d4c:	e7bb      	b.n	8009cc6 <forward_ap+0x18e>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	e7a9      	b.n	8009ca6 <forward_ap+0x16e>
 8009d52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009d54:	9a06      	ldr	r2, [sp, #24]
 8009d56:	2300      	movs	r3, #0
 8009d58:	e764      	b.n	8009c24 <forward_ap+0xec>
 8009d5a:	eb0a 050b 	add.w	r5, sl, fp
 8009d5e:	e7cd      	b.n	8009cfc <forward_ap+0x1c4>
 8009d60:	68d3      	ldr	r3, [r2, #12]
 8009d62:	deff      	udf	#255	; 0xff
 8009d64:	2300      	movs	r3, #0
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	deff      	udf	#255	; 0xff
 8009d6a:	6853      	ldr	r3, [r2, #4]
 8009d6c:	deff      	udf	#255	; 0xff
 8009d6e:	bf00      	nop

08009d70 <ai_check_custom_types>:
 8009d70:	4b13      	ldr	r3, [pc, #76]	; (8009dc0 <ai_check_custom_types+0x50>)
 8009d72:	b082      	sub	sp, #8
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	b118      	cbz	r0, 8009d82 <ai_check_custom_types+0x12>
 8009d7a:	7803      	ldrb	r3, [r0, #0]
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d002      	beq.n	8009d86 <ai_check_custom_types+0x16>
 8009d80:	2000      	movs	r0, #0
 8009d82:	b002      	add	sp, #8
 8009d84:	4770      	bx	lr
 8009d86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d004      	beq.n	8009d98 <ai_check_custom_types+0x28>
 8009d8e:	2001      	movs	r0, #1
 8009d90:	f080 0001 	eor.w	r0, r0, #1
 8009d94:	b002      	add	sp, #8
 8009d96:	4770      	bx	lr
 8009d98:	7842      	ldrb	r2, [r0, #1]
 8009d9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	f100 0001 	add.w	r0, r0, #1
 8009da4:	d1f3      	bne.n	8009d8e <ai_check_custom_types+0x1e>
 8009da6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009daa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d1ed      	bne.n	8009d8e <ai_check_custom_types+0x1e>
 8009db2:	7842      	ldrb	r2, [r0, #1]
 8009db4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d1e8      	bne.n	8009d8e <ai_check_custom_types+0x1e>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7e7      	b.n	8009d90 <ai_check_custom_types+0x20>
 8009dc0:	08011684 	.word	0x08011684

08009dc4 <ai_layers_init_all>:
 8009dc4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009dc6:	b17a      	cbz	r2, 8009de8 <ai_layers_init_all+0x24>
 8009dc8:	6913      	ldr	r3, [r2, #16]
 8009dca:	60d0      	str	r0, [r2, #12]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	f04f 0201 	mov.w	r2, #1
 8009dd2:	d009      	beq.n	8009de8 <ai_layers_init_all+0x24>
 8009dd4:	b143      	cbz	r3, 8009de8 <ai_layers_init_all+0x24>
 8009dd6:	6919      	ldr	r1, [r3, #16]
 8009dd8:	60d8      	str	r0, [r3, #12]
 8009dda:	4299      	cmp	r1, r3
 8009ddc:	f102 0201 	add.w	r2, r2, #1
 8009de0:	d002      	beq.n	8009de8 <ai_layers_init_all+0x24>
 8009de2:	460b      	mov	r3, r1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1f6      	bne.n	8009dd6 <ai_layers_init_all+0x12>
 8009de8:	4610      	mov	r0, r2
 8009dea:	4770      	bx	lr

08009dec <ai_layers_post_init_all>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009df0:	b18c      	cbz	r4, 8009e16 <ai_layers_post_init_all+0x2a>
 8009df2:	2500      	movs	r5, #0
 8009df4:	6863      	ldr	r3, [r4, #4]
 8009df6:	f013 0f01 	tst.w	r3, #1
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	d003      	beq.n	8009e06 <ai_layers_post_init_all+0x1a>
 8009dfe:	6a23      	ldr	r3, [r4, #32]
 8009e00:	b10b      	cbz	r3, 8009e06 <ai_layers_post_init_all+0x1a>
 8009e02:	4798      	blx	r3
 8009e04:	3501      	adds	r5, #1
 8009e06:	6923      	ldr	r3, [r4, #16]
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d002      	beq.n	8009e12 <ai_layers_post_init_all+0x26>
 8009e0c:	461c      	mov	r4, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1f0      	bne.n	8009df4 <ai_layers_post_init_all+0x8>
 8009e12:	4628      	mov	r0, r5
 8009e14:	bd38      	pop	{r3, r4, r5, pc}
 8009e16:	4625      	mov	r5, r4
 8009e18:	e7fb      	b.n	8009e12 <ai_layers_post_init_all+0x26>
 8009e1a:	bf00      	nop

08009e1c <ai_array_get_byte_size>:
 8009e1c:	b1c1      	cbz	r1, 8009e50 <ai_array_get_byte_size+0x34>
 8009e1e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8009e22:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009e26:	4413      	add	r3, r2
 8009e28:	fb01 f103 	mul.w	r1, r1, r3
 8009e2c:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009e30:	3107      	adds	r1, #7
 8009e32:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8009e36:	f021 0107 	bic.w	r1, r1, #7
 8009e3a:	2804      	cmp	r0, #4
 8009e3c:	fa21 f102 	lsr.w	r1, r1, r2
 8009e40:	d008      	beq.n	8009e54 <ai_array_get_byte_size+0x38>
 8009e42:	2808      	cmp	r0, #8
 8009e44:	d101      	bne.n	8009e4a <ai_array_get_byte_size+0x2e>
 8009e46:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009e4a:	3107      	adds	r1, #7
 8009e4c:	08c8      	lsrs	r0, r1, #3
 8009e4e:	4770      	bx	lr
 8009e50:	4608      	mov	r0, r1
 8009e52:	4770      	bx	lr
 8009e54:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009e58:	3107      	adds	r1, #7
 8009e5a:	08c8      	lsrs	r0, r1, #3
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop

08009e60 <__assert_func>:
 8009e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e62:	4614      	mov	r4, r2
 8009e64:	461a      	mov	r2, r3
 8009e66:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <__assert_func+0x2c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	68d8      	ldr	r0, [r3, #12]
 8009e6e:	b14c      	cbz	r4, 8009e84 <__assert_func+0x24>
 8009e70:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <__assert_func+0x30>)
 8009e72:	9100      	str	r1, [sp, #0]
 8009e74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e78:	4906      	ldr	r1, [pc, #24]	; (8009e94 <__assert_func+0x34>)
 8009e7a:	462b      	mov	r3, r5
 8009e7c:	f000 f814 	bl	8009ea8 <fiprintf>
 8009e80:	f002 f88c 	bl	800bf9c <abort>
 8009e84:	4b04      	ldr	r3, [pc, #16]	; (8009e98 <__assert_func+0x38>)
 8009e86:	461c      	mov	r4, r3
 8009e88:	e7f3      	b.n	8009e72 <__assert_func+0x12>
 8009e8a:	bf00      	nop
 8009e8c:	20000f6c 	.word	0x20000f6c
 8009e90:	08040864 	.word	0x08040864
 8009e94:	08040871 	.word	0x08040871
 8009e98:	0804089f 	.word	0x0804089f

08009e9c <__errno>:
 8009e9c:	4b01      	ldr	r3, [pc, #4]	; (8009ea4 <__errno+0x8>)
 8009e9e:	6818      	ldr	r0, [r3, #0]
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	20000f6c 	.word	0x20000f6c

08009ea8 <fiprintf>:
 8009ea8:	b40e      	push	{r1, r2, r3}
 8009eaa:	b503      	push	{r0, r1, lr}
 8009eac:	4601      	mov	r1, r0
 8009eae:	ab03      	add	r3, sp, #12
 8009eb0:	4805      	ldr	r0, [pc, #20]	; (8009ec8 <fiprintf+0x20>)
 8009eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb6:	6800      	ldr	r0, [r0, #0]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	f000 f91d 	bl	800a0f8 <_vfiprintf_r>
 8009ebe:	b002      	add	sp, #8
 8009ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec4:	b003      	add	sp, #12
 8009ec6:	4770      	bx	lr
 8009ec8:	20000f6c 	.word	0x20000f6c

08009ecc <__libc_init_array>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	4d0d      	ldr	r5, [pc, #52]	; (8009f04 <__libc_init_array+0x38>)
 8009ed0:	4c0d      	ldr	r4, [pc, #52]	; (8009f08 <__libc_init_array+0x3c>)
 8009ed2:	1b64      	subs	r4, r4, r5
 8009ed4:	10a4      	asrs	r4, r4, #2
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	42a6      	cmp	r6, r4
 8009eda:	d109      	bne.n	8009ef0 <__libc_init_array+0x24>
 8009edc:	4d0b      	ldr	r5, [pc, #44]	; (8009f0c <__libc_init_array+0x40>)
 8009ede:	4c0c      	ldr	r4, [pc, #48]	; (8009f10 <__libc_init_array+0x44>)
 8009ee0:	f007 fb56 	bl	8011590 <_init>
 8009ee4:	1b64      	subs	r4, r4, r5
 8009ee6:	10a4      	asrs	r4, r4, #2
 8009ee8:	2600      	movs	r6, #0
 8009eea:	42a6      	cmp	r6, r4
 8009eec:	d105      	bne.n	8009efa <__libc_init_array+0x2e>
 8009eee:	bd70      	pop	{r4, r5, r6, pc}
 8009ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef4:	4798      	blx	r3
 8009ef6:	3601      	adds	r6, #1
 8009ef8:	e7ee      	b.n	8009ed8 <__libc_init_array+0xc>
 8009efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009efe:	4798      	blx	r3
 8009f00:	3601      	adds	r6, #1
 8009f02:	e7f2      	b.n	8009eea <__libc_init_array+0x1e>
 8009f04:	08040f70 	.word	0x08040f70
 8009f08:	08040f70 	.word	0x08040f70
 8009f0c:	08040f70 	.word	0x08040f70
 8009f10:	08040f74 	.word	0x08040f74

08009f14 <malloc>:
 8009f14:	4b02      	ldr	r3, [pc, #8]	; (8009f20 <malloc+0xc>)
 8009f16:	4601      	mov	r1, r0
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	f000 b869 	b.w	8009ff0 <_malloc_r>
 8009f1e:	bf00      	nop
 8009f20:	20000f6c 	.word	0x20000f6c

08009f24 <memcpy>:
 8009f24:	440a      	add	r2, r1
 8009f26:	4291      	cmp	r1, r2
 8009f28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f2c:	d100      	bne.n	8009f30 <memcpy+0xc>
 8009f2e:	4770      	bx	lr
 8009f30:	b510      	push	{r4, lr}
 8009f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f3a:	4291      	cmp	r1, r2
 8009f3c:	d1f9      	bne.n	8009f32 <memcpy+0xe>
 8009f3e:	bd10      	pop	{r4, pc}

08009f40 <memset>:
 8009f40:	4402      	add	r2, r0
 8009f42:	4603      	mov	r3, r0
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d100      	bne.n	8009f4a <memset+0xa>
 8009f48:	4770      	bx	lr
 8009f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4e:	e7f9      	b.n	8009f44 <memset+0x4>

08009f50 <_free_r>:
 8009f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f52:	2900      	cmp	r1, #0
 8009f54:	d048      	beq.n	8009fe8 <_free_r+0x98>
 8009f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5a:	9001      	str	r0, [sp, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f62:	bfb8      	it	lt
 8009f64:	18e4      	addlt	r4, r4, r3
 8009f66:	f003 fc55 	bl	800d814 <__malloc_lock>
 8009f6a:	4a20      	ldr	r2, [pc, #128]	; (8009fec <_free_r+0x9c>)
 8009f6c:	9801      	ldr	r0, [sp, #4]
 8009f6e:	6813      	ldr	r3, [r2, #0]
 8009f70:	4615      	mov	r5, r2
 8009f72:	b933      	cbnz	r3, 8009f82 <_free_r+0x32>
 8009f74:	6063      	str	r3, [r4, #4]
 8009f76:	6014      	str	r4, [r2, #0]
 8009f78:	b003      	add	sp, #12
 8009f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f7e:	f003 bc4f 	b.w	800d820 <__malloc_unlock>
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	d90b      	bls.n	8009f9e <_free_r+0x4e>
 8009f86:	6821      	ldr	r1, [r4, #0]
 8009f88:	1862      	adds	r2, r4, r1
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	bf04      	itt	eq
 8009f8e:	681a      	ldreq	r2, [r3, #0]
 8009f90:	685b      	ldreq	r3, [r3, #4]
 8009f92:	6063      	str	r3, [r4, #4]
 8009f94:	bf04      	itt	eq
 8009f96:	1852      	addeq	r2, r2, r1
 8009f98:	6022      	streq	r2, [r4, #0]
 8009f9a:	602c      	str	r4, [r5, #0]
 8009f9c:	e7ec      	b.n	8009f78 <_free_r+0x28>
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	b10b      	cbz	r3, 8009fa8 <_free_r+0x58>
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d9fa      	bls.n	8009f9e <_free_r+0x4e>
 8009fa8:	6811      	ldr	r1, [r2, #0]
 8009faa:	1855      	adds	r5, r2, r1
 8009fac:	42a5      	cmp	r5, r4
 8009fae:	d10b      	bne.n	8009fc8 <_free_r+0x78>
 8009fb0:	6824      	ldr	r4, [r4, #0]
 8009fb2:	4421      	add	r1, r4
 8009fb4:	1854      	adds	r4, r2, r1
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	6011      	str	r1, [r2, #0]
 8009fba:	d1dd      	bne.n	8009f78 <_free_r+0x28>
 8009fbc:	681c      	ldr	r4, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	6053      	str	r3, [r2, #4]
 8009fc2:	4421      	add	r1, r4
 8009fc4:	6011      	str	r1, [r2, #0]
 8009fc6:	e7d7      	b.n	8009f78 <_free_r+0x28>
 8009fc8:	d902      	bls.n	8009fd0 <_free_r+0x80>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	6003      	str	r3, [r0, #0]
 8009fce:	e7d3      	b.n	8009f78 <_free_r+0x28>
 8009fd0:	6825      	ldr	r5, [r4, #0]
 8009fd2:	1961      	adds	r1, r4, r5
 8009fd4:	428b      	cmp	r3, r1
 8009fd6:	bf04      	itt	eq
 8009fd8:	6819      	ldreq	r1, [r3, #0]
 8009fda:	685b      	ldreq	r3, [r3, #4]
 8009fdc:	6063      	str	r3, [r4, #4]
 8009fde:	bf04      	itt	eq
 8009fe0:	1949      	addeq	r1, r1, r5
 8009fe2:	6021      	streq	r1, [r4, #0]
 8009fe4:	6054      	str	r4, [r2, #4]
 8009fe6:	e7c7      	b.n	8009f78 <_free_r+0x28>
 8009fe8:	b003      	add	sp, #12
 8009fea:	bd30      	pop	{r4, r5, pc}
 8009fec:	20001200 	.word	0x20001200

08009ff0 <_malloc_r>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	1ccd      	adds	r5, r1, #3
 8009ff4:	f025 0503 	bic.w	r5, r5, #3
 8009ff8:	3508      	adds	r5, #8
 8009ffa:	2d0c      	cmp	r5, #12
 8009ffc:	bf38      	it	cc
 8009ffe:	250c      	movcc	r5, #12
 800a000:	2d00      	cmp	r5, #0
 800a002:	4606      	mov	r6, r0
 800a004:	db01      	blt.n	800a00a <_malloc_r+0x1a>
 800a006:	42a9      	cmp	r1, r5
 800a008:	d903      	bls.n	800a012 <_malloc_r+0x22>
 800a00a:	230c      	movs	r3, #12
 800a00c:	6033      	str	r3, [r6, #0]
 800a00e:	2000      	movs	r0, #0
 800a010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a012:	f003 fbff 	bl	800d814 <__malloc_lock>
 800a016:	4921      	ldr	r1, [pc, #132]	; (800a09c <_malloc_r+0xac>)
 800a018:	680a      	ldr	r2, [r1, #0]
 800a01a:	4614      	mov	r4, r2
 800a01c:	b99c      	cbnz	r4, 800a046 <_malloc_r+0x56>
 800a01e:	4f20      	ldr	r7, [pc, #128]	; (800a0a0 <_malloc_r+0xb0>)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	b923      	cbnz	r3, 800a02e <_malloc_r+0x3e>
 800a024:	4621      	mov	r1, r4
 800a026:	4630      	mov	r0, r6
 800a028:	f001 f810 	bl	800b04c <_sbrk_r>
 800a02c:	6038      	str	r0, [r7, #0]
 800a02e:	4629      	mov	r1, r5
 800a030:	4630      	mov	r0, r6
 800a032:	f001 f80b 	bl	800b04c <_sbrk_r>
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	d123      	bne.n	800a082 <_malloc_r+0x92>
 800a03a:	230c      	movs	r3, #12
 800a03c:	6033      	str	r3, [r6, #0]
 800a03e:	4630      	mov	r0, r6
 800a040:	f003 fbee 	bl	800d820 <__malloc_unlock>
 800a044:	e7e3      	b.n	800a00e <_malloc_r+0x1e>
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	1b5b      	subs	r3, r3, r5
 800a04a:	d417      	bmi.n	800a07c <_malloc_r+0x8c>
 800a04c:	2b0b      	cmp	r3, #11
 800a04e:	d903      	bls.n	800a058 <_malloc_r+0x68>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	441c      	add	r4, r3
 800a054:	6025      	str	r5, [r4, #0]
 800a056:	e004      	b.n	800a062 <_malloc_r+0x72>
 800a058:	6863      	ldr	r3, [r4, #4]
 800a05a:	42a2      	cmp	r2, r4
 800a05c:	bf0c      	ite	eq
 800a05e:	600b      	streq	r3, [r1, #0]
 800a060:	6053      	strne	r3, [r2, #4]
 800a062:	4630      	mov	r0, r6
 800a064:	f003 fbdc 	bl	800d820 <__malloc_unlock>
 800a068:	f104 000b 	add.w	r0, r4, #11
 800a06c:	1d23      	adds	r3, r4, #4
 800a06e:	f020 0007 	bic.w	r0, r0, #7
 800a072:	1ac2      	subs	r2, r0, r3
 800a074:	d0cc      	beq.n	800a010 <_malloc_r+0x20>
 800a076:	1a1b      	subs	r3, r3, r0
 800a078:	50a3      	str	r3, [r4, r2]
 800a07a:	e7c9      	b.n	800a010 <_malloc_r+0x20>
 800a07c:	4622      	mov	r2, r4
 800a07e:	6864      	ldr	r4, [r4, #4]
 800a080:	e7cc      	b.n	800a01c <_malloc_r+0x2c>
 800a082:	1cc4      	adds	r4, r0, #3
 800a084:	f024 0403 	bic.w	r4, r4, #3
 800a088:	42a0      	cmp	r0, r4
 800a08a:	d0e3      	beq.n	800a054 <_malloc_r+0x64>
 800a08c:	1a21      	subs	r1, r4, r0
 800a08e:	4630      	mov	r0, r6
 800a090:	f000 ffdc 	bl	800b04c <_sbrk_r>
 800a094:	3001      	adds	r0, #1
 800a096:	d1dd      	bne.n	800a054 <_malloc_r+0x64>
 800a098:	e7cf      	b.n	800a03a <_malloc_r+0x4a>
 800a09a:	bf00      	nop
 800a09c:	20001200 	.word	0x20001200
 800a0a0:	20001204 	.word	0x20001204

0800a0a4 <__sfputc_r>:
 800a0a4:	6893      	ldr	r3, [r2, #8]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	b410      	push	{r4}
 800a0ac:	6093      	str	r3, [r2, #8]
 800a0ae:	da08      	bge.n	800a0c2 <__sfputc_r+0x1e>
 800a0b0:	6994      	ldr	r4, [r2, #24]
 800a0b2:	42a3      	cmp	r3, r4
 800a0b4:	db01      	blt.n	800a0ba <__sfputc_r+0x16>
 800a0b6:	290a      	cmp	r1, #10
 800a0b8:	d103      	bne.n	800a0c2 <__sfputc_r+0x1e>
 800a0ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0be:	f001 bead 	b.w	800be1c <__swbuf_r>
 800a0c2:	6813      	ldr	r3, [r2, #0]
 800a0c4:	1c58      	adds	r0, r3, #1
 800a0c6:	6010      	str	r0, [r2, #0]
 800a0c8:	7019      	strb	r1, [r3, #0]
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <__sfputs_r>:
 800a0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	4614      	mov	r4, r2
 800a0da:	18d5      	adds	r5, r2, r3
 800a0dc:	42ac      	cmp	r4, r5
 800a0de:	d101      	bne.n	800a0e4 <__sfputs_r+0x12>
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e007      	b.n	800a0f4 <__sfputs_r+0x22>
 800a0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e8:	463a      	mov	r2, r7
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7ff ffda 	bl	800a0a4 <__sfputc_r>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d1f3      	bne.n	800a0dc <__sfputs_r+0xa>
 800a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0f8 <_vfiprintf_r>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	460d      	mov	r5, r1
 800a0fe:	b09d      	sub	sp, #116	; 0x74
 800a100:	4614      	mov	r4, r2
 800a102:	4698      	mov	r8, r3
 800a104:	4606      	mov	r6, r0
 800a106:	b118      	cbz	r0, 800a110 <_vfiprintf_r+0x18>
 800a108:	6983      	ldr	r3, [r0, #24]
 800a10a:	b90b      	cbnz	r3, 800a110 <_vfiprintf_r+0x18>
 800a10c:	f002 fede 	bl	800cecc <__sinit>
 800a110:	4b89      	ldr	r3, [pc, #548]	; (800a338 <_vfiprintf_r+0x240>)
 800a112:	429d      	cmp	r5, r3
 800a114:	d11b      	bne.n	800a14e <_vfiprintf_r+0x56>
 800a116:	6875      	ldr	r5, [r6, #4]
 800a118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a11a:	07d9      	lsls	r1, r3, #31
 800a11c:	d405      	bmi.n	800a12a <_vfiprintf_r+0x32>
 800a11e:	89ab      	ldrh	r3, [r5, #12]
 800a120:	059a      	lsls	r2, r3, #22
 800a122:	d402      	bmi.n	800a12a <_vfiprintf_r+0x32>
 800a124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a126:	f003 fae2 	bl	800d6ee <__retarget_lock_acquire_recursive>
 800a12a:	89ab      	ldrh	r3, [r5, #12]
 800a12c:	071b      	lsls	r3, r3, #28
 800a12e:	d501      	bpl.n	800a134 <_vfiprintf_r+0x3c>
 800a130:	692b      	ldr	r3, [r5, #16]
 800a132:	b9eb      	cbnz	r3, 800a170 <_vfiprintf_r+0x78>
 800a134:	4629      	mov	r1, r5
 800a136:	4630      	mov	r0, r6
 800a138:	f001 fec2 	bl	800bec0 <__swsetup_r>
 800a13c:	b1c0      	cbz	r0, 800a170 <_vfiprintf_r+0x78>
 800a13e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a140:	07dc      	lsls	r4, r3, #31
 800a142:	d50e      	bpl.n	800a162 <_vfiprintf_r+0x6a>
 800a144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a148:	b01d      	add	sp, #116	; 0x74
 800a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14e:	4b7b      	ldr	r3, [pc, #492]	; (800a33c <_vfiprintf_r+0x244>)
 800a150:	429d      	cmp	r5, r3
 800a152:	d101      	bne.n	800a158 <_vfiprintf_r+0x60>
 800a154:	68b5      	ldr	r5, [r6, #8]
 800a156:	e7df      	b.n	800a118 <_vfiprintf_r+0x20>
 800a158:	4b79      	ldr	r3, [pc, #484]	; (800a340 <_vfiprintf_r+0x248>)
 800a15a:	429d      	cmp	r5, r3
 800a15c:	bf08      	it	eq
 800a15e:	68f5      	ldreq	r5, [r6, #12]
 800a160:	e7da      	b.n	800a118 <_vfiprintf_r+0x20>
 800a162:	89ab      	ldrh	r3, [r5, #12]
 800a164:	0598      	lsls	r0, r3, #22
 800a166:	d4ed      	bmi.n	800a144 <_vfiprintf_r+0x4c>
 800a168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a16a:	f003 fac1 	bl	800d6f0 <__retarget_lock_release_recursive>
 800a16e:	e7e9      	b.n	800a144 <_vfiprintf_r+0x4c>
 800a170:	2300      	movs	r3, #0
 800a172:	9309      	str	r3, [sp, #36]	; 0x24
 800a174:	2320      	movs	r3, #32
 800a176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a17a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a17e:	2330      	movs	r3, #48	; 0x30
 800a180:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a344 <_vfiprintf_r+0x24c>
 800a184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a188:	f04f 0901 	mov.w	r9, #1
 800a18c:	4623      	mov	r3, r4
 800a18e:	469a      	mov	sl, r3
 800a190:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a194:	b10a      	cbz	r2, 800a19a <_vfiprintf_r+0xa2>
 800a196:	2a25      	cmp	r2, #37	; 0x25
 800a198:	d1f9      	bne.n	800a18e <_vfiprintf_r+0x96>
 800a19a:	ebba 0b04 	subs.w	fp, sl, r4
 800a19e:	d00b      	beq.n	800a1b8 <_vfiprintf_r+0xc0>
 800a1a0:	465b      	mov	r3, fp
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f7ff ff93 	bl	800a0d2 <__sfputs_r>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	f000 80aa 	beq.w	800a306 <_vfiprintf_r+0x20e>
 800a1b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b4:	445a      	add	r2, fp
 800a1b6:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 80a2 	beq.w	800a306 <_vfiprintf_r+0x20e>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1cc:	f10a 0a01 	add.w	sl, sl, #1
 800a1d0:	9304      	str	r3, [sp, #16]
 800a1d2:	9307      	str	r3, [sp, #28]
 800a1d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1d8:	931a      	str	r3, [sp, #104]	; 0x68
 800a1da:	4654      	mov	r4, sl
 800a1dc:	2205      	movs	r2, #5
 800a1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e2:	4858      	ldr	r0, [pc, #352]	; (800a344 <_vfiprintf_r+0x24c>)
 800a1e4:	f7f5 fffc 	bl	80001e0 <memchr>
 800a1e8:	9a04      	ldr	r2, [sp, #16]
 800a1ea:	b9d8      	cbnz	r0, 800a224 <_vfiprintf_r+0x12c>
 800a1ec:	06d1      	lsls	r1, r2, #27
 800a1ee:	bf44      	itt	mi
 800a1f0:	2320      	movmi	r3, #32
 800a1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f6:	0713      	lsls	r3, r2, #28
 800a1f8:	bf44      	itt	mi
 800a1fa:	232b      	movmi	r3, #43	; 0x2b
 800a1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a200:	f89a 3000 	ldrb.w	r3, [sl]
 800a204:	2b2a      	cmp	r3, #42	; 0x2a
 800a206:	d015      	beq.n	800a234 <_vfiprintf_r+0x13c>
 800a208:	9a07      	ldr	r2, [sp, #28]
 800a20a:	4654      	mov	r4, sl
 800a20c:	2000      	movs	r0, #0
 800a20e:	f04f 0c0a 	mov.w	ip, #10
 800a212:	4621      	mov	r1, r4
 800a214:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a218:	3b30      	subs	r3, #48	; 0x30
 800a21a:	2b09      	cmp	r3, #9
 800a21c:	d94e      	bls.n	800a2bc <_vfiprintf_r+0x1c4>
 800a21e:	b1b0      	cbz	r0, 800a24e <_vfiprintf_r+0x156>
 800a220:	9207      	str	r2, [sp, #28]
 800a222:	e014      	b.n	800a24e <_vfiprintf_r+0x156>
 800a224:	eba0 0308 	sub.w	r3, r0, r8
 800a228:	fa09 f303 	lsl.w	r3, r9, r3
 800a22c:	4313      	orrs	r3, r2
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	46a2      	mov	sl, r4
 800a232:	e7d2      	b.n	800a1da <_vfiprintf_r+0xe2>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	1d19      	adds	r1, r3, #4
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	9103      	str	r1, [sp, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bfbb      	ittet	lt
 800a240:	425b      	neglt	r3, r3
 800a242:	f042 0202 	orrlt.w	r2, r2, #2
 800a246:	9307      	strge	r3, [sp, #28]
 800a248:	9307      	strlt	r3, [sp, #28]
 800a24a:	bfb8      	it	lt
 800a24c:	9204      	strlt	r2, [sp, #16]
 800a24e:	7823      	ldrb	r3, [r4, #0]
 800a250:	2b2e      	cmp	r3, #46	; 0x2e
 800a252:	d10c      	bne.n	800a26e <_vfiprintf_r+0x176>
 800a254:	7863      	ldrb	r3, [r4, #1]
 800a256:	2b2a      	cmp	r3, #42	; 0x2a
 800a258:	d135      	bne.n	800a2c6 <_vfiprintf_r+0x1ce>
 800a25a:	9b03      	ldr	r3, [sp, #12]
 800a25c:	1d1a      	adds	r2, r3, #4
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	9203      	str	r2, [sp, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	bfb8      	it	lt
 800a266:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a26a:	3402      	adds	r4, #2
 800a26c:	9305      	str	r3, [sp, #20]
 800a26e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a354 <_vfiprintf_r+0x25c>
 800a272:	7821      	ldrb	r1, [r4, #0]
 800a274:	2203      	movs	r2, #3
 800a276:	4650      	mov	r0, sl
 800a278:	f7f5 ffb2 	bl	80001e0 <memchr>
 800a27c:	b140      	cbz	r0, 800a290 <_vfiprintf_r+0x198>
 800a27e:	2340      	movs	r3, #64	; 0x40
 800a280:	eba0 000a 	sub.w	r0, r0, sl
 800a284:	fa03 f000 	lsl.w	r0, r3, r0
 800a288:	9b04      	ldr	r3, [sp, #16]
 800a28a:	4303      	orrs	r3, r0
 800a28c:	3401      	adds	r4, #1
 800a28e:	9304      	str	r3, [sp, #16]
 800a290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a294:	482c      	ldr	r0, [pc, #176]	; (800a348 <_vfiprintf_r+0x250>)
 800a296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a29a:	2206      	movs	r2, #6
 800a29c:	f7f5 ffa0 	bl	80001e0 <memchr>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d03f      	beq.n	800a324 <_vfiprintf_r+0x22c>
 800a2a4:	4b29      	ldr	r3, [pc, #164]	; (800a34c <_vfiprintf_r+0x254>)
 800a2a6:	bb1b      	cbnz	r3, 800a2f0 <_vfiprintf_r+0x1f8>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	3307      	adds	r3, #7
 800a2ac:	f023 0307 	bic.w	r3, r3, #7
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	9303      	str	r3, [sp, #12]
 800a2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b6:	443b      	add	r3, r7
 800a2b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ba:	e767      	b.n	800a18c <_vfiprintf_r+0x94>
 800a2bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	e7a5      	b.n	800a212 <_vfiprintf_r+0x11a>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	3401      	adds	r4, #1
 800a2ca:	9305      	str	r3, [sp, #20]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f04f 0c0a 	mov.w	ip, #10
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d8:	3a30      	subs	r2, #48	; 0x30
 800a2da:	2a09      	cmp	r2, #9
 800a2dc:	d903      	bls.n	800a2e6 <_vfiprintf_r+0x1ee>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0c5      	beq.n	800a26e <_vfiprintf_r+0x176>
 800a2e2:	9105      	str	r1, [sp, #20]
 800a2e4:	e7c3      	b.n	800a26e <_vfiprintf_r+0x176>
 800a2e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e7f0      	b.n	800a2d2 <_vfiprintf_r+0x1da>
 800a2f0:	ab03      	add	r3, sp, #12
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	4b16      	ldr	r3, [pc, #88]	; (800a350 <_vfiprintf_r+0x258>)
 800a2f8:	a904      	add	r1, sp, #16
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f000 f8cc 	bl	800a498 <_printf_float>
 800a300:	4607      	mov	r7, r0
 800a302:	1c78      	adds	r0, r7, #1
 800a304:	d1d6      	bne.n	800a2b4 <_vfiprintf_r+0x1bc>
 800a306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a308:	07d9      	lsls	r1, r3, #31
 800a30a:	d405      	bmi.n	800a318 <_vfiprintf_r+0x220>
 800a30c:	89ab      	ldrh	r3, [r5, #12]
 800a30e:	059a      	lsls	r2, r3, #22
 800a310:	d402      	bmi.n	800a318 <_vfiprintf_r+0x220>
 800a312:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a314:	f003 f9ec 	bl	800d6f0 <__retarget_lock_release_recursive>
 800a318:	89ab      	ldrh	r3, [r5, #12]
 800a31a:	065b      	lsls	r3, r3, #25
 800a31c:	f53f af12 	bmi.w	800a144 <_vfiprintf_r+0x4c>
 800a320:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a322:	e711      	b.n	800a148 <_vfiprintf_r+0x50>
 800a324:	ab03      	add	r3, sp, #12
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	462a      	mov	r2, r5
 800a32a:	4b09      	ldr	r3, [pc, #36]	; (800a350 <_vfiprintf_r+0x258>)
 800a32c:	a904      	add	r1, sp, #16
 800a32e:	4630      	mov	r0, r6
 800a330:	f000 fb56 	bl	800a9e0 <_printf_i>
 800a334:	e7e4      	b.n	800a300 <_vfiprintf_r+0x208>
 800a336:	bf00      	nop
 800a338:	08040af8 	.word	0x08040af8
 800a33c:	08040b18 	.word	0x08040b18
 800a340:	08040ad8 	.word	0x08040ad8
 800a344:	080408a4 	.word	0x080408a4
 800a348:	080408ae 	.word	0x080408ae
 800a34c:	0800a499 	.word	0x0800a499
 800a350:	0800a0d3 	.word	0x0800a0d3
 800a354:	080408aa 	.word	0x080408aa

0800a358 <__cvt>:
 800a358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	ec55 4b10 	vmov	r4, r5, d0
 800a360:	2d00      	cmp	r5, #0
 800a362:	460e      	mov	r6, r1
 800a364:	4619      	mov	r1, r3
 800a366:	462b      	mov	r3, r5
 800a368:	bfbb      	ittet	lt
 800a36a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a36e:	461d      	movlt	r5, r3
 800a370:	2300      	movge	r3, #0
 800a372:	232d      	movlt	r3, #45	; 0x2d
 800a374:	700b      	strb	r3, [r1, #0]
 800a376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a378:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a37c:	4691      	mov	r9, r2
 800a37e:	f023 0820 	bic.w	r8, r3, #32
 800a382:	bfbc      	itt	lt
 800a384:	4622      	movlt	r2, r4
 800a386:	4614      	movlt	r4, r2
 800a388:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a38c:	d005      	beq.n	800a39a <__cvt+0x42>
 800a38e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a392:	d100      	bne.n	800a396 <__cvt+0x3e>
 800a394:	3601      	adds	r6, #1
 800a396:	2102      	movs	r1, #2
 800a398:	e000      	b.n	800a39c <__cvt+0x44>
 800a39a:	2103      	movs	r1, #3
 800a39c:	ab03      	add	r3, sp, #12
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	ab02      	add	r3, sp, #8
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	ec45 4b10 	vmov	d0, r4, r5
 800a3a8:	4653      	mov	r3, sl
 800a3aa:	4632      	mov	r2, r6
 800a3ac:	f001 fe88 	bl	800c0c0 <_dtoa_r>
 800a3b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	d102      	bne.n	800a3be <__cvt+0x66>
 800a3b8:	f019 0f01 	tst.w	r9, #1
 800a3bc:	d022      	beq.n	800a404 <__cvt+0xac>
 800a3be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3c2:	eb07 0906 	add.w	r9, r7, r6
 800a3c6:	d110      	bne.n	800a3ea <__cvt+0x92>
 800a3c8:	783b      	ldrb	r3, [r7, #0]
 800a3ca:	2b30      	cmp	r3, #48	; 0x30
 800a3cc:	d10a      	bne.n	800a3e4 <__cvt+0x8c>
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	f7f6 fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3da:	b918      	cbnz	r0, 800a3e4 <__cvt+0x8c>
 800a3dc:	f1c6 0601 	rsb	r6, r6, #1
 800a3e0:	f8ca 6000 	str.w	r6, [sl]
 800a3e4:	f8da 3000 	ldr.w	r3, [sl]
 800a3e8:	4499      	add	r9, r3
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f6 fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3f6:	b108      	cbz	r0, 800a3fc <__cvt+0xa4>
 800a3f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3fc:	2230      	movs	r2, #48	; 0x30
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	454b      	cmp	r3, r9
 800a402:	d307      	bcc.n	800a414 <__cvt+0xbc>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a408:	1bdb      	subs	r3, r3, r7
 800a40a:	4638      	mov	r0, r7
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	b004      	add	sp, #16
 800a410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a414:	1c59      	adds	r1, r3, #1
 800a416:	9103      	str	r1, [sp, #12]
 800a418:	701a      	strb	r2, [r3, #0]
 800a41a:	e7f0      	b.n	800a3fe <__cvt+0xa6>

0800a41c <__exponent>:
 800a41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a41e:	4603      	mov	r3, r0
 800a420:	2900      	cmp	r1, #0
 800a422:	bfb8      	it	lt
 800a424:	4249      	neglt	r1, r1
 800a426:	f803 2b02 	strb.w	r2, [r3], #2
 800a42a:	bfb4      	ite	lt
 800a42c:	222d      	movlt	r2, #45	; 0x2d
 800a42e:	222b      	movge	r2, #43	; 0x2b
 800a430:	2909      	cmp	r1, #9
 800a432:	7042      	strb	r2, [r0, #1]
 800a434:	dd2a      	ble.n	800a48c <__exponent+0x70>
 800a436:	f10d 0407 	add.w	r4, sp, #7
 800a43a:	46a4      	mov	ip, r4
 800a43c:	270a      	movs	r7, #10
 800a43e:	46a6      	mov	lr, r4
 800a440:	460a      	mov	r2, r1
 800a442:	fb91 f6f7 	sdiv	r6, r1, r7
 800a446:	fb07 1516 	mls	r5, r7, r6, r1
 800a44a:	3530      	adds	r5, #48	; 0x30
 800a44c:	2a63      	cmp	r2, #99	; 0x63
 800a44e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a452:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a456:	4631      	mov	r1, r6
 800a458:	dcf1      	bgt.n	800a43e <__exponent+0x22>
 800a45a:	3130      	adds	r1, #48	; 0x30
 800a45c:	f1ae 0502 	sub.w	r5, lr, #2
 800a460:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a464:	1c44      	adds	r4, r0, #1
 800a466:	4629      	mov	r1, r5
 800a468:	4561      	cmp	r1, ip
 800a46a:	d30a      	bcc.n	800a482 <__exponent+0x66>
 800a46c:	f10d 0209 	add.w	r2, sp, #9
 800a470:	eba2 020e 	sub.w	r2, r2, lr
 800a474:	4565      	cmp	r5, ip
 800a476:	bf88      	it	hi
 800a478:	2200      	movhi	r2, #0
 800a47a:	4413      	add	r3, r2
 800a47c:	1a18      	subs	r0, r3, r0
 800a47e:	b003      	add	sp, #12
 800a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a482:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a486:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a48a:	e7ed      	b.n	800a468 <__exponent+0x4c>
 800a48c:	2330      	movs	r3, #48	; 0x30
 800a48e:	3130      	adds	r1, #48	; 0x30
 800a490:	7083      	strb	r3, [r0, #2]
 800a492:	70c1      	strb	r1, [r0, #3]
 800a494:	1d03      	adds	r3, r0, #4
 800a496:	e7f1      	b.n	800a47c <__exponent+0x60>

0800a498 <_printf_float>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	ed2d 8b02 	vpush	{d8}
 800a4a0:	b08d      	sub	sp, #52	; 0x34
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	461f      	mov	r7, r3
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	f003 f919 	bl	800d6e4 <_localeconv_r>
 800a4b2:	f8d0 a000 	ldr.w	sl, [r0]
 800a4b6:	4650      	mov	r0, sl
 800a4b8:	f7f5 fe8a 	bl	80001d0 <strlen>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a4c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a4cc:	3307      	adds	r3, #7
 800a4ce:	f023 0307 	bic.w	r3, r3, #7
 800a4d2:	f103 0208 	add.w	r2, r3, #8
 800a4d6:	f8c8 2000 	str.w	r2, [r8]
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a4e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a4e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4ea:	9307      	str	r3, [sp, #28]
 800a4ec:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4f0:	ee08 0a10 	vmov	s16, r0
 800a4f4:	4b9f      	ldr	r3, [pc, #636]	; (800a774 <_printf_float+0x2dc>)
 800a4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4fe:	f7f6 fb15 	bl	8000b2c <__aeabi_dcmpun>
 800a502:	bb88      	cbnz	r0, 800a568 <_printf_float+0xd0>
 800a504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a508:	4b9a      	ldr	r3, [pc, #616]	; (800a774 <_printf_float+0x2dc>)
 800a50a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a50e:	f7f6 faef 	bl	8000af0 <__aeabi_dcmple>
 800a512:	bb48      	cbnz	r0, 800a568 <_printf_float+0xd0>
 800a514:	2200      	movs	r2, #0
 800a516:	2300      	movs	r3, #0
 800a518:	4640      	mov	r0, r8
 800a51a:	4649      	mov	r1, r9
 800a51c:	f7f6 fade 	bl	8000adc <__aeabi_dcmplt>
 800a520:	b110      	cbz	r0, 800a528 <_printf_float+0x90>
 800a522:	232d      	movs	r3, #45	; 0x2d
 800a524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a528:	4b93      	ldr	r3, [pc, #588]	; (800a778 <_printf_float+0x2e0>)
 800a52a:	4894      	ldr	r0, [pc, #592]	; (800a77c <_printf_float+0x2e4>)
 800a52c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a530:	bf94      	ite	ls
 800a532:	4698      	movls	r8, r3
 800a534:	4680      	movhi	r8, r0
 800a536:	2303      	movs	r3, #3
 800a538:	6123      	str	r3, [r4, #16]
 800a53a:	9b05      	ldr	r3, [sp, #20]
 800a53c:	f023 0204 	bic.w	r2, r3, #4
 800a540:	6022      	str	r2, [r4, #0]
 800a542:	f04f 0900 	mov.w	r9, #0
 800a546:	9700      	str	r7, [sp, #0]
 800a548:	4633      	mov	r3, r6
 800a54a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a54c:	4621      	mov	r1, r4
 800a54e:	4628      	mov	r0, r5
 800a550:	f000 f9d8 	bl	800a904 <_printf_common>
 800a554:	3001      	adds	r0, #1
 800a556:	f040 8090 	bne.w	800a67a <_printf_float+0x1e2>
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a55e:	b00d      	add	sp, #52	; 0x34
 800a560:	ecbd 8b02 	vpop	{d8}
 800a564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a568:	4642      	mov	r2, r8
 800a56a:	464b      	mov	r3, r9
 800a56c:	4640      	mov	r0, r8
 800a56e:	4649      	mov	r1, r9
 800a570:	f7f6 fadc 	bl	8000b2c <__aeabi_dcmpun>
 800a574:	b140      	cbz	r0, 800a588 <_printf_float+0xf0>
 800a576:	464b      	mov	r3, r9
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bfbc      	itt	lt
 800a57c:	232d      	movlt	r3, #45	; 0x2d
 800a57e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a582:	487f      	ldr	r0, [pc, #508]	; (800a780 <_printf_float+0x2e8>)
 800a584:	4b7f      	ldr	r3, [pc, #508]	; (800a784 <_printf_float+0x2ec>)
 800a586:	e7d1      	b.n	800a52c <_printf_float+0x94>
 800a588:	6863      	ldr	r3, [r4, #4]
 800a58a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a58e:	9206      	str	r2, [sp, #24]
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	d13f      	bne.n	800a614 <_printf_float+0x17c>
 800a594:	2306      	movs	r3, #6
 800a596:	6063      	str	r3, [r4, #4]
 800a598:	9b05      	ldr	r3, [sp, #20]
 800a59a:	6861      	ldr	r1, [r4, #4]
 800a59c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	9303      	str	r3, [sp, #12]
 800a5a4:	ab0a      	add	r3, sp, #40	; 0x28
 800a5a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a5aa:	ab09      	add	r3, sp, #36	; 0x24
 800a5ac:	ec49 8b10 	vmov	d0, r8, r9
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	6022      	str	r2, [r4, #0]
 800a5b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f7ff fecd 	bl	800a358 <__cvt>
 800a5be:	9b06      	ldr	r3, [sp, #24]
 800a5c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5c2:	2b47      	cmp	r3, #71	; 0x47
 800a5c4:	4680      	mov	r8, r0
 800a5c6:	d108      	bne.n	800a5da <_printf_float+0x142>
 800a5c8:	1cc8      	adds	r0, r1, #3
 800a5ca:	db02      	blt.n	800a5d2 <_printf_float+0x13a>
 800a5cc:	6863      	ldr	r3, [r4, #4]
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	dd41      	ble.n	800a656 <_printf_float+0x1be>
 800a5d2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a5d6:	fa5f fb8b 	uxtb.w	fp, fp
 800a5da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5de:	d820      	bhi.n	800a622 <_printf_float+0x18a>
 800a5e0:	3901      	subs	r1, #1
 800a5e2:	465a      	mov	r2, fp
 800a5e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a5e8:	9109      	str	r1, [sp, #36]	; 0x24
 800a5ea:	f7ff ff17 	bl	800a41c <__exponent>
 800a5ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5f0:	1813      	adds	r3, r2, r0
 800a5f2:	2a01      	cmp	r2, #1
 800a5f4:	4681      	mov	r9, r0
 800a5f6:	6123      	str	r3, [r4, #16]
 800a5f8:	dc02      	bgt.n	800a600 <_printf_float+0x168>
 800a5fa:	6822      	ldr	r2, [r4, #0]
 800a5fc:	07d2      	lsls	r2, r2, #31
 800a5fe:	d501      	bpl.n	800a604 <_printf_float+0x16c>
 800a600:	3301      	adds	r3, #1
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d09c      	beq.n	800a546 <_printf_float+0xae>
 800a60c:	232d      	movs	r3, #45	; 0x2d
 800a60e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a612:	e798      	b.n	800a546 <_printf_float+0xae>
 800a614:	9a06      	ldr	r2, [sp, #24]
 800a616:	2a47      	cmp	r2, #71	; 0x47
 800a618:	d1be      	bne.n	800a598 <_printf_float+0x100>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1bc      	bne.n	800a598 <_printf_float+0x100>
 800a61e:	2301      	movs	r3, #1
 800a620:	e7b9      	b.n	800a596 <_printf_float+0xfe>
 800a622:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a626:	d118      	bne.n	800a65a <_printf_float+0x1c2>
 800a628:	2900      	cmp	r1, #0
 800a62a:	6863      	ldr	r3, [r4, #4]
 800a62c:	dd0b      	ble.n	800a646 <_printf_float+0x1ae>
 800a62e:	6121      	str	r1, [r4, #16]
 800a630:	b913      	cbnz	r3, 800a638 <_printf_float+0x1a0>
 800a632:	6822      	ldr	r2, [r4, #0]
 800a634:	07d0      	lsls	r0, r2, #31
 800a636:	d502      	bpl.n	800a63e <_printf_float+0x1a6>
 800a638:	3301      	adds	r3, #1
 800a63a:	440b      	add	r3, r1
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a640:	f04f 0900 	mov.w	r9, #0
 800a644:	e7de      	b.n	800a604 <_printf_float+0x16c>
 800a646:	b913      	cbnz	r3, 800a64e <_printf_float+0x1b6>
 800a648:	6822      	ldr	r2, [r4, #0]
 800a64a:	07d2      	lsls	r2, r2, #31
 800a64c:	d501      	bpl.n	800a652 <_printf_float+0x1ba>
 800a64e:	3302      	adds	r3, #2
 800a650:	e7f4      	b.n	800a63c <_printf_float+0x1a4>
 800a652:	2301      	movs	r3, #1
 800a654:	e7f2      	b.n	800a63c <_printf_float+0x1a4>
 800a656:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65c:	4299      	cmp	r1, r3
 800a65e:	db05      	blt.n	800a66c <_printf_float+0x1d4>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	6121      	str	r1, [r4, #16]
 800a664:	07d8      	lsls	r0, r3, #31
 800a666:	d5ea      	bpl.n	800a63e <_printf_float+0x1a6>
 800a668:	1c4b      	adds	r3, r1, #1
 800a66a:	e7e7      	b.n	800a63c <_printf_float+0x1a4>
 800a66c:	2900      	cmp	r1, #0
 800a66e:	bfd4      	ite	le
 800a670:	f1c1 0202 	rsble	r2, r1, #2
 800a674:	2201      	movgt	r2, #1
 800a676:	4413      	add	r3, r2
 800a678:	e7e0      	b.n	800a63c <_printf_float+0x1a4>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	055a      	lsls	r2, r3, #21
 800a67e:	d407      	bmi.n	800a690 <_printf_float+0x1f8>
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	4642      	mov	r2, r8
 800a684:	4631      	mov	r1, r6
 800a686:	4628      	mov	r0, r5
 800a688:	47b8      	blx	r7
 800a68a:	3001      	adds	r0, #1
 800a68c:	d12c      	bne.n	800a6e8 <_printf_float+0x250>
 800a68e:	e764      	b.n	800a55a <_printf_float+0xc2>
 800a690:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a694:	f240 80e0 	bls.w	800a858 <_printf_float+0x3c0>
 800a698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a69c:	2200      	movs	r2, #0
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f7f6 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d034      	beq.n	800a712 <_printf_float+0x27a>
 800a6a8:	4a37      	ldr	r2, [pc, #220]	; (800a788 <_printf_float+0x2f0>)
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4631      	mov	r1, r6
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	47b8      	blx	r7
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	f43f af51 	beq.w	800a55a <_printf_float+0xc2>
 800a6b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	db02      	blt.n	800a6c6 <_printf_float+0x22e>
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	07d8      	lsls	r0, r3, #31
 800a6c4:	d510      	bpl.n	800a6e8 <_printf_float+0x250>
 800a6c6:	ee18 3a10 	vmov	r3, s16
 800a6ca:	4652      	mov	r2, sl
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b8      	blx	r7
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	f43f af41 	beq.w	800a55a <_printf_float+0xc2>
 800a6d8:	f04f 0800 	mov.w	r8, #0
 800a6dc:	f104 091a 	add.w	r9, r4, #26
 800a6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	4543      	cmp	r3, r8
 800a6e6:	dc09      	bgt.n	800a6fc <_printf_float+0x264>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	079b      	lsls	r3, r3, #30
 800a6ec:	f100 8105 	bmi.w	800a8fa <_printf_float+0x462>
 800a6f0:	68e0      	ldr	r0, [r4, #12]
 800a6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	bfb8      	it	lt
 800a6f8:	4618      	movlt	r0, r3
 800a6fa:	e730      	b.n	800a55e <_printf_float+0xc6>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	464a      	mov	r2, r9
 800a700:	4631      	mov	r1, r6
 800a702:	4628      	mov	r0, r5
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	f43f af27 	beq.w	800a55a <_printf_float+0xc2>
 800a70c:	f108 0801 	add.w	r8, r8, #1
 800a710:	e7e6      	b.n	800a6e0 <_printf_float+0x248>
 800a712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a714:	2b00      	cmp	r3, #0
 800a716:	dc39      	bgt.n	800a78c <_printf_float+0x2f4>
 800a718:	4a1b      	ldr	r2, [pc, #108]	; (800a788 <_printf_float+0x2f0>)
 800a71a:	2301      	movs	r3, #1
 800a71c:	4631      	mov	r1, r6
 800a71e:	4628      	mov	r0, r5
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	f43f af19 	beq.w	800a55a <_printf_float+0xc2>
 800a728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a72c:	4313      	orrs	r3, r2
 800a72e:	d102      	bne.n	800a736 <_printf_float+0x29e>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	07d9      	lsls	r1, r3, #31
 800a734:	d5d8      	bpl.n	800a6e8 <_printf_float+0x250>
 800a736:	ee18 3a10 	vmov	r3, s16
 800a73a:	4652      	mov	r2, sl
 800a73c:	4631      	mov	r1, r6
 800a73e:	4628      	mov	r0, r5
 800a740:	47b8      	blx	r7
 800a742:	3001      	adds	r0, #1
 800a744:	f43f af09 	beq.w	800a55a <_printf_float+0xc2>
 800a748:	f04f 0900 	mov.w	r9, #0
 800a74c:	f104 0a1a 	add.w	sl, r4, #26
 800a750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a752:	425b      	negs	r3, r3
 800a754:	454b      	cmp	r3, r9
 800a756:	dc01      	bgt.n	800a75c <_printf_float+0x2c4>
 800a758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a75a:	e792      	b.n	800a682 <_printf_float+0x1ea>
 800a75c:	2301      	movs	r3, #1
 800a75e:	4652      	mov	r2, sl
 800a760:	4631      	mov	r1, r6
 800a762:	4628      	mov	r0, r5
 800a764:	47b8      	blx	r7
 800a766:	3001      	adds	r0, #1
 800a768:	f43f aef7 	beq.w	800a55a <_printf_float+0xc2>
 800a76c:	f109 0901 	add.w	r9, r9, #1
 800a770:	e7ee      	b.n	800a750 <_printf_float+0x2b8>
 800a772:	bf00      	nop
 800a774:	7fefffff 	.word	0x7fefffff
 800a778:	080408b5 	.word	0x080408b5
 800a77c:	080408b9 	.word	0x080408b9
 800a780:	080408c1 	.word	0x080408c1
 800a784:	080408bd 	.word	0x080408bd
 800a788:	080408c5 	.word	0x080408c5
 800a78c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a78e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a790:	429a      	cmp	r2, r3
 800a792:	bfa8      	it	ge
 800a794:	461a      	movge	r2, r3
 800a796:	2a00      	cmp	r2, #0
 800a798:	4691      	mov	r9, r2
 800a79a:	dc37      	bgt.n	800a80c <_printf_float+0x374>
 800a79c:	f04f 0b00 	mov.w	fp, #0
 800a7a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7a4:	f104 021a 	add.w	r2, r4, #26
 800a7a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	eba3 0309 	sub.w	r3, r3, r9
 800a7b0:	455b      	cmp	r3, fp
 800a7b2:	dc33      	bgt.n	800a81c <_printf_float+0x384>
 800a7b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	db3b      	blt.n	800a834 <_printf_float+0x39c>
 800a7bc:	6823      	ldr	r3, [r4, #0]
 800a7be:	07da      	lsls	r2, r3, #31
 800a7c0:	d438      	bmi.n	800a834 <_printf_float+0x39c>
 800a7c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7c4:	9b05      	ldr	r3, [sp, #20]
 800a7c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	eba2 0901 	sub.w	r9, r2, r1
 800a7ce:	4599      	cmp	r9, r3
 800a7d0:	bfa8      	it	ge
 800a7d2:	4699      	movge	r9, r3
 800a7d4:	f1b9 0f00 	cmp.w	r9, #0
 800a7d8:	dc35      	bgt.n	800a846 <_printf_float+0x3ae>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7e2:	f104 0a1a 	add.w	sl, r4, #26
 800a7e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	eba3 0309 	sub.w	r3, r3, r9
 800a7f0:	4543      	cmp	r3, r8
 800a7f2:	f77f af79 	ble.w	800a6e8 <_printf_float+0x250>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	4652      	mov	r2, sl
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b8      	blx	r7
 800a800:	3001      	adds	r0, #1
 800a802:	f43f aeaa 	beq.w	800a55a <_printf_float+0xc2>
 800a806:	f108 0801 	add.w	r8, r8, #1
 800a80a:	e7ec      	b.n	800a7e6 <_printf_float+0x34e>
 800a80c:	4613      	mov	r3, r2
 800a80e:	4631      	mov	r1, r6
 800a810:	4642      	mov	r2, r8
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	d1c0      	bne.n	800a79c <_printf_float+0x304>
 800a81a:	e69e      	b.n	800a55a <_printf_float+0xc2>
 800a81c:	2301      	movs	r3, #1
 800a81e:	4631      	mov	r1, r6
 800a820:	4628      	mov	r0, r5
 800a822:	9205      	str	r2, [sp, #20]
 800a824:	47b8      	blx	r7
 800a826:	3001      	adds	r0, #1
 800a828:	f43f ae97 	beq.w	800a55a <_printf_float+0xc2>
 800a82c:	9a05      	ldr	r2, [sp, #20]
 800a82e:	f10b 0b01 	add.w	fp, fp, #1
 800a832:	e7b9      	b.n	800a7a8 <_printf_float+0x310>
 800a834:	ee18 3a10 	vmov	r3, s16
 800a838:	4652      	mov	r2, sl
 800a83a:	4631      	mov	r1, r6
 800a83c:	4628      	mov	r0, r5
 800a83e:	47b8      	blx	r7
 800a840:	3001      	adds	r0, #1
 800a842:	d1be      	bne.n	800a7c2 <_printf_float+0x32a>
 800a844:	e689      	b.n	800a55a <_printf_float+0xc2>
 800a846:	9a05      	ldr	r2, [sp, #20]
 800a848:	464b      	mov	r3, r9
 800a84a:	4442      	add	r2, r8
 800a84c:	4631      	mov	r1, r6
 800a84e:	4628      	mov	r0, r5
 800a850:	47b8      	blx	r7
 800a852:	3001      	adds	r0, #1
 800a854:	d1c1      	bne.n	800a7da <_printf_float+0x342>
 800a856:	e680      	b.n	800a55a <_printf_float+0xc2>
 800a858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a85a:	2a01      	cmp	r2, #1
 800a85c:	dc01      	bgt.n	800a862 <_printf_float+0x3ca>
 800a85e:	07db      	lsls	r3, r3, #31
 800a860:	d538      	bpl.n	800a8d4 <_printf_float+0x43c>
 800a862:	2301      	movs	r3, #1
 800a864:	4642      	mov	r2, r8
 800a866:	4631      	mov	r1, r6
 800a868:	4628      	mov	r0, r5
 800a86a:	47b8      	blx	r7
 800a86c:	3001      	adds	r0, #1
 800a86e:	f43f ae74 	beq.w	800a55a <_printf_float+0xc2>
 800a872:	ee18 3a10 	vmov	r3, s16
 800a876:	4652      	mov	r2, sl
 800a878:	4631      	mov	r1, r6
 800a87a:	4628      	mov	r0, r5
 800a87c:	47b8      	blx	r7
 800a87e:	3001      	adds	r0, #1
 800a880:	f43f ae6b 	beq.w	800a55a <_printf_float+0xc2>
 800a884:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a888:	2200      	movs	r2, #0
 800a88a:	2300      	movs	r3, #0
 800a88c:	f7f6 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a890:	b9d8      	cbnz	r0, 800a8ca <_printf_float+0x432>
 800a892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a894:	f108 0201 	add.w	r2, r8, #1
 800a898:	3b01      	subs	r3, #1
 800a89a:	4631      	mov	r1, r6
 800a89c:	4628      	mov	r0, r5
 800a89e:	47b8      	blx	r7
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d10e      	bne.n	800a8c2 <_printf_float+0x42a>
 800a8a4:	e659      	b.n	800a55a <_printf_float+0xc2>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	47b8      	blx	r7
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	f43f ae52 	beq.w	800a55a <_printf_float+0xc2>
 800a8b6:	f108 0801 	add.w	r8, r8, #1
 800a8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	4543      	cmp	r3, r8
 800a8c0:	dcf1      	bgt.n	800a8a6 <_printf_float+0x40e>
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a8c8:	e6dc      	b.n	800a684 <_printf_float+0x1ec>
 800a8ca:	f04f 0800 	mov.w	r8, #0
 800a8ce:	f104 0a1a 	add.w	sl, r4, #26
 800a8d2:	e7f2      	b.n	800a8ba <_printf_float+0x422>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	4642      	mov	r2, r8
 800a8d8:	e7df      	b.n	800a89a <_printf_float+0x402>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	464a      	mov	r2, r9
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	f43f ae38 	beq.w	800a55a <_printf_float+0xc2>
 800a8ea:	f108 0801 	add.w	r8, r8, #1
 800a8ee:	68e3      	ldr	r3, [r4, #12]
 800a8f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8f2:	1a5b      	subs	r3, r3, r1
 800a8f4:	4543      	cmp	r3, r8
 800a8f6:	dcf0      	bgt.n	800a8da <_printf_float+0x442>
 800a8f8:	e6fa      	b.n	800a6f0 <_printf_float+0x258>
 800a8fa:	f04f 0800 	mov.w	r8, #0
 800a8fe:	f104 0919 	add.w	r9, r4, #25
 800a902:	e7f4      	b.n	800a8ee <_printf_float+0x456>

0800a904 <_printf_common>:
 800a904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a908:	4616      	mov	r6, r2
 800a90a:	4699      	mov	r9, r3
 800a90c:	688a      	ldr	r2, [r1, #8]
 800a90e:	690b      	ldr	r3, [r1, #16]
 800a910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a914:	4293      	cmp	r3, r2
 800a916:	bfb8      	it	lt
 800a918:	4613      	movlt	r3, r2
 800a91a:	6033      	str	r3, [r6, #0]
 800a91c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a920:	4607      	mov	r7, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b10a      	cbz	r2, 800a92a <_printf_common+0x26>
 800a926:	3301      	adds	r3, #1
 800a928:	6033      	str	r3, [r6, #0]
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	0699      	lsls	r1, r3, #26
 800a92e:	bf42      	ittt	mi
 800a930:	6833      	ldrmi	r3, [r6, #0]
 800a932:	3302      	addmi	r3, #2
 800a934:	6033      	strmi	r3, [r6, #0]
 800a936:	6825      	ldr	r5, [r4, #0]
 800a938:	f015 0506 	ands.w	r5, r5, #6
 800a93c:	d106      	bne.n	800a94c <_printf_common+0x48>
 800a93e:	f104 0a19 	add.w	sl, r4, #25
 800a942:	68e3      	ldr	r3, [r4, #12]
 800a944:	6832      	ldr	r2, [r6, #0]
 800a946:	1a9b      	subs	r3, r3, r2
 800a948:	42ab      	cmp	r3, r5
 800a94a:	dc26      	bgt.n	800a99a <_printf_common+0x96>
 800a94c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a950:	1e13      	subs	r3, r2, #0
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	bf18      	it	ne
 800a956:	2301      	movne	r3, #1
 800a958:	0692      	lsls	r2, r2, #26
 800a95a:	d42b      	bmi.n	800a9b4 <_printf_common+0xb0>
 800a95c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a960:	4649      	mov	r1, r9
 800a962:	4638      	mov	r0, r7
 800a964:	47c0      	blx	r8
 800a966:	3001      	adds	r0, #1
 800a968:	d01e      	beq.n	800a9a8 <_printf_common+0xa4>
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	68e5      	ldr	r5, [r4, #12]
 800a96e:	6832      	ldr	r2, [r6, #0]
 800a970:	f003 0306 	and.w	r3, r3, #6
 800a974:	2b04      	cmp	r3, #4
 800a976:	bf08      	it	eq
 800a978:	1aad      	subeq	r5, r5, r2
 800a97a:	68a3      	ldr	r3, [r4, #8]
 800a97c:	6922      	ldr	r2, [r4, #16]
 800a97e:	bf0c      	ite	eq
 800a980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a984:	2500      	movne	r5, #0
 800a986:	4293      	cmp	r3, r2
 800a988:	bfc4      	itt	gt
 800a98a:	1a9b      	subgt	r3, r3, r2
 800a98c:	18ed      	addgt	r5, r5, r3
 800a98e:	2600      	movs	r6, #0
 800a990:	341a      	adds	r4, #26
 800a992:	42b5      	cmp	r5, r6
 800a994:	d11a      	bne.n	800a9cc <_printf_common+0xc8>
 800a996:	2000      	movs	r0, #0
 800a998:	e008      	b.n	800a9ac <_printf_common+0xa8>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4652      	mov	r2, sl
 800a99e:	4649      	mov	r1, r9
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	47c0      	blx	r8
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d103      	bne.n	800a9b0 <_printf_common+0xac>
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	e7c6      	b.n	800a942 <_printf_common+0x3e>
 800a9b4:	18e1      	adds	r1, r4, r3
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	2030      	movs	r0, #48	; 0x30
 800a9ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9be:	4422      	add	r2, r4
 800a9c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9c8:	3302      	adds	r3, #2
 800a9ca:	e7c7      	b.n	800a95c <_printf_common+0x58>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	47c0      	blx	r8
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d0e6      	beq.n	800a9a8 <_printf_common+0xa4>
 800a9da:	3601      	adds	r6, #1
 800a9dc:	e7d9      	b.n	800a992 <_printf_common+0x8e>
	...

0800a9e0 <_printf_i>:
 800a9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	4691      	mov	r9, r2
 800a9e8:	7e27      	ldrb	r7, [r4, #24]
 800a9ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a9ec:	2f78      	cmp	r7, #120	; 0x78
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	469a      	mov	sl, r3
 800a9f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9f6:	d807      	bhi.n	800aa08 <_printf_i+0x28>
 800a9f8:	2f62      	cmp	r7, #98	; 0x62
 800a9fa:	d80a      	bhi.n	800aa12 <_printf_i+0x32>
 800a9fc:	2f00      	cmp	r7, #0
 800a9fe:	f000 80d8 	beq.w	800abb2 <_printf_i+0x1d2>
 800aa02:	2f58      	cmp	r7, #88	; 0x58
 800aa04:	f000 80a3 	beq.w	800ab4e <_printf_i+0x16e>
 800aa08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa10:	e03a      	b.n	800aa88 <_printf_i+0xa8>
 800aa12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa16:	2b15      	cmp	r3, #21
 800aa18:	d8f6      	bhi.n	800aa08 <_printf_i+0x28>
 800aa1a:	a001      	add	r0, pc, #4	; (adr r0, 800aa20 <_printf_i+0x40>)
 800aa1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aa20:	0800aa79 	.word	0x0800aa79
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa09 	.word	0x0800aa09
 800aa2c:	0800aa09 	.word	0x0800aa09
 800aa30:	0800aa09 	.word	0x0800aa09
 800aa34:	0800aa09 	.word	0x0800aa09
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aa09 	.word	0x0800aa09
 800aa40:	0800aa09 	.word	0x0800aa09
 800aa44:	0800aa09 	.word	0x0800aa09
 800aa48:	0800aa09 	.word	0x0800aa09
 800aa4c:	0800ab99 	.word	0x0800ab99
 800aa50:	0800aabd 	.word	0x0800aabd
 800aa54:	0800ab7b 	.word	0x0800ab7b
 800aa58:	0800aa09 	.word	0x0800aa09
 800aa5c:	0800aa09 	.word	0x0800aa09
 800aa60:	0800abbb 	.word	0x0800abbb
 800aa64:	0800aa09 	.word	0x0800aa09
 800aa68:	0800aabd 	.word	0x0800aabd
 800aa6c:	0800aa09 	.word	0x0800aa09
 800aa70:	0800aa09 	.word	0x0800aa09
 800aa74:	0800ab83 	.word	0x0800ab83
 800aa78:	680b      	ldr	r3, [r1, #0]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	600a      	str	r2, [r1, #0]
 800aa80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e0a3      	b.n	800abd4 <_printf_i+0x1f4>
 800aa8c:	6825      	ldr	r5, [r4, #0]
 800aa8e:	6808      	ldr	r0, [r1, #0]
 800aa90:	062e      	lsls	r6, r5, #24
 800aa92:	f100 0304 	add.w	r3, r0, #4
 800aa96:	d50a      	bpl.n	800aaae <_printf_i+0xce>
 800aa98:	6805      	ldr	r5, [r0, #0]
 800aa9a:	600b      	str	r3, [r1, #0]
 800aa9c:	2d00      	cmp	r5, #0
 800aa9e:	da03      	bge.n	800aaa8 <_printf_i+0xc8>
 800aaa0:	232d      	movs	r3, #45	; 0x2d
 800aaa2:	426d      	negs	r5, r5
 800aaa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa8:	485e      	ldr	r0, [pc, #376]	; (800ac24 <_printf_i+0x244>)
 800aaaa:	230a      	movs	r3, #10
 800aaac:	e019      	b.n	800aae2 <_printf_i+0x102>
 800aaae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aab2:	6805      	ldr	r5, [r0, #0]
 800aab4:	600b      	str	r3, [r1, #0]
 800aab6:	bf18      	it	ne
 800aab8:	b22d      	sxthne	r5, r5
 800aaba:	e7ef      	b.n	800aa9c <_printf_i+0xbc>
 800aabc:	680b      	ldr	r3, [r1, #0]
 800aabe:	6825      	ldr	r5, [r4, #0]
 800aac0:	1d18      	adds	r0, r3, #4
 800aac2:	6008      	str	r0, [r1, #0]
 800aac4:	0628      	lsls	r0, r5, #24
 800aac6:	d501      	bpl.n	800aacc <_printf_i+0xec>
 800aac8:	681d      	ldr	r5, [r3, #0]
 800aaca:	e002      	b.n	800aad2 <_printf_i+0xf2>
 800aacc:	0669      	lsls	r1, r5, #25
 800aace:	d5fb      	bpl.n	800aac8 <_printf_i+0xe8>
 800aad0:	881d      	ldrh	r5, [r3, #0]
 800aad2:	4854      	ldr	r0, [pc, #336]	; (800ac24 <_printf_i+0x244>)
 800aad4:	2f6f      	cmp	r7, #111	; 0x6f
 800aad6:	bf0c      	ite	eq
 800aad8:	2308      	moveq	r3, #8
 800aada:	230a      	movne	r3, #10
 800aadc:	2100      	movs	r1, #0
 800aade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aae2:	6866      	ldr	r6, [r4, #4]
 800aae4:	60a6      	str	r6, [r4, #8]
 800aae6:	2e00      	cmp	r6, #0
 800aae8:	bfa2      	ittt	ge
 800aaea:	6821      	ldrge	r1, [r4, #0]
 800aaec:	f021 0104 	bicge.w	r1, r1, #4
 800aaf0:	6021      	strge	r1, [r4, #0]
 800aaf2:	b90d      	cbnz	r5, 800aaf8 <_printf_i+0x118>
 800aaf4:	2e00      	cmp	r6, #0
 800aaf6:	d04d      	beq.n	800ab94 <_printf_i+0x1b4>
 800aaf8:	4616      	mov	r6, r2
 800aafa:	fbb5 f1f3 	udiv	r1, r5, r3
 800aafe:	fb03 5711 	mls	r7, r3, r1, r5
 800ab02:	5dc7      	ldrb	r7, [r0, r7]
 800ab04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab08:	462f      	mov	r7, r5
 800ab0a:	42bb      	cmp	r3, r7
 800ab0c:	460d      	mov	r5, r1
 800ab0e:	d9f4      	bls.n	800aafa <_printf_i+0x11a>
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d10b      	bne.n	800ab2c <_printf_i+0x14c>
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	07df      	lsls	r7, r3, #31
 800ab18:	d508      	bpl.n	800ab2c <_printf_i+0x14c>
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	6861      	ldr	r1, [r4, #4]
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	bfde      	ittt	le
 800ab22:	2330      	movle	r3, #48	; 0x30
 800ab24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab28:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ab2c:	1b92      	subs	r2, r2, r6
 800ab2e:	6122      	str	r2, [r4, #16]
 800ab30:	f8cd a000 	str.w	sl, [sp]
 800ab34:	464b      	mov	r3, r9
 800ab36:	aa03      	add	r2, sp, #12
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	f7ff fee2 	bl	800a904 <_printf_common>
 800ab40:	3001      	adds	r0, #1
 800ab42:	d14c      	bne.n	800abde <_printf_i+0x1fe>
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab48:	b004      	add	sp, #16
 800ab4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4e:	4835      	ldr	r0, [pc, #212]	; (800ac24 <_printf_i+0x244>)
 800ab50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	680e      	ldr	r6, [r1, #0]
 800ab58:	061f      	lsls	r7, r3, #24
 800ab5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ab5e:	600e      	str	r6, [r1, #0]
 800ab60:	d514      	bpl.n	800ab8c <_printf_i+0x1ac>
 800ab62:	07d9      	lsls	r1, r3, #31
 800ab64:	bf44      	itt	mi
 800ab66:	f043 0320 	orrmi.w	r3, r3, #32
 800ab6a:	6023      	strmi	r3, [r4, #0]
 800ab6c:	b91d      	cbnz	r5, 800ab76 <_printf_i+0x196>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	f023 0320 	bic.w	r3, r3, #32
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	2310      	movs	r3, #16
 800ab78:	e7b0      	b.n	800aadc <_printf_i+0xfc>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	f043 0320 	orr.w	r3, r3, #32
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	2378      	movs	r3, #120	; 0x78
 800ab84:	4828      	ldr	r0, [pc, #160]	; (800ac28 <_printf_i+0x248>)
 800ab86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab8a:	e7e3      	b.n	800ab54 <_printf_i+0x174>
 800ab8c:	065e      	lsls	r6, r3, #25
 800ab8e:	bf48      	it	mi
 800ab90:	b2ad      	uxthmi	r5, r5
 800ab92:	e7e6      	b.n	800ab62 <_printf_i+0x182>
 800ab94:	4616      	mov	r6, r2
 800ab96:	e7bb      	b.n	800ab10 <_printf_i+0x130>
 800ab98:	680b      	ldr	r3, [r1, #0]
 800ab9a:	6826      	ldr	r6, [r4, #0]
 800ab9c:	6960      	ldr	r0, [r4, #20]
 800ab9e:	1d1d      	adds	r5, r3, #4
 800aba0:	600d      	str	r5, [r1, #0]
 800aba2:	0635      	lsls	r5, r6, #24
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	d501      	bpl.n	800abac <_printf_i+0x1cc>
 800aba8:	6018      	str	r0, [r3, #0]
 800abaa:	e002      	b.n	800abb2 <_printf_i+0x1d2>
 800abac:	0671      	lsls	r1, r6, #25
 800abae:	d5fb      	bpl.n	800aba8 <_printf_i+0x1c8>
 800abb0:	8018      	strh	r0, [r3, #0]
 800abb2:	2300      	movs	r3, #0
 800abb4:	6123      	str	r3, [r4, #16]
 800abb6:	4616      	mov	r6, r2
 800abb8:	e7ba      	b.n	800ab30 <_printf_i+0x150>
 800abba:	680b      	ldr	r3, [r1, #0]
 800abbc:	1d1a      	adds	r2, r3, #4
 800abbe:	600a      	str	r2, [r1, #0]
 800abc0:	681e      	ldr	r6, [r3, #0]
 800abc2:	6862      	ldr	r2, [r4, #4]
 800abc4:	2100      	movs	r1, #0
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7f5 fb0a 	bl	80001e0 <memchr>
 800abcc:	b108      	cbz	r0, 800abd2 <_printf_i+0x1f2>
 800abce:	1b80      	subs	r0, r0, r6
 800abd0:	6060      	str	r0, [r4, #4]
 800abd2:	6863      	ldr	r3, [r4, #4]
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	2300      	movs	r3, #0
 800abd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abdc:	e7a8      	b.n	800ab30 <_printf_i+0x150>
 800abde:	6923      	ldr	r3, [r4, #16]
 800abe0:	4632      	mov	r2, r6
 800abe2:	4649      	mov	r1, r9
 800abe4:	4640      	mov	r0, r8
 800abe6:	47d0      	blx	sl
 800abe8:	3001      	adds	r0, #1
 800abea:	d0ab      	beq.n	800ab44 <_printf_i+0x164>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	079b      	lsls	r3, r3, #30
 800abf0:	d413      	bmi.n	800ac1a <_printf_i+0x23a>
 800abf2:	68e0      	ldr	r0, [r4, #12]
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	4298      	cmp	r0, r3
 800abf8:	bfb8      	it	lt
 800abfa:	4618      	movlt	r0, r3
 800abfc:	e7a4      	b.n	800ab48 <_printf_i+0x168>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4632      	mov	r2, r6
 800ac02:	4649      	mov	r1, r9
 800ac04:	4640      	mov	r0, r8
 800ac06:	47d0      	blx	sl
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d09b      	beq.n	800ab44 <_printf_i+0x164>
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	68e3      	ldr	r3, [r4, #12]
 800ac10:	9903      	ldr	r1, [sp, #12]
 800ac12:	1a5b      	subs	r3, r3, r1
 800ac14:	42ab      	cmp	r3, r5
 800ac16:	dcf2      	bgt.n	800abfe <_printf_i+0x21e>
 800ac18:	e7eb      	b.n	800abf2 <_printf_i+0x212>
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	f104 0619 	add.w	r6, r4, #25
 800ac20:	e7f5      	b.n	800ac0e <_printf_i+0x22e>
 800ac22:	bf00      	nop
 800ac24:	080408c7 	.word	0x080408c7
 800ac28:	080408d8 	.word	0x080408d8

0800ac2c <_scanf_float>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	b087      	sub	sp, #28
 800ac32:	4617      	mov	r7, r2
 800ac34:	9303      	str	r3, [sp, #12]
 800ac36:	688b      	ldr	r3, [r1, #8]
 800ac38:	1e5a      	subs	r2, r3, #1
 800ac3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac3e:	bf83      	ittte	hi
 800ac40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac44:	195b      	addhi	r3, r3, r5
 800ac46:	9302      	strhi	r3, [sp, #8]
 800ac48:	2300      	movls	r3, #0
 800ac4a:	bf86      	itte	hi
 800ac4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac50:	608b      	strhi	r3, [r1, #8]
 800ac52:	9302      	strls	r3, [sp, #8]
 800ac54:	680b      	ldr	r3, [r1, #0]
 800ac56:	468b      	mov	fp, r1
 800ac58:	2500      	movs	r5, #0
 800ac5a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ac5e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ac62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ac66:	4680      	mov	r8, r0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	465e      	mov	r6, fp
 800ac6c:	46aa      	mov	sl, r5
 800ac6e:	46a9      	mov	r9, r5
 800ac70:	9501      	str	r5, [sp, #4]
 800ac72:	68a2      	ldr	r2, [r4, #8]
 800ac74:	b152      	cbz	r2, 800ac8c <_scanf_float+0x60>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2b4e      	cmp	r3, #78	; 0x4e
 800ac7c:	d864      	bhi.n	800ad48 <_scanf_float+0x11c>
 800ac7e:	2b40      	cmp	r3, #64	; 0x40
 800ac80:	d83c      	bhi.n	800acfc <_scanf_float+0xd0>
 800ac82:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ac86:	b2c8      	uxtb	r0, r1
 800ac88:	280e      	cmp	r0, #14
 800ac8a:	d93a      	bls.n	800ad02 <_scanf_float+0xd6>
 800ac8c:	f1b9 0f00 	cmp.w	r9, #0
 800ac90:	d003      	beq.n	800ac9a <_scanf_float+0x6e>
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ac9e:	f1ba 0f01 	cmp.w	sl, #1
 800aca2:	f200 8113 	bhi.w	800aecc <_scanf_float+0x2a0>
 800aca6:	455e      	cmp	r6, fp
 800aca8:	f200 8105 	bhi.w	800aeb6 <_scanf_float+0x28a>
 800acac:	2501      	movs	r5, #1
 800acae:	4628      	mov	r0, r5
 800acb0:	b007      	add	sp, #28
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800acba:	2a0d      	cmp	r2, #13
 800acbc:	d8e6      	bhi.n	800ac8c <_scanf_float+0x60>
 800acbe:	a101      	add	r1, pc, #4	; (adr r1, 800acc4 <_scanf_float+0x98>)
 800acc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800acc4:	0800ae03 	.word	0x0800ae03
 800acc8:	0800ac8d 	.word	0x0800ac8d
 800accc:	0800ac8d 	.word	0x0800ac8d
 800acd0:	0800ac8d 	.word	0x0800ac8d
 800acd4:	0800ae63 	.word	0x0800ae63
 800acd8:	0800ae3b 	.word	0x0800ae3b
 800acdc:	0800ac8d 	.word	0x0800ac8d
 800ace0:	0800ac8d 	.word	0x0800ac8d
 800ace4:	0800ae11 	.word	0x0800ae11
 800ace8:	0800ac8d 	.word	0x0800ac8d
 800acec:	0800ac8d 	.word	0x0800ac8d
 800acf0:	0800ac8d 	.word	0x0800ac8d
 800acf4:	0800ac8d 	.word	0x0800ac8d
 800acf8:	0800adc9 	.word	0x0800adc9
 800acfc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ad00:	e7db      	b.n	800acba <_scanf_float+0x8e>
 800ad02:	290e      	cmp	r1, #14
 800ad04:	d8c2      	bhi.n	800ac8c <_scanf_float+0x60>
 800ad06:	a001      	add	r0, pc, #4	; (adr r0, 800ad0c <_scanf_float+0xe0>)
 800ad08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad0c:	0800adbb 	.word	0x0800adbb
 800ad10:	0800ac8d 	.word	0x0800ac8d
 800ad14:	0800adbb 	.word	0x0800adbb
 800ad18:	0800ae4f 	.word	0x0800ae4f
 800ad1c:	0800ac8d 	.word	0x0800ac8d
 800ad20:	0800ad69 	.word	0x0800ad69
 800ad24:	0800ada5 	.word	0x0800ada5
 800ad28:	0800ada5 	.word	0x0800ada5
 800ad2c:	0800ada5 	.word	0x0800ada5
 800ad30:	0800ada5 	.word	0x0800ada5
 800ad34:	0800ada5 	.word	0x0800ada5
 800ad38:	0800ada5 	.word	0x0800ada5
 800ad3c:	0800ada5 	.word	0x0800ada5
 800ad40:	0800ada5 	.word	0x0800ada5
 800ad44:	0800ada5 	.word	0x0800ada5
 800ad48:	2b6e      	cmp	r3, #110	; 0x6e
 800ad4a:	d809      	bhi.n	800ad60 <_scanf_float+0x134>
 800ad4c:	2b60      	cmp	r3, #96	; 0x60
 800ad4e:	d8b2      	bhi.n	800acb6 <_scanf_float+0x8a>
 800ad50:	2b54      	cmp	r3, #84	; 0x54
 800ad52:	d077      	beq.n	800ae44 <_scanf_float+0x218>
 800ad54:	2b59      	cmp	r3, #89	; 0x59
 800ad56:	d199      	bne.n	800ac8c <_scanf_float+0x60>
 800ad58:	2d07      	cmp	r5, #7
 800ad5a:	d197      	bne.n	800ac8c <_scanf_float+0x60>
 800ad5c:	2508      	movs	r5, #8
 800ad5e:	e029      	b.n	800adb4 <_scanf_float+0x188>
 800ad60:	2b74      	cmp	r3, #116	; 0x74
 800ad62:	d06f      	beq.n	800ae44 <_scanf_float+0x218>
 800ad64:	2b79      	cmp	r3, #121	; 0x79
 800ad66:	e7f6      	b.n	800ad56 <_scanf_float+0x12a>
 800ad68:	6821      	ldr	r1, [r4, #0]
 800ad6a:	05c8      	lsls	r0, r1, #23
 800ad6c:	d51a      	bpl.n	800ada4 <_scanf_float+0x178>
 800ad6e:	9b02      	ldr	r3, [sp, #8]
 800ad70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ad74:	6021      	str	r1, [r4, #0]
 800ad76:	f109 0901 	add.w	r9, r9, #1
 800ad7a:	b11b      	cbz	r3, 800ad84 <_scanf_float+0x158>
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	3201      	adds	r2, #1
 800ad80:	9302      	str	r3, [sp, #8]
 800ad82:	60a2      	str	r2, [r4, #8]
 800ad84:	68a3      	ldr	r3, [r4, #8]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	60a3      	str	r3, [r4, #8]
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	6123      	str	r3, [r4, #16]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	607b      	str	r3, [r7, #4]
 800ad98:	f340 8084 	ble.w	800aea4 <_scanf_float+0x278>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	603b      	str	r3, [r7, #0]
 800ada2:	e766      	b.n	800ac72 <_scanf_float+0x46>
 800ada4:	eb1a 0f05 	cmn.w	sl, r5
 800ada8:	f47f af70 	bne.w	800ac8c <_scanf_float+0x60>
 800adac:	6822      	ldr	r2, [r4, #0]
 800adae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800adb2:	6022      	str	r2, [r4, #0]
 800adb4:	f806 3b01 	strb.w	r3, [r6], #1
 800adb8:	e7e4      	b.n	800ad84 <_scanf_float+0x158>
 800adba:	6822      	ldr	r2, [r4, #0]
 800adbc:	0610      	lsls	r0, r2, #24
 800adbe:	f57f af65 	bpl.w	800ac8c <_scanf_float+0x60>
 800adc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adc6:	e7f4      	b.n	800adb2 <_scanf_float+0x186>
 800adc8:	f1ba 0f00 	cmp.w	sl, #0
 800adcc:	d10e      	bne.n	800adec <_scanf_float+0x1c0>
 800adce:	f1b9 0f00 	cmp.w	r9, #0
 800add2:	d10e      	bne.n	800adf2 <_scanf_float+0x1c6>
 800add4:	6822      	ldr	r2, [r4, #0]
 800add6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800adda:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800adde:	d108      	bne.n	800adf2 <_scanf_float+0x1c6>
 800ade0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ade4:	6022      	str	r2, [r4, #0]
 800ade6:	f04f 0a01 	mov.w	sl, #1
 800adea:	e7e3      	b.n	800adb4 <_scanf_float+0x188>
 800adec:	f1ba 0f02 	cmp.w	sl, #2
 800adf0:	d055      	beq.n	800ae9e <_scanf_float+0x272>
 800adf2:	2d01      	cmp	r5, #1
 800adf4:	d002      	beq.n	800adfc <_scanf_float+0x1d0>
 800adf6:	2d04      	cmp	r5, #4
 800adf8:	f47f af48 	bne.w	800ac8c <_scanf_float+0x60>
 800adfc:	3501      	adds	r5, #1
 800adfe:	b2ed      	uxtb	r5, r5
 800ae00:	e7d8      	b.n	800adb4 <_scanf_float+0x188>
 800ae02:	f1ba 0f01 	cmp.w	sl, #1
 800ae06:	f47f af41 	bne.w	800ac8c <_scanf_float+0x60>
 800ae0a:	f04f 0a02 	mov.w	sl, #2
 800ae0e:	e7d1      	b.n	800adb4 <_scanf_float+0x188>
 800ae10:	b97d      	cbnz	r5, 800ae32 <_scanf_float+0x206>
 800ae12:	f1b9 0f00 	cmp.w	r9, #0
 800ae16:	f47f af3c 	bne.w	800ac92 <_scanf_float+0x66>
 800ae1a:	6822      	ldr	r2, [r4, #0]
 800ae1c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae24:	f47f af39 	bne.w	800ac9a <_scanf_float+0x6e>
 800ae28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae2c:	6022      	str	r2, [r4, #0]
 800ae2e:	2501      	movs	r5, #1
 800ae30:	e7c0      	b.n	800adb4 <_scanf_float+0x188>
 800ae32:	2d03      	cmp	r5, #3
 800ae34:	d0e2      	beq.n	800adfc <_scanf_float+0x1d0>
 800ae36:	2d05      	cmp	r5, #5
 800ae38:	e7de      	b.n	800adf8 <_scanf_float+0x1cc>
 800ae3a:	2d02      	cmp	r5, #2
 800ae3c:	f47f af26 	bne.w	800ac8c <_scanf_float+0x60>
 800ae40:	2503      	movs	r5, #3
 800ae42:	e7b7      	b.n	800adb4 <_scanf_float+0x188>
 800ae44:	2d06      	cmp	r5, #6
 800ae46:	f47f af21 	bne.w	800ac8c <_scanf_float+0x60>
 800ae4a:	2507      	movs	r5, #7
 800ae4c:	e7b2      	b.n	800adb4 <_scanf_float+0x188>
 800ae4e:	6822      	ldr	r2, [r4, #0]
 800ae50:	0591      	lsls	r1, r2, #22
 800ae52:	f57f af1b 	bpl.w	800ac8c <_scanf_float+0x60>
 800ae56:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ae5a:	6022      	str	r2, [r4, #0]
 800ae5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae60:	e7a8      	b.n	800adb4 <_scanf_float+0x188>
 800ae62:	6822      	ldr	r2, [r4, #0]
 800ae64:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ae68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ae6c:	d006      	beq.n	800ae7c <_scanf_float+0x250>
 800ae6e:	0550      	lsls	r0, r2, #21
 800ae70:	f57f af0c 	bpl.w	800ac8c <_scanf_float+0x60>
 800ae74:	f1b9 0f00 	cmp.w	r9, #0
 800ae78:	f43f af0f 	beq.w	800ac9a <_scanf_float+0x6e>
 800ae7c:	0591      	lsls	r1, r2, #22
 800ae7e:	bf58      	it	pl
 800ae80:	9901      	ldrpl	r1, [sp, #4]
 800ae82:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae86:	bf58      	it	pl
 800ae88:	eba9 0101 	subpl.w	r1, r9, r1
 800ae8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ae90:	bf58      	it	pl
 800ae92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ae96:	6022      	str	r2, [r4, #0]
 800ae98:	f04f 0900 	mov.w	r9, #0
 800ae9c:	e78a      	b.n	800adb4 <_scanf_float+0x188>
 800ae9e:	f04f 0a03 	mov.w	sl, #3
 800aea2:	e787      	b.n	800adb4 <_scanf_float+0x188>
 800aea4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aea8:	4639      	mov	r1, r7
 800aeaa:	4640      	mov	r0, r8
 800aeac:	4798      	blx	r3
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f43f aedf 	beq.w	800ac72 <_scanf_float+0x46>
 800aeb4:	e6ea      	b.n	800ac8c <_scanf_float+0x60>
 800aeb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aeba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aebe:	463a      	mov	r2, r7
 800aec0:	4640      	mov	r0, r8
 800aec2:	4798      	blx	r3
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	6123      	str	r3, [r4, #16]
 800aeca:	e6ec      	b.n	800aca6 <_scanf_float+0x7a>
 800aecc:	1e6b      	subs	r3, r5, #1
 800aece:	2b06      	cmp	r3, #6
 800aed0:	d825      	bhi.n	800af1e <_scanf_float+0x2f2>
 800aed2:	2d02      	cmp	r5, #2
 800aed4:	d836      	bhi.n	800af44 <_scanf_float+0x318>
 800aed6:	455e      	cmp	r6, fp
 800aed8:	f67f aee8 	bls.w	800acac <_scanf_float+0x80>
 800aedc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aee0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aee4:	463a      	mov	r2, r7
 800aee6:	4640      	mov	r0, r8
 800aee8:	4798      	blx	r3
 800aeea:	6923      	ldr	r3, [r4, #16]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	6123      	str	r3, [r4, #16]
 800aef0:	e7f1      	b.n	800aed6 <_scanf_float+0x2aa>
 800aef2:	9802      	ldr	r0, [sp, #8]
 800aef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aef8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aefc:	9002      	str	r0, [sp, #8]
 800aefe:	463a      	mov	r2, r7
 800af00:	4640      	mov	r0, r8
 800af02:	4798      	blx	r3
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	3b01      	subs	r3, #1
 800af08:	6123      	str	r3, [r4, #16]
 800af0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800af0e:	fa5f fa8a 	uxtb.w	sl, sl
 800af12:	f1ba 0f02 	cmp.w	sl, #2
 800af16:	d1ec      	bne.n	800aef2 <_scanf_float+0x2c6>
 800af18:	3d03      	subs	r5, #3
 800af1a:	b2ed      	uxtb	r5, r5
 800af1c:	1b76      	subs	r6, r6, r5
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	05da      	lsls	r2, r3, #23
 800af22:	d52f      	bpl.n	800af84 <_scanf_float+0x358>
 800af24:	055b      	lsls	r3, r3, #21
 800af26:	d510      	bpl.n	800af4a <_scanf_float+0x31e>
 800af28:	455e      	cmp	r6, fp
 800af2a:	f67f aebf 	bls.w	800acac <_scanf_float+0x80>
 800af2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af36:	463a      	mov	r2, r7
 800af38:	4640      	mov	r0, r8
 800af3a:	4798      	blx	r3
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	3b01      	subs	r3, #1
 800af40:	6123      	str	r3, [r4, #16]
 800af42:	e7f1      	b.n	800af28 <_scanf_float+0x2fc>
 800af44:	46aa      	mov	sl, r5
 800af46:	9602      	str	r6, [sp, #8]
 800af48:	e7df      	b.n	800af0a <_scanf_float+0x2de>
 800af4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	2965      	cmp	r1, #101	; 0x65
 800af52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800af56:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800af5a:	6123      	str	r3, [r4, #16]
 800af5c:	d00c      	beq.n	800af78 <_scanf_float+0x34c>
 800af5e:	2945      	cmp	r1, #69	; 0x45
 800af60:	d00a      	beq.n	800af78 <_scanf_float+0x34c>
 800af62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af66:	463a      	mov	r2, r7
 800af68:	4640      	mov	r0, r8
 800af6a:	4798      	blx	r3
 800af6c:	6923      	ldr	r3, [r4, #16]
 800af6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800af72:	3b01      	subs	r3, #1
 800af74:	1eb5      	subs	r5, r6, #2
 800af76:	6123      	str	r3, [r4, #16]
 800af78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af7c:	463a      	mov	r2, r7
 800af7e:	4640      	mov	r0, r8
 800af80:	4798      	blx	r3
 800af82:	462e      	mov	r6, r5
 800af84:	6825      	ldr	r5, [r4, #0]
 800af86:	f015 0510 	ands.w	r5, r5, #16
 800af8a:	d158      	bne.n	800b03e <_scanf_float+0x412>
 800af8c:	7035      	strb	r5, [r6, #0]
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af98:	d11c      	bne.n	800afd4 <_scanf_float+0x3a8>
 800af9a:	9b01      	ldr	r3, [sp, #4]
 800af9c:	454b      	cmp	r3, r9
 800af9e:	eba3 0209 	sub.w	r2, r3, r9
 800afa2:	d124      	bne.n	800afee <_scanf_float+0x3c2>
 800afa4:	2200      	movs	r2, #0
 800afa6:	4659      	mov	r1, fp
 800afa8:	4640      	mov	r0, r8
 800afaa:	f000 feab 	bl	800bd04 <_strtod_r>
 800afae:	9b03      	ldr	r3, [sp, #12]
 800afb0:	6821      	ldr	r1, [r4, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f011 0f02 	tst.w	r1, #2
 800afb8:	ec57 6b10 	vmov	r6, r7, d0
 800afbc:	f103 0204 	add.w	r2, r3, #4
 800afc0:	d020      	beq.n	800b004 <_scanf_float+0x3d8>
 800afc2:	9903      	ldr	r1, [sp, #12]
 800afc4:	600a      	str	r2, [r1, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	e9c3 6700 	strd	r6, r7, [r3]
 800afcc:	68e3      	ldr	r3, [r4, #12]
 800afce:	3301      	adds	r3, #1
 800afd0:	60e3      	str	r3, [r4, #12]
 800afd2:	e66c      	b.n	800acae <_scanf_float+0x82>
 800afd4:	9b04      	ldr	r3, [sp, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d0e4      	beq.n	800afa4 <_scanf_float+0x378>
 800afda:	9905      	ldr	r1, [sp, #20]
 800afdc:	230a      	movs	r3, #10
 800afde:	462a      	mov	r2, r5
 800afe0:	3101      	adds	r1, #1
 800afe2:	4640      	mov	r0, r8
 800afe4:	f000 ff18 	bl	800be18 <_strtol_r>
 800afe8:	9b04      	ldr	r3, [sp, #16]
 800afea:	9e05      	ldr	r6, [sp, #20]
 800afec:	1ac2      	subs	r2, r0, r3
 800afee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aff2:	429e      	cmp	r6, r3
 800aff4:	bf28      	it	cs
 800aff6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800affa:	4912      	ldr	r1, [pc, #72]	; (800b044 <_scanf_float+0x418>)
 800affc:	4630      	mov	r0, r6
 800affe:	f000 f83b 	bl	800b078 <siprintf>
 800b002:	e7cf      	b.n	800afa4 <_scanf_float+0x378>
 800b004:	f011 0f04 	tst.w	r1, #4
 800b008:	9903      	ldr	r1, [sp, #12]
 800b00a:	600a      	str	r2, [r1, #0]
 800b00c:	d1db      	bne.n	800afc6 <_scanf_float+0x39a>
 800b00e:	f8d3 8000 	ldr.w	r8, [r3]
 800b012:	ee10 2a10 	vmov	r2, s0
 800b016:	ee10 0a10 	vmov	r0, s0
 800b01a:	463b      	mov	r3, r7
 800b01c:	4639      	mov	r1, r7
 800b01e:	f7f5 fd85 	bl	8000b2c <__aeabi_dcmpun>
 800b022:	b128      	cbz	r0, 800b030 <_scanf_float+0x404>
 800b024:	4808      	ldr	r0, [pc, #32]	; (800b048 <_scanf_float+0x41c>)
 800b026:	f000 f821 	bl	800b06c <nanf>
 800b02a:	ed88 0a00 	vstr	s0, [r8]
 800b02e:	e7cd      	b.n	800afcc <_scanf_float+0x3a0>
 800b030:	4630      	mov	r0, r6
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 fdd8 	bl	8000be8 <__aeabi_d2f>
 800b038:	f8c8 0000 	str.w	r0, [r8]
 800b03c:	e7c6      	b.n	800afcc <_scanf_float+0x3a0>
 800b03e:	2500      	movs	r5, #0
 800b040:	e635      	b.n	800acae <_scanf_float+0x82>
 800b042:	bf00      	nop
 800b044:	080408e9 	.word	0x080408e9
 800b048:	0804089f 	.word	0x0804089f

0800b04c <_sbrk_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4d06      	ldr	r5, [pc, #24]	; (800b068 <_sbrk_r+0x1c>)
 800b050:	2300      	movs	r3, #0
 800b052:	4604      	mov	r4, r0
 800b054:	4608      	mov	r0, r1
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	f7f7 fb24 	bl	80026a4 <_sbrk>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_sbrk_r+0x1a>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_sbrk_r+0x1a>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20006500 	.word	0x20006500

0800b06c <nanf>:
 800b06c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b074 <nanf+0x8>
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	7fc00000 	.word	0x7fc00000

0800b078 <siprintf>:
 800b078:	b40e      	push	{r1, r2, r3}
 800b07a:	b500      	push	{lr}
 800b07c:	b09c      	sub	sp, #112	; 0x70
 800b07e:	ab1d      	add	r3, sp, #116	; 0x74
 800b080:	9002      	str	r0, [sp, #8]
 800b082:	9006      	str	r0, [sp, #24]
 800b084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b088:	4809      	ldr	r0, [pc, #36]	; (800b0b0 <siprintf+0x38>)
 800b08a:	9107      	str	r1, [sp, #28]
 800b08c:	9104      	str	r1, [sp, #16]
 800b08e:	4909      	ldr	r1, [pc, #36]	; (800b0b4 <siprintf+0x3c>)
 800b090:	f853 2b04 	ldr.w	r2, [r3], #4
 800b094:	9105      	str	r1, [sp, #20]
 800b096:	6800      	ldr	r0, [r0, #0]
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	a902      	add	r1, sp, #8
 800b09c:	f003 f912 	bl	800e2c4 <_svfiprintf_r>
 800b0a0:	9b02      	ldr	r3, [sp, #8]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	701a      	strb	r2, [r3, #0]
 800b0a6:	b01c      	add	sp, #112	; 0x70
 800b0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ac:	b003      	add	sp, #12
 800b0ae:	4770      	bx	lr
 800b0b0:	20000f6c 	.word	0x20000f6c
 800b0b4:	ffff0208 	.word	0xffff0208

0800b0b8 <sulp>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	460d      	mov	r5, r1
 800b0be:	ec45 4b10 	vmov	d0, r4, r5
 800b0c2:	4616      	mov	r6, r2
 800b0c4:	f002 ff1e 	bl	800df04 <__ulp>
 800b0c8:	ec51 0b10 	vmov	r0, r1, d0
 800b0cc:	b17e      	cbz	r6, 800b0ee <sulp+0x36>
 800b0ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	dd09      	ble.n	800b0ee <sulp+0x36>
 800b0da:	051b      	lsls	r3, r3, #20
 800b0dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b0e0:	2400      	movs	r4, #0
 800b0e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	462b      	mov	r3, r5
 800b0ea:	f7f5 fa85 	bl	80005f8 <__aeabi_dmul>
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}

0800b0f0 <_strtod_l>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	b0a3      	sub	sp, #140	; 0x8c
 800b0f6:	461f      	mov	r7, r3
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	931e      	str	r3, [sp, #120]	; 0x78
 800b0fc:	4ba4      	ldr	r3, [pc, #656]	; (800b390 <_strtod_l+0x2a0>)
 800b0fe:	9219      	str	r2, [sp, #100]	; 0x64
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	9307      	str	r3, [sp, #28]
 800b104:	4604      	mov	r4, r0
 800b106:	4618      	mov	r0, r3
 800b108:	4688      	mov	r8, r1
 800b10a:	f7f5 f861 	bl	80001d0 <strlen>
 800b10e:	f04f 0a00 	mov.w	sl, #0
 800b112:	4605      	mov	r5, r0
 800b114:	f04f 0b00 	mov.w	fp, #0
 800b118:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b11c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b11e:	781a      	ldrb	r2, [r3, #0]
 800b120:	2a2b      	cmp	r2, #43	; 0x2b
 800b122:	d04c      	beq.n	800b1be <_strtod_l+0xce>
 800b124:	d839      	bhi.n	800b19a <_strtod_l+0xaa>
 800b126:	2a0d      	cmp	r2, #13
 800b128:	d832      	bhi.n	800b190 <_strtod_l+0xa0>
 800b12a:	2a08      	cmp	r2, #8
 800b12c:	d832      	bhi.n	800b194 <_strtod_l+0xa4>
 800b12e:	2a00      	cmp	r2, #0
 800b130:	d03c      	beq.n	800b1ac <_strtod_l+0xbc>
 800b132:	2300      	movs	r3, #0
 800b134:	930e      	str	r3, [sp, #56]	; 0x38
 800b136:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b138:	7833      	ldrb	r3, [r6, #0]
 800b13a:	2b30      	cmp	r3, #48	; 0x30
 800b13c:	f040 80b4 	bne.w	800b2a8 <_strtod_l+0x1b8>
 800b140:	7873      	ldrb	r3, [r6, #1]
 800b142:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b146:	2b58      	cmp	r3, #88	; 0x58
 800b148:	d16c      	bne.n	800b224 <_strtod_l+0x134>
 800b14a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	ab1e      	add	r3, sp, #120	; 0x78
 800b150:	9702      	str	r7, [sp, #8]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	4a8f      	ldr	r2, [pc, #572]	; (800b394 <_strtod_l+0x2a4>)
 800b156:	ab1f      	add	r3, sp, #124	; 0x7c
 800b158:	a91d      	add	r1, sp, #116	; 0x74
 800b15a:	4620      	mov	r0, r4
 800b15c:	f001 ffba 	bl	800d0d4 <__gethex>
 800b160:	f010 0707 	ands.w	r7, r0, #7
 800b164:	4605      	mov	r5, r0
 800b166:	d005      	beq.n	800b174 <_strtod_l+0x84>
 800b168:	2f06      	cmp	r7, #6
 800b16a:	d12a      	bne.n	800b1c2 <_strtod_l+0xd2>
 800b16c:	3601      	adds	r6, #1
 800b16e:	2300      	movs	r3, #0
 800b170:	961d      	str	r6, [sp, #116]	; 0x74
 800b172:	930e      	str	r3, [sp, #56]	; 0x38
 800b174:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b176:	2b00      	cmp	r3, #0
 800b178:	f040 8596 	bne.w	800bca8 <_strtod_l+0xbb8>
 800b17c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b17e:	b1db      	cbz	r3, 800b1b8 <_strtod_l+0xc8>
 800b180:	4652      	mov	r2, sl
 800b182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b186:	ec43 2b10 	vmov	d0, r2, r3
 800b18a:	b023      	add	sp, #140	; 0x8c
 800b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b190:	2a20      	cmp	r2, #32
 800b192:	d1ce      	bne.n	800b132 <_strtod_l+0x42>
 800b194:	3301      	adds	r3, #1
 800b196:	931d      	str	r3, [sp, #116]	; 0x74
 800b198:	e7c0      	b.n	800b11c <_strtod_l+0x2c>
 800b19a:	2a2d      	cmp	r2, #45	; 0x2d
 800b19c:	d1c9      	bne.n	800b132 <_strtod_l+0x42>
 800b19e:	2201      	movs	r2, #1
 800b1a0:	920e      	str	r2, [sp, #56]	; 0x38
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	921d      	str	r2, [sp, #116]	; 0x74
 800b1a6:	785b      	ldrb	r3, [r3, #1]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1c4      	bne.n	800b136 <_strtod_l+0x46>
 800b1ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f040 8576 	bne.w	800bca4 <_strtod_l+0xbb4>
 800b1b8:	4652      	mov	r2, sl
 800b1ba:	465b      	mov	r3, fp
 800b1bc:	e7e3      	b.n	800b186 <_strtod_l+0x96>
 800b1be:	2200      	movs	r2, #0
 800b1c0:	e7ee      	b.n	800b1a0 <_strtod_l+0xb0>
 800b1c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b1c4:	b13a      	cbz	r2, 800b1d6 <_strtod_l+0xe6>
 800b1c6:	2135      	movs	r1, #53	; 0x35
 800b1c8:	a820      	add	r0, sp, #128	; 0x80
 800b1ca:	f002 ffa6 	bl	800e11a <__copybits>
 800b1ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f002 fb6b 	bl	800d8ac <_Bfree>
 800b1d6:	3f01      	subs	r7, #1
 800b1d8:	2f05      	cmp	r7, #5
 800b1da:	d807      	bhi.n	800b1ec <_strtod_l+0xfc>
 800b1dc:	e8df f007 	tbb	[pc, r7]
 800b1e0:	1d180b0e 	.word	0x1d180b0e
 800b1e4:	030e      	.short	0x030e
 800b1e6:	f04f 0b00 	mov.w	fp, #0
 800b1ea:	46da      	mov	sl, fp
 800b1ec:	0728      	lsls	r0, r5, #28
 800b1ee:	d5c1      	bpl.n	800b174 <_strtod_l+0x84>
 800b1f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b1f4:	e7be      	b.n	800b174 <_strtod_l+0x84>
 800b1f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b1fa:	e7f7      	b.n	800b1ec <_strtod_l+0xfc>
 800b1fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b200:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b202:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b206:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b20a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b20e:	e7ed      	b.n	800b1ec <_strtod_l+0xfc>
 800b210:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b398 <_strtod_l+0x2a8>
 800b214:	f04f 0a00 	mov.w	sl, #0
 800b218:	e7e8      	b.n	800b1ec <_strtod_l+0xfc>
 800b21a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b21e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b222:	e7e3      	b.n	800b1ec <_strtod_l+0xfc>
 800b224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	921d      	str	r2, [sp, #116]	; 0x74
 800b22a:	785b      	ldrb	r3, [r3, #1]
 800b22c:	2b30      	cmp	r3, #48	; 0x30
 800b22e:	d0f9      	beq.n	800b224 <_strtod_l+0x134>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d09f      	beq.n	800b174 <_strtod_l+0x84>
 800b234:	2301      	movs	r3, #1
 800b236:	f04f 0900 	mov.w	r9, #0
 800b23a:	9304      	str	r3, [sp, #16]
 800b23c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b23e:	930a      	str	r3, [sp, #40]	; 0x28
 800b240:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b244:	464f      	mov	r7, r9
 800b246:	220a      	movs	r2, #10
 800b248:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b24a:	7806      	ldrb	r6, [r0, #0]
 800b24c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b250:	b2d9      	uxtb	r1, r3
 800b252:	2909      	cmp	r1, #9
 800b254:	d92a      	bls.n	800b2ac <_strtod_l+0x1bc>
 800b256:	9907      	ldr	r1, [sp, #28]
 800b258:	462a      	mov	r2, r5
 800b25a:	f003 f9c4 	bl	800e5e6 <strncmp>
 800b25e:	b398      	cbz	r0, 800b2c8 <_strtod_l+0x1d8>
 800b260:	2000      	movs	r0, #0
 800b262:	4633      	mov	r3, r6
 800b264:	463d      	mov	r5, r7
 800b266:	9007      	str	r0, [sp, #28]
 800b268:	4602      	mov	r2, r0
 800b26a:	2b65      	cmp	r3, #101	; 0x65
 800b26c:	d001      	beq.n	800b272 <_strtod_l+0x182>
 800b26e:	2b45      	cmp	r3, #69	; 0x45
 800b270:	d118      	bne.n	800b2a4 <_strtod_l+0x1b4>
 800b272:	b91d      	cbnz	r5, 800b27c <_strtod_l+0x18c>
 800b274:	9b04      	ldr	r3, [sp, #16]
 800b276:	4303      	orrs	r3, r0
 800b278:	d098      	beq.n	800b1ac <_strtod_l+0xbc>
 800b27a:	2500      	movs	r5, #0
 800b27c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b280:	f108 0301 	add.w	r3, r8, #1
 800b284:	931d      	str	r3, [sp, #116]	; 0x74
 800b286:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b28a:	2b2b      	cmp	r3, #43	; 0x2b
 800b28c:	d075      	beq.n	800b37a <_strtod_l+0x28a>
 800b28e:	2b2d      	cmp	r3, #45	; 0x2d
 800b290:	d07b      	beq.n	800b38a <_strtod_l+0x29a>
 800b292:	f04f 0c00 	mov.w	ip, #0
 800b296:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b29a:	2909      	cmp	r1, #9
 800b29c:	f240 8082 	bls.w	800b3a4 <_strtod_l+0x2b4>
 800b2a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b2a4:	2600      	movs	r6, #0
 800b2a6:	e09d      	b.n	800b3e4 <_strtod_l+0x2f4>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e7c4      	b.n	800b236 <_strtod_l+0x146>
 800b2ac:	2f08      	cmp	r7, #8
 800b2ae:	bfd8      	it	le
 800b2b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b2b2:	f100 0001 	add.w	r0, r0, #1
 800b2b6:	bfda      	itte	le
 800b2b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b2bc:	9309      	strle	r3, [sp, #36]	; 0x24
 800b2be:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b2c2:	3701      	adds	r7, #1
 800b2c4:	901d      	str	r0, [sp, #116]	; 0x74
 800b2c6:	e7bf      	b.n	800b248 <_strtod_l+0x158>
 800b2c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2ca:	195a      	adds	r2, r3, r5
 800b2cc:	921d      	str	r2, [sp, #116]	; 0x74
 800b2ce:	5d5b      	ldrb	r3, [r3, r5]
 800b2d0:	2f00      	cmp	r7, #0
 800b2d2:	d037      	beq.n	800b344 <_strtod_l+0x254>
 800b2d4:	9007      	str	r0, [sp, #28]
 800b2d6:	463d      	mov	r5, r7
 800b2d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b2dc:	2a09      	cmp	r2, #9
 800b2de:	d912      	bls.n	800b306 <_strtod_l+0x216>
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	e7c2      	b.n	800b26a <_strtod_l+0x17a>
 800b2e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	921d      	str	r2, [sp, #116]	; 0x74
 800b2ea:	785b      	ldrb	r3, [r3, #1]
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	2b30      	cmp	r3, #48	; 0x30
 800b2f0:	d0f8      	beq.n	800b2e4 <_strtod_l+0x1f4>
 800b2f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b2f6:	2a08      	cmp	r2, #8
 800b2f8:	f200 84db 	bhi.w	800bcb2 <_strtod_l+0xbc2>
 800b2fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b2fe:	9007      	str	r0, [sp, #28]
 800b300:	2000      	movs	r0, #0
 800b302:	920a      	str	r2, [sp, #40]	; 0x28
 800b304:	4605      	mov	r5, r0
 800b306:	3b30      	subs	r3, #48	; 0x30
 800b308:	f100 0201 	add.w	r2, r0, #1
 800b30c:	d014      	beq.n	800b338 <_strtod_l+0x248>
 800b30e:	9907      	ldr	r1, [sp, #28]
 800b310:	4411      	add	r1, r2
 800b312:	9107      	str	r1, [sp, #28]
 800b314:	462a      	mov	r2, r5
 800b316:	eb00 0e05 	add.w	lr, r0, r5
 800b31a:	210a      	movs	r1, #10
 800b31c:	4572      	cmp	r2, lr
 800b31e:	d113      	bne.n	800b348 <_strtod_l+0x258>
 800b320:	182a      	adds	r2, r5, r0
 800b322:	2a08      	cmp	r2, #8
 800b324:	f105 0501 	add.w	r5, r5, #1
 800b328:	4405      	add	r5, r0
 800b32a:	dc1c      	bgt.n	800b366 <_strtod_l+0x276>
 800b32c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b32e:	220a      	movs	r2, #10
 800b330:	fb02 3301 	mla	r3, r2, r1, r3
 800b334:	9309      	str	r3, [sp, #36]	; 0x24
 800b336:	2200      	movs	r2, #0
 800b338:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b33a:	1c59      	adds	r1, r3, #1
 800b33c:	911d      	str	r1, [sp, #116]	; 0x74
 800b33e:	785b      	ldrb	r3, [r3, #1]
 800b340:	4610      	mov	r0, r2
 800b342:	e7c9      	b.n	800b2d8 <_strtod_l+0x1e8>
 800b344:	4638      	mov	r0, r7
 800b346:	e7d2      	b.n	800b2ee <_strtod_l+0x1fe>
 800b348:	2a08      	cmp	r2, #8
 800b34a:	dc04      	bgt.n	800b356 <_strtod_l+0x266>
 800b34c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b34e:	434e      	muls	r6, r1
 800b350:	9609      	str	r6, [sp, #36]	; 0x24
 800b352:	3201      	adds	r2, #1
 800b354:	e7e2      	b.n	800b31c <_strtod_l+0x22c>
 800b356:	f102 0c01 	add.w	ip, r2, #1
 800b35a:	f1bc 0f10 	cmp.w	ip, #16
 800b35e:	bfd8      	it	le
 800b360:	fb01 f909 	mulle.w	r9, r1, r9
 800b364:	e7f5      	b.n	800b352 <_strtod_l+0x262>
 800b366:	2d10      	cmp	r5, #16
 800b368:	bfdc      	itt	le
 800b36a:	220a      	movle	r2, #10
 800b36c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b370:	e7e1      	b.n	800b336 <_strtod_l+0x246>
 800b372:	2300      	movs	r3, #0
 800b374:	9307      	str	r3, [sp, #28]
 800b376:	2201      	movs	r2, #1
 800b378:	e77c      	b.n	800b274 <_strtod_l+0x184>
 800b37a:	f04f 0c00 	mov.w	ip, #0
 800b37e:	f108 0302 	add.w	r3, r8, #2
 800b382:	931d      	str	r3, [sp, #116]	; 0x74
 800b384:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b388:	e785      	b.n	800b296 <_strtod_l+0x1a6>
 800b38a:	f04f 0c01 	mov.w	ip, #1
 800b38e:	e7f6      	b.n	800b37e <_strtod_l+0x28e>
 800b390:	08040ba4 	.word	0x08040ba4
 800b394:	080408f0 	.word	0x080408f0
 800b398:	7ff00000 	.word	0x7ff00000
 800b39c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b39e:	1c59      	adds	r1, r3, #1
 800b3a0:	911d      	str	r1, [sp, #116]	; 0x74
 800b3a2:	785b      	ldrb	r3, [r3, #1]
 800b3a4:	2b30      	cmp	r3, #48	; 0x30
 800b3a6:	d0f9      	beq.n	800b39c <_strtod_l+0x2ac>
 800b3a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b3ac:	2908      	cmp	r1, #8
 800b3ae:	f63f af79 	bhi.w	800b2a4 <_strtod_l+0x1b4>
 800b3b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b3b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3b8:	9308      	str	r3, [sp, #32]
 800b3ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3bc:	1c59      	adds	r1, r3, #1
 800b3be:	911d      	str	r1, [sp, #116]	; 0x74
 800b3c0:	785b      	ldrb	r3, [r3, #1]
 800b3c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b3c6:	2e09      	cmp	r6, #9
 800b3c8:	d937      	bls.n	800b43a <_strtod_l+0x34a>
 800b3ca:	9e08      	ldr	r6, [sp, #32]
 800b3cc:	1b89      	subs	r1, r1, r6
 800b3ce:	2908      	cmp	r1, #8
 800b3d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b3d4:	dc02      	bgt.n	800b3dc <_strtod_l+0x2ec>
 800b3d6:	4576      	cmp	r6, lr
 800b3d8:	bfa8      	it	ge
 800b3da:	4676      	movge	r6, lr
 800b3dc:	f1bc 0f00 	cmp.w	ip, #0
 800b3e0:	d000      	beq.n	800b3e4 <_strtod_l+0x2f4>
 800b3e2:	4276      	negs	r6, r6
 800b3e4:	2d00      	cmp	r5, #0
 800b3e6:	d14f      	bne.n	800b488 <_strtod_l+0x398>
 800b3e8:	9904      	ldr	r1, [sp, #16]
 800b3ea:	4301      	orrs	r1, r0
 800b3ec:	f47f aec2 	bne.w	800b174 <_strtod_l+0x84>
 800b3f0:	2a00      	cmp	r2, #0
 800b3f2:	f47f aedb 	bne.w	800b1ac <_strtod_l+0xbc>
 800b3f6:	2b69      	cmp	r3, #105	; 0x69
 800b3f8:	d027      	beq.n	800b44a <_strtod_l+0x35a>
 800b3fa:	dc24      	bgt.n	800b446 <_strtod_l+0x356>
 800b3fc:	2b49      	cmp	r3, #73	; 0x49
 800b3fe:	d024      	beq.n	800b44a <_strtod_l+0x35a>
 800b400:	2b4e      	cmp	r3, #78	; 0x4e
 800b402:	f47f aed3 	bne.w	800b1ac <_strtod_l+0xbc>
 800b406:	499e      	ldr	r1, [pc, #632]	; (800b680 <_strtod_l+0x590>)
 800b408:	a81d      	add	r0, sp, #116	; 0x74
 800b40a:	f002 f8bb 	bl	800d584 <__match>
 800b40e:	2800      	cmp	r0, #0
 800b410:	f43f aecc 	beq.w	800b1ac <_strtod_l+0xbc>
 800b414:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b28      	cmp	r3, #40	; 0x28
 800b41a:	d12d      	bne.n	800b478 <_strtod_l+0x388>
 800b41c:	4999      	ldr	r1, [pc, #612]	; (800b684 <_strtod_l+0x594>)
 800b41e:	aa20      	add	r2, sp, #128	; 0x80
 800b420:	a81d      	add	r0, sp, #116	; 0x74
 800b422:	f002 f8c3 	bl	800d5ac <__hexnan>
 800b426:	2805      	cmp	r0, #5
 800b428:	d126      	bne.n	800b478 <_strtod_l+0x388>
 800b42a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b42c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b430:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b434:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b438:	e69c      	b.n	800b174 <_strtod_l+0x84>
 800b43a:	210a      	movs	r1, #10
 800b43c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b440:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b444:	e7b9      	b.n	800b3ba <_strtod_l+0x2ca>
 800b446:	2b6e      	cmp	r3, #110	; 0x6e
 800b448:	e7db      	b.n	800b402 <_strtod_l+0x312>
 800b44a:	498f      	ldr	r1, [pc, #572]	; (800b688 <_strtod_l+0x598>)
 800b44c:	a81d      	add	r0, sp, #116	; 0x74
 800b44e:	f002 f899 	bl	800d584 <__match>
 800b452:	2800      	cmp	r0, #0
 800b454:	f43f aeaa 	beq.w	800b1ac <_strtod_l+0xbc>
 800b458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b45a:	498c      	ldr	r1, [pc, #560]	; (800b68c <_strtod_l+0x59c>)
 800b45c:	3b01      	subs	r3, #1
 800b45e:	a81d      	add	r0, sp, #116	; 0x74
 800b460:	931d      	str	r3, [sp, #116]	; 0x74
 800b462:	f002 f88f 	bl	800d584 <__match>
 800b466:	b910      	cbnz	r0, 800b46e <_strtod_l+0x37e>
 800b468:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b46a:	3301      	adds	r3, #1
 800b46c:	931d      	str	r3, [sp, #116]	; 0x74
 800b46e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b69c <_strtod_l+0x5ac>
 800b472:	f04f 0a00 	mov.w	sl, #0
 800b476:	e67d      	b.n	800b174 <_strtod_l+0x84>
 800b478:	4885      	ldr	r0, [pc, #532]	; (800b690 <_strtod_l+0x5a0>)
 800b47a:	f003 f825 	bl	800e4c8 <nan>
 800b47e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b482:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b486:	e675      	b.n	800b174 <_strtod_l+0x84>
 800b488:	9b07      	ldr	r3, [sp, #28]
 800b48a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b48c:	1af3      	subs	r3, r6, r3
 800b48e:	2f00      	cmp	r7, #0
 800b490:	bf08      	it	eq
 800b492:	462f      	moveq	r7, r5
 800b494:	2d10      	cmp	r5, #16
 800b496:	9308      	str	r3, [sp, #32]
 800b498:	46a8      	mov	r8, r5
 800b49a:	bfa8      	it	ge
 800b49c:	f04f 0810 	movge.w	r8, #16
 800b4a0:	f7f5 f830 	bl	8000504 <__aeabi_ui2d>
 800b4a4:	2d09      	cmp	r5, #9
 800b4a6:	4682      	mov	sl, r0
 800b4a8:	468b      	mov	fp, r1
 800b4aa:	dd13      	ble.n	800b4d4 <_strtod_l+0x3e4>
 800b4ac:	4b79      	ldr	r3, [pc, #484]	; (800b694 <_strtod_l+0x5a4>)
 800b4ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b4b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b4b6:	f7f5 f89f 	bl	80005f8 <__aeabi_dmul>
 800b4ba:	4682      	mov	sl, r0
 800b4bc:	4648      	mov	r0, r9
 800b4be:	468b      	mov	fp, r1
 800b4c0:	f7f5 f820 	bl	8000504 <__aeabi_ui2d>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	4659      	mov	r1, fp
 800b4cc:	f7f4 fede 	bl	800028c <__adddf3>
 800b4d0:	4682      	mov	sl, r0
 800b4d2:	468b      	mov	fp, r1
 800b4d4:	2d0f      	cmp	r5, #15
 800b4d6:	dc38      	bgt.n	800b54a <_strtod_l+0x45a>
 800b4d8:	9b08      	ldr	r3, [sp, #32]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f43f ae4a 	beq.w	800b174 <_strtod_l+0x84>
 800b4e0:	dd24      	ble.n	800b52c <_strtod_l+0x43c>
 800b4e2:	2b16      	cmp	r3, #22
 800b4e4:	dc0b      	bgt.n	800b4fe <_strtod_l+0x40e>
 800b4e6:	4d6b      	ldr	r5, [pc, #428]	; (800b694 <_strtod_l+0x5a4>)
 800b4e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b4ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	465b      	mov	r3, fp
 800b4f4:	f7f5 f880 	bl	80005f8 <__aeabi_dmul>
 800b4f8:	4682      	mov	sl, r0
 800b4fa:	468b      	mov	fp, r1
 800b4fc:	e63a      	b.n	800b174 <_strtod_l+0x84>
 800b4fe:	9a08      	ldr	r2, [sp, #32]
 800b500:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b504:	4293      	cmp	r3, r2
 800b506:	db20      	blt.n	800b54a <_strtod_l+0x45a>
 800b508:	4c62      	ldr	r4, [pc, #392]	; (800b694 <_strtod_l+0x5a4>)
 800b50a:	f1c5 050f 	rsb	r5, r5, #15
 800b50e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b512:	4652      	mov	r2, sl
 800b514:	465b      	mov	r3, fp
 800b516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51a:	f7f5 f86d 	bl	80005f8 <__aeabi_dmul>
 800b51e:	9b08      	ldr	r3, [sp, #32]
 800b520:	1b5d      	subs	r5, r3, r5
 800b522:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b526:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b52a:	e7e3      	b.n	800b4f4 <_strtod_l+0x404>
 800b52c:	9b08      	ldr	r3, [sp, #32]
 800b52e:	3316      	adds	r3, #22
 800b530:	db0b      	blt.n	800b54a <_strtod_l+0x45a>
 800b532:	9b07      	ldr	r3, [sp, #28]
 800b534:	4a57      	ldr	r2, [pc, #348]	; (800b694 <_strtod_l+0x5a4>)
 800b536:	1b9e      	subs	r6, r3, r6
 800b538:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b53c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b540:	4650      	mov	r0, sl
 800b542:	4659      	mov	r1, fp
 800b544:	f7f5 f982 	bl	800084c <__aeabi_ddiv>
 800b548:	e7d6      	b.n	800b4f8 <_strtod_l+0x408>
 800b54a:	9b08      	ldr	r3, [sp, #32]
 800b54c:	eba5 0808 	sub.w	r8, r5, r8
 800b550:	4498      	add	r8, r3
 800b552:	f1b8 0f00 	cmp.w	r8, #0
 800b556:	dd71      	ble.n	800b63c <_strtod_l+0x54c>
 800b558:	f018 030f 	ands.w	r3, r8, #15
 800b55c:	d00a      	beq.n	800b574 <_strtod_l+0x484>
 800b55e:	494d      	ldr	r1, [pc, #308]	; (800b694 <_strtod_l+0x5a4>)
 800b560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b564:	4652      	mov	r2, sl
 800b566:	465b      	mov	r3, fp
 800b568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b56c:	f7f5 f844 	bl	80005f8 <__aeabi_dmul>
 800b570:	4682      	mov	sl, r0
 800b572:	468b      	mov	fp, r1
 800b574:	f038 080f 	bics.w	r8, r8, #15
 800b578:	d04d      	beq.n	800b616 <_strtod_l+0x526>
 800b57a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b57e:	dd22      	ble.n	800b5c6 <_strtod_l+0x4d6>
 800b580:	2500      	movs	r5, #0
 800b582:	462e      	mov	r6, r5
 800b584:	9509      	str	r5, [sp, #36]	; 0x24
 800b586:	9507      	str	r5, [sp, #28]
 800b588:	2322      	movs	r3, #34	; 0x22
 800b58a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b69c <_strtod_l+0x5ac>
 800b58e:	6023      	str	r3, [r4, #0]
 800b590:	f04f 0a00 	mov.w	sl, #0
 800b594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b596:	2b00      	cmp	r3, #0
 800b598:	f43f adec 	beq.w	800b174 <_strtod_l+0x84>
 800b59c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f002 f984 	bl	800d8ac <_Bfree>
 800b5a4:	9907      	ldr	r1, [sp, #28]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f002 f980 	bl	800d8ac <_Bfree>
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f002 f97c 	bl	800d8ac <_Bfree>
 800b5b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f002 f978 	bl	800d8ac <_Bfree>
 800b5bc:	4629      	mov	r1, r5
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f002 f974 	bl	800d8ac <_Bfree>
 800b5c4:	e5d6      	b.n	800b174 <_strtod_l+0x84>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b5cc:	4650      	mov	r0, sl
 800b5ce:	4659      	mov	r1, fp
 800b5d0:	4699      	mov	r9, r3
 800b5d2:	f1b8 0f01 	cmp.w	r8, #1
 800b5d6:	dc21      	bgt.n	800b61c <_strtod_l+0x52c>
 800b5d8:	b10b      	cbz	r3, 800b5de <_strtod_l+0x4ee>
 800b5da:	4682      	mov	sl, r0
 800b5dc:	468b      	mov	fp, r1
 800b5de:	4b2e      	ldr	r3, [pc, #184]	; (800b698 <_strtod_l+0x5a8>)
 800b5e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b5e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b5f0:	f7f5 f802 	bl	80005f8 <__aeabi_dmul>
 800b5f4:	4b29      	ldr	r3, [pc, #164]	; (800b69c <_strtod_l+0x5ac>)
 800b5f6:	460a      	mov	r2, r1
 800b5f8:	400b      	ands	r3, r1
 800b5fa:	4929      	ldr	r1, [pc, #164]	; (800b6a0 <_strtod_l+0x5b0>)
 800b5fc:	428b      	cmp	r3, r1
 800b5fe:	4682      	mov	sl, r0
 800b600:	d8be      	bhi.n	800b580 <_strtod_l+0x490>
 800b602:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b606:	428b      	cmp	r3, r1
 800b608:	bf86      	itte	hi
 800b60a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b6a4 <_strtod_l+0x5b4>
 800b60e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b612:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b616:	2300      	movs	r3, #0
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	e081      	b.n	800b720 <_strtod_l+0x630>
 800b61c:	f018 0f01 	tst.w	r8, #1
 800b620:	d007      	beq.n	800b632 <_strtod_l+0x542>
 800b622:	4b1d      	ldr	r3, [pc, #116]	; (800b698 <_strtod_l+0x5a8>)
 800b624:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f7f4 ffe4 	bl	80005f8 <__aeabi_dmul>
 800b630:	2301      	movs	r3, #1
 800b632:	f109 0901 	add.w	r9, r9, #1
 800b636:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b63a:	e7ca      	b.n	800b5d2 <_strtod_l+0x4e2>
 800b63c:	d0eb      	beq.n	800b616 <_strtod_l+0x526>
 800b63e:	f1c8 0800 	rsb	r8, r8, #0
 800b642:	f018 020f 	ands.w	r2, r8, #15
 800b646:	d00a      	beq.n	800b65e <_strtod_l+0x56e>
 800b648:	4b12      	ldr	r3, [pc, #72]	; (800b694 <_strtod_l+0x5a4>)
 800b64a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b64e:	4650      	mov	r0, sl
 800b650:	4659      	mov	r1, fp
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f7f5 f8f9 	bl	800084c <__aeabi_ddiv>
 800b65a:	4682      	mov	sl, r0
 800b65c:	468b      	mov	fp, r1
 800b65e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b662:	d0d8      	beq.n	800b616 <_strtod_l+0x526>
 800b664:	f1b8 0f1f 	cmp.w	r8, #31
 800b668:	dd1e      	ble.n	800b6a8 <_strtod_l+0x5b8>
 800b66a:	2500      	movs	r5, #0
 800b66c:	462e      	mov	r6, r5
 800b66e:	9509      	str	r5, [sp, #36]	; 0x24
 800b670:	9507      	str	r5, [sp, #28]
 800b672:	2322      	movs	r3, #34	; 0x22
 800b674:	f04f 0a00 	mov.w	sl, #0
 800b678:	f04f 0b00 	mov.w	fp, #0
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	e789      	b.n	800b594 <_strtod_l+0x4a4>
 800b680:	080408c2 	.word	0x080408c2
 800b684:	08040904 	.word	0x08040904
 800b688:	080408ba 	.word	0x080408ba
 800b68c:	08040a44 	.word	0x08040a44
 800b690:	0804089f 	.word	0x0804089f
 800b694:	08040c40 	.word	0x08040c40
 800b698:	08040c18 	.word	0x08040c18
 800b69c:	7ff00000 	.word	0x7ff00000
 800b6a0:	7ca00000 	.word	0x7ca00000
 800b6a4:	7fefffff 	.word	0x7fefffff
 800b6a8:	f018 0310 	ands.w	r3, r8, #16
 800b6ac:	bf18      	it	ne
 800b6ae:	236a      	movne	r3, #106	; 0x6a
 800b6b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ba68 <_strtod_l+0x978>
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	4650      	mov	r0, sl
 800b6b8:	4659      	mov	r1, fp
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f018 0f01 	tst.w	r8, #1
 800b6c0:	d004      	beq.n	800b6cc <_strtod_l+0x5dc>
 800b6c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b6c6:	f7f4 ff97 	bl	80005f8 <__aeabi_dmul>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b6d0:	f109 0908 	add.w	r9, r9, #8
 800b6d4:	d1f2      	bne.n	800b6bc <_strtod_l+0x5cc>
 800b6d6:	b10b      	cbz	r3, 800b6dc <_strtod_l+0x5ec>
 800b6d8:	4682      	mov	sl, r0
 800b6da:	468b      	mov	fp, r1
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	b1bb      	cbz	r3, 800b710 <_strtod_l+0x620>
 800b6e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b6e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	4659      	mov	r1, fp
 800b6ec:	dd10      	ble.n	800b710 <_strtod_l+0x620>
 800b6ee:	2b1f      	cmp	r3, #31
 800b6f0:	f340 8128 	ble.w	800b944 <_strtod_l+0x854>
 800b6f4:	2b34      	cmp	r3, #52	; 0x34
 800b6f6:	bfde      	ittt	le
 800b6f8:	3b20      	suble	r3, #32
 800b6fa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b6fe:	fa02 f303 	lslle.w	r3, r2, r3
 800b702:	f04f 0a00 	mov.w	sl, #0
 800b706:	bfcc      	ite	gt
 800b708:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b70c:	ea03 0b01 	andle.w	fp, r3, r1
 800b710:	2200      	movs	r2, #0
 800b712:	2300      	movs	r3, #0
 800b714:	4650      	mov	r0, sl
 800b716:	4659      	mov	r1, fp
 800b718:	f7f5 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d1a4      	bne.n	800b66a <_strtod_l+0x57a>
 800b720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b726:	462b      	mov	r3, r5
 800b728:	463a      	mov	r2, r7
 800b72a:	4620      	mov	r0, r4
 800b72c:	f002 f92a 	bl	800d984 <__s2b>
 800b730:	9009      	str	r0, [sp, #36]	; 0x24
 800b732:	2800      	cmp	r0, #0
 800b734:	f43f af24 	beq.w	800b580 <_strtod_l+0x490>
 800b738:	9b07      	ldr	r3, [sp, #28]
 800b73a:	1b9e      	subs	r6, r3, r6
 800b73c:	9b08      	ldr	r3, [sp, #32]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	bfb4      	ite	lt
 800b742:	4633      	movlt	r3, r6
 800b744:	2300      	movge	r3, #0
 800b746:	9310      	str	r3, [sp, #64]	; 0x40
 800b748:	9b08      	ldr	r3, [sp, #32]
 800b74a:	2500      	movs	r5, #0
 800b74c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b750:	9318      	str	r3, [sp, #96]	; 0x60
 800b752:	462e      	mov	r6, r5
 800b754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b756:	4620      	mov	r0, r4
 800b758:	6859      	ldr	r1, [r3, #4]
 800b75a:	f002 f867 	bl	800d82c <_Balloc>
 800b75e:	9007      	str	r0, [sp, #28]
 800b760:	2800      	cmp	r0, #0
 800b762:	f43f af11 	beq.w	800b588 <_strtod_l+0x498>
 800b766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b768:	691a      	ldr	r2, [r3, #16]
 800b76a:	3202      	adds	r2, #2
 800b76c:	f103 010c 	add.w	r1, r3, #12
 800b770:	0092      	lsls	r2, r2, #2
 800b772:	300c      	adds	r0, #12
 800b774:	f7fe fbd6 	bl	8009f24 <memcpy>
 800b778:	ec4b ab10 	vmov	d0, sl, fp
 800b77c:	aa20      	add	r2, sp, #128	; 0x80
 800b77e:	a91f      	add	r1, sp, #124	; 0x7c
 800b780:	4620      	mov	r0, r4
 800b782:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b786:	f002 fc39 	bl	800dffc <__d2b>
 800b78a:	901e      	str	r0, [sp, #120]	; 0x78
 800b78c:	2800      	cmp	r0, #0
 800b78e:	f43f aefb 	beq.w	800b588 <_strtod_l+0x498>
 800b792:	2101      	movs	r1, #1
 800b794:	4620      	mov	r0, r4
 800b796:	f002 f98f 	bl	800dab8 <__i2b>
 800b79a:	4606      	mov	r6, r0
 800b79c:	2800      	cmp	r0, #0
 800b79e:	f43f aef3 	beq.w	800b588 <_strtod_l+0x498>
 800b7a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7a4:	9904      	ldr	r1, [sp, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfab      	itete	ge
 800b7aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b7ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b7ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b7b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b7b4:	bfac      	ite	ge
 800b7b6:	eb03 0902 	addge.w	r9, r3, r2
 800b7ba:	1ad7      	sublt	r7, r2, r3
 800b7bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b7be:	eba3 0801 	sub.w	r8, r3, r1
 800b7c2:	4490      	add	r8, r2
 800b7c4:	4ba3      	ldr	r3, [pc, #652]	; (800ba54 <_strtod_l+0x964>)
 800b7c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b7ca:	4598      	cmp	r8, r3
 800b7cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b7d0:	f280 80cc 	bge.w	800b96c <_strtod_l+0x87c>
 800b7d4:	eba3 0308 	sub.w	r3, r3, r8
 800b7d8:	2b1f      	cmp	r3, #31
 800b7da:	eba2 0203 	sub.w	r2, r2, r3
 800b7de:	f04f 0101 	mov.w	r1, #1
 800b7e2:	f300 80b6 	bgt.w	800b952 <_strtod_l+0x862>
 800b7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ea:	9311      	str	r3, [sp, #68]	; 0x44
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	930c      	str	r3, [sp, #48]	; 0x30
 800b7f0:	eb09 0802 	add.w	r8, r9, r2
 800b7f4:	9b04      	ldr	r3, [sp, #16]
 800b7f6:	45c1      	cmp	r9, r8
 800b7f8:	4417      	add	r7, r2
 800b7fa:	441f      	add	r7, r3
 800b7fc:	464b      	mov	r3, r9
 800b7fe:	bfa8      	it	ge
 800b800:	4643      	movge	r3, r8
 800b802:	42bb      	cmp	r3, r7
 800b804:	bfa8      	it	ge
 800b806:	463b      	movge	r3, r7
 800b808:	2b00      	cmp	r3, #0
 800b80a:	bfc2      	ittt	gt
 800b80c:	eba8 0803 	subgt.w	r8, r8, r3
 800b810:	1aff      	subgt	r7, r7, r3
 800b812:	eba9 0903 	subgt.w	r9, r9, r3
 800b816:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b818:	2b00      	cmp	r3, #0
 800b81a:	dd17      	ble.n	800b84c <_strtod_l+0x75c>
 800b81c:	4631      	mov	r1, r6
 800b81e:	461a      	mov	r2, r3
 800b820:	4620      	mov	r0, r4
 800b822:	f002 fa05 	bl	800dc30 <__pow5mult>
 800b826:	4606      	mov	r6, r0
 800b828:	2800      	cmp	r0, #0
 800b82a:	f43f aead 	beq.w	800b588 <_strtod_l+0x498>
 800b82e:	4601      	mov	r1, r0
 800b830:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b832:	4620      	mov	r0, r4
 800b834:	f002 f956 	bl	800dae4 <__multiply>
 800b838:	900f      	str	r0, [sp, #60]	; 0x3c
 800b83a:	2800      	cmp	r0, #0
 800b83c:	f43f aea4 	beq.w	800b588 <_strtod_l+0x498>
 800b840:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b842:	4620      	mov	r0, r4
 800b844:	f002 f832 	bl	800d8ac <_Bfree>
 800b848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b84a:	931e      	str	r3, [sp, #120]	; 0x78
 800b84c:	f1b8 0f00 	cmp.w	r8, #0
 800b850:	f300 8091 	bgt.w	800b976 <_strtod_l+0x886>
 800b854:	9b08      	ldr	r3, [sp, #32]
 800b856:	2b00      	cmp	r3, #0
 800b858:	dd08      	ble.n	800b86c <_strtod_l+0x77c>
 800b85a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b85c:	9907      	ldr	r1, [sp, #28]
 800b85e:	4620      	mov	r0, r4
 800b860:	f002 f9e6 	bl	800dc30 <__pow5mult>
 800b864:	9007      	str	r0, [sp, #28]
 800b866:	2800      	cmp	r0, #0
 800b868:	f43f ae8e 	beq.w	800b588 <_strtod_l+0x498>
 800b86c:	2f00      	cmp	r7, #0
 800b86e:	dd08      	ble.n	800b882 <_strtod_l+0x792>
 800b870:	9907      	ldr	r1, [sp, #28]
 800b872:	463a      	mov	r2, r7
 800b874:	4620      	mov	r0, r4
 800b876:	f002 fa35 	bl	800dce4 <__lshift>
 800b87a:	9007      	str	r0, [sp, #28]
 800b87c:	2800      	cmp	r0, #0
 800b87e:	f43f ae83 	beq.w	800b588 <_strtod_l+0x498>
 800b882:	f1b9 0f00 	cmp.w	r9, #0
 800b886:	dd08      	ble.n	800b89a <_strtod_l+0x7aa>
 800b888:	4631      	mov	r1, r6
 800b88a:	464a      	mov	r2, r9
 800b88c:	4620      	mov	r0, r4
 800b88e:	f002 fa29 	bl	800dce4 <__lshift>
 800b892:	4606      	mov	r6, r0
 800b894:	2800      	cmp	r0, #0
 800b896:	f43f ae77 	beq.w	800b588 <_strtod_l+0x498>
 800b89a:	9a07      	ldr	r2, [sp, #28]
 800b89c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f002 faa8 	bl	800ddf4 <__mdiff>
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	f43f ae6e 	beq.w	800b588 <_strtod_l+0x498>
 800b8ac:	68c3      	ldr	r3, [r0, #12]
 800b8ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	60c3      	str	r3, [r0, #12]
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	f002 fa81 	bl	800ddbc <__mcmp>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	da65      	bge.n	800b98a <_strtod_l+0x89a>
 800b8be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8c0:	ea53 030a 	orrs.w	r3, r3, sl
 800b8c4:	f040 8087 	bne.w	800b9d6 <_strtod_l+0x8e6>
 800b8c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 8082 	bne.w	800b9d6 <_strtod_l+0x8e6>
 800b8d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8d6:	0d1b      	lsrs	r3, r3, #20
 800b8d8:	051b      	lsls	r3, r3, #20
 800b8da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b8de:	d97a      	bls.n	800b9d6 <_strtod_l+0x8e6>
 800b8e0:	696b      	ldr	r3, [r5, #20]
 800b8e2:	b913      	cbnz	r3, 800b8ea <_strtod_l+0x7fa>
 800b8e4:	692b      	ldr	r3, [r5, #16]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	dd75      	ble.n	800b9d6 <_strtod_l+0x8e6>
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f002 f9f8 	bl	800dce4 <__lshift>
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	f002 fa60 	bl	800ddbc <__mcmp>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	dd6a      	ble.n	800b9d6 <_strtod_l+0x8e6>
 800b900:	9904      	ldr	r1, [sp, #16]
 800b902:	4a55      	ldr	r2, [pc, #340]	; (800ba58 <_strtod_l+0x968>)
 800b904:	465b      	mov	r3, fp
 800b906:	2900      	cmp	r1, #0
 800b908:	f000 8085 	beq.w	800ba16 <_strtod_l+0x926>
 800b90c:	ea02 010b 	and.w	r1, r2, fp
 800b910:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b914:	dc7f      	bgt.n	800ba16 <_strtod_l+0x926>
 800b916:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b91a:	f77f aeaa 	ble.w	800b672 <_strtod_l+0x582>
 800b91e:	4a4f      	ldr	r2, [pc, #316]	; (800ba5c <_strtod_l+0x96c>)
 800b920:	2300      	movs	r3, #0
 800b922:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b926:	4650      	mov	r0, sl
 800b928:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b92c:	4659      	mov	r1, fp
 800b92e:	f7f4 fe63 	bl	80005f8 <__aeabi_dmul>
 800b932:	460b      	mov	r3, r1
 800b934:	4303      	orrs	r3, r0
 800b936:	bf08      	it	eq
 800b938:	2322      	moveq	r3, #34	; 0x22
 800b93a:	4682      	mov	sl, r0
 800b93c:	468b      	mov	fp, r1
 800b93e:	bf08      	it	eq
 800b940:	6023      	streq	r3, [r4, #0]
 800b942:	e62b      	b.n	800b59c <_strtod_l+0x4ac>
 800b944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b948:	fa02 f303 	lsl.w	r3, r2, r3
 800b94c:	ea03 0a0a 	and.w	sl, r3, sl
 800b950:	e6de      	b.n	800b710 <_strtod_l+0x620>
 800b952:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b956:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b95a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b95e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b962:	fa01 f308 	lsl.w	r3, r1, r8
 800b966:	930c      	str	r3, [sp, #48]	; 0x30
 800b968:	9111      	str	r1, [sp, #68]	; 0x44
 800b96a:	e741      	b.n	800b7f0 <_strtod_l+0x700>
 800b96c:	2300      	movs	r3, #0
 800b96e:	930c      	str	r3, [sp, #48]	; 0x30
 800b970:	2301      	movs	r3, #1
 800b972:	9311      	str	r3, [sp, #68]	; 0x44
 800b974:	e73c      	b.n	800b7f0 <_strtod_l+0x700>
 800b976:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b978:	4642      	mov	r2, r8
 800b97a:	4620      	mov	r0, r4
 800b97c:	f002 f9b2 	bl	800dce4 <__lshift>
 800b980:	901e      	str	r0, [sp, #120]	; 0x78
 800b982:	2800      	cmp	r0, #0
 800b984:	f47f af66 	bne.w	800b854 <_strtod_l+0x764>
 800b988:	e5fe      	b.n	800b588 <_strtod_l+0x498>
 800b98a:	465f      	mov	r7, fp
 800b98c:	d16e      	bne.n	800ba6c <_strtod_l+0x97c>
 800b98e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b994:	b342      	cbz	r2, 800b9e8 <_strtod_l+0x8f8>
 800b996:	4a32      	ldr	r2, [pc, #200]	; (800ba60 <_strtod_l+0x970>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d128      	bne.n	800b9ee <_strtod_l+0x8fe>
 800b99c:	9b04      	ldr	r3, [sp, #16]
 800b99e:	4650      	mov	r0, sl
 800b9a0:	b1eb      	cbz	r3, 800b9de <_strtod_l+0x8ee>
 800b9a2:	4a2d      	ldr	r2, [pc, #180]	; (800ba58 <_strtod_l+0x968>)
 800b9a4:	403a      	ands	r2, r7
 800b9a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b9aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b9ae:	d819      	bhi.n	800b9e4 <_strtod_l+0x8f4>
 800b9b0:	0d12      	lsrs	r2, r2, #20
 800b9b2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b9b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ba:	4298      	cmp	r0, r3
 800b9bc:	d117      	bne.n	800b9ee <_strtod_l+0x8fe>
 800b9be:	4b29      	ldr	r3, [pc, #164]	; (800ba64 <_strtod_l+0x974>)
 800b9c0:	429f      	cmp	r7, r3
 800b9c2:	d102      	bne.n	800b9ca <_strtod_l+0x8da>
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	f43f addf 	beq.w	800b588 <_strtod_l+0x498>
 800b9ca:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <_strtod_l+0x968>)
 800b9cc:	403b      	ands	r3, r7
 800b9ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b9d2:	f04f 0a00 	mov.w	sl, #0
 800b9d6:	9b04      	ldr	r3, [sp, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1a0      	bne.n	800b91e <_strtod_l+0x82e>
 800b9dc:	e5de      	b.n	800b59c <_strtod_l+0x4ac>
 800b9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9e2:	e7ea      	b.n	800b9ba <_strtod_l+0x8ca>
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	e7e8      	b.n	800b9ba <_strtod_l+0x8ca>
 800b9e8:	ea53 030a 	orrs.w	r3, r3, sl
 800b9ec:	d088      	beq.n	800b900 <_strtod_l+0x810>
 800b9ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9f0:	b1db      	cbz	r3, 800ba2a <_strtod_l+0x93a>
 800b9f2:	423b      	tst	r3, r7
 800b9f4:	d0ef      	beq.n	800b9d6 <_strtod_l+0x8e6>
 800b9f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9f8:	9a04      	ldr	r2, [sp, #16]
 800b9fa:	4650      	mov	r0, sl
 800b9fc:	4659      	mov	r1, fp
 800b9fe:	b1c3      	cbz	r3, 800ba32 <_strtod_l+0x942>
 800ba00:	f7ff fb5a 	bl	800b0b8 <sulp>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba0c:	f7f4 fc3e 	bl	800028c <__adddf3>
 800ba10:	4682      	mov	sl, r0
 800ba12:	468b      	mov	fp, r1
 800ba14:	e7df      	b.n	800b9d6 <_strtod_l+0x8e6>
 800ba16:	4013      	ands	r3, r2
 800ba18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ba1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ba20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ba24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ba28:	e7d5      	b.n	800b9d6 <_strtod_l+0x8e6>
 800ba2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba2c:	ea13 0f0a 	tst.w	r3, sl
 800ba30:	e7e0      	b.n	800b9f4 <_strtod_l+0x904>
 800ba32:	f7ff fb41 	bl	800b0b8 <sulp>
 800ba36:	4602      	mov	r2, r0
 800ba38:	460b      	mov	r3, r1
 800ba3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba3e:	f7f4 fc23 	bl	8000288 <__aeabi_dsub>
 800ba42:	2200      	movs	r2, #0
 800ba44:	2300      	movs	r3, #0
 800ba46:	4682      	mov	sl, r0
 800ba48:	468b      	mov	fp, r1
 800ba4a:	f7f5 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d0c1      	beq.n	800b9d6 <_strtod_l+0x8e6>
 800ba52:	e60e      	b.n	800b672 <_strtod_l+0x582>
 800ba54:	fffffc02 	.word	0xfffffc02
 800ba58:	7ff00000 	.word	0x7ff00000
 800ba5c:	39500000 	.word	0x39500000
 800ba60:	000fffff 	.word	0x000fffff
 800ba64:	7fefffff 	.word	0x7fefffff
 800ba68:	08040918 	.word	0x08040918
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f002 fb20 	bl	800e0b4 <__ratio>
 800ba74:	ec59 8b10 	vmov	r8, r9, d0
 800ba78:	ee10 0a10 	vmov	r0, s0
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba82:	4649      	mov	r1, r9
 800ba84:	f7f5 f834 	bl	8000af0 <__aeabi_dcmple>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d07c      	beq.n	800bb86 <_strtod_l+0xa96>
 800ba8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d04c      	beq.n	800bb2c <_strtod_l+0xa3c>
 800ba92:	4b95      	ldr	r3, [pc, #596]	; (800bce8 <_strtod_l+0xbf8>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ba9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bce8 <_strtod_l+0xbf8>
 800ba9e:	f04f 0800 	mov.w	r8, #0
 800baa2:	4b92      	ldr	r3, [pc, #584]	; (800bcec <_strtod_l+0xbfc>)
 800baa4:	403b      	ands	r3, r7
 800baa6:	9311      	str	r3, [sp, #68]	; 0x44
 800baa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800baaa:	4b91      	ldr	r3, [pc, #580]	; (800bcf0 <_strtod_l+0xc00>)
 800baac:	429a      	cmp	r2, r3
 800baae:	f040 80b2 	bne.w	800bc16 <_strtod_l+0xb26>
 800bab2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800baba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800babe:	ec4b ab10 	vmov	d0, sl, fp
 800bac2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bac6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800baca:	f002 fa1b 	bl	800df04 <__ulp>
 800bace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bad2:	ec53 2b10 	vmov	r2, r3, d0
 800bad6:	f7f4 fd8f 	bl	80005f8 <__aeabi_dmul>
 800bada:	4652      	mov	r2, sl
 800badc:	465b      	mov	r3, fp
 800bade:	f7f4 fbd5 	bl	800028c <__adddf3>
 800bae2:	460b      	mov	r3, r1
 800bae4:	4981      	ldr	r1, [pc, #516]	; (800bcec <_strtod_l+0xbfc>)
 800bae6:	4a83      	ldr	r2, [pc, #524]	; (800bcf4 <_strtod_l+0xc04>)
 800bae8:	4019      	ands	r1, r3
 800baea:	4291      	cmp	r1, r2
 800baec:	4682      	mov	sl, r0
 800baee:	d95e      	bls.n	800bbae <_strtod_l+0xabe>
 800baf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d103      	bne.n	800bb02 <_strtod_l+0xa12>
 800bafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafc:	3301      	adds	r3, #1
 800bafe:	f43f ad43 	beq.w	800b588 <_strtod_l+0x498>
 800bb02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800bd00 <_strtod_l+0xc10>
 800bb06:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bb0a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f001 fecd 	bl	800d8ac <_Bfree>
 800bb12:	9907      	ldr	r1, [sp, #28]
 800bb14:	4620      	mov	r0, r4
 800bb16:	f001 fec9 	bl	800d8ac <_Bfree>
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f001 fec5 	bl	800d8ac <_Bfree>
 800bb22:	4629      	mov	r1, r5
 800bb24:	4620      	mov	r0, r4
 800bb26:	f001 fec1 	bl	800d8ac <_Bfree>
 800bb2a:	e613      	b.n	800b754 <_strtod_l+0x664>
 800bb2c:	f1ba 0f00 	cmp.w	sl, #0
 800bb30:	d11b      	bne.n	800bb6a <_strtod_l+0xa7a>
 800bb32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb36:	b9f3      	cbnz	r3, 800bb76 <_strtod_l+0xa86>
 800bb38:	4b6b      	ldr	r3, [pc, #428]	; (800bce8 <_strtod_l+0xbf8>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f4 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800bb44:	b9d0      	cbnz	r0, 800bb7c <_strtod_l+0xa8c>
 800bb46:	4640      	mov	r0, r8
 800bb48:	4649      	mov	r1, r9
 800bb4a:	4b6b      	ldr	r3, [pc, #428]	; (800bcf8 <_strtod_l+0xc08>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f7f4 fd53 	bl	80005f8 <__aeabi_dmul>
 800bb52:	4680      	mov	r8, r0
 800bb54:	4689      	mov	r9, r1
 800bb56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bb5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800bb5e:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bb64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bb68:	e79b      	b.n	800baa2 <_strtod_l+0x9b2>
 800bb6a:	f1ba 0f01 	cmp.w	sl, #1
 800bb6e:	d102      	bne.n	800bb76 <_strtod_l+0xa86>
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	f43f ad7e 	beq.w	800b672 <_strtod_l+0x582>
 800bb76:	4b61      	ldr	r3, [pc, #388]	; (800bcfc <_strtod_l+0xc0c>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	e78c      	b.n	800ba96 <_strtod_l+0x9a6>
 800bb7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bcf8 <_strtod_l+0xc08>
 800bb80:	f04f 0800 	mov.w	r8, #0
 800bb84:	e7e7      	b.n	800bb56 <_strtod_l+0xa66>
 800bb86:	4b5c      	ldr	r3, [pc, #368]	; (800bcf8 <_strtod_l+0xc08>)
 800bb88:	4640      	mov	r0, r8
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f7f4 fd33 	bl	80005f8 <__aeabi_dmul>
 800bb92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb94:	4680      	mov	r8, r0
 800bb96:	4689      	mov	r9, r1
 800bb98:	b933      	cbnz	r3, 800bba8 <_strtod_l+0xab8>
 800bb9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb9e:	9012      	str	r0, [sp, #72]	; 0x48
 800bba0:	9313      	str	r3, [sp, #76]	; 0x4c
 800bba2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bba6:	e7dd      	b.n	800bb64 <_strtod_l+0xa74>
 800bba8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800bbac:	e7f9      	b.n	800bba2 <_strtod_l+0xab2>
 800bbae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1a8      	bne.n	800bb0a <_strtod_l+0xa1a>
 800bbb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbbe:	0d1b      	lsrs	r3, r3, #20
 800bbc0:	051b      	lsls	r3, r3, #20
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d1a1      	bne.n	800bb0a <_strtod_l+0xa1a>
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	4649      	mov	r1, r9
 800bbca:	f7f5 f875 	bl	8000cb8 <__aeabi_d2lz>
 800bbce:	f7f4 fce5 	bl	800059c <__aeabi_l2d>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4649      	mov	r1, r9
 800bbda:	f7f4 fb55 	bl	8000288 <__aeabi_dsub>
 800bbde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bbe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbe4:	ea43 030a 	orr.w	r3, r3, sl
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	4680      	mov	r8, r0
 800bbec:	4689      	mov	r9, r1
 800bbee:	d053      	beq.n	800bc98 <_strtod_l+0xba8>
 800bbf0:	a335      	add	r3, pc, #212	; (adr r3, 800bcc8 <_strtod_l+0xbd8>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f7f4 ff71 	bl	8000adc <__aeabi_dcmplt>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f47f acce 	bne.w	800b59c <_strtod_l+0x4ac>
 800bc00:	a333      	add	r3, pc, #204	; (adr r3, 800bcd0 <_strtod_l+0xbe0>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	4640      	mov	r0, r8
 800bc08:	4649      	mov	r1, r9
 800bc0a:	f7f4 ff85 	bl	8000b18 <__aeabi_dcmpgt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f43f af7b 	beq.w	800bb0a <_strtod_l+0xa1a>
 800bc14:	e4c2      	b.n	800b59c <_strtod_l+0x4ac>
 800bc16:	9b04      	ldr	r3, [sp, #16]
 800bc18:	b333      	cbz	r3, 800bc68 <_strtod_l+0xb78>
 800bc1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc20:	d822      	bhi.n	800bc68 <_strtod_l+0xb78>
 800bc22:	a32d      	add	r3, pc, #180	; (adr r3, 800bcd8 <_strtod_l+0xbe8>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	4640      	mov	r0, r8
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	f7f4 ff60 	bl	8000af0 <__aeabi_dcmple>
 800bc30:	b1a0      	cbz	r0, 800bc5c <_strtod_l+0xb6c>
 800bc32:	4649      	mov	r1, r9
 800bc34:	4640      	mov	r0, r8
 800bc36:	f7f4 ffb7 	bl	8000ba8 <__aeabi_d2uiz>
 800bc3a:	2801      	cmp	r0, #1
 800bc3c:	bf38      	it	cc
 800bc3e:	2001      	movcc	r0, #1
 800bc40:	f7f4 fc60 	bl	8000504 <__aeabi_ui2d>
 800bc44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc46:	4680      	mov	r8, r0
 800bc48:	4689      	mov	r9, r1
 800bc4a:	bb13      	cbnz	r3, 800bc92 <_strtod_l+0xba2>
 800bc4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc50:	9014      	str	r0, [sp, #80]	; 0x50
 800bc52:	9315      	str	r3, [sp, #84]	; 0x54
 800bc54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bc58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bc5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bc64:	1a9b      	subs	r3, r3, r2
 800bc66:	930d      	str	r3, [sp, #52]	; 0x34
 800bc68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc6c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bc70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc74:	f002 f946 	bl	800df04 <__ulp>
 800bc78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc7c:	ec53 2b10 	vmov	r2, r3, d0
 800bc80:	f7f4 fcba 	bl	80005f8 <__aeabi_dmul>
 800bc84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc88:	f7f4 fb00 	bl	800028c <__adddf3>
 800bc8c:	4682      	mov	sl, r0
 800bc8e:	468b      	mov	fp, r1
 800bc90:	e78f      	b.n	800bbb2 <_strtod_l+0xac2>
 800bc92:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800bc96:	e7dd      	b.n	800bc54 <_strtod_l+0xb64>
 800bc98:	a311      	add	r3, pc, #68	; (adr r3, 800bce0 <_strtod_l+0xbf0>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 ff1d 	bl	8000adc <__aeabi_dcmplt>
 800bca2:	e7b4      	b.n	800bc0e <_strtod_l+0xb1e>
 800bca4:	2300      	movs	r3, #0
 800bca6:	930e      	str	r3, [sp, #56]	; 0x38
 800bca8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bcaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	f7ff ba65 	b.w	800b17c <_strtod_l+0x8c>
 800bcb2:	2b65      	cmp	r3, #101	; 0x65
 800bcb4:	f43f ab5d 	beq.w	800b372 <_strtod_l+0x282>
 800bcb8:	2b45      	cmp	r3, #69	; 0x45
 800bcba:	f43f ab5a 	beq.w	800b372 <_strtod_l+0x282>
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f7ff bb92 	b.w	800b3e8 <_strtod_l+0x2f8>
 800bcc4:	f3af 8000 	nop.w
 800bcc8:	94a03595 	.word	0x94a03595
 800bccc:	3fdfffff 	.word	0x3fdfffff
 800bcd0:	35afe535 	.word	0x35afe535
 800bcd4:	3fe00000 	.word	0x3fe00000
 800bcd8:	ffc00000 	.word	0xffc00000
 800bcdc:	41dfffff 	.word	0x41dfffff
 800bce0:	94a03595 	.word	0x94a03595
 800bce4:	3fcfffff 	.word	0x3fcfffff
 800bce8:	3ff00000 	.word	0x3ff00000
 800bcec:	7ff00000 	.word	0x7ff00000
 800bcf0:	7fe00000 	.word	0x7fe00000
 800bcf4:	7c9fffff 	.word	0x7c9fffff
 800bcf8:	3fe00000 	.word	0x3fe00000
 800bcfc:	bff00000 	.word	0xbff00000
 800bd00:	7fefffff 	.word	0x7fefffff

0800bd04 <_strtod_r>:
 800bd04:	4b01      	ldr	r3, [pc, #4]	; (800bd0c <_strtod_r+0x8>)
 800bd06:	f7ff b9f3 	b.w	800b0f0 <_strtod_l>
 800bd0a:	bf00      	nop
 800bd0c:	20000fd4 	.word	0x20000fd4

0800bd10 <_strtol_l.isra.0>:
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd16:	d001      	beq.n	800bd1c <_strtol_l.isra.0+0xc>
 800bd18:	2b24      	cmp	r3, #36	; 0x24
 800bd1a:	d906      	bls.n	800bd2a <_strtol_l.isra.0+0x1a>
 800bd1c:	f7fe f8be 	bl	8009e9c <__errno>
 800bd20:	2316      	movs	r3, #22
 800bd22:	6003      	str	r3, [r0, #0]
 800bd24:	2000      	movs	r0, #0
 800bd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2a:	4f3a      	ldr	r7, [pc, #232]	; (800be14 <_strtol_l.isra.0+0x104>)
 800bd2c:	468e      	mov	lr, r1
 800bd2e:	4676      	mov	r6, lr
 800bd30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bd34:	5de5      	ldrb	r5, [r4, r7]
 800bd36:	f015 0508 	ands.w	r5, r5, #8
 800bd3a:	d1f8      	bne.n	800bd2e <_strtol_l.isra.0+0x1e>
 800bd3c:	2c2d      	cmp	r4, #45	; 0x2d
 800bd3e:	d134      	bne.n	800bdaa <_strtol_l.isra.0+0x9a>
 800bd40:	f89e 4000 	ldrb.w	r4, [lr]
 800bd44:	f04f 0801 	mov.w	r8, #1
 800bd48:	f106 0e02 	add.w	lr, r6, #2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d05c      	beq.n	800be0a <_strtol_l.isra.0+0xfa>
 800bd50:	2b10      	cmp	r3, #16
 800bd52:	d10c      	bne.n	800bd6e <_strtol_l.isra.0+0x5e>
 800bd54:	2c30      	cmp	r4, #48	; 0x30
 800bd56:	d10a      	bne.n	800bd6e <_strtol_l.isra.0+0x5e>
 800bd58:	f89e 4000 	ldrb.w	r4, [lr]
 800bd5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bd60:	2c58      	cmp	r4, #88	; 0x58
 800bd62:	d14d      	bne.n	800be00 <_strtol_l.isra.0+0xf0>
 800bd64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bd68:	2310      	movs	r3, #16
 800bd6a:	f10e 0e02 	add.w	lr, lr, #2
 800bd6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bd72:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800bd76:	2600      	movs	r6, #0
 800bd78:	fbbc f9f3 	udiv	r9, ip, r3
 800bd7c:	4635      	mov	r5, r6
 800bd7e:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bd86:	2f09      	cmp	r7, #9
 800bd88:	d818      	bhi.n	800bdbc <_strtol_l.isra.0+0xac>
 800bd8a:	463c      	mov	r4, r7
 800bd8c:	42a3      	cmp	r3, r4
 800bd8e:	dd24      	ble.n	800bdda <_strtol_l.isra.0+0xca>
 800bd90:	2e00      	cmp	r6, #0
 800bd92:	db1f      	blt.n	800bdd4 <_strtol_l.isra.0+0xc4>
 800bd94:	45a9      	cmp	r9, r5
 800bd96:	d31d      	bcc.n	800bdd4 <_strtol_l.isra.0+0xc4>
 800bd98:	d101      	bne.n	800bd9e <_strtol_l.isra.0+0x8e>
 800bd9a:	45a2      	cmp	sl, r4
 800bd9c:	db1a      	blt.n	800bdd4 <_strtol_l.isra.0+0xc4>
 800bd9e:	fb05 4503 	mla	r5, r5, r3, r4
 800bda2:	2601      	movs	r6, #1
 800bda4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bda8:	e7eb      	b.n	800bd82 <_strtol_l.isra.0+0x72>
 800bdaa:	2c2b      	cmp	r4, #43	; 0x2b
 800bdac:	bf08      	it	eq
 800bdae:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bdb2:	46a8      	mov	r8, r5
 800bdb4:	bf08      	it	eq
 800bdb6:	f106 0e02 	addeq.w	lr, r6, #2
 800bdba:	e7c7      	b.n	800bd4c <_strtol_l.isra.0+0x3c>
 800bdbc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bdc0:	2f19      	cmp	r7, #25
 800bdc2:	d801      	bhi.n	800bdc8 <_strtol_l.isra.0+0xb8>
 800bdc4:	3c37      	subs	r4, #55	; 0x37
 800bdc6:	e7e1      	b.n	800bd8c <_strtol_l.isra.0+0x7c>
 800bdc8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bdcc:	2f19      	cmp	r7, #25
 800bdce:	d804      	bhi.n	800bdda <_strtol_l.isra.0+0xca>
 800bdd0:	3c57      	subs	r4, #87	; 0x57
 800bdd2:	e7db      	b.n	800bd8c <_strtol_l.isra.0+0x7c>
 800bdd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800bdd8:	e7e4      	b.n	800bda4 <_strtol_l.isra.0+0x94>
 800bdda:	2e00      	cmp	r6, #0
 800bddc:	da05      	bge.n	800bdea <_strtol_l.isra.0+0xda>
 800bdde:	2322      	movs	r3, #34	; 0x22
 800bde0:	6003      	str	r3, [r0, #0]
 800bde2:	4665      	mov	r5, ip
 800bde4:	b942      	cbnz	r2, 800bdf8 <_strtol_l.isra.0+0xe8>
 800bde6:	4628      	mov	r0, r5
 800bde8:	e79d      	b.n	800bd26 <_strtol_l.isra.0+0x16>
 800bdea:	f1b8 0f00 	cmp.w	r8, #0
 800bdee:	d000      	beq.n	800bdf2 <_strtol_l.isra.0+0xe2>
 800bdf0:	426d      	negs	r5, r5
 800bdf2:	2a00      	cmp	r2, #0
 800bdf4:	d0f7      	beq.n	800bde6 <_strtol_l.isra.0+0xd6>
 800bdf6:	b10e      	cbz	r6, 800bdfc <_strtol_l.isra.0+0xec>
 800bdf8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800bdfc:	6011      	str	r1, [r2, #0]
 800bdfe:	e7f2      	b.n	800bde6 <_strtol_l.isra.0+0xd6>
 800be00:	2430      	movs	r4, #48	; 0x30
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1b3      	bne.n	800bd6e <_strtol_l.isra.0+0x5e>
 800be06:	2308      	movs	r3, #8
 800be08:	e7b1      	b.n	800bd6e <_strtol_l.isra.0+0x5e>
 800be0a:	2c30      	cmp	r4, #48	; 0x30
 800be0c:	d0a4      	beq.n	800bd58 <_strtol_l.isra.0+0x48>
 800be0e:	230a      	movs	r3, #10
 800be10:	e7ad      	b.n	800bd6e <_strtol_l.isra.0+0x5e>
 800be12:	bf00      	nop
 800be14:	08040941 	.word	0x08040941

0800be18 <_strtol_r>:
 800be18:	f7ff bf7a 	b.w	800bd10 <_strtol_l.isra.0>

0800be1c <__swbuf_r>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	460e      	mov	r6, r1
 800be20:	4614      	mov	r4, r2
 800be22:	4605      	mov	r5, r0
 800be24:	b118      	cbz	r0, 800be2e <__swbuf_r+0x12>
 800be26:	6983      	ldr	r3, [r0, #24]
 800be28:	b90b      	cbnz	r3, 800be2e <__swbuf_r+0x12>
 800be2a:	f001 f84f 	bl	800cecc <__sinit>
 800be2e:	4b21      	ldr	r3, [pc, #132]	; (800beb4 <__swbuf_r+0x98>)
 800be30:	429c      	cmp	r4, r3
 800be32:	d12b      	bne.n	800be8c <__swbuf_r+0x70>
 800be34:	686c      	ldr	r4, [r5, #4]
 800be36:	69a3      	ldr	r3, [r4, #24]
 800be38:	60a3      	str	r3, [r4, #8]
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	071a      	lsls	r2, r3, #28
 800be3e:	d52f      	bpl.n	800bea0 <__swbuf_r+0x84>
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	b36b      	cbz	r3, 800bea0 <__swbuf_r+0x84>
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	6820      	ldr	r0, [r4, #0]
 800be48:	1ac0      	subs	r0, r0, r3
 800be4a:	6963      	ldr	r3, [r4, #20]
 800be4c:	b2f6      	uxtb	r6, r6
 800be4e:	4283      	cmp	r3, r0
 800be50:	4637      	mov	r7, r6
 800be52:	dc04      	bgt.n	800be5e <__swbuf_r+0x42>
 800be54:	4621      	mov	r1, r4
 800be56:	4628      	mov	r0, r5
 800be58:	f000 ffa4 	bl	800cda4 <_fflush_r>
 800be5c:	bb30      	cbnz	r0, 800beac <__swbuf_r+0x90>
 800be5e:	68a3      	ldr	r3, [r4, #8]
 800be60:	3b01      	subs	r3, #1
 800be62:	60a3      	str	r3, [r4, #8]
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	6022      	str	r2, [r4, #0]
 800be6a:	701e      	strb	r6, [r3, #0]
 800be6c:	6963      	ldr	r3, [r4, #20]
 800be6e:	3001      	adds	r0, #1
 800be70:	4283      	cmp	r3, r0
 800be72:	d004      	beq.n	800be7e <__swbuf_r+0x62>
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	07db      	lsls	r3, r3, #31
 800be78:	d506      	bpl.n	800be88 <__swbuf_r+0x6c>
 800be7a:	2e0a      	cmp	r6, #10
 800be7c:	d104      	bne.n	800be88 <__swbuf_r+0x6c>
 800be7e:	4621      	mov	r1, r4
 800be80:	4628      	mov	r0, r5
 800be82:	f000 ff8f 	bl	800cda4 <_fflush_r>
 800be86:	b988      	cbnz	r0, 800beac <__swbuf_r+0x90>
 800be88:	4638      	mov	r0, r7
 800be8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be8c:	4b0a      	ldr	r3, [pc, #40]	; (800beb8 <__swbuf_r+0x9c>)
 800be8e:	429c      	cmp	r4, r3
 800be90:	d101      	bne.n	800be96 <__swbuf_r+0x7a>
 800be92:	68ac      	ldr	r4, [r5, #8]
 800be94:	e7cf      	b.n	800be36 <__swbuf_r+0x1a>
 800be96:	4b09      	ldr	r3, [pc, #36]	; (800bebc <__swbuf_r+0xa0>)
 800be98:	429c      	cmp	r4, r3
 800be9a:	bf08      	it	eq
 800be9c:	68ec      	ldreq	r4, [r5, #12]
 800be9e:	e7ca      	b.n	800be36 <__swbuf_r+0x1a>
 800bea0:	4621      	mov	r1, r4
 800bea2:	4628      	mov	r0, r5
 800bea4:	f000 f80c 	bl	800bec0 <__swsetup_r>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d0cb      	beq.n	800be44 <__swbuf_r+0x28>
 800beac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800beb0:	e7ea      	b.n	800be88 <__swbuf_r+0x6c>
 800beb2:	bf00      	nop
 800beb4:	08040af8 	.word	0x08040af8
 800beb8:	08040b18 	.word	0x08040b18
 800bebc:	08040ad8 	.word	0x08040ad8

0800bec0 <__swsetup_r>:
 800bec0:	4b32      	ldr	r3, [pc, #200]	; (800bf8c <__swsetup_r+0xcc>)
 800bec2:	b570      	push	{r4, r5, r6, lr}
 800bec4:	681d      	ldr	r5, [r3, #0]
 800bec6:	4606      	mov	r6, r0
 800bec8:	460c      	mov	r4, r1
 800beca:	b125      	cbz	r5, 800bed6 <__swsetup_r+0x16>
 800becc:	69ab      	ldr	r3, [r5, #24]
 800bece:	b913      	cbnz	r3, 800bed6 <__swsetup_r+0x16>
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 fffb 	bl	800cecc <__sinit>
 800bed6:	4b2e      	ldr	r3, [pc, #184]	; (800bf90 <__swsetup_r+0xd0>)
 800bed8:	429c      	cmp	r4, r3
 800beda:	d10f      	bne.n	800befc <__swsetup_r+0x3c>
 800bedc:	686c      	ldr	r4, [r5, #4]
 800bede:	89a3      	ldrh	r3, [r4, #12]
 800bee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bee4:	0719      	lsls	r1, r3, #28
 800bee6:	d42c      	bmi.n	800bf42 <__swsetup_r+0x82>
 800bee8:	06dd      	lsls	r5, r3, #27
 800beea:	d411      	bmi.n	800bf10 <__swsetup_r+0x50>
 800beec:	2309      	movs	r3, #9
 800beee:	6033      	str	r3, [r6, #0]
 800bef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bef4:	81a3      	strh	r3, [r4, #12]
 800bef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800befa:	e03e      	b.n	800bf7a <__swsetup_r+0xba>
 800befc:	4b25      	ldr	r3, [pc, #148]	; (800bf94 <__swsetup_r+0xd4>)
 800befe:	429c      	cmp	r4, r3
 800bf00:	d101      	bne.n	800bf06 <__swsetup_r+0x46>
 800bf02:	68ac      	ldr	r4, [r5, #8]
 800bf04:	e7eb      	b.n	800bede <__swsetup_r+0x1e>
 800bf06:	4b24      	ldr	r3, [pc, #144]	; (800bf98 <__swsetup_r+0xd8>)
 800bf08:	429c      	cmp	r4, r3
 800bf0a:	bf08      	it	eq
 800bf0c:	68ec      	ldreq	r4, [r5, #12]
 800bf0e:	e7e6      	b.n	800bede <__swsetup_r+0x1e>
 800bf10:	0758      	lsls	r0, r3, #29
 800bf12:	d512      	bpl.n	800bf3a <__swsetup_r+0x7a>
 800bf14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf16:	b141      	cbz	r1, 800bf2a <__swsetup_r+0x6a>
 800bf18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf1c:	4299      	cmp	r1, r3
 800bf1e:	d002      	beq.n	800bf26 <__swsetup_r+0x66>
 800bf20:	4630      	mov	r0, r6
 800bf22:	f7fe f815 	bl	8009f50 <_free_r>
 800bf26:	2300      	movs	r3, #0
 800bf28:	6363      	str	r3, [r4, #52]	; 0x34
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf30:	81a3      	strh	r3, [r4, #12]
 800bf32:	2300      	movs	r3, #0
 800bf34:	6063      	str	r3, [r4, #4]
 800bf36:	6923      	ldr	r3, [r4, #16]
 800bf38:	6023      	str	r3, [r4, #0]
 800bf3a:	89a3      	ldrh	r3, [r4, #12]
 800bf3c:	f043 0308 	orr.w	r3, r3, #8
 800bf40:	81a3      	strh	r3, [r4, #12]
 800bf42:	6923      	ldr	r3, [r4, #16]
 800bf44:	b94b      	cbnz	r3, 800bf5a <__swsetup_r+0x9a>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf50:	d003      	beq.n	800bf5a <__swsetup_r+0x9a>
 800bf52:	4621      	mov	r1, r4
 800bf54:	4630      	mov	r0, r6
 800bf56:	f001 fbf1 	bl	800d73c <__smakebuf_r>
 800bf5a:	89a0      	ldrh	r0, [r4, #12]
 800bf5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf60:	f010 0301 	ands.w	r3, r0, #1
 800bf64:	d00a      	beq.n	800bf7c <__swsetup_r+0xbc>
 800bf66:	2300      	movs	r3, #0
 800bf68:	60a3      	str	r3, [r4, #8]
 800bf6a:	6963      	ldr	r3, [r4, #20]
 800bf6c:	425b      	negs	r3, r3
 800bf6e:	61a3      	str	r3, [r4, #24]
 800bf70:	6923      	ldr	r3, [r4, #16]
 800bf72:	b943      	cbnz	r3, 800bf86 <__swsetup_r+0xc6>
 800bf74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf78:	d1ba      	bne.n	800bef0 <__swsetup_r+0x30>
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	0781      	lsls	r1, r0, #30
 800bf7e:	bf58      	it	pl
 800bf80:	6963      	ldrpl	r3, [r4, #20]
 800bf82:	60a3      	str	r3, [r4, #8]
 800bf84:	e7f4      	b.n	800bf70 <__swsetup_r+0xb0>
 800bf86:	2000      	movs	r0, #0
 800bf88:	e7f7      	b.n	800bf7a <__swsetup_r+0xba>
 800bf8a:	bf00      	nop
 800bf8c:	20000f6c 	.word	0x20000f6c
 800bf90:	08040af8 	.word	0x08040af8
 800bf94:	08040b18 	.word	0x08040b18
 800bf98:	08040ad8 	.word	0x08040ad8

0800bf9c <abort>:
 800bf9c:	b508      	push	{r3, lr}
 800bf9e:	2006      	movs	r0, #6
 800bfa0:	f002 fac2 	bl	800e528 <raise>
 800bfa4:	2001      	movs	r0, #1
 800bfa6:	f005 faf1 	bl	801158c <_exit>

0800bfaa <quorem>:
 800bfaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfae:	6903      	ldr	r3, [r0, #16]
 800bfb0:	690c      	ldr	r4, [r1, #16]
 800bfb2:	42a3      	cmp	r3, r4
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	f2c0 8081 	blt.w	800c0bc <quorem+0x112>
 800bfba:	3c01      	subs	r4, #1
 800bfbc:	f101 0814 	add.w	r8, r1, #20
 800bfc0:	f100 0514 	add.w	r5, r0, #20
 800bfc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfc8:	9301      	str	r3, [sp, #4]
 800bfca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bfda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfde:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfe2:	d331      	bcc.n	800c048 <quorem+0x9e>
 800bfe4:	f04f 0e00 	mov.w	lr, #0
 800bfe8:	4640      	mov	r0, r8
 800bfea:	46ac      	mov	ip, r5
 800bfec:	46f2      	mov	sl, lr
 800bfee:	f850 2b04 	ldr.w	r2, [r0], #4
 800bff2:	b293      	uxth	r3, r2
 800bff4:	fb06 e303 	mla	r3, r6, r3, lr
 800bff8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	ebaa 0303 	sub.w	r3, sl, r3
 800c002:	0c12      	lsrs	r2, r2, #16
 800c004:	f8dc a000 	ldr.w	sl, [ip]
 800c008:	fb06 e202 	mla	r2, r6, r2, lr
 800c00c:	fa13 f38a 	uxtah	r3, r3, sl
 800c010:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c014:	fa1f fa82 	uxth.w	sl, r2
 800c018:	f8dc 2000 	ldr.w	r2, [ip]
 800c01c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c024:	b29b      	uxth	r3, r3
 800c026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c02a:	4581      	cmp	r9, r0
 800c02c:	f84c 3b04 	str.w	r3, [ip], #4
 800c030:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c034:	d2db      	bcs.n	800bfee <quorem+0x44>
 800c036:	f855 300b 	ldr.w	r3, [r5, fp]
 800c03a:	b92b      	cbnz	r3, 800c048 <quorem+0x9e>
 800c03c:	9b01      	ldr	r3, [sp, #4]
 800c03e:	3b04      	subs	r3, #4
 800c040:	429d      	cmp	r5, r3
 800c042:	461a      	mov	r2, r3
 800c044:	d32e      	bcc.n	800c0a4 <quorem+0xfa>
 800c046:	613c      	str	r4, [r7, #16]
 800c048:	4638      	mov	r0, r7
 800c04a:	f001 feb7 	bl	800ddbc <__mcmp>
 800c04e:	2800      	cmp	r0, #0
 800c050:	db24      	blt.n	800c09c <quorem+0xf2>
 800c052:	3601      	adds	r6, #1
 800c054:	4628      	mov	r0, r5
 800c056:	f04f 0c00 	mov.w	ip, #0
 800c05a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c05e:	f8d0 e000 	ldr.w	lr, [r0]
 800c062:	b293      	uxth	r3, r2
 800c064:	ebac 0303 	sub.w	r3, ip, r3
 800c068:	0c12      	lsrs	r2, r2, #16
 800c06a:	fa13 f38e 	uxtah	r3, r3, lr
 800c06e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c072:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c076:	b29b      	uxth	r3, r3
 800c078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c07c:	45c1      	cmp	r9, r8
 800c07e:	f840 3b04 	str.w	r3, [r0], #4
 800c082:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c086:	d2e8      	bcs.n	800c05a <quorem+0xb0>
 800c088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c08c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c090:	b922      	cbnz	r2, 800c09c <quorem+0xf2>
 800c092:	3b04      	subs	r3, #4
 800c094:	429d      	cmp	r5, r3
 800c096:	461a      	mov	r2, r3
 800c098:	d30a      	bcc.n	800c0b0 <quorem+0x106>
 800c09a:	613c      	str	r4, [r7, #16]
 800c09c:	4630      	mov	r0, r6
 800c09e:	b003      	add	sp, #12
 800c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a4:	6812      	ldr	r2, [r2, #0]
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	d1cc      	bne.n	800c046 <quorem+0x9c>
 800c0ac:	3c01      	subs	r4, #1
 800c0ae:	e7c7      	b.n	800c040 <quorem+0x96>
 800c0b0:	6812      	ldr	r2, [r2, #0]
 800c0b2:	3b04      	subs	r3, #4
 800c0b4:	2a00      	cmp	r2, #0
 800c0b6:	d1f0      	bne.n	800c09a <quorem+0xf0>
 800c0b8:	3c01      	subs	r4, #1
 800c0ba:	e7eb      	b.n	800c094 <quorem+0xea>
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7ee      	b.n	800c09e <quorem+0xf4>

0800c0c0 <_dtoa_r>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	ed2d 8b02 	vpush	{d8}
 800c0c8:	ec57 6b10 	vmov	r6, r7, d0
 800c0cc:	b095      	sub	sp, #84	; 0x54
 800c0ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c0d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c0d4:	9105      	str	r1, [sp, #20]
 800c0d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c0da:	4604      	mov	r4, r0
 800c0dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c0de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0e0:	b975      	cbnz	r5, 800c100 <_dtoa_r+0x40>
 800c0e2:	2010      	movs	r0, #16
 800c0e4:	f7fd ff16 	bl	8009f14 <malloc>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	6260      	str	r0, [r4, #36]	; 0x24
 800c0ec:	b920      	cbnz	r0, 800c0f8 <_dtoa_r+0x38>
 800c0ee:	4bb2      	ldr	r3, [pc, #712]	; (800c3b8 <_dtoa_r+0x2f8>)
 800c0f0:	21ea      	movs	r1, #234	; 0xea
 800c0f2:	48b2      	ldr	r0, [pc, #712]	; (800c3bc <_dtoa_r+0x2fc>)
 800c0f4:	f7fd feb4 	bl	8009e60 <__assert_func>
 800c0f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c0fc:	6005      	str	r5, [r0, #0]
 800c0fe:	60c5      	str	r5, [r0, #12]
 800c100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c102:	6819      	ldr	r1, [r3, #0]
 800c104:	b151      	cbz	r1, 800c11c <_dtoa_r+0x5c>
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	604a      	str	r2, [r1, #4]
 800c10a:	2301      	movs	r3, #1
 800c10c:	4093      	lsls	r3, r2
 800c10e:	608b      	str	r3, [r1, #8]
 800c110:	4620      	mov	r0, r4
 800c112:	f001 fbcb 	bl	800d8ac <_Bfree>
 800c116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c118:	2200      	movs	r2, #0
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	1e3b      	subs	r3, r7, #0
 800c11e:	bfb9      	ittee	lt
 800c120:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c124:	9303      	strlt	r3, [sp, #12]
 800c126:	2300      	movge	r3, #0
 800c128:	f8c8 3000 	strge.w	r3, [r8]
 800c12c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c130:	4ba3      	ldr	r3, [pc, #652]	; (800c3c0 <_dtoa_r+0x300>)
 800c132:	bfbc      	itt	lt
 800c134:	2201      	movlt	r2, #1
 800c136:	f8c8 2000 	strlt.w	r2, [r8]
 800c13a:	ea33 0309 	bics.w	r3, r3, r9
 800c13e:	d11b      	bne.n	800c178 <_dtoa_r+0xb8>
 800c140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c142:	f242 730f 	movw	r3, #9999	; 0x270f
 800c146:	6013      	str	r3, [r2, #0]
 800c148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c14c:	4333      	orrs	r3, r6
 800c14e:	f000 857a 	beq.w	800cc46 <_dtoa_r+0xb86>
 800c152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c154:	b963      	cbnz	r3, 800c170 <_dtoa_r+0xb0>
 800c156:	4b9b      	ldr	r3, [pc, #620]	; (800c3c4 <_dtoa_r+0x304>)
 800c158:	e024      	b.n	800c1a4 <_dtoa_r+0xe4>
 800c15a:	4b9b      	ldr	r3, [pc, #620]	; (800c3c8 <_dtoa_r+0x308>)
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	3308      	adds	r3, #8
 800c160:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	9800      	ldr	r0, [sp, #0]
 800c166:	b015      	add	sp, #84	; 0x54
 800c168:	ecbd 8b02 	vpop	{d8}
 800c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c170:	4b94      	ldr	r3, [pc, #592]	; (800c3c4 <_dtoa_r+0x304>)
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	3303      	adds	r3, #3
 800c176:	e7f3      	b.n	800c160 <_dtoa_r+0xa0>
 800c178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c17c:	2200      	movs	r2, #0
 800c17e:	ec51 0b17 	vmov	r0, r1, d7
 800c182:	2300      	movs	r3, #0
 800c184:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c188:	f7f4 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c18c:	4680      	mov	r8, r0
 800c18e:	b158      	cbz	r0, 800c1a8 <_dtoa_r+0xe8>
 800c190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c192:	2301      	movs	r3, #1
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 8551 	beq.w	800cc40 <_dtoa_r+0xb80>
 800c19e:	488b      	ldr	r0, [pc, #556]	; (800c3cc <_dtoa_r+0x30c>)
 800c1a0:	6018      	str	r0, [r3, #0]
 800c1a2:	1e43      	subs	r3, r0, #1
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	e7dd      	b.n	800c164 <_dtoa_r+0xa4>
 800c1a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c1ac:	aa12      	add	r2, sp, #72	; 0x48
 800c1ae:	a913      	add	r1, sp, #76	; 0x4c
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f001 ff23 	bl	800dffc <__d2b>
 800c1b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c1ba:	4683      	mov	fp, r0
 800c1bc:	2d00      	cmp	r5, #0
 800c1be:	d07c      	beq.n	800c2ba <_dtoa_r+0x1fa>
 800c1c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c1c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c1ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c1d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c1d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c1da:	4b7d      	ldr	r3, [pc, #500]	; (800c3d0 <_dtoa_r+0x310>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4630      	mov	r0, r6
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	f7f4 f851 	bl	8000288 <__aeabi_dsub>
 800c1e6:	a36e      	add	r3, pc, #440	; (adr r3, 800c3a0 <_dtoa_r+0x2e0>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f7f4 fa04 	bl	80005f8 <__aeabi_dmul>
 800c1f0:	a36d      	add	r3, pc, #436	; (adr r3, 800c3a8 <_dtoa_r+0x2e8>)
 800c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f6:	f7f4 f849 	bl	800028c <__adddf3>
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	460f      	mov	r7, r1
 800c200:	f7f4 f990 	bl	8000524 <__aeabi_i2d>
 800c204:	a36a      	add	r3, pc, #424	; (adr r3, 800c3b0 <_dtoa_r+0x2f0>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f4 f9f5 	bl	80005f8 <__aeabi_dmul>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	4630      	mov	r0, r6
 800c214:	4639      	mov	r1, r7
 800c216:	f7f4 f839 	bl	800028c <__adddf3>
 800c21a:	4606      	mov	r6, r0
 800c21c:	460f      	mov	r7, r1
 800c21e:	f7f4 fc9b 	bl	8000b58 <__aeabi_d2iz>
 800c222:	2200      	movs	r2, #0
 800c224:	4682      	mov	sl, r0
 800c226:	2300      	movs	r3, #0
 800c228:	4630      	mov	r0, r6
 800c22a:	4639      	mov	r1, r7
 800c22c:	f7f4 fc56 	bl	8000adc <__aeabi_dcmplt>
 800c230:	b148      	cbz	r0, 800c246 <_dtoa_r+0x186>
 800c232:	4650      	mov	r0, sl
 800c234:	f7f4 f976 	bl	8000524 <__aeabi_i2d>
 800c238:	4632      	mov	r2, r6
 800c23a:	463b      	mov	r3, r7
 800c23c:	f7f4 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 800c240:	b908      	cbnz	r0, 800c246 <_dtoa_r+0x186>
 800c242:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c246:	f1ba 0f16 	cmp.w	sl, #22
 800c24a:	d854      	bhi.n	800c2f6 <_dtoa_r+0x236>
 800c24c:	4b61      	ldr	r3, [pc, #388]	; (800c3d4 <_dtoa_r+0x314>)
 800c24e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c25a:	f7f4 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800c25e:	2800      	cmp	r0, #0
 800c260:	d04b      	beq.n	800c2fa <_dtoa_r+0x23a>
 800c262:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c266:	2300      	movs	r3, #0
 800c268:	930e      	str	r3, [sp, #56]	; 0x38
 800c26a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c26c:	1b5d      	subs	r5, r3, r5
 800c26e:	1e6b      	subs	r3, r5, #1
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	bf43      	ittte	mi
 800c274:	2300      	movmi	r3, #0
 800c276:	f1c5 0801 	rsbmi	r8, r5, #1
 800c27a:	9304      	strmi	r3, [sp, #16]
 800c27c:	f04f 0800 	movpl.w	r8, #0
 800c280:	f1ba 0f00 	cmp.w	sl, #0
 800c284:	db3b      	blt.n	800c2fe <_dtoa_r+0x23e>
 800c286:	9b04      	ldr	r3, [sp, #16]
 800c288:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c28c:	4453      	add	r3, sl
 800c28e:	9304      	str	r3, [sp, #16]
 800c290:	2300      	movs	r3, #0
 800c292:	9306      	str	r3, [sp, #24]
 800c294:	9b05      	ldr	r3, [sp, #20]
 800c296:	2b09      	cmp	r3, #9
 800c298:	d869      	bhi.n	800c36e <_dtoa_r+0x2ae>
 800c29a:	2b05      	cmp	r3, #5
 800c29c:	bfc4      	itt	gt
 800c29e:	3b04      	subgt	r3, #4
 800c2a0:	9305      	strgt	r3, [sp, #20]
 800c2a2:	9b05      	ldr	r3, [sp, #20]
 800c2a4:	f1a3 0302 	sub.w	r3, r3, #2
 800c2a8:	bfcc      	ite	gt
 800c2aa:	2500      	movgt	r5, #0
 800c2ac:	2501      	movle	r5, #1
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d869      	bhi.n	800c386 <_dtoa_r+0x2c6>
 800c2b2:	e8df f003 	tbb	[pc, r3]
 800c2b6:	4e2c      	.short	0x4e2c
 800c2b8:	5a4c      	.short	0x5a4c
 800c2ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c2be:	441d      	add	r5, r3
 800c2c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c2c4:	2b20      	cmp	r3, #32
 800c2c6:	bfc1      	itttt	gt
 800c2c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c2cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c2d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c2d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c2d8:	bfda      	itte	le
 800c2da:	f1c3 0320 	rsble	r3, r3, #32
 800c2de:	fa06 f003 	lslle.w	r0, r6, r3
 800c2e2:	4318      	orrgt	r0, r3
 800c2e4:	f7f4 f90e 	bl	8000504 <__aeabi_ui2d>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c2f0:	3d01      	subs	r5, #1
 800c2f2:	9310      	str	r3, [sp, #64]	; 0x40
 800c2f4:	e771      	b.n	800c1da <_dtoa_r+0x11a>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e7b6      	b.n	800c268 <_dtoa_r+0x1a8>
 800c2fa:	900e      	str	r0, [sp, #56]	; 0x38
 800c2fc:	e7b5      	b.n	800c26a <_dtoa_r+0x1aa>
 800c2fe:	f1ca 0300 	rsb	r3, sl, #0
 800c302:	9306      	str	r3, [sp, #24]
 800c304:	2300      	movs	r3, #0
 800c306:	eba8 080a 	sub.w	r8, r8, sl
 800c30a:	930d      	str	r3, [sp, #52]	; 0x34
 800c30c:	e7c2      	b.n	800c294 <_dtoa_r+0x1d4>
 800c30e:	2300      	movs	r3, #0
 800c310:	9308      	str	r3, [sp, #32]
 800c312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c314:	2b00      	cmp	r3, #0
 800c316:	dc39      	bgt.n	800c38c <_dtoa_r+0x2cc>
 800c318:	f04f 0901 	mov.w	r9, #1
 800c31c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c320:	464b      	mov	r3, r9
 800c322:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c326:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c328:	2200      	movs	r2, #0
 800c32a:	6042      	str	r2, [r0, #4]
 800c32c:	2204      	movs	r2, #4
 800c32e:	f102 0614 	add.w	r6, r2, #20
 800c332:	429e      	cmp	r6, r3
 800c334:	6841      	ldr	r1, [r0, #4]
 800c336:	d92f      	bls.n	800c398 <_dtoa_r+0x2d8>
 800c338:	4620      	mov	r0, r4
 800c33a:	f001 fa77 	bl	800d82c <_Balloc>
 800c33e:	9000      	str	r0, [sp, #0]
 800c340:	2800      	cmp	r0, #0
 800c342:	d14b      	bne.n	800c3dc <_dtoa_r+0x31c>
 800c344:	4b24      	ldr	r3, [pc, #144]	; (800c3d8 <_dtoa_r+0x318>)
 800c346:	4602      	mov	r2, r0
 800c348:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c34c:	e6d1      	b.n	800c0f2 <_dtoa_r+0x32>
 800c34e:	2301      	movs	r3, #1
 800c350:	e7de      	b.n	800c310 <_dtoa_r+0x250>
 800c352:	2300      	movs	r3, #0
 800c354:	9308      	str	r3, [sp, #32]
 800c356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c358:	eb0a 0903 	add.w	r9, sl, r3
 800c35c:	f109 0301 	add.w	r3, r9, #1
 800c360:	2b01      	cmp	r3, #1
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	bfb8      	it	lt
 800c366:	2301      	movlt	r3, #1
 800c368:	e7dd      	b.n	800c326 <_dtoa_r+0x266>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e7f2      	b.n	800c354 <_dtoa_r+0x294>
 800c36e:	2501      	movs	r5, #1
 800c370:	2300      	movs	r3, #0
 800c372:	9305      	str	r3, [sp, #20]
 800c374:	9508      	str	r5, [sp, #32]
 800c376:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c37a:	2200      	movs	r2, #0
 800c37c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c380:	2312      	movs	r3, #18
 800c382:	9209      	str	r2, [sp, #36]	; 0x24
 800c384:	e7cf      	b.n	800c326 <_dtoa_r+0x266>
 800c386:	2301      	movs	r3, #1
 800c388:	9308      	str	r3, [sp, #32]
 800c38a:	e7f4      	b.n	800c376 <_dtoa_r+0x2b6>
 800c38c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c390:	f8cd 9004 	str.w	r9, [sp, #4]
 800c394:	464b      	mov	r3, r9
 800c396:	e7c6      	b.n	800c326 <_dtoa_r+0x266>
 800c398:	3101      	adds	r1, #1
 800c39a:	6041      	str	r1, [r0, #4]
 800c39c:	0052      	lsls	r2, r2, #1
 800c39e:	e7c6      	b.n	800c32e <_dtoa_r+0x26e>
 800c3a0:	636f4361 	.word	0x636f4361
 800c3a4:	3fd287a7 	.word	0x3fd287a7
 800c3a8:	8b60c8b3 	.word	0x8b60c8b3
 800c3ac:	3fc68a28 	.word	0x3fc68a28
 800c3b0:	509f79fb 	.word	0x509f79fb
 800c3b4:	3fd34413 	.word	0x3fd34413
 800c3b8:	08040a4e 	.word	0x08040a4e
 800c3bc:	08040a65 	.word	0x08040a65
 800c3c0:	7ff00000 	.word	0x7ff00000
 800c3c4:	08040a4a 	.word	0x08040a4a
 800c3c8:	08040a41 	.word	0x08040a41
 800c3cc:	080408c6 	.word	0x080408c6
 800c3d0:	3ff80000 	.word	0x3ff80000
 800c3d4:	08040c40 	.word	0x08040c40
 800c3d8:	08040ac4 	.word	0x08040ac4
 800c3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3de:	9a00      	ldr	r2, [sp, #0]
 800c3e0:	601a      	str	r2, [r3, #0]
 800c3e2:	9b01      	ldr	r3, [sp, #4]
 800c3e4:	2b0e      	cmp	r3, #14
 800c3e6:	f200 80ad 	bhi.w	800c544 <_dtoa_r+0x484>
 800c3ea:	2d00      	cmp	r5, #0
 800c3ec:	f000 80aa 	beq.w	800c544 <_dtoa_r+0x484>
 800c3f0:	f1ba 0f00 	cmp.w	sl, #0
 800c3f4:	dd36      	ble.n	800c464 <_dtoa_r+0x3a4>
 800c3f6:	4ac3      	ldr	r2, [pc, #780]	; (800c704 <_dtoa_r+0x644>)
 800c3f8:	f00a 030f 	and.w	r3, sl, #15
 800c3fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c400:	ed93 7b00 	vldr	d7, [r3]
 800c404:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c408:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c40c:	eeb0 8a47 	vmov.f32	s16, s14
 800c410:	eef0 8a67 	vmov.f32	s17, s15
 800c414:	d016      	beq.n	800c444 <_dtoa_r+0x384>
 800c416:	4bbc      	ldr	r3, [pc, #752]	; (800c708 <_dtoa_r+0x648>)
 800c418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c41c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c420:	f7f4 fa14 	bl	800084c <__aeabi_ddiv>
 800c424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c428:	f007 070f 	and.w	r7, r7, #15
 800c42c:	2503      	movs	r5, #3
 800c42e:	4eb6      	ldr	r6, [pc, #728]	; (800c708 <_dtoa_r+0x648>)
 800c430:	b957      	cbnz	r7, 800c448 <_dtoa_r+0x388>
 800c432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c436:	ec53 2b18 	vmov	r2, r3, d8
 800c43a:	f7f4 fa07 	bl	800084c <__aeabi_ddiv>
 800c43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c442:	e029      	b.n	800c498 <_dtoa_r+0x3d8>
 800c444:	2502      	movs	r5, #2
 800c446:	e7f2      	b.n	800c42e <_dtoa_r+0x36e>
 800c448:	07f9      	lsls	r1, r7, #31
 800c44a:	d508      	bpl.n	800c45e <_dtoa_r+0x39e>
 800c44c:	ec51 0b18 	vmov	r0, r1, d8
 800c450:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c454:	f7f4 f8d0 	bl	80005f8 <__aeabi_dmul>
 800c458:	ec41 0b18 	vmov	d8, r0, r1
 800c45c:	3501      	adds	r5, #1
 800c45e:	107f      	asrs	r7, r7, #1
 800c460:	3608      	adds	r6, #8
 800c462:	e7e5      	b.n	800c430 <_dtoa_r+0x370>
 800c464:	f000 80a6 	beq.w	800c5b4 <_dtoa_r+0x4f4>
 800c468:	f1ca 0600 	rsb	r6, sl, #0
 800c46c:	4ba5      	ldr	r3, [pc, #660]	; (800c704 <_dtoa_r+0x644>)
 800c46e:	4fa6      	ldr	r7, [pc, #664]	; (800c708 <_dtoa_r+0x648>)
 800c470:	f006 020f 	and.w	r2, r6, #15
 800c474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c480:	f7f4 f8ba 	bl	80005f8 <__aeabi_dmul>
 800c484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c488:	1136      	asrs	r6, r6, #4
 800c48a:	2300      	movs	r3, #0
 800c48c:	2502      	movs	r5, #2
 800c48e:	2e00      	cmp	r6, #0
 800c490:	f040 8085 	bne.w	800c59e <_dtoa_r+0x4de>
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1d2      	bne.n	800c43e <_dtoa_r+0x37e>
 800c498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 808c 	beq.w	800c5b8 <_dtoa_r+0x4f8>
 800c4a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c4a4:	4b99      	ldr	r3, [pc, #612]	; (800c70c <_dtoa_r+0x64c>)
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	f7f4 fb16 	bl	8000adc <__aeabi_dcmplt>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	f000 8081 	beq.w	800c5b8 <_dtoa_r+0x4f8>
 800c4b6:	9b01      	ldr	r3, [sp, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d07d      	beq.n	800c5b8 <_dtoa_r+0x4f8>
 800c4bc:	f1b9 0f00 	cmp.w	r9, #0
 800c4c0:	dd3c      	ble.n	800c53c <_dtoa_r+0x47c>
 800c4c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c4c6:	9307      	str	r3, [sp, #28]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4b91      	ldr	r3, [pc, #580]	; (800c710 <_dtoa_r+0x650>)
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	f7f4 f892 	bl	80005f8 <__aeabi_dmul>
 800c4d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4d8:	3501      	adds	r5, #1
 800c4da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c4de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f7f4 f81e 	bl	8000524 <__aeabi_i2d>
 800c4e8:	4632      	mov	r2, r6
 800c4ea:	463b      	mov	r3, r7
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	4b88      	ldr	r3, [pc, #544]	; (800c714 <_dtoa_r+0x654>)
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f7f3 feca 	bl	800028c <__adddf3>
 800c4f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c500:	9303      	str	r3, [sp, #12]
 800c502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c504:	2b00      	cmp	r3, #0
 800c506:	d15c      	bne.n	800c5c2 <_dtoa_r+0x502>
 800c508:	4b83      	ldr	r3, [pc, #524]	; (800c718 <_dtoa_r+0x658>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	4630      	mov	r0, r6
 800c50e:	4639      	mov	r1, r7
 800c510:	f7f3 feba 	bl	8000288 <__aeabi_dsub>
 800c514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c518:	4606      	mov	r6, r0
 800c51a:	460f      	mov	r7, r1
 800c51c:	f7f4 fafc 	bl	8000b18 <__aeabi_dcmpgt>
 800c520:	2800      	cmp	r0, #0
 800c522:	f040 8296 	bne.w	800ca52 <_dtoa_r+0x992>
 800c526:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c52a:	4630      	mov	r0, r6
 800c52c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c530:	4639      	mov	r1, r7
 800c532:	f7f4 fad3 	bl	8000adc <__aeabi_dcmplt>
 800c536:	2800      	cmp	r0, #0
 800c538:	f040 8288 	bne.w	800ca4c <_dtoa_r+0x98c>
 800c53c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c540:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c546:	2b00      	cmp	r3, #0
 800c548:	f2c0 8158 	blt.w	800c7fc <_dtoa_r+0x73c>
 800c54c:	f1ba 0f0e 	cmp.w	sl, #14
 800c550:	f300 8154 	bgt.w	800c7fc <_dtoa_r+0x73c>
 800c554:	4b6b      	ldr	r3, [pc, #428]	; (800c704 <_dtoa_r+0x644>)
 800c556:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c55a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c560:	2b00      	cmp	r3, #0
 800c562:	f280 80e3 	bge.w	800c72c <_dtoa_r+0x66c>
 800c566:	9b01      	ldr	r3, [sp, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f300 80df 	bgt.w	800c72c <_dtoa_r+0x66c>
 800c56e:	f040 826d 	bne.w	800ca4c <_dtoa_r+0x98c>
 800c572:	4b69      	ldr	r3, [pc, #420]	; (800c718 <_dtoa_r+0x658>)
 800c574:	2200      	movs	r2, #0
 800c576:	4640      	mov	r0, r8
 800c578:	4649      	mov	r1, r9
 800c57a:	f7f4 f83d 	bl	80005f8 <__aeabi_dmul>
 800c57e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c582:	f7f4 fabf 	bl	8000b04 <__aeabi_dcmpge>
 800c586:	9e01      	ldr	r6, [sp, #4]
 800c588:	4637      	mov	r7, r6
 800c58a:	2800      	cmp	r0, #0
 800c58c:	f040 8243 	bne.w	800ca16 <_dtoa_r+0x956>
 800c590:	9d00      	ldr	r5, [sp, #0]
 800c592:	2331      	movs	r3, #49	; 0x31
 800c594:	f805 3b01 	strb.w	r3, [r5], #1
 800c598:	f10a 0a01 	add.w	sl, sl, #1
 800c59c:	e23f      	b.n	800ca1e <_dtoa_r+0x95e>
 800c59e:	07f2      	lsls	r2, r6, #31
 800c5a0:	d505      	bpl.n	800c5ae <_dtoa_r+0x4ee>
 800c5a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5a6:	f7f4 f827 	bl	80005f8 <__aeabi_dmul>
 800c5aa:	3501      	adds	r5, #1
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	1076      	asrs	r6, r6, #1
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	e76c      	b.n	800c48e <_dtoa_r+0x3ce>
 800c5b4:	2502      	movs	r5, #2
 800c5b6:	e76f      	b.n	800c498 <_dtoa_r+0x3d8>
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800c5be:	930c      	str	r3, [sp, #48]	; 0x30
 800c5c0:	e78d      	b.n	800c4de <_dtoa_r+0x41e>
 800c5c2:	9900      	ldr	r1, [sp, #0]
 800c5c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c5c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5c8:	4b4e      	ldr	r3, [pc, #312]	; (800c704 <_dtoa_r+0x644>)
 800c5ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5ce:	4401      	add	r1, r0
 800c5d0:	9102      	str	r1, [sp, #8]
 800c5d2:	9908      	ldr	r1, [sp, #32]
 800c5d4:	eeb0 8a47 	vmov.f32	s16, s14
 800c5d8:	eef0 8a67 	vmov.f32	s17, s15
 800c5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5e4:	2900      	cmp	r1, #0
 800c5e6:	d045      	beq.n	800c674 <_dtoa_r+0x5b4>
 800c5e8:	494c      	ldr	r1, [pc, #304]	; (800c71c <_dtoa_r+0x65c>)
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	f7f4 f92e 	bl	800084c <__aeabi_ddiv>
 800c5f0:	ec53 2b18 	vmov	r2, r3, d8
 800c5f4:	f7f3 fe48 	bl	8000288 <__aeabi_dsub>
 800c5f8:	9d00      	ldr	r5, [sp, #0]
 800c5fa:	ec41 0b18 	vmov	d8, r0, r1
 800c5fe:	4639      	mov	r1, r7
 800c600:	4630      	mov	r0, r6
 800c602:	f7f4 faa9 	bl	8000b58 <__aeabi_d2iz>
 800c606:	900c      	str	r0, [sp, #48]	; 0x30
 800c608:	f7f3 ff8c 	bl	8000524 <__aeabi_i2d>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4630      	mov	r0, r6
 800c612:	4639      	mov	r1, r7
 800c614:	f7f3 fe38 	bl	8000288 <__aeabi_dsub>
 800c618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c61a:	3330      	adds	r3, #48	; 0x30
 800c61c:	f805 3b01 	strb.w	r3, [r5], #1
 800c620:	ec53 2b18 	vmov	r2, r3, d8
 800c624:	4606      	mov	r6, r0
 800c626:	460f      	mov	r7, r1
 800c628:	f7f4 fa58 	bl	8000adc <__aeabi_dcmplt>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d165      	bne.n	800c6fc <_dtoa_r+0x63c>
 800c630:	4632      	mov	r2, r6
 800c632:	463b      	mov	r3, r7
 800c634:	4935      	ldr	r1, [pc, #212]	; (800c70c <_dtoa_r+0x64c>)
 800c636:	2000      	movs	r0, #0
 800c638:	f7f3 fe26 	bl	8000288 <__aeabi_dsub>
 800c63c:	ec53 2b18 	vmov	r2, r3, d8
 800c640:	f7f4 fa4c 	bl	8000adc <__aeabi_dcmplt>
 800c644:	2800      	cmp	r0, #0
 800c646:	f040 80b9 	bne.w	800c7bc <_dtoa_r+0x6fc>
 800c64a:	9b02      	ldr	r3, [sp, #8]
 800c64c:	429d      	cmp	r5, r3
 800c64e:	f43f af75 	beq.w	800c53c <_dtoa_r+0x47c>
 800c652:	4b2f      	ldr	r3, [pc, #188]	; (800c710 <_dtoa_r+0x650>)
 800c654:	ec51 0b18 	vmov	r0, r1, d8
 800c658:	2200      	movs	r2, #0
 800c65a:	f7f3 ffcd 	bl	80005f8 <__aeabi_dmul>
 800c65e:	4b2c      	ldr	r3, [pc, #176]	; (800c710 <_dtoa_r+0x650>)
 800c660:	ec41 0b18 	vmov	d8, r0, r1
 800c664:	2200      	movs	r2, #0
 800c666:	4630      	mov	r0, r6
 800c668:	4639      	mov	r1, r7
 800c66a:	f7f3 ffc5 	bl	80005f8 <__aeabi_dmul>
 800c66e:	4606      	mov	r6, r0
 800c670:	460f      	mov	r7, r1
 800c672:	e7c4      	b.n	800c5fe <_dtoa_r+0x53e>
 800c674:	ec51 0b17 	vmov	r0, r1, d7
 800c678:	f7f3 ffbe 	bl	80005f8 <__aeabi_dmul>
 800c67c:	9b02      	ldr	r3, [sp, #8]
 800c67e:	9d00      	ldr	r5, [sp, #0]
 800c680:	930c      	str	r3, [sp, #48]	; 0x30
 800c682:	ec41 0b18 	vmov	d8, r0, r1
 800c686:	4639      	mov	r1, r7
 800c688:	4630      	mov	r0, r6
 800c68a:	f7f4 fa65 	bl	8000b58 <__aeabi_d2iz>
 800c68e:	9011      	str	r0, [sp, #68]	; 0x44
 800c690:	f7f3 ff48 	bl	8000524 <__aeabi_i2d>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4630      	mov	r0, r6
 800c69a:	4639      	mov	r1, r7
 800c69c:	f7f3 fdf4 	bl	8000288 <__aeabi_dsub>
 800c6a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6a2:	3330      	adds	r3, #48	; 0x30
 800c6a4:	f805 3b01 	strb.w	r3, [r5], #1
 800c6a8:	9b02      	ldr	r3, [sp, #8]
 800c6aa:	429d      	cmp	r5, r3
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	f04f 0200 	mov.w	r2, #0
 800c6b4:	d134      	bne.n	800c720 <_dtoa_r+0x660>
 800c6b6:	4b19      	ldr	r3, [pc, #100]	; (800c71c <_dtoa_r+0x65c>)
 800c6b8:	ec51 0b18 	vmov	r0, r1, d8
 800c6bc:	f7f3 fde6 	bl	800028c <__adddf3>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	f7f4 fa26 	bl	8000b18 <__aeabi_dcmpgt>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	d175      	bne.n	800c7bc <_dtoa_r+0x6fc>
 800c6d0:	ec53 2b18 	vmov	r2, r3, d8
 800c6d4:	4911      	ldr	r1, [pc, #68]	; (800c71c <_dtoa_r+0x65c>)
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	f7f3 fdd6 	bl	8000288 <__aeabi_dsub>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	f7f4 f9fa 	bl	8000adc <__aeabi_dcmplt>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f43f af27 	beq.w	800c53c <_dtoa_r+0x47c>
 800c6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c6f0:	1e6b      	subs	r3, r5, #1
 800c6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800c6f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6f8:	2b30      	cmp	r3, #48	; 0x30
 800c6fa:	d0f8      	beq.n	800c6ee <_dtoa_r+0x62e>
 800c6fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c700:	e04a      	b.n	800c798 <_dtoa_r+0x6d8>
 800c702:	bf00      	nop
 800c704:	08040c40 	.word	0x08040c40
 800c708:	08040c18 	.word	0x08040c18
 800c70c:	3ff00000 	.word	0x3ff00000
 800c710:	40240000 	.word	0x40240000
 800c714:	401c0000 	.word	0x401c0000
 800c718:	40140000 	.word	0x40140000
 800c71c:	3fe00000 	.word	0x3fe00000
 800c720:	4baf      	ldr	r3, [pc, #700]	; (800c9e0 <_dtoa_r+0x920>)
 800c722:	f7f3 ff69 	bl	80005f8 <__aeabi_dmul>
 800c726:	4606      	mov	r6, r0
 800c728:	460f      	mov	r7, r1
 800c72a:	e7ac      	b.n	800c686 <_dtoa_r+0x5c6>
 800c72c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c730:	9d00      	ldr	r5, [sp, #0]
 800c732:	4642      	mov	r2, r8
 800c734:	464b      	mov	r3, r9
 800c736:	4630      	mov	r0, r6
 800c738:	4639      	mov	r1, r7
 800c73a:	f7f4 f887 	bl	800084c <__aeabi_ddiv>
 800c73e:	f7f4 fa0b 	bl	8000b58 <__aeabi_d2iz>
 800c742:	9002      	str	r0, [sp, #8]
 800c744:	f7f3 feee 	bl	8000524 <__aeabi_i2d>
 800c748:	4642      	mov	r2, r8
 800c74a:	464b      	mov	r3, r9
 800c74c:	f7f3 ff54 	bl	80005f8 <__aeabi_dmul>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4630      	mov	r0, r6
 800c756:	4639      	mov	r1, r7
 800c758:	f7f3 fd96 	bl	8000288 <__aeabi_dsub>
 800c75c:	9e02      	ldr	r6, [sp, #8]
 800c75e:	9f01      	ldr	r7, [sp, #4]
 800c760:	3630      	adds	r6, #48	; 0x30
 800c762:	f805 6b01 	strb.w	r6, [r5], #1
 800c766:	9e00      	ldr	r6, [sp, #0]
 800c768:	1bae      	subs	r6, r5, r6
 800c76a:	42b7      	cmp	r7, r6
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	d137      	bne.n	800c7e2 <_dtoa_r+0x722>
 800c772:	f7f3 fd8b 	bl	800028c <__adddf3>
 800c776:	4642      	mov	r2, r8
 800c778:	464b      	mov	r3, r9
 800c77a:	4606      	mov	r6, r0
 800c77c:	460f      	mov	r7, r1
 800c77e:	f7f4 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 800c782:	b9c8      	cbnz	r0, 800c7b8 <_dtoa_r+0x6f8>
 800c784:	4642      	mov	r2, r8
 800c786:	464b      	mov	r3, r9
 800c788:	4630      	mov	r0, r6
 800c78a:	4639      	mov	r1, r7
 800c78c:	f7f4 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c790:	b110      	cbz	r0, 800c798 <_dtoa_r+0x6d8>
 800c792:	9b02      	ldr	r3, [sp, #8]
 800c794:	07d9      	lsls	r1, r3, #31
 800c796:	d40f      	bmi.n	800c7b8 <_dtoa_r+0x6f8>
 800c798:	4620      	mov	r0, r4
 800c79a:	4659      	mov	r1, fp
 800c79c:	f001 f886 	bl	800d8ac <_Bfree>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	702b      	strb	r3, [r5, #0]
 800c7a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7a6:	f10a 0001 	add.w	r0, sl, #1
 800c7aa:	6018      	str	r0, [r3, #0]
 800c7ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f43f acd8 	beq.w	800c164 <_dtoa_r+0xa4>
 800c7b4:	601d      	str	r5, [r3, #0]
 800c7b6:	e4d5      	b.n	800c164 <_dtoa_r+0xa4>
 800c7b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800c7bc:	462b      	mov	r3, r5
 800c7be:	461d      	mov	r5, r3
 800c7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7c4:	2a39      	cmp	r2, #57	; 0x39
 800c7c6:	d108      	bne.n	800c7da <_dtoa_r+0x71a>
 800c7c8:	9a00      	ldr	r2, [sp, #0]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d1f7      	bne.n	800c7be <_dtoa_r+0x6fe>
 800c7ce:	9a07      	ldr	r2, [sp, #28]
 800c7d0:	9900      	ldr	r1, [sp, #0]
 800c7d2:	3201      	adds	r2, #1
 800c7d4:	9207      	str	r2, [sp, #28]
 800c7d6:	2230      	movs	r2, #48	; 0x30
 800c7d8:	700a      	strb	r2, [r1, #0]
 800c7da:	781a      	ldrb	r2, [r3, #0]
 800c7dc:	3201      	adds	r2, #1
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	e78c      	b.n	800c6fc <_dtoa_r+0x63c>
 800c7e2:	4b7f      	ldr	r3, [pc, #508]	; (800c9e0 <_dtoa_r+0x920>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f7f3 ff07 	bl	80005f8 <__aeabi_dmul>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	460f      	mov	r7, r1
 800c7f2:	f7f4 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d09b      	beq.n	800c732 <_dtoa_r+0x672>
 800c7fa:	e7cd      	b.n	800c798 <_dtoa_r+0x6d8>
 800c7fc:	9a08      	ldr	r2, [sp, #32]
 800c7fe:	2a00      	cmp	r2, #0
 800c800:	f000 80c4 	beq.w	800c98c <_dtoa_r+0x8cc>
 800c804:	9a05      	ldr	r2, [sp, #20]
 800c806:	2a01      	cmp	r2, #1
 800c808:	f300 80a8 	bgt.w	800c95c <_dtoa_r+0x89c>
 800c80c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c80e:	2a00      	cmp	r2, #0
 800c810:	f000 80a0 	beq.w	800c954 <_dtoa_r+0x894>
 800c814:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c818:	9e06      	ldr	r6, [sp, #24]
 800c81a:	4645      	mov	r5, r8
 800c81c:	9a04      	ldr	r2, [sp, #16]
 800c81e:	2101      	movs	r1, #1
 800c820:	441a      	add	r2, r3
 800c822:	4620      	mov	r0, r4
 800c824:	4498      	add	r8, r3
 800c826:	9204      	str	r2, [sp, #16]
 800c828:	f001 f946 	bl	800dab8 <__i2b>
 800c82c:	4607      	mov	r7, r0
 800c82e:	2d00      	cmp	r5, #0
 800c830:	dd0b      	ble.n	800c84a <_dtoa_r+0x78a>
 800c832:	9b04      	ldr	r3, [sp, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	dd08      	ble.n	800c84a <_dtoa_r+0x78a>
 800c838:	42ab      	cmp	r3, r5
 800c83a:	9a04      	ldr	r2, [sp, #16]
 800c83c:	bfa8      	it	ge
 800c83e:	462b      	movge	r3, r5
 800c840:	eba8 0803 	sub.w	r8, r8, r3
 800c844:	1aed      	subs	r5, r5, r3
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	9304      	str	r3, [sp, #16]
 800c84a:	9b06      	ldr	r3, [sp, #24]
 800c84c:	b1fb      	cbz	r3, 800c88e <_dtoa_r+0x7ce>
 800c84e:	9b08      	ldr	r3, [sp, #32]
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 809f 	beq.w	800c994 <_dtoa_r+0x8d4>
 800c856:	2e00      	cmp	r6, #0
 800c858:	dd11      	ble.n	800c87e <_dtoa_r+0x7be>
 800c85a:	4639      	mov	r1, r7
 800c85c:	4632      	mov	r2, r6
 800c85e:	4620      	mov	r0, r4
 800c860:	f001 f9e6 	bl	800dc30 <__pow5mult>
 800c864:	465a      	mov	r2, fp
 800c866:	4601      	mov	r1, r0
 800c868:	4607      	mov	r7, r0
 800c86a:	4620      	mov	r0, r4
 800c86c:	f001 f93a 	bl	800dae4 <__multiply>
 800c870:	4659      	mov	r1, fp
 800c872:	9007      	str	r0, [sp, #28]
 800c874:	4620      	mov	r0, r4
 800c876:	f001 f819 	bl	800d8ac <_Bfree>
 800c87a:	9b07      	ldr	r3, [sp, #28]
 800c87c:	469b      	mov	fp, r3
 800c87e:	9b06      	ldr	r3, [sp, #24]
 800c880:	1b9a      	subs	r2, r3, r6
 800c882:	d004      	beq.n	800c88e <_dtoa_r+0x7ce>
 800c884:	4659      	mov	r1, fp
 800c886:	4620      	mov	r0, r4
 800c888:	f001 f9d2 	bl	800dc30 <__pow5mult>
 800c88c:	4683      	mov	fp, r0
 800c88e:	2101      	movs	r1, #1
 800c890:	4620      	mov	r0, r4
 800c892:	f001 f911 	bl	800dab8 <__i2b>
 800c896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c898:	2b00      	cmp	r3, #0
 800c89a:	4606      	mov	r6, r0
 800c89c:	dd7c      	ble.n	800c998 <_dtoa_r+0x8d8>
 800c89e:	461a      	mov	r2, r3
 800c8a0:	4601      	mov	r1, r0
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f001 f9c4 	bl	800dc30 <__pow5mult>
 800c8a8:	9b05      	ldr	r3, [sp, #20]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	dd76      	ble.n	800c99e <_dtoa_r+0x8de>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9306      	str	r3, [sp, #24]
 800c8b4:	6933      	ldr	r3, [r6, #16]
 800c8b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8ba:	6918      	ldr	r0, [r3, #16]
 800c8bc:	f001 f8ac 	bl	800da18 <__hi0bits>
 800c8c0:	f1c0 0020 	rsb	r0, r0, #32
 800c8c4:	9b04      	ldr	r3, [sp, #16]
 800c8c6:	4418      	add	r0, r3
 800c8c8:	f010 001f 	ands.w	r0, r0, #31
 800c8cc:	f000 8086 	beq.w	800c9dc <_dtoa_r+0x91c>
 800c8d0:	f1c0 0320 	rsb	r3, r0, #32
 800c8d4:	2b04      	cmp	r3, #4
 800c8d6:	dd7f      	ble.n	800c9d8 <_dtoa_r+0x918>
 800c8d8:	f1c0 001c 	rsb	r0, r0, #28
 800c8dc:	9b04      	ldr	r3, [sp, #16]
 800c8de:	4403      	add	r3, r0
 800c8e0:	4480      	add	r8, r0
 800c8e2:	4405      	add	r5, r0
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	f1b8 0f00 	cmp.w	r8, #0
 800c8ea:	dd05      	ble.n	800c8f8 <_dtoa_r+0x838>
 800c8ec:	4659      	mov	r1, fp
 800c8ee:	4642      	mov	r2, r8
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f001 f9f7 	bl	800dce4 <__lshift>
 800c8f6:	4683      	mov	fp, r0
 800c8f8:	9b04      	ldr	r3, [sp, #16]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	dd05      	ble.n	800c90a <_dtoa_r+0x84a>
 800c8fe:	4631      	mov	r1, r6
 800c900:	461a      	mov	r2, r3
 800c902:	4620      	mov	r0, r4
 800c904:	f001 f9ee 	bl	800dce4 <__lshift>
 800c908:	4606      	mov	r6, r0
 800c90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d069      	beq.n	800c9e4 <_dtoa_r+0x924>
 800c910:	4631      	mov	r1, r6
 800c912:	4658      	mov	r0, fp
 800c914:	f001 fa52 	bl	800ddbc <__mcmp>
 800c918:	2800      	cmp	r0, #0
 800c91a:	da63      	bge.n	800c9e4 <_dtoa_r+0x924>
 800c91c:	2300      	movs	r3, #0
 800c91e:	4659      	mov	r1, fp
 800c920:	220a      	movs	r2, #10
 800c922:	4620      	mov	r0, r4
 800c924:	f000 ffe4 	bl	800d8f0 <__multadd>
 800c928:	9b08      	ldr	r3, [sp, #32]
 800c92a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c92e:	4683      	mov	fp, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 818f 	beq.w	800cc54 <_dtoa_r+0xb94>
 800c936:	4639      	mov	r1, r7
 800c938:	2300      	movs	r3, #0
 800c93a:	220a      	movs	r2, #10
 800c93c:	4620      	mov	r0, r4
 800c93e:	f000 ffd7 	bl	800d8f0 <__multadd>
 800c942:	f1b9 0f00 	cmp.w	r9, #0
 800c946:	4607      	mov	r7, r0
 800c948:	f300 808e 	bgt.w	800ca68 <_dtoa_r+0x9a8>
 800c94c:	9b05      	ldr	r3, [sp, #20]
 800c94e:	2b02      	cmp	r3, #2
 800c950:	dc50      	bgt.n	800c9f4 <_dtoa_r+0x934>
 800c952:	e089      	b.n	800ca68 <_dtoa_r+0x9a8>
 800c954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c95a:	e75d      	b.n	800c818 <_dtoa_r+0x758>
 800c95c:	9b01      	ldr	r3, [sp, #4]
 800c95e:	1e5e      	subs	r6, r3, #1
 800c960:	9b06      	ldr	r3, [sp, #24]
 800c962:	42b3      	cmp	r3, r6
 800c964:	bfbf      	itttt	lt
 800c966:	9b06      	ldrlt	r3, [sp, #24]
 800c968:	9606      	strlt	r6, [sp, #24]
 800c96a:	1af2      	sublt	r2, r6, r3
 800c96c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c96e:	bfb6      	itet	lt
 800c970:	189b      	addlt	r3, r3, r2
 800c972:	1b9e      	subge	r6, r3, r6
 800c974:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c976:	9b01      	ldr	r3, [sp, #4]
 800c978:	bfb8      	it	lt
 800c97a:	2600      	movlt	r6, #0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	bfb5      	itete	lt
 800c980:	eba8 0503 	sublt.w	r5, r8, r3
 800c984:	9b01      	ldrge	r3, [sp, #4]
 800c986:	2300      	movlt	r3, #0
 800c988:	4645      	movge	r5, r8
 800c98a:	e747      	b.n	800c81c <_dtoa_r+0x75c>
 800c98c:	9e06      	ldr	r6, [sp, #24]
 800c98e:	9f08      	ldr	r7, [sp, #32]
 800c990:	4645      	mov	r5, r8
 800c992:	e74c      	b.n	800c82e <_dtoa_r+0x76e>
 800c994:	9a06      	ldr	r2, [sp, #24]
 800c996:	e775      	b.n	800c884 <_dtoa_r+0x7c4>
 800c998:	9b05      	ldr	r3, [sp, #20]
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	dc18      	bgt.n	800c9d0 <_dtoa_r+0x910>
 800c99e:	9b02      	ldr	r3, [sp, #8]
 800c9a0:	b9b3      	cbnz	r3, 800c9d0 <_dtoa_r+0x910>
 800c9a2:	9b03      	ldr	r3, [sp, #12]
 800c9a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9a8:	b9a3      	cbnz	r3, 800c9d4 <_dtoa_r+0x914>
 800c9aa:	9b03      	ldr	r3, [sp, #12]
 800c9ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9b0:	0d1b      	lsrs	r3, r3, #20
 800c9b2:	051b      	lsls	r3, r3, #20
 800c9b4:	b12b      	cbz	r3, 800c9c2 <_dtoa_r+0x902>
 800c9b6:	9b04      	ldr	r3, [sp, #16]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	9304      	str	r3, [sp, #16]
 800c9bc:	f108 0801 	add.w	r8, r8, #1
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	9306      	str	r3, [sp, #24]
 800c9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f47f af74 	bne.w	800c8b4 <_dtoa_r+0x7f4>
 800c9cc:	2001      	movs	r0, #1
 800c9ce:	e779      	b.n	800c8c4 <_dtoa_r+0x804>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e7f6      	b.n	800c9c2 <_dtoa_r+0x902>
 800c9d4:	9b02      	ldr	r3, [sp, #8]
 800c9d6:	e7f4      	b.n	800c9c2 <_dtoa_r+0x902>
 800c9d8:	d085      	beq.n	800c8e6 <_dtoa_r+0x826>
 800c9da:	4618      	mov	r0, r3
 800c9dc:	301c      	adds	r0, #28
 800c9de:	e77d      	b.n	800c8dc <_dtoa_r+0x81c>
 800c9e0:	40240000 	.word	0x40240000
 800c9e4:	9b01      	ldr	r3, [sp, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	dc38      	bgt.n	800ca5c <_dtoa_r+0x99c>
 800c9ea:	9b05      	ldr	r3, [sp, #20]
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	dd35      	ble.n	800ca5c <_dtoa_r+0x99c>
 800c9f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c9f4:	f1b9 0f00 	cmp.w	r9, #0
 800c9f8:	d10d      	bne.n	800ca16 <_dtoa_r+0x956>
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	464b      	mov	r3, r9
 800c9fe:	2205      	movs	r2, #5
 800ca00:	4620      	mov	r0, r4
 800ca02:	f000 ff75 	bl	800d8f0 <__multadd>
 800ca06:	4601      	mov	r1, r0
 800ca08:	4606      	mov	r6, r0
 800ca0a:	4658      	mov	r0, fp
 800ca0c:	f001 f9d6 	bl	800ddbc <__mcmp>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	f73f adbd 	bgt.w	800c590 <_dtoa_r+0x4d0>
 800ca16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca18:	9d00      	ldr	r5, [sp, #0]
 800ca1a:	ea6f 0a03 	mvn.w	sl, r3
 800ca1e:	f04f 0800 	mov.w	r8, #0
 800ca22:	4631      	mov	r1, r6
 800ca24:	4620      	mov	r0, r4
 800ca26:	f000 ff41 	bl	800d8ac <_Bfree>
 800ca2a:	2f00      	cmp	r7, #0
 800ca2c:	f43f aeb4 	beq.w	800c798 <_dtoa_r+0x6d8>
 800ca30:	f1b8 0f00 	cmp.w	r8, #0
 800ca34:	d005      	beq.n	800ca42 <_dtoa_r+0x982>
 800ca36:	45b8      	cmp	r8, r7
 800ca38:	d003      	beq.n	800ca42 <_dtoa_r+0x982>
 800ca3a:	4641      	mov	r1, r8
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 ff35 	bl	800d8ac <_Bfree>
 800ca42:	4639      	mov	r1, r7
 800ca44:	4620      	mov	r0, r4
 800ca46:	f000 ff31 	bl	800d8ac <_Bfree>
 800ca4a:	e6a5      	b.n	800c798 <_dtoa_r+0x6d8>
 800ca4c:	2600      	movs	r6, #0
 800ca4e:	4637      	mov	r7, r6
 800ca50:	e7e1      	b.n	800ca16 <_dtoa_r+0x956>
 800ca52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ca54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ca58:	4637      	mov	r7, r6
 800ca5a:	e599      	b.n	800c590 <_dtoa_r+0x4d0>
 800ca5c:	9b08      	ldr	r3, [sp, #32]
 800ca5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 80fd 	beq.w	800cc62 <_dtoa_r+0xba2>
 800ca68:	2d00      	cmp	r5, #0
 800ca6a:	dd05      	ble.n	800ca78 <_dtoa_r+0x9b8>
 800ca6c:	4639      	mov	r1, r7
 800ca6e:	462a      	mov	r2, r5
 800ca70:	4620      	mov	r0, r4
 800ca72:	f001 f937 	bl	800dce4 <__lshift>
 800ca76:	4607      	mov	r7, r0
 800ca78:	9b06      	ldr	r3, [sp, #24]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d05c      	beq.n	800cb38 <_dtoa_r+0xa78>
 800ca7e:	6879      	ldr	r1, [r7, #4]
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 fed3 	bl	800d82c <_Balloc>
 800ca86:	4605      	mov	r5, r0
 800ca88:	b928      	cbnz	r0, 800ca96 <_dtoa_r+0x9d6>
 800ca8a:	4b80      	ldr	r3, [pc, #512]	; (800cc8c <_dtoa_r+0xbcc>)
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca92:	f7ff bb2e 	b.w	800c0f2 <_dtoa_r+0x32>
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	3202      	adds	r2, #2
 800ca9a:	0092      	lsls	r2, r2, #2
 800ca9c:	f107 010c 	add.w	r1, r7, #12
 800caa0:	300c      	adds	r0, #12
 800caa2:	f7fd fa3f 	bl	8009f24 <memcpy>
 800caa6:	2201      	movs	r2, #1
 800caa8:	4629      	mov	r1, r5
 800caaa:	4620      	mov	r0, r4
 800caac:	f001 f91a 	bl	800dce4 <__lshift>
 800cab0:	9b00      	ldr	r3, [sp, #0]
 800cab2:	3301      	adds	r3, #1
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	9b00      	ldr	r3, [sp, #0]
 800cab8:	444b      	add	r3, r9
 800caba:	9307      	str	r3, [sp, #28]
 800cabc:	9b02      	ldr	r3, [sp, #8]
 800cabe:	f003 0301 	and.w	r3, r3, #1
 800cac2:	46b8      	mov	r8, r7
 800cac4:	9306      	str	r3, [sp, #24]
 800cac6:	4607      	mov	r7, r0
 800cac8:	9b01      	ldr	r3, [sp, #4]
 800caca:	4631      	mov	r1, r6
 800cacc:	3b01      	subs	r3, #1
 800cace:	4658      	mov	r0, fp
 800cad0:	9302      	str	r3, [sp, #8]
 800cad2:	f7ff fa6a 	bl	800bfaa <quorem>
 800cad6:	4603      	mov	r3, r0
 800cad8:	3330      	adds	r3, #48	; 0x30
 800cada:	9004      	str	r0, [sp, #16]
 800cadc:	4641      	mov	r1, r8
 800cade:	4658      	mov	r0, fp
 800cae0:	9308      	str	r3, [sp, #32]
 800cae2:	f001 f96b 	bl	800ddbc <__mcmp>
 800cae6:	463a      	mov	r2, r7
 800cae8:	4681      	mov	r9, r0
 800caea:	4631      	mov	r1, r6
 800caec:	4620      	mov	r0, r4
 800caee:	f001 f981 	bl	800ddf4 <__mdiff>
 800caf2:	68c2      	ldr	r2, [r0, #12]
 800caf4:	9b08      	ldr	r3, [sp, #32]
 800caf6:	4605      	mov	r5, r0
 800caf8:	bb02      	cbnz	r2, 800cb3c <_dtoa_r+0xa7c>
 800cafa:	4601      	mov	r1, r0
 800cafc:	4658      	mov	r0, fp
 800cafe:	f001 f95d 	bl	800ddbc <__mcmp>
 800cb02:	9b08      	ldr	r3, [sp, #32]
 800cb04:	4602      	mov	r2, r0
 800cb06:	4629      	mov	r1, r5
 800cb08:	4620      	mov	r0, r4
 800cb0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cb0e:	f000 fecd 	bl	800d8ac <_Bfree>
 800cb12:	9b05      	ldr	r3, [sp, #20]
 800cb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb16:	9d01      	ldr	r5, [sp, #4]
 800cb18:	ea43 0102 	orr.w	r1, r3, r2
 800cb1c:	9b06      	ldr	r3, [sp, #24]
 800cb1e:	430b      	orrs	r3, r1
 800cb20:	9b08      	ldr	r3, [sp, #32]
 800cb22:	d10d      	bne.n	800cb40 <_dtoa_r+0xa80>
 800cb24:	2b39      	cmp	r3, #57	; 0x39
 800cb26:	d029      	beq.n	800cb7c <_dtoa_r+0xabc>
 800cb28:	f1b9 0f00 	cmp.w	r9, #0
 800cb2c:	dd01      	ble.n	800cb32 <_dtoa_r+0xa72>
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	3331      	adds	r3, #49	; 0x31
 800cb32:	9a02      	ldr	r2, [sp, #8]
 800cb34:	7013      	strb	r3, [r2, #0]
 800cb36:	e774      	b.n	800ca22 <_dtoa_r+0x962>
 800cb38:	4638      	mov	r0, r7
 800cb3a:	e7b9      	b.n	800cab0 <_dtoa_r+0x9f0>
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	e7e2      	b.n	800cb06 <_dtoa_r+0xa46>
 800cb40:	f1b9 0f00 	cmp.w	r9, #0
 800cb44:	db06      	blt.n	800cb54 <_dtoa_r+0xa94>
 800cb46:	9905      	ldr	r1, [sp, #20]
 800cb48:	ea41 0909 	orr.w	r9, r1, r9
 800cb4c:	9906      	ldr	r1, [sp, #24]
 800cb4e:	ea59 0101 	orrs.w	r1, r9, r1
 800cb52:	d120      	bne.n	800cb96 <_dtoa_r+0xad6>
 800cb54:	2a00      	cmp	r2, #0
 800cb56:	ddec      	ble.n	800cb32 <_dtoa_r+0xa72>
 800cb58:	4659      	mov	r1, fp
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	f001 f8c0 	bl	800dce4 <__lshift>
 800cb64:	4631      	mov	r1, r6
 800cb66:	4683      	mov	fp, r0
 800cb68:	f001 f928 	bl	800ddbc <__mcmp>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	dc02      	bgt.n	800cb78 <_dtoa_r+0xab8>
 800cb72:	d1de      	bne.n	800cb32 <_dtoa_r+0xa72>
 800cb74:	07da      	lsls	r2, r3, #31
 800cb76:	d5dc      	bpl.n	800cb32 <_dtoa_r+0xa72>
 800cb78:	2b39      	cmp	r3, #57	; 0x39
 800cb7a:	d1d8      	bne.n	800cb2e <_dtoa_r+0xa6e>
 800cb7c:	9a02      	ldr	r2, [sp, #8]
 800cb7e:	2339      	movs	r3, #57	; 0x39
 800cb80:	7013      	strb	r3, [r2, #0]
 800cb82:	462b      	mov	r3, r5
 800cb84:	461d      	mov	r5, r3
 800cb86:	3b01      	subs	r3, #1
 800cb88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb8c:	2a39      	cmp	r2, #57	; 0x39
 800cb8e:	d050      	beq.n	800cc32 <_dtoa_r+0xb72>
 800cb90:	3201      	adds	r2, #1
 800cb92:	701a      	strb	r2, [r3, #0]
 800cb94:	e745      	b.n	800ca22 <_dtoa_r+0x962>
 800cb96:	2a00      	cmp	r2, #0
 800cb98:	dd03      	ble.n	800cba2 <_dtoa_r+0xae2>
 800cb9a:	2b39      	cmp	r3, #57	; 0x39
 800cb9c:	d0ee      	beq.n	800cb7c <_dtoa_r+0xabc>
 800cb9e:	3301      	adds	r3, #1
 800cba0:	e7c7      	b.n	800cb32 <_dtoa_r+0xa72>
 800cba2:	9a01      	ldr	r2, [sp, #4]
 800cba4:	9907      	ldr	r1, [sp, #28]
 800cba6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cbaa:	428a      	cmp	r2, r1
 800cbac:	d02a      	beq.n	800cc04 <_dtoa_r+0xb44>
 800cbae:	4659      	mov	r1, fp
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	220a      	movs	r2, #10
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fe9b 	bl	800d8f0 <__multadd>
 800cbba:	45b8      	cmp	r8, r7
 800cbbc:	4683      	mov	fp, r0
 800cbbe:	f04f 0300 	mov.w	r3, #0
 800cbc2:	f04f 020a 	mov.w	r2, #10
 800cbc6:	4641      	mov	r1, r8
 800cbc8:	4620      	mov	r0, r4
 800cbca:	d107      	bne.n	800cbdc <_dtoa_r+0xb1c>
 800cbcc:	f000 fe90 	bl	800d8f0 <__multadd>
 800cbd0:	4680      	mov	r8, r0
 800cbd2:	4607      	mov	r7, r0
 800cbd4:	9b01      	ldr	r3, [sp, #4]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	e775      	b.n	800cac8 <_dtoa_r+0xa08>
 800cbdc:	f000 fe88 	bl	800d8f0 <__multadd>
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	4680      	mov	r8, r0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	220a      	movs	r2, #10
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 fe81 	bl	800d8f0 <__multadd>
 800cbee:	4607      	mov	r7, r0
 800cbf0:	e7f0      	b.n	800cbd4 <_dtoa_r+0xb14>
 800cbf2:	f1b9 0f00 	cmp.w	r9, #0
 800cbf6:	9a00      	ldr	r2, [sp, #0]
 800cbf8:	bfcc      	ite	gt
 800cbfa:	464d      	movgt	r5, r9
 800cbfc:	2501      	movle	r5, #1
 800cbfe:	4415      	add	r5, r2
 800cc00:	f04f 0800 	mov.w	r8, #0
 800cc04:	4659      	mov	r1, fp
 800cc06:	2201      	movs	r2, #1
 800cc08:	4620      	mov	r0, r4
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	f001 f86a 	bl	800dce4 <__lshift>
 800cc10:	4631      	mov	r1, r6
 800cc12:	4683      	mov	fp, r0
 800cc14:	f001 f8d2 	bl	800ddbc <__mcmp>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	dcb2      	bgt.n	800cb82 <_dtoa_r+0xac2>
 800cc1c:	d102      	bne.n	800cc24 <_dtoa_r+0xb64>
 800cc1e:	9b01      	ldr	r3, [sp, #4]
 800cc20:	07db      	lsls	r3, r3, #31
 800cc22:	d4ae      	bmi.n	800cb82 <_dtoa_r+0xac2>
 800cc24:	462b      	mov	r3, r5
 800cc26:	461d      	mov	r5, r3
 800cc28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc2c:	2a30      	cmp	r2, #48	; 0x30
 800cc2e:	d0fa      	beq.n	800cc26 <_dtoa_r+0xb66>
 800cc30:	e6f7      	b.n	800ca22 <_dtoa_r+0x962>
 800cc32:	9a00      	ldr	r2, [sp, #0]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d1a5      	bne.n	800cb84 <_dtoa_r+0xac4>
 800cc38:	f10a 0a01 	add.w	sl, sl, #1
 800cc3c:	2331      	movs	r3, #49	; 0x31
 800cc3e:	e779      	b.n	800cb34 <_dtoa_r+0xa74>
 800cc40:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <_dtoa_r+0xbd0>)
 800cc42:	f7ff baaf 	b.w	800c1a4 <_dtoa_r+0xe4>
 800cc46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f47f aa86 	bne.w	800c15a <_dtoa_r+0x9a>
 800cc4e:	4b11      	ldr	r3, [pc, #68]	; (800cc94 <_dtoa_r+0xbd4>)
 800cc50:	f7ff baa8 	b.w	800c1a4 <_dtoa_r+0xe4>
 800cc54:	f1b9 0f00 	cmp.w	r9, #0
 800cc58:	dc03      	bgt.n	800cc62 <_dtoa_r+0xba2>
 800cc5a:	9b05      	ldr	r3, [sp, #20]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	f73f aec9 	bgt.w	800c9f4 <_dtoa_r+0x934>
 800cc62:	9d00      	ldr	r5, [sp, #0]
 800cc64:	4631      	mov	r1, r6
 800cc66:	4658      	mov	r0, fp
 800cc68:	f7ff f99f 	bl	800bfaa <quorem>
 800cc6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cc70:	f805 3b01 	strb.w	r3, [r5], #1
 800cc74:	9a00      	ldr	r2, [sp, #0]
 800cc76:	1aaa      	subs	r2, r5, r2
 800cc78:	4591      	cmp	r9, r2
 800cc7a:	ddba      	ble.n	800cbf2 <_dtoa_r+0xb32>
 800cc7c:	4659      	mov	r1, fp
 800cc7e:	2300      	movs	r3, #0
 800cc80:	220a      	movs	r2, #10
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 fe34 	bl	800d8f0 <__multadd>
 800cc88:	4683      	mov	fp, r0
 800cc8a:	e7eb      	b.n	800cc64 <_dtoa_r+0xba4>
 800cc8c:	08040ac4 	.word	0x08040ac4
 800cc90:	080408c5 	.word	0x080408c5
 800cc94:	08040a41 	.word	0x08040a41

0800cc98 <__sflush_r>:
 800cc98:	898a      	ldrh	r2, [r1, #12]
 800cc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9e:	4605      	mov	r5, r0
 800cca0:	0710      	lsls	r0, r2, #28
 800cca2:	460c      	mov	r4, r1
 800cca4:	d458      	bmi.n	800cd58 <__sflush_r+0xc0>
 800cca6:	684b      	ldr	r3, [r1, #4]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	dc05      	bgt.n	800ccb8 <__sflush_r+0x20>
 800ccac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	dc02      	bgt.n	800ccb8 <__sflush_r+0x20>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccba:	2e00      	cmp	r6, #0
 800ccbc:	d0f9      	beq.n	800ccb2 <__sflush_r+0x1a>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccc4:	682f      	ldr	r7, [r5, #0]
 800ccc6:	602b      	str	r3, [r5, #0]
 800ccc8:	d032      	beq.n	800cd30 <__sflush_r+0x98>
 800ccca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cccc:	89a3      	ldrh	r3, [r4, #12]
 800ccce:	075a      	lsls	r2, r3, #29
 800ccd0:	d505      	bpl.n	800ccde <__sflush_r+0x46>
 800ccd2:	6863      	ldr	r3, [r4, #4]
 800ccd4:	1ac0      	subs	r0, r0, r3
 800ccd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccd8:	b10b      	cbz	r3, 800ccde <__sflush_r+0x46>
 800ccda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccdc:	1ac0      	subs	r0, r0, r3
 800ccde:	2300      	movs	r3, #0
 800cce0:	4602      	mov	r2, r0
 800cce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cce4:	6a21      	ldr	r1, [r4, #32]
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b0      	blx	r6
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	89a3      	ldrh	r3, [r4, #12]
 800ccee:	d106      	bne.n	800ccfe <__sflush_r+0x66>
 800ccf0:	6829      	ldr	r1, [r5, #0]
 800ccf2:	291d      	cmp	r1, #29
 800ccf4:	d82c      	bhi.n	800cd50 <__sflush_r+0xb8>
 800ccf6:	4a2a      	ldr	r2, [pc, #168]	; (800cda0 <__sflush_r+0x108>)
 800ccf8:	40ca      	lsrs	r2, r1
 800ccfa:	07d6      	lsls	r6, r2, #31
 800ccfc:	d528      	bpl.n	800cd50 <__sflush_r+0xb8>
 800ccfe:	2200      	movs	r2, #0
 800cd00:	6062      	str	r2, [r4, #4]
 800cd02:	04d9      	lsls	r1, r3, #19
 800cd04:	6922      	ldr	r2, [r4, #16]
 800cd06:	6022      	str	r2, [r4, #0]
 800cd08:	d504      	bpl.n	800cd14 <__sflush_r+0x7c>
 800cd0a:	1c42      	adds	r2, r0, #1
 800cd0c:	d101      	bne.n	800cd12 <__sflush_r+0x7a>
 800cd0e:	682b      	ldr	r3, [r5, #0]
 800cd10:	b903      	cbnz	r3, 800cd14 <__sflush_r+0x7c>
 800cd12:	6560      	str	r0, [r4, #84]	; 0x54
 800cd14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd16:	602f      	str	r7, [r5, #0]
 800cd18:	2900      	cmp	r1, #0
 800cd1a:	d0ca      	beq.n	800ccb2 <__sflush_r+0x1a>
 800cd1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd20:	4299      	cmp	r1, r3
 800cd22:	d002      	beq.n	800cd2a <__sflush_r+0x92>
 800cd24:	4628      	mov	r0, r5
 800cd26:	f7fd f913 	bl	8009f50 <_free_r>
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd2e:	e7c1      	b.n	800ccb4 <__sflush_r+0x1c>
 800cd30:	6a21      	ldr	r1, [r4, #32]
 800cd32:	2301      	movs	r3, #1
 800cd34:	4628      	mov	r0, r5
 800cd36:	47b0      	blx	r6
 800cd38:	1c41      	adds	r1, r0, #1
 800cd3a:	d1c7      	bne.n	800cccc <__sflush_r+0x34>
 800cd3c:	682b      	ldr	r3, [r5, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0c4      	beq.n	800cccc <__sflush_r+0x34>
 800cd42:	2b1d      	cmp	r3, #29
 800cd44:	d001      	beq.n	800cd4a <__sflush_r+0xb2>
 800cd46:	2b16      	cmp	r3, #22
 800cd48:	d101      	bne.n	800cd4e <__sflush_r+0xb6>
 800cd4a:	602f      	str	r7, [r5, #0]
 800cd4c:	e7b1      	b.n	800ccb2 <__sflush_r+0x1a>
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd54:	81a3      	strh	r3, [r4, #12]
 800cd56:	e7ad      	b.n	800ccb4 <__sflush_r+0x1c>
 800cd58:	690f      	ldr	r7, [r1, #16]
 800cd5a:	2f00      	cmp	r7, #0
 800cd5c:	d0a9      	beq.n	800ccb2 <__sflush_r+0x1a>
 800cd5e:	0793      	lsls	r3, r2, #30
 800cd60:	680e      	ldr	r6, [r1, #0]
 800cd62:	bf08      	it	eq
 800cd64:	694b      	ldreq	r3, [r1, #20]
 800cd66:	600f      	str	r7, [r1, #0]
 800cd68:	bf18      	it	ne
 800cd6a:	2300      	movne	r3, #0
 800cd6c:	eba6 0807 	sub.w	r8, r6, r7
 800cd70:	608b      	str	r3, [r1, #8]
 800cd72:	f1b8 0f00 	cmp.w	r8, #0
 800cd76:	dd9c      	ble.n	800ccb2 <__sflush_r+0x1a>
 800cd78:	6a21      	ldr	r1, [r4, #32]
 800cd7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd7c:	4643      	mov	r3, r8
 800cd7e:	463a      	mov	r2, r7
 800cd80:	4628      	mov	r0, r5
 800cd82:	47b0      	blx	r6
 800cd84:	2800      	cmp	r0, #0
 800cd86:	dc06      	bgt.n	800cd96 <__sflush_r+0xfe>
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd8e:	81a3      	strh	r3, [r4, #12]
 800cd90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd94:	e78e      	b.n	800ccb4 <__sflush_r+0x1c>
 800cd96:	4407      	add	r7, r0
 800cd98:	eba8 0800 	sub.w	r8, r8, r0
 800cd9c:	e7e9      	b.n	800cd72 <__sflush_r+0xda>
 800cd9e:	bf00      	nop
 800cda0:	20400001 	.word	0x20400001

0800cda4 <_fflush_r>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	690b      	ldr	r3, [r1, #16]
 800cda8:	4605      	mov	r5, r0
 800cdaa:	460c      	mov	r4, r1
 800cdac:	b913      	cbnz	r3, 800cdb4 <_fflush_r+0x10>
 800cdae:	2500      	movs	r5, #0
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	b118      	cbz	r0, 800cdbe <_fflush_r+0x1a>
 800cdb6:	6983      	ldr	r3, [r0, #24]
 800cdb8:	b90b      	cbnz	r3, 800cdbe <_fflush_r+0x1a>
 800cdba:	f000 f887 	bl	800cecc <__sinit>
 800cdbe:	4b14      	ldr	r3, [pc, #80]	; (800ce10 <_fflush_r+0x6c>)
 800cdc0:	429c      	cmp	r4, r3
 800cdc2:	d11b      	bne.n	800cdfc <_fflush_r+0x58>
 800cdc4:	686c      	ldr	r4, [r5, #4]
 800cdc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d0ef      	beq.n	800cdae <_fflush_r+0xa>
 800cdce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdd0:	07d0      	lsls	r0, r2, #31
 800cdd2:	d404      	bmi.n	800cdde <_fflush_r+0x3a>
 800cdd4:	0599      	lsls	r1, r3, #22
 800cdd6:	d402      	bmi.n	800cdde <_fflush_r+0x3a>
 800cdd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdda:	f000 fc88 	bl	800d6ee <__retarget_lock_acquire_recursive>
 800cdde:	4628      	mov	r0, r5
 800cde0:	4621      	mov	r1, r4
 800cde2:	f7ff ff59 	bl	800cc98 <__sflush_r>
 800cde6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cde8:	07da      	lsls	r2, r3, #31
 800cdea:	4605      	mov	r5, r0
 800cdec:	d4e0      	bmi.n	800cdb0 <_fflush_r+0xc>
 800cdee:	89a3      	ldrh	r3, [r4, #12]
 800cdf0:	059b      	lsls	r3, r3, #22
 800cdf2:	d4dd      	bmi.n	800cdb0 <_fflush_r+0xc>
 800cdf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdf6:	f000 fc7b 	bl	800d6f0 <__retarget_lock_release_recursive>
 800cdfa:	e7d9      	b.n	800cdb0 <_fflush_r+0xc>
 800cdfc:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <_fflush_r+0x70>)
 800cdfe:	429c      	cmp	r4, r3
 800ce00:	d101      	bne.n	800ce06 <_fflush_r+0x62>
 800ce02:	68ac      	ldr	r4, [r5, #8]
 800ce04:	e7df      	b.n	800cdc6 <_fflush_r+0x22>
 800ce06:	4b04      	ldr	r3, [pc, #16]	; (800ce18 <_fflush_r+0x74>)
 800ce08:	429c      	cmp	r4, r3
 800ce0a:	bf08      	it	eq
 800ce0c:	68ec      	ldreq	r4, [r5, #12]
 800ce0e:	e7da      	b.n	800cdc6 <_fflush_r+0x22>
 800ce10:	08040af8 	.word	0x08040af8
 800ce14:	08040b18 	.word	0x08040b18
 800ce18:	08040ad8 	.word	0x08040ad8

0800ce1c <std>:
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	b510      	push	{r4, lr}
 800ce20:	4604      	mov	r4, r0
 800ce22:	e9c0 3300 	strd	r3, r3, [r0]
 800ce26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce2a:	6083      	str	r3, [r0, #8]
 800ce2c:	8181      	strh	r1, [r0, #12]
 800ce2e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce30:	81c2      	strh	r2, [r0, #14]
 800ce32:	6183      	str	r3, [r0, #24]
 800ce34:	4619      	mov	r1, r3
 800ce36:	2208      	movs	r2, #8
 800ce38:	305c      	adds	r0, #92	; 0x5c
 800ce3a:	f7fd f881 	bl	8009f40 <memset>
 800ce3e:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <std+0x38>)
 800ce40:	6263      	str	r3, [r4, #36]	; 0x24
 800ce42:	4b05      	ldr	r3, [pc, #20]	; (800ce58 <std+0x3c>)
 800ce44:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce46:	4b05      	ldr	r3, [pc, #20]	; (800ce5c <std+0x40>)
 800ce48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce4a:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <std+0x44>)
 800ce4c:	6224      	str	r4, [r4, #32]
 800ce4e:	6323      	str	r3, [r4, #48]	; 0x30
 800ce50:	bd10      	pop	{r4, pc}
 800ce52:	bf00      	nop
 800ce54:	0800e561 	.word	0x0800e561
 800ce58:	0800e583 	.word	0x0800e583
 800ce5c:	0800e5bb 	.word	0x0800e5bb
 800ce60:	0800e5df 	.word	0x0800e5df

0800ce64 <_cleanup_r>:
 800ce64:	4901      	ldr	r1, [pc, #4]	; (800ce6c <_cleanup_r+0x8>)
 800ce66:	f000 b8af 	b.w	800cfc8 <_fwalk_reent>
 800ce6a:	bf00      	nop
 800ce6c:	0800cda5 	.word	0x0800cda5

0800ce70 <__sfmoreglue>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	1e4a      	subs	r2, r1, #1
 800ce74:	2568      	movs	r5, #104	; 0x68
 800ce76:	4355      	muls	r5, r2
 800ce78:	460e      	mov	r6, r1
 800ce7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce7e:	f7fd f8b7 	bl	8009ff0 <_malloc_r>
 800ce82:	4604      	mov	r4, r0
 800ce84:	b140      	cbz	r0, 800ce98 <__sfmoreglue+0x28>
 800ce86:	2100      	movs	r1, #0
 800ce88:	e9c0 1600 	strd	r1, r6, [r0]
 800ce8c:	300c      	adds	r0, #12
 800ce8e:	60a0      	str	r0, [r4, #8]
 800ce90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce94:	f7fd f854 	bl	8009f40 <memset>
 800ce98:	4620      	mov	r0, r4
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}

0800ce9c <__sfp_lock_acquire>:
 800ce9c:	4801      	ldr	r0, [pc, #4]	; (800cea4 <__sfp_lock_acquire+0x8>)
 800ce9e:	f000 bc26 	b.w	800d6ee <__retarget_lock_acquire_recursive>
 800cea2:	bf00      	nop
 800cea4:	200064fc 	.word	0x200064fc

0800cea8 <__sfp_lock_release>:
 800cea8:	4801      	ldr	r0, [pc, #4]	; (800ceb0 <__sfp_lock_release+0x8>)
 800ceaa:	f000 bc21 	b.w	800d6f0 <__retarget_lock_release_recursive>
 800ceae:	bf00      	nop
 800ceb0:	200064fc 	.word	0x200064fc

0800ceb4 <__sinit_lock_acquire>:
 800ceb4:	4801      	ldr	r0, [pc, #4]	; (800cebc <__sinit_lock_acquire+0x8>)
 800ceb6:	f000 bc1a 	b.w	800d6ee <__retarget_lock_acquire_recursive>
 800ceba:	bf00      	nop
 800cebc:	200064f7 	.word	0x200064f7

0800cec0 <__sinit_lock_release>:
 800cec0:	4801      	ldr	r0, [pc, #4]	; (800cec8 <__sinit_lock_release+0x8>)
 800cec2:	f000 bc15 	b.w	800d6f0 <__retarget_lock_release_recursive>
 800cec6:	bf00      	nop
 800cec8:	200064f7 	.word	0x200064f7

0800cecc <__sinit>:
 800cecc:	b510      	push	{r4, lr}
 800cece:	4604      	mov	r4, r0
 800ced0:	f7ff fff0 	bl	800ceb4 <__sinit_lock_acquire>
 800ced4:	69a3      	ldr	r3, [r4, #24]
 800ced6:	b11b      	cbz	r3, 800cee0 <__sinit+0x14>
 800ced8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cedc:	f7ff bff0 	b.w	800cec0 <__sinit_lock_release>
 800cee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cee4:	6523      	str	r3, [r4, #80]	; 0x50
 800cee6:	4b13      	ldr	r3, [pc, #76]	; (800cf34 <__sinit+0x68>)
 800cee8:	4a13      	ldr	r2, [pc, #76]	; (800cf38 <__sinit+0x6c>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	62a2      	str	r2, [r4, #40]	; 0x28
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	bf04      	itt	eq
 800cef2:	2301      	moveq	r3, #1
 800cef4:	61a3      	streq	r3, [r4, #24]
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 f820 	bl	800cf3c <__sfp>
 800cefc:	6060      	str	r0, [r4, #4]
 800cefe:	4620      	mov	r0, r4
 800cf00:	f000 f81c 	bl	800cf3c <__sfp>
 800cf04:	60a0      	str	r0, [r4, #8]
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 f818 	bl	800cf3c <__sfp>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	60e0      	str	r0, [r4, #12]
 800cf10:	2104      	movs	r1, #4
 800cf12:	6860      	ldr	r0, [r4, #4]
 800cf14:	f7ff ff82 	bl	800ce1c <std>
 800cf18:	68a0      	ldr	r0, [r4, #8]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	2109      	movs	r1, #9
 800cf1e:	f7ff ff7d 	bl	800ce1c <std>
 800cf22:	68e0      	ldr	r0, [r4, #12]
 800cf24:	2202      	movs	r2, #2
 800cf26:	2112      	movs	r1, #18
 800cf28:	f7ff ff78 	bl	800ce1c <std>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	61a3      	str	r3, [r4, #24]
 800cf30:	e7d2      	b.n	800ced8 <__sinit+0xc>
 800cf32:	bf00      	nop
 800cf34:	080408a0 	.word	0x080408a0
 800cf38:	0800ce65 	.word	0x0800ce65

0800cf3c <__sfp>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	4607      	mov	r7, r0
 800cf40:	f7ff ffac 	bl	800ce9c <__sfp_lock_acquire>
 800cf44:	4b1e      	ldr	r3, [pc, #120]	; (800cfc0 <__sfp+0x84>)
 800cf46:	681e      	ldr	r6, [r3, #0]
 800cf48:	69b3      	ldr	r3, [r6, #24]
 800cf4a:	b913      	cbnz	r3, 800cf52 <__sfp+0x16>
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f7ff ffbd 	bl	800cecc <__sinit>
 800cf52:	3648      	adds	r6, #72	; 0x48
 800cf54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	d503      	bpl.n	800cf64 <__sfp+0x28>
 800cf5c:	6833      	ldr	r3, [r6, #0]
 800cf5e:	b30b      	cbz	r3, 800cfa4 <__sfp+0x68>
 800cf60:	6836      	ldr	r6, [r6, #0]
 800cf62:	e7f7      	b.n	800cf54 <__sfp+0x18>
 800cf64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf68:	b9d5      	cbnz	r5, 800cfa0 <__sfp+0x64>
 800cf6a:	4b16      	ldr	r3, [pc, #88]	; (800cfc4 <__sfp+0x88>)
 800cf6c:	60e3      	str	r3, [r4, #12]
 800cf6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf72:	6665      	str	r5, [r4, #100]	; 0x64
 800cf74:	f000 fbba 	bl	800d6ec <__retarget_lock_init_recursive>
 800cf78:	f7ff ff96 	bl	800cea8 <__sfp_lock_release>
 800cf7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf84:	6025      	str	r5, [r4, #0]
 800cf86:	61a5      	str	r5, [r4, #24]
 800cf88:	2208      	movs	r2, #8
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf90:	f7fc ffd6 	bl	8009f40 <memset>
 800cf94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfa0:	3468      	adds	r4, #104	; 0x68
 800cfa2:	e7d9      	b.n	800cf58 <__sfp+0x1c>
 800cfa4:	2104      	movs	r1, #4
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	f7ff ff62 	bl	800ce70 <__sfmoreglue>
 800cfac:	4604      	mov	r4, r0
 800cfae:	6030      	str	r0, [r6, #0]
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d1d5      	bne.n	800cf60 <__sfp+0x24>
 800cfb4:	f7ff ff78 	bl	800cea8 <__sfp_lock_release>
 800cfb8:	230c      	movs	r3, #12
 800cfba:	603b      	str	r3, [r7, #0]
 800cfbc:	e7ee      	b.n	800cf9c <__sfp+0x60>
 800cfbe:	bf00      	nop
 800cfc0:	080408a0 	.word	0x080408a0
 800cfc4:	ffff0001 	.word	0xffff0001

0800cfc8 <_fwalk_reent>:
 800cfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfcc:	4606      	mov	r6, r0
 800cfce:	4688      	mov	r8, r1
 800cfd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfd4:	2700      	movs	r7, #0
 800cfd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfda:	f1b9 0901 	subs.w	r9, r9, #1
 800cfde:	d505      	bpl.n	800cfec <_fwalk_reent+0x24>
 800cfe0:	6824      	ldr	r4, [r4, #0]
 800cfe2:	2c00      	cmp	r4, #0
 800cfe4:	d1f7      	bne.n	800cfd6 <_fwalk_reent+0xe>
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfec:	89ab      	ldrh	r3, [r5, #12]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d907      	bls.n	800d002 <_fwalk_reent+0x3a>
 800cff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cff6:	3301      	adds	r3, #1
 800cff8:	d003      	beq.n	800d002 <_fwalk_reent+0x3a>
 800cffa:	4629      	mov	r1, r5
 800cffc:	4630      	mov	r0, r6
 800cffe:	47c0      	blx	r8
 800d000:	4307      	orrs	r7, r0
 800d002:	3568      	adds	r5, #104	; 0x68
 800d004:	e7e9      	b.n	800cfda <_fwalk_reent+0x12>

0800d006 <rshift>:
 800d006:	6903      	ldr	r3, [r0, #16]
 800d008:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d010:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d014:	f100 0414 	add.w	r4, r0, #20
 800d018:	dd45      	ble.n	800d0a6 <rshift+0xa0>
 800d01a:	f011 011f 	ands.w	r1, r1, #31
 800d01e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d022:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d026:	d10c      	bne.n	800d042 <rshift+0x3c>
 800d028:	f100 0710 	add.w	r7, r0, #16
 800d02c:	4629      	mov	r1, r5
 800d02e:	42b1      	cmp	r1, r6
 800d030:	d334      	bcc.n	800d09c <rshift+0x96>
 800d032:	1a9b      	subs	r3, r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	1eea      	subs	r2, r5, #3
 800d038:	4296      	cmp	r6, r2
 800d03a:	bf38      	it	cc
 800d03c:	2300      	movcc	r3, #0
 800d03e:	4423      	add	r3, r4
 800d040:	e015      	b.n	800d06e <rshift+0x68>
 800d042:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d046:	f1c1 0820 	rsb	r8, r1, #32
 800d04a:	40cf      	lsrs	r7, r1
 800d04c:	f105 0e04 	add.w	lr, r5, #4
 800d050:	46a1      	mov	r9, r4
 800d052:	4576      	cmp	r6, lr
 800d054:	46f4      	mov	ip, lr
 800d056:	d815      	bhi.n	800d084 <rshift+0x7e>
 800d058:	1a9b      	subs	r3, r3, r2
 800d05a:	009a      	lsls	r2, r3, #2
 800d05c:	3a04      	subs	r2, #4
 800d05e:	3501      	adds	r5, #1
 800d060:	42ae      	cmp	r6, r5
 800d062:	bf38      	it	cc
 800d064:	2200      	movcc	r2, #0
 800d066:	18a3      	adds	r3, r4, r2
 800d068:	50a7      	str	r7, [r4, r2]
 800d06a:	b107      	cbz	r7, 800d06e <rshift+0x68>
 800d06c:	3304      	adds	r3, #4
 800d06e:	1b1a      	subs	r2, r3, r4
 800d070:	42a3      	cmp	r3, r4
 800d072:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d076:	bf08      	it	eq
 800d078:	2300      	moveq	r3, #0
 800d07a:	6102      	str	r2, [r0, #16]
 800d07c:	bf08      	it	eq
 800d07e:	6143      	streq	r3, [r0, #20]
 800d080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d084:	f8dc c000 	ldr.w	ip, [ip]
 800d088:	fa0c fc08 	lsl.w	ip, ip, r8
 800d08c:	ea4c 0707 	orr.w	r7, ip, r7
 800d090:	f849 7b04 	str.w	r7, [r9], #4
 800d094:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d098:	40cf      	lsrs	r7, r1
 800d09a:	e7da      	b.n	800d052 <rshift+0x4c>
 800d09c:	f851 cb04 	ldr.w	ip, [r1], #4
 800d0a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800d0a4:	e7c3      	b.n	800d02e <rshift+0x28>
 800d0a6:	4623      	mov	r3, r4
 800d0a8:	e7e1      	b.n	800d06e <rshift+0x68>

0800d0aa <__hexdig_fun>:
 800d0aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d0ae:	2b09      	cmp	r3, #9
 800d0b0:	d802      	bhi.n	800d0b8 <__hexdig_fun+0xe>
 800d0b2:	3820      	subs	r0, #32
 800d0b4:	b2c0      	uxtb	r0, r0
 800d0b6:	4770      	bx	lr
 800d0b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d0bc:	2b05      	cmp	r3, #5
 800d0be:	d801      	bhi.n	800d0c4 <__hexdig_fun+0x1a>
 800d0c0:	3847      	subs	r0, #71	; 0x47
 800d0c2:	e7f7      	b.n	800d0b4 <__hexdig_fun+0xa>
 800d0c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d0c8:	2b05      	cmp	r3, #5
 800d0ca:	d801      	bhi.n	800d0d0 <__hexdig_fun+0x26>
 800d0cc:	3827      	subs	r0, #39	; 0x27
 800d0ce:	e7f1      	b.n	800d0b4 <__hexdig_fun+0xa>
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	4770      	bx	lr

0800d0d4 <__gethex>:
 800d0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d8:	ed2d 8b02 	vpush	{d8}
 800d0dc:	b089      	sub	sp, #36	; 0x24
 800d0de:	ee08 0a10 	vmov	s16, r0
 800d0e2:	9304      	str	r3, [sp, #16]
 800d0e4:	4bbc      	ldr	r3, [pc, #752]	; (800d3d8 <__gethex+0x304>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	9301      	str	r3, [sp, #4]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	468b      	mov	fp, r1
 800d0ee:	4690      	mov	r8, r2
 800d0f0:	f7f3 f86e 	bl	80001d0 <strlen>
 800d0f4:	9b01      	ldr	r3, [sp, #4]
 800d0f6:	f8db 2000 	ldr.w	r2, [fp]
 800d0fa:	4403      	add	r3, r0
 800d0fc:	4682      	mov	sl, r0
 800d0fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d102:	9305      	str	r3, [sp, #20]
 800d104:	1c93      	adds	r3, r2, #2
 800d106:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d10a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d10e:	32fe      	adds	r2, #254	; 0xfe
 800d110:	18d1      	adds	r1, r2, r3
 800d112:	461f      	mov	r7, r3
 800d114:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d118:	9100      	str	r1, [sp, #0]
 800d11a:	2830      	cmp	r0, #48	; 0x30
 800d11c:	d0f8      	beq.n	800d110 <__gethex+0x3c>
 800d11e:	f7ff ffc4 	bl	800d0aa <__hexdig_fun>
 800d122:	4604      	mov	r4, r0
 800d124:	2800      	cmp	r0, #0
 800d126:	d13a      	bne.n	800d19e <__gethex+0xca>
 800d128:	9901      	ldr	r1, [sp, #4]
 800d12a:	4652      	mov	r2, sl
 800d12c:	4638      	mov	r0, r7
 800d12e:	f001 fa5a 	bl	800e5e6 <strncmp>
 800d132:	4605      	mov	r5, r0
 800d134:	2800      	cmp	r0, #0
 800d136:	d168      	bne.n	800d20a <__gethex+0x136>
 800d138:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d13c:	eb07 060a 	add.w	r6, r7, sl
 800d140:	f7ff ffb3 	bl	800d0aa <__hexdig_fun>
 800d144:	2800      	cmp	r0, #0
 800d146:	d062      	beq.n	800d20e <__gethex+0x13a>
 800d148:	4633      	mov	r3, r6
 800d14a:	7818      	ldrb	r0, [r3, #0]
 800d14c:	2830      	cmp	r0, #48	; 0x30
 800d14e:	461f      	mov	r7, r3
 800d150:	f103 0301 	add.w	r3, r3, #1
 800d154:	d0f9      	beq.n	800d14a <__gethex+0x76>
 800d156:	f7ff ffa8 	bl	800d0aa <__hexdig_fun>
 800d15a:	2301      	movs	r3, #1
 800d15c:	fab0 f480 	clz	r4, r0
 800d160:	0964      	lsrs	r4, r4, #5
 800d162:	4635      	mov	r5, r6
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	463a      	mov	r2, r7
 800d168:	4616      	mov	r6, r2
 800d16a:	3201      	adds	r2, #1
 800d16c:	7830      	ldrb	r0, [r6, #0]
 800d16e:	f7ff ff9c 	bl	800d0aa <__hexdig_fun>
 800d172:	2800      	cmp	r0, #0
 800d174:	d1f8      	bne.n	800d168 <__gethex+0x94>
 800d176:	9901      	ldr	r1, [sp, #4]
 800d178:	4652      	mov	r2, sl
 800d17a:	4630      	mov	r0, r6
 800d17c:	f001 fa33 	bl	800e5e6 <strncmp>
 800d180:	b980      	cbnz	r0, 800d1a4 <__gethex+0xd0>
 800d182:	b94d      	cbnz	r5, 800d198 <__gethex+0xc4>
 800d184:	eb06 050a 	add.w	r5, r6, sl
 800d188:	462a      	mov	r2, r5
 800d18a:	4616      	mov	r6, r2
 800d18c:	3201      	adds	r2, #1
 800d18e:	7830      	ldrb	r0, [r6, #0]
 800d190:	f7ff ff8b 	bl	800d0aa <__hexdig_fun>
 800d194:	2800      	cmp	r0, #0
 800d196:	d1f8      	bne.n	800d18a <__gethex+0xb6>
 800d198:	1bad      	subs	r5, r5, r6
 800d19a:	00ad      	lsls	r5, r5, #2
 800d19c:	e004      	b.n	800d1a8 <__gethex+0xd4>
 800d19e:	2400      	movs	r4, #0
 800d1a0:	4625      	mov	r5, r4
 800d1a2:	e7e0      	b.n	800d166 <__gethex+0x92>
 800d1a4:	2d00      	cmp	r5, #0
 800d1a6:	d1f7      	bne.n	800d198 <__gethex+0xc4>
 800d1a8:	7833      	ldrb	r3, [r6, #0]
 800d1aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d1ae:	2b50      	cmp	r3, #80	; 0x50
 800d1b0:	d13b      	bne.n	800d22a <__gethex+0x156>
 800d1b2:	7873      	ldrb	r3, [r6, #1]
 800d1b4:	2b2b      	cmp	r3, #43	; 0x2b
 800d1b6:	d02c      	beq.n	800d212 <__gethex+0x13e>
 800d1b8:	2b2d      	cmp	r3, #45	; 0x2d
 800d1ba:	d02e      	beq.n	800d21a <__gethex+0x146>
 800d1bc:	1c71      	adds	r1, r6, #1
 800d1be:	f04f 0900 	mov.w	r9, #0
 800d1c2:	7808      	ldrb	r0, [r1, #0]
 800d1c4:	f7ff ff71 	bl	800d0aa <__hexdig_fun>
 800d1c8:	1e43      	subs	r3, r0, #1
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b18      	cmp	r3, #24
 800d1ce:	d82c      	bhi.n	800d22a <__gethex+0x156>
 800d1d0:	f1a0 0210 	sub.w	r2, r0, #16
 800d1d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1d8:	f7ff ff67 	bl	800d0aa <__hexdig_fun>
 800d1dc:	1e43      	subs	r3, r0, #1
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b18      	cmp	r3, #24
 800d1e2:	d91d      	bls.n	800d220 <__gethex+0x14c>
 800d1e4:	f1b9 0f00 	cmp.w	r9, #0
 800d1e8:	d000      	beq.n	800d1ec <__gethex+0x118>
 800d1ea:	4252      	negs	r2, r2
 800d1ec:	4415      	add	r5, r2
 800d1ee:	f8cb 1000 	str.w	r1, [fp]
 800d1f2:	b1e4      	cbz	r4, 800d22e <__gethex+0x15a>
 800d1f4:	9b00      	ldr	r3, [sp, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	bf14      	ite	ne
 800d1fa:	2700      	movne	r7, #0
 800d1fc:	2706      	moveq	r7, #6
 800d1fe:	4638      	mov	r0, r7
 800d200:	b009      	add	sp, #36	; 0x24
 800d202:	ecbd 8b02 	vpop	{d8}
 800d206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20a:	463e      	mov	r6, r7
 800d20c:	4625      	mov	r5, r4
 800d20e:	2401      	movs	r4, #1
 800d210:	e7ca      	b.n	800d1a8 <__gethex+0xd4>
 800d212:	f04f 0900 	mov.w	r9, #0
 800d216:	1cb1      	adds	r1, r6, #2
 800d218:	e7d3      	b.n	800d1c2 <__gethex+0xee>
 800d21a:	f04f 0901 	mov.w	r9, #1
 800d21e:	e7fa      	b.n	800d216 <__gethex+0x142>
 800d220:	230a      	movs	r3, #10
 800d222:	fb03 0202 	mla	r2, r3, r2, r0
 800d226:	3a10      	subs	r2, #16
 800d228:	e7d4      	b.n	800d1d4 <__gethex+0x100>
 800d22a:	4631      	mov	r1, r6
 800d22c:	e7df      	b.n	800d1ee <__gethex+0x11a>
 800d22e:	1bf3      	subs	r3, r6, r7
 800d230:	3b01      	subs	r3, #1
 800d232:	4621      	mov	r1, r4
 800d234:	2b07      	cmp	r3, #7
 800d236:	dc0b      	bgt.n	800d250 <__gethex+0x17c>
 800d238:	ee18 0a10 	vmov	r0, s16
 800d23c:	f000 faf6 	bl	800d82c <_Balloc>
 800d240:	4604      	mov	r4, r0
 800d242:	b940      	cbnz	r0, 800d256 <__gethex+0x182>
 800d244:	4b65      	ldr	r3, [pc, #404]	; (800d3dc <__gethex+0x308>)
 800d246:	4602      	mov	r2, r0
 800d248:	21de      	movs	r1, #222	; 0xde
 800d24a:	4865      	ldr	r0, [pc, #404]	; (800d3e0 <__gethex+0x30c>)
 800d24c:	f7fc fe08 	bl	8009e60 <__assert_func>
 800d250:	3101      	adds	r1, #1
 800d252:	105b      	asrs	r3, r3, #1
 800d254:	e7ee      	b.n	800d234 <__gethex+0x160>
 800d256:	f100 0914 	add.w	r9, r0, #20
 800d25a:	f04f 0b00 	mov.w	fp, #0
 800d25e:	f1ca 0301 	rsb	r3, sl, #1
 800d262:	f8cd 9008 	str.w	r9, [sp, #8]
 800d266:	f8cd b000 	str.w	fp, [sp]
 800d26a:	9306      	str	r3, [sp, #24]
 800d26c:	42b7      	cmp	r7, r6
 800d26e:	d340      	bcc.n	800d2f2 <__gethex+0x21e>
 800d270:	9802      	ldr	r0, [sp, #8]
 800d272:	9b00      	ldr	r3, [sp, #0]
 800d274:	f840 3b04 	str.w	r3, [r0], #4
 800d278:	eba0 0009 	sub.w	r0, r0, r9
 800d27c:	1080      	asrs	r0, r0, #2
 800d27e:	0146      	lsls	r6, r0, #5
 800d280:	6120      	str	r0, [r4, #16]
 800d282:	4618      	mov	r0, r3
 800d284:	f000 fbc8 	bl	800da18 <__hi0bits>
 800d288:	1a30      	subs	r0, r6, r0
 800d28a:	f8d8 6000 	ldr.w	r6, [r8]
 800d28e:	42b0      	cmp	r0, r6
 800d290:	dd63      	ble.n	800d35a <__gethex+0x286>
 800d292:	1b87      	subs	r7, r0, r6
 800d294:	4639      	mov	r1, r7
 800d296:	4620      	mov	r0, r4
 800d298:	f000 ff62 	bl	800e160 <__any_on>
 800d29c:	4682      	mov	sl, r0
 800d29e:	b1a8      	cbz	r0, 800d2cc <__gethex+0x1f8>
 800d2a0:	1e7b      	subs	r3, r7, #1
 800d2a2:	1159      	asrs	r1, r3, #5
 800d2a4:	f003 021f 	and.w	r2, r3, #31
 800d2a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d2ac:	f04f 0a01 	mov.w	sl, #1
 800d2b0:	fa0a f202 	lsl.w	r2, sl, r2
 800d2b4:	420a      	tst	r2, r1
 800d2b6:	d009      	beq.n	800d2cc <__gethex+0x1f8>
 800d2b8:	4553      	cmp	r3, sl
 800d2ba:	dd05      	ble.n	800d2c8 <__gethex+0x1f4>
 800d2bc:	1eb9      	subs	r1, r7, #2
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 ff4e 	bl	800e160 <__any_on>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d145      	bne.n	800d354 <__gethex+0x280>
 800d2c8:	f04f 0a02 	mov.w	sl, #2
 800d2cc:	4639      	mov	r1, r7
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f7ff fe99 	bl	800d006 <rshift>
 800d2d4:	443d      	add	r5, r7
 800d2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2da:	42ab      	cmp	r3, r5
 800d2dc:	da4c      	bge.n	800d378 <__gethex+0x2a4>
 800d2de:	ee18 0a10 	vmov	r0, s16
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	f000 fae2 	bl	800d8ac <_Bfree>
 800d2e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	27a3      	movs	r7, #163	; 0xa3
 800d2f0:	e785      	b.n	800d1fe <__gethex+0x12a>
 800d2f2:	1e73      	subs	r3, r6, #1
 800d2f4:	9a05      	ldr	r2, [sp, #20]
 800d2f6:	9303      	str	r3, [sp, #12]
 800d2f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d019      	beq.n	800d334 <__gethex+0x260>
 800d300:	f1bb 0f20 	cmp.w	fp, #32
 800d304:	d107      	bne.n	800d316 <__gethex+0x242>
 800d306:	9b02      	ldr	r3, [sp, #8]
 800d308:	9a00      	ldr	r2, [sp, #0]
 800d30a:	f843 2b04 	str.w	r2, [r3], #4
 800d30e:	9302      	str	r3, [sp, #8]
 800d310:	2300      	movs	r3, #0
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	469b      	mov	fp, r3
 800d316:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d31a:	f7ff fec6 	bl	800d0aa <__hexdig_fun>
 800d31e:	9b00      	ldr	r3, [sp, #0]
 800d320:	f000 000f 	and.w	r0, r0, #15
 800d324:	fa00 f00b 	lsl.w	r0, r0, fp
 800d328:	4303      	orrs	r3, r0
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	f10b 0b04 	add.w	fp, fp, #4
 800d330:	9b03      	ldr	r3, [sp, #12]
 800d332:	e00d      	b.n	800d350 <__gethex+0x27c>
 800d334:	9b03      	ldr	r3, [sp, #12]
 800d336:	9a06      	ldr	r2, [sp, #24]
 800d338:	4413      	add	r3, r2
 800d33a:	42bb      	cmp	r3, r7
 800d33c:	d3e0      	bcc.n	800d300 <__gethex+0x22c>
 800d33e:	4618      	mov	r0, r3
 800d340:	9901      	ldr	r1, [sp, #4]
 800d342:	9307      	str	r3, [sp, #28]
 800d344:	4652      	mov	r2, sl
 800d346:	f001 f94e 	bl	800e5e6 <strncmp>
 800d34a:	9b07      	ldr	r3, [sp, #28]
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d1d7      	bne.n	800d300 <__gethex+0x22c>
 800d350:	461e      	mov	r6, r3
 800d352:	e78b      	b.n	800d26c <__gethex+0x198>
 800d354:	f04f 0a03 	mov.w	sl, #3
 800d358:	e7b8      	b.n	800d2cc <__gethex+0x1f8>
 800d35a:	da0a      	bge.n	800d372 <__gethex+0x29e>
 800d35c:	1a37      	subs	r7, r6, r0
 800d35e:	4621      	mov	r1, r4
 800d360:	ee18 0a10 	vmov	r0, s16
 800d364:	463a      	mov	r2, r7
 800d366:	f000 fcbd 	bl	800dce4 <__lshift>
 800d36a:	1bed      	subs	r5, r5, r7
 800d36c:	4604      	mov	r4, r0
 800d36e:	f100 0914 	add.w	r9, r0, #20
 800d372:	f04f 0a00 	mov.w	sl, #0
 800d376:	e7ae      	b.n	800d2d6 <__gethex+0x202>
 800d378:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d37c:	42a8      	cmp	r0, r5
 800d37e:	dd72      	ble.n	800d466 <__gethex+0x392>
 800d380:	1b45      	subs	r5, r0, r5
 800d382:	42ae      	cmp	r6, r5
 800d384:	dc36      	bgt.n	800d3f4 <__gethex+0x320>
 800d386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d02a      	beq.n	800d3e4 <__gethex+0x310>
 800d38e:	2b03      	cmp	r3, #3
 800d390:	d02c      	beq.n	800d3ec <__gethex+0x318>
 800d392:	2b01      	cmp	r3, #1
 800d394:	d115      	bne.n	800d3c2 <__gethex+0x2ee>
 800d396:	42ae      	cmp	r6, r5
 800d398:	d113      	bne.n	800d3c2 <__gethex+0x2ee>
 800d39a:	2e01      	cmp	r6, #1
 800d39c:	d10b      	bne.n	800d3b6 <__gethex+0x2e2>
 800d39e:	9a04      	ldr	r2, [sp, #16]
 800d3a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	6123      	str	r3, [r4, #16]
 800d3aa:	f8c9 3000 	str.w	r3, [r9]
 800d3ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3b0:	2762      	movs	r7, #98	; 0x62
 800d3b2:	601c      	str	r4, [r3, #0]
 800d3b4:	e723      	b.n	800d1fe <__gethex+0x12a>
 800d3b6:	1e71      	subs	r1, r6, #1
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f000 fed1 	bl	800e160 <__any_on>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d1ed      	bne.n	800d39e <__gethex+0x2ca>
 800d3c2:	ee18 0a10 	vmov	r0, s16
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	f000 fa70 	bl	800d8ac <_Bfree>
 800d3cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	6013      	str	r3, [r2, #0]
 800d3d2:	2750      	movs	r7, #80	; 0x50
 800d3d4:	e713      	b.n	800d1fe <__gethex+0x12a>
 800d3d6:	bf00      	nop
 800d3d8:	08040ba4 	.word	0x08040ba4
 800d3dc:	08040ac4 	.word	0x08040ac4
 800d3e0:	08040b38 	.word	0x08040b38
 800d3e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1eb      	bne.n	800d3c2 <__gethex+0x2ee>
 800d3ea:	e7d8      	b.n	800d39e <__gethex+0x2ca>
 800d3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1d5      	bne.n	800d39e <__gethex+0x2ca>
 800d3f2:	e7e6      	b.n	800d3c2 <__gethex+0x2ee>
 800d3f4:	1e6f      	subs	r7, r5, #1
 800d3f6:	f1ba 0f00 	cmp.w	sl, #0
 800d3fa:	d131      	bne.n	800d460 <__gethex+0x38c>
 800d3fc:	b127      	cbz	r7, 800d408 <__gethex+0x334>
 800d3fe:	4639      	mov	r1, r7
 800d400:	4620      	mov	r0, r4
 800d402:	f000 fead 	bl	800e160 <__any_on>
 800d406:	4682      	mov	sl, r0
 800d408:	117b      	asrs	r3, r7, #5
 800d40a:	2101      	movs	r1, #1
 800d40c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d410:	f007 071f 	and.w	r7, r7, #31
 800d414:	fa01 f707 	lsl.w	r7, r1, r7
 800d418:	421f      	tst	r7, r3
 800d41a:	4629      	mov	r1, r5
 800d41c:	4620      	mov	r0, r4
 800d41e:	bf18      	it	ne
 800d420:	f04a 0a02 	orrne.w	sl, sl, #2
 800d424:	1b76      	subs	r6, r6, r5
 800d426:	f7ff fdee 	bl	800d006 <rshift>
 800d42a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d42e:	2702      	movs	r7, #2
 800d430:	f1ba 0f00 	cmp.w	sl, #0
 800d434:	d048      	beq.n	800d4c8 <__gethex+0x3f4>
 800d436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d015      	beq.n	800d46a <__gethex+0x396>
 800d43e:	2b03      	cmp	r3, #3
 800d440:	d017      	beq.n	800d472 <__gethex+0x39e>
 800d442:	2b01      	cmp	r3, #1
 800d444:	d109      	bne.n	800d45a <__gethex+0x386>
 800d446:	f01a 0f02 	tst.w	sl, #2
 800d44a:	d006      	beq.n	800d45a <__gethex+0x386>
 800d44c:	f8d9 0000 	ldr.w	r0, [r9]
 800d450:	ea4a 0a00 	orr.w	sl, sl, r0
 800d454:	f01a 0f01 	tst.w	sl, #1
 800d458:	d10e      	bne.n	800d478 <__gethex+0x3a4>
 800d45a:	f047 0710 	orr.w	r7, r7, #16
 800d45e:	e033      	b.n	800d4c8 <__gethex+0x3f4>
 800d460:	f04f 0a01 	mov.w	sl, #1
 800d464:	e7d0      	b.n	800d408 <__gethex+0x334>
 800d466:	2701      	movs	r7, #1
 800d468:	e7e2      	b.n	800d430 <__gethex+0x35c>
 800d46a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d46c:	f1c3 0301 	rsb	r3, r3, #1
 800d470:	9315      	str	r3, [sp, #84]	; 0x54
 800d472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d474:	2b00      	cmp	r3, #0
 800d476:	d0f0      	beq.n	800d45a <__gethex+0x386>
 800d478:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d47c:	f104 0314 	add.w	r3, r4, #20
 800d480:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d484:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d488:	f04f 0c00 	mov.w	ip, #0
 800d48c:	4618      	mov	r0, r3
 800d48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d492:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d496:	d01c      	beq.n	800d4d2 <__gethex+0x3fe>
 800d498:	3201      	adds	r2, #1
 800d49a:	6002      	str	r2, [r0, #0]
 800d49c:	2f02      	cmp	r7, #2
 800d49e:	f104 0314 	add.w	r3, r4, #20
 800d4a2:	d13f      	bne.n	800d524 <__gethex+0x450>
 800d4a4:	f8d8 2000 	ldr.w	r2, [r8]
 800d4a8:	3a01      	subs	r2, #1
 800d4aa:	42b2      	cmp	r2, r6
 800d4ac:	d10a      	bne.n	800d4c4 <__gethex+0x3f0>
 800d4ae:	1171      	asrs	r1, r6, #5
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d4b6:	f006 061f 	and.w	r6, r6, #31
 800d4ba:	fa02 f606 	lsl.w	r6, r2, r6
 800d4be:	421e      	tst	r6, r3
 800d4c0:	bf18      	it	ne
 800d4c2:	4617      	movne	r7, r2
 800d4c4:	f047 0720 	orr.w	r7, r7, #32
 800d4c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4ca:	601c      	str	r4, [r3, #0]
 800d4cc:	9b04      	ldr	r3, [sp, #16]
 800d4ce:	601d      	str	r5, [r3, #0]
 800d4d0:	e695      	b.n	800d1fe <__gethex+0x12a>
 800d4d2:	4299      	cmp	r1, r3
 800d4d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d4d8:	d8d8      	bhi.n	800d48c <__gethex+0x3b8>
 800d4da:	68a3      	ldr	r3, [r4, #8]
 800d4dc:	459b      	cmp	fp, r3
 800d4de:	db19      	blt.n	800d514 <__gethex+0x440>
 800d4e0:	6861      	ldr	r1, [r4, #4]
 800d4e2:	ee18 0a10 	vmov	r0, s16
 800d4e6:	3101      	adds	r1, #1
 800d4e8:	f000 f9a0 	bl	800d82c <_Balloc>
 800d4ec:	4681      	mov	r9, r0
 800d4ee:	b918      	cbnz	r0, 800d4f8 <__gethex+0x424>
 800d4f0:	4b1a      	ldr	r3, [pc, #104]	; (800d55c <__gethex+0x488>)
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	2184      	movs	r1, #132	; 0x84
 800d4f6:	e6a8      	b.n	800d24a <__gethex+0x176>
 800d4f8:	6922      	ldr	r2, [r4, #16]
 800d4fa:	3202      	adds	r2, #2
 800d4fc:	f104 010c 	add.w	r1, r4, #12
 800d500:	0092      	lsls	r2, r2, #2
 800d502:	300c      	adds	r0, #12
 800d504:	f7fc fd0e 	bl	8009f24 <memcpy>
 800d508:	4621      	mov	r1, r4
 800d50a:	ee18 0a10 	vmov	r0, s16
 800d50e:	f000 f9cd 	bl	800d8ac <_Bfree>
 800d512:	464c      	mov	r4, r9
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	1c5a      	adds	r2, r3, #1
 800d518:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d51c:	6122      	str	r2, [r4, #16]
 800d51e:	2201      	movs	r2, #1
 800d520:	615a      	str	r2, [r3, #20]
 800d522:	e7bb      	b.n	800d49c <__gethex+0x3c8>
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	455a      	cmp	r2, fp
 800d528:	dd0b      	ble.n	800d542 <__gethex+0x46e>
 800d52a:	2101      	movs	r1, #1
 800d52c:	4620      	mov	r0, r4
 800d52e:	f7ff fd6a 	bl	800d006 <rshift>
 800d532:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d536:	3501      	adds	r5, #1
 800d538:	42ab      	cmp	r3, r5
 800d53a:	f6ff aed0 	blt.w	800d2de <__gethex+0x20a>
 800d53e:	2701      	movs	r7, #1
 800d540:	e7c0      	b.n	800d4c4 <__gethex+0x3f0>
 800d542:	f016 061f 	ands.w	r6, r6, #31
 800d546:	d0fa      	beq.n	800d53e <__gethex+0x46a>
 800d548:	449a      	add	sl, r3
 800d54a:	f1c6 0620 	rsb	r6, r6, #32
 800d54e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d552:	f000 fa61 	bl	800da18 <__hi0bits>
 800d556:	42b0      	cmp	r0, r6
 800d558:	dbe7      	blt.n	800d52a <__gethex+0x456>
 800d55a:	e7f0      	b.n	800d53e <__gethex+0x46a>
 800d55c:	08040ac4 	.word	0x08040ac4

0800d560 <L_shift>:
 800d560:	f1c2 0208 	rsb	r2, r2, #8
 800d564:	0092      	lsls	r2, r2, #2
 800d566:	b570      	push	{r4, r5, r6, lr}
 800d568:	f1c2 0620 	rsb	r6, r2, #32
 800d56c:	6843      	ldr	r3, [r0, #4]
 800d56e:	6804      	ldr	r4, [r0, #0]
 800d570:	fa03 f506 	lsl.w	r5, r3, r6
 800d574:	432c      	orrs	r4, r5
 800d576:	40d3      	lsrs	r3, r2
 800d578:	6004      	str	r4, [r0, #0]
 800d57a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d57e:	4288      	cmp	r0, r1
 800d580:	d3f4      	bcc.n	800d56c <L_shift+0xc>
 800d582:	bd70      	pop	{r4, r5, r6, pc}

0800d584 <__match>:
 800d584:	b530      	push	{r4, r5, lr}
 800d586:	6803      	ldr	r3, [r0, #0]
 800d588:	3301      	adds	r3, #1
 800d58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d58e:	b914      	cbnz	r4, 800d596 <__match+0x12>
 800d590:	6003      	str	r3, [r0, #0]
 800d592:	2001      	movs	r0, #1
 800d594:	bd30      	pop	{r4, r5, pc}
 800d596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d59a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d59e:	2d19      	cmp	r5, #25
 800d5a0:	bf98      	it	ls
 800d5a2:	3220      	addls	r2, #32
 800d5a4:	42a2      	cmp	r2, r4
 800d5a6:	d0f0      	beq.n	800d58a <__match+0x6>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	e7f3      	b.n	800d594 <__match+0x10>

0800d5ac <__hexnan>:
 800d5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b0:	680b      	ldr	r3, [r1, #0]
 800d5b2:	6801      	ldr	r1, [r0, #0]
 800d5b4:	115e      	asrs	r6, r3, #5
 800d5b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d5ba:	f013 031f 	ands.w	r3, r3, #31
 800d5be:	b087      	sub	sp, #28
 800d5c0:	bf18      	it	ne
 800d5c2:	3604      	addne	r6, #4
 800d5c4:	2500      	movs	r5, #0
 800d5c6:	1f37      	subs	r7, r6, #4
 800d5c8:	4682      	mov	sl, r0
 800d5ca:	4690      	mov	r8, r2
 800d5cc:	9301      	str	r3, [sp, #4]
 800d5ce:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5d2:	46b9      	mov	r9, r7
 800d5d4:	463c      	mov	r4, r7
 800d5d6:	9502      	str	r5, [sp, #8]
 800d5d8:	46ab      	mov	fp, r5
 800d5da:	784a      	ldrb	r2, [r1, #1]
 800d5dc:	1c4b      	adds	r3, r1, #1
 800d5de:	9303      	str	r3, [sp, #12]
 800d5e0:	b342      	cbz	r2, 800d634 <__hexnan+0x88>
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	9105      	str	r1, [sp, #20]
 800d5e6:	9204      	str	r2, [sp, #16]
 800d5e8:	f7ff fd5f 	bl	800d0aa <__hexdig_fun>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d14f      	bne.n	800d690 <__hexnan+0xe4>
 800d5f0:	9a04      	ldr	r2, [sp, #16]
 800d5f2:	9905      	ldr	r1, [sp, #20]
 800d5f4:	2a20      	cmp	r2, #32
 800d5f6:	d818      	bhi.n	800d62a <__hexnan+0x7e>
 800d5f8:	9b02      	ldr	r3, [sp, #8]
 800d5fa:	459b      	cmp	fp, r3
 800d5fc:	dd13      	ble.n	800d626 <__hexnan+0x7a>
 800d5fe:	454c      	cmp	r4, r9
 800d600:	d206      	bcs.n	800d610 <__hexnan+0x64>
 800d602:	2d07      	cmp	r5, #7
 800d604:	dc04      	bgt.n	800d610 <__hexnan+0x64>
 800d606:	462a      	mov	r2, r5
 800d608:	4649      	mov	r1, r9
 800d60a:	4620      	mov	r0, r4
 800d60c:	f7ff ffa8 	bl	800d560 <L_shift>
 800d610:	4544      	cmp	r4, r8
 800d612:	d950      	bls.n	800d6b6 <__hexnan+0x10a>
 800d614:	2300      	movs	r3, #0
 800d616:	f1a4 0904 	sub.w	r9, r4, #4
 800d61a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d61e:	f8cd b008 	str.w	fp, [sp, #8]
 800d622:	464c      	mov	r4, r9
 800d624:	461d      	mov	r5, r3
 800d626:	9903      	ldr	r1, [sp, #12]
 800d628:	e7d7      	b.n	800d5da <__hexnan+0x2e>
 800d62a:	2a29      	cmp	r2, #41	; 0x29
 800d62c:	d156      	bne.n	800d6dc <__hexnan+0x130>
 800d62e:	3102      	adds	r1, #2
 800d630:	f8ca 1000 	str.w	r1, [sl]
 800d634:	f1bb 0f00 	cmp.w	fp, #0
 800d638:	d050      	beq.n	800d6dc <__hexnan+0x130>
 800d63a:	454c      	cmp	r4, r9
 800d63c:	d206      	bcs.n	800d64c <__hexnan+0xa0>
 800d63e:	2d07      	cmp	r5, #7
 800d640:	dc04      	bgt.n	800d64c <__hexnan+0xa0>
 800d642:	462a      	mov	r2, r5
 800d644:	4649      	mov	r1, r9
 800d646:	4620      	mov	r0, r4
 800d648:	f7ff ff8a 	bl	800d560 <L_shift>
 800d64c:	4544      	cmp	r4, r8
 800d64e:	d934      	bls.n	800d6ba <__hexnan+0x10e>
 800d650:	f1a8 0204 	sub.w	r2, r8, #4
 800d654:	4623      	mov	r3, r4
 800d656:	f853 1b04 	ldr.w	r1, [r3], #4
 800d65a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d65e:	429f      	cmp	r7, r3
 800d660:	d2f9      	bcs.n	800d656 <__hexnan+0xaa>
 800d662:	1b3b      	subs	r3, r7, r4
 800d664:	f023 0303 	bic.w	r3, r3, #3
 800d668:	3304      	adds	r3, #4
 800d66a:	3401      	adds	r4, #1
 800d66c:	3e03      	subs	r6, #3
 800d66e:	42b4      	cmp	r4, r6
 800d670:	bf88      	it	hi
 800d672:	2304      	movhi	r3, #4
 800d674:	4443      	add	r3, r8
 800d676:	2200      	movs	r2, #0
 800d678:	f843 2b04 	str.w	r2, [r3], #4
 800d67c:	429f      	cmp	r7, r3
 800d67e:	d2fb      	bcs.n	800d678 <__hexnan+0xcc>
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	b91b      	cbnz	r3, 800d68c <__hexnan+0xe0>
 800d684:	4547      	cmp	r7, r8
 800d686:	d127      	bne.n	800d6d8 <__hexnan+0x12c>
 800d688:	2301      	movs	r3, #1
 800d68a:	603b      	str	r3, [r7, #0]
 800d68c:	2005      	movs	r0, #5
 800d68e:	e026      	b.n	800d6de <__hexnan+0x132>
 800d690:	3501      	adds	r5, #1
 800d692:	2d08      	cmp	r5, #8
 800d694:	f10b 0b01 	add.w	fp, fp, #1
 800d698:	dd06      	ble.n	800d6a8 <__hexnan+0xfc>
 800d69a:	4544      	cmp	r4, r8
 800d69c:	d9c3      	bls.n	800d626 <__hexnan+0x7a>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6a4:	2501      	movs	r5, #1
 800d6a6:	3c04      	subs	r4, #4
 800d6a8:	6822      	ldr	r2, [r4, #0]
 800d6aa:	f000 000f 	and.w	r0, r0, #15
 800d6ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d6b2:	6022      	str	r2, [r4, #0]
 800d6b4:	e7b7      	b.n	800d626 <__hexnan+0x7a>
 800d6b6:	2508      	movs	r5, #8
 800d6b8:	e7b5      	b.n	800d626 <__hexnan+0x7a>
 800d6ba:	9b01      	ldr	r3, [sp, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d0df      	beq.n	800d680 <__hexnan+0xd4>
 800d6c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6c4:	f1c3 0320 	rsb	r3, r3, #32
 800d6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d6cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d6d0:	401a      	ands	r2, r3
 800d6d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800d6d6:	e7d3      	b.n	800d680 <__hexnan+0xd4>
 800d6d8:	3f04      	subs	r7, #4
 800d6da:	e7d1      	b.n	800d680 <__hexnan+0xd4>
 800d6dc:	2004      	movs	r0, #4
 800d6de:	b007      	add	sp, #28
 800d6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6e4 <_localeconv_r>:
 800d6e4:	4800      	ldr	r0, [pc, #0]	; (800d6e8 <_localeconv_r+0x4>)
 800d6e6:	4770      	bx	lr
 800d6e8:	200010c4 	.word	0x200010c4

0800d6ec <__retarget_lock_init_recursive>:
 800d6ec:	4770      	bx	lr

0800d6ee <__retarget_lock_acquire_recursive>:
 800d6ee:	4770      	bx	lr

0800d6f0 <__retarget_lock_release_recursive>:
 800d6f0:	4770      	bx	lr

0800d6f2 <__swhatbuf_r>:
 800d6f2:	b570      	push	{r4, r5, r6, lr}
 800d6f4:	460e      	mov	r6, r1
 800d6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6fa:	2900      	cmp	r1, #0
 800d6fc:	b096      	sub	sp, #88	; 0x58
 800d6fe:	4614      	mov	r4, r2
 800d700:	461d      	mov	r5, r3
 800d702:	da07      	bge.n	800d714 <__swhatbuf_r+0x22>
 800d704:	2300      	movs	r3, #0
 800d706:	602b      	str	r3, [r5, #0]
 800d708:	89b3      	ldrh	r3, [r6, #12]
 800d70a:	061a      	lsls	r2, r3, #24
 800d70c:	d410      	bmi.n	800d730 <__swhatbuf_r+0x3e>
 800d70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d712:	e00e      	b.n	800d732 <__swhatbuf_r+0x40>
 800d714:	466a      	mov	r2, sp
 800d716:	f000 ffa7 	bl	800e668 <_fstat_r>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	dbf2      	blt.n	800d704 <__swhatbuf_r+0x12>
 800d71e:	9a01      	ldr	r2, [sp, #4]
 800d720:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d724:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d728:	425a      	negs	r2, r3
 800d72a:	415a      	adcs	r2, r3
 800d72c:	602a      	str	r2, [r5, #0]
 800d72e:	e7ee      	b.n	800d70e <__swhatbuf_r+0x1c>
 800d730:	2340      	movs	r3, #64	; 0x40
 800d732:	2000      	movs	r0, #0
 800d734:	6023      	str	r3, [r4, #0]
 800d736:	b016      	add	sp, #88	; 0x58
 800d738:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d73c <__smakebuf_r>:
 800d73c:	898b      	ldrh	r3, [r1, #12]
 800d73e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d740:	079d      	lsls	r5, r3, #30
 800d742:	4606      	mov	r6, r0
 800d744:	460c      	mov	r4, r1
 800d746:	d507      	bpl.n	800d758 <__smakebuf_r+0x1c>
 800d748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	6123      	str	r3, [r4, #16]
 800d750:	2301      	movs	r3, #1
 800d752:	6163      	str	r3, [r4, #20]
 800d754:	b002      	add	sp, #8
 800d756:	bd70      	pop	{r4, r5, r6, pc}
 800d758:	ab01      	add	r3, sp, #4
 800d75a:	466a      	mov	r2, sp
 800d75c:	f7ff ffc9 	bl	800d6f2 <__swhatbuf_r>
 800d760:	9900      	ldr	r1, [sp, #0]
 800d762:	4605      	mov	r5, r0
 800d764:	4630      	mov	r0, r6
 800d766:	f7fc fc43 	bl	8009ff0 <_malloc_r>
 800d76a:	b948      	cbnz	r0, 800d780 <__smakebuf_r+0x44>
 800d76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d770:	059a      	lsls	r2, r3, #22
 800d772:	d4ef      	bmi.n	800d754 <__smakebuf_r+0x18>
 800d774:	f023 0303 	bic.w	r3, r3, #3
 800d778:	f043 0302 	orr.w	r3, r3, #2
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	e7e3      	b.n	800d748 <__smakebuf_r+0xc>
 800d780:	4b0d      	ldr	r3, [pc, #52]	; (800d7b8 <__smakebuf_r+0x7c>)
 800d782:	62b3      	str	r3, [r6, #40]	; 0x28
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	6020      	str	r0, [r4, #0]
 800d788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d78c:	81a3      	strh	r3, [r4, #12]
 800d78e:	9b00      	ldr	r3, [sp, #0]
 800d790:	6163      	str	r3, [r4, #20]
 800d792:	9b01      	ldr	r3, [sp, #4]
 800d794:	6120      	str	r0, [r4, #16]
 800d796:	b15b      	cbz	r3, 800d7b0 <__smakebuf_r+0x74>
 800d798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d79c:	4630      	mov	r0, r6
 800d79e:	f000 ff75 	bl	800e68c <_isatty_r>
 800d7a2:	b128      	cbz	r0, 800d7b0 <__smakebuf_r+0x74>
 800d7a4:	89a3      	ldrh	r3, [r4, #12]
 800d7a6:	f023 0303 	bic.w	r3, r3, #3
 800d7aa:	f043 0301 	orr.w	r3, r3, #1
 800d7ae:	81a3      	strh	r3, [r4, #12]
 800d7b0:	89a0      	ldrh	r0, [r4, #12]
 800d7b2:	4305      	orrs	r5, r0
 800d7b4:	81a5      	strh	r5, [r4, #12]
 800d7b6:	e7cd      	b.n	800d754 <__smakebuf_r+0x18>
 800d7b8:	0800ce65 	.word	0x0800ce65

0800d7bc <__ascii_mbtowc>:
 800d7bc:	b082      	sub	sp, #8
 800d7be:	b901      	cbnz	r1, 800d7c2 <__ascii_mbtowc+0x6>
 800d7c0:	a901      	add	r1, sp, #4
 800d7c2:	b142      	cbz	r2, 800d7d6 <__ascii_mbtowc+0x1a>
 800d7c4:	b14b      	cbz	r3, 800d7da <__ascii_mbtowc+0x1e>
 800d7c6:	7813      	ldrb	r3, [r2, #0]
 800d7c8:	600b      	str	r3, [r1, #0]
 800d7ca:	7812      	ldrb	r2, [r2, #0]
 800d7cc:	1e10      	subs	r0, r2, #0
 800d7ce:	bf18      	it	ne
 800d7d0:	2001      	movne	r0, #1
 800d7d2:	b002      	add	sp, #8
 800d7d4:	4770      	bx	lr
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	e7fb      	b.n	800d7d2 <__ascii_mbtowc+0x16>
 800d7da:	f06f 0001 	mvn.w	r0, #1
 800d7de:	e7f8      	b.n	800d7d2 <__ascii_mbtowc+0x16>

0800d7e0 <memmove>:
 800d7e0:	4288      	cmp	r0, r1
 800d7e2:	b510      	push	{r4, lr}
 800d7e4:	eb01 0402 	add.w	r4, r1, r2
 800d7e8:	d902      	bls.n	800d7f0 <memmove+0x10>
 800d7ea:	4284      	cmp	r4, r0
 800d7ec:	4623      	mov	r3, r4
 800d7ee:	d807      	bhi.n	800d800 <memmove+0x20>
 800d7f0:	1e43      	subs	r3, r0, #1
 800d7f2:	42a1      	cmp	r1, r4
 800d7f4:	d008      	beq.n	800d808 <memmove+0x28>
 800d7f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7fe:	e7f8      	b.n	800d7f2 <memmove+0x12>
 800d800:	4402      	add	r2, r0
 800d802:	4601      	mov	r1, r0
 800d804:	428a      	cmp	r2, r1
 800d806:	d100      	bne.n	800d80a <memmove+0x2a>
 800d808:	bd10      	pop	{r4, pc}
 800d80a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d80e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d812:	e7f7      	b.n	800d804 <memmove+0x24>

0800d814 <__malloc_lock>:
 800d814:	4801      	ldr	r0, [pc, #4]	; (800d81c <__malloc_lock+0x8>)
 800d816:	f7ff bf6a 	b.w	800d6ee <__retarget_lock_acquire_recursive>
 800d81a:	bf00      	nop
 800d81c:	200064f8 	.word	0x200064f8

0800d820 <__malloc_unlock>:
 800d820:	4801      	ldr	r0, [pc, #4]	; (800d828 <__malloc_unlock+0x8>)
 800d822:	f7ff bf65 	b.w	800d6f0 <__retarget_lock_release_recursive>
 800d826:	bf00      	nop
 800d828:	200064f8 	.word	0x200064f8

0800d82c <_Balloc>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d830:	4604      	mov	r4, r0
 800d832:	460d      	mov	r5, r1
 800d834:	b976      	cbnz	r6, 800d854 <_Balloc+0x28>
 800d836:	2010      	movs	r0, #16
 800d838:	f7fc fb6c 	bl	8009f14 <malloc>
 800d83c:	4602      	mov	r2, r0
 800d83e:	6260      	str	r0, [r4, #36]	; 0x24
 800d840:	b920      	cbnz	r0, 800d84c <_Balloc+0x20>
 800d842:	4b18      	ldr	r3, [pc, #96]	; (800d8a4 <_Balloc+0x78>)
 800d844:	4818      	ldr	r0, [pc, #96]	; (800d8a8 <_Balloc+0x7c>)
 800d846:	2166      	movs	r1, #102	; 0x66
 800d848:	f7fc fb0a 	bl	8009e60 <__assert_func>
 800d84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d850:	6006      	str	r6, [r0, #0]
 800d852:	60c6      	str	r6, [r0, #12]
 800d854:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d856:	68f3      	ldr	r3, [r6, #12]
 800d858:	b183      	cbz	r3, 800d87c <_Balloc+0x50>
 800d85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d862:	b9b8      	cbnz	r0, 800d894 <_Balloc+0x68>
 800d864:	2101      	movs	r1, #1
 800d866:	fa01 f605 	lsl.w	r6, r1, r5
 800d86a:	1d72      	adds	r2, r6, #5
 800d86c:	0092      	lsls	r2, r2, #2
 800d86e:	4620      	mov	r0, r4
 800d870:	f000 fc97 	bl	800e1a2 <_calloc_r>
 800d874:	b160      	cbz	r0, 800d890 <_Balloc+0x64>
 800d876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d87a:	e00e      	b.n	800d89a <_Balloc+0x6e>
 800d87c:	2221      	movs	r2, #33	; 0x21
 800d87e:	2104      	movs	r1, #4
 800d880:	4620      	mov	r0, r4
 800d882:	f000 fc8e 	bl	800e1a2 <_calloc_r>
 800d886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d888:	60f0      	str	r0, [r6, #12]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1e4      	bne.n	800d85a <_Balloc+0x2e>
 800d890:	2000      	movs	r0, #0
 800d892:	bd70      	pop	{r4, r5, r6, pc}
 800d894:	6802      	ldr	r2, [r0, #0]
 800d896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d89a:	2300      	movs	r3, #0
 800d89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8a0:	e7f7      	b.n	800d892 <_Balloc+0x66>
 800d8a2:	bf00      	nop
 800d8a4:	08040a4e 	.word	0x08040a4e
 800d8a8:	08040bb8 	.word	0x08040bb8

0800d8ac <_Bfree>:
 800d8ac:	b570      	push	{r4, r5, r6, lr}
 800d8ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	b976      	cbnz	r6, 800d8d4 <_Bfree+0x28>
 800d8b6:	2010      	movs	r0, #16
 800d8b8:	f7fc fb2c 	bl	8009f14 <malloc>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	6268      	str	r0, [r5, #36]	; 0x24
 800d8c0:	b920      	cbnz	r0, 800d8cc <_Bfree+0x20>
 800d8c2:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <_Bfree+0x3c>)
 800d8c4:	4809      	ldr	r0, [pc, #36]	; (800d8ec <_Bfree+0x40>)
 800d8c6:	218a      	movs	r1, #138	; 0x8a
 800d8c8:	f7fc faca 	bl	8009e60 <__assert_func>
 800d8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8d0:	6006      	str	r6, [r0, #0]
 800d8d2:	60c6      	str	r6, [r0, #12]
 800d8d4:	b13c      	cbz	r4, 800d8e6 <_Bfree+0x3a>
 800d8d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d8d8:	6862      	ldr	r2, [r4, #4]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8e0:	6021      	str	r1, [r4, #0]
 800d8e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8e6:	bd70      	pop	{r4, r5, r6, pc}
 800d8e8:	08040a4e 	.word	0x08040a4e
 800d8ec:	08040bb8 	.word	0x08040bb8

0800d8f0 <__multadd>:
 800d8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f4:	690e      	ldr	r6, [r1, #16]
 800d8f6:	4607      	mov	r7, r0
 800d8f8:	4698      	mov	r8, r3
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	f101 0014 	add.w	r0, r1, #20
 800d900:	2300      	movs	r3, #0
 800d902:	6805      	ldr	r5, [r0, #0]
 800d904:	b2a9      	uxth	r1, r5
 800d906:	fb02 8101 	mla	r1, r2, r1, r8
 800d90a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d90e:	0c2d      	lsrs	r5, r5, #16
 800d910:	fb02 c505 	mla	r5, r2, r5, ip
 800d914:	b289      	uxth	r1, r1
 800d916:	3301      	adds	r3, #1
 800d918:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d91c:	429e      	cmp	r6, r3
 800d91e:	f840 1b04 	str.w	r1, [r0], #4
 800d922:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d926:	dcec      	bgt.n	800d902 <__multadd+0x12>
 800d928:	f1b8 0f00 	cmp.w	r8, #0
 800d92c:	d022      	beq.n	800d974 <__multadd+0x84>
 800d92e:	68a3      	ldr	r3, [r4, #8]
 800d930:	42b3      	cmp	r3, r6
 800d932:	dc19      	bgt.n	800d968 <__multadd+0x78>
 800d934:	6861      	ldr	r1, [r4, #4]
 800d936:	4638      	mov	r0, r7
 800d938:	3101      	adds	r1, #1
 800d93a:	f7ff ff77 	bl	800d82c <_Balloc>
 800d93e:	4605      	mov	r5, r0
 800d940:	b928      	cbnz	r0, 800d94e <__multadd+0x5e>
 800d942:	4602      	mov	r2, r0
 800d944:	4b0d      	ldr	r3, [pc, #52]	; (800d97c <__multadd+0x8c>)
 800d946:	480e      	ldr	r0, [pc, #56]	; (800d980 <__multadd+0x90>)
 800d948:	21b5      	movs	r1, #181	; 0xb5
 800d94a:	f7fc fa89 	bl	8009e60 <__assert_func>
 800d94e:	6922      	ldr	r2, [r4, #16]
 800d950:	3202      	adds	r2, #2
 800d952:	f104 010c 	add.w	r1, r4, #12
 800d956:	0092      	lsls	r2, r2, #2
 800d958:	300c      	adds	r0, #12
 800d95a:	f7fc fae3 	bl	8009f24 <memcpy>
 800d95e:	4621      	mov	r1, r4
 800d960:	4638      	mov	r0, r7
 800d962:	f7ff ffa3 	bl	800d8ac <_Bfree>
 800d966:	462c      	mov	r4, r5
 800d968:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d96c:	3601      	adds	r6, #1
 800d96e:	f8c3 8014 	str.w	r8, [r3, #20]
 800d972:	6126      	str	r6, [r4, #16]
 800d974:	4620      	mov	r0, r4
 800d976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d97a:	bf00      	nop
 800d97c:	08040ac4 	.word	0x08040ac4
 800d980:	08040bb8 	.word	0x08040bb8

0800d984 <__s2b>:
 800d984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d988:	460c      	mov	r4, r1
 800d98a:	4615      	mov	r5, r2
 800d98c:	461f      	mov	r7, r3
 800d98e:	2209      	movs	r2, #9
 800d990:	3308      	adds	r3, #8
 800d992:	4606      	mov	r6, r0
 800d994:	fb93 f3f2 	sdiv	r3, r3, r2
 800d998:	2100      	movs	r1, #0
 800d99a:	2201      	movs	r2, #1
 800d99c:	429a      	cmp	r2, r3
 800d99e:	db09      	blt.n	800d9b4 <__s2b+0x30>
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f7ff ff43 	bl	800d82c <_Balloc>
 800d9a6:	b940      	cbnz	r0, 800d9ba <__s2b+0x36>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	4b19      	ldr	r3, [pc, #100]	; (800da10 <__s2b+0x8c>)
 800d9ac:	4819      	ldr	r0, [pc, #100]	; (800da14 <__s2b+0x90>)
 800d9ae:	21ce      	movs	r1, #206	; 0xce
 800d9b0:	f7fc fa56 	bl	8009e60 <__assert_func>
 800d9b4:	0052      	lsls	r2, r2, #1
 800d9b6:	3101      	adds	r1, #1
 800d9b8:	e7f0      	b.n	800d99c <__s2b+0x18>
 800d9ba:	9b08      	ldr	r3, [sp, #32]
 800d9bc:	6143      	str	r3, [r0, #20]
 800d9be:	2d09      	cmp	r5, #9
 800d9c0:	f04f 0301 	mov.w	r3, #1
 800d9c4:	6103      	str	r3, [r0, #16]
 800d9c6:	dd16      	ble.n	800d9f6 <__s2b+0x72>
 800d9c8:	f104 0909 	add.w	r9, r4, #9
 800d9cc:	46c8      	mov	r8, r9
 800d9ce:	442c      	add	r4, r5
 800d9d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d9d4:	4601      	mov	r1, r0
 800d9d6:	3b30      	subs	r3, #48	; 0x30
 800d9d8:	220a      	movs	r2, #10
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f7ff ff88 	bl	800d8f0 <__multadd>
 800d9e0:	45a0      	cmp	r8, r4
 800d9e2:	d1f5      	bne.n	800d9d0 <__s2b+0x4c>
 800d9e4:	f1a5 0408 	sub.w	r4, r5, #8
 800d9e8:	444c      	add	r4, r9
 800d9ea:	1b2d      	subs	r5, r5, r4
 800d9ec:	1963      	adds	r3, r4, r5
 800d9ee:	42bb      	cmp	r3, r7
 800d9f0:	db04      	blt.n	800d9fc <__s2b+0x78>
 800d9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9f6:	340a      	adds	r4, #10
 800d9f8:	2509      	movs	r5, #9
 800d9fa:	e7f6      	b.n	800d9ea <__s2b+0x66>
 800d9fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da00:	4601      	mov	r1, r0
 800da02:	3b30      	subs	r3, #48	; 0x30
 800da04:	220a      	movs	r2, #10
 800da06:	4630      	mov	r0, r6
 800da08:	f7ff ff72 	bl	800d8f0 <__multadd>
 800da0c:	e7ee      	b.n	800d9ec <__s2b+0x68>
 800da0e:	bf00      	nop
 800da10:	08040ac4 	.word	0x08040ac4
 800da14:	08040bb8 	.word	0x08040bb8

0800da18 <__hi0bits>:
 800da18:	0c03      	lsrs	r3, r0, #16
 800da1a:	041b      	lsls	r3, r3, #16
 800da1c:	b9d3      	cbnz	r3, 800da54 <__hi0bits+0x3c>
 800da1e:	0400      	lsls	r0, r0, #16
 800da20:	2310      	movs	r3, #16
 800da22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da26:	bf04      	itt	eq
 800da28:	0200      	lsleq	r0, r0, #8
 800da2a:	3308      	addeq	r3, #8
 800da2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da30:	bf04      	itt	eq
 800da32:	0100      	lsleq	r0, r0, #4
 800da34:	3304      	addeq	r3, #4
 800da36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da3a:	bf04      	itt	eq
 800da3c:	0080      	lsleq	r0, r0, #2
 800da3e:	3302      	addeq	r3, #2
 800da40:	2800      	cmp	r0, #0
 800da42:	db05      	blt.n	800da50 <__hi0bits+0x38>
 800da44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da48:	f103 0301 	add.w	r3, r3, #1
 800da4c:	bf08      	it	eq
 800da4e:	2320      	moveq	r3, #32
 800da50:	4618      	mov	r0, r3
 800da52:	4770      	bx	lr
 800da54:	2300      	movs	r3, #0
 800da56:	e7e4      	b.n	800da22 <__hi0bits+0xa>

0800da58 <__lo0bits>:
 800da58:	6803      	ldr	r3, [r0, #0]
 800da5a:	f013 0207 	ands.w	r2, r3, #7
 800da5e:	4601      	mov	r1, r0
 800da60:	d00b      	beq.n	800da7a <__lo0bits+0x22>
 800da62:	07da      	lsls	r2, r3, #31
 800da64:	d424      	bmi.n	800dab0 <__lo0bits+0x58>
 800da66:	0798      	lsls	r0, r3, #30
 800da68:	bf49      	itett	mi
 800da6a:	085b      	lsrmi	r3, r3, #1
 800da6c:	089b      	lsrpl	r3, r3, #2
 800da6e:	2001      	movmi	r0, #1
 800da70:	600b      	strmi	r3, [r1, #0]
 800da72:	bf5c      	itt	pl
 800da74:	600b      	strpl	r3, [r1, #0]
 800da76:	2002      	movpl	r0, #2
 800da78:	4770      	bx	lr
 800da7a:	b298      	uxth	r0, r3
 800da7c:	b9b0      	cbnz	r0, 800daac <__lo0bits+0x54>
 800da7e:	0c1b      	lsrs	r3, r3, #16
 800da80:	2010      	movs	r0, #16
 800da82:	f013 0fff 	tst.w	r3, #255	; 0xff
 800da86:	bf04      	itt	eq
 800da88:	0a1b      	lsreq	r3, r3, #8
 800da8a:	3008      	addeq	r0, #8
 800da8c:	071a      	lsls	r2, r3, #28
 800da8e:	bf04      	itt	eq
 800da90:	091b      	lsreq	r3, r3, #4
 800da92:	3004      	addeq	r0, #4
 800da94:	079a      	lsls	r2, r3, #30
 800da96:	bf04      	itt	eq
 800da98:	089b      	lsreq	r3, r3, #2
 800da9a:	3002      	addeq	r0, #2
 800da9c:	07da      	lsls	r2, r3, #31
 800da9e:	d403      	bmi.n	800daa8 <__lo0bits+0x50>
 800daa0:	085b      	lsrs	r3, r3, #1
 800daa2:	f100 0001 	add.w	r0, r0, #1
 800daa6:	d005      	beq.n	800dab4 <__lo0bits+0x5c>
 800daa8:	600b      	str	r3, [r1, #0]
 800daaa:	4770      	bx	lr
 800daac:	4610      	mov	r0, r2
 800daae:	e7e8      	b.n	800da82 <__lo0bits+0x2a>
 800dab0:	2000      	movs	r0, #0
 800dab2:	4770      	bx	lr
 800dab4:	2020      	movs	r0, #32
 800dab6:	4770      	bx	lr

0800dab8 <__i2b>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	460c      	mov	r4, r1
 800dabc:	2101      	movs	r1, #1
 800dabe:	f7ff feb5 	bl	800d82c <_Balloc>
 800dac2:	4602      	mov	r2, r0
 800dac4:	b928      	cbnz	r0, 800dad2 <__i2b+0x1a>
 800dac6:	4b05      	ldr	r3, [pc, #20]	; (800dadc <__i2b+0x24>)
 800dac8:	4805      	ldr	r0, [pc, #20]	; (800dae0 <__i2b+0x28>)
 800daca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dace:	f7fc f9c7 	bl	8009e60 <__assert_func>
 800dad2:	2301      	movs	r3, #1
 800dad4:	6144      	str	r4, [r0, #20]
 800dad6:	6103      	str	r3, [r0, #16]
 800dad8:	bd10      	pop	{r4, pc}
 800dada:	bf00      	nop
 800dadc:	08040ac4 	.word	0x08040ac4
 800dae0:	08040bb8 	.word	0x08040bb8

0800dae4 <__multiply>:
 800dae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae8:	4614      	mov	r4, r2
 800daea:	690a      	ldr	r2, [r1, #16]
 800daec:	6923      	ldr	r3, [r4, #16]
 800daee:	429a      	cmp	r2, r3
 800daf0:	bfb8      	it	lt
 800daf2:	460b      	movlt	r3, r1
 800daf4:	460d      	mov	r5, r1
 800daf6:	bfbc      	itt	lt
 800daf8:	4625      	movlt	r5, r4
 800dafa:	461c      	movlt	r4, r3
 800dafc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800db00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800db04:	68ab      	ldr	r3, [r5, #8]
 800db06:	6869      	ldr	r1, [r5, #4]
 800db08:	eb0a 0709 	add.w	r7, sl, r9
 800db0c:	42bb      	cmp	r3, r7
 800db0e:	b085      	sub	sp, #20
 800db10:	bfb8      	it	lt
 800db12:	3101      	addlt	r1, #1
 800db14:	f7ff fe8a 	bl	800d82c <_Balloc>
 800db18:	b930      	cbnz	r0, 800db28 <__multiply+0x44>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4b42      	ldr	r3, [pc, #264]	; (800dc28 <__multiply+0x144>)
 800db1e:	4843      	ldr	r0, [pc, #268]	; (800dc2c <__multiply+0x148>)
 800db20:	f240 115d 	movw	r1, #349	; 0x15d
 800db24:	f7fc f99c 	bl	8009e60 <__assert_func>
 800db28:	f100 0614 	add.w	r6, r0, #20
 800db2c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800db30:	4633      	mov	r3, r6
 800db32:	2200      	movs	r2, #0
 800db34:	4543      	cmp	r3, r8
 800db36:	d31e      	bcc.n	800db76 <__multiply+0x92>
 800db38:	f105 0c14 	add.w	ip, r5, #20
 800db3c:	f104 0314 	add.w	r3, r4, #20
 800db40:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800db44:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800db48:	9202      	str	r2, [sp, #8]
 800db4a:	ebac 0205 	sub.w	r2, ip, r5
 800db4e:	3a15      	subs	r2, #21
 800db50:	f022 0203 	bic.w	r2, r2, #3
 800db54:	3204      	adds	r2, #4
 800db56:	f105 0115 	add.w	r1, r5, #21
 800db5a:	458c      	cmp	ip, r1
 800db5c:	bf38      	it	cc
 800db5e:	2204      	movcc	r2, #4
 800db60:	9201      	str	r2, [sp, #4]
 800db62:	9a02      	ldr	r2, [sp, #8]
 800db64:	9303      	str	r3, [sp, #12]
 800db66:	429a      	cmp	r2, r3
 800db68:	d808      	bhi.n	800db7c <__multiply+0x98>
 800db6a:	2f00      	cmp	r7, #0
 800db6c:	dc55      	bgt.n	800dc1a <__multiply+0x136>
 800db6e:	6107      	str	r7, [r0, #16]
 800db70:	b005      	add	sp, #20
 800db72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db76:	f843 2b04 	str.w	r2, [r3], #4
 800db7a:	e7db      	b.n	800db34 <__multiply+0x50>
 800db7c:	f8b3 a000 	ldrh.w	sl, [r3]
 800db80:	f1ba 0f00 	cmp.w	sl, #0
 800db84:	d020      	beq.n	800dbc8 <__multiply+0xe4>
 800db86:	f105 0e14 	add.w	lr, r5, #20
 800db8a:	46b1      	mov	r9, r6
 800db8c:	2200      	movs	r2, #0
 800db8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800db92:	f8d9 b000 	ldr.w	fp, [r9]
 800db96:	b2a1      	uxth	r1, r4
 800db98:	fa1f fb8b 	uxth.w	fp, fp
 800db9c:	fb0a b101 	mla	r1, sl, r1, fp
 800dba0:	4411      	add	r1, r2
 800dba2:	f8d9 2000 	ldr.w	r2, [r9]
 800dba6:	0c24      	lsrs	r4, r4, #16
 800dba8:	0c12      	lsrs	r2, r2, #16
 800dbaa:	fb0a 2404 	mla	r4, sl, r4, r2
 800dbae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800dbb2:	b289      	uxth	r1, r1
 800dbb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dbb8:	45f4      	cmp	ip, lr
 800dbba:	f849 1b04 	str.w	r1, [r9], #4
 800dbbe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800dbc2:	d8e4      	bhi.n	800db8e <__multiply+0xaa>
 800dbc4:	9901      	ldr	r1, [sp, #4]
 800dbc6:	5072      	str	r2, [r6, r1]
 800dbc8:	9a03      	ldr	r2, [sp, #12]
 800dbca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbce:	3304      	adds	r3, #4
 800dbd0:	f1b9 0f00 	cmp.w	r9, #0
 800dbd4:	d01f      	beq.n	800dc16 <__multiply+0x132>
 800dbd6:	6834      	ldr	r4, [r6, #0]
 800dbd8:	f105 0114 	add.w	r1, r5, #20
 800dbdc:	46b6      	mov	lr, r6
 800dbde:	f04f 0a00 	mov.w	sl, #0
 800dbe2:	880a      	ldrh	r2, [r1, #0]
 800dbe4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800dbe8:	fb09 b202 	mla	r2, r9, r2, fp
 800dbec:	4492      	add	sl, r2
 800dbee:	b2a4      	uxth	r4, r4
 800dbf0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dbf4:	f84e 4b04 	str.w	r4, [lr], #4
 800dbf8:	f851 4b04 	ldr.w	r4, [r1], #4
 800dbfc:	f8be 2000 	ldrh.w	r2, [lr]
 800dc00:	0c24      	lsrs	r4, r4, #16
 800dc02:	fb09 2404 	mla	r4, r9, r4, r2
 800dc06:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dc0a:	458c      	cmp	ip, r1
 800dc0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dc10:	d8e7      	bhi.n	800dbe2 <__multiply+0xfe>
 800dc12:	9a01      	ldr	r2, [sp, #4]
 800dc14:	50b4      	str	r4, [r6, r2]
 800dc16:	3604      	adds	r6, #4
 800dc18:	e7a3      	b.n	800db62 <__multiply+0x7e>
 800dc1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1a5      	bne.n	800db6e <__multiply+0x8a>
 800dc22:	3f01      	subs	r7, #1
 800dc24:	e7a1      	b.n	800db6a <__multiply+0x86>
 800dc26:	bf00      	nop
 800dc28:	08040ac4 	.word	0x08040ac4
 800dc2c:	08040bb8 	.word	0x08040bb8

0800dc30 <__pow5mult>:
 800dc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc34:	4615      	mov	r5, r2
 800dc36:	f012 0203 	ands.w	r2, r2, #3
 800dc3a:	4606      	mov	r6, r0
 800dc3c:	460f      	mov	r7, r1
 800dc3e:	d007      	beq.n	800dc50 <__pow5mult+0x20>
 800dc40:	4c25      	ldr	r4, [pc, #148]	; (800dcd8 <__pow5mult+0xa8>)
 800dc42:	3a01      	subs	r2, #1
 800dc44:	2300      	movs	r3, #0
 800dc46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc4a:	f7ff fe51 	bl	800d8f0 <__multadd>
 800dc4e:	4607      	mov	r7, r0
 800dc50:	10ad      	asrs	r5, r5, #2
 800dc52:	d03d      	beq.n	800dcd0 <__pow5mult+0xa0>
 800dc54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dc56:	b97c      	cbnz	r4, 800dc78 <__pow5mult+0x48>
 800dc58:	2010      	movs	r0, #16
 800dc5a:	f7fc f95b 	bl	8009f14 <malloc>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	6270      	str	r0, [r6, #36]	; 0x24
 800dc62:	b928      	cbnz	r0, 800dc70 <__pow5mult+0x40>
 800dc64:	4b1d      	ldr	r3, [pc, #116]	; (800dcdc <__pow5mult+0xac>)
 800dc66:	481e      	ldr	r0, [pc, #120]	; (800dce0 <__pow5mult+0xb0>)
 800dc68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dc6c:	f7fc f8f8 	bl	8009e60 <__assert_func>
 800dc70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc74:	6004      	str	r4, [r0, #0]
 800dc76:	60c4      	str	r4, [r0, #12]
 800dc78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc80:	b94c      	cbnz	r4, 800dc96 <__pow5mult+0x66>
 800dc82:	f240 2171 	movw	r1, #625	; 0x271
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7ff ff16 	bl	800dab8 <__i2b>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc92:	4604      	mov	r4, r0
 800dc94:	6003      	str	r3, [r0, #0]
 800dc96:	f04f 0900 	mov.w	r9, #0
 800dc9a:	07eb      	lsls	r3, r5, #31
 800dc9c:	d50a      	bpl.n	800dcb4 <__pow5mult+0x84>
 800dc9e:	4639      	mov	r1, r7
 800dca0:	4622      	mov	r2, r4
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7ff ff1e 	bl	800dae4 <__multiply>
 800dca8:	4639      	mov	r1, r7
 800dcaa:	4680      	mov	r8, r0
 800dcac:	4630      	mov	r0, r6
 800dcae:	f7ff fdfd 	bl	800d8ac <_Bfree>
 800dcb2:	4647      	mov	r7, r8
 800dcb4:	106d      	asrs	r5, r5, #1
 800dcb6:	d00b      	beq.n	800dcd0 <__pow5mult+0xa0>
 800dcb8:	6820      	ldr	r0, [r4, #0]
 800dcba:	b938      	cbnz	r0, 800dccc <__pow5mult+0x9c>
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f7ff ff0f 	bl	800dae4 <__multiply>
 800dcc6:	6020      	str	r0, [r4, #0]
 800dcc8:	f8c0 9000 	str.w	r9, [r0]
 800dccc:	4604      	mov	r4, r0
 800dcce:	e7e4      	b.n	800dc9a <__pow5mult+0x6a>
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcd6:	bf00      	nop
 800dcd8:	08040d08 	.word	0x08040d08
 800dcdc:	08040a4e 	.word	0x08040a4e
 800dce0:	08040bb8 	.word	0x08040bb8

0800dce4 <__lshift>:
 800dce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce8:	460c      	mov	r4, r1
 800dcea:	6849      	ldr	r1, [r1, #4]
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcf2:	68a3      	ldr	r3, [r4, #8]
 800dcf4:	4607      	mov	r7, r0
 800dcf6:	4691      	mov	r9, r2
 800dcf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dcfc:	f108 0601 	add.w	r6, r8, #1
 800dd00:	42b3      	cmp	r3, r6
 800dd02:	db0b      	blt.n	800dd1c <__lshift+0x38>
 800dd04:	4638      	mov	r0, r7
 800dd06:	f7ff fd91 	bl	800d82c <_Balloc>
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	b948      	cbnz	r0, 800dd22 <__lshift+0x3e>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	4b28      	ldr	r3, [pc, #160]	; (800ddb4 <__lshift+0xd0>)
 800dd12:	4829      	ldr	r0, [pc, #164]	; (800ddb8 <__lshift+0xd4>)
 800dd14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dd18:	f7fc f8a2 	bl	8009e60 <__assert_func>
 800dd1c:	3101      	adds	r1, #1
 800dd1e:	005b      	lsls	r3, r3, #1
 800dd20:	e7ee      	b.n	800dd00 <__lshift+0x1c>
 800dd22:	2300      	movs	r3, #0
 800dd24:	f100 0114 	add.w	r1, r0, #20
 800dd28:	f100 0210 	add.w	r2, r0, #16
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	4553      	cmp	r3, sl
 800dd30:	db33      	blt.n	800dd9a <__lshift+0xb6>
 800dd32:	6920      	ldr	r0, [r4, #16]
 800dd34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd38:	f104 0314 	add.w	r3, r4, #20
 800dd3c:	f019 091f 	ands.w	r9, r9, #31
 800dd40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd48:	d02b      	beq.n	800dda2 <__lshift+0xbe>
 800dd4a:	f1c9 0e20 	rsb	lr, r9, #32
 800dd4e:	468a      	mov	sl, r1
 800dd50:	2200      	movs	r2, #0
 800dd52:	6818      	ldr	r0, [r3, #0]
 800dd54:	fa00 f009 	lsl.w	r0, r0, r9
 800dd58:	4302      	orrs	r2, r0
 800dd5a:	f84a 2b04 	str.w	r2, [sl], #4
 800dd5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd62:	459c      	cmp	ip, r3
 800dd64:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd68:	d8f3      	bhi.n	800dd52 <__lshift+0x6e>
 800dd6a:	ebac 0304 	sub.w	r3, ip, r4
 800dd6e:	3b15      	subs	r3, #21
 800dd70:	f023 0303 	bic.w	r3, r3, #3
 800dd74:	3304      	adds	r3, #4
 800dd76:	f104 0015 	add.w	r0, r4, #21
 800dd7a:	4584      	cmp	ip, r0
 800dd7c:	bf38      	it	cc
 800dd7e:	2304      	movcc	r3, #4
 800dd80:	50ca      	str	r2, [r1, r3]
 800dd82:	b10a      	cbz	r2, 800dd88 <__lshift+0xa4>
 800dd84:	f108 0602 	add.w	r6, r8, #2
 800dd88:	3e01      	subs	r6, #1
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	612e      	str	r6, [r5, #16]
 800dd8e:	4621      	mov	r1, r4
 800dd90:	f7ff fd8c 	bl	800d8ac <_Bfree>
 800dd94:	4628      	mov	r0, r5
 800dd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd9e:	3301      	adds	r3, #1
 800dda0:	e7c5      	b.n	800dd2e <__lshift+0x4a>
 800dda2:	3904      	subs	r1, #4
 800dda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dda8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddac:	459c      	cmp	ip, r3
 800ddae:	d8f9      	bhi.n	800dda4 <__lshift+0xc0>
 800ddb0:	e7ea      	b.n	800dd88 <__lshift+0xa4>
 800ddb2:	bf00      	nop
 800ddb4:	08040ac4 	.word	0x08040ac4
 800ddb8:	08040bb8 	.word	0x08040bb8

0800ddbc <__mcmp>:
 800ddbc:	b530      	push	{r4, r5, lr}
 800ddbe:	6902      	ldr	r2, [r0, #16]
 800ddc0:	690c      	ldr	r4, [r1, #16]
 800ddc2:	1b12      	subs	r2, r2, r4
 800ddc4:	d10e      	bne.n	800dde4 <__mcmp+0x28>
 800ddc6:	f100 0314 	add.w	r3, r0, #20
 800ddca:	3114      	adds	r1, #20
 800ddcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ddd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ddd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dddc:	42a5      	cmp	r5, r4
 800ddde:	d003      	beq.n	800dde8 <__mcmp+0x2c>
 800dde0:	d305      	bcc.n	800ddee <__mcmp+0x32>
 800dde2:	2201      	movs	r2, #1
 800dde4:	4610      	mov	r0, r2
 800dde6:	bd30      	pop	{r4, r5, pc}
 800dde8:	4283      	cmp	r3, r0
 800ddea:	d3f3      	bcc.n	800ddd4 <__mcmp+0x18>
 800ddec:	e7fa      	b.n	800dde4 <__mcmp+0x28>
 800ddee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddf2:	e7f7      	b.n	800dde4 <__mcmp+0x28>

0800ddf4 <__mdiff>:
 800ddf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	4606      	mov	r6, r0
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	4620      	mov	r0, r4
 800de00:	4617      	mov	r7, r2
 800de02:	f7ff ffdb 	bl	800ddbc <__mcmp>
 800de06:	1e05      	subs	r5, r0, #0
 800de08:	d110      	bne.n	800de2c <__mdiff+0x38>
 800de0a:	4629      	mov	r1, r5
 800de0c:	4630      	mov	r0, r6
 800de0e:	f7ff fd0d 	bl	800d82c <_Balloc>
 800de12:	b930      	cbnz	r0, 800de22 <__mdiff+0x2e>
 800de14:	4b39      	ldr	r3, [pc, #228]	; (800defc <__mdiff+0x108>)
 800de16:	4602      	mov	r2, r0
 800de18:	f240 2132 	movw	r1, #562	; 0x232
 800de1c:	4838      	ldr	r0, [pc, #224]	; (800df00 <__mdiff+0x10c>)
 800de1e:	f7fc f81f 	bl	8009e60 <__assert_func>
 800de22:	2301      	movs	r3, #1
 800de24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2c:	bfa4      	itt	ge
 800de2e:	463b      	movge	r3, r7
 800de30:	4627      	movge	r7, r4
 800de32:	4630      	mov	r0, r6
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	bfa6      	itte	ge
 800de38:	461c      	movge	r4, r3
 800de3a:	2500      	movge	r5, #0
 800de3c:	2501      	movlt	r5, #1
 800de3e:	f7ff fcf5 	bl	800d82c <_Balloc>
 800de42:	b920      	cbnz	r0, 800de4e <__mdiff+0x5a>
 800de44:	4b2d      	ldr	r3, [pc, #180]	; (800defc <__mdiff+0x108>)
 800de46:	4602      	mov	r2, r0
 800de48:	f44f 7110 	mov.w	r1, #576	; 0x240
 800de4c:	e7e6      	b.n	800de1c <__mdiff+0x28>
 800de4e:	693e      	ldr	r6, [r7, #16]
 800de50:	60c5      	str	r5, [r0, #12]
 800de52:	6925      	ldr	r5, [r4, #16]
 800de54:	f107 0114 	add.w	r1, r7, #20
 800de58:	f104 0914 	add.w	r9, r4, #20
 800de5c:	f100 0e14 	add.w	lr, r0, #20
 800de60:	f107 0210 	add.w	r2, r7, #16
 800de64:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800de68:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800de6c:	46f2      	mov	sl, lr
 800de6e:	2700      	movs	r7, #0
 800de70:	f859 3b04 	ldr.w	r3, [r9], #4
 800de74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de78:	fa1f f883 	uxth.w	r8, r3
 800de7c:	fa17 f78b 	uxtah	r7, r7, fp
 800de80:	0c1b      	lsrs	r3, r3, #16
 800de82:	eba7 0808 	sub.w	r8, r7, r8
 800de86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de8e:	fa1f f888 	uxth.w	r8, r8
 800de92:	141f      	asrs	r7, r3, #16
 800de94:	454d      	cmp	r5, r9
 800de96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de9a:	f84a 3b04 	str.w	r3, [sl], #4
 800de9e:	d8e7      	bhi.n	800de70 <__mdiff+0x7c>
 800dea0:	1b2b      	subs	r3, r5, r4
 800dea2:	3b15      	subs	r3, #21
 800dea4:	f023 0303 	bic.w	r3, r3, #3
 800dea8:	3304      	adds	r3, #4
 800deaa:	3415      	adds	r4, #21
 800deac:	42a5      	cmp	r5, r4
 800deae:	bf38      	it	cc
 800deb0:	2304      	movcc	r3, #4
 800deb2:	4419      	add	r1, r3
 800deb4:	4473      	add	r3, lr
 800deb6:	469e      	mov	lr, r3
 800deb8:	460d      	mov	r5, r1
 800deba:	4565      	cmp	r5, ip
 800debc:	d30e      	bcc.n	800dedc <__mdiff+0xe8>
 800debe:	f10c 0203 	add.w	r2, ip, #3
 800dec2:	1a52      	subs	r2, r2, r1
 800dec4:	f022 0203 	bic.w	r2, r2, #3
 800dec8:	3903      	subs	r1, #3
 800deca:	458c      	cmp	ip, r1
 800decc:	bf38      	it	cc
 800dece:	2200      	movcc	r2, #0
 800ded0:	441a      	add	r2, r3
 800ded2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ded6:	b17b      	cbz	r3, 800def8 <__mdiff+0x104>
 800ded8:	6106      	str	r6, [r0, #16]
 800deda:	e7a5      	b.n	800de28 <__mdiff+0x34>
 800dedc:	f855 8b04 	ldr.w	r8, [r5], #4
 800dee0:	fa17 f488 	uxtah	r4, r7, r8
 800dee4:	1422      	asrs	r2, r4, #16
 800dee6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800deea:	b2a4      	uxth	r4, r4
 800deec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800def0:	f84e 4b04 	str.w	r4, [lr], #4
 800def4:	1417      	asrs	r7, r2, #16
 800def6:	e7e0      	b.n	800deba <__mdiff+0xc6>
 800def8:	3e01      	subs	r6, #1
 800defa:	e7ea      	b.n	800ded2 <__mdiff+0xde>
 800defc:	08040ac4 	.word	0x08040ac4
 800df00:	08040bb8 	.word	0x08040bb8

0800df04 <__ulp>:
 800df04:	b082      	sub	sp, #8
 800df06:	ed8d 0b00 	vstr	d0, [sp]
 800df0a:	9b01      	ldr	r3, [sp, #4]
 800df0c:	4912      	ldr	r1, [pc, #72]	; (800df58 <__ulp+0x54>)
 800df0e:	4019      	ands	r1, r3
 800df10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800df14:	2900      	cmp	r1, #0
 800df16:	dd05      	ble.n	800df24 <__ulp+0x20>
 800df18:	2200      	movs	r2, #0
 800df1a:	460b      	mov	r3, r1
 800df1c:	ec43 2b10 	vmov	d0, r2, r3
 800df20:	b002      	add	sp, #8
 800df22:	4770      	bx	lr
 800df24:	4249      	negs	r1, r1
 800df26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800df2a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800df2e:	f04f 0200 	mov.w	r2, #0
 800df32:	f04f 0300 	mov.w	r3, #0
 800df36:	da04      	bge.n	800df42 <__ulp+0x3e>
 800df38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800df3c:	fa41 f300 	asr.w	r3, r1, r0
 800df40:	e7ec      	b.n	800df1c <__ulp+0x18>
 800df42:	f1a0 0114 	sub.w	r1, r0, #20
 800df46:	291e      	cmp	r1, #30
 800df48:	bfda      	itte	le
 800df4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800df4e:	fa20 f101 	lsrle.w	r1, r0, r1
 800df52:	2101      	movgt	r1, #1
 800df54:	460a      	mov	r2, r1
 800df56:	e7e1      	b.n	800df1c <__ulp+0x18>
 800df58:	7ff00000 	.word	0x7ff00000

0800df5c <__b2d>:
 800df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5e:	6905      	ldr	r5, [r0, #16]
 800df60:	f100 0714 	add.w	r7, r0, #20
 800df64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800df68:	1f2e      	subs	r6, r5, #4
 800df6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800df6e:	4620      	mov	r0, r4
 800df70:	f7ff fd52 	bl	800da18 <__hi0bits>
 800df74:	f1c0 0320 	rsb	r3, r0, #32
 800df78:	280a      	cmp	r0, #10
 800df7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dff8 <__b2d+0x9c>
 800df7e:	600b      	str	r3, [r1, #0]
 800df80:	dc14      	bgt.n	800dfac <__b2d+0x50>
 800df82:	f1c0 0e0b 	rsb	lr, r0, #11
 800df86:	fa24 f10e 	lsr.w	r1, r4, lr
 800df8a:	42b7      	cmp	r7, r6
 800df8c:	ea41 030c 	orr.w	r3, r1, ip
 800df90:	bf34      	ite	cc
 800df92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800df96:	2100      	movcs	r1, #0
 800df98:	3015      	adds	r0, #21
 800df9a:	fa04 f000 	lsl.w	r0, r4, r0
 800df9e:	fa21 f10e 	lsr.w	r1, r1, lr
 800dfa2:	ea40 0201 	orr.w	r2, r0, r1
 800dfa6:	ec43 2b10 	vmov	d0, r2, r3
 800dfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfac:	42b7      	cmp	r7, r6
 800dfae:	bf3a      	itte	cc
 800dfb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dfb4:	f1a5 0608 	subcc.w	r6, r5, #8
 800dfb8:	2100      	movcs	r1, #0
 800dfba:	380b      	subs	r0, #11
 800dfbc:	d017      	beq.n	800dfee <__b2d+0x92>
 800dfbe:	f1c0 0c20 	rsb	ip, r0, #32
 800dfc2:	fa04 f500 	lsl.w	r5, r4, r0
 800dfc6:	42be      	cmp	r6, r7
 800dfc8:	fa21 f40c 	lsr.w	r4, r1, ip
 800dfcc:	ea45 0504 	orr.w	r5, r5, r4
 800dfd0:	bf8c      	ite	hi
 800dfd2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dfd6:	2400      	movls	r4, #0
 800dfd8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dfdc:	fa01 f000 	lsl.w	r0, r1, r0
 800dfe0:	fa24 f40c 	lsr.w	r4, r4, ip
 800dfe4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dfe8:	ea40 0204 	orr.w	r2, r0, r4
 800dfec:	e7db      	b.n	800dfa6 <__b2d+0x4a>
 800dfee:	ea44 030c 	orr.w	r3, r4, ip
 800dff2:	460a      	mov	r2, r1
 800dff4:	e7d7      	b.n	800dfa6 <__b2d+0x4a>
 800dff6:	bf00      	nop
 800dff8:	3ff00000 	.word	0x3ff00000

0800dffc <__d2b>:
 800dffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e000:	4689      	mov	r9, r1
 800e002:	2101      	movs	r1, #1
 800e004:	ec57 6b10 	vmov	r6, r7, d0
 800e008:	4690      	mov	r8, r2
 800e00a:	f7ff fc0f 	bl	800d82c <_Balloc>
 800e00e:	4604      	mov	r4, r0
 800e010:	b930      	cbnz	r0, 800e020 <__d2b+0x24>
 800e012:	4602      	mov	r2, r0
 800e014:	4b25      	ldr	r3, [pc, #148]	; (800e0ac <__d2b+0xb0>)
 800e016:	4826      	ldr	r0, [pc, #152]	; (800e0b0 <__d2b+0xb4>)
 800e018:	f240 310a 	movw	r1, #778	; 0x30a
 800e01c:	f7fb ff20 	bl	8009e60 <__assert_func>
 800e020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e028:	bb35      	cbnz	r5, 800e078 <__d2b+0x7c>
 800e02a:	2e00      	cmp	r6, #0
 800e02c:	9301      	str	r3, [sp, #4]
 800e02e:	d028      	beq.n	800e082 <__d2b+0x86>
 800e030:	4668      	mov	r0, sp
 800e032:	9600      	str	r6, [sp, #0]
 800e034:	f7ff fd10 	bl	800da58 <__lo0bits>
 800e038:	9900      	ldr	r1, [sp, #0]
 800e03a:	b300      	cbz	r0, 800e07e <__d2b+0x82>
 800e03c:	9a01      	ldr	r2, [sp, #4]
 800e03e:	f1c0 0320 	rsb	r3, r0, #32
 800e042:	fa02 f303 	lsl.w	r3, r2, r3
 800e046:	430b      	orrs	r3, r1
 800e048:	40c2      	lsrs	r2, r0
 800e04a:	6163      	str	r3, [r4, #20]
 800e04c:	9201      	str	r2, [sp, #4]
 800e04e:	9b01      	ldr	r3, [sp, #4]
 800e050:	61a3      	str	r3, [r4, #24]
 800e052:	2b00      	cmp	r3, #0
 800e054:	bf14      	ite	ne
 800e056:	2202      	movne	r2, #2
 800e058:	2201      	moveq	r2, #1
 800e05a:	6122      	str	r2, [r4, #16]
 800e05c:	b1d5      	cbz	r5, 800e094 <__d2b+0x98>
 800e05e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e062:	4405      	add	r5, r0
 800e064:	f8c9 5000 	str.w	r5, [r9]
 800e068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e06c:	f8c8 0000 	str.w	r0, [r8]
 800e070:	4620      	mov	r0, r4
 800e072:	b003      	add	sp, #12
 800e074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e07c:	e7d5      	b.n	800e02a <__d2b+0x2e>
 800e07e:	6161      	str	r1, [r4, #20]
 800e080:	e7e5      	b.n	800e04e <__d2b+0x52>
 800e082:	a801      	add	r0, sp, #4
 800e084:	f7ff fce8 	bl	800da58 <__lo0bits>
 800e088:	9b01      	ldr	r3, [sp, #4]
 800e08a:	6163      	str	r3, [r4, #20]
 800e08c:	2201      	movs	r2, #1
 800e08e:	6122      	str	r2, [r4, #16]
 800e090:	3020      	adds	r0, #32
 800e092:	e7e3      	b.n	800e05c <__d2b+0x60>
 800e094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e09c:	f8c9 0000 	str.w	r0, [r9]
 800e0a0:	6918      	ldr	r0, [r3, #16]
 800e0a2:	f7ff fcb9 	bl	800da18 <__hi0bits>
 800e0a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0aa:	e7df      	b.n	800e06c <__d2b+0x70>
 800e0ac:	08040ac4 	.word	0x08040ac4
 800e0b0:	08040bb8 	.word	0x08040bb8

0800e0b4 <__ratio>:
 800e0b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b8:	4688      	mov	r8, r1
 800e0ba:	4669      	mov	r1, sp
 800e0bc:	4681      	mov	r9, r0
 800e0be:	f7ff ff4d 	bl	800df5c <__b2d>
 800e0c2:	a901      	add	r1, sp, #4
 800e0c4:	4640      	mov	r0, r8
 800e0c6:	ec55 4b10 	vmov	r4, r5, d0
 800e0ca:	f7ff ff47 	bl	800df5c <__b2d>
 800e0ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e0d6:	eba3 0c02 	sub.w	ip, r3, r2
 800e0da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e0de:	1a9b      	subs	r3, r3, r2
 800e0e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e0e4:	ec51 0b10 	vmov	r0, r1, d0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	bfd6      	itet	le
 800e0ec:	460a      	movle	r2, r1
 800e0ee:	462a      	movgt	r2, r5
 800e0f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0f4:	468b      	mov	fp, r1
 800e0f6:	462f      	mov	r7, r5
 800e0f8:	bfd4      	ite	le
 800e0fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e0fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e102:	4620      	mov	r0, r4
 800e104:	ee10 2a10 	vmov	r2, s0
 800e108:	465b      	mov	r3, fp
 800e10a:	4639      	mov	r1, r7
 800e10c:	f7f2 fb9e 	bl	800084c <__aeabi_ddiv>
 800e110:	ec41 0b10 	vmov	d0, r0, r1
 800e114:	b003      	add	sp, #12
 800e116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e11a <__copybits>:
 800e11a:	3901      	subs	r1, #1
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	1149      	asrs	r1, r1, #5
 800e120:	6914      	ldr	r4, [r2, #16]
 800e122:	3101      	adds	r1, #1
 800e124:	f102 0314 	add.w	r3, r2, #20
 800e128:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e12c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e130:	1f05      	subs	r5, r0, #4
 800e132:	42a3      	cmp	r3, r4
 800e134:	d30c      	bcc.n	800e150 <__copybits+0x36>
 800e136:	1aa3      	subs	r3, r4, r2
 800e138:	3b11      	subs	r3, #17
 800e13a:	f023 0303 	bic.w	r3, r3, #3
 800e13e:	3211      	adds	r2, #17
 800e140:	42a2      	cmp	r2, r4
 800e142:	bf88      	it	hi
 800e144:	2300      	movhi	r3, #0
 800e146:	4418      	add	r0, r3
 800e148:	2300      	movs	r3, #0
 800e14a:	4288      	cmp	r0, r1
 800e14c:	d305      	bcc.n	800e15a <__copybits+0x40>
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	f853 6b04 	ldr.w	r6, [r3], #4
 800e154:	f845 6f04 	str.w	r6, [r5, #4]!
 800e158:	e7eb      	b.n	800e132 <__copybits+0x18>
 800e15a:	f840 3b04 	str.w	r3, [r0], #4
 800e15e:	e7f4      	b.n	800e14a <__copybits+0x30>

0800e160 <__any_on>:
 800e160:	f100 0214 	add.w	r2, r0, #20
 800e164:	6900      	ldr	r0, [r0, #16]
 800e166:	114b      	asrs	r3, r1, #5
 800e168:	4298      	cmp	r0, r3
 800e16a:	b510      	push	{r4, lr}
 800e16c:	db11      	blt.n	800e192 <__any_on+0x32>
 800e16e:	dd0a      	ble.n	800e186 <__any_on+0x26>
 800e170:	f011 011f 	ands.w	r1, r1, #31
 800e174:	d007      	beq.n	800e186 <__any_on+0x26>
 800e176:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e17a:	fa24 f001 	lsr.w	r0, r4, r1
 800e17e:	fa00 f101 	lsl.w	r1, r0, r1
 800e182:	428c      	cmp	r4, r1
 800e184:	d10b      	bne.n	800e19e <__any_on+0x3e>
 800e186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d803      	bhi.n	800e196 <__any_on+0x36>
 800e18e:	2000      	movs	r0, #0
 800e190:	bd10      	pop	{r4, pc}
 800e192:	4603      	mov	r3, r0
 800e194:	e7f7      	b.n	800e186 <__any_on+0x26>
 800e196:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e19a:	2900      	cmp	r1, #0
 800e19c:	d0f5      	beq.n	800e18a <__any_on+0x2a>
 800e19e:	2001      	movs	r0, #1
 800e1a0:	e7f6      	b.n	800e190 <__any_on+0x30>

0800e1a2 <_calloc_r>:
 800e1a2:	b513      	push	{r0, r1, r4, lr}
 800e1a4:	434a      	muls	r2, r1
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	9201      	str	r2, [sp, #4]
 800e1aa:	f7fb ff21 	bl	8009ff0 <_malloc_r>
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	b118      	cbz	r0, 800e1ba <_calloc_r+0x18>
 800e1b2:	9a01      	ldr	r2, [sp, #4]
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	f7fb fec3 	bl	8009f40 <memset>
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	b002      	add	sp, #8
 800e1be:	bd10      	pop	{r4, pc}

0800e1c0 <_realloc_r>:
 800e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c2:	4607      	mov	r7, r0
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	460e      	mov	r6, r1
 800e1c8:	b921      	cbnz	r1, 800e1d4 <_realloc_r+0x14>
 800e1ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e1ce:	4611      	mov	r1, r2
 800e1d0:	f7fb bf0e 	b.w	8009ff0 <_malloc_r>
 800e1d4:	b922      	cbnz	r2, 800e1e0 <_realloc_r+0x20>
 800e1d6:	f7fb febb 	bl	8009f50 <_free_r>
 800e1da:	4625      	mov	r5, r4
 800e1dc:	4628      	mov	r0, r5
 800e1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1e0:	f000 fa76 	bl	800e6d0 <_malloc_usable_size_r>
 800e1e4:	42a0      	cmp	r0, r4
 800e1e6:	d20f      	bcs.n	800e208 <_realloc_r+0x48>
 800e1e8:	4621      	mov	r1, r4
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f7fb ff00 	bl	8009ff0 <_malloc_r>
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d0f2      	beq.n	800e1dc <_realloc_r+0x1c>
 800e1f6:	4631      	mov	r1, r6
 800e1f8:	4622      	mov	r2, r4
 800e1fa:	f7fb fe93 	bl	8009f24 <memcpy>
 800e1fe:	4631      	mov	r1, r6
 800e200:	4638      	mov	r0, r7
 800e202:	f7fb fea5 	bl	8009f50 <_free_r>
 800e206:	e7e9      	b.n	800e1dc <_realloc_r+0x1c>
 800e208:	4635      	mov	r5, r6
 800e20a:	e7e7      	b.n	800e1dc <_realloc_r+0x1c>

0800e20c <__ssputs_r>:
 800e20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e210:	688e      	ldr	r6, [r1, #8]
 800e212:	429e      	cmp	r6, r3
 800e214:	4682      	mov	sl, r0
 800e216:	460c      	mov	r4, r1
 800e218:	4690      	mov	r8, r2
 800e21a:	461f      	mov	r7, r3
 800e21c:	d838      	bhi.n	800e290 <__ssputs_r+0x84>
 800e21e:	898a      	ldrh	r2, [r1, #12]
 800e220:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e224:	d032      	beq.n	800e28c <__ssputs_r+0x80>
 800e226:	6825      	ldr	r5, [r4, #0]
 800e228:	6909      	ldr	r1, [r1, #16]
 800e22a:	eba5 0901 	sub.w	r9, r5, r1
 800e22e:	6965      	ldr	r5, [r4, #20]
 800e230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e234:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e238:	3301      	adds	r3, #1
 800e23a:	444b      	add	r3, r9
 800e23c:	106d      	asrs	r5, r5, #1
 800e23e:	429d      	cmp	r5, r3
 800e240:	bf38      	it	cc
 800e242:	461d      	movcc	r5, r3
 800e244:	0553      	lsls	r3, r2, #21
 800e246:	d531      	bpl.n	800e2ac <__ssputs_r+0xa0>
 800e248:	4629      	mov	r1, r5
 800e24a:	f7fb fed1 	bl	8009ff0 <_malloc_r>
 800e24e:	4606      	mov	r6, r0
 800e250:	b950      	cbnz	r0, 800e268 <__ssputs_r+0x5c>
 800e252:	230c      	movs	r3, #12
 800e254:	f8ca 3000 	str.w	r3, [sl]
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e25e:	81a3      	strh	r3, [r4, #12]
 800e260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e268:	6921      	ldr	r1, [r4, #16]
 800e26a:	464a      	mov	r2, r9
 800e26c:	f7fb fe5a 	bl	8009f24 <memcpy>
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e27a:	81a3      	strh	r3, [r4, #12]
 800e27c:	6126      	str	r6, [r4, #16]
 800e27e:	6165      	str	r5, [r4, #20]
 800e280:	444e      	add	r6, r9
 800e282:	eba5 0509 	sub.w	r5, r5, r9
 800e286:	6026      	str	r6, [r4, #0]
 800e288:	60a5      	str	r5, [r4, #8]
 800e28a:	463e      	mov	r6, r7
 800e28c:	42be      	cmp	r6, r7
 800e28e:	d900      	bls.n	800e292 <__ssputs_r+0x86>
 800e290:	463e      	mov	r6, r7
 800e292:	4632      	mov	r2, r6
 800e294:	6820      	ldr	r0, [r4, #0]
 800e296:	4641      	mov	r1, r8
 800e298:	f7ff faa2 	bl	800d7e0 <memmove>
 800e29c:	68a3      	ldr	r3, [r4, #8]
 800e29e:	6822      	ldr	r2, [r4, #0]
 800e2a0:	1b9b      	subs	r3, r3, r6
 800e2a2:	4432      	add	r2, r6
 800e2a4:	60a3      	str	r3, [r4, #8]
 800e2a6:	6022      	str	r2, [r4, #0]
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	e7db      	b.n	800e264 <__ssputs_r+0x58>
 800e2ac:	462a      	mov	r2, r5
 800e2ae:	f7ff ff87 	bl	800e1c0 <_realloc_r>
 800e2b2:	4606      	mov	r6, r0
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d1e1      	bne.n	800e27c <__ssputs_r+0x70>
 800e2b8:	6921      	ldr	r1, [r4, #16]
 800e2ba:	4650      	mov	r0, sl
 800e2bc:	f7fb fe48 	bl	8009f50 <_free_r>
 800e2c0:	e7c7      	b.n	800e252 <__ssputs_r+0x46>
	...

0800e2c4 <_svfiprintf_r>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	4698      	mov	r8, r3
 800e2ca:	898b      	ldrh	r3, [r1, #12]
 800e2cc:	061b      	lsls	r3, r3, #24
 800e2ce:	b09d      	sub	sp, #116	; 0x74
 800e2d0:	4607      	mov	r7, r0
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	4614      	mov	r4, r2
 800e2d6:	d50e      	bpl.n	800e2f6 <_svfiprintf_r+0x32>
 800e2d8:	690b      	ldr	r3, [r1, #16]
 800e2da:	b963      	cbnz	r3, 800e2f6 <_svfiprintf_r+0x32>
 800e2dc:	2140      	movs	r1, #64	; 0x40
 800e2de:	f7fb fe87 	bl	8009ff0 <_malloc_r>
 800e2e2:	6028      	str	r0, [r5, #0]
 800e2e4:	6128      	str	r0, [r5, #16]
 800e2e6:	b920      	cbnz	r0, 800e2f2 <_svfiprintf_r+0x2e>
 800e2e8:	230c      	movs	r3, #12
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2f0:	e0d1      	b.n	800e496 <_svfiprintf_r+0x1d2>
 800e2f2:	2340      	movs	r3, #64	; 0x40
 800e2f4:	616b      	str	r3, [r5, #20]
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2fa:	2320      	movs	r3, #32
 800e2fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e300:	f8cd 800c 	str.w	r8, [sp, #12]
 800e304:	2330      	movs	r3, #48	; 0x30
 800e306:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4b0 <_svfiprintf_r+0x1ec>
 800e30a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e30e:	f04f 0901 	mov.w	r9, #1
 800e312:	4623      	mov	r3, r4
 800e314:	469a      	mov	sl, r3
 800e316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e31a:	b10a      	cbz	r2, 800e320 <_svfiprintf_r+0x5c>
 800e31c:	2a25      	cmp	r2, #37	; 0x25
 800e31e:	d1f9      	bne.n	800e314 <_svfiprintf_r+0x50>
 800e320:	ebba 0b04 	subs.w	fp, sl, r4
 800e324:	d00b      	beq.n	800e33e <_svfiprintf_r+0x7a>
 800e326:	465b      	mov	r3, fp
 800e328:	4622      	mov	r2, r4
 800e32a:	4629      	mov	r1, r5
 800e32c:	4638      	mov	r0, r7
 800e32e:	f7ff ff6d 	bl	800e20c <__ssputs_r>
 800e332:	3001      	adds	r0, #1
 800e334:	f000 80aa 	beq.w	800e48c <_svfiprintf_r+0x1c8>
 800e338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e33a:	445a      	add	r2, fp
 800e33c:	9209      	str	r2, [sp, #36]	; 0x24
 800e33e:	f89a 3000 	ldrb.w	r3, [sl]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80a2 	beq.w	800e48c <_svfiprintf_r+0x1c8>
 800e348:	2300      	movs	r3, #0
 800e34a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e34e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e352:	f10a 0a01 	add.w	sl, sl, #1
 800e356:	9304      	str	r3, [sp, #16]
 800e358:	9307      	str	r3, [sp, #28]
 800e35a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e35e:	931a      	str	r3, [sp, #104]	; 0x68
 800e360:	4654      	mov	r4, sl
 800e362:	2205      	movs	r2, #5
 800e364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e368:	4851      	ldr	r0, [pc, #324]	; (800e4b0 <_svfiprintf_r+0x1ec>)
 800e36a:	f7f1 ff39 	bl	80001e0 <memchr>
 800e36e:	9a04      	ldr	r2, [sp, #16]
 800e370:	b9d8      	cbnz	r0, 800e3aa <_svfiprintf_r+0xe6>
 800e372:	06d0      	lsls	r0, r2, #27
 800e374:	bf44      	itt	mi
 800e376:	2320      	movmi	r3, #32
 800e378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e37c:	0711      	lsls	r1, r2, #28
 800e37e:	bf44      	itt	mi
 800e380:	232b      	movmi	r3, #43	; 0x2b
 800e382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e386:	f89a 3000 	ldrb.w	r3, [sl]
 800e38a:	2b2a      	cmp	r3, #42	; 0x2a
 800e38c:	d015      	beq.n	800e3ba <_svfiprintf_r+0xf6>
 800e38e:	9a07      	ldr	r2, [sp, #28]
 800e390:	4654      	mov	r4, sl
 800e392:	2000      	movs	r0, #0
 800e394:	f04f 0c0a 	mov.w	ip, #10
 800e398:	4621      	mov	r1, r4
 800e39a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e39e:	3b30      	subs	r3, #48	; 0x30
 800e3a0:	2b09      	cmp	r3, #9
 800e3a2:	d94e      	bls.n	800e442 <_svfiprintf_r+0x17e>
 800e3a4:	b1b0      	cbz	r0, 800e3d4 <_svfiprintf_r+0x110>
 800e3a6:	9207      	str	r2, [sp, #28]
 800e3a8:	e014      	b.n	800e3d4 <_svfiprintf_r+0x110>
 800e3aa:	eba0 0308 	sub.w	r3, r0, r8
 800e3ae:	fa09 f303 	lsl.w	r3, r9, r3
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	9304      	str	r3, [sp, #16]
 800e3b6:	46a2      	mov	sl, r4
 800e3b8:	e7d2      	b.n	800e360 <_svfiprintf_r+0x9c>
 800e3ba:	9b03      	ldr	r3, [sp, #12]
 800e3bc:	1d19      	adds	r1, r3, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	9103      	str	r1, [sp, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	bfbb      	ittet	lt
 800e3c6:	425b      	neglt	r3, r3
 800e3c8:	f042 0202 	orrlt.w	r2, r2, #2
 800e3cc:	9307      	strge	r3, [sp, #28]
 800e3ce:	9307      	strlt	r3, [sp, #28]
 800e3d0:	bfb8      	it	lt
 800e3d2:	9204      	strlt	r2, [sp, #16]
 800e3d4:	7823      	ldrb	r3, [r4, #0]
 800e3d6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3d8:	d10c      	bne.n	800e3f4 <_svfiprintf_r+0x130>
 800e3da:	7863      	ldrb	r3, [r4, #1]
 800e3dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e3de:	d135      	bne.n	800e44c <_svfiprintf_r+0x188>
 800e3e0:	9b03      	ldr	r3, [sp, #12]
 800e3e2:	1d1a      	adds	r2, r3, #4
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	9203      	str	r2, [sp, #12]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	bfb8      	it	lt
 800e3ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e3f0:	3402      	adds	r4, #2
 800e3f2:	9305      	str	r3, [sp, #20]
 800e3f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4c0 <_svfiprintf_r+0x1fc>
 800e3f8:	7821      	ldrb	r1, [r4, #0]
 800e3fa:	2203      	movs	r2, #3
 800e3fc:	4650      	mov	r0, sl
 800e3fe:	f7f1 feef 	bl	80001e0 <memchr>
 800e402:	b140      	cbz	r0, 800e416 <_svfiprintf_r+0x152>
 800e404:	2340      	movs	r3, #64	; 0x40
 800e406:	eba0 000a 	sub.w	r0, r0, sl
 800e40a:	fa03 f000 	lsl.w	r0, r3, r0
 800e40e:	9b04      	ldr	r3, [sp, #16]
 800e410:	4303      	orrs	r3, r0
 800e412:	3401      	adds	r4, #1
 800e414:	9304      	str	r3, [sp, #16]
 800e416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41a:	4826      	ldr	r0, [pc, #152]	; (800e4b4 <_svfiprintf_r+0x1f0>)
 800e41c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e420:	2206      	movs	r2, #6
 800e422:	f7f1 fedd 	bl	80001e0 <memchr>
 800e426:	2800      	cmp	r0, #0
 800e428:	d038      	beq.n	800e49c <_svfiprintf_r+0x1d8>
 800e42a:	4b23      	ldr	r3, [pc, #140]	; (800e4b8 <_svfiprintf_r+0x1f4>)
 800e42c:	bb1b      	cbnz	r3, 800e476 <_svfiprintf_r+0x1b2>
 800e42e:	9b03      	ldr	r3, [sp, #12]
 800e430:	3307      	adds	r3, #7
 800e432:	f023 0307 	bic.w	r3, r3, #7
 800e436:	3308      	adds	r3, #8
 800e438:	9303      	str	r3, [sp, #12]
 800e43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43c:	4433      	add	r3, r6
 800e43e:	9309      	str	r3, [sp, #36]	; 0x24
 800e440:	e767      	b.n	800e312 <_svfiprintf_r+0x4e>
 800e442:	fb0c 3202 	mla	r2, ip, r2, r3
 800e446:	460c      	mov	r4, r1
 800e448:	2001      	movs	r0, #1
 800e44a:	e7a5      	b.n	800e398 <_svfiprintf_r+0xd4>
 800e44c:	2300      	movs	r3, #0
 800e44e:	3401      	adds	r4, #1
 800e450:	9305      	str	r3, [sp, #20]
 800e452:	4619      	mov	r1, r3
 800e454:	f04f 0c0a 	mov.w	ip, #10
 800e458:	4620      	mov	r0, r4
 800e45a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e45e:	3a30      	subs	r2, #48	; 0x30
 800e460:	2a09      	cmp	r2, #9
 800e462:	d903      	bls.n	800e46c <_svfiprintf_r+0x1a8>
 800e464:	2b00      	cmp	r3, #0
 800e466:	d0c5      	beq.n	800e3f4 <_svfiprintf_r+0x130>
 800e468:	9105      	str	r1, [sp, #20]
 800e46a:	e7c3      	b.n	800e3f4 <_svfiprintf_r+0x130>
 800e46c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e470:	4604      	mov	r4, r0
 800e472:	2301      	movs	r3, #1
 800e474:	e7f0      	b.n	800e458 <_svfiprintf_r+0x194>
 800e476:	ab03      	add	r3, sp, #12
 800e478:	9300      	str	r3, [sp, #0]
 800e47a:	462a      	mov	r2, r5
 800e47c:	4b0f      	ldr	r3, [pc, #60]	; (800e4bc <_svfiprintf_r+0x1f8>)
 800e47e:	a904      	add	r1, sp, #16
 800e480:	4638      	mov	r0, r7
 800e482:	f7fc f809 	bl	800a498 <_printf_float>
 800e486:	1c42      	adds	r2, r0, #1
 800e488:	4606      	mov	r6, r0
 800e48a:	d1d6      	bne.n	800e43a <_svfiprintf_r+0x176>
 800e48c:	89ab      	ldrh	r3, [r5, #12]
 800e48e:	065b      	lsls	r3, r3, #25
 800e490:	f53f af2c 	bmi.w	800e2ec <_svfiprintf_r+0x28>
 800e494:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e496:	b01d      	add	sp, #116	; 0x74
 800e498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49c:	ab03      	add	r3, sp, #12
 800e49e:	9300      	str	r3, [sp, #0]
 800e4a0:	462a      	mov	r2, r5
 800e4a2:	4b06      	ldr	r3, [pc, #24]	; (800e4bc <_svfiprintf_r+0x1f8>)
 800e4a4:	a904      	add	r1, sp, #16
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	f7fc fa9a 	bl	800a9e0 <_printf_i>
 800e4ac:	e7eb      	b.n	800e486 <_svfiprintf_r+0x1c2>
 800e4ae:	bf00      	nop
 800e4b0:	080408a4 	.word	0x080408a4
 800e4b4:	080408ae 	.word	0x080408ae
 800e4b8:	0800a499 	.word	0x0800a499
 800e4bc:	0800e20d 	.word	0x0800e20d
 800e4c0:	080408aa 	.word	0x080408aa
 800e4c4:	00000000 	.word	0x00000000

0800e4c8 <nan>:
 800e4c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4d0 <nan+0x8>
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	00000000 	.word	0x00000000
 800e4d4:	7ff80000 	.word	0x7ff80000

0800e4d8 <_raise_r>:
 800e4d8:	291f      	cmp	r1, #31
 800e4da:	b538      	push	{r3, r4, r5, lr}
 800e4dc:	4604      	mov	r4, r0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	d904      	bls.n	800e4ec <_raise_r+0x14>
 800e4e2:	2316      	movs	r3, #22
 800e4e4:	6003      	str	r3, [r0, #0]
 800e4e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4ea:	bd38      	pop	{r3, r4, r5, pc}
 800e4ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4ee:	b112      	cbz	r2, 800e4f6 <_raise_r+0x1e>
 800e4f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4f4:	b94b      	cbnz	r3, 800e50a <_raise_r+0x32>
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f000 f830 	bl	800e55c <_getpid_r>
 800e4fc:	462a      	mov	r2, r5
 800e4fe:	4601      	mov	r1, r0
 800e500:	4620      	mov	r0, r4
 800e502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e506:	f000 b817 	b.w	800e538 <_kill_r>
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d00a      	beq.n	800e524 <_raise_r+0x4c>
 800e50e:	1c59      	adds	r1, r3, #1
 800e510:	d103      	bne.n	800e51a <_raise_r+0x42>
 800e512:	2316      	movs	r3, #22
 800e514:	6003      	str	r3, [r0, #0]
 800e516:	2001      	movs	r0, #1
 800e518:	e7e7      	b.n	800e4ea <_raise_r+0x12>
 800e51a:	2400      	movs	r4, #0
 800e51c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e520:	4628      	mov	r0, r5
 800e522:	4798      	blx	r3
 800e524:	2000      	movs	r0, #0
 800e526:	e7e0      	b.n	800e4ea <_raise_r+0x12>

0800e528 <raise>:
 800e528:	4b02      	ldr	r3, [pc, #8]	; (800e534 <raise+0xc>)
 800e52a:	4601      	mov	r1, r0
 800e52c:	6818      	ldr	r0, [r3, #0]
 800e52e:	f7ff bfd3 	b.w	800e4d8 <_raise_r>
 800e532:	bf00      	nop
 800e534:	20000f6c 	.word	0x20000f6c

0800e538 <_kill_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4d07      	ldr	r5, [pc, #28]	; (800e558 <_kill_r+0x20>)
 800e53c:	2300      	movs	r3, #0
 800e53e:	4604      	mov	r4, r0
 800e540:	4608      	mov	r0, r1
 800e542:	4611      	mov	r1, r2
 800e544:	602b      	str	r3, [r5, #0]
 800e546:	f003 f801 	bl	801154c <_kill>
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	d102      	bne.n	800e554 <_kill_r+0x1c>
 800e54e:	682b      	ldr	r3, [r5, #0]
 800e550:	b103      	cbz	r3, 800e554 <_kill_r+0x1c>
 800e552:	6023      	str	r3, [r4, #0]
 800e554:	bd38      	pop	{r3, r4, r5, pc}
 800e556:	bf00      	nop
 800e558:	20006500 	.word	0x20006500

0800e55c <_getpid_r>:
 800e55c:	f002 bfe6 	b.w	801152c <_getpid>

0800e560 <__sread>:
 800e560:	b510      	push	{r4, lr}
 800e562:	460c      	mov	r4, r1
 800e564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e568:	f000 f8ba 	bl	800e6e0 <_read_r>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	bfab      	itete	ge
 800e570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e572:	89a3      	ldrhlt	r3, [r4, #12]
 800e574:	181b      	addge	r3, r3, r0
 800e576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e57a:	bfac      	ite	ge
 800e57c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e57e:	81a3      	strhlt	r3, [r4, #12]
 800e580:	bd10      	pop	{r4, pc}

0800e582 <__swrite>:
 800e582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e586:	461f      	mov	r7, r3
 800e588:	898b      	ldrh	r3, [r1, #12]
 800e58a:	05db      	lsls	r3, r3, #23
 800e58c:	4605      	mov	r5, r0
 800e58e:	460c      	mov	r4, r1
 800e590:	4616      	mov	r6, r2
 800e592:	d505      	bpl.n	800e5a0 <__swrite+0x1e>
 800e594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e598:	2302      	movs	r3, #2
 800e59a:	2200      	movs	r2, #0
 800e59c:	f000 f886 	bl	800e6ac <_lseek_r>
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5aa:	81a3      	strh	r3, [r4, #12]
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	463b      	mov	r3, r7
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b6:	f000 b835 	b.w	800e624 <_write_r>

0800e5ba <__sseek>:
 800e5ba:	b510      	push	{r4, lr}
 800e5bc:	460c      	mov	r4, r1
 800e5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c2:	f000 f873 	bl	800e6ac <_lseek_r>
 800e5c6:	1c43      	adds	r3, r0, #1
 800e5c8:	89a3      	ldrh	r3, [r4, #12]
 800e5ca:	bf15      	itete	ne
 800e5cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5d6:	81a3      	strheq	r3, [r4, #12]
 800e5d8:	bf18      	it	ne
 800e5da:	81a3      	strhne	r3, [r4, #12]
 800e5dc:	bd10      	pop	{r4, pc}

0800e5de <__sclose>:
 800e5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e2:	f000 b831 	b.w	800e648 <_close_r>

0800e5e6 <strncmp>:
 800e5e6:	b510      	push	{r4, lr}
 800e5e8:	b16a      	cbz	r2, 800e606 <strncmp+0x20>
 800e5ea:	3901      	subs	r1, #1
 800e5ec:	1884      	adds	r4, r0, r2
 800e5ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e5f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d103      	bne.n	800e602 <strncmp+0x1c>
 800e5fa:	42a0      	cmp	r0, r4
 800e5fc:	d001      	beq.n	800e602 <strncmp+0x1c>
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1f5      	bne.n	800e5ee <strncmp+0x8>
 800e602:	1a98      	subs	r0, r3, r2
 800e604:	bd10      	pop	{r4, pc}
 800e606:	4610      	mov	r0, r2
 800e608:	e7fc      	b.n	800e604 <strncmp+0x1e>

0800e60a <__ascii_wctomb>:
 800e60a:	b149      	cbz	r1, 800e620 <__ascii_wctomb+0x16>
 800e60c:	2aff      	cmp	r2, #255	; 0xff
 800e60e:	bf85      	ittet	hi
 800e610:	238a      	movhi	r3, #138	; 0x8a
 800e612:	6003      	strhi	r3, [r0, #0]
 800e614:	700a      	strbls	r2, [r1, #0]
 800e616:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e61a:	bf98      	it	ls
 800e61c:	2001      	movls	r0, #1
 800e61e:	4770      	bx	lr
 800e620:	4608      	mov	r0, r1
 800e622:	4770      	bx	lr

0800e624 <_write_r>:
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4d07      	ldr	r5, [pc, #28]	; (800e644 <_write_r+0x20>)
 800e628:	4604      	mov	r4, r0
 800e62a:	4608      	mov	r0, r1
 800e62c:	4611      	mov	r1, r2
 800e62e:	2200      	movs	r2, #0
 800e630:	602a      	str	r2, [r5, #0]
 800e632:	461a      	mov	r2, r3
 800e634:	f002 ffa2 	bl	801157c <_write>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d102      	bne.n	800e642 <_write_r+0x1e>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	b103      	cbz	r3, 800e642 <_write_r+0x1e>
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	bd38      	pop	{r3, r4, r5, pc}
 800e644:	20006500 	.word	0x20006500

0800e648 <_close_r>:
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4d06      	ldr	r5, [pc, #24]	; (800e664 <_close_r+0x1c>)
 800e64c:	2300      	movs	r3, #0
 800e64e:	4604      	mov	r4, r0
 800e650:	4608      	mov	r0, r1
 800e652:	602b      	str	r3, [r5, #0]
 800e654:	f002 ff5a 	bl	801150c <_close>
 800e658:	1c43      	adds	r3, r0, #1
 800e65a:	d102      	bne.n	800e662 <_close_r+0x1a>
 800e65c:	682b      	ldr	r3, [r5, #0]
 800e65e:	b103      	cbz	r3, 800e662 <_close_r+0x1a>
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	bd38      	pop	{r3, r4, r5, pc}
 800e664:	20006500 	.word	0x20006500

0800e668 <_fstat_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4d07      	ldr	r5, [pc, #28]	; (800e688 <_fstat_r+0x20>)
 800e66c:	2300      	movs	r3, #0
 800e66e:	4604      	mov	r4, r0
 800e670:	4608      	mov	r0, r1
 800e672:	4611      	mov	r1, r2
 800e674:	602b      	str	r3, [r5, #0]
 800e676:	f002 ff51 	bl	801151c <_fstat>
 800e67a:	1c43      	adds	r3, r0, #1
 800e67c:	d102      	bne.n	800e684 <_fstat_r+0x1c>
 800e67e:	682b      	ldr	r3, [r5, #0]
 800e680:	b103      	cbz	r3, 800e684 <_fstat_r+0x1c>
 800e682:	6023      	str	r3, [r4, #0]
 800e684:	bd38      	pop	{r3, r4, r5, pc}
 800e686:	bf00      	nop
 800e688:	20006500 	.word	0x20006500

0800e68c <_isatty_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	4d06      	ldr	r5, [pc, #24]	; (800e6a8 <_isatty_r+0x1c>)
 800e690:	2300      	movs	r3, #0
 800e692:	4604      	mov	r4, r0
 800e694:	4608      	mov	r0, r1
 800e696:	602b      	str	r3, [r5, #0]
 800e698:	f002 ff50 	bl	801153c <_isatty>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_isatty_r+0x1a>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_isatty_r+0x1a>
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	20006500 	.word	0x20006500

0800e6ac <_lseek_r>:
 800e6ac:	b538      	push	{r3, r4, r5, lr}
 800e6ae:	4d07      	ldr	r5, [pc, #28]	; (800e6cc <_lseek_r+0x20>)
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	4608      	mov	r0, r1
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	602a      	str	r2, [r5, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f002 ff4e 	bl	801155c <_lseek>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_lseek_r+0x1e>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_lseek_r+0x1e>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	20006500 	.word	0x20006500

0800e6d0 <_malloc_usable_size_r>:
 800e6d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6d4:	1f18      	subs	r0, r3, #4
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	bfbc      	itt	lt
 800e6da:	580b      	ldrlt	r3, [r1, r0]
 800e6dc:	18c0      	addlt	r0, r0, r3
 800e6de:	4770      	bx	lr

0800e6e0 <_read_r>:
 800e6e0:	b538      	push	{r3, r4, r5, lr}
 800e6e2:	4d07      	ldr	r5, [pc, #28]	; (800e700 <_read_r+0x20>)
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	4608      	mov	r0, r1
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	602a      	str	r2, [r5, #0]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	f002 ff3c 	bl	801156c <_read>
 800e6f4:	1c43      	adds	r3, r0, #1
 800e6f6:	d102      	bne.n	800e6fe <_read_r+0x1e>
 800e6f8:	682b      	ldr	r3, [r5, #0]
 800e6fa:	b103      	cbz	r3, 800e6fe <_read_r+0x1e>
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
 800e700:	20006500 	.word	0x20006500
 800e704:	00000000 	.word	0x00000000

0800e708 <cos>:
 800e708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e70a:	ec53 2b10 	vmov	r2, r3, d0
 800e70e:	4824      	ldr	r0, [pc, #144]	; (800e7a0 <cos+0x98>)
 800e710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e714:	4281      	cmp	r1, r0
 800e716:	dc06      	bgt.n	800e726 <cos+0x1e>
 800e718:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800e798 <cos+0x90>
 800e71c:	f001 ffac 	bl	8010678 <__kernel_cos>
 800e720:	ec51 0b10 	vmov	r0, r1, d0
 800e724:	e007      	b.n	800e736 <cos+0x2e>
 800e726:	481f      	ldr	r0, [pc, #124]	; (800e7a4 <cos+0x9c>)
 800e728:	4281      	cmp	r1, r0
 800e72a:	dd09      	ble.n	800e740 <cos+0x38>
 800e72c:	ee10 0a10 	vmov	r0, s0
 800e730:	4619      	mov	r1, r3
 800e732:	f7f1 fda9 	bl	8000288 <__aeabi_dsub>
 800e736:	ec41 0b10 	vmov	d0, r0, r1
 800e73a:	b005      	add	sp, #20
 800e73c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e740:	4668      	mov	r0, sp
 800e742:	f001 f941 	bl	800f9c8 <__ieee754_rem_pio2>
 800e746:	f000 0003 	and.w	r0, r0, #3
 800e74a:	2801      	cmp	r0, #1
 800e74c:	d007      	beq.n	800e75e <cos+0x56>
 800e74e:	2802      	cmp	r0, #2
 800e750:	d012      	beq.n	800e778 <cos+0x70>
 800e752:	b9c0      	cbnz	r0, 800e786 <cos+0x7e>
 800e754:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e758:	ed9d 0b00 	vldr	d0, [sp]
 800e75c:	e7de      	b.n	800e71c <cos+0x14>
 800e75e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e762:	ed9d 0b00 	vldr	d0, [sp]
 800e766:	f002 fb8f 	bl	8010e88 <__kernel_sin>
 800e76a:	ec53 2b10 	vmov	r2, r3, d0
 800e76e:	ee10 0a10 	vmov	r0, s0
 800e772:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e776:	e7de      	b.n	800e736 <cos+0x2e>
 800e778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e77c:	ed9d 0b00 	vldr	d0, [sp]
 800e780:	f001 ff7a 	bl	8010678 <__kernel_cos>
 800e784:	e7f1      	b.n	800e76a <cos+0x62>
 800e786:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e78a:	ed9d 0b00 	vldr	d0, [sp]
 800e78e:	2001      	movs	r0, #1
 800e790:	f002 fb7a 	bl	8010e88 <__kernel_sin>
 800e794:	e7c4      	b.n	800e720 <cos+0x18>
 800e796:	bf00      	nop
	...
 800e7a0:	3fe921fb 	.word	0x3fe921fb
 800e7a4:	7fefffff 	.word	0x7fefffff

0800e7a8 <fabsf>:
 800e7a8:	ee10 3a10 	vmov	r3, s0
 800e7ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7b0:	ee00 3a10 	vmov	s0, r3
 800e7b4:	4770      	bx	lr
	...

0800e7b8 <roundf>:
 800e7b8:	ee10 0a10 	vmov	r0, s0
 800e7bc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e7c0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800e7c4:	2a16      	cmp	r2, #22
 800e7c6:	dc15      	bgt.n	800e7f4 <roundf+0x3c>
 800e7c8:	2a00      	cmp	r2, #0
 800e7ca:	da08      	bge.n	800e7de <roundf+0x26>
 800e7cc:	3201      	adds	r2, #1
 800e7ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e7d2:	d101      	bne.n	800e7d8 <roundf+0x20>
 800e7d4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e7d8:	ee00 3a10 	vmov	s0, r3
 800e7dc:	4770      	bx	lr
 800e7de:	4908      	ldr	r1, [pc, #32]	; (800e800 <roundf+0x48>)
 800e7e0:	4111      	asrs	r1, r2
 800e7e2:	4208      	tst	r0, r1
 800e7e4:	d0fa      	beq.n	800e7dc <roundf+0x24>
 800e7e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e7ea:	4113      	asrs	r3, r2
 800e7ec:	4403      	add	r3, r0
 800e7ee:	ea23 0301 	bic.w	r3, r3, r1
 800e7f2:	e7f1      	b.n	800e7d8 <roundf+0x20>
 800e7f4:	2a80      	cmp	r2, #128	; 0x80
 800e7f6:	d1f1      	bne.n	800e7dc <roundf+0x24>
 800e7f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop
 800e800:	007fffff 	.word	0x007fffff
 800e804:	00000000 	.word	0x00000000

0800e808 <log>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	ed2d 8b02 	vpush	{d8}
 800e80e:	ec55 4b10 	vmov	r4, r5, d0
 800e812:	f000 f9f9 	bl	800ec08 <__ieee754_log>
 800e816:	4b1e      	ldr	r3, [pc, #120]	; (800e890 <log+0x88>)
 800e818:	eeb0 8a40 	vmov.f32	s16, s0
 800e81c:	eef0 8a60 	vmov.f32	s17, s1
 800e820:	f993 3000 	ldrsb.w	r3, [r3]
 800e824:	3301      	adds	r3, #1
 800e826:	d01a      	beq.n	800e85e <log+0x56>
 800e828:	4622      	mov	r2, r4
 800e82a:	462b      	mov	r3, r5
 800e82c:	4620      	mov	r0, r4
 800e82e:	4629      	mov	r1, r5
 800e830:	f7f2 f97c 	bl	8000b2c <__aeabi_dcmpun>
 800e834:	b998      	cbnz	r0, 800e85e <log+0x56>
 800e836:	2200      	movs	r2, #0
 800e838:	2300      	movs	r3, #0
 800e83a:	4620      	mov	r0, r4
 800e83c:	4629      	mov	r1, r5
 800e83e:	f7f2 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 800e842:	b960      	cbnz	r0, 800e85e <log+0x56>
 800e844:	2200      	movs	r2, #0
 800e846:	2300      	movs	r3, #0
 800e848:	4620      	mov	r0, r4
 800e84a:	4629      	mov	r1, r5
 800e84c:	f7f2 f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e850:	b160      	cbz	r0, 800e86c <log+0x64>
 800e852:	f7fb fb23 	bl	8009e9c <__errno>
 800e856:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800e888 <log+0x80>
 800e85a:	2322      	movs	r3, #34	; 0x22
 800e85c:	6003      	str	r3, [r0, #0]
 800e85e:	eeb0 0a48 	vmov.f32	s0, s16
 800e862:	eef0 0a68 	vmov.f32	s1, s17
 800e866:	ecbd 8b02 	vpop	{d8}
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	f7fb fb16 	bl	8009e9c <__errno>
 800e870:	ecbd 8b02 	vpop	{d8}
 800e874:	2321      	movs	r3, #33	; 0x21
 800e876:	6003      	str	r3, [r0, #0]
 800e878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e87c:	4805      	ldr	r0, [pc, #20]	; (800e894 <log+0x8c>)
 800e87e:	f7ff be23 	b.w	800e4c8 <nan>
 800e882:	bf00      	nop
 800e884:	f3af 8000 	nop.w
 800e888:	00000000 	.word	0x00000000
 800e88c:	fff00000 	.word	0xfff00000
 800e890:	20001140 	.word	0x20001140
 800e894:	0804089f 	.word	0x0804089f

0800e898 <pow>:
 800e898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e89c:	ec59 8b10 	vmov	r8, r9, d0
 800e8a0:	ec57 6b11 	vmov	r6, r7, d1
 800e8a4:	f000 fb6c 	bl	800ef80 <__ieee754_pow>
 800e8a8:	4b4e      	ldr	r3, [pc, #312]	; (800e9e4 <pow+0x14c>)
 800e8aa:	f993 3000 	ldrsb.w	r3, [r3]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	ec55 4b10 	vmov	r4, r5, d0
 800e8b4:	d015      	beq.n	800e8e2 <pow+0x4a>
 800e8b6:	4632      	mov	r2, r6
 800e8b8:	463b      	mov	r3, r7
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	4639      	mov	r1, r7
 800e8be:	f7f2 f935 	bl	8000b2c <__aeabi_dcmpun>
 800e8c2:	b970      	cbnz	r0, 800e8e2 <pow+0x4a>
 800e8c4:	4642      	mov	r2, r8
 800e8c6:	464b      	mov	r3, r9
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	4649      	mov	r1, r9
 800e8cc:	f7f2 f92e 	bl	8000b2c <__aeabi_dcmpun>
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	b148      	cbz	r0, 800e8ea <pow+0x52>
 800e8d6:	4630      	mov	r0, r6
 800e8d8:	4639      	mov	r1, r7
 800e8da:	f7f2 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d17d      	bne.n	800e9de <pow+0x146>
 800e8e2:	ec45 4b10 	vmov	d0, r4, r5
 800e8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ea:	4640      	mov	r0, r8
 800e8ec:	4649      	mov	r1, r9
 800e8ee:	f7f2 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8f2:	b1e0      	cbz	r0, 800e92e <pow+0x96>
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	f7f2 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e900:	2800      	cmp	r0, #0
 800e902:	d16c      	bne.n	800e9de <pow+0x146>
 800e904:	ec47 6b10 	vmov	d0, r6, r7
 800e908:	f002 fb85 	bl	8011016 <finite>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d0e8      	beq.n	800e8e2 <pow+0x4a>
 800e910:	2200      	movs	r2, #0
 800e912:	2300      	movs	r3, #0
 800e914:	4630      	mov	r0, r6
 800e916:	4639      	mov	r1, r7
 800e918:	f7f2 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d0e0      	beq.n	800e8e2 <pow+0x4a>
 800e920:	f7fb fabc 	bl	8009e9c <__errno>
 800e924:	2321      	movs	r3, #33	; 0x21
 800e926:	6003      	str	r3, [r0, #0]
 800e928:	2400      	movs	r4, #0
 800e92a:	4d2f      	ldr	r5, [pc, #188]	; (800e9e8 <pow+0x150>)
 800e92c:	e7d9      	b.n	800e8e2 <pow+0x4a>
 800e92e:	ec45 4b10 	vmov	d0, r4, r5
 800e932:	f002 fb70 	bl	8011016 <finite>
 800e936:	bbb8      	cbnz	r0, 800e9a8 <pow+0x110>
 800e938:	ec49 8b10 	vmov	d0, r8, r9
 800e93c:	f002 fb6b 	bl	8011016 <finite>
 800e940:	b390      	cbz	r0, 800e9a8 <pow+0x110>
 800e942:	ec47 6b10 	vmov	d0, r6, r7
 800e946:	f002 fb66 	bl	8011016 <finite>
 800e94a:	b368      	cbz	r0, 800e9a8 <pow+0x110>
 800e94c:	4622      	mov	r2, r4
 800e94e:	462b      	mov	r3, r5
 800e950:	4620      	mov	r0, r4
 800e952:	4629      	mov	r1, r5
 800e954:	f7f2 f8ea 	bl	8000b2c <__aeabi_dcmpun>
 800e958:	b160      	cbz	r0, 800e974 <pow+0xdc>
 800e95a:	f7fb fa9f 	bl	8009e9c <__errno>
 800e95e:	2321      	movs	r3, #33	; 0x21
 800e960:	6003      	str	r3, [r0, #0]
 800e962:	2200      	movs	r2, #0
 800e964:	2300      	movs	r3, #0
 800e966:	4610      	mov	r0, r2
 800e968:	4619      	mov	r1, r3
 800e96a:	f7f1 ff6f 	bl	800084c <__aeabi_ddiv>
 800e96e:	4604      	mov	r4, r0
 800e970:	460d      	mov	r5, r1
 800e972:	e7b6      	b.n	800e8e2 <pow+0x4a>
 800e974:	f7fb fa92 	bl	8009e9c <__errno>
 800e978:	2322      	movs	r3, #34	; 0x22
 800e97a:	6003      	str	r3, [r0, #0]
 800e97c:	2200      	movs	r2, #0
 800e97e:	2300      	movs	r3, #0
 800e980:	4640      	mov	r0, r8
 800e982:	4649      	mov	r1, r9
 800e984:	f7f2 f8aa 	bl	8000adc <__aeabi_dcmplt>
 800e988:	2400      	movs	r4, #0
 800e98a:	b158      	cbz	r0, 800e9a4 <pow+0x10c>
 800e98c:	ec47 6b10 	vmov	d0, r6, r7
 800e990:	f002 fbce 	bl	8011130 <rint>
 800e994:	4632      	mov	r2, r6
 800e996:	ec51 0b10 	vmov	r0, r1, d0
 800e99a:	463b      	mov	r3, r7
 800e99c:	f7f2 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	d0c2      	beq.n	800e92a <pow+0x92>
 800e9a4:	4d11      	ldr	r5, [pc, #68]	; (800e9ec <pow+0x154>)
 800e9a6:	e79c      	b.n	800e8e2 <pow+0x4a>
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	f7f2 f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d094      	beq.n	800e8e2 <pow+0x4a>
 800e9b8:	ec49 8b10 	vmov	d0, r8, r9
 800e9bc:	f002 fb2b 	bl	8011016 <finite>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	d08e      	beq.n	800e8e2 <pow+0x4a>
 800e9c4:	ec47 6b10 	vmov	d0, r6, r7
 800e9c8:	f002 fb25 	bl	8011016 <finite>
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d088      	beq.n	800e8e2 <pow+0x4a>
 800e9d0:	f7fb fa64 	bl	8009e9c <__errno>
 800e9d4:	2322      	movs	r3, #34	; 0x22
 800e9d6:	6003      	str	r3, [r0, #0]
 800e9d8:	2400      	movs	r4, #0
 800e9da:	2500      	movs	r5, #0
 800e9dc:	e781      	b.n	800e8e2 <pow+0x4a>
 800e9de:	4d04      	ldr	r5, [pc, #16]	; (800e9f0 <pow+0x158>)
 800e9e0:	2400      	movs	r4, #0
 800e9e2:	e77e      	b.n	800e8e2 <pow+0x4a>
 800e9e4:	20001140 	.word	0x20001140
 800e9e8:	fff00000 	.word	0xfff00000
 800e9ec:	7ff00000 	.word	0x7ff00000
 800e9f0:	3ff00000 	.word	0x3ff00000

0800e9f4 <sqrt>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	ed2d 8b02 	vpush	{d8}
 800e9fa:	ec55 4b10 	vmov	r4, r5, d0
 800e9fe:	f001 f9ed 	bl	800fddc <__ieee754_sqrt>
 800ea02:	4b15      	ldr	r3, [pc, #84]	; (800ea58 <sqrt+0x64>)
 800ea04:	eeb0 8a40 	vmov.f32	s16, s0
 800ea08:	eef0 8a60 	vmov.f32	s17, s1
 800ea0c:	f993 3000 	ldrsb.w	r3, [r3]
 800ea10:	3301      	adds	r3, #1
 800ea12:	d019      	beq.n	800ea48 <sqrt+0x54>
 800ea14:	4622      	mov	r2, r4
 800ea16:	462b      	mov	r3, r5
 800ea18:	4620      	mov	r0, r4
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	f7f2 f886 	bl	8000b2c <__aeabi_dcmpun>
 800ea20:	b990      	cbnz	r0, 800ea48 <sqrt+0x54>
 800ea22:	2200      	movs	r2, #0
 800ea24:	2300      	movs	r3, #0
 800ea26:	4620      	mov	r0, r4
 800ea28:	4629      	mov	r1, r5
 800ea2a:	f7f2 f857 	bl	8000adc <__aeabi_dcmplt>
 800ea2e:	b158      	cbz	r0, 800ea48 <sqrt+0x54>
 800ea30:	f7fb fa34 	bl	8009e9c <__errno>
 800ea34:	2321      	movs	r3, #33	; 0x21
 800ea36:	6003      	str	r3, [r0, #0]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	4619      	mov	r1, r3
 800ea40:	f7f1 ff04 	bl	800084c <__aeabi_ddiv>
 800ea44:	ec41 0b18 	vmov	d8, r0, r1
 800ea48:	eeb0 0a48 	vmov.f32	s0, s16
 800ea4c:	eef0 0a68 	vmov.f32	s1, s17
 800ea50:	ecbd 8b02 	vpop	{d8}
 800ea54:	bd38      	pop	{r3, r4, r5, pc}
 800ea56:	bf00      	nop
 800ea58:	20001140 	.word	0x20001140

0800ea5c <expf>:
 800ea5c:	b508      	push	{r3, lr}
 800ea5e:	ed2d 8b02 	vpush	{d8}
 800ea62:	eef0 8a40 	vmov.f32	s17, s0
 800ea66:	f001 fa6d 	bl	800ff44 <__ieee754_expf>
 800ea6a:	4b16      	ldr	r3, [pc, #88]	; (800eac4 <expf+0x68>)
 800ea6c:	f993 3000 	ldrsb.w	r3, [r3]
 800ea70:	3301      	adds	r3, #1
 800ea72:	eeb0 8a40 	vmov.f32	s16, s0
 800ea76:	d011      	beq.n	800ea9c <expf+0x40>
 800ea78:	eeb0 0a68 	vmov.f32	s0, s17
 800ea7c:	f002 fc6a 	bl	8011354 <finitef>
 800ea80:	b160      	cbz	r0, 800ea9c <expf+0x40>
 800ea82:	eddf 7a11 	vldr	s15, [pc, #68]	; 800eac8 <expf+0x6c>
 800ea86:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ea8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea8e:	dd0a      	ble.n	800eaa6 <expf+0x4a>
 800ea90:	f7fb fa04 	bl	8009e9c <__errno>
 800ea94:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800eacc <expf+0x70>
 800ea98:	2322      	movs	r3, #34	; 0x22
 800ea9a:	6003      	str	r3, [r0, #0]
 800ea9c:	eeb0 0a48 	vmov.f32	s0, s16
 800eaa0:	ecbd 8b02 	vpop	{d8}
 800eaa4:	bd08      	pop	{r3, pc}
 800eaa6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800ead0 <expf+0x74>
 800eaaa:	eef4 8ae7 	vcmpe.f32	s17, s15
 800eaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab2:	d5f3      	bpl.n	800ea9c <expf+0x40>
 800eab4:	f7fb f9f2 	bl	8009e9c <__errno>
 800eab8:	2322      	movs	r3, #34	; 0x22
 800eaba:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800ead4 <expf+0x78>
 800eabe:	6003      	str	r3, [r0, #0]
 800eac0:	e7ec      	b.n	800ea9c <expf+0x40>
 800eac2:	bf00      	nop
 800eac4:	20001140 	.word	0x20001140
 800eac8:	42b17180 	.word	0x42b17180
 800eacc:	7f800000 	.word	0x7f800000
 800ead0:	c2cff1b5 	.word	0xc2cff1b5
 800ead4:	00000000 	.word	0x00000000

0800ead8 <powf>:
 800ead8:	b508      	push	{r3, lr}
 800eada:	ed2d 8b04 	vpush	{d8-d9}
 800eade:	eeb0 9a40 	vmov.f32	s18, s0
 800eae2:	eef0 8a60 	vmov.f32	s17, s1
 800eae6:	f001 fb01 	bl	80100ec <__ieee754_powf>
 800eaea:	4b43      	ldr	r3, [pc, #268]	; (800ebf8 <powf+0x120>)
 800eaec:	f993 3000 	ldrsb.w	r3, [r3]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	eeb0 8a40 	vmov.f32	s16, s0
 800eaf6:	d012      	beq.n	800eb1e <powf+0x46>
 800eaf8:	eef4 8a68 	vcmp.f32	s17, s17
 800eafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb00:	d60d      	bvs.n	800eb1e <powf+0x46>
 800eb02:	eeb4 9a49 	vcmp.f32	s18, s18
 800eb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb0a:	d70d      	bvc.n	800eb28 <powf+0x50>
 800eb0c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800eb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb18:	bf08      	it	eq
 800eb1a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800eb1e:	eeb0 0a48 	vmov.f32	s0, s16
 800eb22:	ecbd 8b04 	vpop	{d8-d9}
 800eb26:	bd08      	pop	{r3, pc}
 800eb28:	eddf 9a34 	vldr	s19, [pc, #208]	; 800ebfc <powf+0x124>
 800eb2c:	eeb4 9a69 	vcmp.f32	s18, s19
 800eb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb34:	d116      	bne.n	800eb64 <powf+0x8c>
 800eb36:	eef4 8a69 	vcmp.f32	s17, s19
 800eb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3e:	d057      	beq.n	800ebf0 <powf+0x118>
 800eb40:	eeb0 0a68 	vmov.f32	s0, s17
 800eb44:	f002 fc06 	bl	8011354 <finitef>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d0e8      	beq.n	800eb1e <powf+0x46>
 800eb4c:	eef4 8ae9 	vcmpe.f32	s17, s19
 800eb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb54:	d5e3      	bpl.n	800eb1e <powf+0x46>
 800eb56:	f7fb f9a1 	bl	8009e9c <__errno>
 800eb5a:	2321      	movs	r3, #33	; 0x21
 800eb5c:	6003      	str	r3, [r0, #0]
 800eb5e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800ec00 <powf+0x128>
 800eb62:	e7dc      	b.n	800eb1e <powf+0x46>
 800eb64:	f002 fbf6 	bl	8011354 <finitef>
 800eb68:	bb50      	cbnz	r0, 800ebc0 <powf+0xe8>
 800eb6a:	eeb0 0a49 	vmov.f32	s0, s18
 800eb6e:	f002 fbf1 	bl	8011354 <finitef>
 800eb72:	b328      	cbz	r0, 800ebc0 <powf+0xe8>
 800eb74:	eeb0 0a68 	vmov.f32	s0, s17
 800eb78:	f002 fbec 	bl	8011354 <finitef>
 800eb7c:	b300      	cbz	r0, 800ebc0 <powf+0xe8>
 800eb7e:	eeb4 8a48 	vcmp.f32	s16, s16
 800eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb86:	d706      	bvc.n	800eb96 <powf+0xbe>
 800eb88:	f7fb f988 	bl	8009e9c <__errno>
 800eb8c:	2321      	movs	r3, #33	; 0x21
 800eb8e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800eb92:	6003      	str	r3, [r0, #0]
 800eb94:	e7c3      	b.n	800eb1e <powf+0x46>
 800eb96:	f7fb f981 	bl	8009e9c <__errno>
 800eb9a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800eb9e:	2322      	movs	r3, #34	; 0x22
 800eba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba4:	6003      	str	r3, [r0, #0]
 800eba6:	d508      	bpl.n	800ebba <powf+0xe2>
 800eba8:	eeb0 0a68 	vmov.f32	s0, s17
 800ebac:	f002 fbe0 	bl	8011370 <rintf>
 800ebb0:	eeb4 0a68 	vcmp.f32	s0, s17
 800ebb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb8:	d1d1      	bne.n	800eb5e <powf+0x86>
 800ebba:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800ec04 <powf+0x12c>
 800ebbe:	e7ae      	b.n	800eb1e <powf+0x46>
 800ebc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ebc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc8:	d1a9      	bne.n	800eb1e <powf+0x46>
 800ebca:	eeb0 0a49 	vmov.f32	s0, s18
 800ebce:	f002 fbc1 	bl	8011354 <finitef>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d0a3      	beq.n	800eb1e <powf+0x46>
 800ebd6:	eeb0 0a68 	vmov.f32	s0, s17
 800ebda:	f002 fbbb 	bl	8011354 <finitef>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d09d      	beq.n	800eb1e <powf+0x46>
 800ebe2:	f7fb f95b 	bl	8009e9c <__errno>
 800ebe6:	2322      	movs	r3, #34	; 0x22
 800ebe8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800ebfc <powf+0x124>
 800ebec:	6003      	str	r3, [r0, #0]
 800ebee:	e796      	b.n	800eb1e <powf+0x46>
 800ebf0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ebf4:	e793      	b.n	800eb1e <powf+0x46>
 800ebf6:	bf00      	nop
 800ebf8:	20001140 	.word	0x20001140
 800ebfc:	00000000 	.word	0x00000000
 800ec00:	ff800000 	.word	0xff800000
 800ec04:	7f800000 	.word	0x7f800000

0800ec08 <__ieee754_log>:
 800ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	ec51 0b10 	vmov	r0, r1, d0
 800ec10:	ed2d 8b04 	vpush	{d8-d9}
 800ec14:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ec18:	b083      	sub	sp, #12
 800ec1a:	460d      	mov	r5, r1
 800ec1c:	da29      	bge.n	800ec72 <__ieee754_log+0x6a>
 800ec1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec22:	4303      	orrs	r3, r0
 800ec24:	ee10 2a10 	vmov	r2, s0
 800ec28:	d10c      	bne.n	800ec44 <__ieee754_log+0x3c>
 800ec2a:	49cf      	ldr	r1, [pc, #828]	; (800ef68 <__ieee754_log+0x360>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	2300      	movs	r3, #0
 800ec30:	2000      	movs	r0, #0
 800ec32:	f7f1 fe0b 	bl	800084c <__aeabi_ddiv>
 800ec36:	ec41 0b10 	vmov	d0, r0, r1
 800ec3a:	b003      	add	sp, #12
 800ec3c:	ecbd 8b04 	vpop	{d8-d9}
 800ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec44:	2900      	cmp	r1, #0
 800ec46:	da05      	bge.n	800ec54 <__ieee754_log+0x4c>
 800ec48:	460b      	mov	r3, r1
 800ec4a:	f7f1 fb1d 	bl	8000288 <__aeabi_dsub>
 800ec4e:	2200      	movs	r2, #0
 800ec50:	2300      	movs	r3, #0
 800ec52:	e7ee      	b.n	800ec32 <__ieee754_log+0x2a>
 800ec54:	4bc5      	ldr	r3, [pc, #788]	; (800ef6c <__ieee754_log+0x364>)
 800ec56:	2200      	movs	r2, #0
 800ec58:	f7f1 fcce 	bl	80005f8 <__aeabi_dmul>
 800ec5c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ec60:	460d      	mov	r5, r1
 800ec62:	4ac3      	ldr	r2, [pc, #780]	; (800ef70 <__ieee754_log+0x368>)
 800ec64:	4295      	cmp	r5, r2
 800ec66:	dd06      	ble.n	800ec76 <__ieee754_log+0x6e>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	f7f1 fb0e 	bl	800028c <__adddf3>
 800ec70:	e7e1      	b.n	800ec36 <__ieee754_log+0x2e>
 800ec72:	2300      	movs	r3, #0
 800ec74:	e7f5      	b.n	800ec62 <__ieee754_log+0x5a>
 800ec76:	152c      	asrs	r4, r5, #20
 800ec78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ec7c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ec80:	441c      	add	r4, r3
 800ec82:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ec86:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ec8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec8e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ec92:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ec96:	ea42 0105 	orr.w	r1, r2, r5
 800ec9a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ec9e:	2200      	movs	r2, #0
 800eca0:	4bb4      	ldr	r3, [pc, #720]	; (800ef74 <__ieee754_log+0x36c>)
 800eca2:	f7f1 faf1 	bl	8000288 <__aeabi_dsub>
 800eca6:	1cab      	adds	r3, r5, #2
 800eca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	4682      	mov	sl, r0
 800ecb0:	468b      	mov	fp, r1
 800ecb2:	f04f 0200 	mov.w	r2, #0
 800ecb6:	dc53      	bgt.n	800ed60 <__ieee754_log+0x158>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f7f1 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecbe:	b1d0      	cbz	r0, 800ecf6 <__ieee754_log+0xee>
 800ecc0:	2c00      	cmp	r4, #0
 800ecc2:	f000 8122 	beq.w	800ef0a <__ieee754_log+0x302>
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f7f1 fc2c 	bl	8000524 <__aeabi_i2d>
 800eccc:	a390      	add	r3, pc, #576	; (adr r3, 800ef10 <__ieee754_log+0x308>)
 800ecce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	460f      	mov	r7, r1
 800ecd6:	f7f1 fc8f 	bl	80005f8 <__aeabi_dmul>
 800ecda:	a38f      	add	r3, pc, #572	; (adr r3, 800ef18 <__ieee754_log+0x310>)
 800ecdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece0:	4604      	mov	r4, r0
 800ece2:	460d      	mov	r5, r1
 800ece4:	4630      	mov	r0, r6
 800ece6:	4639      	mov	r1, r7
 800ece8:	f7f1 fc86 	bl	80005f8 <__aeabi_dmul>
 800ecec:	4602      	mov	r2, r0
 800ecee:	460b      	mov	r3, r1
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	4629      	mov	r1, r5
 800ecf4:	e7ba      	b.n	800ec6c <__ieee754_log+0x64>
 800ecf6:	a38a      	add	r3, pc, #552	; (adr r3, 800ef20 <__ieee754_log+0x318>)
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	4659      	mov	r1, fp
 800ed00:	f7f1 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ed04:	4602      	mov	r2, r0
 800ed06:	460b      	mov	r3, r1
 800ed08:	2000      	movs	r0, #0
 800ed0a:	499b      	ldr	r1, [pc, #620]	; (800ef78 <__ieee754_log+0x370>)
 800ed0c:	f7f1 fabc 	bl	8000288 <__aeabi_dsub>
 800ed10:	4652      	mov	r2, sl
 800ed12:	4606      	mov	r6, r0
 800ed14:	460f      	mov	r7, r1
 800ed16:	465b      	mov	r3, fp
 800ed18:	4650      	mov	r0, sl
 800ed1a:	4659      	mov	r1, fp
 800ed1c:	f7f1 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ed20:	4602      	mov	r2, r0
 800ed22:	460b      	mov	r3, r1
 800ed24:	4630      	mov	r0, r6
 800ed26:	4639      	mov	r1, r7
 800ed28:	f7f1 fc66 	bl	80005f8 <__aeabi_dmul>
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	460f      	mov	r7, r1
 800ed30:	b914      	cbnz	r4, 800ed38 <__ieee754_log+0x130>
 800ed32:	4632      	mov	r2, r6
 800ed34:	463b      	mov	r3, r7
 800ed36:	e0a2      	b.n	800ee7e <__ieee754_log+0x276>
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f7f1 fbf3 	bl	8000524 <__aeabi_i2d>
 800ed3e:	a374      	add	r3, pc, #464	; (adr r3, 800ef10 <__ieee754_log+0x308>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	4680      	mov	r8, r0
 800ed46:	4689      	mov	r9, r1
 800ed48:	f7f1 fc56 	bl	80005f8 <__aeabi_dmul>
 800ed4c:	a372      	add	r3, pc, #456	; (adr r3, 800ef18 <__ieee754_log+0x310>)
 800ed4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed52:	4604      	mov	r4, r0
 800ed54:	460d      	mov	r5, r1
 800ed56:	4640      	mov	r0, r8
 800ed58:	4649      	mov	r1, r9
 800ed5a:	f7f1 fc4d 	bl	80005f8 <__aeabi_dmul>
 800ed5e:	e0a7      	b.n	800eeb0 <__ieee754_log+0x2a8>
 800ed60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed64:	f7f1 fa92 	bl	800028c <__adddf3>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4650      	mov	r0, sl
 800ed6e:	4659      	mov	r1, fp
 800ed70:	f7f1 fd6c 	bl	800084c <__aeabi_ddiv>
 800ed74:	ec41 0b18 	vmov	d8, r0, r1
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f7f1 fbd3 	bl	8000524 <__aeabi_i2d>
 800ed7e:	ec53 2b18 	vmov	r2, r3, d8
 800ed82:	ec41 0b19 	vmov	d9, r0, r1
 800ed86:	ec51 0b18 	vmov	r0, r1, d8
 800ed8a:	f7f1 fc35 	bl	80005f8 <__aeabi_dmul>
 800ed8e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ed92:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ed96:	9301      	str	r3, [sp, #4]
 800ed98:	4602      	mov	r2, r0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	4680      	mov	r8, r0
 800ed9e:	4689      	mov	r9, r1
 800eda0:	f7f1 fc2a 	bl	80005f8 <__aeabi_dmul>
 800eda4:	a360      	add	r3, pc, #384	; (adr r3, 800ef28 <__ieee754_log+0x320>)
 800eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edaa:	4606      	mov	r6, r0
 800edac:	460f      	mov	r7, r1
 800edae:	f7f1 fc23 	bl	80005f8 <__aeabi_dmul>
 800edb2:	a35f      	add	r3, pc, #380	; (adr r3, 800ef30 <__ieee754_log+0x328>)
 800edb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb8:	f7f1 fa68 	bl	800028c <__adddf3>
 800edbc:	4632      	mov	r2, r6
 800edbe:	463b      	mov	r3, r7
 800edc0:	f7f1 fc1a 	bl	80005f8 <__aeabi_dmul>
 800edc4:	a35c      	add	r3, pc, #368	; (adr r3, 800ef38 <__ieee754_log+0x330>)
 800edc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edca:	f7f1 fa5f 	bl	800028c <__adddf3>
 800edce:	4632      	mov	r2, r6
 800edd0:	463b      	mov	r3, r7
 800edd2:	f7f1 fc11 	bl	80005f8 <__aeabi_dmul>
 800edd6:	a35a      	add	r3, pc, #360	; (adr r3, 800ef40 <__ieee754_log+0x338>)
 800edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eddc:	f7f1 fa56 	bl	800028c <__adddf3>
 800ede0:	4642      	mov	r2, r8
 800ede2:	464b      	mov	r3, r9
 800ede4:	f7f1 fc08 	bl	80005f8 <__aeabi_dmul>
 800ede8:	a357      	add	r3, pc, #348	; (adr r3, 800ef48 <__ieee754_log+0x340>)
 800edea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edee:	4680      	mov	r8, r0
 800edf0:	4689      	mov	r9, r1
 800edf2:	4630      	mov	r0, r6
 800edf4:	4639      	mov	r1, r7
 800edf6:	f7f1 fbff 	bl	80005f8 <__aeabi_dmul>
 800edfa:	a355      	add	r3, pc, #340	; (adr r3, 800ef50 <__ieee754_log+0x348>)
 800edfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee00:	f7f1 fa44 	bl	800028c <__adddf3>
 800ee04:	4632      	mov	r2, r6
 800ee06:	463b      	mov	r3, r7
 800ee08:	f7f1 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ee0c:	a352      	add	r3, pc, #328	; (adr r3, 800ef58 <__ieee754_log+0x350>)
 800ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee12:	f7f1 fa3b 	bl	800028c <__adddf3>
 800ee16:	4632      	mov	r2, r6
 800ee18:	463b      	mov	r3, r7
 800ee1a:	f7f1 fbed 	bl	80005f8 <__aeabi_dmul>
 800ee1e:	460b      	mov	r3, r1
 800ee20:	4602      	mov	r2, r0
 800ee22:	4649      	mov	r1, r9
 800ee24:	4640      	mov	r0, r8
 800ee26:	f7f1 fa31 	bl	800028c <__adddf3>
 800ee2a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ee2e:	9b01      	ldr	r3, [sp, #4]
 800ee30:	3551      	adds	r5, #81	; 0x51
 800ee32:	431d      	orrs	r5, r3
 800ee34:	2d00      	cmp	r5, #0
 800ee36:	4680      	mov	r8, r0
 800ee38:	4689      	mov	r9, r1
 800ee3a:	dd48      	ble.n	800eece <__ieee754_log+0x2c6>
 800ee3c:	4b4e      	ldr	r3, [pc, #312]	; (800ef78 <__ieee754_log+0x370>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	4650      	mov	r0, sl
 800ee42:	4659      	mov	r1, fp
 800ee44:	f7f1 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ee48:	4652      	mov	r2, sl
 800ee4a:	465b      	mov	r3, fp
 800ee4c:	f7f1 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ee50:	4602      	mov	r2, r0
 800ee52:	460b      	mov	r3, r1
 800ee54:	4606      	mov	r6, r0
 800ee56:	460f      	mov	r7, r1
 800ee58:	4640      	mov	r0, r8
 800ee5a:	4649      	mov	r1, r9
 800ee5c:	f7f1 fa16 	bl	800028c <__adddf3>
 800ee60:	ec53 2b18 	vmov	r2, r3, d8
 800ee64:	f7f1 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ee68:	4680      	mov	r8, r0
 800ee6a:	4689      	mov	r9, r1
 800ee6c:	b964      	cbnz	r4, 800ee88 <__ieee754_log+0x280>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4630      	mov	r0, r6
 800ee74:	4639      	mov	r1, r7
 800ee76:	f7f1 fa07 	bl	8000288 <__aeabi_dsub>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	4650      	mov	r0, sl
 800ee80:	4659      	mov	r1, fp
 800ee82:	f7f1 fa01 	bl	8000288 <__aeabi_dsub>
 800ee86:	e6d6      	b.n	800ec36 <__ieee754_log+0x2e>
 800ee88:	a321      	add	r3, pc, #132	; (adr r3, 800ef10 <__ieee754_log+0x308>)
 800ee8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8e:	ec51 0b19 	vmov	r0, r1, d9
 800ee92:	f7f1 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ee96:	a320      	add	r3, pc, #128	; (adr r3, 800ef18 <__ieee754_log+0x310>)
 800ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9c:	4604      	mov	r4, r0
 800ee9e:	460d      	mov	r5, r1
 800eea0:	ec51 0b19 	vmov	r0, r1, d9
 800eea4:	f7f1 fba8 	bl	80005f8 <__aeabi_dmul>
 800eea8:	4642      	mov	r2, r8
 800eeaa:	464b      	mov	r3, r9
 800eeac:	f7f1 f9ee 	bl	800028c <__adddf3>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	f7f1 f9e6 	bl	8000288 <__aeabi_dsub>
 800eebc:	4652      	mov	r2, sl
 800eebe:	465b      	mov	r3, fp
 800eec0:	f7f1 f9e2 	bl	8000288 <__aeabi_dsub>
 800eec4:	4602      	mov	r2, r0
 800eec6:	460b      	mov	r3, r1
 800eec8:	4620      	mov	r0, r4
 800eeca:	4629      	mov	r1, r5
 800eecc:	e7d9      	b.n	800ee82 <__ieee754_log+0x27a>
 800eece:	4602      	mov	r2, r0
 800eed0:	460b      	mov	r3, r1
 800eed2:	4650      	mov	r0, sl
 800eed4:	4659      	mov	r1, fp
 800eed6:	f7f1 f9d7 	bl	8000288 <__aeabi_dsub>
 800eeda:	ec53 2b18 	vmov	r2, r3, d8
 800eede:	f7f1 fb8b 	bl	80005f8 <__aeabi_dmul>
 800eee2:	4606      	mov	r6, r0
 800eee4:	460f      	mov	r7, r1
 800eee6:	2c00      	cmp	r4, #0
 800eee8:	f43f af23 	beq.w	800ed32 <__ieee754_log+0x12a>
 800eeec:	a308      	add	r3, pc, #32	; (adr r3, 800ef10 <__ieee754_log+0x308>)
 800eeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef2:	ec51 0b19 	vmov	r0, r1, d9
 800eef6:	f7f1 fb7f 	bl	80005f8 <__aeabi_dmul>
 800eefa:	a307      	add	r3, pc, #28	; (adr r3, 800ef18 <__ieee754_log+0x310>)
 800eefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef00:	4604      	mov	r4, r0
 800ef02:	460d      	mov	r5, r1
 800ef04:	ec51 0b19 	vmov	r0, r1, d9
 800ef08:	e727      	b.n	800ed5a <__ieee754_log+0x152>
 800ef0a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ef60 <__ieee754_log+0x358>
 800ef0e:	e694      	b.n	800ec3a <__ieee754_log+0x32>
 800ef10:	fee00000 	.word	0xfee00000
 800ef14:	3fe62e42 	.word	0x3fe62e42
 800ef18:	35793c76 	.word	0x35793c76
 800ef1c:	3dea39ef 	.word	0x3dea39ef
 800ef20:	55555555 	.word	0x55555555
 800ef24:	3fd55555 	.word	0x3fd55555
 800ef28:	df3e5244 	.word	0xdf3e5244
 800ef2c:	3fc2f112 	.word	0x3fc2f112
 800ef30:	96cb03de 	.word	0x96cb03de
 800ef34:	3fc74664 	.word	0x3fc74664
 800ef38:	94229359 	.word	0x94229359
 800ef3c:	3fd24924 	.word	0x3fd24924
 800ef40:	55555593 	.word	0x55555593
 800ef44:	3fe55555 	.word	0x3fe55555
 800ef48:	d078c69f 	.word	0xd078c69f
 800ef4c:	3fc39a09 	.word	0x3fc39a09
 800ef50:	1d8e78af 	.word	0x1d8e78af
 800ef54:	3fcc71c5 	.word	0x3fcc71c5
 800ef58:	9997fa04 	.word	0x9997fa04
 800ef5c:	3fd99999 	.word	0x3fd99999
	...
 800ef68:	c3500000 	.word	0xc3500000
 800ef6c:	43500000 	.word	0x43500000
 800ef70:	7fefffff 	.word	0x7fefffff
 800ef74:	3ff00000 	.word	0x3ff00000
 800ef78:	3fe00000 	.word	0x3fe00000
 800ef7c:	00000000 	.word	0x00000000

0800ef80 <__ieee754_pow>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	ed2d 8b06 	vpush	{d8-d10}
 800ef88:	b08d      	sub	sp, #52	; 0x34
 800ef8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ef8e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800ef92:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ef96:	ea56 0100 	orrs.w	r1, r6, r0
 800ef9a:	ec53 2b10 	vmov	r2, r3, d0
 800ef9e:	f000 84d1 	beq.w	800f944 <__ieee754_pow+0x9c4>
 800efa2:	497f      	ldr	r1, [pc, #508]	; (800f1a0 <__ieee754_pow+0x220>)
 800efa4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800efa8:	428c      	cmp	r4, r1
 800efaa:	ee10 8a10 	vmov	r8, s0
 800efae:	4699      	mov	r9, r3
 800efb0:	dc09      	bgt.n	800efc6 <__ieee754_pow+0x46>
 800efb2:	d103      	bne.n	800efbc <__ieee754_pow+0x3c>
 800efb4:	b97a      	cbnz	r2, 800efd6 <__ieee754_pow+0x56>
 800efb6:	42a6      	cmp	r6, r4
 800efb8:	dd02      	ble.n	800efc0 <__ieee754_pow+0x40>
 800efba:	e00c      	b.n	800efd6 <__ieee754_pow+0x56>
 800efbc:	428e      	cmp	r6, r1
 800efbe:	dc02      	bgt.n	800efc6 <__ieee754_pow+0x46>
 800efc0:	428e      	cmp	r6, r1
 800efc2:	d110      	bne.n	800efe6 <__ieee754_pow+0x66>
 800efc4:	b178      	cbz	r0, 800efe6 <__ieee754_pow+0x66>
 800efc6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800efca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800efce:	ea54 0308 	orrs.w	r3, r4, r8
 800efd2:	f000 84b7 	beq.w	800f944 <__ieee754_pow+0x9c4>
 800efd6:	4873      	ldr	r0, [pc, #460]	; (800f1a4 <__ieee754_pow+0x224>)
 800efd8:	b00d      	add	sp, #52	; 0x34
 800efda:	ecbd 8b06 	vpop	{d8-d10}
 800efde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe2:	f7ff ba71 	b.w	800e4c8 <nan>
 800efe6:	f1b9 0f00 	cmp.w	r9, #0
 800efea:	da36      	bge.n	800f05a <__ieee754_pow+0xda>
 800efec:	496e      	ldr	r1, [pc, #440]	; (800f1a8 <__ieee754_pow+0x228>)
 800efee:	428e      	cmp	r6, r1
 800eff0:	dc51      	bgt.n	800f096 <__ieee754_pow+0x116>
 800eff2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800eff6:	428e      	cmp	r6, r1
 800eff8:	f340 84af 	ble.w	800f95a <__ieee754_pow+0x9da>
 800effc:	1531      	asrs	r1, r6, #20
 800effe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f002:	2914      	cmp	r1, #20
 800f004:	dd0f      	ble.n	800f026 <__ieee754_pow+0xa6>
 800f006:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800f00a:	fa20 fc01 	lsr.w	ip, r0, r1
 800f00e:	fa0c f101 	lsl.w	r1, ip, r1
 800f012:	4281      	cmp	r1, r0
 800f014:	f040 84a1 	bne.w	800f95a <__ieee754_pow+0x9da>
 800f018:	f00c 0c01 	and.w	ip, ip, #1
 800f01c:	f1cc 0102 	rsb	r1, ip, #2
 800f020:	9100      	str	r1, [sp, #0]
 800f022:	b180      	cbz	r0, 800f046 <__ieee754_pow+0xc6>
 800f024:	e059      	b.n	800f0da <__ieee754_pow+0x15a>
 800f026:	2800      	cmp	r0, #0
 800f028:	d155      	bne.n	800f0d6 <__ieee754_pow+0x156>
 800f02a:	f1c1 0114 	rsb	r1, r1, #20
 800f02e:	fa46 fc01 	asr.w	ip, r6, r1
 800f032:	fa0c f101 	lsl.w	r1, ip, r1
 800f036:	42b1      	cmp	r1, r6
 800f038:	f040 848c 	bne.w	800f954 <__ieee754_pow+0x9d4>
 800f03c:	f00c 0c01 	and.w	ip, ip, #1
 800f040:	f1cc 0102 	rsb	r1, ip, #2
 800f044:	9100      	str	r1, [sp, #0]
 800f046:	4959      	ldr	r1, [pc, #356]	; (800f1ac <__ieee754_pow+0x22c>)
 800f048:	428e      	cmp	r6, r1
 800f04a:	d12d      	bne.n	800f0a8 <__ieee754_pow+0x128>
 800f04c:	2f00      	cmp	r7, #0
 800f04e:	da79      	bge.n	800f144 <__ieee754_pow+0x1c4>
 800f050:	4956      	ldr	r1, [pc, #344]	; (800f1ac <__ieee754_pow+0x22c>)
 800f052:	2000      	movs	r0, #0
 800f054:	f7f1 fbfa 	bl	800084c <__aeabi_ddiv>
 800f058:	e016      	b.n	800f088 <__ieee754_pow+0x108>
 800f05a:	2100      	movs	r1, #0
 800f05c:	9100      	str	r1, [sp, #0]
 800f05e:	2800      	cmp	r0, #0
 800f060:	d13b      	bne.n	800f0da <__ieee754_pow+0x15a>
 800f062:	494f      	ldr	r1, [pc, #316]	; (800f1a0 <__ieee754_pow+0x220>)
 800f064:	428e      	cmp	r6, r1
 800f066:	d1ee      	bne.n	800f046 <__ieee754_pow+0xc6>
 800f068:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f06c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f070:	ea53 0308 	orrs.w	r3, r3, r8
 800f074:	f000 8466 	beq.w	800f944 <__ieee754_pow+0x9c4>
 800f078:	4b4d      	ldr	r3, [pc, #308]	; (800f1b0 <__ieee754_pow+0x230>)
 800f07a:	429c      	cmp	r4, r3
 800f07c:	dd0d      	ble.n	800f09a <__ieee754_pow+0x11a>
 800f07e:	2f00      	cmp	r7, #0
 800f080:	f280 8464 	bge.w	800f94c <__ieee754_pow+0x9cc>
 800f084:	2000      	movs	r0, #0
 800f086:	2100      	movs	r1, #0
 800f088:	ec41 0b10 	vmov	d0, r0, r1
 800f08c:	b00d      	add	sp, #52	; 0x34
 800f08e:	ecbd 8b06 	vpop	{d8-d10}
 800f092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f096:	2102      	movs	r1, #2
 800f098:	e7e0      	b.n	800f05c <__ieee754_pow+0xdc>
 800f09a:	2f00      	cmp	r7, #0
 800f09c:	daf2      	bge.n	800f084 <__ieee754_pow+0x104>
 800f09e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800f0a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f0a6:	e7ef      	b.n	800f088 <__ieee754_pow+0x108>
 800f0a8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800f0ac:	d104      	bne.n	800f0b8 <__ieee754_pow+0x138>
 800f0ae:	4610      	mov	r0, r2
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	f7f1 faa1 	bl	80005f8 <__aeabi_dmul>
 800f0b6:	e7e7      	b.n	800f088 <__ieee754_pow+0x108>
 800f0b8:	493e      	ldr	r1, [pc, #248]	; (800f1b4 <__ieee754_pow+0x234>)
 800f0ba:	428f      	cmp	r7, r1
 800f0bc:	d10d      	bne.n	800f0da <__ieee754_pow+0x15a>
 800f0be:	f1b9 0f00 	cmp.w	r9, #0
 800f0c2:	db0a      	blt.n	800f0da <__ieee754_pow+0x15a>
 800f0c4:	ec43 2b10 	vmov	d0, r2, r3
 800f0c8:	b00d      	add	sp, #52	; 0x34
 800f0ca:	ecbd 8b06 	vpop	{d8-d10}
 800f0ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d2:	f000 be83 	b.w	800fddc <__ieee754_sqrt>
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	9100      	str	r1, [sp, #0]
 800f0da:	ec43 2b10 	vmov	d0, r2, r3
 800f0de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f0e2:	f001 ff8f 	bl	8011004 <fabs>
 800f0e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0ea:	ec51 0b10 	vmov	r0, r1, d0
 800f0ee:	f1b8 0f00 	cmp.w	r8, #0
 800f0f2:	d12a      	bne.n	800f14a <__ieee754_pow+0x1ca>
 800f0f4:	b12c      	cbz	r4, 800f102 <__ieee754_pow+0x182>
 800f0f6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800f1ac <__ieee754_pow+0x22c>
 800f0fa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800f0fe:	45e6      	cmp	lr, ip
 800f100:	d123      	bne.n	800f14a <__ieee754_pow+0x1ca>
 800f102:	2f00      	cmp	r7, #0
 800f104:	da05      	bge.n	800f112 <__ieee754_pow+0x192>
 800f106:	4602      	mov	r2, r0
 800f108:	460b      	mov	r3, r1
 800f10a:	2000      	movs	r0, #0
 800f10c:	4927      	ldr	r1, [pc, #156]	; (800f1ac <__ieee754_pow+0x22c>)
 800f10e:	f7f1 fb9d 	bl	800084c <__aeabi_ddiv>
 800f112:	f1b9 0f00 	cmp.w	r9, #0
 800f116:	dab7      	bge.n	800f088 <__ieee754_pow+0x108>
 800f118:	9b00      	ldr	r3, [sp, #0]
 800f11a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f11e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f122:	4323      	orrs	r3, r4
 800f124:	d108      	bne.n	800f138 <__ieee754_pow+0x1b8>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	4610      	mov	r0, r2
 800f12c:	4619      	mov	r1, r3
 800f12e:	f7f1 f8ab 	bl	8000288 <__aeabi_dsub>
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	e78d      	b.n	800f054 <__ieee754_pow+0xd4>
 800f138:	9b00      	ldr	r3, [sp, #0]
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d1a4      	bne.n	800f088 <__ieee754_pow+0x108>
 800f13e:	4602      	mov	r2, r0
 800f140:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f144:	4610      	mov	r0, r2
 800f146:	4619      	mov	r1, r3
 800f148:	e79e      	b.n	800f088 <__ieee754_pow+0x108>
 800f14a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800f14e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800f152:	950a      	str	r5, [sp, #40]	; 0x28
 800f154:	9d00      	ldr	r5, [sp, #0]
 800f156:	46ac      	mov	ip, r5
 800f158:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f15a:	ea5c 0505 	orrs.w	r5, ip, r5
 800f15e:	d0e4      	beq.n	800f12a <__ieee754_pow+0x1aa>
 800f160:	4b15      	ldr	r3, [pc, #84]	; (800f1b8 <__ieee754_pow+0x238>)
 800f162:	429e      	cmp	r6, r3
 800f164:	f340 80fc 	ble.w	800f360 <__ieee754_pow+0x3e0>
 800f168:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f16c:	429e      	cmp	r6, r3
 800f16e:	4b10      	ldr	r3, [pc, #64]	; (800f1b0 <__ieee754_pow+0x230>)
 800f170:	dd07      	ble.n	800f182 <__ieee754_pow+0x202>
 800f172:	429c      	cmp	r4, r3
 800f174:	dc0a      	bgt.n	800f18c <__ieee754_pow+0x20c>
 800f176:	2f00      	cmp	r7, #0
 800f178:	da84      	bge.n	800f084 <__ieee754_pow+0x104>
 800f17a:	a307      	add	r3, pc, #28	; (adr r3, 800f198 <__ieee754_pow+0x218>)
 800f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f180:	e795      	b.n	800f0ae <__ieee754_pow+0x12e>
 800f182:	429c      	cmp	r4, r3
 800f184:	dbf7      	blt.n	800f176 <__ieee754_pow+0x1f6>
 800f186:	4b09      	ldr	r3, [pc, #36]	; (800f1ac <__ieee754_pow+0x22c>)
 800f188:	429c      	cmp	r4, r3
 800f18a:	dd17      	ble.n	800f1bc <__ieee754_pow+0x23c>
 800f18c:	2f00      	cmp	r7, #0
 800f18e:	dcf4      	bgt.n	800f17a <__ieee754_pow+0x1fa>
 800f190:	e778      	b.n	800f084 <__ieee754_pow+0x104>
 800f192:	bf00      	nop
 800f194:	f3af 8000 	nop.w
 800f198:	8800759c 	.word	0x8800759c
 800f19c:	7e37e43c 	.word	0x7e37e43c
 800f1a0:	7ff00000 	.word	0x7ff00000
 800f1a4:	0804089f 	.word	0x0804089f
 800f1a8:	433fffff 	.word	0x433fffff
 800f1ac:	3ff00000 	.word	0x3ff00000
 800f1b0:	3fefffff 	.word	0x3fefffff
 800f1b4:	3fe00000 	.word	0x3fe00000
 800f1b8:	41e00000 	.word	0x41e00000
 800f1bc:	4b64      	ldr	r3, [pc, #400]	; (800f350 <__ieee754_pow+0x3d0>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f7f1 f862 	bl	8000288 <__aeabi_dsub>
 800f1c4:	a356      	add	r3, pc, #344	; (adr r3, 800f320 <__ieee754_pow+0x3a0>)
 800f1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	460d      	mov	r5, r1
 800f1ce:	f7f1 fa13 	bl	80005f8 <__aeabi_dmul>
 800f1d2:	a355      	add	r3, pc, #340	; (adr r3, 800f328 <__ieee754_pow+0x3a8>)
 800f1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d8:	4606      	mov	r6, r0
 800f1da:	460f      	mov	r7, r1
 800f1dc:	4620      	mov	r0, r4
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f7f1 fa0a 	bl	80005f8 <__aeabi_dmul>
 800f1e4:	4b5b      	ldr	r3, [pc, #364]	; (800f354 <__ieee754_pow+0x3d4>)
 800f1e6:	4682      	mov	sl, r0
 800f1e8:	468b      	mov	fp, r1
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	4629      	mov	r1, r5
 800f1f0:	f7f1 fa02 	bl	80005f8 <__aeabi_dmul>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	a14d      	add	r1, pc, #308	; (adr r1, 800f330 <__ieee754_pow+0x3b0>)
 800f1fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1fe:	f7f1 f843 	bl	8000288 <__aeabi_dsub>
 800f202:	4622      	mov	r2, r4
 800f204:	462b      	mov	r3, r5
 800f206:	f7f1 f9f7 	bl	80005f8 <__aeabi_dmul>
 800f20a:	4602      	mov	r2, r0
 800f20c:	460b      	mov	r3, r1
 800f20e:	2000      	movs	r0, #0
 800f210:	4951      	ldr	r1, [pc, #324]	; (800f358 <__ieee754_pow+0x3d8>)
 800f212:	f7f1 f839 	bl	8000288 <__aeabi_dsub>
 800f216:	4622      	mov	r2, r4
 800f218:	4680      	mov	r8, r0
 800f21a:	4689      	mov	r9, r1
 800f21c:	462b      	mov	r3, r5
 800f21e:	4620      	mov	r0, r4
 800f220:	4629      	mov	r1, r5
 800f222:	f7f1 f9e9 	bl	80005f8 <__aeabi_dmul>
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	4640      	mov	r0, r8
 800f22c:	4649      	mov	r1, r9
 800f22e:	f7f1 f9e3 	bl	80005f8 <__aeabi_dmul>
 800f232:	a341      	add	r3, pc, #260	; (adr r3, 800f338 <__ieee754_pow+0x3b8>)
 800f234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f238:	f7f1 f9de 	bl	80005f8 <__aeabi_dmul>
 800f23c:	4602      	mov	r2, r0
 800f23e:	460b      	mov	r3, r1
 800f240:	4650      	mov	r0, sl
 800f242:	4659      	mov	r1, fp
 800f244:	f7f1 f820 	bl	8000288 <__aeabi_dsub>
 800f248:	4602      	mov	r2, r0
 800f24a:	460b      	mov	r3, r1
 800f24c:	4680      	mov	r8, r0
 800f24e:	4689      	mov	r9, r1
 800f250:	4630      	mov	r0, r6
 800f252:	4639      	mov	r1, r7
 800f254:	f7f1 f81a 	bl	800028c <__adddf3>
 800f258:	2400      	movs	r4, #0
 800f25a:	4632      	mov	r2, r6
 800f25c:	463b      	mov	r3, r7
 800f25e:	4620      	mov	r0, r4
 800f260:	460d      	mov	r5, r1
 800f262:	f7f1 f811 	bl	8000288 <__aeabi_dsub>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	4640      	mov	r0, r8
 800f26c:	4649      	mov	r1, r9
 800f26e:	f7f1 f80b 	bl	8000288 <__aeabi_dsub>
 800f272:	9b00      	ldr	r3, [sp, #0]
 800f274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f276:	3b01      	subs	r3, #1
 800f278:	4313      	orrs	r3, r2
 800f27a:	4682      	mov	sl, r0
 800f27c:	468b      	mov	fp, r1
 800f27e:	f040 81f1 	bne.w	800f664 <__ieee754_pow+0x6e4>
 800f282:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f340 <__ieee754_pow+0x3c0>
 800f286:	eeb0 8a47 	vmov.f32	s16, s14
 800f28a:	eef0 8a67 	vmov.f32	s17, s15
 800f28e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f292:	2600      	movs	r6, #0
 800f294:	4632      	mov	r2, r6
 800f296:	463b      	mov	r3, r7
 800f298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f29c:	f7f0 fff4 	bl	8000288 <__aeabi_dsub>
 800f2a0:	4622      	mov	r2, r4
 800f2a2:	462b      	mov	r3, r5
 800f2a4:	f7f1 f9a8 	bl	80005f8 <__aeabi_dmul>
 800f2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2ac:	4680      	mov	r8, r0
 800f2ae:	4689      	mov	r9, r1
 800f2b0:	4650      	mov	r0, sl
 800f2b2:	4659      	mov	r1, fp
 800f2b4:	f7f1 f9a0 	bl	80005f8 <__aeabi_dmul>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4640      	mov	r0, r8
 800f2be:	4649      	mov	r1, r9
 800f2c0:	f7f0 ffe4 	bl	800028c <__adddf3>
 800f2c4:	4632      	mov	r2, r6
 800f2c6:	463b      	mov	r3, r7
 800f2c8:	4680      	mov	r8, r0
 800f2ca:	4689      	mov	r9, r1
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	f7f1 f992 	bl	80005f8 <__aeabi_dmul>
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	460d      	mov	r5, r1
 800f2da:	4602      	mov	r2, r0
 800f2dc:	4649      	mov	r1, r9
 800f2de:	4640      	mov	r0, r8
 800f2e0:	f7f0 ffd4 	bl	800028c <__adddf3>
 800f2e4:	4b1d      	ldr	r3, [pc, #116]	; (800f35c <__ieee754_pow+0x3dc>)
 800f2e6:	4299      	cmp	r1, r3
 800f2e8:	ec45 4b19 	vmov	d9, r4, r5
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	460f      	mov	r7, r1
 800f2f0:	468b      	mov	fp, r1
 800f2f2:	f340 82fe 	ble.w	800f8f2 <__ieee754_pow+0x972>
 800f2f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f2fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f2fe:	4303      	orrs	r3, r0
 800f300:	f000 81f0 	beq.w	800f6e4 <__ieee754_pow+0x764>
 800f304:	a310      	add	r3, pc, #64	; (adr r3, 800f348 <__ieee754_pow+0x3c8>)
 800f306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30a:	ec51 0b18 	vmov	r0, r1, d8
 800f30e:	f7f1 f973 	bl	80005f8 <__aeabi_dmul>
 800f312:	a30d      	add	r3, pc, #52	; (adr r3, 800f348 <__ieee754_pow+0x3c8>)
 800f314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f318:	e6cb      	b.n	800f0b2 <__ieee754_pow+0x132>
 800f31a:	bf00      	nop
 800f31c:	f3af 8000 	nop.w
 800f320:	60000000 	.word	0x60000000
 800f324:	3ff71547 	.word	0x3ff71547
 800f328:	f85ddf44 	.word	0xf85ddf44
 800f32c:	3e54ae0b 	.word	0x3e54ae0b
 800f330:	55555555 	.word	0x55555555
 800f334:	3fd55555 	.word	0x3fd55555
 800f338:	652b82fe 	.word	0x652b82fe
 800f33c:	3ff71547 	.word	0x3ff71547
 800f340:	00000000 	.word	0x00000000
 800f344:	bff00000 	.word	0xbff00000
 800f348:	8800759c 	.word	0x8800759c
 800f34c:	7e37e43c 	.word	0x7e37e43c
 800f350:	3ff00000 	.word	0x3ff00000
 800f354:	3fd00000 	.word	0x3fd00000
 800f358:	3fe00000 	.word	0x3fe00000
 800f35c:	408fffff 	.word	0x408fffff
 800f360:	4bd7      	ldr	r3, [pc, #860]	; (800f6c0 <__ieee754_pow+0x740>)
 800f362:	ea03 0309 	and.w	r3, r3, r9
 800f366:	2200      	movs	r2, #0
 800f368:	b92b      	cbnz	r3, 800f376 <__ieee754_pow+0x3f6>
 800f36a:	4bd6      	ldr	r3, [pc, #856]	; (800f6c4 <__ieee754_pow+0x744>)
 800f36c:	f7f1 f944 	bl	80005f8 <__aeabi_dmul>
 800f370:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f374:	460c      	mov	r4, r1
 800f376:	1523      	asrs	r3, r4, #20
 800f378:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f37c:	4413      	add	r3, r2
 800f37e:	9309      	str	r3, [sp, #36]	; 0x24
 800f380:	4bd1      	ldr	r3, [pc, #836]	; (800f6c8 <__ieee754_pow+0x748>)
 800f382:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f386:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f38a:	429c      	cmp	r4, r3
 800f38c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f390:	dd08      	ble.n	800f3a4 <__ieee754_pow+0x424>
 800f392:	4bce      	ldr	r3, [pc, #824]	; (800f6cc <__ieee754_pow+0x74c>)
 800f394:	429c      	cmp	r4, r3
 800f396:	f340 8163 	ble.w	800f660 <__ieee754_pow+0x6e0>
 800f39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f39c:	3301      	adds	r3, #1
 800f39e:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f3a4:	2400      	movs	r4, #0
 800f3a6:	00e3      	lsls	r3, r4, #3
 800f3a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3aa:	4bc9      	ldr	r3, [pc, #804]	; (800f6d0 <__ieee754_pow+0x750>)
 800f3ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f3b0:	ed93 7b00 	vldr	d7, [r3]
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	ec53 2b17 	vmov	r2, r3, d7
 800f3ba:	eeb0 8a47 	vmov.f32	s16, s14
 800f3be:	eef0 8a67 	vmov.f32	s17, s15
 800f3c2:	4682      	mov	sl, r0
 800f3c4:	f7f0 ff60 	bl	8000288 <__aeabi_dsub>
 800f3c8:	4652      	mov	r2, sl
 800f3ca:	4606      	mov	r6, r0
 800f3cc:	460f      	mov	r7, r1
 800f3ce:	462b      	mov	r3, r5
 800f3d0:	ec51 0b18 	vmov	r0, r1, d8
 800f3d4:	f7f0 ff5a 	bl	800028c <__adddf3>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	460b      	mov	r3, r1
 800f3dc:	2000      	movs	r0, #0
 800f3de:	49bd      	ldr	r1, [pc, #756]	; (800f6d4 <__ieee754_pow+0x754>)
 800f3e0:	f7f1 fa34 	bl	800084c <__aeabi_ddiv>
 800f3e4:	ec41 0b19 	vmov	d9, r0, r1
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	4639      	mov	r1, r7
 800f3f0:	f7f1 f902 	bl	80005f8 <__aeabi_dmul>
 800f3f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f3f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f3fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f400:	2300      	movs	r3, #0
 800f402:	9304      	str	r3, [sp, #16]
 800f404:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f408:	46ab      	mov	fp, r5
 800f40a:	106d      	asrs	r5, r5, #1
 800f40c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f410:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f414:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f418:	2200      	movs	r2, #0
 800f41a:	4640      	mov	r0, r8
 800f41c:	4649      	mov	r1, r9
 800f41e:	4614      	mov	r4, r2
 800f420:	461d      	mov	r5, r3
 800f422:	f7f1 f8e9 	bl	80005f8 <__aeabi_dmul>
 800f426:	4602      	mov	r2, r0
 800f428:	460b      	mov	r3, r1
 800f42a:	4630      	mov	r0, r6
 800f42c:	4639      	mov	r1, r7
 800f42e:	f7f0 ff2b 	bl	8000288 <__aeabi_dsub>
 800f432:	ec53 2b18 	vmov	r2, r3, d8
 800f436:	4606      	mov	r6, r0
 800f438:	460f      	mov	r7, r1
 800f43a:	4620      	mov	r0, r4
 800f43c:	4629      	mov	r1, r5
 800f43e:	f7f0 ff23 	bl	8000288 <__aeabi_dsub>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	4650      	mov	r0, sl
 800f448:	4659      	mov	r1, fp
 800f44a:	f7f0 ff1d 	bl	8000288 <__aeabi_dsub>
 800f44e:	4642      	mov	r2, r8
 800f450:	464b      	mov	r3, r9
 800f452:	f7f1 f8d1 	bl	80005f8 <__aeabi_dmul>
 800f456:	4602      	mov	r2, r0
 800f458:	460b      	mov	r3, r1
 800f45a:	4630      	mov	r0, r6
 800f45c:	4639      	mov	r1, r7
 800f45e:	f7f0 ff13 	bl	8000288 <__aeabi_dsub>
 800f462:	ec53 2b19 	vmov	r2, r3, d9
 800f466:	f7f1 f8c7 	bl	80005f8 <__aeabi_dmul>
 800f46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f46e:	ec41 0b18 	vmov	d8, r0, r1
 800f472:	4610      	mov	r0, r2
 800f474:	4619      	mov	r1, r3
 800f476:	f7f1 f8bf 	bl	80005f8 <__aeabi_dmul>
 800f47a:	a37d      	add	r3, pc, #500	; (adr r3, 800f670 <__ieee754_pow+0x6f0>)
 800f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f480:	4604      	mov	r4, r0
 800f482:	460d      	mov	r5, r1
 800f484:	f7f1 f8b8 	bl	80005f8 <__aeabi_dmul>
 800f488:	a37b      	add	r3, pc, #492	; (adr r3, 800f678 <__ieee754_pow+0x6f8>)
 800f48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48e:	f7f0 fefd 	bl	800028c <__adddf3>
 800f492:	4622      	mov	r2, r4
 800f494:	462b      	mov	r3, r5
 800f496:	f7f1 f8af 	bl	80005f8 <__aeabi_dmul>
 800f49a:	a379      	add	r3, pc, #484	; (adr r3, 800f680 <__ieee754_pow+0x700>)
 800f49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a0:	f7f0 fef4 	bl	800028c <__adddf3>
 800f4a4:	4622      	mov	r2, r4
 800f4a6:	462b      	mov	r3, r5
 800f4a8:	f7f1 f8a6 	bl	80005f8 <__aeabi_dmul>
 800f4ac:	a376      	add	r3, pc, #472	; (adr r3, 800f688 <__ieee754_pow+0x708>)
 800f4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b2:	f7f0 feeb 	bl	800028c <__adddf3>
 800f4b6:	4622      	mov	r2, r4
 800f4b8:	462b      	mov	r3, r5
 800f4ba:	f7f1 f89d 	bl	80005f8 <__aeabi_dmul>
 800f4be:	a374      	add	r3, pc, #464	; (adr r3, 800f690 <__ieee754_pow+0x710>)
 800f4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c4:	f7f0 fee2 	bl	800028c <__adddf3>
 800f4c8:	4622      	mov	r2, r4
 800f4ca:	462b      	mov	r3, r5
 800f4cc:	f7f1 f894 	bl	80005f8 <__aeabi_dmul>
 800f4d0:	a371      	add	r3, pc, #452	; (adr r3, 800f698 <__ieee754_pow+0x718>)
 800f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d6:	f7f0 fed9 	bl	800028c <__adddf3>
 800f4da:	4622      	mov	r2, r4
 800f4dc:	4606      	mov	r6, r0
 800f4de:	460f      	mov	r7, r1
 800f4e0:	462b      	mov	r3, r5
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	4629      	mov	r1, r5
 800f4e6:	f7f1 f887 	bl	80005f8 <__aeabi_dmul>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	4639      	mov	r1, r7
 800f4f2:	f7f1 f881 	bl	80005f8 <__aeabi_dmul>
 800f4f6:	4642      	mov	r2, r8
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	460d      	mov	r5, r1
 800f4fc:	464b      	mov	r3, r9
 800f4fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f502:	f7f0 fec3 	bl	800028c <__adddf3>
 800f506:	ec53 2b18 	vmov	r2, r3, d8
 800f50a:	f7f1 f875 	bl	80005f8 <__aeabi_dmul>
 800f50e:	4622      	mov	r2, r4
 800f510:	462b      	mov	r3, r5
 800f512:	f7f0 febb 	bl	800028c <__adddf3>
 800f516:	4642      	mov	r2, r8
 800f518:	4682      	mov	sl, r0
 800f51a:	468b      	mov	fp, r1
 800f51c:	464b      	mov	r3, r9
 800f51e:	4640      	mov	r0, r8
 800f520:	4649      	mov	r1, r9
 800f522:	f7f1 f869 	bl	80005f8 <__aeabi_dmul>
 800f526:	4b6c      	ldr	r3, [pc, #432]	; (800f6d8 <__ieee754_pow+0x758>)
 800f528:	2200      	movs	r2, #0
 800f52a:	4606      	mov	r6, r0
 800f52c:	460f      	mov	r7, r1
 800f52e:	f7f0 fead 	bl	800028c <__adddf3>
 800f532:	4652      	mov	r2, sl
 800f534:	465b      	mov	r3, fp
 800f536:	f7f0 fea9 	bl	800028c <__adddf3>
 800f53a:	9c04      	ldr	r4, [sp, #16]
 800f53c:	460d      	mov	r5, r1
 800f53e:	4622      	mov	r2, r4
 800f540:	460b      	mov	r3, r1
 800f542:	4640      	mov	r0, r8
 800f544:	4649      	mov	r1, r9
 800f546:	f7f1 f857 	bl	80005f8 <__aeabi_dmul>
 800f54a:	4b63      	ldr	r3, [pc, #396]	; (800f6d8 <__ieee754_pow+0x758>)
 800f54c:	4680      	mov	r8, r0
 800f54e:	4689      	mov	r9, r1
 800f550:	2200      	movs	r2, #0
 800f552:	4620      	mov	r0, r4
 800f554:	4629      	mov	r1, r5
 800f556:	f7f0 fe97 	bl	8000288 <__aeabi_dsub>
 800f55a:	4632      	mov	r2, r6
 800f55c:	463b      	mov	r3, r7
 800f55e:	f7f0 fe93 	bl	8000288 <__aeabi_dsub>
 800f562:	4602      	mov	r2, r0
 800f564:	460b      	mov	r3, r1
 800f566:	4650      	mov	r0, sl
 800f568:	4659      	mov	r1, fp
 800f56a:	f7f0 fe8d 	bl	8000288 <__aeabi_dsub>
 800f56e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f572:	f7f1 f841 	bl	80005f8 <__aeabi_dmul>
 800f576:	4622      	mov	r2, r4
 800f578:	4606      	mov	r6, r0
 800f57a:	460f      	mov	r7, r1
 800f57c:	462b      	mov	r3, r5
 800f57e:	ec51 0b18 	vmov	r0, r1, d8
 800f582:	f7f1 f839 	bl	80005f8 <__aeabi_dmul>
 800f586:	4602      	mov	r2, r0
 800f588:	460b      	mov	r3, r1
 800f58a:	4630      	mov	r0, r6
 800f58c:	4639      	mov	r1, r7
 800f58e:	f7f0 fe7d 	bl	800028c <__adddf3>
 800f592:	4606      	mov	r6, r0
 800f594:	460f      	mov	r7, r1
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	4640      	mov	r0, r8
 800f59c:	4649      	mov	r1, r9
 800f59e:	f7f0 fe75 	bl	800028c <__adddf3>
 800f5a2:	9c04      	ldr	r4, [sp, #16]
 800f5a4:	a33e      	add	r3, pc, #248	; (adr r3, 800f6a0 <__ieee754_pow+0x720>)
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	460d      	mov	r5, r1
 800f5ae:	f7f1 f823 	bl	80005f8 <__aeabi_dmul>
 800f5b2:	4642      	mov	r2, r8
 800f5b4:	ec41 0b18 	vmov	d8, r0, r1
 800f5b8:	464b      	mov	r3, r9
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	4629      	mov	r1, r5
 800f5be:	f7f0 fe63 	bl	8000288 <__aeabi_dsub>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	f7f0 fe5d 	bl	8000288 <__aeabi_dsub>
 800f5ce:	a336      	add	r3, pc, #216	; (adr r3, 800f6a8 <__ieee754_pow+0x728>)
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	f7f1 f810 	bl	80005f8 <__aeabi_dmul>
 800f5d8:	a335      	add	r3, pc, #212	; (adr r3, 800f6b0 <__ieee754_pow+0x730>)
 800f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5de:	4606      	mov	r6, r0
 800f5e0:	460f      	mov	r7, r1
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	f7f1 f807 	bl	80005f8 <__aeabi_dmul>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	4639      	mov	r1, r7
 800f5f2:	f7f0 fe4b 	bl	800028c <__adddf3>
 800f5f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f5f8:	4b38      	ldr	r3, [pc, #224]	; (800f6dc <__ieee754_pow+0x75c>)
 800f5fa:	4413      	add	r3, r2
 800f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f600:	f7f0 fe44 	bl	800028c <__adddf3>
 800f604:	4682      	mov	sl, r0
 800f606:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f608:	468b      	mov	fp, r1
 800f60a:	f7f0 ff8b 	bl	8000524 <__aeabi_i2d>
 800f60e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f610:	4b33      	ldr	r3, [pc, #204]	; (800f6e0 <__ieee754_pow+0x760>)
 800f612:	4413      	add	r3, r2
 800f614:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f618:	4606      	mov	r6, r0
 800f61a:	460f      	mov	r7, r1
 800f61c:	4652      	mov	r2, sl
 800f61e:	465b      	mov	r3, fp
 800f620:	ec51 0b18 	vmov	r0, r1, d8
 800f624:	f7f0 fe32 	bl	800028c <__adddf3>
 800f628:	4642      	mov	r2, r8
 800f62a:	464b      	mov	r3, r9
 800f62c:	f7f0 fe2e 	bl	800028c <__adddf3>
 800f630:	4632      	mov	r2, r6
 800f632:	463b      	mov	r3, r7
 800f634:	f7f0 fe2a 	bl	800028c <__adddf3>
 800f638:	9c04      	ldr	r4, [sp, #16]
 800f63a:	4632      	mov	r2, r6
 800f63c:	463b      	mov	r3, r7
 800f63e:	4620      	mov	r0, r4
 800f640:	460d      	mov	r5, r1
 800f642:	f7f0 fe21 	bl	8000288 <__aeabi_dsub>
 800f646:	4642      	mov	r2, r8
 800f648:	464b      	mov	r3, r9
 800f64a:	f7f0 fe1d 	bl	8000288 <__aeabi_dsub>
 800f64e:	ec53 2b18 	vmov	r2, r3, d8
 800f652:	f7f0 fe19 	bl	8000288 <__aeabi_dsub>
 800f656:	4602      	mov	r2, r0
 800f658:	460b      	mov	r3, r1
 800f65a:	4650      	mov	r0, sl
 800f65c:	4659      	mov	r1, fp
 800f65e:	e606      	b.n	800f26e <__ieee754_pow+0x2ee>
 800f660:	2401      	movs	r4, #1
 800f662:	e6a0      	b.n	800f3a6 <__ieee754_pow+0x426>
 800f664:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800f6b8 <__ieee754_pow+0x738>
 800f668:	e60d      	b.n	800f286 <__ieee754_pow+0x306>
 800f66a:	bf00      	nop
 800f66c:	f3af 8000 	nop.w
 800f670:	4a454eef 	.word	0x4a454eef
 800f674:	3fca7e28 	.word	0x3fca7e28
 800f678:	93c9db65 	.word	0x93c9db65
 800f67c:	3fcd864a 	.word	0x3fcd864a
 800f680:	a91d4101 	.word	0xa91d4101
 800f684:	3fd17460 	.word	0x3fd17460
 800f688:	518f264d 	.word	0x518f264d
 800f68c:	3fd55555 	.word	0x3fd55555
 800f690:	db6fabff 	.word	0xdb6fabff
 800f694:	3fdb6db6 	.word	0x3fdb6db6
 800f698:	33333303 	.word	0x33333303
 800f69c:	3fe33333 	.word	0x3fe33333
 800f6a0:	e0000000 	.word	0xe0000000
 800f6a4:	3feec709 	.word	0x3feec709
 800f6a8:	dc3a03fd 	.word	0xdc3a03fd
 800f6ac:	3feec709 	.word	0x3feec709
 800f6b0:	145b01f5 	.word	0x145b01f5
 800f6b4:	be3e2fe0 	.word	0xbe3e2fe0
 800f6b8:	00000000 	.word	0x00000000
 800f6bc:	3ff00000 	.word	0x3ff00000
 800f6c0:	7ff00000 	.word	0x7ff00000
 800f6c4:	43400000 	.word	0x43400000
 800f6c8:	0003988e 	.word	0x0003988e
 800f6cc:	000bb679 	.word	0x000bb679
 800f6d0:	08040d18 	.word	0x08040d18
 800f6d4:	3ff00000 	.word	0x3ff00000
 800f6d8:	40080000 	.word	0x40080000
 800f6dc:	08040d38 	.word	0x08040d38
 800f6e0:	08040d28 	.word	0x08040d28
 800f6e4:	a3b5      	add	r3, pc, #724	; (adr r3, 800f9bc <__ieee754_pow+0xa3c>)
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	4649      	mov	r1, r9
 800f6ee:	f7f0 fdcd 	bl	800028c <__adddf3>
 800f6f2:	4622      	mov	r2, r4
 800f6f4:	ec41 0b1a 	vmov	d10, r0, r1
 800f6f8:	462b      	mov	r3, r5
 800f6fa:	4630      	mov	r0, r6
 800f6fc:	4639      	mov	r1, r7
 800f6fe:	f7f0 fdc3 	bl	8000288 <__aeabi_dsub>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	ec51 0b1a 	vmov	r0, r1, d10
 800f70a:	f7f1 fa05 	bl	8000b18 <__aeabi_dcmpgt>
 800f70e:	2800      	cmp	r0, #0
 800f710:	f47f adf8 	bne.w	800f304 <__ieee754_pow+0x384>
 800f714:	4aa4      	ldr	r2, [pc, #656]	; (800f9a8 <__ieee754_pow+0xa28>)
 800f716:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f71a:	4293      	cmp	r3, r2
 800f71c:	f340 810b 	ble.w	800f936 <__ieee754_pow+0x9b6>
 800f720:	151b      	asrs	r3, r3, #20
 800f722:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f726:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f72a:	fa4a f303 	asr.w	r3, sl, r3
 800f72e:	445b      	add	r3, fp
 800f730:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f734:	4e9d      	ldr	r6, [pc, #628]	; (800f9ac <__ieee754_pow+0xa2c>)
 800f736:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f73a:	4116      	asrs	r6, r2
 800f73c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f740:	2000      	movs	r0, #0
 800f742:	ea23 0106 	bic.w	r1, r3, r6
 800f746:	f1c2 0214 	rsb	r2, r2, #20
 800f74a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f74e:	fa4a fa02 	asr.w	sl, sl, r2
 800f752:	f1bb 0f00 	cmp.w	fp, #0
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4620      	mov	r0, r4
 800f75c:	4629      	mov	r1, r5
 800f75e:	bfb8      	it	lt
 800f760:	f1ca 0a00 	rsblt	sl, sl, #0
 800f764:	f7f0 fd90 	bl	8000288 <__aeabi_dsub>
 800f768:	ec41 0b19 	vmov	d9, r0, r1
 800f76c:	4642      	mov	r2, r8
 800f76e:	464b      	mov	r3, r9
 800f770:	ec51 0b19 	vmov	r0, r1, d9
 800f774:	f7f0 fd8a 	bl	800028c <__adddf3>
 800f778:	2400      	movs	r4, #0
 800f77a:	a379      	add	r3, pc, #484	; (adr r3, 800f960 <__ieee754_pow+0x9e0>)
 800f77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f780:	4620      	mov	r0, r4
 800f782:	460d      	mov	r5, r1
 800f784:	f7f0 ff38 	bl	80005f8 <__aeabi_dmul>
 800f788:	ec53 2b19 	vmov	r2, r3, d9
 800f78c:	4606      	mov	r6, r0
 800f78e:	460f      	mov	r7, r1
 800f790:	4620      	mov	r0, r4
 800f792:	4629      	mov	r1, r5
 800f794:	f7f0 fd78 	bl	8000288 <__aeabi_dsub>
 800f798:	4602      	mov	r2, r0
 800f79a:	460b      	mov	r3, r1
 800f79c:	4640      	mov	r0, r8
 800f79e:	4649      	mov	r1, r9
 800f7a0:	f7f0 fd72 	bl	8000288 <__aeabi_dsub>
 800f7a4:	a370      	add	r3, pc, #448	; (adr r3, 800f968 <__ieee754_pow+0x9e8>)
 800f7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7aa:	f7f0 ff25 	bl	80005f8 <__aeabi_dmul>
 800f7ae:	a370      	add	r3, pc, #448	; (adr r3, 800f970 <__ieee754_pow+0x9f0>)
 800f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b4:	4680      	mov	r8, r0
 800f7b6:	4689      	mov	r9, r1
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	4629      	mov	r1, r5
 800f7bc:	f7f0 ff1c 	bl	80005f8 <__aeabi_dmul>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	4640      	mov	r0, r8
 800f7c6:	4649      	mov	r1, r9
 800f7c8:	f7f0 fd60 	bl	800028c <__adddf3>
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	460d      	mov	r5, r1
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	f7f0 fd58 	bl	800028c <__adddf3>
 800f7dc:	4632      	mov	r2, r6
 800f7de:	463b      	mov	r3, r7
 800f7e0:	4680      	mov	r8, r0
 800f7e2:	4689      	mov	r9, r1
 800f7e4:	f7f0 fd50 	bl	8000288 <__aeabi_dsub>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	4629      	mov	r1, r5
 800f7f0:	f7f0 fd4a 	bl	8000288 <__aeabi_dsub>
 800f7f4:	4642      	mov	r2, r8
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	460f      	mov	r7, r1
 800f7fa:	464b      	mov	r3, r9
 800f7fc:	4640      	mov	r0, r8
 800f7fe:	4649      	mov	r1, r9
 800f800:	f7f0 fefa 	bl	80005f8 <__aeabi_dmul>
 800f804:	a35c      	add	r3, pc, #368	; (adr r3, 800f978 <__ieee754_pow+0x9f8>)
 800f806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80a:	4604      	mov	r4, r0
 800f80c:	460d      	mov	r5, r1
 800f80e:	f7f0 fef3 	bl	80005f8 <__aeabi_dmul>
 800f812:	a35b      	add	r3, pc, #364	; (adr r3, 800f980 <__ieee754_pow+0xa00>)
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	f7f0 fd36 	bl	8000288 <__aeabi_dsub>
 800f81c:	4622      	mov	r2, r4
 800f81e:	462b      	mov	r3, r5
 800f820:	f7f0 feea 	bl	80005f8 <__aeabi_dmul>
 800f824:	a358      	add	r3, pc, #352	; (adr r3, 800f988 <__ieee754_pow+0xa08>)
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	f7f0 fd2f 	bl	800028c <__adddf3>
 800f82e:	4622      	mov	r2, r4
 800f830:	462b      	mov	r3, r5
 800f832:	f7f0 fee1 	bl	80005f8 <__aeabi_dmul>
 800f836:	a356      	add	r3, pc, #344	; (adr r3, 800f990 <__ieee754_pow+0xa10>)
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f7f0 fd24 	bl	8000288 <__aeabi_dsub>
 800f840:	4622      	mov	r2, r4
 800f842:	462b      	mov	r3, r5
 800f844:	f7f0 fed8 	bl	80005f8 <__aeabi_dmul>
 800f848:	a353      	add	r3, pc, #332	; (adr r3, 800f998 <__ieee754_pow+0xa18>)
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	f7f0 fd1d 	bl	800028c <__adddf3>
 800f852:	4622      	mov	r2, r4
 800f854:	462b      	mov	r3, r5
 800f856:	f7f0 fecf 	bl	80005f8 <__aeabi_dmul>
 800f85a:	4602      	mov	r2, r0
 800f85c:	460b      	mov	r3, r1
 800f85e:	4640      	mov	r0, r8
 800f860:	4649      	mov	r1, r9
 800f862:	f7f0 fd11 	bl	8000288 <__aeabi_dsub>
 800f866:	4604      	mov	r4, r0
 800f868:	460d      	mov	r5, r1
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	4640      	mov	r0, r8
 800f870:	4649      	mov	r1, r9
 800f872:	f7f0 fec1 	bl	80005f8 <__aeabi_dmul>
 800f876:	2200      	movs	r2, #0
 800f878:	ec41 0b19 	vmov	d9, r0, r1
 800f87c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f880:	4620      	mov	r0, r4
 800f882:	4629      	mov	r1, r5
 800f884:	f7f0 fd00 	bl	8000288 <__aeabi_dsub>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	ec51 0b19 	vmov	r0, r1, d9
 800f890:	f7f0 ffdc 	bl	800084c <__aeabi_ddiv>
 800f894:	4632      	mov	r2, r6
 800f896:	4604      	mov	r4, r0
 800f898:	460d      	mov	r5, r1
 800f89a:	463b      	mov	r3, r7
 800f89c:	4640      	mov	r0, r8
 800f89e:	4649      	mov	r1, r9
 800f8a0:	f7f0 feaa 	bl	80005f8 <__aeabi_dmul>
 800f8a4:	4632      	mov	r2, r6
 800f8a6:	463b      	mov	r3, r7
 800f8a8:	f7f0 fcf0 	bl	800028c <__adddf3>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	4629      	mov	r1, r5
 800f8b4:	f7f0 fce8 	bl	8000288 <__aeabi_dsub>
 800f8b8:	4642      	mov	r2, r8
 800f8ba:	464b      	mov	r3, r9
 800f8bc:	f7f0 fce4 	bl	8000288 <__aeabi_dsub>
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	493a      	ldr	r1, [pc, #232]	; (800f9b0 <__ieee754_pow+0xa30>)
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	f7f0 fcde 	bl	8000288 <__aeabi_dsub>
 800f8cc:	e9cd 0100 	strd	r0, r1, [sp]
 800f8d0:	9b01      	ldr	r3, [sp, #4]
 800f8d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f8d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8da:	da2f      	bge.n	800f93c <__ieee754_pow+0x9bc>
 800f8dc:	4650      	mov	r0, sl
 800f8de:	ed9d 0b00 	vldr	d0, [sp]
 800f8e2:	f001 fcb1 	bl	8011248 <scalbn>
 800f8e6:	ec51 0b10 	vmov	r0, r1, d0
 800f8ea:	ec53 2b18 	vmov	r2, r3, d8
 800f8ee:	f7ff bbe0 	b.w	800f0b2 <__ieee754_pow+0x132>
 800f8f2:	4b30      	ldr	r3, [pc, #192]	; (800f9b4 <__ieee754_pow+0xa34>)
 800f8f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f8f8:	429e      	cmp	r6, r3
 800f8fa:	f77f af0b 	ble.w	800f714 <__ieee754_pow+0x794>
 800f8fe:	4b2e      	ldr	r3, [pc, #184]	; (800f9b8 <__ieee754_pow+0xa38>)
 800f900:	440b      	add	r3, r1
 800f902:	4303      	orrs	r3, r0
 800f904:	d00b      	beq.n	800f91e <__ieee754_pow+0x99e>
 800f906:	a326      	add	r3, pc, #152	; (adr r3, 800f9a0 <__ieee754_pow+0xa20>)
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	ec51 0b18 	vmov	r0, r1, d8
 800f910:	f7f0 fe72 	bl	80005f8 <__aeabi_dmul>
 800f914:	a322      	add	r3, pc, #136	; (adr r3, 800f9a0 <__ieee754_pow+0xa20>)
 800f916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91a:	f7ff bbca 	b.w	800f0b2 <__ieee754_pow+0x132>
 800f91e:	4622      	mov	r2, r4
 800f920:	462b      	mov	r3, r5
 800f922:	f7f0 fcb1 	bl	8000288 <__aeabi_dsub>
 800f926:	4642      	mov	r2, r8
 800f928:	464b      	mov	r3, r9
 800f92a:	f7f1 f8eb 	bl	8000b04 <__aeabi_dcmpge>
 800f92e:	2800      	cmp	r0, #0
 800f930:	f43f aef0 	beq.w	800f714 <__ieee754_pow+0x794>
 800f934:	e7e7      	b.n	800f906 <__ieee754_pow+0x986>
 800f936:	f04f 0a00 	mov.w	sl, #0
 800f93a:	e717      	b.n	800f76c <__ieee754_pow+0x7ec>
 800f93c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f940:	4619      	mov	r1, r3
 800f942:	e7d2      	b.n	800f8ea <__ieee754_pow+0x96a>
 800f944:	491a      	ldr	r1, [pc, #104]	; (800f9b0 <__ieee754_pow+0xa30>)
 800f946:	2000      	movs	r0, #0
 800f948:	f7ff bb9e 	b.w	800f088 <__ieee754_pow+0x108>
 800f94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f950:	f7ff bb9a 	b.w	800f088 <__ieee754_pow+0x108>
 800f954:	9000      	str	r0, [sp, #0]
 800f956:	f7ff bb76 	b.w	800f046 <__ieee754_pow+0xc6>
 800f95a:	2100      	movs	r1, #0
 800f95c:	f7ff bb60 	b.w	800f020 <__ieee754_pow+0xa0>
 800f960:	00000000 	.word	0x00000000
 800f964:	3fe62e43 	.word	0x3fe62e43
 800f968:	fefa39ef 	.word	0xfefa39ef
 800f96c:	3fe62e42 	.word	0x3fe62e42
 800f970:	0ca86c39 	.word	0x0ca86c39
 800f974:	be205c61 	.word	0xbe205c61
 800f978:	72bea4d0 	.word	0x72bea4d0
 800f97c:	3e663769 	.word	0x3e663769
 800f980:	c5d26bf1 	.word	0xc5d26bf1
 800f984:	3ebbbd41 	.word	0x3ebbbd41
 800f988:	af25de2c 	.word	0xaf25de2c
 800f98c:	3f11566a 	.word	0x3f11566a
 800f990:	16bebd93 	.word	0x16bebd93
 800f994:	3f66c16c 	.word	0x3f66c16c
 800f998:	5555553e 	.word	0x5555553e
 800f99c:	3fc55555 	.word	0x3fc55555
 800f9a0:	c2f8f359 	.word	0xc2f8f359
 800f9a4:	01a56e1f 	.word	0x01a56e1f
 800f9a8:	3fe00000 	.word	0x3fe00000
 800f9ac:	000fffff 	.word	0x000fffff
 800f9b0:	3ff00000 	.word	0x3ff00000
 800f9b4:	4090cbff 	.word	0x4090cbff
 800f9b8:	3f6f3400 	.word	0x3f6f3400
 800f9bc:	652b82fe 	.word	0x652b82fe
 800f9c0:	3c971547 	.word	0x3c971547
 800f9c4:	00000000 	.word	0x00000000

0800f9c8 <__ieee754_rem_pio2>:
 800f9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9cc:	ed2d 8b02 	vpush	{d8}
 800f9d0:	ec55 4b10 	vmov	r4, r5, d0
 800f9d4:	4bca      	ldr	r3, [pc, #808]	; (800fd00 <__ieee754_rem_pio2+0x338>)
 800f9d6:	b08b      	sub	sp, #44	; 0x2c
 800f9d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f9dc:	4598      	cmp	r8, r3
 800f9de:	4682      	mov	sl, r0
 800f9e0:	9502      	str	r5, [sp, #8]
 800f9e2:	dc08      	bgt.n	800f9f6 <__ieee754_rem_pio2+0x2e>
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	ed80 0b00 	vstr	d0, [r0]
 800f9ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f9f0:	f04f 0b00 	mov.w	fp, #0
 800f9f4:	e028      	b.n	800fa48 <__ieee754_rem_pio2+0x80>
 800f9f6:	4bc3      	ldr	r3, [pc, #780]	; (800fd04 <__ieee754_rem_pio2+0x33c>)
 800f9f8:	4598      	cmp	r8, r3
 800f9fa:	dc78      	bgt.n	800faee <__ieee754_rem_pio2+0x126>
 800f9fc:	9b02      	ldr	r3, [sp, #8]
 800f9fe:	4ec2      	ldr	r6, [pc, #776]	; (800fd08 <__ieee754_rem_pio2+0x340>)
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	ee10 0a10 	vmov	r0, s0
 800fa06:	a3b0      	add	r3, pc, #704	; (adr r3, 800fcc8 <__ieee754_rem_pio2+0x300>)
 800fa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	dd39      	ble.n	800fa84 <__ieee754_rem_pio2+0xbc>
 800fa10:	f7f0 fc3a 	bl	8000288 <__aeabi_dsub>
 800fa14:	45b0      	cmp	r8, r6
 800fa16:	4604      	mov	r4, r0
 800fa18:	460d      	mov	r5, r1
 800fa1a:	d01b      	beq.n	800fa54 <__ieee754_rem_pio2+0x8c>
 800fa1c:	a3ac      	add	r3, pc, #688	; (adr r3, 800fcd0 <__ieee754_rem_pio2+0x308>)
 800fa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa22:	f7f0 fc31 	bl	8000288 <__aeabi_dsub>
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	e9ca 2300 	strd	r2, r3, [sl]
 800fa2e:	4620      	mov	r0, r4
 800fa30:	4629      	mov	r1, r5
 800fa32:	f7f0 fc29 	bl	8000288 <__aeabi_dsub>
 800fa36:	a3a6      	add	r3, pc, #664	; (adr r3, 800fcd0 <__ieee754_rem_pio2+0x308>)
 800fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3c:	f7f0 fc24 	bl	8000288 <__aeabi_dsub>
 800fa40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fa44:	f04f 0b01 	mov.w	fp, #1
 800fa48:	4658      	mov	r0, fp
 800fa4a:	b00b      	add	sp, #44	; 0x2c
 800fa4c:	ecbd 8b02 	vpop	{d8}
 800fa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa54:	a3a0      	add	r3, pc, #640	; (adr r3, 800fcd8 <__ieee754_rem_pio2+0x310>)
 800fa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5a:	f7f0 fc15 	bl	8000288 <__aeabi_dsub>
 800fa5e:	a3a0      	add	r3, pc, #640	; (adr r3, 800fce0 <__ieee754_rem_pio2+0x318>)
 800fa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa64:	4604      	mov	r4, r0
 800fa66:	460d      	mov	r5, r1
 800fa68:	f7f0 fc0e 	bl	8000288 <__aeabi_dsub>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	460b      	mov	r3, r1
 800fa70:	e9ca 2300 	strd	r2, r3, [sl]
 800fa74:	4620      	mov	r0, r4
 800fa76:	4629      	mov	r1, r5
 800fa78:	f7f0 fc06 	bl	8000288 <__aeabi_dsub>
 800fa7c:	a398      	add	r3, pc, #608	; (adr r3, 800fce0 <__ieee754_rem_pio2+0x318>)
 800fa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa82:	e7db      	b.n	800fa3c <__ieee754_rem_pio2+0x74>
 800fa84:	f7f0 fc02 	bl	800028c <__adddf3>
 800fa88:	45b0      	cmp	r8, r6
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	460d      	mov	r5, r1
 800fa8e:	d016      	beq.n	800fabe <__ieee754_rem_pio2+0xf6>
 800fa90:	a38f      	add	r3, pc, #572	; (adr r3, 800fcd0 <__ieee754_rem_pio2+0x308>)
 800fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa96:	f7f0 fbf9 	bl	800028c <__adddf3>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	e9ca 2300 	strd	r2, r3, [sl]
 800faa2:	4620      	mov	r0, r4
 800faa4:	4629      	mov	r1, r5
 800faa6:	f7f0 fbef 	bl	8000288 <__aeabi_dsub>
 800faaa:	a389      	add	r3, pc, #548	; (adr r3, 800fcd0 <__ieee754_rem_pio2+0x308>)
 800faac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab0:	f7f0 fbec 	bl	800028c <__adddf3>
 800fab4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800fab8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fabc:	e7c4      	b.n	800fa48 <__ieee754_rem_pio2+0x80>
 800fabe:	a386      	add	r3, pc, #536	; (adr r3, 800fcd8 <__ieee754_rem_pio2+0x310>)
 800fac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac4:	f7f0 fbe2 	bl	800028c <__adddf3>
 800fac8:	a385      	add	r3, pc, #532	; (adr r3, 800fce0 <__ieee754_rem_pio2+0x318>)
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	4604      	mov	r4, r0
 800fad0:	460d      	mov	r5, r1
 800fad2:	f7f0 fbdb 	bl	800028c <__adddf3>
 800fad6:	4602      	mov	r2, r0
 800fad8:	460b      	mov	r3, r1
 800fada:	e9ca 2300 	strd	r2, r3, [sl]
 800fade:	4620      	mov	r0, r4
 800fae0:	4629      	mov	r1, r5
 800fae2:	f7f0 fbd1 	bl	8000288 <__aeabi_dsub>
 800fae6:	a37e      	add	r3, pc, #504	; (adr r3, 800fce0 <__ieee754_rem_pio2+0x318>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	e7e0      	b.n	800fab0 <__ieee754_rem_pio2+0xe8>
 800faee:	4b87      	ldr	r3, [pc, #540]	; (800fd0c <__ieee754_rem_pio2+0x344>)
 800faf0:	4598      	cmp	r8, r3
 800faf2:	f300 80d9 	bgt.w	800fca8 <__ieee754_rem_pio2+0x2e0>
 800faf6:	f001 fa85 	bl	8011004 <fabs>
 800fafa:	ec55 4b10 	vmov	r4, r5, d0
 800fafe:	ee10 0a10 	vmov	r0, s0
 800fb02:	a379      	add	r3, pc, #484	; (adr r3, 800fce8 <__ieee754_rem_pio2+0x320>)
 800fb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb08:	4629      	mov	r1, r5
 800fb0a:	f7f0 fd75 	bl	80005f8 <__aeabi_dmul>
 800fb0e:	4b80      	ldr	r3, [pc, #512]	; (800fd10 <__ieee754_rem_pio2+0x348>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	f7f0 fbbb 	bl	800028c <__adddf3>
 800fb16:	f7f1 f81f 	bl	8000b58 <__aeabi_d2iz>
 800fb1a:	4683      	mov	fp, r0
 800fb1c:	f7f0 fd02 	bl	8000524 <__aeabi_i2d>
 800fb20:	4602      	mov	r2, r0
 800fb22:	460b      	mov	r3, r1
 800fb24:	ec43 2b18 	vmov	d8, r2, r3
 800fb28:	a367      	add	r3, pc, #412	; (adr r3, 800fcc8 <__ieee754_rem_pio2+0x300>)
 800fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2e:	f7f0 fd63 	bl	80005f8 <__aeabi_dmul>
 800fb32:	4602      	mov	r2, r0
 800fb34:	460b      	mov	r3, r1
 800fb36:	4620      	mov	r0, r4
 800fb38:	4629      	mov	r1, r5
 800fb3a:	f7f0 fba5 	bl	8000288 <__aeabi_dsub>
 800fb3e:	a364      	add	r3, pc, #400	; (adr r3, 800fcd0 <__ieee754_rem_pio2+0x308>)
 800fb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb44:	4606      	mov	r6, r0
 800fb46:	460f      	mov	r7, r1
 800fb48:	ec51 0b18 	vmov	r0, r1, d8
 800fb4c:	f7f0 fd54 	bl	80005f8 <__aeabi_dmul>
 800fb50:	f1bb 0f1f 	cmp.w	fp, #31
 800fb54:	4604      	mov	r4, r0
 800fb56:	460d      	mov	r5, r1
 800fb58:	dc0d      	bgt.n	800fb76 <__ieee754_rem_pio2+0x1ae>
 800fb5a:	4b6e      	ldr	r3, [pc, #440]	; (800fd14 <__ieee754_rem_pio2+0x34c>)
 800fb5c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800fb60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb64:	4543      	cmp	r3, r8
 800fb66:	d006      	beq.n	800fb76 <__ieee754_rem_pio2+0x1ae>
 800fb68:	4622      	mov	r2, r4
 800fb6a:	462b      	mov	r3, r5
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	4639      	mov	r1, r7
 800fb70:	f7f0 fb8a 	bl	8000288 <__aeabi_dsub>
 800fb74:	e00f      	b.n	800fb96 <__ieee754_rem_pio2+0x1ce>
 800fb76:	462b      	mov	r3, r5
 800fb78:	4622      	mov	r2, r4
 800fb7a:	4630      	mov	r0, r6
 800fb7c:	4639      	mov	r1, r7
 800fb7e:	f7f0 fb83 	bl	8000288 <__aeabi_dsub>
 800fb82:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fb86:	9303      	str	r3, [sp, #12]
 800fb88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fb8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800fb90:	f1b8 0f10 	cmp.w	r8, #16
 800fb94:	dc02      	bgt.n	800fb9c <__ieee754_rem_pio2+0x1d4>
 800fb96:	e9ca 0100 	strd	r0, r1, [sl]
 800fb9a:	e039      	b.n	800fc10 <__ieee754_rem_pio2+0x248>
 800fb9c:	a34e      	add	r3, pc, #312	; (adr r3, 800fcd8 <__ieee754_rem_pio2+0x310>)
 800fb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba2:	ec51 0b18 	vmov	r0, r1, d8
 800fba6:	f7f0 fd27 	bl	80005f8 <__aeabi_dmul>
 800fbaa:	4604      	mov	r4, r0
 800fbac:	460d      	mov	r5, r1
 800fbae:	4602      	mov	r2, r0
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	4639      	mov	r1, r7
 800fbb6:	f7f0 fb67 	bl	8000288 <__aeabi_dsub>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	4689      	mov	r9, r1
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	4639      	mov	r1, r7
 800fbc6:	f7f0 fb5f 	bl	8000288 <__aeabi_dsub>
 800fbca:	4622      	mov	r2, r4
 800fbcc:	462b      	mov	r3, r5
 800fbce:	f7f0 fb5b 	bl	8000288 <__aeabi_dsub>
 800fbd2:	a343      	add	r3, pc, #268	; (adr r3, 800fce0 <__ieee754_rem_pio2+0x318>)
 800fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd8:	4604      	mov	r4, r0
 800fbda:	460d      	mov	r5, r1
 800fbdc:	ec51 0b18 	vmov	r0, r1, d8
 800fbe0:	f7f0 fd0a 	bl	80005f8 <__aeabi_dmul>
 800fbe4:	4622      	mov	r2, r4
 800fbe6:	462b      	mov	r3, r5
 800fbe8:	f7f0 fb4e 	bl	8000288 <__aeabi_dsub>
 800fbec:	4602      	mov	r2, r0
 800fbee:	460b      	mov	r3, r1
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	460d      	mov	r5, r1
 800fbf4:	4640      	mov	r0, r8
 800fbf6:	4649      	mov	r1, r9
 800fbf8:	f7f0 fb46 	bl	8000288 <__aeabi_dsub>
 800fbfc:	9a03      	ldr	r2, [sp, #12]
 800fbfe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	2b31      	cmp	r3, #49	; 0x31
 800fc06:	dc24      	bgt.n	800fc52 <__ieee754_rem_pio2+0x28a>
 800fc08:	e9ca 0100 	strd	r0, r1, [sl]
 800fc0c:	4646      	mov	r6, r8
 800fc0e:	464f      	mov	r7, r9
 800fc10:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc14:	4630      	mov	r0, r6
 800fc16:	4642      	mov	r2, r8
 800fc18:	464b      	mov	r3, r9
 800fc1a:	4639      	mov	r1, r7
 800fc1c:	f7f0 fb34 	bl	8000288 <__aeabi_dsub>
 800fc20:	462b      	mov	r3, r5
 800fc22:	4622      	mov	r2, r4
 800fc24:	f7f0 fb30 	bl	8000288 <__aeabi_dsub>
 800fc28:	9b02      	ldr	r3, [sp, #8]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fc30:	f6bf af0a 	bge.w	800fa48 <__ieee754_rem_pio2+0x80>
 800fc34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fc38:	f8ca 3004 	str.w	r3, [sl, #4]
 800fc3c:	f8ca 8000 	str.w	r8, [sl]
 800fc40:	f8ca 0008 	str.w	r0, [sl, #8]
 800fc44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc48:	f8ca 300c 	str.w	r3, [sl, #12]
 800fc4c:	f1cb 0b00 	rsb	fp, fp, #0
 800fc50:	e6fa      	b.n	800fa48 <__ieee754_rem_pio2+0x80>
 800fc52:	a327      	add	r3, pc, #156	; (adr r3, 800fcf0 <__ieee754_rem_pio2+0x328>)
 800fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc58:	ec51 0b18 	vmov	r0, r1, d8
 800fc5c:	f7f0 fccc 	bl	80005f8 <__aeabi_dmul>
 800fc60:	4604      	mov	r4, r0
 800fc62:	460d      	mov	r5, r1
 800fc64:	4602      	mov	r2, r0
 800fc66:	460b      	mov	r3, r1
 800fc68:	4640      	mov	r0, r8
 800fc6a:	4649      	mov	r1, r9
 800fc6c:	f7f0 fb0c 	bl	8000288 <__aeabi_dsub>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	4606      	mov	r6, r0
 800fc76:	460f      	mov	r7, r1
 800fc78:	4640      	mov	r0, r8
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	f7f0 fb04 	bl	8000288 <__aeabi_dsub>
 800fc80:	4622      	mov	r2, r4
 800fc82:	462b      	mov	r3, r5
 800fc84:	f7f0 fb00 	bl	8000288 <__aeabi_dsub>
 800fc88:	a31b      	add	r3, pc, #108	; (adr r3, 800fcf8 <__ieee754_rem_pio2+0x330>)
 800fc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8e:	4604      	mov	r4, r0
 800fc90:	460d      	mov	r5, r1
 800fc92:	ec51 0b18 	vmov	r0, r1, d8
 800fc96:	f7f0 fcaf 	bl	80005f8 <__aeabi_dmul>
 800fc9a:	4622      	mov	r2, r4
 800fc9c:	462b      	mov	r3, r5
 800fc9e:	f7f0 faf3 	bl	8000288 <__aeabi_dsub>
 800fca2:	4604      	mov	r4, r0
 800fca4:	460d      	mov	r5, r1
 800fca6:	e75f      	b.n	800fb68 <__ieee754_rem_pio2+0x1a0>
 800fca8:	4b1b      	ldr	r3, [pc, #108]	; (800fd18 <__ieee754_rem_pio2+0x350>)
 800fcaa:	4598      	cmp	r8, r3
 800fcac:	dd36      	ble.n	800fd1c <__ieee754_rem_pio2+0x354>
 800fcae:	ee10 2a10 	vmov	r2, s0
 800fcb2:	462b      	mov	r3, r5
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	f7f0 fae6 	bl	8000288 <__aeabi_dsub>
 800fcbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fcc0:	e9ca 0100 	strd	r0, r1, [sl]
 800fcc4:	e694      	b.n	800f9f0 <__ieee754_rem_pio2+0x28>
 800fcc6:	bf00      	nop
 800fcc8:	54400000 	.word	0x54400000
 800fccc:	3ff921fb 	.word	0x3ff921fb
 800fcd0:	1a626331 	.word	0x1a626331
 800fcd4:	3dd0b461 	.word	0x3dd0b461
 800fcd8:	1a600000 	.word	0x1a600000
 800fcdc:	3dd0b461 	.word	0x3dd0b461
 800fce0:	2e037073 	.word	0x2e037073
 800fce4:	3ba3198a 	.word	0x3ba3198a
 800fce8:	6dc9c883 	.word	0x6dc9c883
 800fcec:	3fe45f30 	.word	0x3fe45f30
 800fcf0:	2e000000 	.word	0x2e000000
 800fcf4:	3ba3198a 	.word	0x3ba3198a
 800fcf8:	252049c1 	.word	0x252049c1
 800fcfc:	397b839a 	.word	0x397b839a
 800fd00:	3fe921fb 	.word	0x3fe921fb
 800fd04:	4002d97b 	.word	0x4002d97b
 800fd08:	3ff921fb 	.word	0x3ff921fb
 800fd0c:	413921fb 	.word	0x413921fb
 800fd10:	3fe00000 	.word	0x3fe00000
 800fd14:	08040d48 	.word	0x08040d48
 800fd18:	7fefffff 	.word	0x7fefffff
 800fd1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fd20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fd24:	ee10 0a10 	vmov	r0, s0
 800fd28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fd2c:	ee10 6a10 	vmov	r6, s0
 800fd30:	460f      	mov	r7, r1
 800fd32:	f7f0 ff11 	bl	8000b58 <__aeabi_d2iz>
 800fd36:	f7f0 fbf5 	bl	8000524 <__aeabi_i2d>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4630      	mov	r0, r6
 800fd40:	4639      	mov	r1, r7
 800fd42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd46:	f7f0 fa9f 	bl	8000288 <__aeabi_dsub>
 800fd4a:	4b22      	ldr	r3, [pc, #136]	; (800fdd4 <__ieee754_rem_pio2+0x40c>)
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f7f0 fc53 	bl	80005f8 <__aeabi_dmul>
 800fd52:	460f      	mov	r7, r1
 800fd54:	4606      	mov	r6, r0
 800fd56:	f7f0 feff 	bl	8000b58 <__aeabi_d2iz>
 800fd5a:	f7f0 fbe3 	bl	8000524 <__aeabi_i2d>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	460b      	mov	r3, r1
 800fd62:	4630      	mov	r0, r6
 800fd64:	4639      	mov	r1, r7
 800fd66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fd6a:	f7f0 fa8d 	bl	8000288 <__aeabi_dsub>
 800fd6e:	4b19      	ldr	r3, [pc, #100]	; (800fdd4 <__ieee754_rem_pio2+0x40c>)
 800fd70:	2200      	movs	r2, #0
 800fd72:	f7f0 fc41 	bl	80005f8 <__aeabi_dmul>
 800fd76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd7a:	ad04      	add	r5, sp, #16
 800fd7c:	f04f 0803 	mov.w	r8, #3
 800fd80:	46a9      	mov	r9, r5
 800fd82:	2600      	movs	r6, #0
 800fd84:	2700      	movs	r7, #0
 800fd86:	4632      	mov	r2, r6
 800fd88:	463b      	mov	r3, r7
 800fd8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fd8e:	46c3      	mov	fp, r8
 800fd90:	3d08      	subs	r5, #8
 800fd92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fd96:	f7f0 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d1f3      	bne.n	800fd86 <__ieee754_rem_pio2+0x3be>
 800fd9e:	4b0e      	ldr	r3, [pc, #56]	; (800fdd8 <__ieee754_rem_pio2+0x410>)
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	2302      	movs	r3, #2
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	4622      	mov	r2, r4
 800fda8:	465b      	mov	r3, fp
 800fdaa:	4651      	mov	r1, sl
 800fdac:	4648      	mov	r0, r9
 800fdae:	f000 fd2b 	bl	8010808 <__kernel_rem_pio2>
 800fdb2:	9b02      	ldr	r3, [sp, #8]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	4683      	mov	fp, r0
 800fdb8:	f6bf ae46 	bge.w	800fa48 <__ieee754_rem_pio2+0x80>
 800fdbc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fdc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fdc4:	f8ca 3004 	str.w	r3, [sl, #4]
 800fdc8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800fdcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fdd0:	e73a      	b.n	800fc48 <__ieee754_rem_pio2+0x280>
 800fdd2:	bf00      	nop
 800fdd4:	41700000 	.word	0x41700000
 800fdd8:	08040dc8 	.word	0x08040dc8

0800fddc <__ieee754_sqrt>:
 800fddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde0:	ec55 4b10 	vmov	r4, r5, d0
 800fde4:	4e56      	ldr	r6, [pc, #344]	; (800ff40 <__ieee754_sqrt+0x164>)
 800fde6:	43ae      	bics	r6, r5
 800fde8:	ee10 0a10 	vmov	r0, s0
 800fdec:	ee10 3a10 	vmov	r3, s0
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	462a      	mov	r2, r5
 800fdf4:	d110      	bne.n	800fe18 <__ieee754_sqrt+0x3c>
 800fdf6:	ee10 2a10 	vmov	r2, s0
 800fdfa:	462b      	mov	r3, r5
 800fdfc:	f7f0 fbfc 	bl	80005f8 <__aeabi_dmul>
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	4620      	mov	r0, r4
 800fe06:	4629      	mov	r1, r5
 800fe08:	f7f0 fa40 	bl	800028c <__adddf3>
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	460d      	mov	r5, r1
 800fe10:	ec45 4b10 	vmov	d0, r4, r5
 800fe14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe18:	2d00      	cmp	r5, #0
 800fe1a:	dc10      	bgt.n	800fe3e <__ieee754_sqrt+0x62>
 800fe1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fe20:	4330      	orrs	r0, r6
 800fe22:	d0f5      	beq.n	800fe10 <__ieee754_sqrt+0x34>
 800fe24:	b15d      	cbz	r5, 800fe3e <__ieee754_sqrt+0x62>
 800fe26:	ee10 2a10 	vmov	r2, s0
 800fe2a:	462b      	mov	r3, r5
 800fe2c:	ee10 0a10 	vmov	r0, s0
 800fe30:	f7f0 fa2a 	bl	8000288 <__aeabi_dsub>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	f7f0 fd08 	bl	800084c <__aeabi_ddiv>
 800fe3c:	e7e6      	b.n	800fe0c <__ieee754_sqrt+0x30>
 800fe3e:	1509      	asrs	r1, r1, #20
 800fe40:	d076      	beq.n	800ff30 <__ieee754_sqrt+0x154>
 800fe42:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800fe46:	07ce      	lsls	r6, r1, #31
 800fe48:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800fe4c:	bf5e      	ittt	pl
 800fe4e:	0fda      	lsrpl	r2, r3, #31
 800fe50:	005b      	lslpl	r3, r3, #1
 800fe52:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800fe56:	0fda      	lsrs	r2, r3, #31
 800fe58:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800fe5c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800fe60:	2000      	movs	r0, #0
 800fe62:	106d      	asrs	r5, r5, #1
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	f04f 0e16 	mov.w	lr, #22
 800fe6a:	4684      	mov	ip, r0
 800fe6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fe70:	eb0c 0401 	add.w	r4, ip, r1
 800fe74:	4294      	cmp	r4, r2
 800fe76:	bfde      	ittt	le
 800fe78:	1b12      	suble	r2, r2, r4
 800fe7a:	eb04 0c01 	addle.w	ip, r4, r1
 800fe7e:	1840      	addle	r0, r0, r1
 800fe80:	0052      	lsls	r2, r2, #1
 800fe82:	f1be 0e01 	subs.w	lr, lr, #1
 800fe86:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fe8a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fe8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe92:	d1ed      	bne.n	800fe70 <__ieee754_sqrt+0x94>
 800fe94:	4671      	mov	r1, lr
 800fe96:	2720      	movs	r7, #32
 800fe98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fe9c:	4562      	cmp	r2, ip
 800fe9e:	eb04 060e 	add.w	r6, r4, lr
 800fea2:	dc02      	bgt.n	800feaa <__ieee754_sqrt+0xce>
 800fea4:	d113      	bne.n	800fece <__ieee754_sqrt+0xf2>
 800fea6:	429e      	cmp	r6, r3
 800fea8:	d811      	bhi.n	800fece <__ieee754_sqrt+0xf2>
 800feaa:	2e00      	cmp	r6, #0
 800feac:	eb06 0e04 	add.w	lr, r6, r4
 800feb0:	da43      	bge.n	800ff3a <__ieee754_sqrt+0x15e>
 800feb2:	f1be 0f00 	cmp.w	lr, #0
 800feb6:	db40      	blt.n	800ff3a <__ieee754_sqrt+0x15e>
 800feb8:	f10c 0801 	add.w	r8, ip, #1
 800febc:	eba2 020c 	sub.w	r2, r2, ip
 800fec0:	429e      	cmp	r6, r3
 800fec2:	bf88      	it	hi
 800fec4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800fec8:	1b9b      	subs	r3, r3, r6
 800feca:	4421      	add	r1, r4
 800fecc:	46c4      	mov	ip, r8
 800fece:	0052      	lsls	r2, r2, #1
 800fed0:	3f01      	subs	r7, #1
 800fed2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fed6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800feda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fede:	d1dd      	bne.n	800fe9c <__ieee754_sqrt+0xc0>
 800fee0:	4313      	orrs	r3, r2
 800fee2:	d006      	beq.n	800fef2 <__ieee754_sqrt+0x116>
 800fee4:	1c4c      	adds	r4, r1, #1
 800fee6:	bf13      	iteet	ne
 800fee8:	3101      	addne	r1, #1
 800feea:	3001      	addeq	r0, #1
 800feec:	4639      	moveq	r1, r7
 800feee:	f021 0101 	bicne.w	r1, r1, #1
 800fef2:	1043      	asrs	r3, r0, #1
 800fef4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fef8:	0849      	lsrs	r1, r1, #1
 800fefa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fefe:	07c2      	lsls	r2, r0, #31
 800ff00:	bf48      	it	mi
 800ff02:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ff06:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ff0a:	460c      	mov	r4, r1
 800ff0c:	463d      	mov	r5, r7
 800ff0e:	e77f      	b.n	800fe10 <__ieee754_sqrt+0x34>
 800ff10:	0ada      	lsrs	r2, r3, #11
 800ff12:	3815      	subs	r0, #21
 800ff14:	055b      	lsls	r3, r3, #21
 800ff16:	2a00      	cmp	r2, #0
 800ff18:	d0fa      	beq.n	800ff10 <__ieee754_sqrt+0x134>
 800ff1a:	02d7      	lsls	r7, r2, #11
 800ff1c:	d50a      	bpl.n	800ff34 <__ieee754_sqrt+0x158>
 800ff1e:	f1c1 0420 	rsb	r4, r1, #32
 800ff22:	fa23 f404 	lsr.w	r4, r3, r4
 800ff26:	1e4d      	subs	r5, r1, #1
 800ff28:	408b      	lsls	r3, r1
 800ff2a:	4322      	orrs	r2, r4
 800ff2c:	1b41      	subs	r1, r0, r5
 800ff2e:	e788      	b.n	800fe42 <__ieee754_sqrt+0x66>
 800ff30:	4608      	mov	r0, r1
 800ff32:	e7f0      	b.n	800ff16 <__ieee754_sqrt+0x13a>
 800ff34:	0052      	lsls	r2, r2, #1
 800ff36:	3101      	adds	r1, #1
 800ff38:	e7ef      	b.n	800ff1a <__ieee754_sqrt+0x13e>
 800ff3a:	46e0      	mov	r8, ip
 800ff3c:	e7be      	b.n	800febc <__ieee754_sqrt+0xe0>
 800ff3e:	bf00      	nop
 800ff40:	7ff00000 	.word	0x7ff00000

0800ff44 <__ieee754_expf>:
 800ff44:	ee10 2a10 	vmov	r2, s0
 800ff48:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ff4c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ff50:	d902      	bls.n	800ff58 <__ieee754_expf+0x14>
 800ff52:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff56:	4770      	bx	lr
 800ff58:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800ff5c:	d106      	bne.n	800ff6c <__ieee754_expf+0x28>
 800ff5e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80100a4 <__ieee754_expf+0x160>
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	bf18      	it	ne
 800ff66:	eeb0 0a67 	vmovne.f32	s0, s15
 800ff6a:	4770      	bx	lr
 800ff6c:	484e      	ldr	r0, [pc, #312]	; (80100a8 <__ieee754_expf+0x164>)
 800ff6e:	4282      	cmp	r2, r0
 800ff70:	dd04      	ble.n	800ff7c <__ieee754_expf+0x38>
 800ff72:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80100ac <__ieee754_expf+0x168>
 800ff76:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ff7a:	4770      	bx	lr
 800ff7c:	2a00      	cmp	r2, #0
 800ff7e:	da03      	bge.n	800ff88 <__ieee754_expf+0x44>
 800ff80:	4a4b      	ldr	r2, [pc, #300]	; (80100b0 <__ieee754_expf+0x16c>)
 800ff82:	4291      	cmp	r1, r2
 800ff84:	f200 808a 	bhi.w	801009c <__ieee754_expf+0x158>
 800ff88:	4a4a      	ldr	r2, [pc, #296]	; (80100b4 <__ieee754_expf+0x170>)
 800ff8a:	4291      	cmp	r1, r2
 800ff8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ff90:	d954      	bls.n	801003c <__ieee754_expf+0xf8>
 800ff92:	4a49      	ldr	r2, [pc, #292]	; (80100b8 <__ieee754_expf+0x174>)
 800ff94:	4291      	cmp	r1, r2
 800ff96:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ff9a:	d836      	bhi.n	801000a <__ieee754_expf+0xc6>
 800ff9c:	4947      	ldr	r1, [pc, #284]	; (80100bc <__ieee754_expf+0x178>)
 800ff9e:	4411      	add	r1, r2
 800ffa0:	ed91 7a00 	vldr	s14, [r1]
 800ffa4:	4946      	ldr	r1, [pc, #280]	; (80100c0 <__ieee754_expf+0x17c>)
 800ffa6:	440a      	add	r2, r1
 800ffa8:	edd2 7a00 	vldr	s15, [r2]
 800ffac:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ffb0:	f1c3 0201 	rsb	r2, r3, #1
 800ffb4:	1ad2      	subs	r2, r2, r3
 800ffb6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ffba:	ee60 6a00 	vmul.f32	s13, s0, s0
 800ffbe:	eddf 5a41 	vldr	s11, [pc, #260]	; 80100c4 <__ieee754_expf+0x180>
 800ffc2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80100c8 <__ieee754_expf+0x184>
 800ffc6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800ffca:	eddf 5a40 	vldr	s11, [pc, #256]	; 80100cc <__ieee754_expf+0x188>
 800ffce:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ffd2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80100d0 <__ieee754_expf+0x18c>
 800ffd6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800ffda:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80100d4 <__ieee754_expf+0x190>
 800ffde:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ffe2:	eeb0 5a40 	vmov.f32	s10, s0
 800ffe6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800ffea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ffee:	eef0 6a45 	vmov.f32	s13, s10
 800fff2:	ee20 5a05 	vmul.f32	s10, s0, s10
 800fff6:	bb92      	cbnz	r2, 801005e <__ieee754_expf+0x11a>
 800fff8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800fffc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010000:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010004:	ee36 0a40 	vsub.f32	s0, s12, s0
 8010008:	4770      	bx	lr
 801000a:	4b33      	ldr	r3, [pc, #204]	; (80100d8 <__ieee754_expf+0x194>)
 801000c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80100dc <__ieee754_expf+0x198>
 8010010:	4413      	add	r3, r2
 8010012:	edd3 7a00 	vldr	s15, [r3]
 8010016:	eee0 7a07 	vfma.f32	s15, s0, s14
 801001a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80100e0 <__ieee754_expf+0x19c>
 801001e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010022:	ee17 2a90 	vmov	r2, s15
 8010026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801002a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801002e:	eeb0 7a40 	vmov.f32	s14, s0
 8010032:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80100e4 <__ieee754_expf+0x1a0>
 8010036:	ee67 7a80 	vmul.f32	s15, s15, s0
 801003a:	e7bc      	b.n	800ffb6 <__ieee754_expf+0x72>
 801003c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8010040:	d20b      	bcs.n	801005a <__ieee754_expf+0x116>
 8010042:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80100ac <__ieee754_expf+0x168>
 8010046:	ee70 6a26 	vadd.f32	s13, s0, s13
 801004a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801004e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010052:	dd02      	ble.n	801005a <__ieee754_expf+0x116>
 8010054:	ee30 0a06 	vadd.f32	s0, s0, s12
 8010058:	4770      	bx	lr
 801005a:	2200      	movs	r2, #0
 801005c:	e7ad      	b.n	800ffba <__ieee754_expf+0x76>
 801005e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010062:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8010066:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801006a:	bfb8      	it	lt
 801006c:	3264      	addlt	r2, #100	; 0x64
 801006e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010072:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010076:	ee76 7a40 	vsub.f32	s15, s12, s0
 801007a:	ee17 3a90 	vmov	r3, s15
 801007e:	bfab      	itete	ge
 8010080:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010084:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010088:	ee00 3a10 	vmovge	s0, r3
 801008c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80100e8 <__ieee754_expf+0x1a4>
 8010090:	bfbc      	itt	lt
 8010092:	ee00 3a10 	vmovlt	s0, r3
 8010096:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801009a:	4770      	bx	lr
 801009c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80100a4 <__ieee754_expf+0x160>
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	00000000 	.word	0x00000000
 80100a8:	42b17217 	.word	0x42b17217
 80100ac:	7149f2ca 	.word	0x7149f2ca
 80100b0:	42cff1b5 	.word	0x42cff1b5
 80100b4:	3eb17218 	.word	0x3eb17218
 80100b8:	3f851591 	.word	0x3f851591
 80100bc:	08040ed8 	.word	0x08040ed8
 80100c0:	08040ee0 	.word	0x08040ee0
 80100c4:	3331bb4c 	.word	0x3331bb4c
 80100c8:	b5ddea0e 	.word	0xb5ddea0e
 80100cc:	388ab355 	.word	0x388ab355
 80100d0:	bb360b61 	.word	0xbb360b61
 80100d4:	3e2aaaab 	.word	0x3e2aaaab
 80100d8:	08040ed0 	.word	0x08040ed0
 80100dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80100e0:	3f317180 	.word	0x3f317180
 80100e4:	3717f7d1 	.word	0x3717f7d1
 80100e8:	0d800000 	.word	0x0d800000

080100ec <__ieee754_powf>:
 80100ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f0:	ee10 5a90 	vmov	r5, s1
 80100f4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80100f8:	ed2d 8b02 	vpush	{d8}
 80100fc:	eeb0 8a40 	vmov.f32	s16, s0
 8010100:	eef0 8a60 	vmov.f32	s17, s1
 8010104:	f000 8291 	beq.w	801062a <__ieee754_powf+0x53e>
 8010108:	ee10 8a10 	vmov	r8, s0
 801010c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8010110:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010114:	dc06      	bgt.n	8010124 <__ieee754_powf+0x38>
 8010116:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801011a:	dd0a      	ble.n	8010132 <__ieee754_powf+0x46>
 801011c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8010120:	f000 8283 	beq.w	801062a <__ieee754_powf+0x53e>
 8010124:	ecbd 8b02 	vpop	{d8}
 8010128:	48d8      	ldr	r0, [pc, #864]	; (801048c <__ieee754_powf+0x3a0>)
 801012a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801012e:	f7fa bf9d 	b.w	800b06c <nanf>
 8010132:	f1b8 0f00 	cmp.w	r8, #0
 8010136:	da1f      	bge.n	8010178 <__ieee754_powf+0x8c>
 8010138:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801013c:	da2e      	bge.n	801019c <__ieee754_powf+0xb0>
 801013e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010142:	f2c0 827b 	blt.w	801063c <__ieee754_powf+0x550>
 8010146:	15fb      	asrs	r3, r7, #23
 8010148:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801014c:	fa47 f603 	asr.w	r6, r7, r3
 8010150:	fa06 f303 	lsl.w	r3, r6, r3
 8010154:	42bb      	cmp	r3, r7
 8010156:	f040 8271 	bne.w	801063c <__ieee754_powf+0x550>
 801015a:	f006 0601 	and.w	r6, r6, #1
 801015e:	f1c6 0602 	rsb	r6, r6, #2
 8010162:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010166:	d120      	bne.n	80101aa <__ieee754_powf+0xbe>
 8010168:	2d00      	cmp	r5, #0
 801016a:	f280 8264 	bge.w	8010636 <__ieee754_powf+0x54a>
 801016e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010172:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010176:	e00d      	b.n	8010194 <__ieee754_powf+0xa8>
 8010178:	2600      	movs	r6, #0
 801017a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801017e:	d1f0      	bne.n	8010162 <__ieee754_powf+0x76>
 8010180:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8010184:	f000 8251 	beq.w	801062a <__ieee754_powf+0x53e>
 8010188:	dd0a      	ble.n	80101a0 <__ieee754_powf+0xb4>
 801018a:	2d00      	cmp	r5, #0
 801018c:	f280 8250 	bge.w	8010630 <__ieee754_powf+0x544>
 8010190:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8010490 <__ieee754_powf+0x3a4>
 8010194:	ecbd 8b02 	vpop	{d8}
 8010198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801019c:	2602      	movs	r6, #2
 801019e:	e7ec      	b.n	801017a <__ieee754_powf+0x8e>
 80101a0:	2d00      	cmp	r5, #0
 80101a2:	daf5      	bge.n	8010190 <__ieee754_powf+0xa4>
 80101a4:	eeb1 0a68 	vneg.f32	s0, s17
 80101a8:	e7f4      	b.n	8010194 <__ieee754_powf+0xa8>
 80101aa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80101ae:	d102      	bne.n	80101b6 <__ieee754_powf+0xca>
 80101b0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80101b4:	e7ee      	b.n	8010194 <__ieee754_powf+0xa8>
 80101b6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80101ba:	eeb0 0a48 	vmov.f32	s0, s16
 80101be:	d108      	bne.n	80101d2 <__ieee754_powf+0xe6>
 80101c0:	f1b8 0f00 	cmp.w	r8, #0
 80101c4:	db05      	blt.n	80101d2 <__ieee754_powf+0xe6>
 80101c6:	ecbd 8b02 	vpop	{d8}
 80101ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101ce:	f000 ba4d 	b.w	801066c <__ieee754_sqrtf>
 80101d2:	f7fe fae9 	bl	800e7a8 <fabsf>
 80101d6:	b124      	cbz	r4, 80101e2 <__ieee754_powf+0xf6>
 80101d8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80101dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80101e0:	d117      	bne.n	8010212 <__ieee754_powf+0x126>
 80101e2:	2d00      	cmp	r5, #0
 80101e4:	bfbc      	itt	lt
 80101e6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80101ea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80101ee:	f1b8 0f00 	cmp.w	r8, #0
 80101f2:	dacf      	bge.n	8010194 <__ieee754_powf+0xa8>
 80101f4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80101f8:	ea54 0306 	orrs.w	r3, r4, r6
 80101fc:	d104      	bne.n	8010208 <__ieee754_powf+0x11c>
 80101fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010202:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010206:	e7c5      	b.n	8010194 <__ieee754_powf+0xa8>
 8010208:	2e01      	cmp	r6, #1
 801020a:	d1c3      	bne.n	8010194 <__ieee754_powf+0xa8>
 801020c:	eeb1 0a40 	vneg.f32	s0, s0
 8010210:	e7c0      	b.n	8010194 <__ieee754_powf+0xa8>
 8010212:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8010216:	3801      	subs	r0, #1
 8010218:	ea56 0300 	orrs.w	r3, r6, r0
 801021c:	d104      	bne.n	8010228 <__ieee754_powf+0x13c>
 801021e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010222:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010226:	e7b5      	b.n	8010194 <__ieee754_powf+0xa8>
 8010228:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801022c:	dd6b      	ble.n	8010306 <__ieee754_powf+0x21a>
 801022e:	4b99      	ldr	r3, [pc, #612]	; (8010494 <__ieee754_powf+0x3a8>)
 8010230:	429c      	cmp	r4, r3
 8010232:	dc06      	bgt.n	8010242 <__ieee754_powf+0x156>
 8010234:	2d00      	cmp	r5, #0
 8010236:	daab      	bge.n	8010190 <__ieee754_powf+0xa4>
 8010238:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8010498 <__ieee754_powf+0x3ac>
 801023c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010240:	e7a8      	b.n	8010194 <__ieee754_powf+0xa8>
 8010242:	4b96      	ldr	r3, [pc, #600]	; (801049c <__ieee754_powf+0x3b0>)
 8010244:	429c      	cmp	r4, r3
 8010246:	dd02      	ble.n	801024e <__ieee754_powf+0x162>
 8010248:	2d00      	cmp	r5, #0
 801024a:	dcf5      	bgt.n	8010238 <__ieee754_powf+0x14c>
 801024c:	e7a0      	b.n	8010190 <__ieee754_powf+0xa4>
 801024e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010252:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010256:	eddf 6a92 	vldr	s13, [pc, #584]	; 80104a0 <__ieee754_powf+0x3b4>
 801025a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801025e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010262:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010266:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801026a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801026e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010272:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80104a4 <__ieee754_powf+0x3b8>
 8010276:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801027a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80104a8 <__ieee754_powf+0x3bc>
 801027e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010282:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80104ac <__ieee754_powf+0x3c0>
 8010286:	eef0 6a67 	vmov.f32	s13, s15
 801028a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801028e:	ee16 3a90 	vmov	r3, s13
 8010292:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010296:	f023 030f 	bic.w	r3, r3, #15
 801029a:	ee00 3a90 	vmov	s1, r3
 801029e:	eee0 0a47 	vfms.f32	s1, s0, s14
 80102a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80102a6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80102aa:	f025 050f 	bic.w	r5, r5, #15
 80102ae:	ee07 5a10 	vmov	s14, r5
 80102b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80102b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80102ba:	ee07 3a90 	vmov	s15, r3
 80102be:	eee7 0a27 	vfma.f32	s1, s14, s15
 80102c2:	3e01      	subs	r6, #1
 80102c4:	ea56 0200 	orrs.w	r2, r6, r0
 80102c8:	ee07 5a10 	vmov	s14, r5
 80102cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80102d4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80102d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80102dc:	ee17 4a10 	vmov	r4, s14
 80102e0:	bf08      	it	eq
 80102e2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80102e6:	2c00      	cmp	r4, #0
 80102e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80102ec:	f340 8184 	ble.w	80105f8 <__ieee754_powf+0x50c>
 80102f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80102f4:	f340 80fc 	ble.w	80104f0 <__ieee754_powf+0x404>
 80102f8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8010498 <__ieee754_powf+0x3ac>
 80102fc:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010300:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010304:	e746      	b.n	8010194 <__ieee754_powf+0xa8>
 8010306:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801030a:	bf01      	itttt	eq
 801030c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80104b0 <__ieee754_powf+0x3c4>
 8010310:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010314:	f06f 0217 	mvneq.w	r2, #23
 8010318:	ee17 4a90 	vmoveq	r4, s15
 801031c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8010320:	bf18      	it	ne
 8010322:	2200      	movne	r2, #0
 8010324:	3b7f      	subs	r3, #127	; 0x7f
 8010326:	4413      	add	r3, r2
 8010328:	4a62      	ldr	r2, [pc, #392]	; (80104b4 <__ieee754_powf+0x3c8>)
 801032a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801032e:	4294      	cmp	r4, r2
 8010330:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8010334:	dd06      	ble.n	8010344 <__ieee754_powf+0x258>
 8010336:	4a60      	ldr	r2, [pc, #384]	; (80104b8 <__ieee754_powf+0x3cc>)
 8010338:	4294      	cmp	r4, r2
 801033a:	f340 80a4 	ble.w	8010486 <__ieee754_powf+0x39a>
 801033e:	3301      	adds	r3, #1
 8010340:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010344:	2400      	movs	r4, #0
 8010346:	4a5d      	ldr	r2, [pc, #372]	; (80104bc <__ieee754_powf+0x3d0>)
 8010348:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801034c:	ee07 1a90 	vmov	s15, r1
 8010350:	ed92 7a00 	vldr	s14, [r2]
 8010354:	4a5a      	ldr	r2, [pc, #360]	; (80104c0 <__ieee754_powf+0x3d4>)
 8010356:	ee37 6a27 	vadd.f32	s12, s14, s15
 801035a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801035e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010362:	1049      	asrs	r1, r1, #1
 8010364:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8010368:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801036c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8010370:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8010374:	ee06 1a10 	vmov	s12, r1
 8010378:	ee65 4a26 	vmul.f32	s9, s10, s13
 801037c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8010380:	ee14 7a90 	vmov	r7, s9
 8010384:	4017      	ands	r7, r2
 8010386:	ee05 7a90 	vmov	s11, r7
 801038a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801038e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010392:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80104c4 <__ieee754_powf+0x3d8>
 8010396:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801039a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801039e:	ee25 6a26 	vmul.f32	s12, s10, s13
 80103a2:	eddf 6a49 	vldr	s13, [pc, #292]	; 80104c8 <__ieee754_powf+0x3dc>
 80103a6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80103aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80104cc <__ieee754_powf+0x3e0>
 80103ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 80103b2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80104a0 <__ieee754_powf+0x3b4>
 80103b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80103ba:	eddf 6a45 	vldr	s13, [pc, #276]	; 80104d0 <__ieee754_powf+0x3e4>
 80103be:	eee7 6a27 	vfma.f32	s13, s14, s15
 80103c2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80104d4 <__ieee754_powf+0x3e8>
 80103c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80103ca:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80103ce:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80103d2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80103d6:	eee5 6a07 	vfma.f32	s13, s10, s14
 80103da:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80103de:	eef0 7a45 	vmov.f32	s15, s10
 80103e2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80103e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80103ea:	ee17 1a90 	vmov	r1, s15
 80103ee:	4011      	ands	r1, r2
 80103f0:	ee07 1a90 	vmov	s15, r1
 80103f4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80103f8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80103fc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010400:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010404:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010408:	eeb0 6a47 	vmov.f32	s12, s14
 801040c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010410:	ee16 1a10 	vmov	r1, s12
 8010414:	4011      	ands	r1, r2
 8010416:	ee06 1a90 	vmov	s13, r1
 801041a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801041e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80104d8 <__ieee754_powf+0x3ec>
 8010422:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80104dc <__ieee754_powf+0x3f0>
 8010426:	ee37 7a66 	vsub.f32	s14, s14, s13
 801042a:	ee06 1a10 	vmov	s12, r1
 801042e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010432:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80104e0 <__ieee754_powf+0x3f4>
 8010436:	492b      	ldr	r1, [pc, #172]	; (80104e4 <__ieee754_powf+0x3f8>)
 8010438:	eea6 7a27 	vfma.f32	s14, s12, s15
 801043c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010440:	edd1 7a00 	vldr	s15, [r1]
 8010444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010448:	ee07 3a90 	vmov	s15, r3
 801044c:	4b26      	ldr	r3, [pc, #152]	; (80104e8 <__ieee754_powf+0x3fc>)
 801044e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010452:	eef0 7a47 	vmov.f32	s15, s14
 8010456:	eee6 7a25 	vfma.f32	s15, s12, s11
 801045a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801045e:	edd4 0a00 	vldr	s1, [r4]
 8010462:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801046a:	ee17 3a90 	vmov	r3, s15
 801046e:	4013      	ands	r3, r2
 8010470:	ee07 3a90 	vmov	s15, r3
 8010474:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010478:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801047c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010480:	ee77 7a66 	vsub.f32	s15, s14, s13
 8010484:	e70f      	b.n	80102a6 <__ieee754_powf+0x1ba>
 8010486:	2401      	movs	r4, #1
 8010488:	e75d      	b.n	8010346 <__ieee754_powf+0x25a>
 801048a:	bf00      	nop
 801048c:	0804089f 	.word	0x0804089f
 8010490:	00000000 	.word	0x00000000
 8010494:	3f7ffff7 	.word	0x3f7ffff7
 8010498:	7149f2ca 	.word	0x7149f2ca
 801049c:	3f800007 	.word	0x3f800007
 80104a0:	3eaaaaab 	.word	0x3eaaaaab
 80104a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80104a8:	36eca570 	.word	0x36eca570
 80104ac:	3fb8aa00 	.word	0x3fb8aa00
 80104b0:	4b800000 	.word	0x4b800000
 80104b4:	001cc471 	.word	0x001cc471
 80104b8:	005db3d6 	.word	0x005db3d6
 80104bc:	08040ee8 	.word	0x08040ee8
 80104c0:	fffff000 	.word	0xfffff000
 80104c4:	3e6c3255 	.word	0x3e6c3255
 80104c8:	3e53f142 	.word	0x3e53f142
 80104cc:	3e8ba305 	.word	0x3e8ba305
 80104d0:	3edb6db7 	.word	0x3edb6db7
 80104d4:	3f19999a 	.word	0x3f19999a
 80104d8:	3f76384f 	.word	0x3f76384f
 80104dc:	3f763800 	.word	0x3f763800
 80104e0:	369dc3a0 	.word	0x369dc3a0
 80104e4:	08040ef8 	.word	0x08040ef8
 80104e8:	08040ef0 	.word	0x08040ef0
 80104ec:	3338aa3c 	.word	0x3338aa3c
 80104f0:	f040 8092 	bne.w	8010618 <__ieee754_powf+0x52c>
 80104f4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80104ec <__ieee754_powf+0x400>
 80104f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104fc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010500:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010508:	f73f aef6 	bgt.w	80102f8 <__ieee754_powf+0x20c>
 801050c:	15db      	asrs	r3, r3, #23
 801050e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8010512:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010516:	4103      	asrs	r3, r0
 8010518:	4423      	add	r3, r4
 801051a:	4949      	ldr	r1, [pc, #292]	; (8010640 <__ieee754_powf+0x554>)
 801051c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010520:	3a7f      	subs	r2, #127	; 0x7f
 8010522:	4111      	asrs	r1, r2
 8010524:	ea23 0101 	bic.w	r1, r3, r1
 8010528:	ee07 1a10 	vmov	s14, r1
 801052c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8010530:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010534:	f1c2 0217 	rsb	r2, r2, #23
 8010538:	4110      	asrs	r0, r2
 801053a:	2c00      	cmp	r4, #0
 801053c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010540:	bfb8      	it	lt
 8010542:	4240      	neglt	r0, r0
 8010544:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010548:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8010644 <__ieee754_powf+0x558>
 801054c:	ee17 3a10 	vmov	r3, s14
 8010550:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010554:	f023 030f 	bic.w	r3, r3, #15
 8010558:	ee07 3a10 	vmov	s14, r3
 801055c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010560:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010564:	eddf 7a38 	vldr	s15, [pc, #224]	; 8010648 <__ieee754_powf+0x55c>
 8010568:	ee67 7a27 	vmul.f32	s15, s14, s15
 801056c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8010570:	eddf 6a36 	vldr	s13, [pc, #216]	; 801064c <__ieee754_powf+0x560>
 8010574:	eeb0 0a67 	vmov.f32	s0, s15
 8010578:	eea7 0a26 	vfma.f32	s0, s14, s13
 801057c:	eeb0 6a40 	vmov.f32	s12, s0
 8010580:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010584:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010588:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801058c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8010650 <__ieee754_powf+0x564>
 8010590:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8010654 <__ieee754_powf+0x568>
 8010594:	eea7 6a26 	vfma.f32	s12, s14, s13
 8010598:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8010658 <__ieee754_powf+0x56c>
 801059c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80105a0:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801065c <__ieee754_powf+0x570>
 80105a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80105a8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8010660 <__ieee754_powf+0x574>
 80105ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 80105b0:	eeb0 6a40 	vmov.f32	s12, s0
 80105b4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80105b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80105bc:	eeb0 7a46 	vmov.f32	s14, s12
 80105c0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80105c4:	ee20 6a06 	vmul.f32	s12, s0, s12
 80105c8:	eee0 7a27 	vfma.f32	s15, s0, s15
 80105cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80105d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80105d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80105dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80105e0:	ee10 3a10 	vmov	r3, s0
 80105e4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80105e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80105ec:	da1a      	bge.n	8010624 <__ieee754_powf+0x538>
 80105ee:	f000 ff1b 	bl	8011428 <scalbnf>
 80105f2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80105f6:	e5cd      	b.n	8010194 <__ieee754_powf+0xa8>
 80105f8:	4a1a      	ldr	r2, [pc, #104]	; (8010664 <__ieee754_powf+0x578>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	dd02      	ble.n	8010604 <__ieee754_powf+0x518>
 80105fe:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8010668 <__ieee754_powf+0x57c>
 8010602:	e67b      	b.n	80102fc <__ieee754_powf+0x210>
 8010604:	d108      	bne.n	8010618 <__ieee754_powf+0x52c>
 8010606:	ee37 7a67 	vsub.f32	s14, s14, s15
 801060a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010612:	f6ff af7b 	blt.w	801050c <__ieee754_powf+0x420>
 8010616:	e7f2      	b.n	80105fe <__ieee754_powf+0x512>
 8010618:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801061c:	f73f af76 	bgt.w	801050c <__ieee754_powf+0x420>
 8010620:	2000      	movs	r0, #0
 8010622:	e78f      	b.n	8010544 <__ieee754_powf+0x458>
 8010624:	ee00 3a10 	vmov	s0, r3
 8010628:	e7e3      	b.n	80105f2 <__ieee754_powf+0x506>
 801062a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801062e:	e5b1      	b.n	8010194 <__ieee754_powf+0xa8>
 8010630:	eeb0 0a68 	vmov.f32	s0, s17
 8010634:	e5ae      	b.n	8010194 <__ieee754_powf+0xa8>
 8010636:	eeb0 0a48 	vmov.f32	s0, s16
 801063a:	e5ab      	b.n	8010194 <__ieee754_powf+0xa8>
 801063c:	2600      	movs	r6, #0
 801063e:	e590      	b.n	8010162 <__ieee754_powf+0x76>
 8010640:	007fffff 	.word	0x007fffff
 8010644:	3f317218 	.word	0x3f317218
 8010648:	35bfbe8c 	.word	0x35bfbe8c
 801064c:	3f317200 	.word	0x3f317200
 8010650:	3331bb4c 	.word	0x3331bb4c
 8010654:	b5ddea0e 	.word	0xb5ddea0e
 8010658:	388ab355 	.word	0x388ab355
 801065c:	bb360b61 	.word	0xbb360b61
 8010660:	3e2aaaab 	.word	0x3e2aaaab
 8010664:	43160000 	.word	0x43160000
 8010668:	0da24260 	.word	0x0da24260

0801066c <__ieee754_sqrtf>:
 801066c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010670:	4770      	bx	lr
 8010672:	0000      	movs	r0, r0
 8010674:	0000      	movs	r0, r0
	...

08010678 <__kernel_cos>:
 8010678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067c:	ec57 6b10 	vmov	r6, r7, d0
 8010680:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010684:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010688:	ed8d 1b00 	vstr	d1, [sp]
 801068c:	da07      	bge.n	801069e <__kernel_cos+0x26>
 801068e:	ee10 0a10 	vmov	r0, s0
 8010692:	4639      	mov	r1, r7
 8010694:	f7f0 fa60 	bl	8000b58 <__aeabi_d2iz>
 8010698:	2800      	cmp	r0, #0
 801069a:	f000 8088 	beq.w	80107ae <__kernel_cos+0x136>
 801069e:	4632      	mov	r2, r6
 80106a0:	463b      	mov	r3, r7
 80106a2:	4630      	mov	r0, r6
 80106a4:	4639      	mov	r1, r7
 80106a6:	f7ef ffa7 	bl	80005f8 <__aeabi_dmul>
 80106aa:	4b51      	ldr	r3, [pc, #324]	; (80107f0 <__kernel_cos+0x178>)
 80106ac:	2200      	movs	r2, #0
 80106ae:	4604      	mov	r4, r0
 80106b0:	460d      	mov	r5, r1
 80106b2:	f7ef ffa1 	bl	80005f8 <__aeabi_dmul>
 80106b6:	a340      	add	r3, pc, #256	; (adr r3, 80107b8 <__kernel_cos+0x140>)
 80106b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106bc:	4682      	mov	sl, r0
 80106be:	468b      	mov	fp, r1
 80106c0:	4620      	mov	r0, r4
 80106c2:	4629      	mov	r1, r5
 80106c4:	f7ef ff98 	bl	80005f8 <__aeabi_dmul>
 80106c8:	a33d      	add	r3, pc, #244	; (adr r3, 80107c0 <__kernel_cos+0x148>)
 80106ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ce:	f7ef fddd 	bl	800028c <__adddf3>
 80106d2:	4622      	mov	r2, r4
 80106d4:	462b      	mov	r3, r5
 80106d6:	f7ef ff8f 	bl	80005f8 <__aeabi_dmul>
 80106da:	a33b      	add	r3, pc, #236	; (adr r3, 80107c8 <__kernel_cos+0x150>)
 80106dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e0:	f7ef fdd2 	bl	8000288 <__aeabi_dsub>
 80106e4:	4622      	mov	r2, r4
 80106e6:	462b      	mov	r3, r5
 80106e8:	f7ef ff86 	bl	80005f8 <__aeabi_dmul>
 80106ec:	a338      	add	r3, pc, #224	; (adr r3, 80107d0 <__kernel_cos+0x158>)
 80106ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f2:	f7ef fdcb 	bl	800028c <__adddf3>
 80106f6:	4622      	mov	r2, r4
 80106f8:	462b      	mov	r3, r5
 80106fa:	f7ef ff7d 	bl	80005f8 <__aeabi_dmul>
 80106fe:	a336      	add	r3, pc, #216	; (adr r3, 80107d8 <__kernel_cos+0x160>)
 8010700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010704:	f7ef fdc0 	bl	8000288 <__aeabi_dsub>
 8010708:	4622      	mov	r2, r4
 801070a:	462b      	mov	r3, r5
 801070c:	f7ef ff74 	bl	80005f8 <__aeabi_dmul>
 8010710:	a333      	add	r3, pc, #204	; (adr r3, 80107e0 <__kernel_cos+0x168>)
 8010712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010716:	f7ef fdb9 	bl	800028c <__adddf3>
 801071a:	4622      	mov	r2, r4
 801071c:	462b      	mov	r3, r5
 801071e:	f7ef ff6b 	bl	80005f8 <__aeabi_dmul>
 8010722:	4622      	mov	r2, r4
 8010724:	462b      	mov	r3, r5
 8010726:	f7ef ff67 	bl	80005f8 <__aeabi_dmul>
 801072a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801072e:	4604      	mov	r4, r0
 8010730:	460d      	mov	r5, r1
 8010732:	4630      	mov	r0, r6
 8010734:	4639      	mov	r1, r7
 8010736:	f7ef ff5f 	bl	80005f8 <__aeabi_dmul>
 801073a:	460b      	mov	r3, r1
 801073c:	4602      	mov	r2, r0
 801073e:	4629      	mov	r1, r5
 8010740:	4620      	mov	r0, r4
 8010742:	f7ef fda1 	bl	8000288 <__aeabi_dsub>
 8010746:	4b2b      	ldr	r3, [pc, #172]	; (80107f4 <__kernel_cos+0x17c>)
 8010748:	4598      	cmp	r8, r3
 801074a:	4606      	mov	r6, r0
 801074c:	460f      	mov	r7, r1
 801074e:	dc10      	bgt.n	8010772 <__kernel_cos+0xfa>
 8010750:	4602      	mov	r2, r0
 8010752:	460b      	mov	r3, r1
 8010754:	4650      	mov	r0, sl
 8010756:	4659      	mov	r1, fp
 8010758:	f7ef fd96 	bl	8000288 <__aeabi_dsub>
 801075c:	460b      	mov	r3, r1
 801075e:	4926      	ldr	r1, [pc, #152]	; (80107f8 <__kernel_cos+0x180>)
 8010760:	4602      	mov	r2, r0
 8010762:	2000      	movs	r0, #0
 8010764:	f7ef fd90 	bl	8000288 <__aeabi_dsub>
 8010768:	ec41 0b10 	vmov	d0, r0, r1
 801076c:	b003      	add	sp, #12
 801076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010772:	4b22      	ldr	r3, [pc, #136]	; (80107fc <__kernel_cos+0x184>)
 8010774:	4920      	ldr	r1, [pc, #128]	; (80107f8 <__kernel_cos+0x180>)
 8010776:	4598      	cmp	r8, r3
 8010778:	bfcc      	ite	gt
 801077a:	4d21      	ldrgt	r5, [pc, #132]	; (8010800 <__kernel_cos+0x188>)
 801077c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010780:	2400      	movs	r4, #0
 8010782:	4622      	mov	r2, r4
 8010784:	462b      	mov	r3, r5
 8010786:	2000      	movs	r0, #0
 8010788:	f7ef fd7e 	bl	8000288 <__aeabi_dsub>
 801078c:	4622      	mov	r2, r4
 801078e:	4680      	mov	r8, r0
 8010790:	4689      	mov	r9, r1
 8010792:	462b      	mov	r3, r5
 8010794:	4650      	mov	r0, sl
 8010796:	4659      	mov	r1, fp
 8010798:	f7ef fd76 	bl	8000288 <__aeabi_dsub>
 801079c:	4632      	mov	r2, r6
 801079e:	463b      	mov	r3, r7
 80107a0:	f7ef fd72 	bl	8000288 <__aeabi_dsub>
 80107a4:	4602      	mov	r2, r0
 80107a6:	460b      	mov	r3, r1
 80107a8:	4640      	mov	r0, r8
 80107aa:	4649      	mov	r1, r9
 80107ac:	e7da      	b.n	8010764 <__kernel_cos+0xec>
 80107ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80107e8 <__kernel_cos+0x170>
 80107b2:	e7db      	b.n	801076c <__kernel_cos+0xf4>
 80107b4:	f3af 8000 	nop.w
 80107b8:	be8838d4 	.word	0xbe8838d4
 80107bc:	bda8fae9 	.word	0xbda8fae9
 80107c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80107c4:	3e21ee9e 	.word	0x3e21ee9e
 80107c8:	809c52ad 	.word	0x809c52ad
 80107cc:	3e927e4f 	.word	0x3e927e4f
 80107d0:	19cb1590 	.word	0x19cb1590
 80107d4:	3efa01a0 	.word	0x3efa01a0
 80107d8:	16c15177 	.word	0x16c15177
 80107dc:	3f56c16c 	.word	0x3f56c16c
 80107e0:	5555554c 	.word	0x5555554c
 80107e4:	3fa55555 	.word	0x3fa55555
 80107e8:	00000000 	.word	0x00000000
 80107ec:	3ff00000 	.word	0x3ff00000
 80107f0:	3fe00000 	.word	0x3fe00000
 80107f4:	3fd33332 	.word	0x3fd33332
 80107f8:	3ff00000 	.word	0x3ff00000
 80107fc:	3fe90000 	.word	0x3fe90000
 8010800:	3fd20000 	.word	0x3fd20000
 8010804:	00000000 	.word	0x00000000

08010808 <__kernel_rem_pio2>:
 8010808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801080c:	ed2d 8b02 	vpush	{d8}
 8010810:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010814:	f112 0f14 	cmn.w	r2, #20
 8010818:	9308      	str	r3, [sp, #32]
 801081a:	9101      	str	r1, [sp, #4]
 801081c:	4bc6      	ldr	r3, [pc, #792]	; (8010b38 <__kernel_rem_pio2+0x330>)
 801081e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010820:	9009      	str	r0, [sp, #36]	; 0x24
 8010822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010826:	9304      	str	r3, [sp, #16]
 8010828:	9b08      	ldr	r3, [sp, #32]
 801082a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801082e:	bfa8      	it	ge
 8010830:	1ed4      	subge	r4, r2, #3
 8010832:	9306      	str	r3, [sp, #24]
 8010834:	bfb2      	itee	lt
 8010836:	2400      	movlt	r4, #0
 8010838:	2318      	movge	r3, #24
 801083a:	fb94 f4f3 	sdivge	r4, r4, r3
 801083e:	f06f 0317 	mvn.w	r3, #23
 8010842:	fb04 3303 	mla	r3, r4, r3, r3
 8010846:	eb03 0a02 	add.w	sl, r3, r2
 801084a:	9b04      	ldr	r3, [sp, #16]
 801084c:	9a06      	ldr	r2, [sp, #24]
 801084e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010b28 <__kernel_rem_pio2+0x320>
 8010852:	eb03 0802 	add.w	r8, r3, r2
 8010856:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010858:	1aa7      	subs	r7, r4, r2
 801085a:	ae20      	add	r6, sp, #128	; 0x80
 801085c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010860:	2500      	movs	r5, #0
 8010862:	4545      	cmp	r5, r8
 8010864:	dd18      	ble.n	8010898 <__kernel_rem_pio2+0x90>
 8010866:	9b08      	ldr	r3, [sp, #32]
 8010868:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801086c:	aa20      	add	r2, sp, #128	; 0x80
 801086e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8010b28 <__kernel_rem_pio2+0x320>
 8010872:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010876:	f1c3 0301 	rsb	r3, r3, #1
 801087a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801087e:	9307      	str	r3, [sp, #28]
 8010880:	9b07      	ldr	r3, [sp, #28]
 8010882:	9a04      	ldr	r2, [sp, #16]
 8010884:	4443      	add	r3, r8
 8010886:	429a      	cmp	r2, r3
 8010888:	db2f      	blt.n	80108ea <__kernel_rem_pio2+0xe2>
 801088a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801088e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010892:	462f      	mov	r7, r5
 8010894:	2600      	movs	r6, #0
 8010896:	e01b      	b.n	80108d0 <__kernel_rem_pio2+0xc8>
 8010898:	42ef      	cmn	r7, r5
 801089a:	d407      	bmi.n	80108ac <__kernel_rem_pio2+0xa4>
 801089c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80108a0:	f7ef fe40 	bl	8000524 <__aeabi_i2d>
 80108a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80108a8:	3501      	adds	r5, #1
 80108aa:	e7da      	b.n	8010862 <__kernel_rem_pio2+0x5a>
 80108ac:	ec51 0b18 	vmov	r0, r1, d8
 80108b0:	e7f8      	b.n	80108a4 <__kernel_rem_pio2+0x9c>
 80108b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108b6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80108ba:	f7ef fe9d 	bl	80005f8 <__aeabi_dmul>
 80108be:	4602      	mov	r2, r0
 80108c0:	460b      	mov	r3, r1
 80108c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108c6:	f7ef fce1 	bl	800028c <__adddf3>
 80108ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108ce:	3601      	adds	r6, #1
 80108d0:	9b06      	ldr	r3, [sp, #24]
 80108d2:	429e      	cmp	r6, r3
 80108d4:	f1a7 0708 	sub.w	r7, r7, #8
 80108d8:	ddeb      	ble.n	80108b2 <__kernel_rem_pio2+0xaa>
 80108da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108de:	3508      	adds	r5, #8
 80108e0:	ecab 7b02 	vstmia	fp!, {d7}
 80108e4:	f108 0801 	add.w	r8, r8, #1
 80108e8:	e7ca      	b.n	8010880 <__kernel_rem_pio2+0x78>
 80108ea:	9b04      	ldr	r3, [sp, #16]
 80108ec:	aa0c      	add	r2, sp, #48	; 0x30
 80108ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80108f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80108f4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80108f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80108fa:	9c04      	ldr	r4, [sp, #16]
 80108fc:	930a      	str	r3, [sp, #40]	; 0x28
 80108fe:	ab98      	add	r3, sp, #608	; 0x260
 8010900:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010904:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010908:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801090c:	f8cd b008 	str.w	fp, [sp, #8]
 8010910:	4625      	mov	r5, r4
 8010912:	2d00      	cmp	r5, #0
 8010914:	dc78      	bgt.n	8010a08 <__kernel_rem_pio2+0x200>
 8010916:	ec47 6b10 	vmov	d0, r6, r7
 801091a:	4650      	mov	r0, sl
 801091c:	f000 fc94 	bl	8011248 <scalbn>
 8010920:	ec57 6b10 	vmov	r6, r7, d0
 8010924:	2200      	movs	r2, #0
 8010926:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801092a:	ee10 0a10 	vmov	r0, s0
 801092e:	4639      	mov	r1, r7
 8010930:	f7ef fe62 	bl	80005f8 <__aeabi_dmul>
 8010934:	ec41 0b10 	vmov	d0, r0, r1
 8010938:	f000 fb7a 	bl	8011030 <floor>
 801093c:	4b7f      	ldr	r3, [pc, #508]	; (8010b3c <__kernel_rem_pio2+0x334>)
 801093e:	ec51 0b10 	vmov	r0, r1, d0
 8010942:	2200      	movs	r2, #0
 8010944:	f7ef fe58 	bl	80005f8 <__aeabi_dmul>
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	4630      	mov	r0, r6
 801094e:	4639      	mov	r1, r7
 8010950:	f7ef fc9a 	bl	8000288 <__aeabi_dsub>
 8010954:	460f      	mov	r7, r1
 8010956:	4606      	mov	r6, r0
 8010958:	f7f0 f8fe 	bl	8000b58 <__aeabi_d2iz>
 801095c:	9007      	str	r0, [sp, #28]
 801095e:	f7ef fde1 	bl	8000524 <__aeabi_i2d>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	4630      	mov	r0, r6
 8010968:	4639      	mov	r1, r7
 801096a:	f7ef fc8d 	bl	8000288 <__aeabi_dsub>
 801096e:	f1ba 0f00 	cmp.w	sl, #0
 8010972:	4606      	mov	r6, r0
 8010974:	460f      	mov	r7, r1
 8010976:	dd70      	ble.n	8010a5a <__kernel_rem_pio2+0x252>
 8010978:	1e62      	subs	r2, r4, #1
 801097a:	ab0c      	add	r3, sp, #48	; 0x30
 801097c:	9d07      	ldr	r5, [sp, #28]
 801097e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010982:	f1ca 0118 	rsb	r1, sl, #24
 8010986:	fa40 f301 	asr.w	r3, r0, r1
 801098a:	441d      	add	r5, r3
 801098c:	408b      	lsls	r3, r1
 801098e:	1ac0      	subs	r0, r0, r3
 8010990:	ab0c      	add	r3, sp, #48	; 0x30
 8010992:	9507      	str	r5, [sp, #28]
 8010994:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010998:	f1ca 0317 	rsb	r3, sl, #23
 801099c:	fa40 f303 	asr.w	r3, r0, r3
 80109a0:	9302      	str	r3, [sp, #8]
 80109a2:	9b02      	ldr	r3, [sp, #8]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	dd66      	ble.n	8010a76 <__kernel_rem_pio2+0x26e>
 80109a8:	9b07      	ldr	r3, [sp, #28]
 80109aa:	2200      	movs	r2, #0
 80109ac:	3301      	adds	r3, #1
 80109ae:	9307      	str	r3, [sp, #28]
 80109b0:	4615      	mov	r5, r2
 80109b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80109b6:	4294      	cmp	r4, r2
 80109b8:	f300 8099 	bgt.w	8010aee <__kernel_rem_pio2+0x2e6>
 80109bc:	f1ba 0f00 	cmp.w	sl, #0
 80109c0:	dd07      	ble.n	80109d2 <__kernel_rem_pio2+0x1ca>
 80109c2:	f1ba 0f01 	cmp.w	sl, #1
 80109c6:	f000 80a5 	beq.w	8010b14 <__kernel_rem_pio2+0x30c>
 80109ca:	f1ba 0f02 	cmp.w	sl, #2
 80109ce:	f000 80c1 	beq.w	8010b54 <__kernel_rem_pio2+0x34c>
 80109d2:	9b02      	ldr	r3, [sp, #8]
 80109d4:	2b02      	cmp	r3, #2
 80109d6:	d14e      	bne.n	8010a76 <__kernel_rem_pio2+0x26e>
 80109d8:	4632      	mov	r2, r6
 80109da:	463b      	mov	r3, r7
 80109dc:	4958      	ldr	r1, [pc, #352]	; (8010b40 <__kernel_rem_pio2+0x338>)
 80109de:	2000      	movs	r0, #0
 80109e0:	f7ef fc52 	bl	8000288 <__aeabi_dsub>
 80109e4:	4606      	mov	r6, r0
 80109e6:	460f      	mov	r7, r1
 80109e8:	2d00      	cmp	r5, #0
 80109ea:	d044      	beq.n	8010a76 <__kernel_rem_pio2+0x26e>
 80109ec:	4650      	mov	r0, sl
 80109ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010b30 <__kernel_rem_pio2+0x328>
 80109f2:	f000 fc29 	bl	8011248 <scalbn>
 80109f6:	4630      	mov	r0, r6
 80109f8:	4639      	mov	r1, r7
 80109fa:	ec53 2b10 	vmov	r2, r3, d0
 80109fe:	f7ef fc43 	bl	8000288 <__aeabi_dsub>
 8010a02:	4606      	mov	r6, r0
 8010a04:	460f      	mov	r7, r1
 8010a06:	e036      	b.n	8010a76 <__kernel_rem_pio2+0x26e>
 8010a08:	4b4e      	ldr	r3, [pc, #312]	; (8010b44 <__kernel_rem_pio2+0x33c>)
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	4639      	mov	r1, r7
 8010a10:	f7ef fdf2 	bl	80005f8 <__aeabi_dmul>
 8010a14:	f7f0 f8a0 	bl	8000b58 <__aeabi_d2iz>
 8010a18:	f7ef fd84 	bl	8000524 <__aeabi_i2d>
 8010a1c:	4b4a      	ldr	r3, [pc, #296]	; (8010b48 <__kernel_rem_pio2+0x340>)
 8010a1e:	2200      	movs	r2, #0
 8010a20:	4680      	mov	r8, r0
 8010a22:	4689      	mov	r9, r1
 8010a24:	f7ef fde8 	bl	80005f8 <__aeabi_dmul>
 8010a28:	4602      	mov	r2, r0
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	4639      	mov	r1, r7
 8010a30:	f7ef fc2a 	bl	8000288 <__aeabi_dsub>
 8010a34:	f7f0 f890 	bl	8000b58 <__aeabi_d2iz>
 8010a38:	9b02      	ldr	r3, [sp, #8]
 8010a3a:	f843 0b04 	str.w	r0, [r3], #4
 8010a3e:	3d01      	subs	r5, #1
 8010a40:	9302      	str	r3, [sp, #8]
 8010a42:	ab70      	add	r3, sp, #448	; 0x1c0
 8010a44:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4c:	4640      	mov	r0, r8
 8010a4e:	4649      	mov	r1, r9
 8010a50:	f7ef fc1c 	bl	800028c <__adddf3>
 8010a54:	4606      	mov	r6, r0
 8010a56:	460f      	mov	r7, r1
 8010a58:	e75b      	b.n	8010912 <__kernel_rem_pio2+0x10a>
 8010a5a:	d105      	bne.n	8010a68 <__kernel_rem_pio2+0x260>
 8010a5c:	1e63      	subs	r3, r4, #1
 8010a5e:	aa0c      	add	r2, sp, #48	; 0x30
 8010a60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010a64:	15c3      	asrs	r3, r0, #23
 8010a66:	e79b      	b.n	80109a0 <__kernel_rem_pio2+0x198>
 8010a68:	4b38      	ldr	r3, [pc, #224]	; (8010b4c <__kernel_rem_pio2+0x344>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	f7f0 f84a 	bl	8000b04 <__aeabi_dcmpge>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d139      	bne.n	8010ae8 <__kernel_rem_pio2+0x2e0>
 8010a74:	9002      	str	r0, [sp, #8]
 8010a76:	2200      	movs	r2, #0
 8010a78:	2300      	movs	r3, #0
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	4639      	mov	r1, r7
 8010a7e:	f7f0 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	f000 80b4 	beq.w	8010bf0 <__kernel_rem_pio2+0x3e8>
 8010a88:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8010a8c:	465b      	mov	r3, fp
 8010a8e:	2200      	movs	r2, #0
 8010a90:	9904      	ldr	r1, [sp, #16]
 8010a92:	428b      	cmp	r3, r1
 8010a94:	da65      	bge.n	8010b62 <__kernel_rem_pio2+0x35a>
 8010a96:	2a00      	cmp	r2, #0
 8010a98:	d07b      	beq.n	8010b92 <__kernel_rem_pio2+0x38a>
 8010a9a:	ab0c      	add	r3, sp, #48	; 0x30
 8010a9c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010aa0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f000 80a0 	beq.w	8010bea <__kernel_rem_pio2+0x3e2>
 8010aaa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010b30 <__kernel_rem_pio2+0x328>
 8010aae:	4650      	mov	r0, sl
 8010ab0:	f000 fbca 	bl	8011248 <scalbn>
 8010ab4:	4f23      	ldr	r7, [pc, #140]	; (8010b44 <__kernel_rem_pio2+0x33c>)
 8010ab6:	ec55 4b10 	vmov	r4, r5, d0
 8010aba:	46d8      	mov	r8, fp
 8010abc:	2600      	movs	r6, #0
 8010abe:	f1b8 0f00 	cmp.w	r8, #0
 8010ac2:	f280 80cf 	bge.w	8010c64 <__kernel_rem_pio2+0x45c>
 8010ac6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8010b28 <__kernel_rem_pio2+0x320>
 8010aca:	465f      	mov	r7, fp
 8010acc:	f04f 0800 	mov.w	r8, #0
 8010ad0:	2f00      	cmp	r7, #0
 8010ad2:	f2c0 80fd 	blt.w	8010cd0 <__kernel_rem_pio2+0x4c8>
 8010ad6:	ab70      	add	r3, sp, #448	; 0x1c0
 8010ad8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8010b50 <__kernel_rem_pio2+0x348>
 8010adc:	ec55 4b18 	vmov	r4, r5, d8
 8010ae0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8010ae4:	2600      	movs	r6, #0
 8010ae6:	e0e5      	b.n	8010cb4 <__kernel_rem_pio2+0x4ac>
 8010ae8:	2302      	movs	r3, #2
 8010aea:	9302      	str	r3, [sp, #8]
 8010aec:	e75c      	b.n	80109a8 <__kernel_rem_pio2+0x1a0>
 8010aee:	f8db 3000 	ldr.w	r3, [fp]
 8010af2:	b955      	cbnz	r5, 8010b0a <__kernel_rem_pio2+0x302>
 8010af4:	b123      	cbz	r3, 8010b00 <__kernel_rem_pio2+0x2f8>
 8010af6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010afa:	f8cb 3000 	str.w	r3, [fp]
 8010afe:	2301      	movs	r3, #1
 8010b00:	3201      	adds	r2, #1
 8010b02:	f10b 0b04 	add.w	fp, fp, #4
 8010b06:	461d      	mov	r5, r3
 8010b08:	e755      	b.n	80109b6 <__kernel_rem_pio2+0x1ae>
 8010b0a:	1acb      	subs	r3, r1, r3
 8010b0c:	f8cb 3000 	str.w	r3, [fp]
 8010b10:	462b      	mov	r3, r5
 8010b12:	e7f5      	b.n	8010b00 <__kernel_rem_pio2+0x2f8>
 8010b14:	1e62      	subs	r2, r4, #1
 8010b16:	ab0c      	add	r3, sp, #48	; 0x30
 8010b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010b20:	a90c      	add	r1, sp, #48	; 0x30
 8010b22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010b26:	e754      	b.n	80109d2 <__kernel_rem_pio2+0x1ca>
	...
 8010b34:	3ff00000 	.word	0x3ff00000
 8010b38:	08040f40 	.word	0x08040f40
 8010b3c:	40200000 	.word	0x40200000
 8010b40:	3ff00000 	.word	0x3ff00000
 8010b44:	3e700000 	.word	0x3e700000
 8010b48:	41700000 	.word	0x41700000
 8010b4c:	3fe00000 	.word	0x3fe00000
 8010b50:	08040f00 	.word	0x08040f00
 8010b54:	1e62      	subs	r2, r4, #1
 8010b56:	ab0c      	add	r3, sp, #48	; 0x30
 8010b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b5c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010b60:	e7de      	b.n	8010b20 <__kernel_rem_pio2+0x318>
 8010b62:	a90c      	add	r1, sp, #48	; 0x30
 8010b64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	430a      	orrs	r2, r1
 8010b6c:	e790      	b.n	8010a90 <__kernel_rem_pio2+0x288>
 8010b6e:	3301      	adds	r3, #1
 8010b70:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010b74:	2900      	cmp	r1, #0
 8010b76:	d0fa      	beq.n	8010b6e <__kernel_rem_pio2+0x366>
 8010b78:	9a08      	ldr	r2, [sp, #32]
 8010b7a:	18e3      	adds	r3, r4, r3
 8010b7c:	18a6      	adds	r6, r4, r2
 8010b7e:	aa20      	add	r2, sp, #128	; 0x80
 8010b80:	1c65      	adds	r5, r4, #1
 8010b82:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010b86:	9302      	str	r3, [sp, #8]
 8010b88:	9b02      	ldr	r3, [sp, #8]
 8010b8a:	42ab      	cmp	r3, r5
 8010b8c:	da04      	bge.n	8010b98 <__kernel_rem_pio2+0x390>
 8010b8e:	461c      	mov	r4, r3
 8010b90:	e6b5      	b.n	80108fe <__kernel_rem_pio2+0xf6>
 8010b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b94:	2301      	movs	r3, #1
 8010b96:	e7eb      	b.n	8010b70 <__kernel_rem_pio2+0x368>
 8010b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b9e:	f7ef fcc1 	bl	8000524 <__aeabi_i2d>
 8010ba2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ba8:	46b3      	mov	fp, r6
 8010baa:	461c      	mov	r4, r3
 8010bac:	2700      	movs	r7, #0
 8010bae:	f04f 0800 	mov.w	r8, #0
 8010bb2:	f04f 0900 	mov.w	r9, #0
 8010bb6:	9b06      	ldr	r3, [sp, #24]
 8010bb8:	429f      	cmp	r7, r3
 8010bba:	dd06      	ble.n	8010bca <__kernel_rem_pio2+0x3c2>
 8010bbc:	ab70      	add	r3, sp, #448	; 0x1c0
 8010bbe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010bc2:	e9c3 8900 	strd	r8, r9, [r3]
 8010bc6:	3501      	adds	r5, #1
 8010bc8:	e7de      	b.n	8010b88 <__kernel_rem_pio2+0x380>
 8010bca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010bce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010bd2:	f7ef fd11 	bl	80005f8 <__aeabi_dmul>
 8010bd6:	4602      	mov	r2, r0
 8010bd8:	460b      	mov	r3, r1
 8010bda:	4640      	mov	r0, r8
 8010bdc:	4649      	mov	r1, r9
 8010bde:	f7ef fb55 	bl	800028c <__adddf3>
 8010be2:	3701      	adds	r7, #1
 8010be4:	4680      	mov	r8, r0
 8010be6:	4689      	mov	r9, r1
 8010be8:	e7e5      	b.n	8010bb6 <__kernel_rem_pio2+0x3ae>
 8010bea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010bee:	e754      	b.n	8010a9a <__kernel_rem_pio2+0x292>
 8010bf0:	ec47 6b10 	vmov	d0, r6, r7
 8010bf4:	f1ca 0000 	rsb	r0, sl, #0
 8010bf8:	f000 fb26 	bl	8011248 <scalbn>
 8010bfc:	ec57 6b10 	vmov	r6, r7, d0
 8010c00:	4b9f      	ldr	r3, [pc, #636]	; (8010e80 <__kernel_rem_pio2+0x678>)
 8010c02:	ee10 0a10 	vmov	r0, s0
 8010c06:	2200      	movs	r2, #0
 8010c08:	4639      	mov	r1, r7
 8010c0a:	f7ef ff7b 	bl	8000b04 <__aeabi_dcmpge>
 8010c0e:	b300      	cbz	r0, 8010c52 <__kernel_rem_pio2+0x44a>
 8010c10:	4b9c      	ldr	r3, [pc, #624]	; (8010e84 <__kernel_rem_pio2+0x67c>)
 8010c12:	2200      	movs	r2, #0
 8010c14:	4630      	mov	r0, r6
 8010c16:	4639      	mov	r1, r7
 8010c18:	f7ef fcee 	bl	80005f8 <__aeabi_dmul>
 8010c1c:	f7ef ff9c 	bl	8000b58 <__aeabi_d2iz>
 8010c20:	4605      	mov	r5, r0
 8010c22:	f7ef fc7f 	bl	8000524 <__aeabi_i2d>
 8010c26:	4b96      	ldr	r3, [pc, #600]	; (8010e80 <__kernel_rem_pio2+0x678>)
 8010c28:	2200      	movs	r2, #0
 8010c2a:	f7ef fce5 	bl	80005f8 <__aeabi_dmul>
 8010c2e:	460b      	mov	r3, r1
 8010c30:	4602      	mov	r2, r0
 8010c32:	4639      	mov	r1, r7
 8010c34:	4630      	mov	r0, r6
 8010c36:	f7ef fb27 	bl	8000288 <__aeabi_dsub>
 8010c3a:	f7ef ff8d 	bl	8000b58 <__aeabi_d2iz>
 8010c3e:	f104 0b01 	add.w	fp, r4, #1
 8010c42:	ab0c      	add	r3, sp, #48	; 0x30
 8010c44:	f10a 0a18 	add.w	sl, sl, #24
 8010c48:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010c4c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8010c50:	e72b      	b.n	8010aaa <__kernel_rem_pio2+0x2a2>
 8010c52:	4630      	mov	r0, r6
 8010c54:	4639      	mov	r1, r7
 8010c56:	f7ef ff7f 	bl	8000b58 <__aeabi_d2iz>
 8010c5a:	ab0c      	add	r3, sp, #48	; 0x30
 8010c5c:	46a3      	mov	fp, r4
 8010c5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010c62:	e722      	b.n	8010aaa <__kernel_rem_pio2+0x2a2>
 8010c64:	ab70      	add	r3, sp, #448	; 0x1c0
 8010c66:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8010c6a:	ab0c      	add	r3, sp, #48	; 0x30
 8010c6c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010c70:	f7ef fc58 	bl	8000524 <__aeabi_i2d>
 8010c74:	4622      	mov	r2, r4
 8010c76:	462b      	mov	r3, r5
 8010c78:	f7ef fcbe 	bl	80005f8 <__aeabi_dmul>
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	e9c9 0100 	strd	r0, r1, [r9]
 8010c82:	463b      	mov	r3, r7
 8010c84:	4620      	mov	r0, r4
 8010c86:	4629      	mov	r1, r5
 8010c88:	f7ef fcb6 	bl	80005f8 <__aeabi_dmul>
 8010c8c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010c90:	4604      	mov	r4, r0
 8010c92:	460d      	mov	r5, r1
 8010c94:	e713      	b.n	8010abe <__kernel_rem_pio2+0x2b6>
 8010c96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010c9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010c9e:	f7ef fcab 	bl	80005f8 <__aeabi_dmul>
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	4629      	mov	r1, r5
 8010caa:	f7ef faef 	bl	800028c <__adddf3>
 8010cae:	3601      	adds	r6, #1
 8010cb0:	4604      	mov	r4, r0
 8010cb2:	460d      	mov	r5, r1
 8010cb4:	9b04      	ldr	r3, [sp, #16]
 8010cb6:	429e      	cmp	r6, r3
 8010cb8:	dc01      	bgt.n	8010cbe <__kernel_rem_pio2+0x4b6>
 8010cba:	45b0      	cmp	r8, r6
 8010cbc:	daeb      	bge.n	8010c96 <__kernel_rem_pio2+0x48e>
 8010cbe:	ab48      	add	r3, sp, #288	; 0x120
 8010cc0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010cc4:	e9c3 4500 	strd	r4, r5, [r3]
 8010cc8:	3f01      	subs	r7, #1
 8010cca:	f108 0801 	add.w	r8, r8, #1
 8010cce:	e6ff      	b.n	8010ad0 <__kernel_rem_pio2+0x2c8>
 8010cd0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	dc0b      	bgt.n	8010cee <__kernel_rem_pio2+0x4e6>
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	dc6e      	bgt.n	8010db8 <__kernel_rem_pio2+0x5b0>
 8010cda:	d045      	beq.n	8010d68 <__kernel_rem_pio2+0x560>
 8010cdc:	9b07      	ldr	r3, [sp, #28]
 8010cde:	f003 0007 	and.w	r0, r3, #7
 8010ce2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010ce6:	ecbd 8b02 	vpop	{d8}
 8010cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010cf0:	2b03      	cmp	r3, #3
 8010cf2:	d1f3      	bne.n	8010cdc <__kernel_rem_pio2+0x4d4>
 8010cf4:	ab48      	add	r3, sp, #288	; 0x120
 8010cf6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8010cfa:	46d0      	mov	r8, sl
 8010cfc:	46d9      	mov	r9, fp
 8010cfe:	f1b9 0f00 	cmp.w	r9, #0
 8010d02:	f1a8 0808 	sub.w	r8, r8, #8
 8010d06:	dc64      	bgt.n	8010dd2 <__kernel_rem_pio2+0x5ca>
 8010d08:	465c      	mov	r4, fp
 8010d0a:	2c01      	cmp	r4, #1
 8010d0c:	f1aa 0a08 	sub.w	sl, sl, #8
 8010d10:	dc7e      	bgt.n	8010e10 <__kernel_rem_pio2+0x608>
 8010d12:	2000      	movs	r0, #0
 8010d14:	2100      	movs	r1, #0
 8010d16:	f1bb 0f01 	cmp.w	fp, #1
 8010d1a:	f300 8097 	bgt.w	8010e4c <__kernel_rem_pio2+0x644>
 8010d1e:	9b02      	ldr	r3, [sp, #8]
 8010d20:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8010d24:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f040 8099 	bne.w	8010e60 <__kernel_rem_pio2+0x658>
 8010d2e:	9b01      	ldr	r3, [sp, #4]
 8010d30:	e9c3 5600 	strd	r5, r6, [r3]
 8010d34:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010d38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010d3c:	e7ce      	b.n	8010cdc <__kernel_rem_pio2+0x4d4>
 8010d3e:	ab48      	add	r3, sp, #288	; 0x120
 8010d40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d48:	f7ef faa0 	bl	800028c <__adddf3>
 8010d4c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010d50:	f1bb 0f00 	cmp.w	fp, #0
 8010d54:	daf3      	bge.n	8010d3e <__kernel_rem_pio2+0x536>
 8010d56:	9b02      	ldr	r3, [sp, #8]
 8010d58:	b113      	cbz	r3, 8010d60 <__kernel_rem_pio2+0x558>
 8010d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d5e:	4619      	mov	r1, r3
 8010d60:	9b01      	ldr	r3, [sp, #4]
 8010d62:	e9c3 0100 	strd	r0, r1, [r3]
 8010d66:	e7b9      	b.n	8010cdc <__kernel_rem_pio2+0x4d4>
 8010d68:	2000      	movs	r0, #0
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	e7f0      	b.n	8010d50 <__kernel_rem_pio2+0x548>
 8010d6e:	ab48      	add	r3, sp, #288	; 0x120
 8010d70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	f7ef fa88 	bl	800028c <__adddf3>
 8010d7c:	3c01      	subs	r4, #1
 8010d7e:	2c00      	cmp	r4, #0
 8010d80:	daf5      	bge.n	8010d6e <__kernel_rem_pio2+0x566>
 8010d82:	9b02      	ldr	r3, [sp, #8]
 8010d84:	b1e3      	cbz	r3, 8010dc0 <__kernel_rem_pio2+0x5b8>
 8010d86:	4602      	mov	r2, r0
 8010d88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d8c:	9c01      	ldr	r4, [sp, #4]
 8010d8e:	e9c4 2300 	strd	r2, r3, [r4]
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010d9a:	f7ef fa75 	bl	8000288 <__aeabi_dsub>
 8010d9e:	ad4a      	add	r5, sp, #296	; 0x128
 8010da0:	2401      	movs	r4, #1
 8010da2:	45a3      	cmp	fp, r4
 8010da4:	da0f      	bge.n	8010dc6 <__kernel_rem_pio2+0x5be>
 8010da6:	9b02      	ldr	r3, [sp, #8]
 8010da8:	b113      	cbz	r3, 8010db0 <__kernel_rem_pio2+0x5a8>
 8010daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dae:	4619      	mov	r1, r3
 8010db0:	9b01      	ldr	r3, [sp, #4]
 8010db2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010db6:	e791      	b.n	8010cdc <__kernel_rem_pio2+0x4d4>
 8010db8:	465c      	mov	r4, fp
 8010dba:	2000      	movs	r0, #0
 8010dbc:	2100      	movs	r1, #0
 8010dbe:	e7de      	b.n	8010d7e <__kernel_rem_pio2+0x576>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	460b      	mov	r3, r1
 8010dc4:	e7e2      	b.n	8010d8c <__kernel_rem_pio2+0x584>
 8010dc6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010dca:	f7ef fa5f 	bl	800028c <__adddf3>
 8010dce:	3401      	adds	r4, #1
 8010dd0:	e7e7      	b.n	8010da2 <__kernel_rem_pio2+0x59a>
 8010dd2:	e9d8 4500 	ldrd	r4, r5, [r8]
 8010dd6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8010dda:	4620      	mov	r0, r4
 8010ddc:	4632      	mov	r2, r6
 8010dde:	463b      	mov	r3, r7
 8010de0:	4629      	mov	r1, r5
 8010de2:	f7ef fa53 	bl	800028c <__adddf3>
 8010de6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010dea:	4602      	mov	r2, r0
 8010dec:	460b      	mov	r3, r1
 8010dee:	4620      	mov	r0, r4
 8010df0:	4629      	mov	r1, r5
 8010df2:	f7ef fa49 	bl	8000288 <__aeabi_dsub>
 8010df6:	4632      	mov	r2, r6
 8010df8:	463b      	mov	r3, r7
 8010dfa:	f7ef fa47 	bl	800028c <__adddf3>
 8010dfe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010e02:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8010e06:	ed88 7b00 	vstr	d7, [r8]
 8010e0a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8010e0e:	e776      	b.n	8010cfe <__kernel_rem_pio2+0x4f6>
 8010e10:	e9da 8900 	ldrd	r8, r9, [sl]
 8010e14:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010e18:	4640      	mov	r0, r8
 8010e1a:	4632      	mov	r2, r6
 8010e1c:	463b      	mov	r3, r7
 8010e1e:	4649      	mov	r1, r9
 8010e20:	f7ef fa34 	bl	800028c <__adddf3>
 8010e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e28:	4602      	mov	r2, r0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	4640      	mov	r0, r8
 8010e2e:	4649      	mov	r1, r9
 8010e30:	f7ef fa2a 	bl	8000288 <__aeabi_dsub>
 8010e34:	4632      	mov	r2, r6
 8010e36:	463b      	mov	r3, r7
 8010e38:	f7ef fa28 	bl	800028c <__adddf3>
 8010e3c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010e40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e44:	ed8a 7b00 	vstr	d7, [sl]
 8010e48:	3c01      	subs	r4, #1
 8010e4a:	e75e      	b.n	8010d0a <__kernel_rem_pio2+0x502>
 8010e4c:	ab48      	add	r3, sp, #288	; 0x120
 8010e4e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e56:	f7ef fa19 	bl	800028c <__adddf3>
 8010e5a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010e5e:	e75a      	b.n	8010d16 <__kernel_rem_pio2+0x50e>
 8010e60:	9b01      	ldr	r3, [sp, #4]
 8010e62:	9a01      	ldr	r2, [sp, #4]
 8010e64:	601d      	str	r5, [r3, #0]
 8010e66:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010e6a:	605c      	str	r4, [r3, #4]
 8010e6c:	609f      	str	r7, [r3, #8]
 8010e6e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010e72:	60d3      	str	r3, [r2, #12]
 8010e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e78:	6110      	str	r0, [r2, #16]
 8010e7a:	6153      	str	r3, [r2, #20]
 8010e7c:	e72e      	b.n	8010cdc <__kernel_rem_pio2+0x4d4>
 8010e7e:	bf00      	nop
 8010e80:	41700000 	.word	0x41700000
 8010e84:	3e700000 	.word	0x3e700000

08010e88 <__kernel_sin>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	ed2d 8b04 	vpush	{d8-d9}
 8010e90:	eeb0 8a41 	vmov.f32	s16, s2
 8010e94:	eef0 8a61 	vmov.f32	s17, s3
 8010e98:	ec55 4b10 	vmov	r4, r5, d0
 8010e9c:	b083      	sub	sp, #12
 8010e9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010ea2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010ea6:	9001      	str	r0, [sp, #4]
 8010ea8:	da06      	bge.n	8010eb8 <__kernel_sin+0x30>
 8010eaa:	ee10 0a10 	vmov	r0, s0
 8010eae:	4629      	mov	r1, r5
 8010eb0:	f7ef fe52 	bl	8000b58 <__aeabi_d2iz>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d051      	beq.n	8010f5c <__kernel_sin+0xd4>
 8010eb8:	4622      	mov	r2, r4
 8010eba:	462b      	mov	r3, r5
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	4629      	mov	r1, r5
 8010ec0:	f7ef fb9a 	bl	80005f8 <__aeabi_dmul>
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	468b      	mov	fp, r1
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7ef fb92 	bl	80005f8 <__aeabi_dmul>
 8010ed4:	a341      	add	r3, pc, #260	; (adr r3, 8010fdc <__kernel_sin+0x154>)
 8010ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eda:	4680      	mov	r8, r0
 8010edc:	4689      	mov	r9, r1
 8010ede:	4650      	mov	r0, sl
 8010ee0:	4659      	mov	r1, fp
 8010ee2:	f7ef fb89 	bl	80005f8 <__aeabi_dmul>
 8010ee6:	a33f      	add	r3, pc, #252	; (adr r3, 8010fe4 <__kernel_sin+0x15c>)
 8010ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eec:	f7ef f9cc 	bl	8000288 <__aeabi_dsub>
 8010ef0:	4652      	mov	r2, sl
 8010ef2:	465b      	mov	r3, fp
 8010ef4:	f7ef fb80 	bl	80005f8 <__aeabi_dmul>
 8010ef8:	a33c      	add	r3, pc, #240	; (adr r3, 8010fec <__kernel_sin+0x164>)
 8010efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efe:	f7ef f9c5 	bl	800028c <__adddf3>
 8010f02:	4652      	mov	r2, sl
 8010f04:	465b      	mov	r3, fp
 8010f06:	f7ef fb77 	bl	80005f8 <__aeabi_dmul>
 8010f0a:	a33a      	add	r3, pc, #232	; (adr r3, 8010ff4 <__kernel_sin+0x16c>)
 8010f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f10:	f7ef f9ba 	bl	8000288 <__aeabi_dsub>
 8010f14:	4652      	mov	r2, sl
 8010f16:	465b      	mov	r3, fp
 8010f18:	f7ef fb6e 	bl	80005f8 <__aeabi_dmul>
 8010f1c:	a337      	add	r3, pc, #220	; (adr r3, 8010ffc <__kernel_sin+0x174>)
 8010f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f22:	f7ef f9b3 	bl	800028c <__adddf3>
 8010f26:	9b01      	ldr	r3, [sp, #4]
 8010f28:	4606      	mov	r6, r0
 8010f2a:	460f      	mov	r7, r1
 8010f2c:	b9eb      	cbnz	r3, 8010f6a <__kernel_sin+0xe2>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	460b      	mov	r3, r1
 8010f32:	4650      	mov	r0, sl
 8010f34:	4659      	mov	r1, fp
 8010f36:	f7ef fb5f 	bl	80005f8 <__aeabi_dmul>
 8010f3a:	a325      	add	r3, pc, #148	; (adr r3, 8010fd0 <__kernel_sin+0x148>)
 8010f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f40:	f7ef f9a2 	bl	8000288 <__aeabi_dsub>
 8010f44:	4642      	mov	r2, r8
 8010f46:	464b      	mov	r3, r9
 8010f48:	f7ef fb56 	bl	80005f8 <__aeabi_dmul>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	4620      	mov	r0, r4
 8010f52:	4629      	mov	r1, r5
 8010f54:	f7ef f99a 	bl	800028c <__adddf3>
 8010f58:	4604      	mov	r4, r0
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	ec45 4b10 	vmov	d0, r4, r5
 8010f60:	b003      	add	sp, #12
 8010f62:	ecbd 8b04 	vpop	{d8-d9}
 8010f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f6a:	4b1b      	ldr	r3, [pc, #108]	; (8010fd8 <__kernel_sin+0x150>)
 8010f6c:	ec51 0b18 	vmov	r0, r1, d8
 8010f70:	2200      	movs	r2, #0
 8010f72:	f7ef fb41 	bl	80005f8 <__aeabi_dmul>
 8010f76:	4632      	mov	r2, r6
 8010f78:	ec41 0b19 	vmov	d9, r0, r1
 8010f7c:	463b      	mov	r3, r7
 8010f7e:	4640      	mov	r0, r8
 8010f80:	4649      	mov	r1, r9
 8010f82:	f7ef fb39 	bl	80005f8 <__aeabi_dmul>
 8010f86:	4602      	mov	r2, r0
 8010f88:	460b      	mov	r3, r1
 8010f8a:	ec51 0b19 	vmov	r0, r1, d9
 8010f8e:	f7ef f97b 	bl	8000288 <__aeabi_dsub>
 8010f92:	4652      	mov	r2, sl
 8010f94:	465b      	mov	r3, fp
 8010f96:	f7ef fb2f 	bl	80005f8 <__aeabi_dmul>
 8010f9a:	ec53 2b18 	vmov	r2, r3, d8
 8010f9e:	f7ef f973 	bl	8000288 <__aeabi_dsub>
 8010fa2:	a30b      	add	r3, pc, #44	; (adr r3, 8010fd0 <__kernel_sin+0x148>)
 8010fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa8:	4606      	mov	r6, r0
 8010faa:	460f      	mov	r7, r1
 8010fac:	4640      	mov	r0, r8
 8010fae:	4649      	mov	r1, r9
 8010fb0:	f7ef fb22 	bl	80005f8 <__aeabi_dmul>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	4630      	mov	r0, r6
 8010fba:	4639      	mov	r1, r7
 8010fbc:	f7ef f966 	bl	800028c <__adddf3>
 8010fc0:	4602      	mov	r2, r0
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	4629      	mov	r1, r5
 8010fc8:	f7ef f95e 	bl	8000288 <__aeabi_dsub>
 8010fcc:	e7c4      	b.n	8010f58 <__kernel_sin+0xd0>
 8010fce:	bf00      	nop
 8010fd0:	55555549 	.word	0x55555549
 8010fd4:	3fc55555 	.word	0x3fc55555
 8010fd8:	3fe00000 	.word	0x3fe00000
 8010fdc:	5acfd57c 	.word	0x5acfd57c
 8010fe0:	3de5d93a 	.word	0x3de5d93a
 8010fe4:	8a2b9ceb 	.word	0x8a2b9ceb
 8010fe8:	3e5ae5e6 	.word	0x3e5ae5e6
 8010fec:	57b1fe7d 	.word	0x57b1fe7d
 8010ff0:	3ec71de3 	.word	0x3ec71de3
 8010ff4:	19c161d5 	.word	0x19c161d5
 8010ff8:	3f2a01a0 	.word	0x3f2a01a0
 8010ffc:	1110f8a6 	.word	0x1110f8a6
 8011000:	3f811111 	.word	0x3f811111

08011004 <fabs>:
 8011004:	ec51 0b10 	vmov	r0, r1, d0
 8011008:	ee10 2a10 	vmov	r2, s0
 801100c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011010:	ec43 2b10 	vmov	d0, r2, r3
 8011014:	4770      	bx	lr

08011016 <finite>:
 8011016:	b082      	sub	sp, #8
 8011018:	ed8d 0b00 	vstr	d0, [sp]
 801101c:	9801      	ldr	r0, [sp, #4]
 801101e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011022:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011026:	0fc0      	lsrs	r0, r0, #31
 8011028:	b002      	add	sp, #8
 801102a:	4770      	bx	lr
 801102c:	0000      	movs	r0, r0
	...

08011030 <floor>:
 8011030:	ec51 0b10 	vmov	r0, r1, d0
 8011034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011038:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801103c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011040:	2e13      	cmp	r6, #19
 8011042:	ee10 5a10 	vmov	r5, s0
 8011046:	ee10 8a10 	vmov	r8, s0
 801104a:	460c      	mov	r4, r1
 801104c:	dc32      	bgt.n	80110b4 <floor+0x84>
 801104e:	2e00      	cmp	r6, #0
 8011050:	da14      	bge.n	801107c <floor+0x4c>
 8011052:	a333      	add	r3, pc, #204	; (adr r3, 8011120 <floor+0xf0>)
 8011054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011058:	f7ef f918 	bl	800028c <__adddf3>
 801105c:	2200      	movs	r2, #0
 801105e:	2300      	movs	r3, #0
 8011060:	f7ef fd5a 	bl	8000b18 <__aeabi_dcmpgt>
 8011064:	b138      	cbz	r0, 8011076 <floor+0x46>
 8011066:	2c00      	cmp	r4, #0
 8011068:	da57      	bge.n	801111a <floor+0xea>
 801106a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801106e:	431d      	orrs	r5, r3
 8011070:	d001      	beq.n	8011076 <floor+0x46>
 8011072:	4c2d      	ldr	r4, [pc, #180]	; (8011128 <floor+0xf8>)
 8011074:	2500      	movs	r5, #0
 8011076:	4621      	mov	r1, r4
 8011078:	4628      	mov	r0, r5
 801107a:	e025      	b.n	80110c8 <floor+0x98>
 801107c:	4f2b      	ldr	r7, [pc, #172]	; (801112c <floor+0xfc>)
 801107e:	4137      	asrs	r7, r6
 8011080:	ea01 0307 	and.w	r3, r1, r7
 8011084:	4303      	orrs	r3, r0
 8011086:	d01f      	beq.n	80110c8 <floor+0x98>
 8011088:	a325      	add	r3, pc, #148	; (adr r3, 8011120 <floor+0xf0>)
 801108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108e:	f7ef f8fd 	bl	800028c <__adddf3>
 8011092:	2200      	movs	r2, #0
 8011094:	2300      	movs	r3, #0
 8011096:	f7ef fd3f 	bl	8000b18 <__aeabi_dcmpgt>
 801109a:	2800      	cmp	r0, #0
 801109c:	d0eb      	beq.n	8011076 <floor+0x46>
 801109e:	2c00      	cmp	r4, #0
 80110a0:	bfbe      	ittt	lt
 80110a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80110a6:	fa43 f606 	asrlt.w	r6, r3, r6
 80110aa:	19a4      	addlt	r4, r4, r6
 80110ac:	ea24 0407 	bic.w	r4, r4, r7
 80110b0:	2500      	movs	r5, #0
 80110b2:	e7e0      	b.n	8011076 <floor+0x46>
 80110b4:	2e33      	cmp	r6, #51	; 0x33
 80110b6:	dd0b      	ble.n	80110d0 <floor+0xa0>
 80110b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80110bc:	d104      	bne.n	80110c8 <floor+0x98>
 80110be:	ee10 2a10 	vmov	r2, s0
 80110c2:	460b      	mov	r3, r1
 80110c4:	f7ef f8e2 	bl	800028c <__adddf3>
 80110c8:	ec41 0b10 	vmov	d0, r0, r1
 80110cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80110d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110d8:	fa23 f707 	lsr.w	r7, r3, r7
 80110dc:	4207      	tst	r7, r0
 80110de:	d0f3      	beq.n	80110c8 <floor+0x98>
 80110e0:	a30f      	add	r3, pc, #60	; (adr r3, 8011120 <floor+0xf0>)
 80110e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e6:	f7ef f8d1 	bl	800028c <__adddf3>
 80110ea:	2200      	movs	r2, #0
 80110ec:	2300      	movs	r3, #0
 80110ee:	f7ef fd13 	bl	8000b18 <__aeabi_dcmpgt>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	d0bf      	beq.n	8011076 <floor+0x46>
 80110f6:	2c00      	cmp	r4, #0
 80110f8:	da02      	bge.n	8011100 <floor+0xd0>
 80110fa:	2e14      	cmp	r6, #20
 80110fc:	d103      	bne.n	8011106 <floor+0xd6>
 80110fe:	3401      	adds	r4, #1
 8011100:	ea25 0507 	bic.w	r5, r5, r7
 8011104:	e7b7      	b.n	8011076 <floor+0x46>
 8011106:	2301      	movs	r3, #1
 8011108:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801110c:	fa03 f606 	lsl.w	r6, r3, r6
 8011110:	4435      	add	r5, r6
 8011112:	4545      	cmp	r5, r8
 8011114:	bf38      	it	cc
 8011116:	18e4      	addcc	r4, r4, r3
 8011118:	e7f2      	b.n	8011100 <floor+0xd0>
 801111a:	2500      	movs	r5, #0
 801111c:	462c      	mov	r4, r5
 801111e:	e7aa      	b.n	8011076 <floor+0x46>
 8011120:	8800759c 	.word	0x8800759c
 8011124:	7e37e43c 	.word	0x7e37e43c
 8011128:	bff00000 	.word	0xbff00000
 801112c:	000fffff 	.word	0x000fffff

08011130 <rint>:
 8011130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011132:	ec51 0b10 	vmov	r0, r1, d0
 8011136:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801113a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801113e:	2e13      	cmp	r6, #19
 8011140:	ee10 4a10 	vmov	r4, s0
 8011144:	460b      	mov	r3, r1
 8011146:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801114a:	dc58      	bgt.n	80111fe <rint+0xce>
 801114c:	2e00      	cmp	r6, #0
 801114e:	da2b      	bge.n	80111a8 <rint+0x78>
 8011150:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011154:	4302      	orrs	r2, r0
 8011156:	d023      	beq.n	80111a0 <rint+0x70>
 8011158:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801115c:	4302      	orrs	r2, r0
 801115e:	4254      	negs	r4, r2
 8011160:	4314      	orrs	r4, r2
 8011162:	0c4b      	lsrs	r3, r1, #17
 8011164:	0b24      	lsrs	r4, r4, #12
 8011166:	045b      	lsls	r3, r3, #17
 8011168:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801116c:	ea44 0103 	orr.w	r1, r4, r3
 8011170:	4b32      	ldr	r3, [pc, #200]	; (801123c <rint+0x10c>)
 8011172:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011176:	e9d3 6700 	ldrd	r6, r7, [r3]
 801117a:	4602      	mov	r2, r0
 801117c:	460b      	mov	r3, r1
 801117e:	4630      	mov	r0, r6
 8011180:	4639      	mov	r1, r7
 8011182:	f7ef f883 	bl	800028c <__adddf3>
 8011186:	e9cd 0100 	strd	r0, r1, [sp]
 801118a:	463b      	mov	r3, r7
 801118c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011190:	4632      	mov	r2, r6
 8011192:	f7ef f879 	bl	8000288 <__aeabi_dsub>
 8011196:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801119a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801119e:	4639      	mov	r1, r7
 80111a0:	ec41 0b10 	vmov	d0, r0, r1
 80111a4:	b003      	add	sp, #12
 80111a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111a8:	4a25      	ldr	r2, [pc, #148]	; (8011240 <rint+0x110>)
 80111aa:	4132      	asrs	r2, r6
 80111ac:	ea01 0702 	and.w	r7, r1, r2
 80111b0:	4307      	orrs	r7, r0
 80111b2:	d0f5      	beq.n	80111a0 <rint+0x70>
 80111b4:	0851      	lsrs	r1, r2, #1
 80111b6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80111ba:	4314      	orrs	r4, r2
 80111bc:	d00c      	beq.n	80111d8 <rint+0xa8>
 80111be:	ea23 0201 	bic.w	r2, r3, r1
 80111c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80111c6:	2e13      	cmp	r6, #19
 80111c8:	fa43 f606 	asr.w	r6, r3, r6
 80111cc:	bf0c      	ite	eq
 80111ce:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80111d2:	2400      	movne	r4, #0
 80111d4:	ea42 0306 	orr.w	r3, r2, r6
 80111d8:	4918      	ldr	r1, [pc, #96]	; (801123c <rint+0x10c>)
 80111da:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80111de:	4622      	mov	r2, r4
 80111e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80111e4:	4620      	mov	r0, r4
 80111e6:	4629      	mov	r1, r5
 80111e8:	f7ef f850 	bl	800028c <__adddf3>
 80111ec:	e9cd 0100 	strd	r0, r1, [sp]
 80111f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111f4:	4622      	mov	r2, r4
 80111f6:	462b      	mov	r3, r5
 80111f8:	f7ef f846 	bl	8000288 <__aeabi_dsub>
 80111fc:	e7d0      	b.n	80111a0 <rint+0x70>
 80111fe:	2e33      	cmp	r6, #51	; 0x33
 8011200:	dd07      	ble.n	8011212 <rint+0xe2>
 8011202:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011206:	d1cb      	bne.n	80111a0 <rint+0x70>
 8011208:	ee10 2a10 	vmov	r2, s0
 801120c:	f7ef f83e 	bl	800028c <__adddf3>
 8011210:	e7c6      	b.n	80111a0 <rint+0x70>
 8011212:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011216:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801121a:	40d6      	lsrs	r6, r2
 801121c:	4230      	tst	r0, r6
 801121e:	d0bf      	beq.n	80111a0 <rint+0x70>
 8011220:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8011224:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011228:	bf1f      	itttt	ne
 801122a:	ea24 0101 	bicne.w	r1, r4, r1
 801122e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011232:	fa44 f202 	asrne.w	r2, r4, r2
 8011236:	ea41 0402 	orrne.w	r4, r1, r2
 801123a:	e7cd      	b.n	80111d8 <rint+0xa8>
 801123c:	08040f50 	.word	0x08040f50
 8011240:	000fffff 	.word	0x000fffff
 8011244:	00000000 	.word	0x00000000

08011248 <scalbn>:
 8011248:	b570      	push	{r4, r5, r6, lr}
 801124a:	ec55 4b10 	vmov	r4, r5, d0
 801124e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011252:	4606      	mov	r6, r0
 8011254:	462b      	mov	r3, r5
 8011256:	b99a      	cbnz	r2, 8011280 <scalbn+0x38>
 8011258:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801125c:	4323      	orrs	r3, r4
 801125e:	d036      	beq.n	80112ce <scalbn+0x86>
 8011260:	4b39      	ldr	r3, [pc, #228]	; (8011348 <scalbn+0x100>)
 8011262:	4629      	mov	r1, r5
 8011264:	ee10 0a10 	vmov	r0, s0
 8011268:	2200      	movs	r2, #0
 801126a:	f7ef f9c5 	bl	80005f8 <__aeabi_dmul>
 801126e:	4b37      	ldr	r3, [pc, #220]	; (801134c <scalbn+0x104>)
 8011270:	429e      	cmp	r6, r3
 8011272:	4604      	mov	r4, r0
 8011274:	460d      	mov	r5, r1
 8011276:	da10      	bge.n	801129a <scalbn+0x52>
 8011278:	a32b      	add	r3, pc, #172	; (adr r3, 8011328 <scalbn+0xe0>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	e03a      	b.n	80112f6 <scalbn+0xae>
 8011280:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011284:	428a      	cmp	r2, r1
 8011286:	d10c      	bne.n	80112a2 <scalbn+0x5a>
 8011288:	ee10 2a10 	vmov	r2, s0
 801128c:	4620      	mov	r0, r4
 801128e:	4629      	mov	r1, r5
 8011290:	f7ee fffc 	bl	800028c <__adddf3>
 8011294:	4604      	mov	r4, r0
 8011296:	460d      	mov	r5, r1
 8011298:	e019      	b.n	80112ce <scalbn+0x86>
 801129a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801129e:	460b      	mov	r3, r1
 80112a0:	3a36      	subs	r2, #54	; 0x36
 80112a2:	4432      	add	r2, r6
 80112a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80112a8:	428a      	cmp	r2, r1
 80112aa:	dd08      	ble.n	80112be <scalbn+0x76>
 80112ac:	2d00      	cmp	r5, #0
 80112ae:	a120      	add	r1, pc, #128	; (adr r1, 8011330 <scalbn+0xe8>)
 80112b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112b4:	da1c      	bge.n	80112f0 <scalbn+0xa8>
 80112b6:	a120      	add	r1, pc, #128	; (adr r1, 8011338 <scalbn+0xf0>)
 80112b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112bc:	e018      	b.n	80112f0 <scalbn+0xa8>
 80112be:	2a00      	cmp	r2, #0
 80112c0:	dd08      	ble.n	80112d4 <scalbn+0x8c>
 80112c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80112c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80112ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80112ce:	ec45 4b10 	vmov	d0, r4, r5
 80112d2:	bd70      	pop	{r4, r5, r6, pc}
 80112d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80112d8:	da19      	bge.n	801130e <scalbn+0xc6>
 80112da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80112de:	429e      	cmp	r6, r3
 80112e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80112e4:	dd0a      	ble.n	80112fc <scalbn+0xb4>
 80112e6:	a112      	add	r1, pc, #72	; (adr r1, 8011330 <scalbn+0xe8>)
 80112e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1e2      	bne.n	80112b6 <scalbn+0x6e>
 80112f0:	a30f      	add	r3, pc, #60	; (adr r3, 8011330 <scalbn+0xe8>)
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	f7ef f97f 	bl	80005f8 <__aeabi_dmul>
 80112fa:	e7cb      	b.n	8011294 <scalbn+0x4c>
 80112fc:	a10a      	add	r1, pc, #40	; (adr r1, 8011328 <scalbn+0xe0>)
 80112fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0b8      	beq.n	8011278 <scalbn+0x30>
 8011306:	a10e      	add	r1, pc, #56	; (adr r1, 8011340 <scalbn+0xf8>)
 8011308:	e9d1 0100 	ldrd	r0, r1, [r1]
 801130c:	e7b4      	b.n	8011278 <scalbn+0x30>
 801130e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011312:	3236      	adds	r2, #54	; 0x36
 8011314:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011318:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801131c:	4620      	mov	r0, r4
 801131e:	4b0c      	ldr	r3, [pc, #48]	; (8011350 <scalbn+0x108>)
 8011320:	2200      	movs	r2, #0
 8011322:	e7e8      	b.n	80112f6 <scalbn+0xae>
 8011324:	f3af 8000 	nop.w
 8011328:	c2f8f359 	.word	0xc2f8f359
 801132c:	01a56e1f 	.word	0x01a56e1f
 8011330:	8800759c 	.word	0x8800759c
 8011334:	7e37e43c 	.word	0x7e37e43c
 8011338:	8800759c 	.word	0x8800759c
 801133c:	fe37e43c 	.word	0xfe37e43c
 8011340:	c2f8f359 	.word	0xc2f8f359
 8011344:	81a56e1f 	.word	0x81a56e1f
 8011348:	43500000 	.word	0x43500000
 801134c:	ffff3cb0 	.word	0xffff3cb0
 8011350:	3c900000 	.word	0x3c900000

08011354 <finitef>:
 8011354:	b082      	sub	sp, #8
 8011356:	ed8d 0a01 	vstr	s0, [sp, #4]
 801135a:	9801      	ldr	r0, [sp, #4]
 801135c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011360:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011364:	bfac      	ite	ge
 8011366:	2000      	movge	r0, #0
 8011368:	2001      	movlt	r0, #1
 801136a:	b002      	add	sp, #8
 801136c:	4770      	bx	lr
	...

08011370 <rintf>:
 8011370:	ee10 2a10 	vmov	r2, s0
 8011374:	b513      	push	{r0, r1, r4, lr}
 8011376:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801137a:	397f      	subs	r1, #127	; 0x7f
 801137c:	2916      	cmp	r1, #22
 801137e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011382:	dc47      	bgt.n	8011414 <rintf+0xa4>
 8011384:	b32b      	cbz	r3, 80113d2 <rintf+0x62>
 8011386:	2900      	cmp	r1, #0
 8011388:	ee10 3a10 	vmov	r3, s0
 801138c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8011390:	da21      	bge.n	80113d6 <rintf+0x66>
 8011392:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8011396:	425b      	negs	r3, r3
 8011398:	4921      	ldr	r1, [pc, #132]	; (8011420 <rintf+0xb0>)
 801139a:	0a5b      	lsrs	r3, r3, #9
 801139c:	0d12      	lsrs	r2, r2, #20
 801139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80113a2:	0512      	lsls	r2, r2, #20
 80113a4:	4313      	orrs	r3, r2
 80113a6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80113aa:	ee07 3a90 	vmov	s15, r3
 80113ae:	edd1 6a00 	vldr	s13, [r1]
 80113b2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80113b6:	ed8d 7a01 	vstr	s14, [sp, #4]
 80113ba:	eddd 7a01 	vldr	s15, [sp, #4]
 80113be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80113c2:	ee17 3a90 	vmov	r3, s15
 80113c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80113ca:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80113ce:	ee00 3a10 	vmov	s0, r3
 80113d2:	b002      	add	sp, #8
 80113d4:	bd10      	pop	{r4, pc}
 80113d6:	4a13      	ldr	r2, [pc, #76]	; (8011424 <rintf+0xb4>)
 80113d8:	410a      	asrs	r2, r1
 80113da:	4213      	tst	r3, r2
 80113dc:	d0f9      	beq.n	80113d2 <rintf+0x62>
 80113de:	0854      	lsrs	r4, r2, #1
 80113e0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80113e4:	d006      	beq.n	80113f4 <rintf+0x84>
 80113e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80113ea:	ea23 0304 	bic.w	r3, r3, r4
 80113ee:	fa42 f101 	asr.w	r1, r2, r1
 80113f2:	430b      	orrs	r3, r1
 80113f4:	4a0a      	ldr	r2, [pc, #40]	; (8011420 <rintf+0xb0>)
 80113f6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80113fa:	ed90 7a00 	vldr	s14, [r0]
 80113fe:	ee07 3a90 	vmov	s15, r3
 8011402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011406:	edcd 7a01 	vstr	s15, [sp, #4]
 801140a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801140e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011412:	e7de      	b.n	80113d2 <rintf+0x62>
 8011414:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011418:	d3db      	bcc.n	80113d2 <rintf+0x62>
 801141a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801141e:	e7d8      	b.n	80113d2 <rintf+0x62>
 8011420:	08040f60 	.word	0x08040f60
 8011424:	007fffff 	.word	0x007fffff

08011428 <scalbnf>:
 8011428:	ee10 3a10 	vmov	r3, s0
 801142c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011430:	d025      	beq.n	801147e <scalbnf+0x56>
 8011432:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011436:	d302      	bcc.n	801143e <scalbnf+0x16>
 8011438:	ee30 0a00 	vadd.f32	s0, s0, s0
 801143c:	4770      	bx	lr
 801143e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8011442:	d122      	bne.n	801148a <scalbnf+0x62>
 8011444:	4b2a      	ldr	r3, [pc, #168]	; (80114f0 <scalbnf+0xc8>)
 8011446:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80114f4 <scalbnf+0xcc>
 801144a:	4298      	cmp	r0, r3
 801144c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011450:	db16      	blt.n	8011480 <scalbnf+0x58>
 8011452:	ee10 3a10 	vmov	r3, s0
 8011456:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801145a:	3a19      	subs	r2, #25
 801145c:	4402      	add	r2, r0
 801145e:	2afe      	cmp	r2, #254	; 0xfe
 8011460:	dd15      	ble.n	801148e <scalbnf+0x66>
 8011462:	ee10 3a10 	vmov	r3, s0
 8011466:	eddf 7a24 	vldr	s15, [pc, #144]	; 80114f8 <scalbnf+0xd0>
 801146a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80114fc <scalbnf+0xd4>
 801146e:	2b00      	cmp	r3, #0
 8011470:	eeb0 7a67 	vmov.f32	s14, s15
 8011474:	bfb8      	it	lt
 8011476:	eef0 7a66 	vmovlt.f32	s15, s13
 801147a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801147e:	4770      	bx	lr
 8011480:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011500 <scalbnf+0xd8>
 8011484:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011488:	4770      	bx	lr
 801148a:	0dd2      	lsrs	r2, r2, #23
 801148c:	e7e6      	b.n	801145c <scalbnf+0x34>
 801148e:	2a00      	cmp	r2, #0
 8011490:	dd06      	ble.n	80114a0 <scalbnf+0x78>
 8011492:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011496:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801149a:	ee00 3a10 	vmov	s0, r3
 801149e:	4770      	bx	lr
 80114a0:	f112 0f16 	cmn.w	r2, #22
 80114a4:	da1a      	bge.n	80114dc <scalbnf+0xb4>
 80114a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80114aa:	4298      	cmp	r0, r3
 80114ac:	ee10 3a10 	vmov	r3, s0
 80114b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80114b4:	dd0a      	ble.n	80114cc <scalbnf+0xa4>
 80114b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80114f8 <scalbnf+0xd0>
 80114ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80114fc <scalbnf+0xd4>
 80114be:	eef0 7a40 	vmov.f32	s15, s0
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	bf18      	it	ne
 80114c6:	eeb0 0a47 	vmovne.f32	s0, s14
 80114ca:	e7db      	b.n	8011484 <scalbnf+0x5c>
 80114cc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011500 <scalbnf+0xd8>
 80114d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8011504 <scalbnf+0xdc>
 80114d4:	eef0 7a40 	vmov.f32	s15, s0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	e7f3      	b.n	80114c4 <scalbnf+0x9c>
 80114dc:	3219      	adds	r2, #25
 80114de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80114e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80114e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011508 <scalbnf+0xe0>
 80114ea:	ee07 3a10 	vmov	s14, r3
 80114ee:	e7c4      	b.n	801147a <scalbnf+0x52>
 80114f0:	ffff3cb0 	.word	0xffff3cb0
 80114f4:	4c000000 	.word	0x4c000000
 80114f8:	7149f2ca 	.word	0x7149f2ca
 80114fc:	f149f2ca 	.word	0xf149f2ca
 8011500:	0da24260 	.word	0x0da24260
 8011504:	8da24260 	.word	0x8da24260
 8011508:	33000000 	.word	0x33000000

0801150c <_close>:
 801150c:	4b02      	ldr	r3, [pc, #8]	; (8011518 <_close+0xc>)
 801150e:	2258      	movs	r2, #88	; 0x58
 8011510:	601a      	str	r2, [r3, #0]
 8011512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011516:	4770      	bx	lr
 8011518:	20006500 	.word	0x20006500

0801151c <_fstat>:
 801151c:	4b02      	ldr	r3, [pc, #8]	; (8011528 <_fstat+0xc>)
 801151e:	2258      	movs	r2, #88	; 0x58
 8011520:	601a      	str	r2, [r3, #0]
 8011522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011526:	4770      	bx	lr
 8011528:	20006500 	.word	0x20006500

0801152c <_getpid>:
 801152c:	4b02      	ldr	r3, [pc, #8]	; (8011538 <_getpid+0xc>)
 801152e:	2258      	movs	r2, #88	; 0x58
 8011530:	601a      	str	r2, [r3, #0]
 8011532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011536:	4770      	bx	lr
 8011538:	20006500 	.word	0x20006500

0801153c <_isatty>:
 801153c:	4b02      	ldr	r3, [pc, #8]	; (8011548 <_isatty+0xc>)
 801153e:	2258      	movs	r2, #88	; 0x58
 8011540:	601a      	str	r2, [r3, #0]
 8011542:	2000      	movs	r0, #0
 8011544:	4770      	bx	lr
 8011546:	bf00      	nop
 8011548:	20006500 	.word	0x20006500

0801154c <_kill>:
 801154c:	4b02      	ldr	r3, [pc, #8]	; (8011558 <_kill+0xc>)
 801154e:	2258      	movs	r2, #88	; 0x58
 8011550:	601a      	str	r2, [r3, #0]
 8011552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011556:	4770      	bx	lr
 8011558:	20006500 	.word	0x20006500

0801155c <_lseek>:
 801155c:	4b02      	ldr	r3, [pc, #8]	; (8011568 <_lseek+0xc>)
 801155e:	2258      	movs	r2, #88	; 0x58
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011566:	4770      	bx	lr
 8011568:	20006500 	.word	0x20006500

0801156c <_read>:
 801156c:	4b02      	ldr	r3, [pc, #8]	; (8011578 <_read+0xc>)
 801156e:	2258      	movs	r2, #88	; 0x58
 8011570:	601a      	str	r2, [r3, #0]
 8011572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011576:	4770      	bx	lr
 8011578:	20006500 	.word	0x20006500

0801157c <_write>:
 801157c:	4b02      	ldr	r3, [pc, #8]	; (8011588 <_write+0xc>)
 801157e:	2258      	movs	r2, #88	; 0x58
 8011580:	601a      	str	r2, [r3, #0]
 8011582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011586:	4770      	bx	lr
 8011588:	20006500 	.word	0x20006500

0801158c <_exit>:
 801158c:	e7fe      	b.n	801158c <_exit>
	...

08011590 <_init>:
 8011590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011592:	bf00      	nop
 8011594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011596:	bc08      	pop	{r3}
 8011598:	469e      	mov	lr, r3
 801159a:	4770      	bx	lr

0801159c <_fini>:
 801159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159e:	bf00      	nop
 80115a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115a2:	bc08      	pop	{r3}
 80115a4:	469e      	mov	lr, r3
 80115a6:	4770      	bx	lr
