
stm32-speech-recognition-and-traduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016708  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00049168  080168a0  080168a0  000268a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805fa08  0805fa08  000710b0  2**0
                  CONTENTS
  4 .ARM          00000008  0805fa08  0805fa08  0006fa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805fa10  0805fa10  000710b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805fa10  0805fa10  0006fa10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805fa14  0805fa14  0006fa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010b0  20000000  0805fa18  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012c04  200010b0  08060ac8  000710b0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20013cb4  08060ac8  00073cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000710b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d158  00000000  00000000  000710e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056b1  00000000  00000000  0009e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  000a38f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  000a4c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286b5  00000000  00000000  000a5e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002205e  00000000  00000000  000ce4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd8af  00000000  00000000  000f0513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000014d  00000000  00000000  001cddc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f0  00000000  00000000  001cdf10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001d4700  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001d47cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200010b0 	.word	0x200010b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016880 	.word	0x08016880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200010b4 	.word	0x200010b4
 80001cc:	08016880 	.word	0x08016880

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <AudioRecord_Test>:
 *   The main objective of this test is to check the hardware connection of the
 *   Audio peripheral.
 * @param  None
 * @retval None
 */
void AudioRecord_Test(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	BufferCtl.offset = BUFFER_OFFSET_NONE;
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <AudioRecord_Test+0x134>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ,
 8001016:	2201      	movs	r2, #1
 8001018:	2110      	movs	r1, #16
 800101a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800101e:	f001 fa95 	bl	800254c <BSP_AUDIO_IN_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <AudioRecord_Test+0x20>
			DEFAULT_AUDIO_IN_BIT_RESOLUTION,
			DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK) {
		/* Record Error */
		Error_Handler();
 8001028:	f000 ff14 	bl	8001e54 <Error_Handler>

	/* Turn ON LED3: start record */
	// BSP_LED_On(LED3);

	/* Start the record */
	if (BSP_AUDIO_IN_Record((uint16_t*) &InternalBuffer[0],
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	4845      	ldr	r0, [pc, #276]	; (8001144 <AudioRecord_Test+0x138>)
 8001030:	f001 fab6 	bl	80025a0 <BSP_AUDIO_IN_Record>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <AudioRecord_Test+0x32>
			INTERNAL_BUFF_SIZE) != AUDIO_OK) {
		/* Record Error */
		Error_Handler();
 800103a:	f000 ff0b 	bl	8001e54 <Error_Handler>
	}
	BufferCtl.fptr = 0;
 800103e:	4b40      	ldr	r3, [pc, #256]	; (8001140 <AudioRecord_Test+0x134>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]

	AUDIODataReady = 0;
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <AudioRecord_Test+0x13c>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]

	/* Wait for the data to be ready with PCM form */
	while (AUDIODataReady != 2) {
 800104a:	e06b      	b.n	8001124 <AudioRecord_Test+0x118>
		if (BufferCtl.offset == BUFFER_OFFSET_HALF) {
 800104c:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <AudioRecord_Test+0x134>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d131      	bne.n	80010b8 <AudioRecord_Test+0xac>
			/* PDM to PCM data convert */
			BSP_AUDIO_IN_PDMToPCM((uint16_t*) &InternalBuffer[0],
 8001054:	493d      	ldr	r1, [pc, #244]	; (800114c <AudioRecord_Test+0x140>)
 8001056:	483b      	ldr	r0, [pc, #236]	; (8001144 <AudioRecord_Test+0x138>)
 8001058:	f001 facc 	bl	80025f4 <BSP_AUDIO_IN_PDMToPCM>

			/* Copy PCM data in internal buffer */
			// It copies PCM_OUT_SIZE * 4 because they are uint16_t, which are 2 bytes long and memcpy
			// expects a size in bytes. Since RecBuf has dimension of PCM_OUT_SIZE * 2, it needs to multiplied
			// by another 2.
			memcpy((uint16_t*) &WrBuffer[ITCounter * (PCM_OUT_SIZE)], RecBuf,
 800105c:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <AudioRecord_Test+0x144>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4a3b      	ldr	r2, [pc, #236]	; (8001154 <AudioRecord_Test+0x148>)
 8001066:	4413      	add	r3, r2
 8001068:	2220      	movs	r2, #32
 800106a:	4938      	ldr	r1, [pc, #224]	; (800114c <AudioRecord_Test+0x140>)
 800106c:	4618      	mov	r0, r3
 800106e:	f00e ff63 	bl	800ff38 <memcpy>
					PCM_OUT_SIZE * 2);

			BufferCtl.offset = BUFFER_OFFSET_NONE;
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <AudioRecord_Test+0x134>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

			if (ITCounter == (WR_BUFFER_SIZE / (PCM_OUT_SIZE * 2)) - 1) {
 8001078:	4b35      	ldr	r3, [pc, #212]	; (8001150 <AudioRecord_Test+0x144>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001080:	d108      	bne.n	8001094 <AudioRecord_Test+0x88>
				AUDIODataReady = 1;
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <AudioRecord_Test+0x13c>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
				//AUDIOBuffOffset = 0;
				ITCounter++;
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <AudioRecord_Test+0x144>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a30      	ldr	r2, [pc, #192]	; (8001150 <AudioRecord_Test+0x144>)
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e011      	b.n	80010b8 <AudioRecord_Test+0xac>
			} else if (ITCounter == (WR_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <AudioRecord_Test+0x144>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800109c:	4293      	cmp	r3, r2
 800109e:	d106      	bne.n	80010ae <AudioRecord_Test+0xa2>
				AUDIODataReady = 2;
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <AudioRecord_Test+0x13c>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	601a      	str	r2, [r3, #0]
				//AUDIOBuffOffset = WR_BUFFER_SIZE/2;
				ITCounter = 0;
 80010a6:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <AudioRecord_Test+0x144>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e004      	b.n	80010b8 <AudioRecord_Test+0xac>
			} else {
				ITCounter++;
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <AudioRecord_Test+0x144>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a26      	ldr	r2, [pc, #152]	; (8001150 <AudioRecord_Test+0x144>)
 80010b6:	6013      	str	r3, [r2, #0]
			}

		}

		if (BufferCtl.offset == BUFFER_OFFSET_FULL) {
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <AudioRecord_Test+0x134>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d131      	bne.n	8001124 <AudioRecord_Test+0x118>
			/* PDM to PCM data convert */
			BSP_AUDIO_IN_PDMToPCM(
 80010c0:	4922      	ldr	r1, [pc, #136]	; (800114c <AudioRecord_Test+0x140>)
 80010c2:	4825      	ldr	r0, [pc, #148]	; (8001158 <AudioRecord_Test+0x14c>)
 80010c4:	f001 fa96 	bl	80025f4 <BSP_AUDIO_IN_PDMToPCM>
					(uint16_t*) &InternalBuffer[INTERNAL_BUFF_SIZE / 2],
					(uint16_t*) &RecBuf[0]);

			/* Copy PCM data in internal buffer */
			memcpy((uint16_t*) &WrBuffer[ITCounter * (PCM_OUT_SIZE)], RecBuf,
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <AudioRecord_Test+0x144>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <AudioRecord_Test+0x148>)
 80010d2:	4413      	add	r3, r2
 80010d4:	2220      	movs	r2, #32
 80010d6:	491d      	ldr	r1, [pc, #116]	; (800114c <AudioRecord_Test+0x140>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f00e ff2d 	bl	800ff38 <memcpy>
					PCM_OUT_SIZE * 2);

			BufferCtl.offset = BUFFER_OFFSET_NONE;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <AudioRecord_Test+0x134>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

			if (ITCounter == (WR_BUFFER_SIZE / (PCM_OUT_SIZE * 2)) - 1) {
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <AudioRecord_Test+0x144>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80010ec:	d108      	bne.n	8001100 <AudioRecord_Test+0xf4>
				AUDIODataReady = 1;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <AudioRecord_Test+0x13c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
				//AUDIOBuffOffset = 0;
				ITCounter++;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <AudioRecord_Test+0x144>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <AudioRecord_Test+0x144>)
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e011      	b.n	8001124 <AudioRecord_Test+0x118>
			} else if (ITCounter == (WR_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <AudioRecord_Test+0x144>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001108:	4293      	cmp	r3, r2
 800110a:	d106      	bne.n	800111a <AudioRecord_Test+0x10e>
				AUDIODataReady = 2;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <AudioRecord_Test+0x13c>)
 800110e:	2202      	movs	r2, #2
 8001110:	601a      	str	r2, [r3, #0]
				//AUDIOBuffOffset = WR_BUFFER_SIZE/2;
				ITCounter = 0;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <AudioRecord_Test+0x144>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e004      	b.n	8001124 <AudioRecord_Test+0x118>
			} else {
				ITCounter++;
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <AudioRecord_Test+0x144>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <AudioRecord_Test+0x144>)
 8001122:	6013      	str	r3, [r2, #0]
	while (AUDIODataReady != 2) {
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <AudioRecord_Test+0x13c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d18f      	bne.n	800104c <AudioRecord_Test+0x40>
			}
		}
	};

	/* Stop audio record */
	if (BSP_AUDIO_IN_Stop() != AUDIO_OK) {
 800112c:	f001 fa50 	bl	80025d0 <BSP_AUDIO_IN_Stop>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <AudioRecord_Test+0x12e>
		/* Record Error */
		Error_Handler();
 8001136:	f000 fe8d 	bl	8001e54 <Error_Handler>
	/* if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW) != AUDIO_OK)
	 {
	 /* Audio Stop error */
	/*  Error_Handler();
	 }*/
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20001320 	.word	0x20001320
 8001144:	200010f0 	.word	0x200010f0
 8001148:	200011f4 	.word	0x200011f4
 800114c:	200010d0 	.word	0x200010d0
 8001150:	200011f0 	.word	0x200011f0
 8001154:	20001328 	.word	0x20001328
 8001158:	20001170 	.word	0x20001170

0800115c <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
 * @brief Calculates the remaining file size and new position of the pointer.
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	BufferCtl.offset = BUFFER_OFFSET_FULL;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8001162:	2202      	movs	r2, #2
 8001164:	601a      	str	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	20001320 	.word	0x20001320

08001174 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
 * @brief  Manages the DMA Half Transfer complete interrupt.
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	BufferCtl.offset = BUFFER_OFFSET_HALF;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	20001320 	.word	0x20001320

0800118c <BSP_AUDIO_IN_Error_Callback>:
/**
 * @brief  Audio IN Error callback function
 * @param  pData
 * @retval None
 */
void BSP_AUDIO_IN_Error_Callback(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* Stop the program with an infinite loop */
	Error_Handler();
 8001190:	f000 fe60 	bl	8001e54 <Error_Handler>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <argmax>:
		FOLLOW, FORWARD, FOUR, GO, HAPPY, HOUSE, LEARN, LEFT, MARVIN, NINE, NO,
		OFF, ON, ONE, RIGHT, SEVEN, SHEILA, SIX, STOP, THREE, TREE, TWO, UP,
		VISUAL, WOW, YES, ZERO };

// TODO: document me!
uint8_t argmax(const ai_float arr[], uint8_t size) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	assert(size > 0 && size <= DICTIONARY_SIZE);
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <argmax+0x18>
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	2b26      	cmp	r3, #38	; 0x26
 80011ae:	d905      	bls.n	80011bc <argmax+0x24>
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <argmax+0x74>)
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <argmax+0x78>)
 80011b4:	213e      	movs	r1, #62	; 0x3e
 80011b6:	4817      	ldr	r0, [pc, #92]	; (8001214 <argmax+0x7c>)
 80011b8:	f00e fe5c 	bl	800fe74 <__assert_func>
	uint8_t idx = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	75fb      	strb	r3, [r7, #23]
	ai_float max = arr[0];
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	613b      	str	r3, [r7, #16]
	ai_float tmp;

	for (uint8_t i = 1; i < size; i++) {
 80011c6:	2301      	movs	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e015      	b.n	80011f8 <argmax+0x60>
		tmp = arr[i];
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	60bb      	str	r3, [r7, #8]
		if (tmp > max) {
 80011d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80011dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	dd03      	ble.n	80011f2 <argmax+0x5a>
			max = tmp;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	613b      	str	r3, [r7, #16]
			idx = i;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 1; i < size; i++) {
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3301      	adds	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3e5      	bcc.n	80011cc <argmax+0x34>
		}
	}

	return idx;
 8001200:	7dfb      	ldrb	r3, [r7, #23]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	080168a0 	.word	0x080168a0
 8001210:	08016b48 	.word	0x08016b48
 8001214:	080168c4 	.word	0x080168c4

08001218 <get_word>:

// TODO: document me!
char* get_word(uint8_t idx) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	assert(idx < DICTIONARY_SIZE);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b25      	cmp	r3, #37	; 0x25
 8001226:	d905      	bls.n	8001234 <get_word+0x1c>
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <get_word+0x2c>)
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <get_word+0x30>)
 800122c:	2150      	movs	r1, #80	; 0x50
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <get_word+0x34>)
 8001230:	f00e fe20 	bl	800fe74 <__assert_func>
	return dictionary[idx];
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <get_word+0x38>)
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	080168dc 	.word	0x080168dc
 8001248:	08016b50 	.word	0x08016b50
 800124c:	080168c4 	.word	0x080168c4
 8001250:	20000400 	.word	0x20000400

08001254 <AudioPreprocessing_Run>:
int bits = 7; // log2(WIN_LENGTH)
#endif

/* For MFCCs computation -------------------------------------------- */
void AudioPreprocessing_Run(int16_t *pInSignal, float32_t *pOutMfcc,
		uint32_t signal_len) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	const uint32_t num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001266:	0a5b      	lsrs	r3, r3, #9
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]

	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	e029      	b.n	80012c6 <AudioPreprocessing_Run+0x72>
		buf_to_float_normed(&pInSignal[HOP_LEN * frame_index], pInFrame,
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	029b      	lsls	r3, r3, #10
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127e:	4916      	ldr	r1, [pc, #88]	; (80012d8 <AudioPreprocessing_Run+0x84>)
 8001280:	4618      	mov	r0, r3
 8001282:	f008 f88f 	bl	80093a4 <buf_to_float_normed>
		FRAME_LEN);

		MfccColumn(&S_Mfcc, pInFrame, pOutColBuffer);
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <AudioPreprocessing_Run+0x88>)
 8001288:	4913      	ldr	r1, [pc, #76]	; (80012d8 <AudioPreprocessing_Run+0x84>)
 800128a:	4815      	ldr	r0, [pc, #84]	; (80012e0 <AudioPreprocessing_Run+0x8c>)
 800128c:	f008 fa0b 	bl	80096a6 <MfccColumn>
		/* Reshape column into pOutMfcc */
		for (uint32_t i = 0; i < NUM_MFCC; i++) {
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	e011      	b.n	80012ba <AudioPreprocessing_Run+0x66>
			pOutMfcc[i * num_frames + frame_index] = pOutColBuffer[i];
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	fb02 f203 	mul.w	r2, r2, r3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	4413      	add	r3, r2
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <AudioPreprocessing_Run+0x88>)
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	440a      	add	r2, r1
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < NUM_MFCC; i++) {
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d9ea      	bls.n	8001296 <AudioPreprocessing_Run+0x42>
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	3301      	adds	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3d1      	bcc.n	8001272 <AudioPreprocessing_Run+0x1e>
		}
	}
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20009964 	.word	0x20009964
 80012dc:	2000b9e8 	.word	0x2000b9e8
 80012e0:	20011ac0 	.word	0x20011ac0

080012e4 <debug>:
/* -------------------------------------------- */

void debug(const char *c) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) c, strlen(c),
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7fe ff79 	bl	80001e4 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <debug+0x28>)
 80012fe:	f007 f91d 	bl	800853c <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20011a7c 	.word	0x20011a7c

08001310 <recognize_commands>:
	BSP_LED_Toggle(LED6);
	HAL_Delay(100);
}

// TODO: document me!
void recognize_commands(const char *word) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	if (strcmp(word, ONE) == 0) {
 8001318:	4986      	ldr	r1, [pc, #536]	; (8001534 <recognize_commands+0x224>)
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7fe ff58 	bl	80001d0 <strcmp>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d12a      	bne.n	800137c <recognize_commands+0x6c>
		if (led_status != Green) {
 8001326:	4b84      	ldr	r3, [pc, #528]	; (8001538 <recognize_commands+0x228>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	f000 80fe 	beq.w	800152c <recognize_commands+0x21c>
			if (led_status == Blue) {
 8001330:	4b81      	ldr	r3, [pc, #516]	; (8001538 <recognize_commands+0x228>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d105      	bne.n	8001344 <recognize_commands+0x34>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133c:	487f      	ldr	r0, [pc, #508]	; (800153c <recognize_commands+0x22c>)
 800133e:	f005 f920 	bl	8006582 <HAL_GPIO_TogglePin>
 8001342:	e012      	b.n	800136a <recognize_commands+0x5a>
			} else if (led_status == Red) {
 8001344:	4b7c      	ldr	r3, [pc, #496]	; (8001538 <recognize_commands+0x228>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d105      	bne.n	8001358 <recognize_commands+0x48>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800134c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001350:	487a      	ldr	r0, [pc, #488]	; (800153c <recognize_commands+0x22c>)
 8001352:	f005 f916 	bl	8006582 <HAL_GPIO_TogglePin>
 8001356:	e008      	b.n	800136a <recognize_commands+0x5a>
			} else if (led_status == Orange) {
 8001358:	4b77      	ldr	r3, [pc, #476]	; (8001538 <recognize_commands+0x228>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b04      	cmp	r3, #4
 800135e:	d104      	bne.n	800136a <recognize_commands+0x5a>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	4875      	ldr	r0, [pc, #468]	; (800153c <recognize_commands+0x22c>)
 8001366:	f005 f90c 	bl	8006582 <HAL_GPIO_TogglePin>
			}
			// GREEN LED
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800136a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136e:	4873      	ldr	r0, [pc, #460]	; (800153c <recognize_commands+0x22c>)
 8001370:	f005 f907 	bl	8006582 <HAL_GPIO_TogglePin>
			led_status = Green;
 8001374:	4b70      	ldr	r3, [pc, #448]	; (8001538 <recognize_commands+0x228>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
			// disable the display of the words
			if (display_words_enabled)
				display_words_enabled = 0;
		}
	}
}
 800137a:	e0d7      	b.n	800152c <recognize_commands+0x21c>
	} else if (strcmp(word, TWO) == 0) {
 800137c:	4970      	ldr	r1, [pc, #448]	; (8001540 <recognize_commands+0x230>)
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7fe ff26 	bl	80001d0 <strcmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d12a      	bne.n	80013e0 <recognize_commands+0xd0>
		if (led_status != Blue) {
 800138a:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <recognize_commands+0x228>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b02      	cmp	r3, #2
 8001390:	f000 80cc 	beq.w	800152c <recognize_commands+0x21c>
			if (led_status == Green) {
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <recognize_commands+0x228>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <recognize_commands+0x98>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800139c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a0:	4866      	ldr	r0, [pc, #408]	; (800153c <recognize_commands+0x22c>)
 80013a2:	f005 f8ee 	bl	8006582 <HAL_GPIO_TogglePin>
 80013a6:	e012      	b.n	80013ce <recognize_commands+0xbe>
			} else if (led_status == Red) {
 80013a8:	4b63      	ldr	r3, [pc, #396]	; (8001538 <recognize_commands+0x228>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d105      	bne.n	80013bc <recognize_commands+0xac>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80013b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b4:	4861      	ldr	r0, [pc, #388]	; (800153c <recognize_commands+0x22c>)
 80013b6:	f005 f8e4 	bl	8006582 <HAL_GPIO_TogglePin>
 80013ba:	e008      	b.n	80013ce <recognize_commands+0xbe>
			} else if (led_status == Orange) {
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <recognize_commands+0x228>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d104      	bne.n	80013ce <recognize_commands+0xbe>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80013c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c8:	485c      	ldr	r0, [pc, #368]	; (800153c <recognize_commands+0x22c>)
 80013ca:	f005 f8da 	bl	8006582 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80013ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d2:	485a      	ldr	r0, [pc, #360]	; (800153c <recognize_commands+0x22c>)
 80013d4:	f005 f8d5 	bl	8006582 <HAL_GPIO_TogglePin>
			led_status = Blue;
 80013d8:	4b57      	ldr	r3, [pc, #348]	; (8001538 <recognize_commands+0x228>)
 80013da:	2202      	movs	r2, #2
 80013dc:	701a      	strb	r2, [r3, #0]
}
 80013de:	e0a5      	b.n	800152c <recognize_commands+0x21c>
	} else if (strcmp(word, THREE) == 0) {
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <recognize_commands+0x234>)
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7fe fef4 	bl	80001d0 <strcmp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d12a      	bne.n	8001444 <recognize_commands+0x134>
		if (led_status != Red) {
 80013ee:	4b52      	ldr	r3, [pc, #328]	; (8001538 <recognize_commands+0x228>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	f000 809a 	beq.w	800152c <recognize_commands+0x21c>
			if (led_status == Green) {
 80013f8:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <recognize_commands+0x228>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d105      	bne.n	800140c <recognize_commands+0xfc>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001404:	484d      	ldr	r0, [pc, #308]	; (800153c <recognize_commands+0x22c>)
 8001406:	f005 f8bc 	bl	8006582 <HAL_GPIO_TogglePin>
 800140a:	e012      	b.n	8001432 <recognize_commands+0x122>
			} else if (led_status == Blue) {
 800140c:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <recognize_commands+0x228>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d105      	bne.n	8001420 <recognize_commands+0x110>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001418:	4848      	ldr	r0, [pc, #288]	; (800153c <recognize_commands+0x22c>)
 800141a:	f005 f8b2 	bl	8006582 <HAL_GPIO_TogglePin>
 800141e:	e008      	b.n	8001432 <recognize_commands+0x122>
			} else if (led_status == Orange) {
 8001420:	4b45      	ldr	r3, [pc, #276]	; (8001538 <recognize_commands+0x228>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b04      	cmp	r3, #4
 8001426:	d104      	bne.n	8001432 <recognize_commands+0x122>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142c:	4843      	ldr	r0, [pc, #268]	; (800153c <recognize_commands+0x22c>)
 800142e:	f005 f8a8 	bl	8006582 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001436:	4841      	ldr	r0, [pc, #260]	; (800153c <recognize_commands+0x22c>)
 8001438:	f005 f8a3 	bl	8006582 <HAL_GPIO_TogglePin>
			led_status = Red;
 800143c:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <recognize_commands+0x228>)
 800143e:	2203      	movs	r2, #3
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	e073      	b.n	800152c <recognize_commands+0x21c>
	} else if (strcmp(word, FOUR) == 0) {
 8001444:	4940      	ldr	r1, [pc, #256]	; (8001548 <recognize_commands+0x238>)
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7fe fec2 	bl	80001d0 <strcmp>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d129      	bne.n	80014a6 <recognize_commands+0x196>
		if (led_status != Orange) {
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <recognize_commands+0x228>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b04      	cmp	r3, #4
 8001458:	d068      	beq.n	800152c <recognize_commands+0x21c>
			if (led_status == Green) {
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <recognize_commands+0x228>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d105      	bne.n	800146e <recognize_commands+0x15e>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001466:	4835      	ldr	r0, [pc, #212]	; (800153c <recognize_commands+0x22c>)
 8001468:	f005 f88b 	bl	8006582 <HAL_GPIO_TogglePin>
 800146c:	e012      	b.n	8001494 <recognize_commands+0x184>
			} else if (led_status == Blue) {
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <recognize_commands+0x228>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d105      	bne.n	8001482 <recognize_commands+0x172>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147a:	4830      	ldr	r0, [pc, #192]	; (800153c <recognize_commands+0x22c>)
 800147c:	f005 f881 	bl	8006582 <HAL_GPIO_TogglePin>
 8001480:	e008      	b.n	8001494 <recognize_commands+0x184>
			} else if (led_status == Red) {
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <recognize_commands+0x228>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d104      	bne.n	8001494 <recognize_commands+0x184>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800148a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148e:	482b      	ldr	r0, [pc, #172]	; (800153c <recognize_commands+0x22c>)
 8001490:	f005 f877 	bl	8006582 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	4828      	ldr	r0, [pc, #160]	; (800153c <recognize_commands+0x22c>)
 800149a:	f005 f872 	bl	8006582 <HAL_GPIO_TogglePin>
			led_status = Orange;
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <recognize_commands+0x228>)
 80014a0:	2204      	movs	r2, #4
 80014a2:	701a      	strb	r2, [r3, #0]
}
 80014a4:	e042      	b.n	800152c <recognize_commands+0x21c>
		if (led_status == Green) {
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <recognize_commands+0x228>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d105      	bne.n	80014ba <recognize_commands+0x1aa>
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80014ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b2:	4822      	ldr	r0, [pc, #136]	; (800153c <recognize_commands+0x22c>)
 80014b4:	f005 f865 	bl	8006582 <HAL_GPIO_TogglePin>
 80014b8:	e01c      	b.n	80014f4 <recognize_commands+0x1e4>
		} else if (led_status == Blue) {
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <recognize_commands+0x228>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d105      	bne.n	80014ce <recognize_commands+0x1be>
			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80014c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c6:	481d      	ldr	r0, [pc, #116]	; (800153c <recognize_commands+0x22c>)
 80014c8:	f005 f85b 	bl	8006582 <HAL_GPIO_TogglePin>
 80014cc:	e012      	b.n	80014f4 <recognize_commands+0x1e4>
		} else if (led_status == Red) {
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <recognize_commands+0x228>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d105      	bne.n	80014e2 <recognize_commands+0x1d2>
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80014d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014da:	4818      	ldr	r0, [pc, #96]	; (800153c <recognize_commands+0x22c>)
 80014dc:	f005 f851 	bl	8006582 <HAL_GPIO_TogglePin>
 80014e0:	e008      	b.n	80014f4 <recognize_commands+0x1e4>
		} else if (led_status == Orange) {
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <recognize_commands+0x228>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d104      	bne.n	80014f4 <recognize_commands+0x1e4>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80014ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ee:	4813      	ldr	r0, [pc, #76]	; (800153c <recognize_commands+0x22c>)
 80014f0:	f005 f847 	bl	8006582 <HAL_GPIO_TogglePin>
		led_status = Off;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <recognize_commands+0x228>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
		if (strcmp(word, ON) == 0) {
 80014fa:	4914      	ldr	r1, [pc, #80]	; (800154c <recognize_commands+0x23c>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7fe fe67 	bl	80001d0 <strcmp>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d103      	bne.n	8001510 <recognize_commands+0x200>
			display_words_enabled = 1;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <recognize_commands+0x240>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
}
 800150e:	e00d      	b.n	800152c <recognize_commands+0x21c>
		} else if (strcmp(word, OFF) == 0) {
 8001510:	4910      	ldr	r1, [pc, #64]	; (8001554 <recognize_commands+0x244>)
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7fe fe5c 	bl	80001d0 <strcmp>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <recognize_commands+0x21c>
			if (display_words_enabled)
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <recognize_commands+0x240>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <recognize_commands+0x21c>
				display_words_enabled = 0;
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <recognize_commands+0x240>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	08016af0 	.word	0x08016af0
 8001538:	200011fa 	.word	0x200011fa
 800153c:	40020c00 	.word	0x40020c00
 8001540:	08016b28 	.word	0x08016b28
 8001544:	08016b18 	.word	0x08016b18
 8001548:	08016aa8 	.word	0x08016aa8
 800154c:	08016aec 	.word	0x08016aec
 8001550:	200011f9 	.word	0x200011f9
 8001554:	08016ae8 	.word	0x08016ae8

08001558 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	f5ad 4da8 	sub.w	sp, sp, #21504	; 0x5400
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	//float32_t pOutMfcc[NUM_MFCC * num_frames];
	char b[50];
	int buf_len = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	f507 42a8 	add.w	r2, r7, #21504	; 0x5400
 8001568:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800156c:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_float in_data[AI_SPEECH_COMMANDS_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_float out_data[AI_SPEECH_COMMANDS_MODEL_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle speech_commands_model = AI_HANDLE_NULL;
 800156e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001572:	3b4c      	subs	r3, #76	; 0x4c
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_SPEECH_COMMANDS_MODEL_IN_NUM] =
 8001578:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800157c:	3b64      	subs	r3, #100	; 0x64
 800157e:	4ac9      	ldr	r2, [pc, #804]	; (80018a4 <main+0x34c>)
 8001580:	461c      	mov	r4, r3
 8001582:	4615      	mov	r5, r2
 8001584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001588:	e895 0003 	ldmia.w	r5, {r0, r1}
 800158c:	e884 0003 	stmia.w	r4, {r0, r1}
	AI_SPEECH_COMMANDS_MODEL_IN;
	ai_buffer ai_output[AI_SPEECH_COMMANDS_MODEL_OUT_NUM] =
 8001590:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001594:	3b7c      	subs	r3, #124	; 0x7c
 8001596:	4ac4      	ldr	r2, [pc, #784]	; (80018a8 <main+0x350>)
 8001598:	461c      	mov	r4, r3
 800159a:	4615      	mov	r5, r2
 800159c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015a4:	e884 0003 	stmia.w	r4, {r0, r1}
	AI_SPEECH_COMMANDS_MODEL_OUT;

	// Set working memory and get weights/biases from model
	ai_network_params ai_params =
 80015a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ac:	3b2c      	subs	r3, #44	; 0x2c
 80015ae:	4abf      	ldr	r2, [pc, #764]	; (80018ac <main+0x354>)
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b6:	3b2c      	subs	r3, #44	; 0x2c
 80015b8:	2201      	movs	r2, #1
 80015ba:	809a      	strh	r2, [r3, #4]
 80015bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c0:	3b2c      	subs	r3, #44	; 0x2c
 80015c2:	2201      	movs	r2, #1
 80015c4:	80da      	strh	r2, [r3, #6]
 80015c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ca:	3b2c      	subs	r3, #44	; 0x2c
 80015cc:	2201      	movs	r2, #1
 80015ce:	811a      	strh	r2, [r3, #8]
 80015d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d4:	3b2c      	subs	r3, #44	; 0x2c
 80015d6:	4ab6      	ldr	r2, [pc, #728]	; (80018b0 <main+0x358>)
 80015d8:	60da      	str	r2, [r3, #12]
					AI_NETWORK_PARAMS_INIT(
 80015da:	f008 fe23 	bl	800a224 <ai_speech_commands_model_data_weights_get>
 80015de:	4602      	mov	r2, r0
	ai_network_params ai_params =
 80015e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e4:	3b2c      	subs	r3, #44	; 0x2c
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ec:	3b2c      	subs	r3, #44	; 0x2c
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f6:	3b2c      	subs	r3, #44	; 0x2c
 80015f8:	4aae      	ldr	r2, [pc, #696]	; (80018b4 <main+0x35c>)
 80015fa:	619a      	str	r2, [r3, #24]
 80015fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001600:	3b2c      	subs	r3, #44	; 0x2c
 8001602:	2201      	movs	r2, #1
 8001604:	839a      	strh	r2, [r3, #28]
 8001606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160a:	3b2c      	subs	r3, #44	; 0x2c
 800160c:	2201      	movs	r2, #1
 800160e:	83da      	strh	r2, [r3, #30]
 8001610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001614:	3b2c      	subs	r3, #44	; 0x2c
 8001616:	2201      	movs	r2, #1
 8001618:	841a      	strh	r2, [r3, #32]
 800161a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800161e:	3b2c      	subs	r3, #44	; 0x2c
 8001620:	f243 5220 	movw	r2, #13600	; 0x3520
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
 8001626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162a:	3b2c      	subs	r3, #44	; 0x2c
 800162c:	f507 52f7 	add.w	r2, r7, #7904	; 0x1ee0
 8001630:	f102 0210 	add.w	r2, r2, #16
 8001634:	3a28      	subs	r2, #40	; 0x28
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
 8001638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163c:	3b2c      	subs	r3, #44	; 0x2c
 800163e:	2200      	movs	r2, #0
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
							AI_SPEECH_COMMANDS_MODEL_DATA_WEIGHTS(ai_speech_commands_model_data_weights_get()),
							AI_SPEECH_COMMANDS_MODEL_DATA_ACTIVATIONS(activations)
					);

	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8001642:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001646:	3b64      	subs	r3, #100	; 0x64
 8001648:	2201      	movs	r2, #1
 800164a:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800164c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001650:	3b64      	subs	r3, #100	; 0x64
 8001652:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8001656:	3a68      	subs	r2, #104	; 0x68
 8001658:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 800165a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800165e:	3b7c      	subs	r3, #124	; 0x7c
 8001660:	2201      	movs	r2, #1
 8001662:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001664:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001668:	3b7c      	subs	r3, #124	; 0x7c
 800166a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800166e:	3a48      	subs	r2, #72	; 0x48
 8001670:	611a      	str	r2, [r3, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001672:	f003 ffcf 	bl	8005614 <HAL_Init>

	/* USER CODE BEGIN Init */

	// Initialize leds
	BSP_LED_Init(LED3);
 8001676:	2001      	movs	r0, #1
 8001678:	f000 fe78 	bl	800236c <BSP_LED_Init>
	BSP_LED_Init(LED4);
 800167c:	2000      	movs	r0, #0
 800167e:	f000 fe75 	bl	800236c <BSP_LED_Init>
	BSP_LED_Init(LED5);
 8001682:	2002      	movs	r0, #2
 8001684:	f000 fe72 	bl	800236c <BSP_LED_Init>
	BSP_LED_Init(LED6);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 fe6f 	bl	800236c <BSP_LED_Init>

	Preprocessing_Init();
 800168e:	f000 fb01 	bl	8001c94 <Preprocessing_Init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001692:	f000 f921 	bl	80018d8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	// Initialize button
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001696:	2101      	movs	r1, #1
 8001698:	2000      	movs	r0, #0
 800169a:	f000 fedf 	bl	800245c <BSP_PB_Init>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800169e:	f000 fa81 	bl	8001ba4 <MX_GPIO_Init>
	MX_DMA_Init();
 80016a2:	f000 fa5f 	bl	8001b64 <MX_DMA_Init>
	MX_I2S2_Init();
 80016a6:	f000 f9cf 	bl	8001a48 <MX_I2S2_Init>
	MX_CRC_Init();
 80016aa:	f000 f983 	bl	80019b4 <MX_CRC_Init>
	MX_PDM2PCM_Init();
 80016ae:	f008 fbd3 	bl	8009e58 <MX_PDM2PCM_Init>
	MX_USART2_UART_Init();
 80016b2:	f000 fa2d 	bl	8001b10 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80016b6:	f000 f999 	bl	80019ec <MX_I2C1_Init>
	MX_SPI1_Init();
 80016ba:	f000 f9f3 	bl	8001aa4 <MX_SPI1_Init>
	// Start the DMA with halfof the PDM buffer dimension
	HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0], 64);
#endif

	// Create instance of neural network
	ai_err = ai_speech_commands_model_create(&speech_commands_model,
 80016be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016c2:	3b4c      	subs	r3, #76	; 0x4c
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f008 fd4a 	bl	800a160 <ai_speech_commands_model_create>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 80016d2:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80016d6:	6013      	str	r3, [r2, #0]
	AI_SPEECH_COMMANDS_MODEL_DATA_CONFIG);
	if (ai_err.type != AI_ERROR_NONE) {
 80016d8:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80016dc:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01b      	beq.n	800171e <main+0x1c6>
		buf_len = sprintf(b, "Error: could not create NN instance\r\n");
 80016e6:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80016ea:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80016ee:	4972      	ldr	r1, [pc, #456]	; (80018b8 <main+0x360>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00f fccb 	bl	801108c <siprintf>
 80016f6:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 80016fa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80016fe:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) b, buf_len, 100);
 8001700:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 8001704:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29a      	uxth	r2, r3
 800170c:	f507 41a7 	add.w	r1, r7, #21376	; 0x5380
 8001710:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	4869      	ldr	r0, [pc, #420]	; (80018bc <main+0x364>)
 8001718:	f006 ff10 	bl	800853c <HAL_UART_Transmit>
		while (1)
 800171c:	e7fe      	b.n	800171c <main+0x1c4>
			;
	}

	// Initialize neural network
	if (!ai_speech_commands_model_init(speech_commands_model, &ai_params)) {
 800171e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001722:	3b4c      	subs	r3, #76	; 0x4c
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800172a:	3b2c      	subs	r3, #44	; 0x2c
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f008 fd2c 	bl	800a18c <ai_speech_commands_model_init>
 8001734:	4603      	mov	r3, r0
 8001736:	f083 0301 	eor.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80ab 	beq.w	8001898 <main+0x340>
		buf_len = sprintf(b, "Error: could not initialize NN\r\n");
 8001742:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001746:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800174a:	495d      	ldr	r1, [pc, #372]	; (80018c0 <main+0x368>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00f fc9d 	bl	801108c <siprintf>
 8001752:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 8001756:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800175a:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) b, buf_len, 100);
 800175c:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 8001760:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b29a      	uxth	r2, r3
 8001768:	f507 41a7 	add.w	r1, r7, #21376	; 0x5380
 800176c:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8001770:	2364      	movs	r3, #100	; 0x64
 8001772:	4852      	ldr	r0, [pc, #328]	; (80018bc <main+0x364>)
 8001774:	f006 fee2 	bl	800853c <HAL_UART_Transmit>
		while (1)
 8001778:	e7fe      	b.n	8001778 <main+0x220>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//uint8_t printed = 0;
	while (1) {
		while (button_pressed) {
			button_pressed = 0;
 800177a:	4b52      	ldr	r3, [pc, #328]	; (80018c4 <main+0x36c>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
			AudioRecord_Test();
 8001780:	f7ff fc44 	bl	800100c <AudioRecord_Test>
//		for (int i = 0; i < (NUM_MFCC * num_frames); i++) {
//						int l = sprintf(b, "%e\r\n", pOutMfcc[i]);
//						HAL_UART_Transmit(&huart2, (uint8_t*) b, l,
//						HAL_MAX_DELAY);
//					}
			AudioPreprocessing_Run((int16_t*) &WrBuffer[0],
 8001784:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001788:	3b68      	subs	r3, #104	; 0x68
 800178a:	f643 72f0 	movw	r2, #16368	; 0x3ff0
 800178e:	4619      	mov	r1, r3
 8001790:	484d      	ldr	r0, [pc, #308]	; (80018c8 <main+0x370>)
 8001792:	f7ff fd5f 	bl	8001254 <AudioPreprocessing_Run>
			 HAL_MAX_DELAY);
			 }*/

			//BSP_LED_Off(LED6);
			// Perform inference
			nbatch = ai_speech_commands_model_run(speech_commands_model,
 8001796:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800179a:	3b4c      	subs	r3, #76	; 0x4c
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80017a2:	3a7c      	subs	r2, #124	; 0x7c
 80017a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017a8:	3b64      	subs	r3, #100	; 0x64
 80017aa:	4619      	mov	r1, r3
 80017ac:	f008 fd2a 	bl	800a204 <ai_speech_commands_model_run>
 80017b0:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 80017b4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017b8:	6018      	str	r0, [r3, #0]
					&ai_input[0], &ai_output[0]);
			if (nbatch != 1) {
 80017ba:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 80017be:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d01a      	beq.n	80017fe <main+0x2a6>
				buf_len = sprintf(b, "Error: could not run inference\r\n");
 80017c8:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80017cc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80017d0:	493e      	ldr	r1, [pc, #248]	; (80018cc <main+0x374>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00f fc5a 	bl	801108c <siprintf>
 80017d8:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 80017dc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80017e0:	6018      	str	r0, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) b, buf_len, 100);
 80017e2:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 80017e6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	f507 41a7 	add.w	r1, r7, #21376	; 0x5380
 80017f2:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	4830      	ldr	r0, [pc, #192]	; (80018bc <main+0x364>)
 80017fa:	f006 fe9f 	bl	800853c <HAL_UART_Transmit>
			}

			uint8_t idx = argmax(out_data, AI_SPEECH_COMMANDS_MODEL_OUT_1_SIZE);
 80017fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001802:	3b48      	subs	r3, #72	; 0x48
 8001804:	2126      	movs	r1, #38	; 0x26
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fcc6 	bl	8001198 <argmax>
 800180c:	4603      	mov	r3, r0
 800180e:	f507 42a8 	add.w	r2, r7, #21504	; 0x5400
 8001812:	f102 0227 	add.w	r2, r2, #39	; 0x27
 8001816:	7013      	strb	r3, [r2, #0]

			char *word = get_word(idx);
 8001818:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 800181c:	f103 0327 	add.w	r3, r3, #39	; 0x27
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fcf8 	bl	8001218 <get_word>
 8001828:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 800182c:	f103 0320 	add.w	r3, r3, #32
 8001830:	6018      	str	r0, [r3, #0]

			recognize_commands(word);
 8001832:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 8001836:	f103 0320 	add.w	r3, r3, #32
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	f7ff fd68 	bl	8001310 <recognize_commands>
			//display_words_enabled = 1; // to remove

			if (display_words_enabled) {
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <main+0x378>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d027      	beq.n	8001898 <main+0x340>

				// Print output of neural network
				buf_len = sprintf(b, "%d %s\r\n", idx, word);
 8001848:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 800184c:	f103 0327 	add.w	r3, r3, #39	; 0x27
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	f507 40a7 	add.w	r0, r7, #21376	; 0x5380
 8001856:	f100 006c 	add.w	r0, r0, #108	; 0x6c
 800185a:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 800185e:	f103 0320 	add.w	r3, r3, #32
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	491b      	ldr	r1, [pc, #108]	; (80018d4 <main+0x37c>)
 8001866:	f00f fc11 	bl	801108c <siprintf>
 800186a:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 800186e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001872:	6018      	str	r0, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) b, buf_len, 100);
 8001874:	f507 43a8 	add.w	r3, r7, #21504	; 0x5400
 8001878:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29a      	uxth	r2, r3
 8001880:	f507 41a7 	add.w	r1, r7, #21376	; 0x5380
 8001884:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8001888:	2364      	movs	r3, #100	; 0x64
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <main+0x364>)
 800188c:	f006 fe56 	bl	800853c <HAL_UART_Transmit>

				// Wait before doing it again
				HAL_Delay(500);
 8001890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001894:	f003 ff30 	bl	80056f8 <HAL_Delay>
		while (button_pressed) {
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <main+0x36c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	f47f af6c 	bne.w	800177a <main+0x222>
 80018a2:	e7f9      	b.n	8001898 <main+0x340>
 80018a4:	0801696c 	.word	0x0801696c
 80018a8:	08016984 	.word	0x08016984
 80018ac:	40040440 	.word	0x40040440
 80018b0:	0002b2f8 	.word	0x0002b2f8
 80018b4:	00040440 	.word	0x00040440
 80018b8:	080168f4 	.word	0x080168f4
 80018bc:	20011a7c 	.word	0x20011a7c
 80018c0:	0801691c 	.word	0x0801691c
 80018c4:	200011f8 	.word	0x200011f8
 80018c8:	20001328 	.word	0x20001328
 80018cc:	08016940 	.word	0x08016940
 80018d0:	200011f9 	.word	0x200011f9
 80018d4:	08016964 	.word	0x08016964

080018d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b094      	sub	sp, #80	; 0x50
 80018dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	2230      	movs	r2, #48	; 0x30
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00e fb34 	bl	800ff54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(10);
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <SystemClock_Config+0xd4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001904:	4a29      	ldr	r2, [pc, #164]	; (80019ac <SystemClock_Config+0xd4>)
 8001906:	f043 030a 	orr.w	r3, r3, #10
 800190a:	6053      	str	r3, [r2, #4]
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <SystemClock_Config+0xd4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a26      	ldr	r2, [pc, #152]	; (80019ac <SystemClock_Config+0xd4>)
 8001912:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001916:	6053      	str	r3, [r2, #4]
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <SystemClock_Config+0xd4>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a22      	ldr	r2, [pc, #136]	; (80019ac <SystemClock_Config+0xd4>)
 8001922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <SystemClock_Config+0xd4>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <SystemClock_Config+0xd8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <SystemClock_Config+0xd8>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <SystemClock_Config+0xd8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001950:	2302      	movs	r3, #2
 8001952:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001954:	2301      	movs	r3, #1
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001958:	2310      	movs	r3, #16
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001960:	2300      	movs	r3, #0
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	4618      	mov	r0, r3
 800196a:	f005 ff35 	bl	80077d8 <HAL_RCC_OscConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0xa0>
		Error_Handler();
 8001974:	f000 fa6e 	bl	8001e54 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001978:	230f      	movs	r3, #15
 800197a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f006 f998 	bl	8007cc8 <HAL_RCC_ClockConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0xca>
		Error_Handler();
 800199e:	f000 fa59 	bl	8001e54 <Error_Handler>
	}
}
 80019a2:	bf00      	nop
 80019a4:	3750      	adds	r7, #80	; 0x50
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000

080019b4 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <MX_CRC_Init+0x30>)
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <MX_CRC_Init+0x34>)
 80019bc:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <MX_CRC_Init+0x30>)
 80019c0:	f003 ffcf 	bl	8005962 <HAL_CRC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_CRC_Init+0x1a>
		Error_Handler();
 80019ca:	f000 fa43 	bl	8001e54 <Error_Handler>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <MX_CRC_Init+0x30>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <MX_CRC_Init+0x30>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000995c 	.word	0x2000995c
 80019e8:	40023000 	.word	0x40023000

080019ec <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MX_I2C1_Init+0x50>)
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <MX_I2C1_Init+0x54>)
 80019f4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_I2C1_Init+0x50>)
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_I2C1_Init+0x58>)
 80019fa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_I2C1_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a2a:	f004 fddd 	bl	80065e8 <HAL_I2C_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001a34:	f000 fa0e 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20009908 	.word	0x20009908
 8001a40:	40005400 	.word	0x40005400
 8001a44:	000186a0 	.word	0x000186a0

08001a48 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a4e:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <MX_I2S2_Init+0x58>)
 8001a50:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a54:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a58:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a62:	2203      	movs	r2, #3
 8001a64:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a6e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a72:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_I2S2_Init+0x54>)
 8001a88:	f004 fef2 	bl	8006870 <HAL_I2S_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_I2S2_Init+0x4e>
		Error_Handler();
 8001a92:	f000 f9df 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20013ad0 	.word	0x20013ad0
 8001aa0:	40003800 	.word	0x40003800

08001aa4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001aaa:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <MX_SPI1_Init+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ab4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001af0:	220a      	movs	r2, #10
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_SPI1_Init+0x64>)
 8001af6:	f006 fc4b 	bl	8008390 <HAL_SPI_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001b00:	f000 f9a8 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20011a1c 	.word	0x20011a1c
 8001b0c:	40013000 	.word	0x40013000

08001b10 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <MX_USART2_UART_Init+0x50>)
 8001b18:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b48:	f006 fcab 	bl	80084a2 <HAL_UART_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001b52:	f000 f97f 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20011a7c 	.word	0x20011a7c
 8001b60:	40004400 	.word	0x40004400

08001b64 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	200e      	movs	r0, #14
 8001b8c:	f003 feb3 	bl	80058f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b90:	200e      	movs	r0, #14
 8001b92:	f003 fecc 	bl	800592e <HAL_NVIC_EnableIRQ>

}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a31      	ldr	r2, [pc, #196]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a2a      	ldr	r2, [pc, #168]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_GPIO_Init+0xe4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001c30:	4816      	ldr	r0, [pc, #88]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c32:	f004 fc8d 	bl	8006550 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c36:	2301      	movs	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4811      	ldr	r0, [pc, #68]	; (8001c90 <MX_GPIO_Init+0xec>)
 8001c4c:	f004 fae4 	bl	8006218 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 8001c50:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4808      	ldr	r0, [pc, #32]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c6a:	f004 fad5 	bl	8006218 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2006      	movs	r0, #6
 8001c74:	f003 fe3f 	bl	80058f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c78:	2006      	movs	r0, #6
 8001c7a:	f003 fe58 	bl	800592e <HAL_NVIC_EnableIRQ>

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40020000 	.word	0x40020000

08001c94 <Preprocessing_Init>:

/* USER CODE BEGIN 4 */

void Preprocessing_Init(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	/* Init window function */
	if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0) {
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c9e:	4852      	ldr	r0, [pc, #328]	; (8001de8 <Preprocessing_Init+0x154>)
 8001ca0:	f007 fff6 	bl	8009c90 <Window_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <Preprocessing_Init+0x1e>
		debug("ERROR: window init failed\r\n");
 8001caa:	4850      	ldr	r0, [pc, #320]	; (8001dec <Preprocessing_Init+0x158>)
 8001cac:	f7ff fb1a 	bl	80012e4 <debug>
		while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <Preprocessing_Init+0x1c>
			;
	}

	/* Init RFFT */
	arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 8001cb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cb6:	484e      	ldr	r0, [pc, #312]	; (8001df0 <Preprocessing_Init+0x15c>)
 8001cb8:	f003 fc42 	bl	8005540 <arm_rfft_fast_init_f32>

	/* Init mel filterbank */
	S_MelFilter.pStartIndices = pMelFilterStartIndices;
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <Preprocessing_Init+0x160>)
 8001cbe:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <Preprocessing_Init+0x164>)
 8001cc0:	601a      	str	r2, [r3, #0]
	S_MelFilter.pStopIndices = pMelFilterStopIndices;
 8001cc2:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <Preprocessing_Init+0x160>)
 8001cc4:	4a4d      	ldr	r2, [pc, #308]	; (8001dfc <Preprocessing_Init+0x168>)
 8001cc6:	605a      	str	r2, [r3, #4]
	S_MelFilter.pCoefficients = pMelFilterCoefs;
 8001cc8:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <Preprocessing_Init+0x160>)
 8001cca:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <Preprocessing_Init+0x16c>)
 8001ccc:	609a      	str	r2, [r3, #8]
	S_MelFilter.NumMels = NUM_MELS;
 8001cce:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <Preprocessing_Init+0x160>)
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	611a      	str	r2, [r3, #16]
	S_MelFilter.FFTLen = FFT_LEN;
 8001cd4:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <Preprocessing_Init+0x160>)
 8001cd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cda:	615a      	str	r2, [r3, #20]
	S_MelFilter.SampRate = SAMPLE_RATE;
 8001cdc:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <Preprocessing_Init+0x160>)
 8001cde:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001ce2:	619a      	str	r2, [r3, #24]
	S_MelFilter.FMin = 0.0;
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <Preprocessing_Init+0x160>)
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
	S_MelFilter.FMax = S_MelFilter.SampRate / 2.0;
 8001cec:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <Preprocessing_Init+0x160>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc17 	bl	8000524 <__aeabi_ui2d>
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfe:	f7fe fdb5 	bl	800086c <__aeabi_ddiv>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff7d 	bl	8000c08 <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <Preprocessing_Init+0x160>)
 8001d12:	6213      	str	r3, [r2, #32]
	S_MelFilter.Formula = MEL_SLANEY;
 8001d14:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <Preprocessing_Init+0x160>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	S_MelFilter.Normalize = 1;
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <Preprocessing_Init+0x160>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28
	S_MelFilter.Mel2F = 1;
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <Preprocessing_Init+0x160>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
	MelFilterbank_Init(&S_MelFilter);
 8001d28:	4832      	ldr	r0, [pc, #200]	; (8001df4 <Preprocessing_Init+0x160>)
 8001d2a:	f007 fcd7 	bl	80096dc <MelFilterbank_Init>
	if (S_MelFilter.CoefficientsLength != NUM_MEL_COEFS) {
 8001d2e:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <Preprocessing_Init+0x160>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d003      	beq.n	8001d42 <Preprocessing_Init+0xae>
		debug("ERROR: MelFilterbank init failed\r\n");
 8001d3a:	4832      	ldr	r0, [pc, #200]	; (8001e04 <Preprocessing_Init+0x170>)
 8001d3c:	f7ff fad2 	bl	80012e4 <debug>
		while (1)
 8001d40:	e7fe      	b.n	8001d40 <Preprocessing_Init+0xac>
			; /* Adjust NUM_MEL_COEFS to match S_MelFilter.CoefficientsLength */
	}

	/* Init DCT operation */
	S_DCT.NumFilters = NUM_MFCC;
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <Preprocessing_Init+0x174>)
 8001d44:	2210      	movs	r2, #16
 8001d46:	601a      	str	r2, [r3, #0]
	S_DCT.NumInputs = NUM_MELS;
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <Preprocessing_Init+0x174>)
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	605a      	str	r2, [r3, #4]
	S_DCT.Type = DCT_TYPE_II_ORTHO;
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <Preprocessing_Init+0x174>)
 8001d50:	2202      	movs	r2, #2
 8001d52:	721a      	strb	r2, [r3, #8]
	S_DCT.RemoveDCTZero = 0;
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <Preprocessing_Init+0x174>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
	S_DCT.pDCTCoefs = pDCTCoefsBuffer;
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <Preprocessing_Init+0x174>)
 8001d5c:	4a2b      	ldr	r2, [pc, #172]	; (8001e0c <Preprocessing_Init+0x178>)
 8001d5e:	611a      	str	r2, [r3, #16]
	if (DCT_Init(&S_DCT) != 0) {
 8001d60:	4829      	ldr	r0, [pc, #164]	; (8001e08 <Preprocessing_Init+0x174>)
 8001d62:	f006 feb5 	bl	8008ad0 <DCT_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <Preprocessing_Init+0xe0>
		debug("ERROR: DCT init failed\r\n");
 8001d6c:	4828      	ldr	r0, [pc, #160]	; (8001e10 <Preprocessing_Init+0x17c>)
 8001d6e:	f7ff fab9 	bl	80012e4 <debug>
		while (1)
 8001d72:	e7fe      	b.n	8001d72 <Preprocessing_Init+0xde>
			;
	}

	/* Init Spectrogram */
	S_Spectr.pRfft = &S_Rfft;
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <Preprocessing_Init+0x180>)
 8001d76:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <Preprocessing_Init+0x15c>)
 8001d78:	601a      	str	r2, [r3, #0]
	S_Spectr.Type = SPECTRUM_TYPE_POWER;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <Preprocessing_Init+0x180>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	711a      	strb	r2, [r3, #4]
	S_Spectr.pWindow = pWindowFuncBuffer;
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <Preprocessing_Init+0x180>)
 8001d82:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <Preprocessing_Init+0x154>)
 8001d84:	609a      	str	r2, [r3, #8]
	S_Spectr.SampRate = SAMPLE_RATE;
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <Preprocessing_Init+0x180>)
 8001d88:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001d8c:	60da      	str	r2, [r3, #12]
	S_Spectr.FrameLen = FRAME_LEN;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <Preprocessing_Init+0x180>)
 8001d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d94:	611a      	str	r2, [r3, #16]
	S_Spectr.FFTLen = FFT_LEN;
 8001d96:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <Preprocessing_Init+0x180>)
 8001d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9c:	615a      	str	r2, [r3, #20]
	S_Spectr.pScratch = pSpectrScratchBuffer;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <Preprocessing_Init+0x180>)
 8001da0:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <Preprocessing_Init+0x184>)
 8001da2:	619a      	str	r2, [r3, #24]

	/* Init MelSpectrogram */
	S_MelSpectr.SpectrogramConf = &S_Spectr;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <Preprocessing_Init+0x188>)
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <Preprocessing_Init+0x180>)
 8001da8:	601a      	str	r2, [r3, #0]
	S_MelSpectr.MelFilter = &S_MelFilter;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <Preprocessing_Init+0x188>)
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <Preprocessing_Init+0x160>)
 8001dae:	605a      	str	r2, [r3, #4]

	/* Init LogMelSpectrogram */
	S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <Preprocessing_Init+0x18c>)
 8001db2:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <Preprocessing_Init+0x188>)
 8001db4:	601a      	str	r2, [r3, #0]
	S_LogMelSpectr.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <Preprocessing_Init+0x18c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	711a      	strb	r2, [r3, #4]
	S_LogMelSpectr.Ref = 1.0;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <Preprocessing_Init+0x18c>)
 8001dbe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dc2:	609a      	str	r2, [r3, #8]
	S_LogMelSpectr.TopdB = HUGE_VALF;
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <Preprocessing_Init+0x18c>)
 8001dc6:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8001dca:	60da      	str	r2, [r3, #12]

	/* Init MFCC */
	S_Mfcc.LogMelConf = &S_LogMelSpectr;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <Preprocessing_Init+0x190>)
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <Preprocessing_Init+0x18c>)
 8001dd0:	601a      	str	r2, [r3, #0]
	S_Mfcc.pDCT = &S_DCT;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <Preprocessing_Init+0x190>)
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <Preprocessing_Init+0x174>)
 8001dd6:	605a      	str	r2, [r3, #4]
	S_Mfcc.NumMfccCoefs = NUM_MFCC; //20
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <Preprocessing_Init+0x190>)
 8001dda:	2210      	movs	r2, #16
 8001ddc:	609a      	str	r2, [r3, #8]
	S_Mfcc.pScratch = pMfccScratchBuffer;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <Preprocessing_Init+0x190>)
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <Preprocessing_Init+0x194>)
 8001de2:	60da      	str	r2, [r3, #12]
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2000fa1c 	.word	0x2000fa1c
 8001dec:	0801699c 	.word	0x0801699c
 8001df0:	2000fa04 	.word	0x2000fa04
 8001df4:	2000d9b8 	.word	0x2000d9b8
 8001df8:	20009708 	.word	0x20009708
 8001dfc:	20009508 	.word	0x20009508
 8001e00:	2000ba28 	.word	0x2000ba28
 8001e04:	080169b8 	.word	0x080169b8
 8001e08:	2000b964 	.word	0x2000b964
 8001e0c:	2000d9e8 	.word	0x2000d9e8
 8001e10:	080169dc 	.word	0x080169dc
 8001e14:	2000f9e8 	.word	0x2000f9e8
 8001e18:	20011ad0 	.word	0x20011ad0
 8001e1c:	20011a74 	.word	0x20011a74
 8001e20:	2000b9d8 	.word	0x2000b9d8
 8001e24:	20011ac0 	.word	0x20011ac0
 8001e28:	20009308 	.word	0x20009308

08001e2c <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_GPIO_EXTI_Callback+0x16>
		button_pressed = 1;
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_GPIO_EXTI_Callback+0x24>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
	}
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200011f8 	.word	0x200011f8

08001e54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
}
 8001e5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e5c:	e7fe      	b.n	8001e5c <Error_Handler+0x8>
	...

08001e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_MspInit+0x4c>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_MspInit+0x4c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_MspInit+0x4c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_MspInit+0x4c>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_MspInit+0x4c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <HAL_CRC_MspInit+0x3c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10d      	bne.n	8001ede <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_CRC_MspInit+0x40>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_CRC_MspInit+0x40>)
 8001ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_CRC_MspInit+0x40>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023000 	.word	0x40023000
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_I2C_MspInit+0x84>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12b      	bne.n	8001f6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f36:	2312      	movs	r3, #18
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f42:	2304      	movs	r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <HAL_I2C_MspInit+0x8c>)
 8001f4e:	f004 f963 	bl	8006218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020400 	.word	0x40020400

08001f84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a4a      	ldr	r2, [pc, #296]	; (80020d8 <HAL_I2S_MspInit+0x154>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	f040 808c 	bne.w	80020ce <HAL_I2S_MspInit+0x14a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f006 f878 	bl	80080bc <HAL_RCCEx_PeriphCLKConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001fd2:	f7ff ff3f 	bl	8001e54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a3f      	ldr	r2, [pc, #252]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a38      	ldr	r2, [pc, #224]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b36      	ldr	r3, [pc, #216]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a31      	ldr	r2, [pc, #196]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_I2S_MspInit+0x158>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800202a:	2308      	movs	r3, #8
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800203a:	2305      	movs	r3, #5
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4826      	ldr	r0, [pc, #152]	; (80020e0 <HAL_I2S_MspInit+0x15c>)
 8002046:	f004 f8e7 	bl	8006218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800204a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800205c:	2305      	movs	r3, #5
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	481f      	ldr	r0, [pc, #124]	; (80020e4 <HAL_I2S_MspInit+0x160>)
 8002068:	f004 f8d6 	bl	8006218 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <HAL_I2S_MspInit+0x168>)
 8002070:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 8002086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 800208e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002092:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 8002096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800209a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 800209e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 80020a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020aa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 80020b4:	f003 fc72 	bl	800599c <HAL_DMA_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 80020be:	f7ff fec9 	bl	8001e54 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 80020c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_I2S_MspInit+0x164>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3738      	adds	r7, #56	; 0x38
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40003800 	.word	0x40003800
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020400 	.word	0x40020400
 80020e8:	2000b978 	.word	0x2000b978
 80020ec:	40026058 	.word	0x40026058

080020f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_SPI_MspInit+0x84>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12b      	bne.n	800216a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_SPI_MspInit+0x88>)
 800211c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800214a:	23e0      	movs	r3, #224	; 0xe0
 800214c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800215a:	2305      	movs	r3, #5
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_SPI_MspInit+0x8c>)
 8002166:	f004 f857 	bl	8006218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	; 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40013000 	.word	0x40013000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000

08002180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_UART_MspInit+0x84>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d12b      	bne.n	80021fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_UART_MspInit+0x88>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_UART_MspInit+0x88>)
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_UART_MspInit+0x88>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_UART_MspInit+0x88>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a10      	ldr	r2, [pc, #64]	; (8002208 <HAL_UART_MspInit+0x88>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_UART_MspInit+0x88>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021da:	230c      	movs	r3, #12
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ea:	2307      	movs	r3, #7
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <HAL_UART_MspInit+0x8c>)
 80021f6:	f004 f80f 	bl	8006218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	; 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40004400 	.word	0x40004400
 8002208:	40023800 	.word	0x40023800
 800220c:	40020000 	.word	0x40020000

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <NMI_Handler+0x4>

08002216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <MemManage_Handler+0x4>

08002222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <UsageFault_Handler+0x4>

0800222e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800225c:	f003 fa2c 	bl	80056b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002268:	2001      	movs	r0, #1
 800226a:	f004 f9a5 	bl	80065b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <DMA1_Stream3_IRQHandler+0x10>)
 800227a:	f003 fd63 	bl	8005d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000b978 	.word	0x2000b978

08002288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <_sbrk+0x5c>)
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <_sbrk+0x60>)
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <_sbrk+0x64>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <_sbrk+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d207      	bcs.n	80022c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b8:	f00d fdfa 	bl	800feb0 <__errno>
 80022bc:	4603      	mov	r3, r0
 80022be:	220c      	movs	r2, #12
 80022c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c6:	e009      	b.n	80022dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <_sbrk+0x64>)
 80022d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20020000 	.word	0x20020000
 80022e8:	00000800 	.word	0x00000800
 80022ec:	200011fc 	.word	0x200011fc
 80022f0:	20013cb8 	.word	0x20013cb8

080022f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <SystemInit+0x20>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <SystemInit+0x20>)
 8002300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002350 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800231e:	490e      	ldr	r1, [pc, #56]	; (8002358 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002334:	4c0b      	ldr	r4, [pc, #44]	; (8002364 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002342:	f7ff ffd7 	bl	80022f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002346:	f00d fdcb 	bl	800fee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234a:	f7ff f905 	bl	8001558 <main>
  bx  lr    
 800234e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	200010b0 	.word	0x200010b0
  ldr r2, =_sidata
 800235c:	0805fa18 	.word	0x0805fa18
  ldr r2, =_sbss
 8002360:	200010b0 	.word	0x200010b0
  ldr r4, =_ebss
 8002364:	20013cb4 	.word	0x20013cb4

08002368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC_IRQHandler>
	...

0800236c <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	; 0x30
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10e      	bne.n	800239a <BSP_LED_Init+0x2e>
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	4b33      	ldr	r3, [pc, #204]	; (8002450 <BSP_LED_Init+0xe4>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a32      	ldr	r2, [pc, #200]	; (8002450 <BSP_LED_Init+0xe4>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <BSP_LED_Init+0xe4>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	e034      	b.n	8002404 <BSP_LED_Init+0x98>
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10e      	bne.n	80023be <BSP_LED_Init+0x52>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <BSP_LED_Init+0xe4>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <BSP_LED_Init+0xe4>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6313      	str	r3, [r2, #48]	; 0x30
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <BSP_LED_Init+0xe4>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	e022      	b.n	8002404 <BSP_LED_Init+0x98>
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d10e      	bne.n	80023e2 <BSP_LED_Init+0x76>
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <BSP_LED_Init+0xe4>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <BSP_LED_Init+0xe4>)
 80023ce:	f043 0308 	orr.w	r3, r3, #8
 80023d2:	6313      	str	r3, [r2, #48]	; 0x30
 80023d4:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <BSP_LED_Init+0xe4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	e010      	b.n	8002404 <BSP_LED_Init+0x98>
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d10d      	bne.n	8002404 <BSP_LED_Init+0x98>
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <BSP_LED_Init+0xe4>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <BSP_LED_Init+0xe4>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	6313      	str	r3, [r2, #48]	; 0x30
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <BSP_LED_Init+0xe4>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <BSP_LED_Init+0xe8>)
 8002408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800240c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2301      	movs	r3, #1
 8002410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002412:	2301      	movs	r3, #1
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002416:	2302      	movs	r3, #2
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <BSP_LED_Init+0xec>)
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	f107 021c 	add.w	r2, r7, #28
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f003 fef5 	bl	8006218 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <BSP_LED_Init+0xec>)
 8002432:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <BSP_LED_Init+0xe8>)
 800243a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800243e:	2200      	movs	r2, #0
 8002440:	4619      	mov	r1, r3
 8002442:	f004 f885 	bl	8006550 <HAL_GPIO_WritePin>
}
 8002446:	bf00      	nop
 8002448:	3730      	adds	r7, #48	; 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	08016b74 	.word	0x08016b74
 8002458:	2000049c 	.word	0x2000049c

0800245c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Mode)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	460a      	mov	r2, r1
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	4613      	mov	r3, r2
 800246a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <BSP_PB_Init+0x32>
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <BSP_PB_Init+0xa8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <BSP_PB_Init+0xa8>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <BSP_PB_Init+0xa8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
  
  if (Mode == BUTTON_MODE_GPIO)
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002494:	2301      	movs	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61bb      	str	r3, [r7, #24]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <BSP_PB_Init+0xac>)
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	f107 020c 	add.w	r2, r7, #12
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 feb0 	bl	8006218 <HAL_GPIO_Init>
  }
  
  if (Mode == BUTTON_MODE_EXTI)
 80024b8:	79bb      	ldrb	r3, [r7, #6]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d11e      	bne.n	80024fc <BSP_PB_Init+0xa0>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80024be:	2301      	movs	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80024c6:	2302      	movs	r3, #2
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80024ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024ce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <BSP_PB_Init+0xac>)
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	f107 020c 	add.w	r2, r7, #12
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fe9a 	bl	8006218 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 80024e4:	2306      	movs	r3, #6
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	210f      	movs	r1, #15
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fa02 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80024f2:	2306      	movs	r3, #6
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fa19 	bl	800592e <HAL_NVIC_EnableIRQ>
  }
}
 80024fc:	bf00      	nop
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	200004ac 	.word	0x200004ac

0800250c <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_I2S_TxCpltCallback+0x20>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_I2S_TxCpltCallback+0x16>
		/* Call the user function which will manage directly transfer complete */
		BSP_AUDIO_OUT_TransferComplete_CallBack();
 800251e:	f000 f807 	bl	8002530 <BSP_AUDIO_OUT_TransferComplete_CallBack>
	}
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40003c00 	.word	0x40003c00

08002530 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <BSP_AUDIO_OUT_Error_CallBack>:
}

/**
 * @brief  Manages the DMA FIFO error event.
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <BSP_AUDIO_IN_Init>:
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 * @param  BitRes: Audio frequency to be configured for the I2S peripheral.
 * @param  ChnlNbr: Audio frequency to be configured for the I2S peripheral.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]

	/* Configure PLL clock */
	BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8002558:	2200      	movs	r2, #0
 800255a:	68f9      	ldr	r1, [r7, #12]
 800255c:	480e      	ldr	r0, [pc, #56]	; (8002598 <BSP_AUDIO_IN_Init+0x4c>)
 800255e:	f000 f8b7 	bl	80026d0 <BSP_AUDIO_IN_ClockConfig>

	/* Configure the PDM library */
	/* On STM32F4-Discovery a single microphone is mounted, samples are duplicated
	 to make stereo audio streams */
	PDMDecoder_Init(AudioFreq, ChnlNbr, 1);
 8002562:	2201      	movs	r2, #1
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f98c 	bl	8002884 <PDMDecoder_Init>

	/* Configure the I2S peripheral */
	hAudioInI2s.Instance = I2S2;
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <BSP_AUDIO_IN_Init+0x4c>)
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <BSP_AUDIO_IN_Init+0x50>)
 8002570:	601a      	str	r2, [r3, #0]
	if (HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET) {
 8002572:	4809      	ldr	r0, [pc, #36]	; (8002598 <BSP_AUDIO_IN_Init+0x4c>)
 8002574:	f004 fd52 	bl	800701c <HAL_I2S_GetState>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <BSP_AUDIO_IN_Init+0x3a>
		/* Initialize the I2S Msp: this __weak function can be rewritten by the application */
		BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 800257e:	2100      	movs	r1, #0
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <BSP_AUDIO_IN_Init+0x4c>)
 8002582:	f000 f8d1 	bl	8002728 <BSP_AUDIO_IN_MspInit>
	}

	/* Configure the I2S2 */
	I2S2_Init(AudioFreq);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fa18 	bl	80029bc <I2S2_Init>

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20013c04 	.word	0x20013c04
 800259c:	40003800 	.word	0x40003800

080025a0 <BSP_AUDIO_IN_Record>:
 * @brief  Starts audio recording.
 * @param  pbuf: Main buffer pointer for the recorded data storing
 * @param  size: Current size of the recorded buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Record(uint16_t *pbuf, uint32_t size) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
	uint32_t ret = AUDIO_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]

	/* Start the process receive DMA */
	HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <BSP_AUDIO_IN_Record+0x2c>)
 80025b8:	f004 fa9a 	bl	8006af0 <HAL_I2S_Receive_DMA>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

	return ret;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	b2db      	uxtb	r3, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20013c04 	.word	0x20013c04

080025d0 <BSP_AUDIO_IN_Stop>:

/**
 * @brief  Stops audio recording.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Stop(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
	uint32_t ret = AUDIO_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	607b      	str	r3, [r7, #4]

	/* Call the Media layer pause function */
	HAL_I2S_DMAStop(&hAudioInI2s);
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <BSP_AUDIO_IN_Stop+0x20>)
 80025dc:	f004 fb44 	bl	8006c68 <HAL_I2S_DMAStop>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	607b      	str	r3, [r7, #4]

	return ret;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	b2db      	uxtb	r3, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20013c04 	.word	0x20013c04

080025f4 <BSP_AUDIO_IN_PDMToPCM>:
 * @brief  Converts audio format from PDM to PCM.
 * @param  PDMBuf: Pointer to data PDM buffer
 * @param  PCMBuf: Pointer to data PCM buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b0a4      	sub	sp, #144	; 0x90
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
	// INTERNAL_BUFF_SIZE / 2 = 128 / 2 = 64
	uint16_t AppPDM[INTERNAL_BUFF_SIZE / 2];
	uint32_t index = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/* PDM Demux */
	for (index = 0; index < INTERNAL_BUFF_SIZE / 2; index++) {
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800260a:	e020      	b.n	800264e <BSP_AUDIO_IN_PDMToPCM+0x5a>
		AppPDM[index] = HTONS(PDMBuf[index]);
 800260c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	b29b      	uxth	r3, r3
 800261c:	b21a      	sxth	r2, r3
 800261e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	440b      	add	r3, r1
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	b21b      	sxth	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b21b      	sxth	r3, r3
 8002632:	b29a      	uxth	r2, r3
 8002634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800263e:	440b      	add	r3, r1
 8002640:	f823 2c84 	strh.w	r2, [r3, #-132]
	for (index = 0; index < INTERNAL_BUFF_SIZE / 2; index++) {
 8002644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002648:	3301      	adds	r3, #1
 800264a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800264e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002652:	2b3f      	cmp	r3, #63	; 0x3f
 8002654:	d9da      	bls.n	800260c <BSP_AUDIO_IN_PDMToPCM+0x18>
	}

	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800265c:	e019      	b.n	8002692 <BSP_AUDIO_IN_PDMToPCM+0x9e>
		/* PDM to PCM filter */
		PDM_Filter((uint8_t*) &AppPDM[index], (uint16_t*) &(PCMBuf[index]),
 800265e:	f107 020c 	add.w	r2, r7, #12
 8002662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	18d0      	adds	r0, r2, r3
 800266a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	18d1      	adds	r1, r2, r3
 8002674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002678:	224c      	movs	r2, #76	; 0x4c
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <BSP_AUDIO_IN_PDMToPCM+0xb0>)
 8002680:	4413      	add	r3, r2
 8002682:	461a      	mov	r2, r3
 8002684:	f009 fca4 	bl	800bfd0 <PDM_Filter>
	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
 8002688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268c:	3301      	adds	r3, #1
 800268e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0e1      	beq.n	800265e <BSP_AUDIO_IN_PDMToPCM+0x6a>
		//  index = 2 -> index << 1 = 4
		//  index = 3 -> index << 1 = 6
	}*/

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3790      	adds	r7, #144	; 0x90
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20013b24 	.word	0x20013b24

080026a8 <HAL_I2S_RxCpltCallback>:

/**
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s: I2S handle
 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	/* Call the record update function to get the next buffer to fill and its size (size is ignored) */
	BSP_AUDIO_IN_TransferComplete_CallBack();
 80026b0:	f7fe fd54 	bl	800115c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_I2S_RxHalfCpltCallback>:

/**
 * @brief  Rx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
	BSP_AUDIO_IN_HalfTransfer_CallBack();
 80026c4:	f7fe fd56 	bl	8001174 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <BSP_AUDIO_IN_ClockConfig>:
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 * @note   This API is called by BSP_AUDIO_IN_Init()
 *         Being __weak it can be overwritten by the application
 */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s,
		uint32_t AudioFreq, void *Params) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rccclkinit;

	/*Enable PLLI2S clock*/
	HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	4618      	mov	r0, r3
 80026e2:	f005 fdcd 	bl	8008280 <HAL_RCCEx_GetPeriphCLKConfig>
	/* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	if ((AudioFreq & 0x7) == 0) {
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <BSP_AUDIO_IN_ClockConfig+0x38>
		/* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
		/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
		/* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80026f0:	2301      	movs	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
		rccclkinit.PLLI2S.PLLI2SN = 192;
 80026f4:	23c0      	movs	r3, #192	; 0xc0
 80026f6:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SR = 6;
 80026f8:	2306      	movs	r3, #6
 80026fa:	61bb      	str	r3, [r7, #24]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4618      	mov	r0, r3
 8002702:	f005 fcdb 	bl	80080bc <HAL_RCCEx_PeriphCLKConfig>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
		rccclkinit.PLLI2S.PLLI2SN = 290;
		rccclkinit.PLLI2S.PLLI2SR = 2;
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
	}
}
 8002706:	e00b      	b.n	8002720 <BSP_AUDIO_IN_ClockConfig+0x50>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002708:	2301      	movs	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
		rccclkinit.PLLI2S.PLLI2SN = 290;
 800270c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8002710:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SR = 2;
 8002712:	2302      	movs	r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fcce 	bl	80080bc <HAL_RCCEx_PeriphCLKConfig>
}
 8002720:	bf00      	nop
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <BSP_AUDIO_IN_MspInit>:
/**
 * @brief  BSP AUDIO IN MSP Init.
 * @param  hi2s: I2S handle
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_i2sRx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the I2S2 peripheral clock */
	I2S2_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	4b4d      	ldr	r3, [pc, #308]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a4c      	ldr	r2, [pc, #304]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b4a      	ldr	r3, [pc, #296]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	69bb      	ldr	r3, [r7, #24]

	/* Enable I2S GPIO clocks */
	I2S2_SCK_GPIO_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	4b46      	ldr	r3, [pc, #280]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a45      	ldr	r2, [pc, #276]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b43      	ldr	r3, [pc, #268]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
	I2S2_MOSI_GPIO_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a3e      	ldr	r2, [pc, #248]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b3c      	ldr	r3, [pc, #240]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]

	/* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800278e:	2302      	movs	r3, #2
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28

	GPIO_InitStruct.Pin = I2S2_SCK_PIN;
 8002792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002796:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8002798:	2305      	movs	r3, #5
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	4619      	mov	r1, r3
 80027a2:	4833      	ldr	r0, [pc, #204]	; (8002870 <BSP_AUDIO_IN_MspInit+0x148>)
 80027a4:	f003 fd38 	bl	8006218 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S2_MOSI_PIN;
 80027a8:	2308      	movs	r3, #8
 80027aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 80027ac:	2305      	movs	r3, #5
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	482f      	ldr	r0, [pc, #188]	; (8002874 <BSP_AUDIO_IN_MspInit+0x14c>)
 80027b8:	f003 fd2e 	bl	8006218 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	I2S2_DMAx_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	4b2a      	ldr	r3, [pc, #168]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	4a29      	ldr	r2, [pc, #164]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 80027c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ca:	6313      	str	r3, [r2, #48]	; 0x30
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <BSP_AUDIO_IN_MspInit+0x144>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]

	if (hi2s->Instance == I2S2) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <BSP_AUDIO_IN_MspInit+0x150>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d137      	bne.n	8002852 <BSP_AUDIO_IN_MspInit+0x12a>
		/* Configure the hdma_i2sRx handle parameters */
		hdma_i2sRx.Init.Channel = I2S2_DMAx_CHANNEL;
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
		hdma_i2sRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e8:	4b24      	ldr	r3, [pc, #144]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
		hdma_i2sRx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ee:	4b23      	ldr	r3, [pc, #140]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
		hdma_i2sRx.Init.MemInc = DMA_MINC_ENABLE;
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 80027f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fa:	611a      	str	r2, [r3, #16]
		hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 80027fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002802:	615a      	str	r2, [r3, #20]
		hdma_i2sRx.Init.MemDataAlignment = I2S2_DMAx_MEM_DATA_SIZE;
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 8002806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800280a:	619a      	str	r2, [r3, #24]
		hdma_i2sRx.Init.Mode = DMA_CIRCULAR;
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 800280e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002812:	61da      	str	r2, [r3, #28]
		hdma_i2sRx.Init.Priority = DMA_PRIORITY_HIGH;
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 8002816:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800281a:	621a      	str	r2, [r3, #32]
		hdma_i2sRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_i2sRx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 8002824:	2203      	movs	r2, #3
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_i2sRx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 800282a:	2200      	movs	r2, #0
 800282c:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_i2sRx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <BSP_AUDIO_IN_MspInit+0x158>)
 8002838:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sRx);
 8002846:	480d      	ldr	r0, [pc, #52]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 8002848:	f003 f956 	bl	8005af8 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sRx);
 800284c:	480b      	ldr	r0, [pc, #44]	; (800287c <BSP_AUDIO_IN_MspInit+0x154>)
 800284e:	f003 f8a5 	bl	800599c <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	210f      	movs	r1, #15
 8002856:	200e      	movs	r0, #14
 8002858:	f003 f84d 	bl	80058f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ);
 800285c:	200e      	movs	r0, #14
 800285e:	f003 f866 	bl	800592e <HAL_NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3730      	adds	r7, #48	; 0x30
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40003800 	.word	0x40003800
 800287c:	20001200 	.word	0x20001200
 8002880:	40026058 	.word	0x40026058

08002884 <PDMDecoder_Init>:
 * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
 * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
 *         Number of audio channels (1: mono; 2: stereo)
 */
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn,
		uint32_t ChnlNbrOut) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

	/* Enable CRC peripheral to unlock the PDM library */
	__HAL_RCC_CRC_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <PDMDecoder_Init+0x124>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	4a42      	ldr	r2, [pc, #264]	; (80029a8 <PDMDecoder_Init+0x124>)
 800289e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a2:	6313      	str	r3, [r2, #48]	; 0x30
 80028a4:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <PDMDecoder_Init+0x124>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]

	for (index = 0; index < ChnlNbrIn; index++) {
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	e06e      	b.n	8002994 <PDMDecoder_Init+0x110>
		/* Init PDM filters */
		PDM_FilterHandler[index].bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80028b6:	4a3d      	ldr	r2, [pc, #244]	; (80029ac <PDMDecoder_Init+0x128>)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	214c      	movs	r1, #76	; 0x4c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	2200      	movs	r2, #0
 80028c4:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80028c6:	4a39      	ldr	r2, [pc, #228]	; (80029ac <PDMDecoder_Init+0x128>)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	214c      	movs	r1, #76	; 0x4c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3302      	adds	r3, #2
 80028d4:	2200      	movs	r2, #0
 80028d6:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80028d8:	4a34      	ldr	r2, [pc, #208]	; (80029ac <PDMDecoder_Init+0x128>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	214c      	movs	r1, #76	; 0x4c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <PDMDecoder_Init+0x12c>)
 80028e8:	601a      	str	r2, [r3, #0]
		PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	b298      	uxth	r0, r3
 80028ee:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <PDMDecoder_Init+0x128>)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	214c      	movs	r1, #76	; 0x4c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	330a      	adds	r3, #10
 80028fc:	4602      	mov	r2, r0
 80028fe:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].in_ptr_channels = ChnlNbrIn;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	b298      	uxth	r0, r3
 8002904:	4a29      	ldr	r2, [pc, #164]	; (80029ac <PDMDecoder_Init+0x128>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	214c      	movs	r1, #76	; 0x4c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3308      	adds	r3, #8
 8002912:	4602      	mov	r2, r0
 8002914:	801a      	strh	r2, [r3, #0]
		PDM_Filter_Init((PDM_Filter_Handler_t*) (&PDM_FilterHandler[index]));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	224c      	movs	r2, #76	; 0x4c
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <PDMDecoder_Init+0x128>)
 8002920:	4413      	add	r3, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f009 f9d8 	bl	800bcd8 <PDM_Filter_Init>

		/* PDM lib config phase */
		PDM_FilterConfig[index].output_samples_number = AudioFreq / 1000; //AudioFreq / 1000;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <PDMDecoder_Init+0x130>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	b298      	uxth	r0, r3
 8002934:	4920      	ldr	r1, [pc, #128]	; (80029b8 <PDMDecoder_Init+0x134>)
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	440b      	add	r3, r1
 8002942:	3302      	adds	r3, #2
 8002944:	4602      	mov	r2, r0
 8002946:	801a      	strh	r2, [r3, #0]
		PDM_FilterConfig[index].mic_gain = 24;
 8002948:	491b      	ldr	r1, [pc, #108]	; (80029b8 <PDMDecoder_Init+0x134>)
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	440b      	add	r3, r1
 8002956:	3304      	adds	r3, #4
 8002958:	2218      	movs	r2, #24
 800295a:	801a      	strh	r2, [r3, #0]
		PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800295c:	4916      	ldr	r1, [pc, #88]	; (80029b8 <PDMDecoder_Init+0x134>)
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	440b      	add	r3, r1
 800296a:	2202      	movs	r2, #2
 800296c:	801a      	strh	r2, [r3, #0]
		PDM_Filter_setConfig((PDM_Filter_Handler_t*) &PDM_FilterHandler[index],
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	224c      	movs	r2, #76	; 0x4c
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <PDMDecoder_Init+0x128>)
 8002978:	1898      	adds	r0, r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <PDMDecoder_Init+0x134>)
 8002986:	4413      	add	r3, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f009 fa2f 	bl	800bdec <PDM_Filter_setConfig>
	for (index = 0; index < ChnlNbrIn; index++) {
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	d38c      	bcc.n	80028b6 <PDMDecoder_Init+0x32>
				&PDM_FilterConfig[index]);
	}
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	20013b24 	.word	0x20013b24
 80029b0:	7e809d48 	.word	0x7e809d48
 80029b4:	10624dd3 	.word	0x10624dd3
 80029b8:	20013b18 	.word	0x20013b18

080029bc <I2S2_Init>:
 * @note   This function assumes that the I2S input clock (through PLL_R in
 *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
 *         is already configured and ready to be used.
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S2_Init(uint32_t AudioFreq) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	/* Initialize the hAudioInI2s Instance parameter */
	hAudioInI2s.Instance = I2S2;
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <I2S2_Init+0x68>)
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <I2S2_Init+0x6c>)
 80029c8:	601a      	str	r2, [r3, #0]

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hAudioInI2s);
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <I2S2_Init+0x68>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <I2S2_Init+0x68>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d8:	61da      	str	r2, [r3, #28]

	/* I2S2 peripheral configuration */
	hAudioInI2s.Init.AudioFreq = 2*AudioFreq;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <I2S2_Init+0x68>)
 80029e0:	6153      	str	r3, [r2, #20]
	hAudioInI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <I2S2_Init+0x68>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	61da      	str	r2, [r3, #28]
	hAudioInI2s.Init.CPOL = I2S_CPOL_HIGH;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <I2S2_Init+0x68>)
 80029ea:	2208      	movs	r2, #8
 80029ec:	619a      	str	r2, [r3, #24]
	hAudioInI2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <I2S2_Init+0x68>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
	hAudioInI2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <I2S2_Init+0x68>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
	hAudioInI2s.Init.Mode = I2S_MODE_MASTER_RX;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <I2S2_Init+0x68>)
 80029fc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a00:	605a      	str	r2, [r3, #4]
	hAudioInI2s.Init.Standard = I2S_STANDARD_LSB;
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <I2S2_Init+0x68>)
 8002a04:	2220      	movs	r2, #32
 8002a06:	609a      	str	r2, [r3, #8]

	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK) {
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <I2S2_Init+0x68>)
 8002a0a:	f003 ff31 	bl	8006870 <HAL_I2S_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2S2_Init+0x5c>
		return AUDIO_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <I2S2_Init+0x5e>
	} else {
		return AUDIO_OK;
 8002a18:	2300      	movs	r3, #0
	}
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20013c04 	.word	0x20013c04
 8002a28:	40003800 	.word	0x40003800

08002a2c <HAL_I2S_ErrorCallback>:

/**
 * @brief  I2S error callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	/* Manage the error generated on DMA FIFO: This function
	 should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
	if (hi2s->Instance == I2S3) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_I2S_ErrorCallback+0x2c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2S_ErrorCallback+0x16>
		BSP_AUDIO_OUT_Error_CallBack();
 8002a3e:	f7ff fd7e 	bl	800253e <BSP_AUDIO_OUT_Error_CallBack>
	}
	if (hi2s->Instance == I2S2) {
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <HAL_I2S_ErrorCallback+0x30>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_I2S_ErrorCallback+0x24>
		BSP_AUDIO_IN_Error_Callback();
 8002a4c:	f7fe fb9e 	bl	800118c <BSP_AUDIO_IN_Error_Callback>
	}
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40003c00 	.word	0x40003c00
 8002a5c:	40003800 	.word	0x40003800

08002a60 <arm_mult_f32>:
void arm_mult_f32(
  const float32_t * pSrcA,
  const float32_t * pSrcB,
        float32_t * pDst,
        uint32_t blockSize)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8002a72:	e013      	b.n	8002a9c <arm_mult_f32+0x3c>
  {
    /* C = A * B */

    /* Multiply input and store result in destination buffer. */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	60fa      	str	r2, [r7, #12]
 8002a7a:	ed93 7a00 	vldr	s14, [r3]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1d1a      	adds	r2, r3, #4
 8002a82:	60ba      	str	r2, [r7, #8]
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1d1a      	adds	r2, r3, #4
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e8      	bne.n	8002a74 <arm_mult_f32+0x14>
  }

}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <arm_cmplx_mag_squared_f32>:
#else
void arm_cmplx_mag_squared_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8002ac0:	e01b      	b.n	8002afa <arm_cmplx_mag_squared_f32+0x4a>
  {
    /* C[0] = (A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1d1a      	adds	r2, r3, #4
 8002ac6:	60fa      	str	r2, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	61bb      	str	r3, [r7, #24]
    imag = *pSrc++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1d1a      	adds	r2, r3, #4
 8002ad0:	60fa      	str	r2, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	617b      	str	r3, [r7, #20]

    /* store result in destination buffer. */
    *pDst++ = (real * real) + (imag * imag);
 8002ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ada:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ade:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ae2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1d1a      	adds	r2, r3, #4
 8002aea:	60ba      	str	r2, [r7, #8]
 8002aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af0:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e0      	bne.n	8002ac2 <arm_cmplx_mag_squared_f32+0x12>
  }

}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b089      	sub	sp, #36	; 0x24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	460b      	mov	r3, r1
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	e043      	b.n	8002baa <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	441a      	add	r2, r3
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	440b      	add	r3, r1
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	3301      	adds	r3, #1
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	441a      	add	r2, r3
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	440b      	add	r3, r1
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	601a      	str	r2, [r3, #0]

    i += 2;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d3b7      	bcc.n	8002b22 <arm_bitreversal_32+0x14>
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	3724      	adds	r7, #36	; 0x24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0a0      	sub	sp, #128	; 0x80
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8002bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8002be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8002be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8002bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8002bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002bfe:	4413      	add	r3, r2
 8002c00:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8002c02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c08:	e1b6      	b.n	8002f78 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8002c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8002c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8002c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8002c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8002c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8002c40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8002c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8002c4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8002c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8002c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8002c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8002c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8002c6a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	1d1a      	adds	r2, r3, #4
 8002c76:	603a      	str	r2, [r7, #0]
 8002c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8002c80:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	603a      	str	r2, [r7, #0]
 8002c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c92:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8002c96:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002c9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	603a      	str	r2, [r7, #0]
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8002cac:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002cb0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	1d1a      	adds	r2, r3, #4
 8002cb8:	603a      	str	r2, [r7, #0]
 8002cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbe:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8002cc2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002cc6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8002cd2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002cd6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cde:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8002ce2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002ce6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8002cf2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002cf6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8002d02:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d0c:	1d1a      	adds	r2, r3, #4
 8002d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d14:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8002d18:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d22:	1d1a      	adds	r2, r3, #4
 8002d24:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8002d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d32:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d38:	1d1a      	adds	r2, r3, #4
 8002d3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d40:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8002d44:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d48:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d4e:	1d1a      	adds	r2, r3, #4
 8002d50:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8002d5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d66:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8002d6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d76:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8002d7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d86:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8002d8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d96:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8002d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d9c:	1d1a      	adds	r2, r3, #4
 8002d9e:	673a      	str	r2, [r7, #112]	; 0x70
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8002da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da6:	1d1a      	adds	r2, r3, #4
 8002da8:	673a      	str	r2, [r7, #112]	; 0x70
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8002dae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002db2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dba:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8002dbe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002dc2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8002dce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002dd2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8002dde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002de2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8002dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df0:	1d1a      	adds	r2, r3, #4
 8002df2:	677a      	str	r2, [r7, #116]	; 0x74
 8002df4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002df8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e00:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8002e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e06:	1d1a      	adds	r2, r3, #4
 8002e08:	677a      	str	r2, [r7, #116]	; 0x74
 8002e0a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002e0e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e16:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8002e1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e1e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e26:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8002e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e2e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e36:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8002e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e3e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e46:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8002e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e4e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e56:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8002e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5c:	1d1a      	adds	r2, r3, #4
 8002e5e:	67ba      	str	r2, [r7, #120]	; 0x78
 8002e60:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002e64:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6c:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8002e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e72:	1d1a      	adds	r2, r3, #4
 8002e74:	67ba      	str	r2, [r7, #120]	; 0x78
 8002e76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002e7a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e82:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8002e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e88:	1d1a      	adds	r2, r3, #4
 8002e8a:	673a      	str	r2, [r7, #112]	; 0x70
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8002e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e92:	1d1a      	adds	r2, r3, #4
 8002e94:	673a      	str	r2, [r7, #112]	; 0x70
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8002e9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e9e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8002eaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002eae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8002eba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ebe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8002eca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ece:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8002eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002edc:	1d1a      	adds	r2, r3, #4
 8002ede:	677a      	str	r2, [r7, #116]	; 0x74
 8002ee0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ee4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef2:	1d1a      	adds	r2, r3, #4
 8002ef4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ef6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002efa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f02:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8002f06:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f0a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f12:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8002f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f1a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f22:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8002f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f2a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f32:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8002f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f3a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f42:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8002f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f48:	1d1a      	adds	r2, r3, #4
 8002f4a:	67ba      	str	r2, [r7, #120]	; 0x78
 8002f4c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002f50:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8002f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5e:	1d1a      	adds	r2, r3, #4
 8002f60:	67ba      	str	r2, [r7, #120]	; 0x78
 8002f62:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8002f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f74:	3b01      	subs	r3, #1
 8002f76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f47f ae45 	bne.w	8002c0a <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8002f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f82:	b299      	uxth	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002f8c:	f000 ffc4 	bl	8003f18 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8002f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f92:	b299      	uxth	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	2302      	movs	r3, #2
 8002f9a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002f9c:	f000 ffbc 	bl	8003f18 <arm_radix8_butterfly_f32>
}
 8002fa0:	bf00      	nop
 8002fa2:	3780      	adds	r7, #128	; 0x80
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b0ac      	sub	sp, #176	; 0xb0
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8002fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8002fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8002fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8002ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ff4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8002ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ffa:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8002ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003000:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8003002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003006:	3b04      	subs	r3, #4
 8003008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800300c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003010:	3b04      	subs	r3, #4
 8003012:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8003016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800301a:	3b04      	subs	r3, #4
 800301c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8003020:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800302a:	4413      	add	r3, r2
 800302c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003038:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800303c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8003048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8003052:	2302      	movs	r3, #2
 8003054:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8003056:	2304      	movs	r3, #4
 8003058:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800305a:	2306      	movs	r3, #6
 800305c:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	ed93 7a00 	vldr	s14, [r3]
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	ed93 7a00 	vldr	s14, [r3]
 800307a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	3304      	adds	r3, #4
 800308e:	ed93 7a00 	vldr	s14, [r3]
 8003092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003096:	3304      	adds	r3, #4
 8003098:	edd3 7a00 	vldr	s15, [r3]
 800309c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	3304      	adds	r3, #4
 80030a8:	ed93 7a00 	vldr	s14, [r3]
 80030ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030b0:	3304      	adds	r3, #4
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ba:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80030be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030c2:	3304      	adds	r3, #4
 80030c4:	ed93 7a00 	vldr	s14, [r3]
 80030c8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80030cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030d4:	3304      	adds	r3, #4
 80030d6:	edd3 7a00 	vldr	s15, [r3]
 80030da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80030e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80030ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003102:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003106:	edd3 7a00 	vldr	s15, [r3]
 800310a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800310e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003126:	3304      	adds	r3, #4
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003130:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003138:	3304      	adds	r3, #4
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003142:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003146:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800314a:	3304      	adds	r3, #4
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800315c:	3304      	adds	r3, #4
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003166:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800316a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800316e:	ed93 7a00 	vldr	s14, [r3]
 8003172:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003176:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003186:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800318a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	1d1a      	adds	r2, r3, #4
 80031a6:	603a      	str	r2, [r7, #0]
 80031a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ac:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80031b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031b4:	3304      	adds	r3, #4
 80031b6:	ed93 7a00 	vldr	s14, [r3]
 80031ba:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c6:	3304      	adds	r3, #4
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	603a      	str	r2, [r7, #0]
 80031d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d6:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80031da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031de:	1d1a      	adds	r2, r3, #4
 80031e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80031e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80031e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80031f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80031f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031fa:	1d1a      	adds	r2, r3, #4
 80031fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8003204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003208:	1d1a      	adds	r2, r3, #4
 800320a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8003212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003216:	1d1a      	adds	r2, r3, #4
 8003218:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8003220:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003224:	1d1a      	adds	r2, r3, #4
 8003226:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800322e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003236:	4413      	add	r3, r2
 8003238:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800323c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003244:	4413      	add	r3, r2
 8003246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800324a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003252:	4413      	add	r3, r2
 8003254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8003258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800325c:	3b02      	subs	r3, #2
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003264:	e31a      	b.n	800389c <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	ed93 7a00 	vldr	s14, [r3]
 800326c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003278:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	ed93 7a00 	vldr	s14, [r3]
 8003282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003286:	edd3 7a00 	vldr	s15, [r3]
 800328a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800328e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	3304      	adds	r3, #4
 8003296:	ed93 7a00 	vldr	s14, [r3]
 800329a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329e:	3304      	adds	r3, #4
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	3304      	adds	r3, #4
 80032b0:	ed93 7a00 	vldr	s14, [r3]
 80032b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032b8:	3304      	adds	r3, #4
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 80032c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ca:	3304      	adds	r3, #4
 80032cc:	ed93 7a00 	vldr	s14, [r3]
 80032d0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80032d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032dc:	3304      	adds	r3, #4
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80032ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80032f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003306:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800330a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800330e:	edd3 7a00 	vldr	s15, [r3]
 8003312:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800331a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003326:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800332a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800332e:	3304      	adds	r3, #4
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003338:	ee37 7a67 	vsub.f32	s14, s14, s15
 800333c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003340:	3304      	adds	r3, #4
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334a:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800334e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003352:	3304      	adds	r3, #4
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800335c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003364:	3304      	adds	r3, #4
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336e:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003376:	ed93 7a00 	vldr	s14, [r3]
 800337a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800337e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003386:	edd3 7a00 	vldr	s15, [r3]
 800338a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800338e:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003396:	ed93 7a00 	vldr	s14, [r3]
 800339a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800339e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	603a      	str	r2, [r7, #0]
 80033b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b4:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80033b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033bc:	3304      	adds	r3, #4
 80033be:	ed93 7a00 	vldr	s14, [r3]
 80033c2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033ce:	3304      	adds	r3, #4
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	1d1a      	adds	r2, r3, #4
 80033d8:	603a      	str	r2, [r7, #0]
 80033da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033de:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80033e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033e6:	3b04      	subs	r3, #4
 80033e8:	ed93 7a00 	vldr	s14, [r3]
 80033ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033f0:	3b04      	subs	r3, #4
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80033fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003402:	3b04      	subs	r3, #4
 8003404:	ed93 7a00 	vldr	s14, [r3]
 8003408:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800340c:	3b04      	subs	r3, #4
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003416:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800341a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800341e:	ed93 7a00 	vldr	s14, [r3]
 8003422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8003432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003436:	ed93 7a00 	vldr	s14, [r3]
 800343a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003446:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800344a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800344e:	ed93 7a00 	vldr	s14, [r3]
 8003452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800345e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003466:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800346a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800346e:	ed93 7a00 	vldr	s14, [r3]
 8003472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800347e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003482:	3b04      	subs	r3, #4
 8003484:	edd3 7a00 	vldr	s15, [r3]
 8003488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800348c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003490:	3b04      	subs	r3, #4
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800349e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034a2:	3b04      	subs	r3, #4
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80034ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034b4:	3b04      	subs	r3, #4
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 80034c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80034ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034d6:	edd3 7a00 	vldr	s15, [r3]
 80034da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80034e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034e6:	ed93 7a00 	vldr	s14, [r3]
 80034ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80034fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fe:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8003502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003506:	3b04      	subs	r3, #4
 8003508:	ed93 7a00 	vldr	s14, [r3]
 800350c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003510:	3b04      	subs	r3, #4
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	ee37 7a67 	vsub.f32	s14, s14, s15
 800351a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800351e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003522:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8003526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800352a:	ed93 7a00 	vldr	s14, [r3]
 800352e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003542:	1f1a      	subs	r2, r3, #4
 8003544:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8003550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003554:	3b04      	subs	r3, #4
 8003556:	ed93 7a00 	vldr	s14, [r3]
 800355a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800355e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003566:	3b04      	subs	r3, #4
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003570:	1f1a      	subs	r2, r3, #4
 8003572:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800357e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003582:	1d1a      	adds	r2, r3, #4
 8003584:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800358c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003590:	1d1a      	adds	r2, r3, #4
 8003592:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800359a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800359e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 80035aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 80035ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035be:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80035c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 80035ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80035ce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80035d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 80035da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80035e4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80035e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80035ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f0:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80035f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035f8:	1d1a      	adds	r2, r3, #4
 80035fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80035fe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003602:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800360a:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800360e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003612:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800361e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003622:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800362e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003632:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800363e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003642:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800364e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003652:	1f1a      	subs	r2, r3, #4
 8003654:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003658:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800365c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003664:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8003668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800366c:	1f1a      	subs	r2, r3, #4
 800366e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003672:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003676:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800367a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8003682:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800368a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8003692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800369a:	4413      	add	r3, r2
 800369c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 80036a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80036a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80036a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 80036b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80036b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 80036c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80036c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80036c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 80036d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80036d4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80036d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036dc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 80036e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036e4:	1d1a      	adds	r2, r3, #4
 80036e6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80036ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f6:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80036fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036fe:	1d1a      	adds	r2, r3, #4
 8003700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003704:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003708:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800370c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003710:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8003714:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003718:	eef1 7a67 	vneg.f32	s15, s15
 800371c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003724:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8003728:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800372c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003734:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8003738:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800373c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003744:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8003748:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800374c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003754:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8003758:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800375c:	1f1a      	subs	r2, r3, #4
 800375e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003762:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003766:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800376a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800376e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8003772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003776:	1f1a      	subs	r2, r3, #4
 8003778:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800377c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003780:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003788:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800378c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8003794:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800379c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037a4:	4413      	add	r3, r2
 80037a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 80037aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80037b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 80037ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80037be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 80037ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80037ce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 80037da:	edd7 7a03 	vldr	s15, [r7, #12]
 80037de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 80037ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80037f4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80037f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80037fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003800:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8003804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003808:	1d1a      	adds	r2, r3, #4
 800380a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800380e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003812:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381a:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800381e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003822:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800382e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003832:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800383e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003842:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800384e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003852:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800385e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003862:	1f1a      	subs	r2, r3, #4
 8003864:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8003868:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800386c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003874:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8003878:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800387c:	1f1a      	subs	r2, r3, #4
 800387e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8003882:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003886:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800388a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8003892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003896:	3b01      	subs	r3, #1
 8003898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800389c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f47f ace0 	bne.w	8003266 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	ed93 7a00 	vldr	s14, [r3]
 80038ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	ed93 7a00 	vldr	s14, [r3]
 80038c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ce:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	3304      	adds	r3, #4
 80038d6:	ed93 7a00 	vldr	s14, [r3]
 80038da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038de:	3304      	adds	r3, #4
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	3304      	adds	r3, #4
 80038f0:	ed93 7a00 	vldr	s14, [r3]
 80038f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038f8:	3304      	adds	r3, #4
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003902:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800390a:	3304      	adds	r3, #4
 800390c:	ed93 7a00 	vldr	s14, [r3]
 8003910:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800391c:	3304      	adds	r3, #4
 800391e:	edd3 7a00 	vldr	s15, [r3]
 8003922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003926:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800392a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800393a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800393e:	edd3 7a00 	vldr	s15, [r3]
 8003942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003946:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800394a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800394e:	edd3 7a00 	vldr	s15, [r3]
 8003952:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003956:	ee37 7a67 	vsub.f32	s14, s14, s15
 800395a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800395e:	edd3 7a00 	vldr	s15, [r3]
 8003962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003966:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800396a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800396e:	3304      	adds	r3, #4
 8003970:	edd3 7a00 	vldr	s15, [r3]
 8003974:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003978:	ee37 7a67 	vsub.f32	s14, s14, s15
 800397c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003980:	3304      	adds	r3, #4
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398a:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800398e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003992:	3304      	adds	r3, #4
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800399c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039a4:	3304      	adds	r3, #4
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ae:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80039b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039b6:	ed93 7a00 	vldr	s14, [r3]
 80039ba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80039be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039c6:	edd3 7a00 	vldr	s15, [r3]
 80039ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ce:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80039d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039d6:	ed93 7a00 	vldr	s14, [r3]
 80039da:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80039de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e6:	edd3 7a00 	vldr	s15, [r3]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	1d1a      	adds	r2, r3, #4
 80039ee:	603a      	str	r2, [r7, #0]
 80039f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80039f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039fc:	3304      	adds	r3, #4
 80039fe:	ed93 7a00 	vldr	s14, [r3]
 8003a02:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a0e:	3304      	adds	r3, #4
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	1d1a      	adds	r2, r3, #4
 8003a18:	603a      	str	r2, [r7, #0]
 8003a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1e:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8003a22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8003a2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8003a32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a36:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8003a42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003a46:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8003a52:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003a56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8003a62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8003a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a76:	1d1a      	adds	r2, r3, #4
 8003a78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003a7c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003a80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a88:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8003a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a90:	1d1a      	adds	r2, r3, #4
 8003a92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003a96:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003a9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa2:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8003aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8003aae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8003ab6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003aba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8003ac6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003aca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8003ad6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ada:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8003ae6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003aea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8003af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003afa:	1d1a      	adds	r2, r3, #4
 8003afc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b00:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003b04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8003b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b14:	1d1a      	adds	r2, r3, #4
 8003b16:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b26:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8003b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8003b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8003b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b3e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b46:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8003b4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b56:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8003b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b5e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8003b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8003b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b7e:	1d1a      	adds	r2, r3, #4
 8003b80:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b84:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003b88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b90:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8003b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b98:	1d1a      	adds	r2, r3, #4
 8003b9a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003ba2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003baa:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8003bae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bb2:	b299      	uxth	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	2304      	movs	r3, #4
 8003bba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003bbc:	f000 f9ac 	bl	8003f18 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8003bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bc4:	b299      	uxth	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	2304      	movs	r3, #4
 8003bcc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003bce:	f000 f9a3 	bl	8003f18 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8003bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bd6:	b299      	uxth	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	2304      	movs	r3, #4
 8003bde:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003be0:	f000 f99a 	bl	8003f18 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8003be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003be8:	b299      	uxth	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	2304      	movs	r3, #4
 8003bf0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003bf2:	f000 f991 	bl	8003f18 <arm_radix8_butterfly_f32>
}
 8003bf6:	bf00      	nop
 8003bf8:	37b0      	adds	r7, #176	; 0xb0
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b088      	sub	sp, #32
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	71fb      	strb	r3, [r7, #7]
 8003c10:	4613      	mov	r3, r2
 8003c12:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d117      	bne.n	8003c50 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3304      	adds	r3, #4
 8003c24:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e00d      	b.n	8003c48 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	eef1 7a67 	vneg.f32	s15, s15
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3ed      	bcc.n	8003c2c <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	d040      	beq.n	8003cda <arm_cfft_f32+0xdc>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d845      	bhi.n	8003cec <arm_cfft_f32+0xee>
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c66:	d033      	beq.n	8003cd0 <arm_cfft_f32+0xd2>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6e:	d83d      	bhi.n	8003cec <arm_cfft_f32+0xee>
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	d026      	beq.n	8003cc6 <arm_cfft_f32+0xc8>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7e:	d835      	bhi.n	8003cec <arm_cfft_f32+0xee>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c86:	d028      	beq.n	8003cda <arm_cfft_f32+0xdc>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8e:	d82d      	bhi.n	8003cec <arm_cfft_f32+0xee>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c96:	d01b      	beq.n	8003cd0 <arm_cfft_f32+0xd2>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9e:	d825      	bhi.n	8003cec <arm_cfft_f32+0xee>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b80      	cmp	r3, #128	; 0x80
 8003ca4:	d00f      	beq.n	8003cc6 <arm_cfft_f32+0xc8>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b80      	cmp	r3, #128	; 0x80
 8003caa:	d81f      	bhi.n	8003cec <arm_cfft_f32+0xee>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d013      	beq.n	8003cda <arm_cfft_f32+0xdc>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d819      	bhi.n	8003cec <arm_cfft_f32+0xee>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d003      	beq.n	8003cc6 <arm_cfft_f32+0xc8>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d005      	beq.n	8003cd0 <arm_cfft_f32+0xd2>
 8003cc4:	e012      	b.n	8003cec <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7fe ff79 	bl	8002bc0 <arm_cfft_radix8by2_f32>
    break;
 8003cce:	e00d      	b.n	8003cec <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f7ff f968 	bl	8002fa8 <arm_cfft_radix8by4_f32>
    break;
 8003cd8:	e008      	b.n	8003cec <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	b299      	uxth	r1, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	68b8      	ldr	r0, [r7, #8]
 8003ce6:	f000 f917 	bl	8003f18 <arm_radix8_butterfly_f32>
    break;
 8003cea:	bf00      	nop
  }

  if ( bitReverseFlag )
 8003cec:	79bb      	ldrb	r3, [r7, #6]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8999      	ldrh	r1, [r3, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68b8      	ldr	r0, [r7, #8]
 8003cfe:	f7fe ff06 	bl	8002b0e <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d130      	bne.n	8003d6a <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d1a:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e01c      	b.n	8003d62 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1d1a      	adds	r2, r3, #4
 8003d2c:	61ba      	str	r2, [r7, #24]
 8003d2e:	ed93 7a00 	vldr	s14, [r3]
 8003d32:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	edd3 7a00 	vldr	s15, [r3]
 8003d44:	eeb1 7a67 	vneg.f32	s14, s15
 8003d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3de      	bcc.n	8003d28 <arm_cfft_f32+0x12a>
    }
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	887a      	ldrh	r2, [r7, #2]
 8003d88:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d98:	d02c      	beq.n	8003df4 <arm_cfft_init_f32+0x80>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	f300 809e 	bgt.w	8003ede <arm_cfft_init_f32+0x16a>
 8003da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da6:	d032      	beq.n	8003e0e <arm_cfft_init_f32+0x9a>
 8003da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dac:	f300 8097 	bgt.w	8003ede <arm_cfft_init_f32+0x16a>
 8003db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db4:	d038      	beq.n	8003e28 <arm_cfft_init_f32+0xb4>
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	f300 8090 	bgt.w	8003ede <arm_cfft_init_f32+0x16a>
 8003dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc2:	d03e      	beq.n	8003e42 <arm_cfft_init_f32+0xce>
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	f300 8089 	bgt.w	8003ede <arm_cfft_init_f32+0x16a>
 8003dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd0:	d044      	beq.n	8003e5c <arm_cfft_init_f32+0xe8>
 8003dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd6:	f300 8082 	bgt.w	8003ede <arm_cfft_init_f32+0x16a>
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d04b      	beq.n	8003e76 <arm_cfft_init_f32+0x102>
 8003dde:	2b80      	cmp	r3, #128	; 0x80
 8003de0:	dc7d      	bgt.n	8003ede <arm_cfft_init_f32+0x16a>
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d054      	beq.n	8003e90 <arm_cfft_init_f32+0x11c>
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	dc79      	bgt.n	8003ede <arm_cfft_init_f32+0x16a>
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d06a      	beq.n	8003ec4 <arm_cfft_init_f32+0x150>
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d05b      	beq.n	8003eaa <arm_cfft_init_f32+0x136>
 8003df2:	e074      	b.n	8003ede <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 8003df4:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <arm_cfft_init_f32+0x180>)
 8003df6:	899a      	ldrh	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	819a      	strh	r2, [r3, #12]
 8003dfc:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <arm_cfft_init_f32+0x180>)
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <arm_cfft_init_f32+0x180>)
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	605a      	str	r2, [r3, #4]
            break;
 8003e0c:	e06a      	b.n	8003ee4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 8003e0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <arm_cfft_init_f32+0x184>)
 8003e10:	899a      	ldrh	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	819a      	strh	r2, [r3, #12]
 8003e16:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <arm_cfft_init_f32+0x184>)
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <arm_cfft_init_f32+0x184>)
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	605a      	str	r2, [r3, #4]

            break;
 8003e26:	e05d      	b.n	8003ee4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8003e28:	4b34      	ldr	r3, [pc, #208]	; (8003efc <arm_cfft_init_f32+0x188>)
 8003e2a:	899a      	ldrh	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	819a      	strh	r2, [r3, #12]
 8003e30:	4b32      	ldr	r3, [pc, #200]	; (8003efc <arm_cfft_init_f32+0x188>)
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	4b30      	ldr	r3, [pc, #192]	; (8003efc <arm_cfft_init_f32+0x188>)
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	605a      	str	r2, [r3, #4]

            break;
 8003e40:	e050      	b.n	8003ee4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <arm_cfft_init_f32+0x18c>)
 8003e44:	899a      	ldrh	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	819a      	strh	r2, [r3, #12]
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <arm_cfft_init_f32+0x18c>)
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <arm_cfft_init_f32+0x18c>)
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	605a      	str	r2, [r3, #4]
            break;
 8003e5a:	e043      	b.n	8003ee4 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <arm_cfft_init_f32+0x190>)
 8003e5e:	899a      	ldrh	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	819a      	strh	r2, [r3, #12]
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <arm_cfft_init_f32+0x190>)
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <arm_cfft_init_f32+0x190>)
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	605a      	str	r2, [r3, #4]
            break;
 8003e74:	e036      	b.n	8003ee4 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <arm_cfft_init_f32+0x194>)
 8003e78:	899a      	ldrh	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	819a      	strh	r2, [r3, #12]
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <arm_cfft_init_f32+0x194>)
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <arm_cfft_init_f32+0x194>)
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	605a      	str	r2, [r3, #4]
            break;
 8003e8e:	e029      	b.n	8003ee4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8003e90:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <arm_cfft_init_f32+0x198>)
 8003e92:	899a      	ldrh	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	819a      	strh	r2, [r3, #12]
 8003e98:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <arm_cfft_init_f32+0x198>)
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <arm_cfft_init_f32+0x198>)
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	605a      	str	r2, [r3, #4]
            break;
 8003ea8:	e01c      	b.n	8003ee4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 8003eaa:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <arm_cfft_init_f32+0x19c>)
 8003eac:	899a      	ldrh	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	819a      	strh	r2, [r3, #12]
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <arm_cfft_init_f32+0x19c>)
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <arm_cfft_init_f32+0x19c>)
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	605a      	str	r2, [r3, #4]
            break;
 8003ec2:	e00f      	b.n	8003ee4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <arm_cfft_init_f32+0x1a0>)
 8003ec6:	899a      	ldrh	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	819a      	strh	r2, [r3, #12]
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <arm_cfft_init_f32+0x1a0>)
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <arm_cfft_init_f32+0x1a0>)
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	605a      	str	r2, [r3, #4]
            break;
 8003edc:	e002      	b.n	8003ee4 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 8003ede:	23ff      	movs	r3, #255	; 0xff
 8003ee0:	73fb      	strb	r3, [r7, #15]
            break;
 8003ee2:	bf00      	nop
        }


        return (status);
 8003ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	08033fd4 	.word	0x08033fd4
 8003ef8:	08033fc4 	.word	0x08033fc4
 8003efc:	08033fb4 	.word	0x08033fb4
 8003f00:	08033fa4 	.word	0x08033fa4
 8003f04:	08033f94 	.word	0x08033f94
 8003f08:	08033f84 	.word	0x08033f84
 8003f0c:	08033f74 	.word	0x08033f74
 8003f10:	08033f64 	.word	0x08033f64
 8003f14:	08033f54 	.word	0x08033f54

08003f18 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b0bd      	sub	sp, #244	; 0xf4
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	461a      	mov	r2, r3
 8003f24:	460b      	mov	r3, r1
 8003f26:	817b      	strh	r3, [r7, #10]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <arm_radix8_butterfly_f32+0x3c>)
 8003f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f50:	e002      	b.n	8003f58 <arm_radix8_butterfly_f32+0x40>
 8003f52:	bf00      	nop
 8003f54:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8003f58:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f60:	4413      	add	r3, r2
 8003f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8003f66:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	4413      	add	r3, r2
 8003f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8003f74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8003f82:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8003f90:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f98:	4413      	add	r3, r2
 8003f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8003f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8003fac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003fba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	ed93 7a00 	vldr	s14, [r3]
 8003fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	edd3 7a00 	vldr	s15, [r3]
 8003fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fda:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	ed93 7a00 	vldr	s14, [r3]
 8003fec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	edd3 7a00 	vldr	s15, [r3]
 8003ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffe:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8004002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	ed93 7a00 	vldr	s14, [r3]
 8004010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004022:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	ed93 7a00 	vldr	s14, [r3]
 8004034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	edd3 7a00 	vldr	s15, [r3]
 8004042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004046:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800404a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	ed93 7a00 	vldr	s14, [r3]
 8004058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	edd3 7a00 	vldr	s15, [r3]
 8004066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800406a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800406e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	ed93 7a00 	vldr	s14, [r3]
 800407c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	edd3 7a00 	vldr	s15, [r3]
 800408a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800408e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004092:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	ed93 7a00 	vldr	s14, [r3]
 80040a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	edd3 7a00 	vldr	s15, [r3]
 80040ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80040b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	ed93 7a00 	vldr	s14, [r3]
 80040c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	edd3 7a00 	vldr	s15, [r3]
 80040d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80040da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80040de:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80040e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80040ea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80040ee:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80040f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80040fa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80040fe:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004106:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800410a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800410e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004116:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800411a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004128:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800412c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004130:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8004134:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004142:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800414a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800414e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	3304      	adds	r3, #4
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	ed93 7a00 	vldr	s14, [r3]
 800415e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	3304      	adds	r3, #4
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	edd3 7a00 	vldr	s15, [r3]
 800416e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004172:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004176:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	3304      	adds	r3, #4
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	ed93 7a00 	vldr	s14, [r3]
 8004186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	3304      	adds	r3, #4
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800419e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	3304      	adds	r3, #4
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	ed93 7a00 	vldr	s14, [r3]
 80041ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	3304      	adds	r3, #4
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80041c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	3304      	adds	r3, #4
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	ed93 7a00 	vldr	s14, [r3]
 80041d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	3304      	adds	r3, #4
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ea:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80041ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	3304      	adds	r3, #4
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	ed93 7a00 	vldr	s14, [r3]
 80041fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	3304      	adds	r3, #4
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	edd3 7a00 	vldr	s15, [r3]
 800420e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004212:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004216:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	3304      	adds	r3, #4
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	ed93 7a00 	vldr	s14, [r3]
 8004226:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	3304      	adds	r3, #4
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4413      	add	r3, r2
 8004232:	edd3 7a00 	vldr	s15, [r3]
 8004236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800423a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800423e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3304      	adds	r3, #4
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	ed93 7a00 	vldr	s14, [r3]
 800424e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	3304      	adds	r3, #4
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	edd3 7a00 	vldr	s15, [r3]
 800425e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004262:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	3304      	adds	r3, #4
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4413      	add	r3, r2
 8004272:	ed93 7a00 	vldr	s14, [r3]
 8004276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	3304      	adds	r3, #4
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800428a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800428e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004292:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800429e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80042a2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80042a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042aa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80042ae:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80042b2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80042b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80042be:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80042c2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80042c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ca:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80042ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	3304      	adds	r3, #4
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80042de:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80042e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042e6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80042ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	3304      	adds	r3, #4
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4413      	add	r3, r2
 80042f6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80042fa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80042fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004302:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8004306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004314:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8004320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800432e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004336:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800433a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3304      	adds	r3, #4
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800434a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800434e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004352:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8004356:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	3304      	adds	r3, #4
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004366:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800436a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8004372:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004376:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800437a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800437e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800438a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800438e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004396:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80043a2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80043a6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80043aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ae:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80043ba:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80043be:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80043c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043c6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80043d2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80043d6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80043da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043de:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80043e2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80043e6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80043ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ee:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80043f2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80043f6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80043fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043fe:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8004402:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004406:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800440a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800440e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8004412:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004416:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800441a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800441e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8004422:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004426:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800442a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800442e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8004432:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004436:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800443a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800443e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8004442:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004446:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800444a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8004452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004460:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004468:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800446c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800447a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800447e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004482:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8004486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004494:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800449c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80044a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80044ae:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80044b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80044ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	3304      	adds	r3, #4
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80044ca:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80044ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044d2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80044d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	3304      	adds	r3, #4
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80044e6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80044ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80044f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	3304      	adds	r3, #4
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004502:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800450e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	3304      	adds	r3, #4
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800451e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004526:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800452a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800452e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004532:	4413      	add	r3, r2
 8004534:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8004538:	897b      	ldrh	r3, [r7, #10]
 800453a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800453e:	429a      	cmp	r2, r3
 8004540:	f4ff ad0a 	bcc.w	8003f58 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8004544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004548:	2b07      	cmp	r3, #7
 800454a:	f240 84e3 	bls.w	8004f14 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8004554:	2301      	movs	r3, #1
 8004556:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800455a:	893b      	ldrh	r3, [r7, #8]
 800455c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004560:	4413      	add	r3, r2
 8004562:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8004564:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004566:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800456a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800456e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004570:	4413      	add	r3, r2
 8004572:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8004574:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004578:	4413      	add	r3, r2
 800457a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800457c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800457e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004580:	4413      	add	r3, r2
 8004582:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8004584:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004586:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004588:	4413      	add	r3, r2
 800458a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800458c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800458e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004590:	4413      	add	r3, r2
 8004592:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8004594:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004598:	4413      	add	r3, r2
 800459a:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800459c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80045aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80045b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80045c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80045ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80045da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80045e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80045f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	3304      	adds	r3, #4
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8004602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	3304      	adds	r3, #4
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8004610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	3304      	adds	r3, #4
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800461e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	3304      	adds	r3, #4
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800462c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	3304      	adds	r3, #4
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800463a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	3304      	adds	r3, #4
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8004648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	3304      	adds	r3, #4
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8004656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800465e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	4413      	add	r3, r2
 8004668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800466c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004674:	4413      	add	r3, r2
 8004676:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800467a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004682:	4413      	add	r3, r2
 8004684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8004688:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	4413      	add	r3, r2
 8004692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8004696:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	4413      	add	r3, r2
 80046a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80046a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ac:	4413      	add	r3, r2
 80046ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80046b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	4413      	add	r3, r2
 80046bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80046c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	ed93 7a00 	vldr	s14, [r3]
 80046ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	edd3 7a00 	vldr	s15, [r3]
 80046dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80046e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	ed93 7a00 	vldr	s14, [r3]
 80046f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	edd3 7a00 	vldr	s15, [r3]
 8004700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004704:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8004708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	ed93 7a00 	vldr	s14, [r3]
 8004716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	edd3 7a00 	vldr	s15, [r3]
 8004724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004728:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800472c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	ed93 7a00 	vldr	s14, [r3]
 800473a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	edd3 7a00 	vldr	s15, [r3]
 8004748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800474c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8004750:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	ed93 7a00 	vldr	s14, [r3]
 800475e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	edd3 7a00 	vldr	s15, [r3]
 800476c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004770:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8004774:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	ed93 7a00 	vldr	s14, [r3]
 8004782:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	edd3 7a00 	vldr	s15, [r3]
 8004790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004794:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	ed93 7a00 	vldr	s14, [r3]
 80047a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	edd3 7a00 	vldr	s15, [r3]
 80047b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047b8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80047bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	ed93 7a00 	vldr	s14, [r3]
 80047ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	edd3 7a00 	vldr	s15, [r3]
 80047d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047dc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80047e0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80047e4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80047e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ec:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80047f0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80047f4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80047f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047fc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8004800:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004804:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800480c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8004810:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004814:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800481c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8004820:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800482e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004836:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800483a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800483e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004846:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800484a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	3304      	adds	r3, #4
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	ed93 7a00 	vldr	s14, [r3]
 800485a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	3304      	adds	r3, #4
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800486e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004872:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	3304      	adds	r3, #4
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	ed93 7a00 	vldr	s14, [r3]
 8004882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	3304      	adds	r3, #4
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	edd3 7a00 	vldr	s15, [r3]
 8004892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004896:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800489a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	3304      	adds	r3, #4
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	ed93 7a00 	vldr	s14, [r3]
 80048aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	3304      	adds	r3, #4
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80048c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3304      	adds	r3, #4
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	ed93 7a00 	vldr	s14, [r3]
 80048d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	3304      	adds	r3, #4
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048e6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80048ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	3304      	adds	r3, #4
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	ed93 7a00 	vldr	s14, [r3]
 80048fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	3304      	adds	r3, #4
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	edd3 7a00 	vldr	s15, [r3]
 800490a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800490e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004912:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	3304      	adds	r3, #4
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	ed93 7a00 	vldr	s14, [r3]
 8004922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	3304      	adds	r3, #4
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	edd3 7a00 	vldr	s15, [r3]
 8004932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004936:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800493a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	3304      	adds	r3, #4
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4413      	add	r3, r2
 8004946:	ed93 7a00 	vldr	s14, [r3]
 800494a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	3304      	adds	r3, #4
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	edd3 7a00 	vldr	s15, [r3]
 800495a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	3304      	adds	r3, #4
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	ed93 7a00 	vldr	s14, [r3]
 8004972:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	3304      	adds	r3, #4
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	edd3 7a00 	vldr	s15, [r3]
 8004982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004986:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800498a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800498e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004996:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800499a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800499e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80049a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 80049aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80049ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80049b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049b6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 80049ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80049be:	edd7 7a08 	vldr	s15, [r7, #32]
 80049c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80049ca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80049ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80049d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80049da:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80049de:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80049e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80049ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	3304      	adds	r3, #4
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80049fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a02:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8004a06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004a0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a12:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8004a16:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004a1a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a22:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8004a26:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004a2a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a32:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8004a36:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004a3a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8004a46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004a4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8004a56:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004a5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8004a66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004a6a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8004a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a84:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a8c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8004a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	3304      	adds	r3, #4
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004aa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aa8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8004aac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004ab0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8004abc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004ac0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8004acc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004ad0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8004adc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004ae0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8004aec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004afa:	edd7 7a06 	vldr	s15, [r7, #24]
 8004afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b02:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8004b06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b16:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b1e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8004b22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b26:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8004b32:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004b36:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8004b42:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b46:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8004b52:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004b56:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8004b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b70:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b78:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8004b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	3304      	adds	r3, #4
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b94:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8004b98:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004b9c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ba4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bac:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8004bb0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004bb4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bbc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8004bc8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004bcc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bdc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8004be0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004be4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bec:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8004bf8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004bfc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c04:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8004c08:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004c0c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c14:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8004c18:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004c1c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c24:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8004c28:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004c2c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c34:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8004c38:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004c3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c44:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8004c48:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004c4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c54:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8004c58:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004c5c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c64:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8004c68:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004c6c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c74:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8004c78:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004c7c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c84:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8004c88:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004c8c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c94:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8004c98:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004c9c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ca4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8004ca8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004cac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cb4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8004cb8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004cbc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cc4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8004cc8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004ccc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cd4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8004cd8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004cdc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ce4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8004ce8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004cec:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8004cf8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004cfc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d04:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8004d08:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004d0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d14:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8004d18:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004d1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d24:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8004d28:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004d2c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d34:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8004d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d46:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8004d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	3304      	adds	r3, #4
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004d62:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8004d6e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004d72:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8004d7e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004d82:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8004d8e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004d92:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8004d9e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004da2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8004dae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8004dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	3304      	adds	r3, #4
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8004dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004de0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8004de4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004de8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8004df4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004df8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e00:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8004e04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e08:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e10:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8004e14:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004e18:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e20:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8004e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e32:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e3a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8004e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	3304      	adds	r3, #4
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e56:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8004e5a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004e5e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e66:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8004e6a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004e6e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8004e7a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004e7e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8004e8a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004e8e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8004e9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	ed97 7a07 	vldr	s14, [r7, #28]
 8004ea8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8004eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	3304      	adds	r3, #4
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ec4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ecc:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8004ed0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed8:	4413      	add	r3, r2
 8004eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8004ede:	897b      	ldrh	r3, [r7, #10]
 8004ee0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	f4ff abba 	bcc.w	800465e <arm_radix8_butterfly_f32+0x746>

         j++;
 8004eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8004ef4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efc:	429a      	cmp	r2, r3
 8004efe:	f4ff ab2c 	bcc.w	800455a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8004f02:	893b      	ldrh	r3, [r7, #8]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8004f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0c:	2b07      	cmp	r3, #7
 8004f0e:	f63f a813 	bhi.w	8003f38 <arm_radix8_butterfly_f32+0x20>
}
 8004f12:	e000      	b.n	8004f16 <arm_radix8_butterfly_f32+0xffe>
         break;
 8004f14:	bf00      	nop
}
 8004f16:	bf00      	nop
 8004f18:	37f4      	adds	r7, #244	; 0xf4
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop

08004f24 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b095      	sub	sp, #84	; 0x54
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8004f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8004f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8004f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8004f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f60:	1d1a      	adds	r2, r3, #4
 8004f62:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8004f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8004f72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004f76:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8004f82:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f86:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f8e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8004f92:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004f96:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fac:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8004fb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004fb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fca:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8004fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fda:	3308      	adds	r3, #8
 8004fdc:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8004fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8004fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8004ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8004ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff8:	1d1a      	adds	r2, r3, #4
 8004ffa:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8005000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005002:	1d1a      	adds	r2, r3, #4
 8005004:	64ba      	str	r2, [r7, #72]	; 0x48
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800500a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800500e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005016:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800501a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800501e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005026:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800502a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800502e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005036:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800503a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800503e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800504a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800504e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005056:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800505a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800505e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800506a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800506e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005072:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005076:	edd7 7a07 	vldr	s15, [r7, #28]
 800507a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800507e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	1d1a      	adds	r2, r3, #4
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005094:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8005098:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800509c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80050a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80050a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80050b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050c2:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80050c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c8:	3308      	adds	r3, #8
 80050ca:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80050cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ce:	3b08      	subs	r3, #8
 80050d0:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80050d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d4:	3b01      	subs	r3, #1
 80050d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 80050d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f73f af7f 	bgt.w	8004fde <stage_rfft_f32+0xba>
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3754      	adds	r7, #84	; 0x54
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b095      	sub	sp, #84	; 0x54
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	3b01      	subs	r3, #1
 800510e:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8005116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800511c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511e:	3308      	adds	r3, #8
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8005122:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005126:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800512a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	1d1a      	adds	r2, r3, #4
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800513c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8005140:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005144:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1d1a      	adds	r2, r3, #4
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800515a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800515e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4413      	add	r3, r2
 8005166:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8005168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516a:	3308      	adds	r3, #8
 800516c:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 800516e:	e07c      	b.n	800526a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8005170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8005176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800517c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8005182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8005188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	64ba      	str	r2, [r7, #72]	; 0x48
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8005192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005194:	1d1a      	adds	r2, r3, #4
 8005196:	64ba      	str	r2, [r7, #72]	; 0x48
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800519c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80051a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80051a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80051ac:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80051b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80051b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051b8:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80051bc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80051c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80051c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c8:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80051cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80051d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80051d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d8:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80051dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80051e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80051e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e8:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80051ec:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80051f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80051f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f8:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80051fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005200:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005208:	edd7 7a07 	vldr	s15, [r7, #28]
 800520c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005210:	edd7 7a06 	vldr	s15, [r7, #24]
 8005214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005226:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800522a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800522e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005236:	edd7 7a05 	vldr	s15, [r7, #20]
 800523a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800523e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005254:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525a:	3308      	adds	r3, #8
 800525c:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800525e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005260:	3b08      	subs	r3, #8
 8005262:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8005264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005266:	3b01      	subs	r3, #1
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 800526a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526c:	2b00      	cmp	r3, #0
 800526e:	f73f af7f 	bgt.w	8005170 <merge_rfft_f32+0x82>
   }

}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	3754      	adds	r7, #84	; 0x54
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ff26 	bl	80050ee <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	2301      	movs	r3, #1
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	6978      	ldr	r0, [r7, #20]
 80052aa:	f7fe fca8 	bl	8003bfe <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80052ae:	e00a      	b.n	80052c6 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	2301      	movs	r3, #1
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7fe fca1 	bl	8003bfe <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff fe2f 	bl	8004f24 <stage_rfft_f32>
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <arm_rfft_32_fast_init_f32+0x14>
 80052de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052e2:	e014      	b.n	800530e <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2110      	movs	r1, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe fd43 	bl	8003d74 <arm_cfft_init_f32>
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80052f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 80052fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052fe:	e006      	b.n	800530e <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a03      	ldr	r2, [pc, #12]	; (8005318 <arm_rfft_32_fast_init_f32+0x48>)
 800530a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	0802bfd4 	.word	0x0802bfd4

0800531c <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <arm_rfft_64_fast_init_f32+0x14>
 800532a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800532e:	e014      	b.n	800535a <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2120      	movs	r1, #32
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fd1d 	bl	8003d74 <arm_cfft_init_f32>
 800533a:	4603      	mov	r3, r0
 800533c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800533e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 8005346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800534a:	e006      	b.n	800535a <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a03      	ldr	r2, [pc, #12]	; (8005364 <arm_rfft_64_fast_init_f32+0x48>)
 8005356:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	0802c054 	.word	0x0802c054

08005368 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <arm_rfft_128_fast_init_f32+0x14>
 8005376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800537a:	e014      	b.n	80053a6 <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2140      	movs	r1, #64	; 0x40
 8005380:	4618      	mov	r0, r3
 8005382:	f7fe fcf7 	bl	8003d74 <arm_cfft_init_f32>
 8005386:	4603      	mov	r3, r0
 8005388:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800538a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 8005392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005396:	e006      	b.n	80053a6 <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2280      	movs	r2, #128	; 0x80
 800539c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a03      	ldr	r2, [pc, #12]	; (80053b0 <arm_rfft_128_fast_init_f32+0x48>)
 80053a2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	0802c154 	.word	0x0802c154

080053b4 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <arm_rfft_256_fast_init_f32+0x14>
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c6:	e015      	b.n	80053f4 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fcd1 	bl	8003d74 <arm_cfft_init_f32>
 80053d2:	4603      	mov	r3, r0
 80053d4:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80053d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 80053de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e2:	e007      	b.n	80053f4 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053ea:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a03      	ldr	r2, [pc, #12]	; (80053fc <arm_rfft_256_fast_init_f32+0x48>)
 80053f0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	0802c354 	.word	0x0802c354

08005400 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <arm_rfft_512_fast_init_f32+0x14>
 800540e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005412:	e016      	b.n	8005442 <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fcaa 	bl	8003d74 <arm_cfft_init_f32>
 8005420:	4603      	mov	r3, r0
 8005422:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 800542c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005430:	e007      	b.n	8005442 <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005438:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a03      	ldr	r2, [pc, #12]	; (800544c <arm_rfft_512_fast_init_f32+0x4c>)
 800543e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	0802c754 	.word	0x0802c754

08005450 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <arm_rfft_1024_fast_init_f32+0x14>
 800545e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005462:	e016      	b.n	8005492 <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fc82 	bl	8003d74 <arm_cfft_init_f32>
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 800547c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005480:	e007      	b.n	8005492 <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005488:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a03      	ldr	r2, [pc, #12]	; (800549c <arm_rfft_1024_fast_init_f32+0x4c>)
 800548e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	0802cf54 	.word	0x0802cf54

080054a0 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d102      	bne.n	80054b4 <arm_rfft_2048_fast_init_f32+0x14>
 80054ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054b2:	e016      	b.n	80054e2 <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe fc5a 	bl	8003d74 <arm_cfft_init_f32>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80054c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 80054cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d0:	e007      	b.n	80054e2 <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054d8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a03      	ldr	r2, [pc, #12]	; (80054ec <arm_rfft_2048_fast_init_f32+0x4c>)
 80054de:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	0802df54 	.word	0x0802df54

080054f0 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <arm_rfft_4096_fast_init_f32+0x14>
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005502:	e016      	b.n	8005532 <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe fc32 	bl	8003d74 <arm_cfft_init_f32>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 800551c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005520:	e007      	b.n	8005532 <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005528:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a03      	ldr	r2, [pc, #12]	; (800553c <arm_rfft_4096_fast_init_f32+0x4c>)
 800552e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	0802ff54 	.word	0x0802ff54

08005540 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 8005550:	887b      	ldrh	r3, [r7, #2]
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d023      	beq.n	80055a0 <arm_rfft_fast_init_f32+0x60>
 8005558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555c:	dc38      	bgt.n	80055d0 <arm_rfft_fast_init_f32+0x90>
 800555e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005562:	d020      	beq.n	80055a6 <arm_rfft_fast_init_f32+0x66>
 8005564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005568:	dc32      	bgt.n	80055d0 <arm_rfft_fast_init_f32+0x90>
 800556a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556e:	d01d      	beq.n	80055ac <arm_rfft_fast_init_f32+0x6c>
 8005570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005574:	dc2c      	bgt.n	80055d0 <arm_rfft_fast_init_f32+0x90>
 8005576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557a:	d01a      	beq.n	80055b2 <arm_rfft_fast_init_f32+0x72>
 800557c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005580:	dc26      	bgt.n	80055d0 <arm_rfft_fast_init_f32+0x90>
 8005582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005586:	d017      	beq.n	80055b8 <arm_rfft_fast_init_f32+0x78>
 8005588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558c:	dc20      	bgt.n	80055d0 <arm_rfft_fast_init_f32+0x90>
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d015      	beq.n	80055be <arm_rfft_fast_init_f32+0x7e>
 8005592:	2b80      	cmp	r3, #128	; 0x80
 8005594:	dc1c      	bgt.n	80055d0 <arm_rfft_fast_init_f32+0x90>
 8005596:	2b20      	cmp	r3, #32
 8005598:	d017      	beq.n	80055ca <arm_rfft_fast_init_f32+0x8a>
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	d012      	beq.n	80055c4 <arm_rfft_fast_init_f32+0x84>
 800559e:	e017      	b.n	80055d0 <arm_rfft_fast_init_f32+0x90>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 80055a0:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <arm_rfft_fast_init_f32+0xb4>)
 80055a2:	60fb      	str	r3, [r7, #12]
    break;
 80055a4:	e017      	b.n	80055d6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <arm_rfft_fast_init_f32+0xb8>)
 80055a8:	60fb      	str	r3, [r7, #12]
    break;
 80055aa:	e014      	b.n	80055d6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 80055ac:	4b13      	ldr	r3, [pc, #76]	; (80055fc <arm_rfft_fast_init_f32+0xbc>)
 80055ae:	60fb      	str	r3, [r7, #12]
    break;
 80055b0:	e011      	b.n	80055d6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 80055b2:	4b13      	ldr	r3, [pc, #76]	; (8005600 <arm_rfft_fast_init_f32+0xc0>)
 80055b4:	60fb      	str	r3, [r7, #12]
    break;
 80055b6:	e00e      	b.n	80055d6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 80055b8:	4b12      	ldr	r3, [pc, #72]	; (8005604 <arm_rfft_fast_init_f32+0xc4>)
 80055ba:	60fb      	str	r3, [r7, #12]
    break;
 80055bc:	e00b      	b.n	80055d6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 80055be:	4b12      	ldr	r3, [pc, #72]	; (8005608 <arm_rfft_fast_init_f32+0xc8>)
 80055c0:	60fb      	str	r3, [r7, #12]
    break;
 80055c2:	e008      	b.n	80055d6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <arm_rfft_fast_init_f32+0xcc>)
 80055c6:	60fb      	str	r3, [r7, #12]
    break;
 80055c8:	e005      	b.n	80055d6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <arm_rfft_fast_init_f32+0xd0>)
 80055cc:	60fb      	str	r3, [r7, #12]
    break;
 80055ce:	e002      	b.n	80055d6 <arm_rfft_fast_init_f32+0x96>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 80055d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d4:	e009      	b.n	80055ea <arm_rfft_fast_init_f32+0xaa>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <arm_rfft_fast_init_f32+0xa2>
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055e0:	e003      	b.n	80055ea <arm_rfft_fast_init_f32+0xaa>
  return fptr( S );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
 80055e8:	4603      	mov	r3, r0

}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	080054f1 	.word	0x080054f1
 80055f8:	080054a1 	.word	0x080054a1
 80055fc:	08005451 	.word	0x08005451
 8005600:	08005401 	.word	0x08005401
 8005604:	080053b5 	.word	0x080053b5
 8005608:	08005369 	.word	0x08005369
 800560c:	0800531d 	.word	0x0800531d
 8005610:	080052d1 	.word	0x080052d1

08005614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <HAL_Init+0x40>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <HAL_Init+0x40>)
 800561e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_Init+0x40>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <HAL_Init+0x40>)
 800562a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800562e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005630:	4b08      	ldr	r3, [pc, #32]	; (8005654 <HAL_Init+0x40>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a07      	ldr	r2, [pc, #28]	; (8005654 <HAL_Init+0x40>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800563c:	2003      	movs	r0, #3
 800563e:	f000 f94f 	bl	80058e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005642:	2000      	movs	r0, #0
 8005644:	f000 f808 	bl	8005658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005648:	f7fc fc0a 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00

08005658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005660:	4b12      	ldr	r3, [pc, #72]	; (80056ac <HAL_InitTick+0x54>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_InitTick+0x58>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	4619      	mov	r1, r3
 800566a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800566e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f967 	bl	800594a <HAL_SYSTICK_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e00e      	b.n	80056a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b0f      	cmp	r3, #15
 800568a:	d80a      	bhi.n	80056a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800568c:	2200      	movs	r2, #0
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005694:	f000 f92f 	bl	80058f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005698:	4a06      	ldr	r2, [pc, #24]	; (80056b4 <HAL_InitTick+0x5c>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000498 	.word	0x20000498
 80056b0:	200004b4 	.word	0x200004b4
 80056b4:	200004b0 	.word	0x200004b0

080056b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_IncTick+0x20>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_IncTick+0x24>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4413      	add	r3, r2
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <HAL_IncTick+0x24>)
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	200004b4 	.word	0x200004b4
 80056dc:	20013c4c 	.word	0x20013c4c

080056e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  return uwTick;
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <HAL_GetTick+0x14>)
 80056e6:	681b      	ldr	r3, [r3, #0]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20013c4c 	.word	0x20013c4c

080056f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005700:	f7ff ffee 	bl	80056e0 <HAL_GetTick>
 8005704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005710:	d005      	beq.n	800571e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <HAL_Delay+0x44>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800571e:	bf00      	nop
 8005720:	f7ff ffde 	bl	80056e0 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d8f7      	bhi.n	8005720 <HAL_Delay+0x28>
  {
  }
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200004b4 	.word	0x200004b4

08005740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <__NVIC_SetPriorityGrouping+0x44>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800576c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <__NVIC_SetPriorityGrouping+0x44>)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	60d3      	str	r3, [r2, #12]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <__NVIC_GetPriorityGrouping+0x18>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	f003 0307 	and.w	r3, r3, #7
}
 8005796:	4618      	mov	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	db0b      	blt.n	80057ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	f003 021f 	and.w	r2, r3, #31
 80057bc:	4907      	ldr	r1, [pc, #28]	; (80057dc <__NVIC_EnableIRQ+0x38>)
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	2001      	movs	r0, #1
 80057c6:	fa00 f202 	lsl.w	r2, r0, r2
 80057ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	e000e100 	.word	0xe000e100

080057e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	6039      	str	r1, [r7, #0]
 80057ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	db0a      	blt.n	800580a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	490c      	ldr	r1, [pc, #48]	; (800582c <__NVIC_SetPriority+0x4c>)
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	0112      	lsls	r2, r2, #4
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	440b      	add	r3, r1
 8005804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005808:	e00a      	b.n	8005820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	4908      	ldr	r1, [pc, #32]	; (8005830 <__NVIC_SetPriority+0x50>)
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	3b04      	subs	r3, #4
 8005818:	0112      	lsls	r2, r2, #4
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	440b      	add	r3, r1
 800581e:	761a      	strb	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	e000e100 	.word	0xe000e100
 8005830:	e000ed00 	.word	0xe000ed00

08005834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005834:	b480      	push	{r7}
 8005836:	b089      	sub	sp, #36	; 0x24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f1c3 0307 	rsb	r3, r3, #7
 800584e:	2b04      	cmp	r3, #4
 8005850:	bf28      	it	cs
 8005852:	2304      	movcs	r3, #4
 8005854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3304      	adds	r3, #4
 800585a:	2b06      	cmp	r3, #6
 800585c:	d902      	bls.n	8005864 <NVIC_EncodePriority+0x30>
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3b03      	subs	r3, #3
 8005862:	e000      	b.n	8005866 <NVIC_EncodePriority+0x32>
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43da      	mvns	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	401a      	ands	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800587c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	43d9      	mvns	r1, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800588c:	4313      	orrs	r3, r2
         );
}
 800588e:	4618      	mov	r0, r3
 8005890:	3724      	adds	r7, #36	; 0x24
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058ac:	d301      	bcc.n	80058b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ae:	2301      	movs	r3, #1
 80058b0:	e00f      	b.n	80058d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058b2:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <SysTick_Config+0x40>)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ba:	210f      	movs	r1, #15
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c0:	f7ff ff8e 	bl	80057e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <SysTick_Config+0x40>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ca:	4b04      	ldr	r3, [pc, #16]	; (80058dc <SysTick_Config+0x40>)
 80058cc:	2207      	movs	r2, #7
 80058ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	e000e010 	.word	0xe000e010

080058e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff29 	bl	8005740 <__NVIC_SetPriorityGrouping>
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b086      	sub	sp, #24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
 8005902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005908:	f7ff ff3e 	bl	8005788 <__NVIC_GetPriorityGrouping>
 800590c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	6978      	ldr	r0, [r7, #20]
 8005914:	f7ff ff8e 	bl	8005834 <NVIC_EncodePriority>
 8005918:	4602      	mov	r2, r0
 800591a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ff5d 	bl	80057e0 <__NVIC_SetPriority>
}
 8005926:	bf00      	nop
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	4603      	mov	r3, r0
 8005936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff31 	bl	80057a4 <__NVIC_EnableIRQ>
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff ffa2 	bl	800589c <SysTick_Config>
 8005958:	4603      	mov	r3, r0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e00e      	b.n	8005992 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	795b      	ldrb	r3, [r3, #5]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d105      	bne.n	800598a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fc fa93 	bl	8001eb0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059a8:	f7ff fe9a 	bl	80056e0 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e099      	b.n	8005aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059d8:	e00f      	b.n	80059fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059da:	f7ff fe81 	bl	80056e0 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b05      	cmp	r3, #5
 80059e6:	d908      	bls.n	80059fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2203      	movs	r2, #3
 80059f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e078      	b.n	8005aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e8      	bne.n	80059da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <HAL_DMA_Init+0x158>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d107      	bne.n	8005a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0307 	bic.w	r3, r3, #7
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d117      	bne.n	8005abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00e      	beq.n	8005abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fb3d 	bl	8006120 <DMA_CheckFifoParam>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005aba:	2301      	movs	r3, #1
 8005abc:	e016      	b.n	8005aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 faf4 	bl	80060b4 <DMA_CalcBaseAndBitshift>
 8005acc:	4603      	mov	r3, r0
 8005ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad4:	223f      	movs	r2, #63	; 0x3f
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	f010803f 	.word	0xf010803f

08005af8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e050      	b.n	8005bac <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d101      	bne.n	8005b1a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e048      	b.n	8005bac <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2221      	movs	r2, #33	; 0x21
 8005b58:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 faaa 	bl	80060b4 <DMA_CalcBaseAndBitshift>
 8005b60:	4603      	mov	r3, r0
 8005b62:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8c:	223f      	movs	r2, #63	; 0x3f
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_DMA_Start_IT+0x26>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e040      	b.n	8005c5c <HAL_DMA_Start_IT+0xa8>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d12f      	bne.n	8005c4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fa28 	bl	8006058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0c:	223f      	movs	r2, #63	; 0x3f
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0216 	orr.w	r2, r2, #22
 8005c22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0208 	orr.w	r2, r2, #8
 8005c3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e005      	b.n	8005c5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
 8005c58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c72:	f7ff fd35 	bl	80056e0 <HAL_GetTick>
 8005c76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d008      	beq.n	8005c96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2280      	movs	r2, #128	; 0x80
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e052      	b.n	8005d3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0216 	bic.w	r2, r2, #22
 8005ca4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <HAL_DMA_Abort+0x62>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0208 	bic.w	r2, r2, #8
 8005cd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ce6:	e013      	b.n	8005d10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ce8:	f7ff fcfa 	bl	80056e0 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d90c      	bls.n	8005d10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e015      	b.n	8005d3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e4      	bne.n	8005ce8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	223f      	movs	r2, #63	; 0x3f
 8005d24:	409a      	lsls	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d50:	4b92      	ldr	r3, [pc, #584]	; (8005f9c <HAL_DMA_IRQHandler+0x258>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a92      	ldr	r2, [pc, #584]	; (8005fa0 <HAL_DMA_IRQHandler+0x25c>)
 8005d56:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5a:	0a9b      	lsrs	r3, r3, #10
 8005d5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6e:	2208      	movs	r2, #8
 8005d70:	409a      	lsls	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d01a      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0204 	bic.w	r2, r2, #4
 8005d96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da8:	f043 0201 	orr.w	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db4:	2201      	movs	r2, #1
 8005db6:	409a      	lsls	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d012      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	f043 0202 	orr.w	r2, r3, #2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dea:	2204      	movs	r2, #4
 8005dec:	409a      	lsls	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d012      	beq.n	8005e1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	2204      	movs	r2, #4
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	f043 0204 	orr.w	r2, r3, #4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e20:	2210      	movs	r2, #16
 8005e22:	409a      	lsls	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4013      	ands	r3, r2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d043      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d03c      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3e:	2210      	movs	r2, #16
 8005e40:	409a      	lsls	r2, r3
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d018      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d108      	bne.n	8005e74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d024      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
 8005e72:	e01f      	b.n	8005eb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01b      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
 8005e84:	e016      	b.n	8005eb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0208 	bic.w	r2, r2, #8
 8005ea2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb8:	2220      	movs	r2, #32
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 808e 	beq.w	8005fe2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8086 	beq.w	8005fe2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eda:	2220      	movs	r2, #32
 8005edc:	409a      	lsls	r2, r3
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d136      	bne.n	8005f5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0216 	bic.w	r2, r2, #22
 8005efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695a      	ldr	r2, [r3, #20]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <HAL_DMA_IRQHandler+0x1da>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0208 	bic.w	r2, r2, #8
 8005f2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f32:	223f      	movs	r2, #63	; 0x3f
 8005f34:	409a      	lsls	r2, r3
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d07d      	beq.n	800604e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
        }
        return;
 8005f5a:	e078      	b.n	800604e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01c      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d108      	bne.n	8005f8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d030      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	4798      	blx	r3
 8005f88:	e02b      	b.n	8005fe2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d027      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
 8005f9a:	e022      	b.n	8005fe2 <HAL_DMA_IRQHandler+0x29e>
 8005f9c:	20000498 	.word	0x20000498
 8005fa0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0210 	bic.w	r2, r2, #16
 8005fc0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d032      	beq.n	8006050 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d022      	beq.n	800603c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2205      	movs	r2, #5
 8005ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	3301      	adds	r3, #1
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	429a      	cmp	r2, r3
 8006018:	d307      	bcc.n	800602a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f2      	bne.n	800600e <HAL_DMA_IRQHandler+0x2ca>
 8006028:	e000      	b.n	800602c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800602a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
 800604c:	e000      	b.n	8006050 <HAL_DMA_IRQHandler+0x30c>
        return;
 800604e:	bf00      	nop
    }
  }
}
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop

08006058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d108      	bne.n	8006098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006096:	e007      	b.n	80060a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	60da      	str	r2, [r3, #12]
}
 80060a8:	bf00      	nop
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	3b10      	subs	r3, #16
 80060c4:	4a14      	ldr	r2, [pc, #80]	; (8006118 <DMA_CalcBaseAndBitshift+0x64>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060ce:	4a13      	ldr	r2, [pc, #76]	; (800611c <DMA_CalcBaseAndBitshift+0x68>)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d909      	bls.n	80060f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	1d1a      	adds	r2, r3, #4
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	659a      	str	r2, [r3, #88]	; 0x58
 80060f4:	e007      	b.n	8006106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	aaaaaaab 	.word	0xaaaaaaab
 800611c:	08033fe4 	.word	0x08033fe4

08006120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d11f      	bne.n	800617a <DMA_CheckFifoParam+0x5a>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b03      	cmp	r3, #3
 800613e:	d856      	bhi.n	80061ee <DMA_CheckFifoParam+0xce>
 8006140:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <DMA_CheckFifoParam+0x28>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	08006159 	.word	0x08006159
 800614c:	0800616b 	.word	0x0800616b
 8006150:	08006159 	.word	0x08006159
 8006154:	080061ef 	.word	0x080061ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d046      	beq.n	80061f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006168:	e043      	b.n	80061f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006172:	d140      	bne.n	80061f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006178:	e03d      	b.n	80061f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006182:	d121      	bne.n	80061c8 <DMA_CheckFifoParam+0xa8>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b03      	cmp	r3, #3
 8006188:	d837      	bhi.n	80061fa <DMA_CheckFifoParam+0xda>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <DMA_CheckFifoParam+0x70>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061a1 	.word	0x080061a1
 8006194:	080061a7 	.word	0x080061a7
 8006198:	080061a1 	.word	0x080061a1
 800619c:	080061b9 	.word	0x080061b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
      break;
 80061a4:	e030      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d025      	beq.n	80061fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b6:	e022      	b.n	80061fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061c0:	d11f      	bne.n	8006202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061c6:	e01c      	b.n	8006202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d903      	bls.n	80061d6 <DMA_CheckFifoParam+0xb6>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d003      	beq.n	80061dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061d4:	e018      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
      break;
 80061da:	e015      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00e      	beq.n	8006206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	e00b      	b.n	8006206 <DMA_CheckFifoParam+0xe6>
      break;
 80061ee:	bf00      	nop
 80061f0:	e00a      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
      break;
 80061f2:	bf00      	nop
 80061f4:	e008      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
      break;
 80061f6:	bf00      	nop
 80061f8:	e006      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
      break;
 80061fa:	bf00      	nop
 80061fc:	e004      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
      break;
 80061fe:	bf00      	nop
 8006200:	e002      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
      break;   
 8006202:	bf00      	nop
 8006204:	e000      	b.n	8006208 <DMA_CheckFifoParam+0xe8>
      break;
 8006206:	bf00      	nop
    }
  } 
  
  return status; 
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop

08006218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800622a:	2300      	movs	r3, #0
 800622c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e16b      	b.n	800650c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006234:	2201      	movs	r2, #1
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4013      	ands	r3, r2
 8006246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	429a      	cmp	r2, r3
 800624e:	f040 815a 	bne.w	8006506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d005      	beq.n	800626a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006266:	2b02      	cmp	r3, #2
 8006268:	d130      	bne.n	80062cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	2203      	movs	r2, #3
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	43db      	mvns	r3, r3
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	4013      	ands	r3, r2
 8006280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4313      	orrs	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062a0:	2201      	movs	r2, #1
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4013      	ands	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	091b      	lsrs	r3, r3, #4
 80062b6:	f003 0201 	and.w	r2, r3, #1
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d017      	beq.n	8006308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	2203      	movs	r2, #3
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	43db      	mvns	r3, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4013      	ands	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4313      	orrs	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d123      	bne.n	800635c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	08da      	lsrs	r2, r3, #3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3208      	adds	r2, #8
 800631c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	220f      	movs	r2, #15
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4013      	ands	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	4313      	orrs	r3, r2
 800634c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	08da      	lsrs	r2, r3, #3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3208      	adds	r2, #8
 8006356:	69b9      	ldr	r1, [r7, #24]
 8006358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	2203      	movs	r2, #3
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	43db      	mvns	r3, r3
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4013      	ands	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 0203 	and.w	r2, r3, #3
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	4313      	orrs	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80b4 	beq.w	8006506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	4b60      	ldr	r3, [pc, #384]	; (8006524 <HAL_GPIO_Init+0x30c>)
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	4a5f      	ldr	r2, [pc, #380]	; (8006524 <HAL_GPIO_Init+0x30c>)
 80063a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ac:	6453      	str	r3, [r2, #68]	; 0x44
 80063ae:	4b5d      	ldr	r3, [pc, #372]	; (8006524 <HAL_GPIO_Init+0x30c>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063ba:	4a5b      	ldr	r2, [pc, #364]	; (8006528 <HAL_GPIO_Init+0x310>)
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	3302      	adds	r3, #2
 80063c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	220f      	movs	r2, #15
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	43db      	mvns	r3, r3
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	4013      	ands	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a52      	ldr	r2, [pc, #328]	; (800652c <HAL_GPIO_Init+0x314>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02b      	beq.n	800643e <HAL_GPIO_Init+0x226>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a51      	ldr	r2, [pc, #324]	; (8006530 <HAL_GPIO_Init+0x318>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d025      	beq.n	800643a <HAL_GPIO_Init+0x222>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a50      	ldr	r2, [pc, #320]	; (8006534 <HAL_GPIO_Init+0x31c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01f      	beq.n	8006436 <HAL_GPIO_Init+0x21e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a4f      	ldr	r2, [pc, #316]	; (8006538 <HAL_GPIO_Init+0x320>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d019      	beq.n	8006432 <HAL_GPIO_Init+0x21a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a4e      	ldr	r2, [pc, #312]	; (800653c <HAL_GPIO_Init+0x324>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <HAL_GPIO_Init+0x216>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a4d      	ldr	r2, [pc, #308]	; (8006540 <HAL_GPIO_Init+0x328>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00d      	beq.n	800642a <HAL_GPIO_Init+0x212>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a4c      	ldr	r2, [pc, #304]	; (8006544 <HAL_GPIO_Init+0x32c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <HAL_GPIO_Init+0x20e>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a4b      	ldr	r2, [pc, #300]	; (8006548 <HAL_GPIO_Init+0x330>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d101      	bne.n	8006422 <HAL_GPIO_Init+0x20a>
 800641e:	2307      	movs	r3, #7
 8006420:	e00e      	b.n	8006440 <HAL_GPIO_Init+0x228>
 8006422:	2308      	movs	r3, #8
 8006424:	e00c      	b.n	8006440 <HAL_GPIO_Init+0x228>
 8006426:	2306      	movs	r3, #6
 8006428:	e00a      	b.n	8006440 <HAL_GPIO_Init+0x228>
 800642a:	2305      	movs	r3, #5
 800642c:	e008      	b.n	8006440 <HAL_GPIO_Init+0x228>
 800642e:	2304      	movs	r3, #4
 8006430:	e006      	b.n	8006440 <HAL_GPIO_Init+0x228>
 8006432:	2303      	movs	r3, #3
 8006434:	e004      	b.n	8006440 <HAL_GPIO_Init+0x228>
 8006436:	2302      	movs	r3, #2
 8006438:	e002      	b.n	8006440 <HAL_GPIO_Init+0x228>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <HAL_GPIO_Init+0x228>
 800643e:	2300      	movs	r3, #0
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	f002 0203 	and.w	r2, r2, #3
 8006446:	0092      	lsls	r2, r2, #2
 8006448:	4093      	lsls	r3, r2
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	4313      	orrs	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006450:	4935      	ldr	r1, [pc, #212]	; (8006528 <HAL_GPIO_Init+0x310>)
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	089b      	lsrs	r3, r3, #2
 8006456:	3302      	adds	r3, #2
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800645e:	4b3b      	ldr	r3, [pc, #236]	; (800654c <HAL_GPIO_Init+0x334>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	43db      	mvns	r3, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4013      	ands	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006482:	4a32      	ldr	r2, [pc, #200]	; (800654c <HAL_GPIO_Init+0x334>)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006488:	4b30      	ldr	r3, [pc, #192]	; (800654c <HAL_GPIO_Init+0x334>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	43db      	mvns	r3, r3
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	4013      	ands	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064ac:	4a27      	ldr	r2, [pc, #156]	; (800654c <HAL_GPIO_Init+0x334>)
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064b2:	4b26      	ldr	r3, [pc, #152]	; (800654c <HAL_GPIO_Init+0x334>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	43db      	mvns	r3, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4013      	ands	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064d6:	4a1d      	ldr	r2, [pc, #116]	; (800654c <HAL_GPIO_Init+0x334>)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064dc:	4b1b      	ldr	r3, [pc, #108]	; (800654c <HAL_GPIO_Init+0x334>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	43db      	mvns	r3, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006500:	4a12      	ldr	r2, [pc, #72]	; (800654c <HAL_GPIO_Init+0x334>)
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	3301      	adds	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	2b0f      	cmp	r3, #15
 8006510:	f67f ae90 	bls.w	8006234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop
 8006518:	3724      	adds	r7, #36	; 0x24
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40023800 	.word	0x40023800
 8006528:	40013800 	.word	0x40013800
 800652c:	40020000 	.word	0x40020000
 8006530:	40020400 	.word	0x40020400
 8006534:	40020800 	.word	0x40020800
 8006538:	40020c00 	.word	0x40020c00
 800653c:	40021000 	.word	0x40021000
 8006540:	40021400 	.word	0x40021400
 8006544:	40021800 	.word	0x40021800
 8006548:	40021c00 	.word	0x40021c00
 800654c:	40013c00 	.word	0x40013c00

08006550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	807b      	strh	r3, [r7, #2]
 800655c:	4613      	mov	r3, r2
 800655e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006560:	787b      	ldrb	r3, [r7, #1]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006566:	887a      	ldrh	r2, [r7, #2]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800656c:	e003      	b.n	8006576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	041a      	lsls	r2, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	619a      	str	r2, [r3, #24]
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006594:	887a      	ldrh	r2, [r7, #2]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4013      	ands	r3, r2
 800659a:	041a      	lsls	r2, r3, #16
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	43d9      	mvns	r1, r3
 80065a0:	887b      	ldrh	r3, [r7, #2]
 80065a2:	400b      	ands	r3, r1
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	619a      	str	r2, [r3, #24]
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065c2:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d006      	beq.n	80065dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065ce:	4a05      	ldr	r2, [pc, #20]	; (80065e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fb fc28 	bl	8001e2c <HAL_GPIO_EXTI_Callback>
  }
}
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40013c00 	.word	0x40013c00

080065e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e12b      	b.n	8006852 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fb fc70 	bl	8001ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2224      	movs	r2, #36	; 0x24
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0201 	bic.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800663a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800664a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800664c:	f001 fd0e 	bl	800806c <HAL_RCC_GetPCLK1Freq>
 8006650:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4a81      	ldr	r2, [pc, #516]	; (800685c <HAL_I2C_Init+0x274>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d807      	bhi.n	800666c <HAL_I2C_Init+0x84>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4a80      	ldr	r2, [pc, #512]	; (8006860 <HAL_I2C_Init+0x278>)
 8006660:	4293      	cmp	r3, r2
 8006662:	bf94      	ite	ls
 8006664:	2301      	movls	r3, #1
 8006666:	2300      	movhi	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	e006      	b.n	800667a <HAL_I2C_Init+0x92>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a7d      	ldr	r2, [pc, #500]	; (8006864 <HAL_I2C_Init+0x27c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	bf94      	ite	ls
 8006674:	2301      	movls	r3, #1
 8006676:	2300      	movhi	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e0e7      	b.n	8006852 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a78      	ldr	r2, [pc, #480]	; (8006868 <HAL_I2C_Init+0x280>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	0c9b      	lsrs	r3, r3, #18
 800668c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4a6a      	ldr	r2, [pc, #424]	; (800685c <HAL_I2C_Init+0x274>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d802      	bhi.n	80066bc <HAL_I2C_Init+0xd4>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	3301      	adds	r3, #1
 80066ba:	e009      	b.n	80066d0 <HAL_I2C_Init+0xe8>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	4a69      	ldr	r2, [pc, #420]	; (800686c <HAL_I2C_Init+0x284>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	099b      	lsrs	r3, r3, #6
 80066ce:	3301      	adds	r3, #1
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	495c      	ldr	r1, [pc, #368]	; (800685c <HAL_I2C_Init+0x274>)
 80066ec:	428b      	cmp	r3, r1
 80066ee:	d819      	bhi.n	8006724 <HAL_I2C_Init+0x13c>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	1e59      	subs	r1, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80066fe:	1c59      	adds	r1, r3, #1
 8006700:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006704:	400b      	ands	r3, r1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_I2C_Init+0x138>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1e59      	subs	r1, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	fbb1 f3f3 	udiv	r3, r1, r3
 8006718:	3301      	adds	r3, #1
 800671a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800671e:	e051      	b.n	80067c4 <HAL_I2C_Init+0x1dc>
 8006720:	2304      	movs	r3, #4
 8006722:	e04f      	b.n	80067c4 <HAL_I2C_Init+0x1dc>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d111      	bne.n	8006750 <HAL_I2C_Init+0x168>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1e58      	subs	r0, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	440b      	add	r3, r1
 800673a:	fbb0 f3f3 	udiv	r3, r0, r3
 800673e:	3301      	adds	r3, #1
 8006740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006744:	2b00      	cmp	r3, #0
 8006746:	bf0c      	ite	eq
 8006748:	2301      	moveq	r3, #1
 800674a:	2300      	movne	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e012      	b.n	8006776 <HAL_I2C_Init+0x18e>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1e58      	subs	r0, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6859      	ldr	r1, [r3, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	0099      	lsls	r1, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	fbb0 f3f3 	udiv	r3, r0, r3
 8006766:	3301      	adds	r3, #1
 8006768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800676c:	2b00      	cmp	r3, #0
 800676e:	bf0c      	ite	eq
 8006770:	2301      	moveq	r3, #1
 8006772:	2300      	movne	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_I2C_Init+0x196>
 800677a:	2301      	movs	r3, #1
 800677c:	e022      	b.n	80067c4 <HAL_I2C_Init+0x1dc>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10e      	bne.n	80067a4 <HAL_I2C_Init+0x1bc>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1e58      	subs	r0, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	440b      	add	r3, r1
 8006794:	fbb0 f3f3 	udiv	r3, r0, r3
 8006798:	3301      	adds	r3, #1
 800679a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800679e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a2:	e00f      	b.n	80067c4 <HAL_I2C_Init+0x1dc>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1e58      	subs	r0, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6859      	ldr	r1, [r3, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	0099      	lsls	r1, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ba:	3301      	adds	r3, #1
 80067bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	6809      	ldr	r1, [r1, #0]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69da      	ldr	r2, [r3, #28]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6911      	ldr	r1, [r2, #16]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68d2      	ldr	r2, [r2, #12]
 80067fe:	4311      	orrs	r1, r2
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	430b      	orrs	r3, r1
 8006806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	000186a0 	.word	0x000186a0
 8006860:	001e847f 	.word	0x001e847f
 8006864:	003d08ff 	.word	0x003d08ff
 8006868:	431bde83 	.word	0x431bde83
 800686c:	10624dd3 	.word	0x10624dd3

08006870 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e128      	b.n	8006ad4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a90      	ldr	r2, [pc, #576]	; (8006adc <HAL_I2S_Init+0x26c>)
 800689a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fb fb71 	bl	8001f84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80068b8:	f023 030f 	bic.w	r3, r3, #15
 80068bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2202      	movs	r2, #2
 80068c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d060      	beq.n	8006990 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d102      	bne.n	80068dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80068d6:	2310      	movs	r3, #16
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e001      	b.n	80068e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80068dc:	2320      	movs	r3, #32
 80068de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d802      	bhi.n	80068ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80068ee:	2001      	movs	r0, #1
 80068f0:	f001 fcf2 	bl	80082d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80068f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fe:	d125      	bne.n	800694c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	3305      	adds	r3, #5
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	e01f      	b.n	800696a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	fbb2 f2f3 	udiv	r2, r2, r3
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	461a      	mov	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	fbb2 f3f3 	udiv	r3, r2, r3
 8006946:	3305      	adds	r3, #5
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	e00e      	b.n	800696a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	fbb2 f2f3 	udiv	r2, r2, r3
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	461a      	mov	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	fbb2 f3f3 	udiv	r3, r2, r3
 8006966:	3305      	adds	r3, #5
 8006968:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4a5c      	ldr	r2, [pc, #368]	; (8006ae0 <HAL_I2S_Init+0x270>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	08db      	lsrs	r3, r3, #3
 8006974:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e003      	b.n	8006998 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006990:	2302      	movs	r3, #2
 8006992:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d902      	bls.n	80069a4 <HAL_I2S_Init+0x134>
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2bff      	cmp	r3, #255	; 0xff
 80069a2:	d907      	bls.n	80069b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a8:	f043 0210 	orr.w	r2, r3, #16
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e08f      	b.n	8006ad4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	ea42 0103 	orr.w	r1, r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80069d2:	f023 030f 	bic.w	r3, r3, #15
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6851      	ldr	r1, [r2, #4]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6892      	ldr	r2, [r2, #8]
 80069de:	4311      	orrs	r1, r2
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	68d2      	ldr	r2, [r2, #12]
 80069e4:	4311      	orrs	r1, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6992      	ldr	r2, [r2, #24]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d161      	bne.n	8006ac4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a38      	ldr	r2, [pc, #224]	; (8006ae4 <HAL_I2S_Init+0x274>)
 8006a04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a37      	ldr	r2, [pc, #220]	; (8006ae8 <HAL_I2S_Init+0x278>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d101      	bne.n	8006a14 <HAL_I2S_Init+0x1a4>
 8006a10:	4b36      	ldr	r3, [pc, #216]	; (8006aec <HAL_I2S_Init+0x27c>)
 8006a12:	e001      	b.n	8006a18 <HAL_I2S_Init+0x1a8>
 8006a14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	4932      	ldr	r1, [pc, #200]	; (8006ae8 <HAL_I2S_Init+0x278>)
 8006a20:	428a      	cmp	r2, r1
 8006a22:	d101      	bne.n	8006a28 <HAL_I2S_Init+0x1b8>
 8006a24:	4a31      	ldr	r2, [pc, #196]	; (8006aec <HAL_I2S_Init+0x27c>)
 8006a26:	e001      	b.n	8006a2c <HAL_I2S_Init+0x1bc>
 8006a28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006a2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a30:	f023 030f 	bic.w	r3, r3, #15
 8006a34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a2b      	ldr	r2, [pc, #172]	; (8006ae8 <HAL_I2S_Init+0x278>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d101      	bne.n	8006a44 <HAL_I2S_Init+0x1d4>
 8006a40:	4b2a      	ldr	r3, [pc, #168]	; (8006aec <HAL_I2S_Init+0x27c>)
 8006a42:	e001      	b.n	8006a48 <HAL_I2S_Init+0x1d8>
 8006a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a48:	2202      	movs	r2, #2
 8006a4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a25      	ldr	r2, [pc, #148]	; (8006ae8 <HAL_I2S_Init+0x278>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <HAL_I2S_Init+0x1ea>
 8006a56:	4b25      	ldr	r3, [pc, #148]	; (8006aec <HAL_I2S_Init+0x27c>)
 8006a58:	e001      	b.n	8006a5e <HAL_I2S_Init+0x1ee>
 8006a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6a:	d003      	beq.n	8006a74 <HAL_I2S_Init+0x204>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d103      	bne.n	8006a7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	e001      	b.n	8006a80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006a94:	4313      	orrs	r3, r2
 8006a96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	897b      	ldrh	r3, [r7, #10]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006aac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <HAL_I2S_Init+0x278>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d101      	bne.n	8006abc <HAL_I2S_Init+0x24c>
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <HAL_I2S_Init+0x27c>)
 8006aba:	e001      	b.n	8006ac0 <HAL_I2S_Init+0x250>
 8006abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ac0:	897a      	ldrh	r2, [r7, #10]
 8006ac2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	0800719d 	.word	0x0800719d
 8006ae0:	cccccccd 	.word	0xcccccccd
 8006ae4:	08007325 	.word	0x08007325
 8006ae8:	40003800 	.word	0x40003800
 8006aec:	40003400 	.word	0x40003400

08006af0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <HAL_I2S_Receive_DMA+0x1a>
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e0a1      	b.n	8006c52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_I2S_Receive_DMA+0x2e>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e099      	b.n	8006c52 <HAL_I2S_Receive_DMA+0x162>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d005      	beq.n	8006b3e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e089      	b.n	8006c52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2204      	movs	r2, #4
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d002      	beq.n	8006b6a <HAL_I2S_Receive_DMA+0x7a>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	d10a      	bne.n	8006b80 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	865a      	strh	r2, [r3, #50]	; 0x32
 8006b7e:	e005      	b.n	8006b8c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	4a32      	ldr	r2, [pc, #200]	; (8006c5c <HAL_I2S_Receive_DMA+0x16c>)
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b98:	4a31      	ldr	r2, [pc, #196]	; (8006c60 <HAL_I2S_Receive_DMA+0x170>)
 8006b9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba0:	4a30      	ldr	r2, [pc, #192]	; (8006c64 <HAL_I2S_Receive_DMA+0x174>)
 8006ba2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb2:	d10a      	bne.n	8006bca <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	613b      	str	r3, [r7, #16]
 8006bc8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006be0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006be2:	f7fe ffe7 	bl	8005bb4 <HAL_DMA_Start_IT>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00f      	beq.n	8006c0c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf0:	f043 0208 	orr.w	r2, r3, #8
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e022      	b.n	8006c52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d107      	bne.n	8006c2a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c28:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d107      	bne.n	8006c48 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0201 	orr.w	r2, r2, #1
 8006c46:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	0800707b 	.word	0x0800707b
 8006c60:	08007039 	.word	0x08007039
 8006c64:	08007097 	.word	0x08007097

08006c68 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c7c:	d004      	beq.n	8006c88 <HAL_I2S_DMAStop+0x20>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 80d1 	bne.w	8006e2a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00f      	beq.n	8006cb0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe ffe5 	bl	8005c64 <HAL_DMA_Abort>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca4:	f043 0208 	orr.w	r2, r3, #8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006cb0:	2364      	movs	r3, #100	; 0x64
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fafa 	bl	80072b0 <I2S_WaitFlagStateUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	f043 0201 	orr.w	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006cda:	2364      	movs	r3, #100	; 0x64
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fae5 	bl	80072b0 <I2S_WaitFlagStateUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf0:	f043 0201 	orr.w	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69da      	ldr	r2, [r3, #28]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d12:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0202 	bic.w	r2, r2, #2
 8006d30:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	f040 8165 	bne.w	800700a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00f      	beq.n	8006d68 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fe ff89 	bl	8005c64 <HAL_DMA_Abort>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d007      	beq.n	8006d68 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5c:	f043 0208 	orr.w	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a8a      	ldr	r2, [pc, #552]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d101      	bne.n	8006d76 <HAL_I2S_DMAStop+0x10e>
 8006d72:	4b8a      	ldr	r3, [pc, #552]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006d74:	e001      	b.n	8006d7a <HAL_I2S_DMAStop+0x112>
 8006d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4985      	ldr	r1, [pc, #532]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006d82:	428b      	cmp	r3, r1
 8006d84:	d101      	bne.n	8006d8a <HAL_I2S_DMAStop+0x122>
 8006d86:	4b85      	ldr	r3, [pc, #532]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006d88:	e001      	b.n	8006d8e <HAL_I2S_DMAStop+0x126>
 8006d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d92:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a7e      	ldr	r2, [pc, #504]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d101      	bne.n	8006da6 <HAL_I2S_DMAStop+0x13e>
 8006da2:	4b7e      	ldr	r3, [pc, #504]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006da4:	e001      	b.n	8006daa <HAL_I2S_DMAStop+0x142>
 8006da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a79      	ldr	r2, [pc, #484]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d101      	bne.n	8006dbc <HAL_I2S_DMAStop+0x154>
 8006db8:	4b78      	ldr	r3, [pc, #480]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006dba:	e001      	b.n	8006dc0 <HAL_I2S_DMAStop+0x158>
 8006dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a73      	ldr	r2, [pc, #460]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d101      	bne.n	8006dd4 <HAL_I2S_DMAStop+0x16c>
 8006dd0:	4b72      	ldr	r3, [pc, #456]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006dd2:	e001      	b.n	8006dd8 <HAL_I2S_DMAStop+0x170>
 8006dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	496e      	ldr	r1, [pc, #440]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006de0:	428b      	cmp	r3, r1
 8006de2:	d101      	bne.n	8006de8 <HAL_I2S_DMAStop+0x180>
 8006de4:	4b6d      	ldr	r3, [pc, #436]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006de6:	e001      	b.n	8006dec <HAL_I2S_DMAStop+0x184>
 8006de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10c      	bne.n	8006e14 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006e12:	e0fa      	b.n	800700a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a5f      	ldr	r2, [pc, #380]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d101      	bne.n	8006e22 <HAL_I2S_DMAStop+0x1ba>
 8006e1e:	4b5f      	ldr	r3, [pc, #380]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006e20:	e001      	b.n	8006e26 <HAL_I2S_DMAStop+0x1be>
 8006e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e26:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006e28:	e0ef      	b.n	800700a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e32:	d005      	beq.n	8006e40 <HAL_I2S_DMAStop+0x1d8>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3c:	f040 80e5 	bne.w	800700a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00f      	beq.n	8006e68 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe ff09 	bl	8005c64 <HAL_DMA_Abort>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	f043 0208 	orr.w	r2, r3, #8
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	f040 809a 	bne.w	8006faa <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00f      	beq.n	8006e9e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe feee 	bl	8005c64 <HAL_DMA_Abort>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	f043 0208 	orr.w	r2, r3, #8
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006e9e:	f7fe fc1f 	bl	80056e0 <HAL_GetTick>
 8006ea2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006ea4:	e012      	b.n	8006ecc <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006ea6:	f7fe fc1b 	bl	80056e0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b64      	cmp	r3, #100	; 0x64
 8006eb2:	d90b      	bls.n	8006ecc <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb8:	f043 0201 	orr.w	r2, r3, #1
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a31      	ldr	r2, [pc, #196]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d101      	bne.n	8006eda <HAL_I2S_DMAStop+0x272>
 8006ed6:	4b31      	ldr	r3, [pc, #196]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006ed8:	e001      	b.n	8006ede <HAL_I2S_DMAStop+0x276>
 8006eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d1de      	bne.n	8006ea6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006ee8:	e012      	b.n	8006f10 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006eea:	f7fe fbf9 	bl	80056e0 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b64      	cmp	r3, #100	; 0x64
 8006ef6:	d90b      	bls.n	8006f10 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efc:	f043 0201 	orr.w	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a20      	ldr	r2, [pc, #128]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d101      	bne.n	8006f1e <HAL_I2S_DMAStop+0x2b6>
 8006f1a:	4b20      	ldr	r3, [pc, #128]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006f1c:	e001      	b.n	8006f22 <HAL_I2S_DMAStop+0x2ba>
 8006f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f28:	2b80      	cmp	r3, #128	; 0x80
 8006f2a:	d0de      	beq.n	8006eea <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a19      	ldr	r2, [pc, #100]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d101      	bne.n	8006f3a <HAL_I2S_DMAStop+0x2d2>
 8006f36:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006f38:	e001      	b.n	8006f3e <HAL_I2S_DMAStop+0x2d6>
 8006f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4914      	ldr	r1, [pc, #80]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006f46:	428b      	cmp	r3, r1
 8006f48:	d101      	bne.n	8006f4e <HAL_I2S_DMAStop+0x2e6>
 8006f4a:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006f4c:	e001      	b.n	8006f52 <HAL_I2S_DMAStop+0x2ea>
 8006f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f56:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a0d      	ldr	r2, [pc, #52]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d101      	bne.n	8006f6a <HAL_I2S_DMAStop+0x302>
 8006f66:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006f68:	e001      	b.n	8006f6e <HAL_I2S_DMAStop+0x306>
 8006f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a07      	ldr	r2, [pc, #28]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2S_DMAStop+0x31a>
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006f80:	e001      	b.n	8006f86 <HAL_I2S_DMAStop+0x31e>
 8006f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4902      	ldr	r1, [pc, #8]	; (8006f98 <HAL_I2S_DMAStop+0x330>)
 8006f8e:	428b      	cmp	r3, r1
 8006f90:	d106      	bne.n	8006fa0 <HAL_I2S_DMAStop+0x338>
 8006f92:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <HAL_I2S_DMAStop+0x334>)
 8006f94:	e006      	b.n	8006fa4 <HAL_I2S_DMAStop+0x33c>
 8006f96:	bf00      	nop
 8006f98:	40003800 	.word	0x40003800
 8006f9c:	40003400 	.word	0x40003400
 8006fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fa4:	f022 0202 	bic.w	r2, r2, #2
 8006fa8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	60bb      	str	r3, [r7, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe8:	d10c      	bne.n	8007004 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	77fb      	strb	r3, [r7, #31]
 8007002:	e002      	b.n	800700a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8007012:	7ffb      	ldrb	r3, [r7, #31]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3720      	adds	r7, #32
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702a:	b2db      	uxtb	r3, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10e      	bne.n	800706c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7fb fb1b 	bl	80026a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7fb fb17 	bl	80026bc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0203 	bic.w	r2, r2, #3
 80070b2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070cc:	f043 0208 	orr.w	r2, r3, #8
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7fb fca9 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	881a      	ldrh	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	1c9a      	adds	r2, r3, #2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10e      	bne.n	8007136 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007126:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7fb f9eb 	bl	800250c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	b292      	uxth	r2, r2
 8007152:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	1c9a      	adds	r2, r3, #2
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10e      	bne.n	8007194 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007184:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb fa8a 	bl	80026a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d13a      	bne.n	800722e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d109      	bne.n	80071d6 <I2S_IRQHandler+0x3a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071cc:	2b40      	cmp	r3, #64	; 0x40
 80071ce:	d102      	bne.n	80071d6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff ffb4 	bl	800713e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071dc:	2b40      	cmp	r3, #64	; 0x40
 80071de:	d126      	bne.n	800722e <I2S_IRQHandler+0x92>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d11f      	bne.n	800722e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071fc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007220:	f043 0202 	orr.w	r2, r3, #2
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fb fbff 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b03      	cmp	r3, #3
 8007238:	d136      	bne.n	80072a8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b02      	cmp	r3, #2
 8007242:	d109      	bne.n	8007258 <I2S_IRQHandler+0xbc>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d102      	bne.n	8007258 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff ff45 	bl	80070e2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b08      	cmp	r3, #8
 8007260:	d122      	bne.n	80072a8 <I2S_IRQHandler+0x10c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b20      	cmp	r3, #32
 800726e:	d11b      	bne.n	80072a8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800727e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729a:	f043 0204 	orr.w	r2, r3, #4
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb fbc2 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072a8:	bf00      	nop
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	4613      	mov	r3, r2
 80072be:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80072c0:	f7fe fa0e 	bl	80056e0 <HAL_GetTick>
 80072c4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80072c6:	e018      	b.n	80072fa <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ce:	d014      	beq.n	80072fa <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80072d0:	f7fe fa06 	bl	80056e0 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d902      	bls.n	80072e6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e00f      	b.n	800731a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4013      	ands	r3, r2
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	bf0c      	ite	eq
 800730a:	2301      	moveq	r3, #1
 800730c:	2300      	movne	r3, #0
 800730e:	b2db      	uxtb	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	429a      	cmp	r2, r3
 8007316:	d1d7      	bne.n	80072c8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4aa2      	ldr	r2, [pc, #648]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d101      	bne.n	8007342 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800733e:	4ba2      	ldr	r3, [pc, #648]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007340:	e001      	b.n	8007346 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007342:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a9b      	ldr	r2, [pc, #620]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d101      	bne.n	8007360 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800735c:	4b9a      	ldr	r3, [pc, #616]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800735e:	e001      	b.n	8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007370:	d004      	beq.n	800737c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f040 8099 	bne.w	80074ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b02      	cmp	r3, #2
 8007384:	d107      	bne.n	8007396 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f925 	bl	80075e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b01      	cmp	r3, #1
 800739e:	d107      	bne.n	80073b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f9c8 	bl	8007740 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	d13a      	bne.n	8007430 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d035      	beq.n	8007430 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a7e      	ldr	r2, [pc, #504]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d101      	bne.n	80073d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80073ce:	4b7e      	ldr	r3, [pc, #504]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073d0:	e001      	b.n	80073d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80073d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4979      	ldr	r1, [pc, #484]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073de:	428b      	cmp	r3, r1
 80073e0:	d101      	bne.n	80073e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80073e2:	4b79      	ldr	r3, [pc, #484]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073e4:	e001      	b.n	80073ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80073e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	f043 0202 	orr.w	r2, r3, #2
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7fb fafe 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b08      	cmp	r3, #8
 8007438:	f040 80be 	bne.w	80075b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 80b8 	beq.w	80075b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007456:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a59      	ldr	r2, [pc, #356]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d101      	bne.n	8007466 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007462:	4b59      	ldr	r3, [pc, #356]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007464:	e001      	b.n	800746a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4954      	ldr	r1, [pc, #336]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007472:	428b      	cmp	r3, r1
 8007474:	d101      	bne.n	800747a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007476:	4b54      	ldr	r3, [pc, #336]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007478:	e001      	b.n	800747e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800747a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800747e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007482:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007484:	2300      	movs	r3, #0
 8007486:	60bb      	str	r3, [r7, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	f043 0204 	orr.w	r2, r3, #4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb fac0 	bl	8002a2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074ac:	e084      	b.n	80075b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d107      	bne.n	80074c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f8be 	bl	8007644 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d107      	bne.n	80074e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8fd 	bl	80076dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d12f      	bne.n	800754c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d02a      	beq.n	800754c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007504:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2e      	ldr	r2, [pc, #184]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d101      	bne.n	8007514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007510:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007512:	e001      	b.n	8007518 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4929      	ldr	r1, [pc, #164]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007520:	428b      	cmp	r3, r1
 8007522:	d101      	bne.n	8007528 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007524:	4b28      	ldr	r3, [pc, #160]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007526:	e001      	b.n	800752c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800752c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007530:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	f043 0202 	orr.w	r2, r3, #2
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fb fa70 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b08      	cmp	r3, #8
 8007554:	d131      	bne.n	80075ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d02c      	beq.n	80075ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a17      	ldr	r2, [pc, #92]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d101      	bne.n	800756e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800756a:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800756c:	e001      	b.n	8007572 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800756e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4912      	ldr	r1, [pc, #72]	; (80075c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800757a:	428b      	cmp	r3, r1
 800757c:	d101      	bne.n	8007582 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007580:	e001      	b.n	8007586 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007586:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800758a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800759a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a8:	f043 0204 	orr.w	r2, r3, #4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7fb fa3b 	bl	8002a2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075b6:	e000      	b.n	80075ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80075b8:	bf00      	nop
}
 80075ba:	bf00      	nop
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40003800 	.word	0x40003800
 80075c8:	40003400 	.word	0x40003400

080075cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	1c99      	adds	r1, r3, #2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6251      	str	r1, [r2, #36]	; 0x24
 80075f2:	881a      	ldrh	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d113      	bne.n	800763a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007620:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ffc9 	bl	80075cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	1c99      	adds	r1, r3, #2
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6251      	str	r1, [r2, #36]	; 0x24
 8007656:	8819      	ldrh	r1, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1d      	ldr	r2, [pc, #116]	; (80076d4 <I2SEx_TxISR_I2SExt+0x90>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d101      	bne.n	8007666 <I2SEx_TxISR_I2SExt+0x22>
 8007662:	4b1d      	ldr	r3, [pc, #116]	; (80076d8 <I2SEx_TxISR_I2SExt+0x94>)
 8007664:	e001      	b.n	800766a <I2SEx_TxISR_I2SExt+0x26>
 8007666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800766a:	460a      	mov	r2, r1
 800766c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d121      	bne.n	80076ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a12      	ldr	r2, [pc, #72]	; (80076d4 <I2SEx_TxISR_I2SExt+0x90>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d101      	bne.n	8007694 <I2SEx_TxISR_I2SExt+0x50>
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <I2SEx_TxISR_I2SExt+0x94>)
 8007692:	e001      	b.n	8007698 <I2SEx_TxISR_I2SExt+0x54>
 8007694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	490d      	ldr	r1, [pc, #52]	; (80076d4 <I2SEx_TxISR_I2SExt+0x90>)
 80076a0:	428b      	cmp	r3, r1
 80076a2:	d101      	bne.n	80076a8 <I2SEx_TxISR_I2SExt+0x64>
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <I2SEx_TxISR_I2SExt+0x94>)
 80076a6:	e001      	b.n	80076ac <I2SEx_TxISR_I2SExt+0x68>
 80076a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff81 	bl	80075cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40003800 	.word	0x40003800
 80076d8:	40003400 	.word	0x40003400

080076dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68d8      	ldr	r0, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ee:	1c99      	adds	r1, r3, #2
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80076f4:	b282      	uxth	r2, r0
 80076f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d113      	bne.n	8007738 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800771e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff4a 	bl	80075cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a20      	ldr	r2, [pc, #128]	; (80077d0 <I2SEx_RxISR_I2SExt+0x90>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d101      	bne.n	8007756 <I2SEx_RxISR_I2SExt+0x16>
 8007752:	4b20      	ldr	r3, [pc, #128]	; (80077d4 <I2SEx_RxISR_I2SExt+0x94>)
 8007754:	e001      	b.n	800775a <I2SEx_RxISR_I2SExt+0x1a>
 8007756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800775a:	68d8      	ldr	r0, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	1c99      	adds	r1, r3, #2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007766:	b282      	uxth	r2, r0
 8007768:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d121      	bne.n	80077c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a12      	ldr	r2, [pc, #72]	; (80077d0 <I2SEx_RxISR_I2SExt+0x90>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d101      	bne.n	8007790 <I2SEx_RxISR_I2SExt+0x50>
 800778c:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <I2SEx_RxISR_I2SExt+0x94>)
 800778e:	e001      	b.n	8007794 <I2SEx_RxISR_I2SExt+0x54>
 8007790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	490d      	ldr	r1, [pc, #52]	; (80077d0 <I2SEx_RxISR_I2SExt+0x90>)
 800779c:	428b      	cmp	r3, r1
 800779e:	d101      	bne.n	80077a4 <I2SEx_RxISR_I2SExt+0x64>
 80077a0:	4b0c      	ldr	r3, [pc, #48]	; (80077d4 <I2SEx_RxISR_I2SExt+0x94>)
 80077a2:	e001      	b.n	80077a8 <I2SEx_RxISR_I2SExt+0x68>
 80077a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff ff03 	bl	80075cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40003800 	.word	0x40003800
 80077d4:	40003400 	.word	0x40003400

080077d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e264      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d075      	beq.n	80078e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077f6:	4ba3      	ldr	r3, [pc, #652]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 030c 	and.w	r3, r3, #12
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d00c      	beq.n	800781c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007802:	4ba0      	ldr	r3, [pc, #640]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800780a:	2b08      	cmp	r3, #8
 800780c:	d112      	bne.n	8007834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800780e:	4b9d      	ldr	r3, [pc, #628]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800781a:	d10b      	bne.n	8007834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800781c:	4b99      	ldr	r3, [pc, #612]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d05b      	beq.n	80078e0 <HAL_RCC_OscConfig+0x108>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d157      	bne.n	80078e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e23f      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783c:	d106      	bne.n	800784c <HAL_RCC_OscConfig+0x74>
 800783e:	4b91      	ldr	r3, [pc, #580]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a90      	ldr	r2, [pc, #576]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	e01d      	b.n	8007888 <HAL_RCC_OscConfig+0xb0>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007854:	d10c      	bne.n	8007870 <HAL_RCC_OscConfig+0x98>
 8007856:	4b8b      	ldr	r3, [pc, #556]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a8a      	ldr	r2, [pc, #552]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 800785c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	4b88      	ldr	r3, [pc, #544]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a87      	ldr	r2, [pc, #540]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	e00b      	b.n	8007888 <HAL_RCC_OscConfig+0xb0>
 8007870:	4b84      	ldr	r3, [pc, #528]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a83      	ldr	r2, [pc, #524]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	4b81      	ldr	r3, [pc, #516]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a80      	ldr	r2, [pc, #512]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d013      	beq.n	80078b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007890:	f7fd ff26 	bl	80056e0 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007898:	f7fd ff22 	bl	80056e0 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b64      	cmp	r3, #100	; 0x64
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e204      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078aa:	4b76      	ldr	r3, [pc, #472]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f0      	beq.n	8007898 <HAL_RCC_OscConfig+0xc0>
 80078b6:	e014      	b.n	80078e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b8:	f7fd ff12 	bl	80056e0 <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c0:	f7fd ff0e 	bl	80056e0 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b64      	cmp	r3, #100	; 0x64
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e1f0      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078d2:	4b6c      	ldr	r3, [pc, #432]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1f0      	bne.n	80078c0 <HAL_RCC_OscConfig+0xe8>
 80078de:	e000      	b.n	80078e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d063      	beq.n	80079b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ee:	4b65      	ldr	r3, [pc, #404]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 030c 	and.w	r3, r3, #12
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00b      	beq.n	8007912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078fa:	4b62      	ldr	r3, [pc, #392]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007902:	2b08      	cmp	r3, #8
 8007904:	d11c      	bne.n	8007940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007906:	4b5f      	ldr	r3, [pc, #380]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d116      	bne.n	8007940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007912:	4b5c      	ldr	r3, [pc, #368]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d005      	beq.n	800792a <HAL_RCC_OscConfig+0x152>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d001      	beq.n	800792a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e1c4      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800792a:	4b56      	ldr	r3, [pc, #344]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	4952      	ldr	r1, [pc, #328]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 800793a:	4313      	orrs	r3, r2
 800793c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800793e:	e03a      	b.n	80079b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d020      	beq.n	800798a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007948:	4b4f      	ldr	r3, [pc, #316]	; (8007a88 <HAL_RCC_OscConfig+0x2b0>)
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794e:	f7fd fec7 	bl	80056e0 <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007954:	e008      	b.n	8007968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007956:	f7fd fec3 	bl	80056e0 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e1a5      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007968:	4b46      	ldr	r3, [pc, #280]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0f0      	beq.n	8007956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007974:	4b43      	ldr	r3, [pc, #268]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	4940      	ldr	r1, [pc, #256]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007984:	4313      	orrs	r3, r2
 8007986:	600b      	str	r3, [r1, #0]
 8007988:	e015      	b.n	80079b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800798a:	4b3f      	ldr	r3, [pc, #252]	; (8007a88 <HAL_RCC_OscConfig+0x2b0>)
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fd fea6 	bl	80056e0 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007998:	f7fd fea2 	bl	80056e0 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e184      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079aa:	4b36      	ldr	r3, [pc, #216]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f0      	bne.n	8007998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d030      	beq.n	8007a24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d016      	beq.n	80079f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079ca:	4b30      	ldr	r3, [pc, #192]	; (8007a8c <HAL_RCC_OscConfig+0x2b4>)
 80079cc:	2201      	movs	r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d0:	f7fd fe86 	bl	80056e0 <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079d8:	f7fd fe82 	bl	80056e0 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e164      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ea:	4b26      	ldr	r3, [pc, #152]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 80079ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0f0      	beq.n	80079d8 <HAL_RCC_OscConfig+0x200>
 80079f6:	e015      	b.n	8007a24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079f8:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <HAL_RCC_OscConfig+0x2b4>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079fe:	f7fd fe6f 	bl	80056e0 <HAL_GetTick>
 8007a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a04:	e008      	b.n	8007a18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a06:	f7fd fe6b 	bl	80056e0 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e14d      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a18:	4b1a      	ldr	r3, [pc, #104]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1f0      	bne.n	8007a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80a0 	beq.w	8007b72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10f      	bne.n	8007a62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a42:	2300      	movs	r3, #0
 8007a44:	60bb      	str	r3, [r7, #8]
 8007a46:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	4a0e      	ldr	r2, [pc, #56]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a50:	6413      	str	r3, [r2, #64]	; 0x40
 8007a52:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <HAL_RCC_OscConfig+0x2ac>)
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5a:	60bb      	str	r3, [r7, #8]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a62:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <HAL_RCC_OscConfig+0x2b8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d121      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a6e:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <HAL_RCC_OscConfig+0x2b8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a07      	ldr	r2, [pc, #28]	; (8007a90 <HAL_RCC_OscConfig+0x2b8>)
 8007a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a7a:	f7fd fe31 	bl	80056e0 <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a80:	e011      	b.n	8007aa6 <HAL_RCC_OscConfig+0x2ce>
 8007a82:	bf00      	nop
 8007a84:	40023800 	.word	0x40023800
 8007a88:	42470000 	.word	0x42470000
 8007a8c:	42470e80 	.word	0x42470e80
 8007a90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a94:	f7fd fe24 	bl	80056e0 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e106      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aa6:	4b85      	ldr	r3, [pc, #532]	; (8007cbc <HAL_RCC_OscConfig+0x4e4>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0f0      	beq.n	8007a94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d106      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x2f0>
 8007aba:	4b81      	ldr	r3, [pc, #516]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	4a80      	ldr	r2, [pc, #512]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007ac0:	f043 0301 	orr.w	r3, r3, #1
 8007ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac6:	e01c      	b.n	8007b02 <HAL_RCC_OscConfig+0x32a>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	2b05      	cmp	r3, #5
 8007ace:	d10c      	bne.n	8007aea <HAL_RCC_OscConfig+0x312>
 8007ad0:	4b7b      	ldr	r3, [pc, #492]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	4a7a      	ldr	r2, [pc, #488]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007ad6:	f043 0304 	orr.w	r3, r3, #4
 8007ada:	6713      	str	r3, [r2, #112]	; 0x70
 8007adc:	4b78      	ldr	r3, [pc, #480]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae0:	4a77      	ldr	r2, [pc, #476]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae8:	e00b      	b.n	8007b02 <HAL_RCC_OscConfig+0x32a>
 8007aea:	4b75      	ldr	r3, [pc, #468]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	4a74      	ldr	r2, [pc, #464]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	6713      	str	r3, [r2, #112]	; 0x70
 8007af6:	4b72      	ldr	r3, [pc, #456]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	4a71      	ldr	r2, [pc, #452]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007afc:	f023 0304 	bic.w	r3, r3, #4
 8007b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d015      	beq.n	8007b36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0a:	f7fd fde9 	bl	80056e0 <HAL_GetTick>
 8007b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b10:	e00a      	b.n	8007b28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b12:	f7fd fde5 	bl	80056e0 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e0c5      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b28:	4b65      	ldr	r3, [pc, #404]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0ee      	beq.n	8007b12 <HAL_RCC_OscConfig+0x33a>
 8007b34:	e014      	b.n	8007b60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b36:	f7fd fdd3 	bl	80056e0 <HAL_GetTick>
 8007b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b3c:	e00a      	b.n	8007b54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b3e:	f7fd fdcf 	bl	80056e0 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e0af      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b54:	4b5a      	ldr	r3, [pc, #360]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1ee      	bne.n	8007b3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d105      	bne.n	8007b72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b66:	4b56      	ldr	r3, [pc, #344]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	4a55      	ldr	r2, [pc, #340]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 809b 	beq.w	8007cb2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b7c:	4b50      	ldr	r3, [pc, #320]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 030c 	and.w	r3, r3, #12
 8007b84:	2b08      	cmp	r3, #8
 8007b86:	d05c      	beq.n	8007c42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d141      	bne.n	8007c14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b90:	4b4c      	ldr	r3, [pc, #304]	; (8007cc4 <HAL_RCC_OscConfig+0x4ec>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b96:	f7fd fda3 	bl	80056e0 <HAL_GetTick>
 8007b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b9c:	e008      	b.n	8007bb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b9e:	f7fd fd9f 	bl	80056e0 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e081      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bb0:	4b43      	ldr	r3, [pc, #268]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f0      	bne.n	8007b9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69da      	ldr	r2, [r3, #28]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	019b      	lsls	r3, r3, #6
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	085b      	lsrs	r3, r3, #1
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	061b      	lsls	r3, r3, #24
 8007be0:	4937      	ldr	r1, [pc, #220]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007be6:	4b37      	ldr	r3, [pc, #220]	; (8007cc4 <HAL_RCC_OscConfig+0x4ec>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bec:	f7fd fd78 	bl	80056e0 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf4:	f7fd fd74 	bl	80056e0 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e056      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c06:	4b2e      	ldr	r3, [pc, #184]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0f0      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x41c>
 8007c12:	e04e      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c14:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <HAL_RCC_OscConfig+0x4ec>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c1a:	f7fd fd61 	bl	80056e0 <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c20:	e008      	b.n	8007c34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c22:	f7fd fd5d 	bl	80056e0 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e03f      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c34:	4b22      	ldr	r3, [pc, #136]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1f0      	bne.n	8007c22 <HAL_RCC_OscConfig+0x44a>
 8007c40:	e037      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e032      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c4e:	4b1c      	ldr	r3, [pc, #112]	; (8007cc0 <HAL_RCC_OscConfig+0x4e8>)
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d028      	beq.n	8007cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d121      	bne.n	8007cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d11a      	bne.n	8007cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c7e:	4013      	ands	r3, r2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d111      	bne.n	8007cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	085b      	lsrs	r3, r3, #1
 8007c96:	3b01      	subs	r3, #1
 8007c98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d107      	bne.n	8007cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d001      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	40007000 	.word	0x40007000
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	42470060 	.word	0x42470060

08007cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e0cc      	b.n	8007e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cdc:	4b68      	ldr	r3, [pc, #416]	; (8007e80 <HAL_RCC_ClockConfig+0x1b8>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d90c      	bls.n	8007d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cea:	4b65      	ldr	r3, [pc, #404]	; (8007e80 <HAL_RCC_ClockConfig+0x1b8>)
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf2:	4b63      	ldr	r3, [pc, #396]	; (8007e80 <HAL_RCC_ClockConfig+0x1b8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d001      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e0b8      	b.n	8007e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d020      	beq.n	8007d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d1c:	4b59      	ldr	r3, [pc, #356]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	4a58      	ldr	r2, [pc, #352]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d34:	4b53      	ldr	r3, [pc, #332]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	4a52      	ldr	r2, [pc, #328]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d40:	4b50      	ldr	r3, [pc, #320]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	494d      	ldr	r1, [pc, #308]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d044      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d107      	bne.n	8007d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	4b47      	ldr	r3, [pc, #284]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d119      	bne.n	8007da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e07f      	b.n	8007e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d003      	beq.n	8007d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d107      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d86:	4b3f      	ldr	r3, [pc, #252]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e06f      	b.n	8007e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d96:	4b3b      	ldr	r3, [pc, #236]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e067      	b.n	8007e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007da6:	4b37      	ldr	r3, [pc, #220]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f023 0203 	bic.w	r2, r3, #3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4934      	ldr	r1, [pc, #208]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007db8:	f7fd fc92 	bl	80056e0 <HAL_GetTick>
 8007dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dbe:	e00a      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dc0:	f7fd fc8e 	bl	80056e0 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e04f      	b.n	8007e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd6:	4b2b      	ldr	r3, [pc, #172]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 020c 	and.w	r2, r3, #12
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d1eb      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007de8:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <HAL_RCC_ClockConfig+0x1b8>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d20c      	bcs.n	8007e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df6:	4b22      	ldr	r3, [pc, #136]	; (8007e80 <HAL_RCC_ClockConfig+0x1b8>)
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dfe:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <HAL_RCC_ClockConfig+0x1b8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d001      	beq.n	8007e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e032      	b.n	8007e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e1c:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	4916      	ldr	r1, [pc, #88]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e3a:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	490e      	ldr	r1, [pc, #56]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e4e:	f000 f821 	bl	8007e94 <HAL_RCC_GetSysClockFreq>
 8007e52:	4602      	mov	r2, r0
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <HAL_RCC_ClockConfig+0x1bc>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	091b      	lsrs	r3, r3, #4
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	490a      	ldr	r1, [pc, #40]	; (8007e88 <HAL_RCC_ClockConfig+0x1c0>)
 8007e60:	5ccb      	ldrb	r3, [r1, r3]
 8007e62:	fa22 f303 	lsr.w	r3, r2, r3
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <HAL_RCC_ClockConfig+0x1c4>)
 8007e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <HAL_RCC_ClockConfig+0x1c8>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fd fbf2 	bl	8005658 <HAL_InitTick>

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	40023c00 	.word	0x40023c00
 8007e84:	40023800 	.word	0x40023800
 8007e88:	08016b5c 	.word	0x08016b5c
 8007e8c:	20000498 	.word	0x20000498
 8007e90:	200004b0 	.word	0x200004b0

08007e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	607b      	str	r3, [r7, #4]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eac:	4b67      	ldr	r3, [pc, #412]	; (800804c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f003 030c 	and.w	r3, r3, #12
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d00d      	beq.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	f200 80bd 	bhi.w	8008038 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d003      	beq.n	8007ece <HAL_RCC_GetSysClockFreq+0x3a>
 8007ec6:	e0b7      	b.n	8008038 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ec8:	4b61      	ldr	r3, [pc, #388]	; (8008050 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007eca:	60bb      	str	r3, [r7, #8]
       break;
 8007ecc:	e0b7      	b.n	800803e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ece:	4b60      	ldr	r3, [pc, #384]	; (8008050 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007ed0:	60bb      	str	r3, [r7, #8]
      break;
 8007ed2:	e0b4      	b.n	800803e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ed4:	4b5d      	ldr	r3, [pc, #372]	; (800804c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007edc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ede:	4b5b      	ldr	r3, [pc, #364]	; (800804c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d04d      	beq.n	8007f86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eea:	4b58      	ldr	r3, [pc, #352]	; (800804c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	099b      	lsrs	r3, r3, #6
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f04f 0300 	mov.w	r3, #0
 8007ef6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007efa:	f04f 0100 	mov.w	r1, #0
 8007efe:	ea02 0800 	and.w	r8, r2, r0
 8007f02:	ea03 0901 	and.w	r9, r3, r1
 8007f06:	4640      	mov	r0, r8
 8007f08:	4649      	mov	r1, r9
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	014b      	lsls	r3, r1, #5
 8007f14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f18:	0142      	lsls	r2, r0, #5
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	ebb0 0008 	subs.w	r0, r0, r8
 8007f22:	eb61 0109 	sbc.w	r1, r1, r9
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	f04f 0300 	mov.w	r3, #0
 8007f2e:	018b      	lsls	r3, r1, #6
 8007f30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f34:	0182      	lsls	r2, r0, #6
 8007f36:	1a12      	subs	r2, r2, r0
 8007f38:	eb63 0301 	sbc.w	r3, r3, r1
 8007f3c:	f04f 0000 	mov.w	r0, #0
 8007f40:	f04f 0100 	mov.w	r1, #0
 8007f44:	00d9      	lsls	r1, r3, #3
 8007f46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f4a:	00d0      	lsls	r0, r2, #3
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	eb12 0208 	adds.w	r2, r2, r8
 8007f54:	eb43 0309 	adc.w	r3, r3, r9
 8007f58:	f04f 0000 	mov.w	r0, #0
 8007f5c:	f04f 0100 	mov.w	r1, #0
 8007f60:	0299      	lsls	r1, r3, #10
 8007f62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f66:	0290      	lsls	r0, r2, #10
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4619      	mov	r1, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	f7f8 fe96 	bl	8000ca8 <__aeabi_uldivmod>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4613      	mov	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e04a      	b.n	800801c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f86:	4b31      	ldr	r3, [pc, #196]	; (800804c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	099b      	lsrs	r3, r3, #6
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f96:	f04f 0100 	mov.w	r1, #0
 8007f9a:	ea02 0400 	and.w	r4, r2, r0
 8007f9e:	ea03 0501 	and.w	r5, r3, r1
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	f04f 0300 	mov.w	r3, #0
 8007fae:	014b      	lsls	r3, r1, #5
 8007fb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007fb4:	0142      	lsls	r2, r0, #5
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	4619      	mov	r1, r3
 8007fba:	1b00      	subs	r0, r0, r4
 8007fbc:	eb61 0105 	sbc.w	r1, r1, r5
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	018b      	lsls	r3, r1, #6
 8007fca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007fce:	0182      	lsls	r2, r0, #6
 8007fd0:	1a12      	subs	r2, r2, r0
 8007fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8007fd6:	f04f 0000 	mov.w	r0, #0
 8007fda:	f04f 0100 	mov.w	r1, #0
 8007fde:	00d9      	lsls	r1, r3, #3
 8007fe0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fe4:	00d0      	lsls	r0, r2, #3
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	1912      	adds	r2, r2, r4
 8007fec:	eb45 0303 	adc.w	r3, r5, r3
 8007ff0:	f04f 0000 	mov.w	r0, #0
 8007ff4:	f04f 0100 	mov.w	r1, #0
 8007ff8:	0299      	lsls	r1, r3, #10
 8007ffa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007ffe:	0290      	lsls	r0, r2, #10
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4610      	mov	r0, r2
 8008006:	4619      	mov	r1, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	461a      	mov	r2, r3
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	f7f8 fe4a 	bl	8000ca8 <__aeabi_uldivmod>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4613      	mov	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	0c1b      	lsrs	r3, r3, #16
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	3301      	adds	r3, #1
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	fbb2 f3f3 	udiv	r3, r2, r3
 8008034:	60bb      	str	r3, [r7, #8]
      break;
 8008036:	e002      	b.n	800803e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800803a:	60bb      	str	r3, [r7, #8]
      break;
 800803c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800803e:	68bb      	ldr	r3, [r7, #8]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800804a:	bf00      	nop
 800804c:	40023800 	.word	0x40023800
 8008050:	00f42400 	.word	0x00f42400

08008054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <HAL_RCC_GetHCLKFreq+0x14>)
 800805a:	681b      	ldr	r3, [r3, #0]
}
 800805c:	4618      	mov	r0, r3
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000498 	.word	0x20000498

0800806c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008070:	f7ff fff0 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 8008074:	4602      	mov	r2, r0
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	0a9b      	lsrs	r3, r3, #10
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	4903      	ldr	r1, [pc, #12]	; (8008090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008082:	5ccb      	ldrb	r3, [r1, r3]
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008088:	4618      	mov	r0, r3
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40023800 	.word	0x40023800
 8008090:	08016b6c 	.word	0x08016b6c

08008094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008098:	f7ff ffdc 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 800809c:	4602      	mov	r2, r0
 800809e:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	0b5b      	lsrs	r3, r3, #13
 80080a4:	f003 0307 	and.w	r3, r3, #7
 80080a8:	4903      	ldr	r1, [pc, #12]	; (80080b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080aa:	5ccb      	ldrb	r3, [r1, r3]
 80080ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	40023800 	.word	0x40023800
 80080b8:	08016b6c 	.word	0x08016b6c

080080bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d035      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80080e4:	4b62      	ldr	r3, [pc, #392]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080ea:	f7fd faf9 	bl	80056e0 <HAL_GetTick>
 80080ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080f0:	e008      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080f2:	f7fd faf5 	bl	80056e0 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e0b0      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008104:	4b5b      	ldr	r3, [pc, #364]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f0      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	019a      	lsls	r2, r3, #6
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	071b      	lsls	r3, r3, #28
 800811c:	4955      	ldr	r1, [pc, #340]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008124:	4b52      	ldr	r3, [pc, #328]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008126:	2201      	movs	r2, #1
 8008128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800812a:	f7fd fad9 	bl	80056e0 <HAL_GetTick>
 800812e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008130:	e008      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008132:	f7fd fad5 	bl	80056e0 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e090      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008144:	4b4b      	ldr	r3, [pc, #300]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f0      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8083 	beq.w	8008264 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	4b44      	ldr	r3, [pc, #272]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	4a43      	ldr	r2, [pc, #268]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800816c:	6413      	str	r3, [r2, #64]	; 0x40
 800816e:	4b41      	ldr	r3, [pc, #260]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800817a:	4b3f      	ldr	r3, [pc, #252]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a3e      	ldr	r2, [pc, #248]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008184:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008186:	f7fd faab 	bl	80056e0 <HAL_GetTick>
 800818a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800818c:	e008      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800818e:	f7fd faa7 	bl	80056e0 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d901      	bls.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e062      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081a0:	4b35      	ldr	r3, [pc, #212]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0f0      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081ac:	4b31      	ldr	r3, [pc, #196]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d02f      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d028      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081ca:	4b2a      	ldr	r3, [pc, #168]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80081d4:	4b29      	ldr	r3, [pc, #164]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80081d6:	2201      	movs	r2, #1
 80081d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80081da:	4b28      	ldr	r3, [pc, #160]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80081e0:	4a24      	ldr	r2, [pc, #144]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80081e6:	4b23      	ldr	r3, [pc, #140]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d114      	bne.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80081f2:	f7fd fa75 	bl	80056e0 <HAL_GetTick>
 80081f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081f8:	e00a      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081fa:	f7fd fa71 	bl	80056e0 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f241 3288 	movw	r2, #5000	; 0x1388
 8008208:	4293      	cmp	r3, r2
 800820a:	d901      	bls.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e02a      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008210:	4b18      	ldr	r3, [pc, #96]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0ee      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008228:	d10d      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800822a:	4b12      	ldr	r3, [pc, #72]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800823a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800823e:	490d      	ldr	r1, [pc, #52]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008240:	4313      	orrs	r3, r2
 8008242:	608b      	str	r3, [r1, #8]
 8008244:	e005      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	4a0a      	ldr	r2, [pc, #40]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800824c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008250:	6093      	str	r3, [r2, #8]
 8008252:	4b08      	ldr	r3, [pc, #32]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008254:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800825e:	4905      	ldr	r1, [pc, #20]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008260:	4313      	orrs	r3, r2
 8008262:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	42470068 	.word	0x42470068
 8008274:	40023800 	.word	0x40023800
 8008278:	40007000 	.word	0x40007000
 800827c:	42470e40 	.word	0x42470e40

08008280 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2203      	movs	r2, #3
 800828c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800828e:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008294:	099b      	lsrs	r3, r3, #6
 8008296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800829e:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80082a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a4:	0f1b      	lsrs	r3, r3, #28
 80082a6:	f003 0207 	and.w	r2, r3, #7
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80082ae:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80082b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80082c8:	bf00      	nop
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	40023800 	.word	0x40023800

080082d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d13e      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80082f6:	4b23      	ldr	r3, [pc, #140]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d12f      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800830c:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800830e:	617b      	str	r3, [r7, #20]
          break;
 8008310:	e02f      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008312:	4b1c      	ldr	r3, [pc, #112]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800831a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800831e:	d108      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008320:	4b18      	ldr	r3, [pc, #96]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008328:	4a18      	ldr	r2, [pc, #96]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800832a:	fbb2 f3f3 	udiv	r3, r2, r3
 800832e:	613b      	str	r3, [r7, #16]
 8008330:	e007      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008332:	4b14      	ldr	r3, [pc, #80]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800833a:	4a14      	ldr	r2, [pc, #80]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800833c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008340:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008342:	4b10      	ldr	r3, [pc, #64]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008348:	099b      	lsrs	r3, r3, #6
 800834a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	fb02 f303 	mul.w	r3, r2, r3
 8008354:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800835c:	0f1b      	lsrs	r3, r3, #28
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	fbb2 f3f3 	udiv	r3, r2, r3
 8008368:	617b      	str	r3, [r7, #20]
          break;
 800836a:	e002      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]
          break;
 8008370:	bf00      	nop
        }
      }
      break;
 8008372:	bf00      	nop
    }
  }
  return frequency;
 8008374:	697b      	ldr	r3, [r7, #20]
}
 8008376:	4618      	mov	r0, r3
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	40023800 	.word	0x40023800
 8008388:	00bb8000 	.word	0x00bb8000
 800838c:	00f42400 	.word	0x00f42400

08008390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e07b      	b.n	800849a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d108      	bne.n	80083bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083b2:	d009      	beq.n	80083c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	61da      	str	r2, [r3, #28]
 80083ba:	e005      	b.n	80083c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f9 fe84 	bl	80020f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008410:	431a      	orrs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844c:	ea42 0103 	orr.w	r1, r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	0c1b      	lsrs	r3, r3, #16
 8008466:	f003 0104 	and.w	r1, r3, #4
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	f003 0210 	and.w	r2, r3, #16
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e03f      	b.n	8008534 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7f9 fe59 	bl	8002180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2224      	movs	r2, #36	; 0x24
 80084d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f928 	bl	800873c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691a      	ldr	r2, [r3, #16]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695a      	ldr	r2, [r3, #20]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800850a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800851a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	; 0x28
 8008540:	af02      	add	r7, sp, #8
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	4613      	mov	r3, r2
 800854a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b20      	cmp	r3, #32
 800855a:	d17c      	bne.n	8008656 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_UART_Transmit+0x2c>
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e075      	b.n	8008658 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_UART_Transmit+0x3e>
 8008576:	2302      	movs	r3, #2
 8008578:	e06e      	b.n	8008658 <HAL_UART_Transmit+0x11c>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2221      	movs	r2, #33	; 0x21
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008590:	f7fd f8a6 	bl	80056e0 <HAL_GetTick>
 8008594:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	88fa      	ldrh	r2, [r7, #6]
 800859a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	88fa      	ldrh	r2, [r7, #6]
 80085a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085aa:	d108      	bne.n	80085be <HAL_UART_Transmit+0x82>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80085b4:	2300      	movs	r3, #0
 80085b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	e003      	b.n	80085c6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80085ce:	e02a      	b.n	8008626 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	2180      	movs	r1, #128	; 0x80
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f840 	bl	8008660 <UART_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e036      	b.n	8008658 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	461a      	mov	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	3302      	adds	r3, #2
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	e007      	b.n	8008618 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	781a      	ldrb	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	3301      	adds	r3, #1
 8008616:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1cf      	bne.n	80085d0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2200      	movs	r2, #0
 8008638:	2140      	movs	r1, #64	; 0x40
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f810 	bl	8008660 <UART_WaitOnFlagUntilTimeout>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e006      	b.n	8008658 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	e000      	b.n	8008658 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008656:	2302      	movs	r3, #2
  }
}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b090      	sub	sp, #64	; 0x40
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	4613      	mov	r3, r2
 800866e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008670:	e050      	b.n	8008714 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008678:	d04c      	beq.n	8008714 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800867a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <UART_WaitOnFlagUntilTimeout+0x30>
 8008680:	f7fd f82e 	bl	80056e0 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800868c:	429a      	cmp	r2, r3
 800868e:	d241      	bcs.n	8008714 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	330c      	adds	r3, #12
 8008696:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	330c      	adds	r3, #12
 80086ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086b0:	637a      	str	r2, [r7, #52]	; 0x34
 80086b2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e5      	bne.n	8008690 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3314      	adds	r3, #20
 80086ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	613b      	str	r3, [r7, #16]
   return(result);
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f023 0301 	bic.w	r3, r3, #1
 80086da:	63bb      	str	r3, [r7, #56]	; 0x38
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3314      	adds	r3, #20
 80086e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086e4:	623a      	str	r2, [r7, #32]
 80086e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	69f9      	ldr	r1, [r7, #28]
 80086ea:	6a3a      	ldr	r2, [r7, #32]
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e5      	bne.n	80086c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e00f      	b.n	8008734 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4013      	ands	r3, r2
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	429a      	cmp	r2, r3
 8008722:	bf0c      	ite	eq
 8008724:	2301      	moveq	r3, #1
 8008726:	2300      	movne	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	429a      	cmp	r2, r3
 8008730:	d09f      	beq.n	8008672 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3740      	adds	r7, #64	; 0x40
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	b09f      	sub	sp, #124	; 0x7c
 8008742:	af00      	add	r7, sp, #0
 8008744:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008752:	68d9      	ldr	r1, [r3, #12]
 8008754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	ea40 0301 	orr.w	r3, r0, r1
 800875c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800875e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	431a      	orrs	r2, r3
 8008768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	431a      	orrs	r2, r3
 800876e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	4313      	orrs	r3, r2
 8008774:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008780:	f021 010c 	bic.w	r1, r1, #12
 8008784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800878a:	430b      	orrs	r3, r1
 800878c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879a:	6999      	ldr	r1, [r3, #24]
 800879c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	ea40 0301 	orr.w	r3, r0, r1
 80087a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4bc5      	ldr	r3, [pc, #788]	; (8008ac0 <UART_SetConfig+0x384>)
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d004      	beq.n	80087ba <UART_SetConfig+0x7e>
 80087b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	4bc3      	ldr	r3, [pc, #780]	; (8008ac4 <UART_SetConfig+0x388>)
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d103      	bne.n	80087c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087ba:	f7ff fc6b 	bl	8008094 <HAL_RCC_GetPCLK2Freq>
 80087be:	6778      	str	r0, [r7, #116]	; 0x74
 80087c0:	e002      	b.n	80087c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087c2:	f7ff fc53 	bl	800806c <HAL_RCC_GetPCLK1Freq>
 80087c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087d0:	f040 80b6 	bne.w	8008940 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d6:	461c      	mov	r4, r3
 80087d8:	f04f 0500 	mov.w	r5, #0
 80087dc:	4622      	mov	r2, r4
 80087de:	462b      	mov	r3, r5
 80087e0:	1891      	adds	r1, r2, r2
 80087e2:	6439      	str	r1, [r7, #64]	; 0x40
 80087e4:	415b      	adcs	r3, r3
 80087e6:	647b      	str	r3, [r7, #68]	; 0x44
 80087e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087ec:	1912      	adds	r2, r2, r4
 80087ee:	eb45 0303 	adc.w	r3, r5, r3
 80087f2:	f04f 0000 	mov.w	r0, #0
 80087f6:	f04f 0100 	mov.w	r1, #0
 80087fa:	00d9      	lsls	r1, r3, #3
 80087fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008800:	00d0      	lsls	r0, r2, #3
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	1911      	adds	r1, r2, r4
 8008808:	6639      	str	r1, [r7, #96]	; 0x60
 800880a:	416b      	adcs	r3, r5
 800880c:	667b      	str	r3, [r7, #100]	; 0x64
 800880e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	461a      	mov	r2, r3
 8008814:	f04f 0300 	mov.w	r3, #0
 8008818:	1891      	adds	r1, r2, r2
 800881a:	63b9      	str	r1, [r7, #56]	; 0x38
 800881c:	415b      	adcs	r3, r3
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008824:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008828:	f7f8 fa3e 	bl	8000ca8 <__aeabi_uldivmod>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4ba5      	ldr	r3, [pc, #660]	; (8008ac8 <UART_SetConfig+0x38c>)
 8008832:	fba3 2302 	umull	r2, r3, r3, r2
 8008836:	095b      	lsrs	r3, r3, #5
 8008838:	011e      	lsls	r6, r3, #4
 800883a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800883c:	461c      	mov	r4, r3
 800883e:	f04f 0500 	mov.w	r5, #0
 8008842:	4622      	mov	r2, r4
 8008844:	462b      	mov	r3, r5
 8008846:	1891      	adds	r1, r2, r2
 8008848:	6339      	str	r1, [r7, #48]	; 0x30
 800884a:	415b      	adcs	r3, r3
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
 800884e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008852:	1912      	adds	r2, r2, r4
 8008854:	eb45 0303 	adc.w	r3, r5, r3
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	f04f 0100 	mov.w	r1, #0
 8008860:	00d9      	lsls	r1, r3, #3
 8008862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008866:	00d0      	lsls	r0, r2, #3
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	1911      	adds	r1, r2, r4
 800886e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008870:	416b      	adcs	r3, r5
 8008872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	461a      	mov	r2, r3
 800887a:	f04f 0300 	mov.w	r3, #0
 800887e:	1891      	adds	r1, r2, r2
 8008880:	62b9      	str	r1, [r7, #40]	; 0x28
 8008882:	415b      	adcs	r3, r3
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800888a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800888e:	f7f8 fa0b 	bl	8000ca8 <__aeabi_uldivmod>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4b8c      	ldr	r3, [pc, #560]	; (8008ac8 <UART_SetConfig+0x38c>)
 8008898:	fba3 1302 	umull	r1, r3, r3, r2
 800889c:	095b      	lsrs	r3, r3, #5
 800889e:	2164      	movs	r1, #100	; 0x64
 80088a0:	fb01 f303 	mul.w	r3, r1, r3
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	3332      	adds	r3, #50	; 0x32
 80088aa:	4a87      	ldr	r2, [pc, #540]	; (8008ac8 <UART_SetConfig+0x38c>)
 80088ac:	fba2 2303 	umull	r2, r3, r2, r3
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088b8:	441e      	add	r6, r3
 80088ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088bc:	4618      	mov	r0, r3
 80088be:	f04f 0100 	mov.w	r1, #0
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	1894      	adds	r4, r2, r2
 80088c8:	623c      	str	r4, [r7, #32]
 80088ca:	415b      	adcs	r3, r3
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
 80088ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088d2:	1812      	adds	r2, r2, r0
 80088d4:	eb41 0303 	adc.w	r3, r1, r3
 80088d8:	f04f 0400 	mov.w	r4, #0
 80088dc:	f04f 0500 	mov.w	r5, #0
 80088e0:	00dd      	lsls	r5, r3, #3
 80088e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088e6:	00d4      	lsls	r4, r2, #3
 80088e8:	4622      	mov	r2, r4
 80088ea:	462b      	mov	r3, r5
 80088ec:	1814      	adds	r4, r2, r0
 80088ee:	653c      	str	r4, [r7, #80]	; 0x50
 80088f0:	414b      	adcs	r3, r1
 80088f2:	657b      	str	r3, [r7, #84]	; 0x54
 80088f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	461a      	mov	r2, r3
 80088fa:	f04f 0300 	mov.w	r3, #0
 80088fe:	1891      	adds	r1, r2, r2
 8008900:	61b9      	str	r1, [r7, #24]
 8008902:	415b      	adcs	r3, r3
 8008904:	61fb      	str	r3, [r7, #28]
 8008906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800890a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800890e:	f7f8 f9cb 	bl	8000ca8 <__aeabi_uldivmod>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4b6c      	ldr	r3, [pc, #432]	; (8008ac8 <UART_SetConfig+0x38c>)
 8008918:	fba3 1302 	umull	r1, r3, r3, r2
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	2164      	movs	r1, #100	; 0x64
 8008920:	fb01 f303 	mul.w	r3, r1, r3
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	3332      	adds	r3, #50	; 0x32
 800892a:	4a67      	ldr	r2, [pc, #412]	; (8008ac8 <UART_SetConfig+0x38c>)
 800892c:	fba2 2303 	umull	r2, r3, r2, r3
 8008930:	095b      	lsrs	r3, r3, #5
 8008932:	f003 0207 	and.w	r2, r3, #7
 8008936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4432      	add	r2, r6
 800893c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800893e:	e0b9      	b.n	8008ab4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008942:	461c      	mov	r4, r3
 8008944:	f04f 0500 	mov.w	r5, #0
 8008948:	4622      	mov	r2, r4
 800894a:	462b      	mov	r3, r5
 800894c:	1891      	adds	r1, r2, r2
 800894e:	6139      	str	r1, [r7, #16]
 8008950:	415b      	adcs	r3, r3
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008958:	1912      	adds	r2, r2, r4
 800895a:	eb45 0303 	adc.w	r3, r5, r3
 800895e:	f04f 0000 	mov.w	r0, #0
 8008962:	f04f 0100 	mov.w	r1, #0
 8008966:	00d9      	lsls	r1, r3, #3
 8008968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800896c:	00d0      	lsls	r0, r2, #3
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	eb12 0804 	adds.w	r8, r2, r4
 8008976:	eb43 0905 	adc.w	r9, r3, r5
 800897a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	4618      	mov	r0, r3
 8008980:	f04f 0100 	mov.w	r1, #0
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	f04f 0300 	mov.w	r3, #0
 800898c:	008b      	lsls	r3, r1, #2
 800898e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008992:	0082      	lsls	r2, r0, #2
 8008994:	4640      	mov	r0, r8
 8008996:	4649      	mov	r1, r9
 8008998:	f7f8 f986 	bl	8000ca8 <__aeabi_uldivmod>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4b49      	ldr	r3, [pc, #292]	; (8008ac8 <UART_SetConfig+0x38c>)
 80089a2:	fba3 2302 	umull	r2, r3, r3, r2
 80089a6:	095b      	lsrs	r3, r3, #5
 80089a8:	011e      	lsls	r6, r3, #4
 80089aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ac:	4618      	mov	r0, r3
 80089ae:	f04f 0100 	mov.w	r1, #0
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	1894      	adds	r4, r2, r2
 80089b8:	60bc      	str	r4, [r7, #8]
 80089ba:	415b      	adcs	r3, r3
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089c2:	1812      	adds	r2, r2, r0
 80089c4:	eb41 0303 	adc.w	r3, r1, r3
 80089c8:	f04f 0400 	mov.w	r4, #0
 80089cc:	f04f 0500 	mov.w	r5, #0
 80089d0:	00dd      	lsls	r5, r3, #3
 80089d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089d6:	00d4      	lsls	r4, r2, #3
 80089d8:	4622      	mov	r2, r4
 80089da:	462b      	mov	r3, r5
 80089dc:	1814      	adds	r4, r2, r0
 80089de:	64bc      	str	r4, [r7, #72]	; 0x48
 80089e0:	414b      	adcs	r3, r1
 80089e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f04f 0100 	mov.w	r1, #0
 80089ee:	f04f 0200 	mov.w	r2, #0
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	008b      	lsls	r3, r1, #2
 80089f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089fc:	0082      	lsls	r2, r0, #2
 80089fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a02:	f7f8 f951 	bl	8000ca8 <__aeabi_uldivmod>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4b2f      	ldr	r3, [pc, #188]	; (8008ac8 <UART_SetConfig+0x38c>)
 8008a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a10:	095b      	lsrs	r3, r3, #5
 8008a12:	2164      	movs	r1, #100	; 0x64
 8008a14:	fb01 f303 	mul.w	r3, r1, r3
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	3332      	adds	r3, #50	; 0x32
 8008a1e:	4a2a      	ldr	r2, [pc, #168]	; (8008ac8 <UART_SetConfig+0x38c>)
 8008a20:	fba2 2303 	umull	r2, r3, r2, r3
 8008a24:	095b      	lsrs	r3, r3, #5
 8008a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a2a:	441e      	add	r6, r3
 8008a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f04f 0100 	mov.w	r1, #0
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	1894      	adds	r4, r2, r2
 8008a3a:	603c      	str	r4, [r7, #0]
 8008a3c:	415b      	adcs	r3, r3
 8008a3e:	607b      	str	r3, [r7, #4]
 8008a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a44:	1812      	adds	r2, r2, r0
 8008a46:	eb41 0303 	adc.w	r3, r1, r3
 8008a4a:	f04f 0400 	mov.w	r4, #0
 8008a4e:	f04f 0500 	mov.w	r5, #0
 8008a52:	00dd      	lsls	r5, r3, #3
 8008a54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a58:	00d4      	lsls	r4, r2, #3
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	462b      	mov	r3, r5
 8008a5e:	eb12 0a00 	adds.w	sl, r2, r0
 8008a62:	eb43 0b01 	adc.w	fp, r3, r1
 8008a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f04f 0100 	mov.w	r1, #0
 8008a70:	f04f 0200 	mov.w	r2, #0
 8008a74:	f04f 0300 	mov.w	r3, #0
 8008a78:	008b      	lsls	r3, r1, #2
 8008a7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a7e:	0082      	lsls	r2, r0, #2
 8008a80:	4650      	mov	r0, sl
 8008a82:	4659      	mov	r1, fp
 8008a84:	f7f8 f910 	bl	8000ca8 <__aeabi_uldivmod>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ac8 <UART_SetConfig+0x38c>)
 8008a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a92:	095b      	lsrs	r3, r3, #5
 8008a94:	2164      	movs	r1, #100	; 0x64
 8008a96:	fb01 f303 	mul.w	r3, r1, r3
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	3332      	adds	r3, #50	; 0x32
 8008aa0:	4a09      	ldr	r2, [pc, #36]	; (8008ac8 <UART_SetConfig+0x38c>)
 8008aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa6:	095b      	lsrs	r3, r3, #5
 8008aa8:	f003 020f 	and.w	r2, r3, #15
 8008aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4432      	add	r2, r6
 8008ab2:	609a      	str	r2, [r3, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	377c      	adds	r7, #124	; 0x7c
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abe:	bf00      	nop
 8008ac0:	40011000 	.word	0x40011000
 8008ac4:	40011400 	.word	0x40011400
 8008ac8:	51eb851f 	.word	0x51eb851f
 8008acc:	00000000 	.word	0x00000000

08008ad0 <DCT_Init>:
 *
 * @param      *S    points to an instance of the floating-point DCT structure.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t DCT_Init(DCT_InstanceTypeDef *S)
{
 8008ad0:	b5b0      	push	{r4, r5, r7, lr}
 8008ad2:	b098      	sub	sp, #96	; 0x60
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  int32_t status;
  uint32_t n_filters = S->NumFilters;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t n_inputs = S->NumInputs;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	623b      	str	r3, [r7, #32]
  float32_t *M = S->pDCTCoefs;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	61fb      	str	r3, [r7, #28]
  float64_t normalizer;

  uint32_t shift;

  /* RemoveDCTZero only implemented for DCT Type-III non-normalized with COS tables */
  if (S->RemoveDCTZero != 0)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <DCT_Init+0x3a>
  {
    if (S->Type != DCT_TYPE_III)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7a1b      	ldrb	r3, [r3, #8]
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d004      	beq.n	8008b04 <DCT_Init+0x34>
    {
      status = -1;
 8008afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008afe:	65fb      	str	r3, [r7, #92]	; 0x5c
      return status;
 8008b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b02:	e2af      	b.n	8009064 <DCT_Init+0x594>
    }
    shift = 1;
 8008b04:	2301      	movs	r3, #1
 8008b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b08:	e001      	b.n	8008b0e <DCT_Init+0x3e>
  }
  else
  {
    shift = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	65bb      	str	r3, [r7, #88]	; 0x58
  }

  /* Compute DCT matrix coefficients */
  switch (S->Type)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	7a1b      	ldrb	r3, [r3, #8]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	f200 82a0 	bhi.w	800905a <DCT_Init+0x58a>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <DCT_Init+0x50>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b35 	.word	0x08008b35
 8008b24:	08008bf7 	.word	0x08008bf7
 8008b28:	08008d4f 	.word	0x08008d4f
 8008b2c:	08008e3f 	.word	0x08008e3f
 8008b30:	08008f1b 	.word	0x08008f1b
  {
    case DCT_TYPE_II:
      for (uint32_t i = 0; i < n_filters; i++)
 8008b34:	2300      	movs	r3, #0
 8008b36:	657b      	str	r3, [r7, #84]	; 0x54
 8008b38:	e056      	b.n	8008be8 <DCT_Init+0x118>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b3e:	e04c      	b.n	8008bda <DCT_Init+0x10a>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 8008b40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b42:	f7f7 fcef 	bl	8000524 <__aeabi_ui2d>
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	4bc1      	ldr	r3, [pc, #772]	; (8008e50 <DCT_Init+0x380>)
 8008b4c:	f7f7 fbae 	bl	80002ac <__adddf3>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4610      	mov	r0, r2
 8008b56:	4619      	mov	r1, r3
 8008b58:	a3bb      	add	r3, pc, #748	; (adr r3, 8008e48 <DCT_Init+0x378>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	f7f7 fd5b 	bl	8000618 <__aeabi_dmul>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4614      	mov	r4, r2
 8008b68:	461d      	mov	r5, r3
 8008b6a:	6a38      	ldr	r0, [r7, #32]
 8008b6c:	f7f7 fcda 	bl	8000524 <__aeabi_ui2d>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4620      	mov	r0, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	f7f7 fe78 	bl	800086c <__aeabi_ddiv>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = 2.0 * cos(sample * i);
 8008b84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008b86:	f7f7 fccd 	bl	8000524 <__aeabi_ui2d>
 8008b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b8e:	f7f7 fd43 	bl	8000618 <__aeabi_dmul>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	ec43 2b17 	vmov	d7, r2, r3
 8008b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8008b9e:	eef0 0a67 	vmov.f32	s1, s15
 8008ba2:	f00b fdbd 	bl	8014720 <cos>
 8008ba6:	ec51 0b10 	vmov	r0, r1, d0
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	f7f7 fb7d 	bl	80002ac <__adddf3>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bbc:	6a3a      	ldr	r2, [r7, #32]
 8008bbe:	fb02 f203 	mul.w	r2, r2, r3
 8008bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bc4:	4413      	add	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	18d4      	adds	r4, r2, r3
 8008bcc:	f7f8 f81c 	bl	8000c08 <__aeabi_d2f>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 8008bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8008bda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d3ae      	bcc.n	8008b40 <DCT_Init+0x70>
      for (uint32_t i = 0; i < n_filters; i++)
 8008be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008be4:	3301      	adds	r3, #1
 8008be6:	657b      	str	r3, [r7, #84]	; 0x54
 8008be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d3a4      	bcc.n	8008b3a <DCT_Init+0x6a>
        }
      }
      status = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8008bf4:	e235      	b.n	8009062 <DCT_Init+0x592>

    case DCT_TYPE_II_ORTHO:
      normalizer = 2.0 * sqrt(1.0 / (4 * n_inputs));
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7f7 fc92 	bl	8000524 <__aeabi_ui2d>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	f04f 0000 	mov.w	r0, #0
 8008c08:	4992      	ldr	r1, [pc, #584]	; (8008e54 <DCT_Init+0x384>)
 8008c0a:	f7f7 fe2f 	bl	800086c <__aeabi_ddiv>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	ec43 2b17 	vmov	d7, r2, r3
 8008c16:	eeb0 0a47 	vmov.f32	s0, s14
 8008c1a:	eef0 0a67 	vmov.f32	s1, s15
 8008c1e:	f00b fdfd 	bl	801481c <sqrt>
 8008c22:	ec51 0b10 	vmov	r0, r1, d0
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	f7f7 fb3f 	bl	80002ac <__adddf3>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_inputs; i++)
 8008c36:	2300      	movs	r3, #0
 8008c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c3a:	e00c      	b.n	8008c56 <DCT_Init+0x186>
      {
        M[i] = normalizer;
 8008c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	18d4      	adds	r4, r2, r3
 8008c44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c48:	f7f7 ffde 	bl	8000c08 <__aeabi_d2f>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	6023      	str	r3, [r4, #0]
      for (uint32_t i = 0; i < n_inputs; i++)
 8008c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c52:	3301      	adds	r3, #1
 8008c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d3ee      	bcc.n	8008c3c <DCT_Init+0x16c>
      }
      normalizer = 2.0 / sqrt(2 * n_inputs);
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7f7 fc5e 	bl	8000524 <__aeabi_ui2d>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	ec43 2b10 	vmov	d0, r2, r3
 8008c70:	f00b fdd4 	bl	801481c <sqrt>
 8008c74:	ec53 2b10 	vmov	r2, r3, d0
 8008c78:	f04f 0000 	mov.w	r0, #0
 8008c7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008c80:	f7f7 fdf4 	bl	800086c <__aeabi_ddiv>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 1; i < n_filters; i++)
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c90:	e056      	b.n	8008d40 <DCT_Init+0x270>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 8008c92:	2300      	movs	r3, #0
 8008c94:	647b      	str	r3, [r7, #68]	; 0x44
 8008c96:	e04c      	b.n	8008d32 <DCT_Init+0x262>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 8008c98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008c9a:	f7f7 fc43 	bl	8000524 <__aeabi_ui2d>
 8008c9e:	f04f 0200 	mov.w	r2, #0
 8008ca2:	4b6b      	ldr	r3, [pc, #428]	; (8008e50 <DCT_Init+0x380>)
 8008ca4:	f7f7 fb02 	bl	80002ac <__adddf3>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4610      	mov	r0, r2
 8008cae:	4619      	mov	r1, r3
 8008cb0:	a365      	add	r3, pc, #404	; (adr r3, 8008e48 <DCT_Init+0x378>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	f7f7 fcaf 	bl	8000618 <__aeabi_dmul>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	461d      	mov	r5, r3
 8008cc2:	6a38      	ldr	r0, [r7, #32]
 8008cc4:	f7f7 fc2e 	bl	8000524 <__aeabi_ui2d>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f7f7 fdcc 	bl	800086c <__aeabi_ddiv>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 8008cdc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008cde:	f7f7 fc21 	bl	8000524 <__aeabi_ui2d>
 8008ce2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ce6:	f7f7 fc97 	bl	8000618 <__aeabi_dmul>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	ec43 2b17 	vmov	d7, r2, r3
 8008cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8008cf6:	eef0 0a67 	vmov.f32	s1, s15
 8008cfa:	f00b fd11 	bl	8014720 <cos>
 8008cfe:	ec51 0b10 	vmov	r0, r1, d0
 8008d02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d06:	f7f7 fc87 	bl	8000618 <__aeabi_dmul>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4610      	mov	r0, r2
 8008d10:	4619      	mov	r1, r3
 8008d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d14:	6a3a      	ldr	r2, [r7, #32]
 8008d16:	fb02 f203 	mul.w	r2, r2, r3
 8008d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	18d4      	adds	r4, r2, r3
 8008d24:	f7f7 ff70 	bl	8000c08 <__aeabi_d2f>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 8008d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d2e:	3301      	adds	r3, #1
 8008d30:	647b      	str	r3, [r7, #68]	; 0x44
 8008d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d3ae      	bcc.n	8008c98 <DCT_Init+0x1c8>
      for (uint32_t i = 1; i < n_filters; i++)
 8008d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d3a4      	bcc.n	8008c92 <DCT_Init+0x1c2>
        }
      }
      status = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8008d4c:	e189      	b.n	8009062 <DCT_Init+0x592>

    case DCT_TYPE_II_SCALED:
      normalizer = 2.0 / sqrt(2 * n_inputs);
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f7 fbe6 	bl	8000524 <__aeabi_ui2d>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	ec43 2b10 	vmov	d0, r2, r3
 8008d60:	f00b fd5c 	bl	801481c <sqrt>
 8008d64:	ec53 2b10 	vmov	r2, r3, d0
 8008d68:	f04f 0000 	mov.w	r0, #0
 8008d6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008d70:	f7f7 fd7c 	bl	800086c <__aeabi_ddiv>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_filters; i++)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d80:	e056      	b.n	8008e30 <DCT_Init+0x360>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 8008d82:	2300      	movs	r3, #0
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d86:	e04c      	b.n	8008e22 <DCT_Init+0x352>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 8008d88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d8a:	f7f7 fbcb 	bl	8000524 <__aeabi_ui2d>
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	4b2f      	ldr	r3, [pc, #188]	; (8008e50 <DCT_Init+0x380>)
 8008d94:	f7f7 fa8a 	bl	80002ac <__adddf3>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	a329      	add	r3, pc, #164	; (adr r3, 8008e48 <DCT_Init+0x378>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fc37 	bl	8000618 <__aeabi_dmul>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	4614      	mov	r4, r2
 8008db0:	461d      	mov	r5, r3
 8008db2:	6a38      	ldr	r0, [r7, #32]
 8008db4:	f7f7 fbb6 	bl	8000524 <__aeabi_ui2d>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	f7f7 fd54 	bl	800086c <__aeabi_ddiv>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 8008dcc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008dce:	f7f7 fba9 	bl	8000524 <__aeabi_ui2d>
 8008dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dd6:	f7f7 fc1f 	bl	8000618 <__aeabi_dmul>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	ec43 2b17 	vmov	d7, r2, r3
 8008de2:	eeb0 0a47 	vmov.f32	s0, s14
 8008de6:	eef0 0a67 	vmov.f32	s1, s15
 8008dea:	f00b fc99 	bl	8014720 <cos>
 8008dee:	ec51 0b10 	vmov	r0, r1, d0
 8008df2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008df6:	f7f7 fc0f 	bl	8000618 <__aeabi_dmul>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e04:	6a3a      	ldr	r2, [r7, #32]
 8008e06:	fb02 f203 	mul.w	r2, r2, r3
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	18d4      	adds	r4, r2, r3
 8008e14:	f7f7 fef8 	bl	8000c08 <__aeabi_d2f>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 8008e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1e:	3301      	adds	r3, #1
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d3ae      	bcc.n	8008d88 <DCT_Init+0x2b8>
      for (uint32_t i = 0; i < n_filters; i++)
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8008e30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d3a4      	bcc.n	8008d82 <DCT_Init+0x2b2>
        }
      }
      status = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8008e3c:	e111      	b.n	8009062 <DCT_Init+0x592>

    case DCT_TYPE_III:
      for (uint32_t i = 0; i < n_filters; i++)
 8008e3e:	2300      	movs	r3, #0
 8008e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e42:	e063      	b.n	8008f0c <DCT_Init+0x43c>
 8008e44:	f3af 8000 	nop.w
 8008e48:	54442d18 	.word	0x54442d18
 8008e4c:	400921fb 	.word	0x400921fb
 8008e50:	3fe00000 	.word	0x3fe00000
 8008e54:	3ff00000 	.word	0x3ff00000
      {
        sample = M_PI * (i + shift + 0.5) / n_inputs;
 8008e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e5c:	4413      	add	r3, r2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7f7 fb60 	bl	8000524 <__aeabi_ui2d>
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	4b83      	ldr	r3, [pc, #524]	; (8009078 <DCT_Init+0x5a8>)
 8008e6a:	f7f7 fa1f 	bl	80002ac <__adddf3>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4610      	mov	r0, r2
 8008e74:	4619      	mov	r1, r3
 8008e76:	a37e      	add	r3, pc, #504	; (adr r3, 8009070 <DCT_Init+0x5a0>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	f7f7 fbcc 	bl	8000618 <__aeabi_dmul>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	461d      	mov	r5, r3
 8008e88:	6a38      	ldr	r0, [r7, #32]
 8008e8a:	f7f7 fb4b 	bl	8000524 <__aeabi_ui2d>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4620      	mov	r0, r4
 8008e94:	4629      	mov	r1, r5
 8008e96:	f7f7 fce9 	bl	800086c <__aeabi_ddiv>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t j = 0; j < n_inputs; j++)
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea6:	e02a      	b.n	8008efe <DCT_Init+0x42e>
        {
          M[i * n_inputs + j] = 2.0 * cos(sample * j);
 8008ea8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008eaa:	f7f7 fb3b 	bl	8000524 <__aeabi_ui2d>
 8008eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eb2:	f7f7 fbb1 	bl	8000618 <__aeabi_dmul>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	ec43 2b17 	vmov	d7, r2, r3
 8008ebe:	eeb0 0a47 	vmov.f32	s0, s14
 8008ec2:	eef0 0a67 	vmov.f32	s1, s15
 8008ec6:	f00b fc2b 	bl	8014720 <cos>
 8008eca:	ec51 0b10 	vmov	r0, r1, d0
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	f7f7 f9eb 	bl	80002ac <__adddf3>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4610      	mov	r0, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	6a3a      	ldr	r2, [r7, #32]
 8008ee2:	fb02 f203 	mul.w	r2, r2, r3
 8008ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	18d4      	adds	r4, r2, r3
 8008ef0:	f7f7 fe8a 	bl	8000c08 <__aeabi_d2f>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	3301      	adds	r3, #1
 8008efc:	637b      	str	r3, [r7, #52]	; 0x34
 8008efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d3d0      	bcc.n	8008ea8 <DCT_Init+0x3d8>
      for (uint32_t i = 0; i < n_filters; i++)
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	3301      	adds	r3, #1
 8008f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d3a1      	bcc.n	8008e58 <DCT_Init+0x388>
        }
      }
      status = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8008f18:	e0a3      	b.n	8009062 <DCT_Init+0x592>

    case DCT_TYPE_III_ORTHO:
      normalizer = 1.0 / sqrt(n_inputs);
 8008f1a:	6a38      	ldr	r0, [r7, #32]
 8008f1c:	f7f7 fb02 	bl	8000524 <__aeabi_ui2d>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	ec43 2b10 	vmov	d0, r2, r3
 8008f28:	f00b fc78 	bl	801481c <sqrt>
 8008f2c:	ec53 2b10 	vmov	r2, r3, d0
 8008f30:	f04f 0000 	mov.w	r0, #0
 8008f34:	4951      	ldr	r1, [pc, #324]	; (800907c <DCT_Init+0x5ac>)
 8008f36:	f7f7 fc99 	bl	800086c <__aeabi_ddiv>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_inputs; i++)
 8008f42:	2300      	movs	r3, #0
 8008f44:	633b      	str	r3, [r7, #48]	; 0x30
 8008f46:	e00c      	b.n	8008f62 <DCT_Init+0x492>
      {
        M[i] = normalizer;
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	18d4      	adds	r4, r2, r3
 8008f50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f54:	f7f7 fe58 	bl	8000c08 <__aeabi_d2f>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	6023      	str	r3, [r4, #0]
      for (uint32_t i = 0; i < n_inputs; i++)
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5e:	3301      	adds	r3, #1
 8008f60:	633b      	str	r3, [r7, #48]	; 0x30
 8008f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d3ee      	bcc.n	8008f48 <DCT_Init+0x478>
      }
      normalizer = sqrt(2.0 / n_inputs);
 8008f6a:	6a38      	ldr	r0, [r7, #32]
 8008f6c:	f7f7 fada 	bl	8000524 <__aeabi_ui2d>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	f04f 0000 	mov.w	r0, #0
 8008f78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008f7c:	f7f7 fc76 	bl	800086c <__aeabi_ddiv>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	ec43 2b17 	vmov	d7, r2, r3
 8008f88:	eeb0 0a47 	vmov.f32	s0, s14
 8008f8c:	eef0 0a67 	vmov.f32	s1, s15
 8008f90:	f00b fc44 	bl	801481c <sqrt>
 8008f94:	ed87 0b04 	vstr	d0, [r7, #16]
      for (uint32_t i = 0; i < n_filters; i++)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f9c:	e056      	b.n	800904c <DCT_Init+0x57c>
      {
        for (uint32_t j = 1; j < n_inputs; j++)
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fa2:	e04c      	b.n	800903e <DCT_Init+0x56e>
        {
          sample = M_PI * (i + 0.5) / n_inputs;
 8008fa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fa6:	f7f7 fabd 	bl	8000524 <__aeabi_ui2d>
 8008faa:	f04f 0200 	mov.w	r2, #0
 8008fae:	4b32      	ldr	r3, [pc, #200]	; (8009078 <DCT_Init+0x5a8>)
 8008fb0:	f7f7 f97c 	bl	80002ac <__adddf3>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	a32c      	add	r3, pc, #176	; (adr r3, 8009070 <DCT_Init+0x5a0>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 fb29 	bl	8000618 <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4614      	mov	r4, r2
 8008fcc:	461d      	mov	r5, r3
 8008fce:	6a38      	ldr	r0, [r7, #32]
 8008fd0:	f7f7 faa8 	bl	8000524 <__aeabi_ui2d>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f7f7 fc46 	bl	800086c <__aeabi_ddiv>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = cos(sample * j) * normalizer;
 8008fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fea:	f7f7 fa9b 	bl	8000524 <__aeabi_ui2d>
 8008fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ff2:	f7f7 fb11 	bl	8000618 <__aeabi_dmul>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	ec43 2b17 	vmov	d7, r2, r3
 8008ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8009002:	eef0 0a67 	vmov.f32	s1, s15
 8009006:	f00b fb8b 	bl	8014720 <cos>
 800900a:	ec51 0b10 	vmov	r0, r1, d0
 800900e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009012:	f7f7 fb01 	bl	8000618 <__aeabi_dmul>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4610      	mov	r0, r2
 800901c:	4619      	mov	r1, r3
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009020:	6a3a      	ldr	r2, [r7, #32]
 8009022:	fb02 f203 	mul.w	r2, r2, r3
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	18d4      	adds	r4, r2, r3
 8009030:	f7f7 fdea 	bl	8000c08 <__aeabi_d2f>
 8009034:	4603      	mov	r3, r0
 8009036:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 1; j < n_inputs; j++)
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	3301      	adds	r3, #1
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
 800903e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	429a      	cmp	r2, r3
 8009044:	d3ae      	bcc.n	8008fa4 <DCT_Init+0x4d4>
      for (uint32_t i = 0; i < n_filters; i++)
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	3301      	adds	r3, #1
 800904a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800904c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	429a      	cmp	r2, r3
 8009052:	d3a4      	bcc.n	8008f9e <DCT_Init+0x4ce>
        }
      }
      status = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8009058:	e003      	b.n	8009062 <DCT_Init+0x592>

    default:
      /* Other DCT types not implemented or unsupported */
      status = -1;
 800905a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800905e:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8009060:	bf00      	nop
  }

  return status;
 8009062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8009064:	4618      	mov	r0, r3
 8009066:	3760      	adds	r7, #96	; 0x60
 8009068:	46bd      	mov	sp, r7
 800906a:	bdb0      	pop	{r4, r5, r7, pc}
 800906c:	f3af 8000 	nop.w
 8009070:	54442d18 	.word	0x54442d18
 8009074:	400921fb 	.word	0x400921fb
 8009078:	3fe00000 	.word	0x3fe00000
 800907c:	3ff00000 	.word	0x3ff00000

08009080 <DCT>:
 * @param      *pIn  points to state buffer.
 * @param      *pOut points to the output buffer.
 * @return none.
 */
void DCT(DCT_InstanceTypeDef *S, float32_t *pIn, float32_t *pOut)
{
 8009080:	b480      	push	{r7}
 8009082:	b095      	sub	sp, #84	; 0x54
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  float32_t sum;
  uint32_t n_inputs = S->NumInputs;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	61fb      	str	r3, [r7, #28]
  uint32_t n_filters = S->NumFilters;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	61bb      	str	r3, [r7, #24]

#ifndef USE_NAIVE_DCT
  float32_t *cosFact = S->pDCTCoefs;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	617b      	str	r3, [r7, #20]
#else
  float32_t normalizer;
#endif /* USE_NAIVE_DCT */

  /* Compute DCT matrix coefficients */
  switch (S->Type)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	7a1b      	ldrb	r3, [r3, #8]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	f200 8175 	bhi.w	8009394 <DCT+0x314>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <DCT+0x30>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c5 	.word	0x080090c5
 80090b4:	08009143 	.word	0x08009143
 80090b8:	08009207 	.word	0x08009207
 80090bc:	08009285 	.word	0x08009285
 80090c0:	08009305 	.word	0x08009305
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = 2.0f * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 80090c4:	2300      	movs	r3, #0
 80090c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80090c8:	e036      	b.n	8009138 <DCT+0xb8>
      {
        pOut[k] = 0.0f;
 80090ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	4413      	add	r3, r2
 80090d2:	f04f 0200 	mov.w	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 80090d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	fb02 f303 	mul.w	r3, r2, r3
 80090e0:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 80090e2:	2300      	movs	r3, #0
 80090e4:	647b      	str	r3, [r7, #68]	; 0x44
 80090e6:	e020      	b.n	800912a <DCT+0xaa>
        {
          // pOut[k] += pIn[n] * 2.0f * cos(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 80090e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	4413      	add	r3, r2
 80090f0:	ed93 7a00 	vldr	s14, [r3]
 80090f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	4413      	add	r3, r2
 80090fc:	edd3 6a00 	vldr	s13, [r3]
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	4413      	add	r3, r2
 800910c:	edd3 7a00 	vldr	s15, [r3]
 8009110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	4413      	add	r3, r2
 800911c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009120:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 8009124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009126:	3301      	adds	r3, #1
 8009128:	647b      	str	r3, [r7, #68]	; 0x44
 800912a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	429a      	cmp	r2, r3
 8009130:	d3da      	bcc.n	80090e8 <DCT+0x68>
      for (uint32_t k = 0; k < n_filters; k++)
 8009132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009134:	3301      	adds	r3, #1
 8009136:	64bb      	str	r3, [r7, #72]	; 0x48
 8009138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	429a      	cmp	r2, r3
 800913e:	d3c4      	bcc.n	80090ca <DCT+0x4a>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 8009140:	e129      	b.n	8009396 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = normalizer * 2.0f * sum;
      }
    #else
      sum = 0.0f;
 8009142:	f04f 0300 	mov.w	r3, #0
 8009146:	64fb      	str	r3, [r7, #76]	; 0x4c
      for (uint32_t n = 0; n < n_inputs; n++)
 8009148:	2300      	movs	r3, #0
 800914a:	643b      	str	r3, [r7, #64]	; 0x40
 800914c:	e00e      	b.n	800916c <DCT+0xec>
      {
        sum += pIn[n];
 800914e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	4413      	add	r3, r2
 8009156:	edd3 7a00 	vldr	s15, [r3]
 800915a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800915e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009162:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      for (uint32_t n = 0; n < n_inputs; n++)
 8009166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009168:	3301      	adds	r3, #1
 800916a:	643b      	str	r3, [r7, #64]	; 0x40
 800916c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	429a      	cmp	r2, r3
 8009172:	d3ec      	bcc.n	800914e <DCT+0xce>
      }
      pOut[0] = cosFact[0] * sum;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	ed93 7a00 	vldr	s14, [r3]
 800917a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800917e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t k = 1; k < n_filters; k++)
 8009188:	2301      	movs	r3, #1
 800918a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918c:	e036      	b.n	80091fc <DCT+0x17c>
      {
        pOut[k] = 0.0f;
 800918e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	4413      	add	r3, r2
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 800919c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	fb02 f303 	mul.w	r3, r2, r3
 80091a4:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 80091a6:	2300      	movs	r3, #0
 80091a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80091aa:	e020      	b.n	80091ee <DCT+0x16e>
        {
          // pOut[k] += 2.0f / sqrtf(2 * n_inputs) * pIn[n] * cosf(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	4413      	add	r3, r2
 80091b4:	ed93 7a00 	vldr	s14, [r3]
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	4413      	add	r3, r2
 80091c0:	edd3 6a00 	vldr	s13, [r3]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	4413      	add	r3, r2
 80091d0:	edd3 7a00 	vldr	s15, [r3]
 80091d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	4413      	add	r3, r2
 80091e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091e4:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	3301      	adds	r3, #1
 80091ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80091ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d3da      	bcc.n	80091ac <DCT+0x12c>
      for (uint32_t k = 1; k < n_filters; k++)
 80091f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f8:	3301      	adds	r3, #1
 80091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	429a      	cmp	r2, r3
 8009202:	d3c4      	bcc.n	800918e <DCT+0x10e>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 8009204:	e0c7      	b.n	8009396 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = normalizer * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 8009206:	2300      	movs	r3, #0
 8009208:	637b      	str	r3, [r7, #52]	; 0x34
 800920a:	e036      	b.n	800927a <DCT+0x1fa>
      {
        pOut[k] = 0.0f;
 800920c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	f04f 0200 	mov.w	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921c:	69fa      	ldr	r2, [r7, #28]
 800921e:	fb02 f303 	mul.w	r3, r2, r3
 8009222:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 8009224:	2300      	movs	r3, #0
 8009226:	633b      	str	r3, [r7, #48]	; 0x30
 8009228:	e020      	b.n	800926c <DCT+0x1ec>
        {
          // pOut[k] += pIn[n] * 2.0f * cos(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 800922a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	4413      	add	r3, r2
 8009232:	ed93 7a00 	vldr	s14, [r3]
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	4413      	add	r3, r2
 800923e:	edd3 6a00 	vldr	s13, [r3]
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	4413      	add	r3, r2
 800924e:	edd3 7a00 	vldr	s15, [r3]
 8009252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	4413      	add	r3, r2
 800925e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009262:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	3301      	adds	r3, #1
 800926a:	633b      	str	r3, [r7, #48]	; 0x30
 800926c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	429a      	cmp	r2, r3
 8009272:	d3da      	bcc.n	800922a <DCT+0x1aa>
      for (uint32_t k = 0; k < n_filters; k++)
 8009274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009276:	3301      	adds	r3, #1
 8009278:	637b      	str	r3, [r7, #52]	; 0x34
 800927a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	429a      	cmp	r2, r3
 8009280:	d3c4      	bcc.n	800920c <DCT+0x18c>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 8009282:	e088      	b.n	8009396 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
        }
        pOut[k] = pIn[0] + 2.0f * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 8009284:	2300      	movs	r3, #0
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009288:	e037      	b.n	80092fa <DCT+0x27a>
      {
        sum = 0.0f;
 800928a:	f04f 0300 	mov.w	r3, #0
 800928e:	64fb      	str	r3, [r7, #76]	; 0x4c
        row = k * n_inputs;
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	fb02 f303 	mul.w	r3, r2, r3
 8009298:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 1; n < n_inputs; n++)
 800929a:	2301      	movs	r3, #1
 800929c:	62bb      	str	r3, [r7, #40]	; 0x28
 800929e:	e018      	b.n	80092d2 <DCT+0x252>
        {
          // sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
          sum += pIn[n] * cosFact[row + n];
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	4413      	add	r3, r2
 80092a8:	ed93 7a00 	vldr	s14, [r3]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	4413      	add	r3, r2
 80092b8:	edd3 7a00 	vldr	s15, [r3]
 80092bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80092c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092c8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        for (uint32_t n = 1; n < n_inputs; n++)
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	3301      	adds	r3, #1
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80092d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d3e2      	bcc.n	80092a0 <DCT+0x220>
        }
        pOut[k] = pIn[0] + sum;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	ed93 7a00 	vldr	s14, [r3]
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	4413      	add	r3, r2
 80092e8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80092ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092f0:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t k = 0; k < n_filters; k++)
 80092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f6:	3301      	adds	r3, #1
 80092f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d3c3      	bcc.n	800928a <DCT+0x20a>
      }
    #endif /* USE_NAIVE_DCT */
      break;
 8009302:	e048      	b.n	8009396 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
        }
        pOut[k] = pIn[0] / sqrtf(n_inputs) + sqrtf(2.0 / n_inputs) * sum;
      }
    #else
      sum = pIn[0] * cosFact[0];
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	ed93 7a00 	vldr	s14, [r3]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	edd3 7a00 	vldr	s15, [r3]
 8009310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009314:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      for (uint32_t k = 0; k < n_filters; k++)
 8009318:	2300      	movs	r3, #0
 800931a:	627b      	str	r3, [r7, #36]	; 0x24
 800931c:	e035      	b.n	800938a <DCT+0x30a>
      {
        pOut[k] = sum;
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4413      	add	r3, r2
 8009326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009328:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	69fa      	ldr	r2, [r7, #28]
 800932e:	fb02 f303 	mul.w	r3, r2, r3
 8009332:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 1; n < n_inputs; n++)
 8009334:	2301      	movs	r3, #1
 8009336:	623b      	str	r3, [r7, #32]
 8009338:	e020      	b.n	800937c <DCT+0x2fc>
        {
          // pOut[k] += pIn[n] * sqrtf(2.0 / n_inputs) * cos(M_PI * (k + 0.5) * n / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	4413      	add	r3, r2
 8009342:	ed93 7a00 	vldr	s14, [r3]
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	edd3 6a00 	vldr	s13, [r3]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4413      	add	r3, r2
 800935e:	edd3 7a00 	vldr	s15, [r3]
 8009362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	4413      	add	r3, r2
 800936e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009372:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 1; n < n_inputs; n++)
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	3301      	adds	r3, #1
 800937a:	623b      	str	r3, [r7, #32]
 800937c:	6a3a      	ldr	r2, [r7, #32]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	429a      	cmp	r2, r3
 8009382:	d3da      	bcc.n	800933a <DCT+0x2ba>
      for (uint32_t k = 0; k < n_filters; k++)
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	3301      	adds	r3, #1
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
 800938a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	429a      	cmp	r2, r3
 8009390:	d3c5      	bcc.n	800931e <DCT+0x29e>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 8009392:	e000      	b.n	8009396 <DCT+0x316>

    default:
      break;
 8009394:	bf00      	nop
  }
}
 8009396:	bf00      	nop
 8009398:	3754      	adds	r7, #84	; 0x54
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop

080093a4 <buf_to_float_normed>:
 * @param      *pInSignal   points to input signal buffer
 * @param      *pOutSignal  points to output signal buffer
 * @param      len          signal length
 */
void buf_to_float_normed(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 80093b0:	2300      	movs	r3, #0
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	e016      	b.n	80093e4 <buf_to_float_normed+0x40>
  {
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	4413      	add	r3, r2
 80093d2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80093fc <buf_to_float_normed+0x58>
 80093d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80093da:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	3301      	adds	r3, #1
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d3e4      	bcc.n	80093b6 <buf_to_float_normed+0x12>
  }
}
 80093ec:	bf00      	nop
 80093ee:	bf00      	nop
 80093f0:	371c      	adds	r7, #28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	47000000 	.word	0x47000000

08009400 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08c      	sub	sp, #48	; 0x30
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6899      	ldr	r1, [r3, #8]
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	68b8      	ldr	r0, [r7, #8]
 8009428:	f7f9 fb1a 	bl	8002a60 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	18d0      	adds	r0, r2, r3
 8009434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	461a      	mov	r2, r3
 800943c:	2100      	movs	r1, #0
 800943e:	f006 fd89 	bl	800ff54 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	2300      	movs	r3, #0
 8009448:	6a3a      	ldr	r2, [r7, #32]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	f7fb ff18 	bl	8005280 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	ed93 7a00 	vldr	s14, [r3]
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	edd3 7a00 	vldr	s15, [r3]
 800945c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009460:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	3304      	adds	r3, #4
 8009468:	ed93 7a00 	vldr	s14, [r3]
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	3304      	adds	r3, #4
 8009470:	edd3 7a00 	vldr	s15, [r3]
 8009474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009478:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	f103 0008 	add.w	r0, r3, #8
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	1d19      	adds	r1, r3, #4
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	085b      	lsrs	r3, r3, #1
 8009490:	3b01      	subs	r3, #1
 8009492:	461a      	mov	r2, r3
 8009494:	f7f9 fb0c 	bl	8002ab0 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	4413      	add	r3, r2
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	791b      	ldrb	r3, [r3, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d12c      	bne.n	8009508 <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094b2:	e023      	b.n	80094fc <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	4413      	add	r3, r2
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	440b      	add	r3, r1
 80094c6:	617a      	str	r2, [r7, #20]
 80094c8:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80094ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80094ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80094d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d6:	db09      	blt.n	80094ec <SpectrogramColumn+0xec>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80094d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80094dc:	f00b fb14 	bl	8014b08 <sqrtf>
 80094e0:	eef0 7a40 	vmov.f32	s15, s0
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80094ea:	e004      	b.n	80094f6 <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f04f 0200 	mov.w	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80094f4:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	3301      	adds	r3, #1
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	3301      	adds	r3, #1
 8009502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009504:	429a      	cmp	r2, r3
 8009506:	d3d5      	bcc.n	80094b4 <SpectrogramColumn+0xb4>
    }
  }
}
 8009508:	bf00      	nop
 800950a:	3730      	adds	r7, #48	; 0x30
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8009510:	b590      	push	{r4, r7, lr}
 8009512:	b08f      	sub	sp, #60	; 0x3c
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff ff5a 	bl	8009400 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6979      	ldr	r1, [r7, #20]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fa64 	bl	8009a24 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 800955c:	2300      	movs	r3, #0
 800955e:	637b      	str	r3, [r7, #52]	; 0x34
 8009560:	e012      	b.n	8009588 <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 8009562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	4413      	add	r3, r2
 800956a:	edd3 6a00 	vldr	s13, [r3]
 800956e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	4413      	add	r3, r2
 8009576:	ed97 7a06 	vldr	s14, [r7, #24]
 800957a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800957e:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 8009582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009584:	3301      	adds	r3, #1
 8009586:	637b      	str	r3, [r7, #52]	; 0x34
 8009588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	429a      	cmp	r2, r3
 800958e:	d3e8      	bcc.n	8009562 <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 8009590:	2300      	movs	r3, #0
 8009592:	633b      	str	r3, [r7, #48]	; 0x30
 8009594:	e014      	b.n	80095c0 <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	4413      	add	r3, r2
 800959e:	edd3 7a00 	vldr	s15, [r3]
 80095a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095aa:	d806      	bhi.n	80095ba <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 80095ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80095b8:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	3301      	adds	r3, #1
 80095be:	633b      	str	r3, [r7, #48]	; 0x30
 80095c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d3e6      	bcc.n	8009596 <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	791b      	ldrb	r3, [r3, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d14a      	bne.n	8009666 <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 80095d0:	2300      	movs	r3, #0
 80095d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095d4:	e018      	b.n	8009608 <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	edd3 7a00 	vldr	s15, [r3]
 80095e2:	eeb0 0a67 	vmov.f32	s0, s15
 80095e6:	f00b f9c1 	bl	801496c <log10f>
 80095ea:	eef0 7a40 	vmov.f32	s15, s0
 80095ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	4413      	add	r3, r2
 80095f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80095fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095fe:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	3301      	adds	r3, #1
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	429a      	cmp	r2, r3
 800960e:	d3e2      	bcc.n	80095d6 <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 8009610:	2300      	movs	r3, #0
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
 8009614:	e022      	b.n	800965c <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	ed93 7a00 	vldr	s14, [r3]
 8009622:	edd7 7a07 	vldr	s15, [r7, #28]
 8009626:	eef1 7a67 	vneg.f32	s15, s15
 800962a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800962e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009632:	d504      	bpl.n	800963e <LogMelSpectrogramColumn+0x12e>
 8009634:	edd7 7a07 	vldr	s15, [r7, #28]
 8009638:	eef1 7a67 	vneg.f32	s15, s15
 800963c:	e005      	b.n	800964a <LogMelSpectrogramColumn+0x13a>
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4413      	add	r3, r2
 8009646:	edd3 7a00 	vldr	s15, [r3]
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	3301      	adds	r3, #1
 800965a:	62bb      	str	r3, [r7, #40]	; 0x28
 800965c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	429a      	cmp	r2, r3
 8009662:	d3d8      	bcc.n	8009616 <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 8009664:	e01b      	b.n	800969e <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 8009666:	2300      	movs	r3, #0
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
 800966a:	e014      	b.n	8009696 <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	4413      	add	r3, r2
 8009674:	edd3 7a00 	vldr	s15, [r3]
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	18d4      	adds	r4, r2, r3
 8009680:	eeb0 0a67 	vmov.f32	s0, s15
 8009684:	f00b f93c 	bl	8014900 <logf>
 8009688:	eef0 7a40 	vmov.f32	s15, s0
 800968c:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	3301      	adds	r3, #1
 8009694:	627b      	str	r3, [r7, #36]	; 0x24
 8009696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	429a      	cmp	r2, r3
 800969c:	d3e6      	bcc.n	800966c <LogMelSpectrogramColumn+0x15c>
}
 800969e:	bf00      	nop
 80096a0:	373c      	adds	r7, #60	; 0x3c
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd90      	pop	{r4, r7, pc}

080096a6 <MfccColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output MFCC spectrogram column.
 * @return     None
 */
void MfccColumn(MfccTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b086      	sub	sp, #24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	60f8      	str	r0, [r7, #12]
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->pScratch;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	617b      	str	r3, [r7, #20]

  LogMelSpectrogramColumn(S->LogMelConf, pInSignal, tmp_buffer);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff ff25 	bl	8009510 <LogMelSpectrogramColumn>

  /* DCT for computing MFCCs from spectrogram slice. */
  DCT(S->pDCT, tmp_buffer, pOutCol);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6979      	ldr	r1, [r7, #20]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fcd6 	bl	8009080 <DCT>
}
 80096d4:	bf00      	nop
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b0a4      	sub	sp, #144	; 0x90
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e8:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096f6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	330c      	adds	r3, #12
 8009712:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8009732:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009736:	4618      	mov	r0, r3
 8009738:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800973c:	f000 f9c8 	bl	8009ad0 <MelScale>
 8009740:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8009744:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009748:	4618      	mov	r0, r3
 800974a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800974e:	f000 f9bf 	bl	8009ad0 <MelScale>
 8009752:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8009756:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800975a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800975e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009764:	3301      	adds	r3, #1
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800976e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009772:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8009776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009778:	ee07 3a90 	vmov	s15, r3
 800977c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009780:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009784:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800978a:	085b      	lsrs	r3, r3, #1
 800978c:	ee07 3a90 	vmov	s15, r3
 8009790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009798:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 800979c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 80097a2:	2300      	movs	r3, #0
 80097a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80097a6:	e133      	b.n	8009a10 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 80097a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d044      	beq.n	8009838 <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 80097ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097b0:	ee07 3a90 	vmov	s15, r3
 80097b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80097bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80097c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80097cc:	4618      	mov	r0, r3
 80097ce:	eeb0 0a67 	vmov.f32	s0, s15
 80097d2:	f000 f9ed 	bl	8009bb0 <InverseMelScale>
 80097d6:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 80097da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097dc:	3301      	adds	r3, #1
 80097de:	ee07 3a90 	vmov	s15, r3
 80097e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80097ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80097f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80097fa:	4618      	mov	r0, r3
 80097fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009800:	f000 f9d6 	bl	8009bb0 <InverseMelScale>
 8009804:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8009808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800980a:	3302      	adds	r3, #2
 800980c:	ee07 3a90 	vmov	s15, r3
 8009810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009814:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800981c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009824:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009828:	4618      	mov	r0, r3
 800982a:	eeb0 0a67 	vmov.f32	s0, s15
 800982e:	f000 f9bf 	bl	8009bb0 <InverseMelScale>
 8009832:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 8009836:	e02e      	b.n	8009896 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 8009838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009842:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800984e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009852:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 8009856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009858:	3301      	adds	r3, #1
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009862:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800986e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009872:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8009876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009878:	3302      	adds	r3, #2
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009882:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800988e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009892:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 8009896:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800989a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800989e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 80098a6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80098aa:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80098ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098b2:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 80098b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 80098be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 80098c6:	2300      	movs	r3, #0
 80098c8:	667b      	str	r3, [r7, #100]	; 0x64
 80098ca:	e098      	b.n	80099fe <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 80098cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 80098d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098d4:	ee07 3a90 	vmov	s15, r3
 80098d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80098e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 80098e8:	e011      	b.n	800990e <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 80098ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80098f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80098f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098fc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009900:	4618      	mov	r0, r3
 8009902:	eeb0 0a67 	vmov.f32	s0, s15
 8009906:	f000 f8e3 	bl	8009ad0 <MelScale>
 800990a:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 800990e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009912:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800991a:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 800991e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8009922:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800992a:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 800992e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009932:	eef1 6a67 	vneg.f32	s13, s15
 8009936:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800993a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800993e:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 8009942:	edd7 6a06 	vldr	s13, [r7, #24]
 8009946:	ed97 7a08 	vldr	s14, [r7, #32]
 800994a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800994e:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 8009952:	ed97 7a05 	vldr	s14, [r7, #20]
 8009956:	edd7 7a04 	vldr	s15, [r7, #16]
 800995a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800995e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009962:	d502      	bpl.n	800996a <MelFilterbank_Init+0x28e>
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	673b      	str	r3, [r7, #112]	; 0x70
 8009968:	e001      	b.n	800996e <MelFilterbank_Init+0x292>
      else min = upper;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 800996e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997a:	dd2f      	ble.n	80099dc <MelFilterbank_Init+0x300>
      {
        weight = min;
 800997c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800997e:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 8009980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009982:	2b00      	cmp	r3, #0
 8009984:	d013      	beq.n	80099ae <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8009986:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800998a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800998e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009992:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800999a:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 800999e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80099a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80099a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099aa:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 80099ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099b2:	1d1a      	adds	r2, r3, #4
 80099b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80099b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099ba:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 80099bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099c4:	d102      	bne.n	80099cc <MelFilterbank_Init+0x2f0>
          start_index = j;
 80099c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 80099cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 80099d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099da:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 80099dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099e2:	4413      	add	r3, r2
 80099e4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80099e8:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 80099ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099f0:	4413      	add	r3, r2
 80099f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80099f6:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 80099f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099fa:	3301      	adds	r3, #1
 80099fc:	667b      	str	r3, [r7, #100]	; 0x64
 80099fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a00:	085b      	lsrs	r3, r3, #1
 8009a02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a04:	429a      	cmp	r2, r3
 8009a06:	f4ff af61 	bcc.w	80098cc <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 8009a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a14:	429a      	cmp	r2, r3
 8009a16:	f4ff aec7 	bcc.w	80097a8 <MelFilterbank_Init+0xcc>
    }
  }
}
 8009a1a:	bf00      	nop
 8009a1c:	bf00      	nop
 8009a1e:	3790      	adds	r7, #144	; 0x90
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b08d      	sub	sp, #52	; 0x34
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4c:	e034      	b.n	8009ab8 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	4413      	add	r3, r2
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	4413      	add	r3, r2
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 8009a66:	f04f 0300 	mov.w	r3, #0
 8009a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8009a6c:	8a7b      	ldrh	r3, [r7, #18]
 8009a6e:	623b      	str	r3, [r7, #32]
 8009a70:	e015      	b.n	8009a9e <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	4413      	add	r3, r2
 8009a7a:	ed93 7a00 	vldr	s14, [r3]
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	1d1a      	adds	r2, r3, #4
 8009a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a84:	edd3 7a00 	vldr	s15, [r3]
 8009a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a94:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	623b      	str	r3, [r7, #32]
 8009a9e:	8a3b      	ldrh	r3, [r7, #16]
 8009aa0:	6a3a      	ldr	r2, [r7, #32]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d9e5      	bls.n	8009a72 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ab0:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d3c6      	bcc.n	8009a4e <MelFilterbank+0x2a>
  }
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	3734      	adds	r7, #52	; 0x34
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
	...

08009ad0 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	ed87 0a01 	vstr	s0, [r7, #4]
 8009ada:	4603      	mov	r3, r0
 8009adc:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d042      	beq.n	8009b6a <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8009ae4:	f04f 0300 	mov.w	r3, #0
 8009ae8:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8009aea:	4b2c      	ldr	r3, [pc, #176]	; (8009b9c <MelScale+0xcc>)
 8009aec:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 8009aee:	ed97 7a01 	vldr	s14, [r7, #4]
 8009af2:	edd7 7a06 	vldr	s15, [r7, #24]
 8009af6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009afa:	ed97 7a05 	vldr	s14, [r7, #20]
 8009afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b02:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8009b06:	4b26      	ldr	r3, [pc, #152]	; (8009ba0 <MelScale+0xd0>)
 8009b08:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 8009b0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8009b0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b12:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009b16:	ed97 7a05 	vldr	s14, [r7, #20]
 8009b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b1e:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8009b22:	4b20      	ldr	r3, [pc, #128]	; (8009ba4 <MelScale+0xd4>)
 8009b24:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 8009b26:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b36:	db15      	blt.n	8009b64 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 8009b38:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009b44:	eeb0 0a66 	vmov.f32	s0, s13
 8009b48:	f00a feda 	bl	8014900 <logf>
 8009b4c:	eef0 6a40 	vmov.f32	s13, s0
 8009b50:	ed97 7a02 	vldr	s14, [r7, #8]
 8009b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b58:	ed97 7a03 	vldr	s14, [r7, #12]
 8009b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b60:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 8009b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b68:	e013      	b.n	8009b92 <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 8009b6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b6e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8009ba8 <MelScale+0xd8>
 8009b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b82:	f00a febd 	bl	8014900 <logf>
 8009b86:	eef0 7a40 	vmov.f32	s15, s0
 8009b8a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009bac <MelScale+0xdc>
 8009b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 8009b92:	eeb0 0a67 	vmov.f32	s0, s15
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	42855555 	.word	0x42855555
 8009ba0:	447a0000 	.word	0x447a0000
 8009ba4:	3d8ccdbb 	.word	0x3d8ccdbb
 8009ba8:	442f0000 	.word	0x442f0000
 8009bac:	448ce000 	.word	0x448ce000

08009bb0 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8009bba:	4603      	mov	r3, r0
 8009bbc:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 8009bbe:	78fb      	ldrb	r3, [r7, #3]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d042      	beq.n	8009c4a <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8009bc4:	f04f 0300 	mov.w	r3, #0
 8009bc8:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8009bca:	4b2c      	ldr	r3, [pc, #176]	; (8009c7c <InverseMelScale+0xcc>)
 8009bcc:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 8009bce:	ed97 7a05 	vldr	s14, [r7, #20]
 8009bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8009bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bda:	ed97 7a06 	vldr	s14, [r7, #24]
 8009bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009be2:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8009be6:	4b26      	ldr	r3, [pc, #152]	; (8009c80 <InverseMelScale+0xd0>)
 8009be8:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 8009bea:	ed97 7a04 	vldr	s14, [r7, #16]
 8009bee:	edd7 7a06 	vldr	s15, [r7, #24]
 8009bf2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009bf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8009bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bfe:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8009c02:	4b20      	ldr	r3, [pc, #128]	; (8009c84 <InverseMelScale+0xd4>)
 8009c04:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 8009c06:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	db15      	blt.n	8009c44 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 8009c18:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c24:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8009c30:	f00a fe28 	bl	8014884 <expf>
 8009c34:	eeb0 7a40 	vmov.f32	s14, s0
 8009c38:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c40:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 8009c44:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c48:	e013      	b.n	8009c72 <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 8009c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c4e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8009c88 <InverseMelScale+0xd8>
 8009c52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009c56:	eeb0 0a47 	vmov.f32	s0, s14
 8009c5a:	f00a fe13 	bl	8014884 <expf>
 8009c5e:	eef0 7a40 	vmov.f32	s15, s0
 8009c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c6a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009c8c <InverseMelScale+0xdc>
 8009c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 8009c72:	eeb0 0a67 	vmov.f32	s0, s15
 8009c76:	3720      	adds	r7, #32
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	42855555 	.word	0x42855555
 8009c80:	447a0000 	.word	0x447a0000
 8009c84:	3d8ccdbb 	.word	0x3d8ccdbb
 8009c88:	448ce000 	.word	0x448ce000
 8009c8c:	442f0000 	.word	0x442f0000

08009c90 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	617b      	str	r3, [r7, #20]

  switch (type)
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d01c      	beq.n	8009ce2 <Window_Init+0x52>
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	dc25      	bgt.n	8009cf8 <Window_Init+0x68>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <Window_Init+0x26>
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d00b      	beq.n	8009ccc <Window_Init+0x3c>
 8009cb4:	e020      	b.n	8009cf8 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 8009cb6:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8009d10 <Window_Init+0x80>
 8009cba:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8009d18 <Window_Init+0x88>
 8009cbe:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8009d18 <Window_Init+0x88>
 8009cc2:	68b9      	ldr	r1, [r7, #8]
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 f83b 	bl	8009d40 <cosine_sum_window_create>
      break;
 8009cca:	e019      	b.n	8009d00 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 8009ccc:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8009d10 <Window_Init+0x80>
 8009cd0:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8009d20 <Window_Init+0x90>
 8009cd4:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8009d28 <Window_Init+0x98>
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 f830 	bl	8009d40 <cosine_sum_window_create>
      break;
 8009ce0:	e00e      	b.n	8009d00 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8009ce2:	ed9f 2b13 	vldr	d2, [pc, #76]	; 8009d30 <Window_Init+0xa0>
 8009ce6:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8009d18 <Window_Init+0x88>
 8009cea:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8009d38 <Window_Init+0xa8>
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f825 	bl	8009d40 <cosine_sum_window_create>
      break;
 8009cf6:	e003      	b.n	8009d00 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8009cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cfc:	617b      	str	r3, [r7, #20]
      break;
 8009cfe:	bf00      	nop
  }

  return status;
 8009d00:	697b      	ldr	r3, [r7, #20]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
	...
 8009d1c:	3fe00000 	.word	0x3fe00000
 8009d20:	d70a3d71 	.word	0xd70a3d71
 8009d24:	3fdd70a3 	.word	0x3fdd70a3
 8009d28:	147ae148 	.word	0x147ae148
 8009d2c:	3fe147ae 	.word	0x3fe147ae
 8009d30:	47ae147b 	.word	0x47ae147b
 8009d34:	3fb47ae1 	.word	0x3fb47ae1
 8009d38:	ae147ae1 	.word	0xae147ae1
 8009d3c:	3fdae147 	.word	0x3fdae147

08009d40 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8009d40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009d44:	b08a      	sub	sp, #40	; 0x28
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	61f8      	str	r0, [r7, #28]
 8009d4a:	61b9      	str	r1, [r7, #24]
 8009d4c:	ed87 0b04 	vstr	d0, [r7, #16]
 8009d50:	ed87 1b02 	vstr	d1, [r7, #8]
 8009d54:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 8009d58:	2300      	movs	r3, #0
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5c:	e067      	b.n	8009e2e <cosine_sum_window_create+0xee>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8009d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d60:	f7f6 fbe0 	bl	8000524 <__aeabi_ui2d>
 8009d64:	a338      	add	r3, pc, #224	; (adr r3, 8009e48 <cosine_sum_window_create+0x108>)
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f7f6 fc55 	bl	8000618 <__aeabi_dmul>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4614      	mov	r4, r2
 8009d74:	461d      	mov	r5, r3
 8009d76:	69b8      	ldr	r0, [r7, #24]
 8009d78:	f7f6 fbd4 	bl	8000524 <__aeabi_ui2d>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4620      	mov	r0, r4
 8009d82:	4629      	mov	r1, r5
 8009d84:	f7f6 fd72 	bl	800086c <__aeabi_ddiv>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	ec43 2b17 	vmov	d7, r2, r3
 8009d90:	eeb0 0a47 	vmov.f32	s0, s14
 8009d94:	eef0 0a67 	vmov.f32	s1, s15
 8009d98:	f00a fcc2 	bl	8014720 <cos>
 8009d9c:	ec51 0b10 	vmov	r0, r1, d0
 8009da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009da4:	f7f6 fc38 	bl	8000618 <__aeabi_dmul>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009db0:	f7f6 fa7a 	bl	80002a8 <__aeabi_dsub>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4614      	mov	r4, r2
 8009dba:	461d      	mov	r5, r3
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8009dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dbe:	f7f6 fbb1 	bl	8000524 <__aeabi_ui2d>
 8009dc2:	a323      	add	r3, pc, #140	; (adr r3, 8009e50 <cosine_sum_window_create+0x110>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f7f6 fc26 	bl	8000618 <__aeabi_dmul>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4690      	mov	r8, r2
 8009dd2:	4699      	mov	r9, r3
 8009dd4:	69b8      	ldr	r0, [r7, #24]
 8009dd6:	f7f6 fba5 	bl	8000524 <__aeabi_ui2d>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4640      	mov	r0, r8
 8009de0:	4649      	mov	r1, r9
 8009de2:	f7f6 fd43 	bl	800086c <__aeabi_ddiv>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	ec43 2b17 	vmov	d7, r2, r3
 8009dee:	eeb0 0a47 	vmov.f32	s0, s14
 8009df2:	eef0 0a67 	vmov.f32	s1, s15
 8009df6:	f00a fc93 	bl	8014720 <cos>
 8009dfa:	ec51 0b10 	vmov	r0, r1, d0
 8009dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e02:	f7f6 fc09 	bl	8000618 <__aeabi_dmul>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fa4d 	bl	80002ac <__adddf3>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4610      	mov	r0, r2
 8009e18:	4619      	mov	r1, r3
    *pDst++ = a0
 8009e1a:	69fc      	ldr	r4, [r7, #28]
 8009e1c:	1d23      	adds	r3, r4, #4
 8009e1e:	61fb      	str	r3, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8009e20:	f7f6 fef2 	bl	8000c08 <__aeabi_d2f>
 8009e24:	4603      	mov	r3, r0
    *pDst++ = a0
 8009e26:	6023      	str	r3, [r4, #0]
  for (uint32_t i = 0; i < len; i++)
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d393      	bcc.n	8009d5e <cosine_sum_window_create+0x1e>
  }
}
 8009e36:	bf00      	nop
 8009e38:	bf00      	nop
 8009e3a:	3728      	adds	r7, #40	; 0x28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e42:	bf00      	nop
 8009e44:	f3af 8000 	nop.w
 8009e48:	54442d18 	.word	0x54442d18
 8009e4c:	401921fb 	.word	0x401921fb
 8009e50:	54442d18 	.word	0x54442d18
 8009e54:	402921fb 	.word	0x402921fb

08009e58 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
	  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);*/
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8009e5c:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <MX_PDM2PCM_Init+0x48>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8009e62:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <MX_PDM2PCM_Init+0x48>)
 8009e64:	2201      	movs	r2, #1
 8009e66:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8009e68:	4b0d      	ldr	r3, [pc, #52]	; (8009ea0 <MX_PDM2PCM_Init+0x48>)
 8009e6a:	4a0e      	ldr	r2, [pc, #56]	; (8009ea4 <MX_PDM2PCM_Init+0x4c>)
 8009e6c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <MX_PDM2PCM_Init+0x48>)
 8009e70:	2201      	movs	r2, #1
 8009e72:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8009e74:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <MX_PDM2PCM_Init+0x48>)
 8009e76:	2201      	movs	r2, #1
 8009e78:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8009e7a:	4809      	ldr	r0, [pc, #36]	; (8009ea0 <MX_PDM2PCM_Init+0x48>)
 8009e7c:	f001 ff2c 	bl	800bcd8 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8009e80:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <MX_PDM2PCM_Init+0x50>)
 8009e82:	2202      	movs	r2, #2
 8009e84:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8009e86:	4b08      	ldr	r3, [pc, #32]	; (8009ea8 <MX_PDM2PCM_Init+0x50>)
 8009e88:	2210      	movs	r2, #16
 8009e8a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 8009e8c:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <MX_PDM2PCM_Init+0x50>)
 8009e8e:	2218      	movs	r2, #24
 8009e90:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8009e92:	4905      	ldr	r1, [pc, #20]	; (8009ea8 <MX_PDM2PCM_Init+0x50>)
 8009e94:	4802      	ldr	r0, [pc, #8]	; (8009ea0 <MX_PDM2PCM_Init+0x48>)
 8009e96:	f001 ffa9 	bl	800bdec <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8009e9a:	bf00      	nop
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20013c58 	.word	0x20013c58
 8009ea4:	7d70a3d6 	.word	0x7d70a3d6
 8009ea8:	20013c50 	.word	0x20013c50

08009eac <speech_commands_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool speech_commands_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8009eba:	f107 030c 	add.w	r3, r7, #12
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f002 f916 	bl	800c0f4 <ai_platform_get_activations_map>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d053      	beq.n	8009f76 <speech_commands_model_configure_activations+0xca>
    /* Updating activations (byte) offsets */
    serving_default_conv2d_21_input0_output_array.data = AI_PTR(NULL);
 8009ece:	4b2c      	ldr	r3, [pc, #176]	; (8009f80 <speech_commands_model_configure_activations+0xd4>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	609a      	str	r2, [r3, #8]
    serving_default_conv2d_21_input0_output_array.data_start = AI_PTR(NULL);
 8009ed4:	4b2a      	ldr	r3, [pc, #168]	; (8009f80 <speech_commands_model_configure_activations+0xd4>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	60da      	str	r2, [r3, #12]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 416);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009ee0:	4a28      	ldr	r2, [pc, #160]	; (8009f84 <speech_commands_model_configure_activations+0xd8>)
 8009ee2:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 416);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009eea:	4a26      	ldr	r2, [pc, #152]	; (8009f84 <speech_commands_model_configure_activations+0xd8>)
 8009eec:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(activations_map[0] + 0);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a25      	ldr	r2, [pc, #148]	; (8009f88 <speech_commands_model_configure_activations+0xdc>)
 8009ef2:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4a24      	ldr	r2, [pc, #144]	; (8009f88 <speech_commands_model_configure_activations+0xdc>)
 8009ef8:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 2304);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	4a22      	ldr	r2, [pc, #136]	; (8009f8c <speech_commands_model_configure_activations+0xe0>)
 8009f02:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 2304);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0a:	4a20      	ldr	r2, [pc, #128]	; (8009f8c <speech_commands_model_configure_activations+0xe0>)
 8009f0c:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4a1f      	ldr	r2, [pc, #124]	; (8009f90 <speech_commands_model_configure_activations+0xe4>)
 8009f12:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4a1e      	ldr	r2, [pc, #120]	; (8009f90 <speech_commands_model_configure_activations+0xe4>)
 8009f18:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations_map[0] + 256);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f20:	4a1c      	ldr	r2, [pc, #112]	; (8009f94 <speech_commands_model_configure_activations+0xe8>)
 8009f22:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f2a:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <speech_commands_model_configure_activations+0xe8>)
 8009f2c:	60d3      	str	r3, [r2, #12]
    nl_5_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4a19      	ldr	r2, [pc, #100]	; (8009f98 <speech_commands_model_configure_activations+0xec>)
 8009f32:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4a18      	ldr	r2, [pc, #96]	; (8009f98 <speech_commands_model_configure_activations+0xec>)
 8009f38:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(activations_map[0] + 256);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f40:	4a16      	ldr	r2, [pc, #88]	; (8009f9c <speech_commands_model_configure_activations+0xf0>)
 8009f42:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f4a:	4a14      	ldr	r2, [pc, #80]	; (8009f9c <speech_commands_model_configure_activations+0xf0>)
 8009f4c:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(NULL);
 8009f4e:	4b14      	ldr	r3, [pc, #80]	; (8009fa0 <speech_commands_model_configure_activations+0xf4>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	609a      	str	r2, [r3, #8]
    nl_7_output_array.data_start = AI_PTR(NULL);
 8009f54:	4b12      	ldr	r3, [pc, #72]	; (8009fa0 <speech_commands_model_configure_activations+0xf4>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	60da      	str	r2, [r3, #12]
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 12064);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8009f60:	3320      	adds	r3, #32
 8009f62:	4a10      	ldr	r2, [pc, #64]	; (8009fa4 <speech_commands_model_configure_activations+0xf8>)
 8009f64:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 12064);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8009f6c:	3320      	adds	r3, #32
 8009f6e:	4a0d      	ldr	r2, [pc, #52]	; (8009fa4 <speech_commands_model_configure_activations+0xf8>)
 8009f70:	60d3      	str	r3, [r2, #12]
    
    return true;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e000      	b.n	8009f78 <speech_commands_model_configure_activations+0xcc>
  }
  return false;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	200004b8 	.word	0x200004b8
 8009f84:	200004c8 	.word	0x200004c8
 8009f88:	200004d8 	.word	0x200004d8
 8009f8c:	200004e8 	.word	0x200004e8
 8009f90:	200004f8 	.word	0x200004f8
 8009f94:	20000508 	.word	0x20000508
 8009f98:	20000518 	.word	0x20000518
 8009f9c:	20000528 	.word	0x20000528
 8009fa0:	20000538 	.word	0x20000538
 8009fa4:	200005e8 	.word	0x200005e8

08009fa8 <speech_commands_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool speech_commands_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8009fb6:	f107 030c 	add.w	r3, r7, #12
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f002 f864 	bl	800c08c <ai_platform_get_weights_map>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 80b0 	beq.w	800a12c <speech_commands_model_configure_weights+0x184>
    /* Updating weights with array addresses */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8009fcc:	4b5a      	ldr	r3, [pc, #360]	; (800a138 <speech_commands_model_configure_weights+0x190>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fd4:	4a58      	ldr	r2, [pc, #352]	; (800a138 <speech_commands_model_configure_weights+0x190>)
 8009fd6:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4a57      	ldr	r2, [pc, #348]	; (800a138 <speech_commands_model_configure_weights+0x190>)
 8009fdc:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	4a55      	ldr	r2, [pc, #340]	; (800a138 <speech_commands_model_configure_weights+0x190>)
 8009fe2:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8009fe4:	4b55      	ldr	r3, [pc, #340]	; (800a13c <speech_commands_model_configure_weights+0x194>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fec:	4a53      	ldr	r2, [pc, #332]	; (800a13c <speech_commands_model_configure_weights+0x194>)
 8009fee:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 288);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009ff6:	4a51      	ldr	r2, [pc, #324]	; (800a13c <speech_commands_model_configure_weights+0x194>)
 8009ff8:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 288);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a000:	4a4e      	ldr	r2, [pc, #312]	; (800a13c <speech_commands_model_configure_weights+0x194>)
 800a002:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800a004:	4b4e      	ldr	r3, [pc, #312]	; (800a140 <speech_commands_model_configure_weights+0x198>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a00c:	4a4c      	ldr	r2, [pc, #304]	; (800a140 <speech_commands_model_configure_weights+0x198>)
 800a00e:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 320);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a016:	4a4a      	ldr	r2, [pc, #296]	; (800a140 <speech_commands_model_configure_weights+0x198>)
 800a018:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 320);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a020:	4a47      	ldr	r2, [pc, #284]	; (800a140 <speech_commands_model_configure_weights+0x198>)
 800a022:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800a024:	4b47      	ldr	r3, [pc, #284]	; (800a144 <speech_commands_model_configure_weights+0x19c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a02c:	4a45      	ldr	r2, [pc, #276]	; (800a144 <speech_commands_model_configure_weights+0x19c>)
 800a02e:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 2624);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800a036:	4a43      	ldr	r2, [pc, #268]	; (800a144 <speech_commands_model_configure_weights+0x19c>)
 800a038:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights_map[0] + 2624);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800a040:	4a40      	ldr	r2, [pc, #256]	; (800a144 <speech_commands_model_configure_weights+0x19c>)
 800a042:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800a044:	4b40      	ldr	r3, [pc, #256]	; (800a148 <speech_commands_model_configure_weights+0x1a0>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a04c:	4a3e      	ldr	r2, [pc, #248]	; (800a148 <speech_commands_model_configure_weights+0x1a0>)
 800a04e:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights_map[0] + 2656);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 800a056:	4a3c      	ldr	r2, [pc, #240]	; (800a148 <speech_commands_model_configure_weights+0x1a0>)
 800a058:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights_map[0] + 2656);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 800a060:	4a39      	ldr	r2, [pc, #228]	; (800a148 <speech_commands_model_configure_weights+0x1a0>)
 800a062:	60d3      	str	r3, [r2, #12]
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800a064:	4b39      	ldr	r3, [pc, #228]	; (800a14c <speech_commands_model_configure_weights+0x1a4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a06c:	4a37      	ldr	r2, [pc, #220]	; (800a14c <speech_commands_model_configure_weights+0x1a4>)
 800a06e:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights_map[0] + 150112);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800a076:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a07a:	4a34      	ldr	r2, [pc, #208]	; (800a14c <speech_commands_model_configure_weights+0x1a4>)
 800a07c:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights_map[0] + 150112);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800a084:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a088:	4a30      	ldr	r2, [pc, #192]	; (800a14c <speech_commands_model_configure_weights+0x1a4>)
 800a08a:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800a08c:	4b30      	ldr	r3, [pc, #192]	; (800a150 <speech_commands_model_configure_weights+0x1a8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a094:	4a2e      	ldr	r2, [pc, #184]	; (800a150 <speech_commands_model_configure_weights+0x1a8>)
 800a096:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights_map[0] + 150368);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800a09e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800a0a2:	4a2b      	ldr	r2, [pc, #172]	; (800a150 <speech_commands_model_configure_weights+0x1a8>)
 800a0a4:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights_map[0] + 150368);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800a0ac:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800a0b0:	4a27      	ldr	r2, [pc, #156]	; (800a150 <speech_commands_model_configure_weights+0x1a8>)
 800a0b2:	60d3      	str	r3, [r2, #12]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800a0b4:	4b27      	ldr	r3, [pc, #156]	; (800a154 <speech_commands_model_configure_weights+0x1ac>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0bc:	4a25      	ldr	r2, [pc, #148]	; (800a154 <speech_commands_model_configure_weights+0x1ac>)
 800a0be:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights_map[0] + 166752);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f503 3322 	add.w	r3, r3, #165888	; 0x28800
 800a0c6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800a0ca:	4a22      	ldr	r2, [pc, #136]	; (800a154 <speech_commands_model_configure_weights+0x1ac>)
 800a0cc:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights_map[0] + 166752);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f503 3322 	add.w	r3, r3, #165888	; 0x28800
 800a0d4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800a0d8:	4a1e      	ldr	r2, [pc, #120]	; (800a154 <speech_commands_model_configure_weights+0x1ac>)
 800a0da:	60d3      	str	r3, [r2, #12]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800a0dc:	4b1e      	ldr	r3, [pc, #120]	; (800a158 <speech_commands_model_configure_weights+0x1b0>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0e4:	4a1c      	ldr	r2, [pc, #112]	; (800a158 <speech_commands_model_configure_weights+0x1b0>)
 800a0e6:	6013      	str	r3, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights_map[0] + 167008);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 3323 	add.w	r3, r3, #166912	; 0x28c00
 800a0ee:	3360      	adds	r3, #96	; 0x60
 800a0f0:	4a19      	ldr	r2, [pc, #100]	; (800a158 <speech_commands_model_configure_weights+0x1b0>)
 800a0f2:	6093      	str	r3, [r2, #8]
    dense_6_weights_array.data_start = AI_PTR(weights_map[0] + 167008);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 3323 	add.w	r3, r3, #166912	; 0x28c00
 800a0fa:	3360      	adds	r3, #96	; 0x60
 800a0fc:	4a16      	ldr	r2, [pc, #88]	; (800a158 <speech_commands_model_configure_weights+0x1b0>)
 800a0fe:	60d3      	str	r3, [r2, #12]
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800a100:	4b16      	ldr	r3, [pc, #88]	; (800a15c <speech_commands_model_configure_weights+0x1b4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a108:	4a14      	ldr	r2, [pc, #80]	; (800a15c <speech_commands_model_configure_weights+0x1b4>)
 800a10a:	6013      	str	r3, [r2, #0]
    dense_6_bias_array.data = AI_PTR(weights_map[0] + 176736);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
 800a112:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a116:	4a11      	ldr	r2, [pc, #68]	; (800a15c <speech_commands_model_configure_weights+0x1b4>)
 800a118:	6093      	str	r3, [r2, #8]
    dense_6_bias_array.data_start = AI_PTR(weights_map[0] + 176736);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
 800a120:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a124:	4a0d      	ldr	r2, [pc, #52]	; (800a15c <speech_commands_model_configure_weights+0x1b4>)
 800a126:	60d3      	str	r3, [r2, #12]
    return true;
 800a128:	2301      	movs	r3, #1
 800a12a:	e000      	b.n	800a12e <speech_commands_model_configure_weights+0x186>
  }
  return false;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20000548 	.word	0x20000548
 800a13c:	20000558 	.word	0x20000558
 800a140:	20000568 	.word	0x20000568
 800a144:	20000578 	.word	0x20000578
 800a148:	20000588 	.word	0x20000588
 800a14c:	20000598 	.word	0x20000598
 800a150:	200005a8 	.word	0x200005a8
 800a154:	200005b8 	.word	0x200005b8
 800a158:	200005c8 	.word	0x200005c8
 800a15c:	200005d8 	.word	0x200005d8

0800a160 <ai_speech_commands_model_create>:
}

AI_API_ENTRY
ai_error ai_speech_commands_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af02      	add	r7, sp, #8
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800a16a:	2300      	movs	r3, #0
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	2304      	movs	r3, #4
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	2301      	movs	r3, #1
 800a174:	4a04      	ldr	r2, [pc, #16]	; (800a188 <ai_speech_commands_model_create+0x28>)
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 ffef 	bl	800c15c <ai_platform_network_create>
 800a17e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20000e90 	.word	0x20000e90

0800a18c <ai_speech_commands_model_init>:
}

AI_API_ENTRY
ai_bool ai_speech_commands_model_init(
  ai_handle network, const ai_network_params* params)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f002 f8b5 	bl	800c308 <ai_platform_network_init>
 800a19e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <ai_speech_commands_model_init+0x1e>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e028      	b.n	800a1fc <ai_speech_commands_model_init+0x70>

  ai_bool ok = true;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	72fb      	strb	r3, [r7, #11]
  ok &= speech_commands_model_configure_weights(net_ctx, params);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7ff fef9 	bl	8009fa8 <speech_commands_model_configure_weights>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	bf14      	ite	ne
 800a1c2:	2301      	movne	r3, #1
 800a1c4:	2300      	moveq	r3, #0
 800a1c6:	72fb      	strb	r3, [r7, #11]
  ok &= speech_commands_model_configure_activations(net_ctx, params);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f7ff fe6e 	bl	8009eac <speech_commands_model_configure_activations>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bf14      	ite	ne
 800a1dc:	2301      	movne	r3, #1
 800a1de:	2300      	moveq	r3, #0
 800a1e0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f002 f9a2 	bl	800c52c <ai_platform_network_post_init>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	bf14      	ite	ne
 800a1f4:	2301      	movne	r3, #1
 800a1f6:	2300      	moveq	r3, #0
 800a1f8:	72fb      	strb	r3, [r7, #11]

  return ok;
 800a1fa:	7afb      	ldrb	r3, [r7, #11]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <ai_speech_commands_model_run>:


AI_API_ENTRY
ai_i32 ai_speech_commands_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	68b9      	ldr	r1, [r7, #8]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f002 fa1d 	bl	800c654 <ai_platform_network_process>
 800a21a:	4603      	mov	r3, r0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <ai_speech_commands_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_speech_commands_model_data_weights_get(void)
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_speech_commands_model_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_speech_commands_model_weights_map);
 800a228:	4b02      	ldr	r3, [pc, #8]	; (800a234 <ai_speech_commands_model_data_weights_get+0x10>)

}
 800a22a:	4618      	mov	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	0805f338 	.word	0x0805f338

0800a238 <D16_GENERIC>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	b089      	sub	sp, #36	; 0x24
 800a23e:	68d4      	ldr	r4, [r2, #12]
 800a240:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a242:	6993      	ldr	r3, [r2, #24]
 800a244:	9407      	str	r4, [sp, #28]
 800a246:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a248:	9306      	str	r3, [sp, #24]
 800a24a:	9402      	str	r4, [sp, #8]
 800a24c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a250:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800a254:	69d3      	ldr	r3, [r2, #28]
 800a256:	6896      	ldr	r6, [r2, #8]
 800a258:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a25a:	9103      	str	r1, [sp, #12]
 800a25c:	2d00      	cmp	r5, #0
 800a25e:	d066      	beq.n	800a32e <D16_GENERIC+0xf6>
 800a260:	f004 0510 	and.w	r5, r4, #16
 800a264:	f004 0420 	and.w	r4, r4, #32
 800a268:	9504      	str	r5, [sp, #16]
 800a26a:	4938      	ldr	r1, [pc, #224]	; (800a34c <D16_GENERIC+0x114>)
 800a26c:	9405      	str	r4, [sp, #20]
 800a26e:	f04f 0e00 	mov.w	lr, #0
 800a272:	4635      	mov	r5, r6
 800a274:	e04f      	b.n	800a316 <D16_GENERIC+0xde>
 800a276:	5d87      	ldrb	r7, [r0, r6]
 800a278:	7804      	ldrb	r4, [r0, #0]
 800a27a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a27e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800a282:	b2e6      	uxtb	r6, r4
 800a284:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a288:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a28c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a290:	4433      	add	r3, r6
 800a292:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800a296:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800a29a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a29e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800a2a2:	0aa3      	lsrs	r3, r4, #10
 800a2a4:	4c2a      	ldr	r4, [pc, #168]	; (800a350 <D16_GENERIC+0x118>)
 800a2a6:	fb26 5404 	smlad	r4, r6, r4, r5
 800a2aa:	4d2a      	ldr	r5, [pc, #168]	; (800a354 <D16_GENERIC+0x11c>)
 800a2ac:	fb26 f505 	smuad	r5, r6, r5
 800a2b0:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800a2b4:	eb04 080a 	add.w	r8, r4, sl
 800a2b8:	eba8 080b 	sub.w	r8, r8, fp
 800a2bc:	4646      	mov	r6, r8
 800a2be:	17f7      	asrs	r7, r6, #31
 800a2c0:	e9cd 6700 	strd	r6, r7, [sp]
 800a2c4:	9e04      	ldr	r6, [sp, #16]
 800a2c6:	f10e 0c01 	add.w	ip, lr, #1
 800a2ca:	b16e      	cbz	r6, 800a2e8 <D16_GENERIC+0xb0>
 800a2cc:	6a16      	ldr	r6, [r2, #32]
 800a2ce:	9f01      	ldr	r7, [sp, #4]
 800a2d0:	fba8 8906 	umull	r8, r9, r8, r6
 800a2d4:	fb06 9907 	mla	r9, r6, r7, r9
 800a2d8:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800a2dc:	f149 0900 	adc.w	r9, r9, #0
 800a2e0:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800a2e4:	46a3      	mov	fp, r4
 800a2e6:	4654      	mov	r4, sl
 800a2e8:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a2ea:	9f02      	ldr	r7, [sp, #8]
 800a2ec:	0424      	lsls	r4, r4, #16
 800a2ee:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a2f2:	f04f 0900 	mov.w	r9, #0
 800a2f6:	fb0e fe06 	mul.w	lr, lr, r6
 800a2fa:	fbc7 8904 	smlal	r8, r9, r7, r4
 800a2fe:	9e03      	ldr	r6, [sp, #12]
 800a300:	464f      	mov	r7, r9
 800a302:	10bc      	asrs	r4, r7, #2
 800a304:	f304 040f 	ssat	r4, #16, r4
 800a308:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800a30c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a30e:	fa1f fe8c 	uxth.w	lr, ip
 800a312:	4574      	cmp	r4, lr
 800a314:	d90a      	bls.n	800a32c <D16_GENERIC+0xf4>
 800a316:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a318:	2c01      	cmp	r4, #1
 800a31a:	b2e6      	uxtb	r6, r4
 800a31c:	d1ab      	bne.n	800a276 <D16_GENERIC+0x3e>
 800a31e:	9e05      	ldr	r6, [sp, #20]
 800a320:	f850 4b02 	ldr.w	r4, [r0], #2
 800a324:	2e00      	cmp	r6, #0
 800a326:	d0ac      	beq.n	800a282 <D16_GENERIC+0x4a>
 800a328:	ba64      	rev16	r4, r4
 800a32a:	e7aa      	b.n	800a282 <D16_GENERIC+0x4a>
 800a32c:	462e      	mov	r6, r5
 800a32e:	9907      	ldr	r1, [sp, #28]
 800a330:	61d3      	str	r3, [r2, #28]
 800a332:	9b06      	ldr	r3, [sp, #24]
 800a334:	6096      	str	r6, [r2, #8]
 800a336:	2000      	movs	r0, #0
 800a338:	60d1      	str	r1, [r2, #12]
 800a33a:	f8c2 a010 	str.w	sl, [r2, #16]
 800a33e:	f8c2 b014 	str.w	fp, [r2, #20]
 800a342:	6193      	str	r3, [r2, #24]
 800a344:	b009      	add	sp, #36	; 0x24
 800a346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34a:	bf00      	nop
 800a34c:	20000000 	.word	0x20000000
 800a350:	00030001 	.word	0x00030001
 800a354:	00010003 	.word	0x00010003

0800a358 <D24_GENERIC>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a35e:	6993      	ldr	r3, [r2, #24]
 800a360:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a362:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a366:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800a36a:	6894      	ldr	r4, [r2, #8]
 800a36c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800a370:	b089      	sub	sp, #36	; 0x24
 800a372:	9307      	str	r3, [sp, #28]
 800a374:	9503      	str	r5, [sp, #12]
 800a376:	69d3      	ldr	r3, [r2, #28]
 800a378:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800a37a:	9104      	str	r1, [sp, #16]
 800a37c:	2e00      	cmp	r6, #0
 800a37e:	f000 8096 	beq.w	800a4ae <D24_GENERIC+0x156>
 800a382:	f005 0610 	and.w	r6, r5, #16
 800a386:	f005 0520 	and.w	r5, r5, #32
 800a38a:	4954      	ldr	r1, [pc, #336]	; (800a4dc <D24_GENERIC+0x184>)
 800a38c:	9605      	str	r6, [sp, #20]
 800a38e:	9506      	str	r5, [sp, #24]
 800a390:	f04f 0e00 	mov.w	lr, #0
 800a394:	f8cd 9008 	str.w	r9, [sp, #8]
 800a398:	e06a      	b.n	800a470 <D24_GENERIC+0x118>
 800a39a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800a39e:	f810 8007 	ldrb.w	r8, [r0, r7]
 800a3a2:	f890 c000 	ldrb.w	ip, [r0]
 800a3a6:	042d      	lsls	r5, r5, #16
 800a3a8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a3ac:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800a3b0:	44ac      	add	ip, r5
 800a3b2:	4438      	add	r0, r7
 800a3b4:	fa5f f68c 	uxtb.w	r6, ip
 800a3b8:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800a3bc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a3c0:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800a3c4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a3c8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800a3cc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a3d0:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800a3d4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800a3d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a3dc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a3e0:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800a3e4:	4d3e      	ldr	r5, [pc, #248]	; (800a4e0 <D24_GENERIC+0x188>)
 800a3e6:	fb26 b705 	smlad	r7, r6, r5, fp
 800a3ea:	4d3e      	ldr	r5, [pc, #248]	; (800a4e4 <D24_GENERIC+0x18c>)
 800a3ec:	fb26 4b05 	smlad	fp, r6, r5, r4
 800a3f0:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800a3f4:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800a3f8:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800a3fc:	2401      	movs	r4, #1
 800a3fe:	fb26 f604 	smuad	r6, r6, r4
 800a402:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800a406:	9f02      	ldr	r7, [sp, #8]
 800a408:	eb0e 0c04 	add.w	ip, lr, r4
 800a40c:	eb08 0406 	add.w	r4, r8, r6
 800a410:	eb05 060a 	add.w	r6, r5, sl
 800a414:	1bf6      	subs	r6, r6, r7
 800a416:	4637      	mov	r7, r6
 800a418:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800a41c:	e9cd 7800 	strd	r7, r8, [sp]
 800a420:	9f05      	ldr	r7, [sp, #20]
 800a422:	b177      	cbz	r7, 800a442 <D24_GENERIC+0xea>
 800a424:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800a428:	9502      	str	r5, [sp, #8]
 800a42a:	fba6 9a08 	umull	r9, sl, r6, r8
 800a42e:	9e01      	ldr	r6, [sp, #4]
 800a430:	fb08 aa06 	mla	sl, r8, r6, sl
 800a434:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800a438:	f14a 0700 	adc.w	r7, sl, #0
 800a43c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800a440:	4655      	mov	r5, sl
 800a442:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a444:	9f03      	ldr	r7, [sp, #12]
 800a446:	03ad      	lsls	r5, r5, #14
 800a448:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a44c:	f04f 0900 	mov.w	r9, #0
 800a450:	fb0e fe06 	mul.w	lr, lr, r6
 800a454:	fbc7 8905 	smlal	r8, r9, r7, r5
 800a458:	9e04      	ldr	r6, [sp, #16]
 800a45a:	464f      	mov	r7, r9
 800a45c:	10bd      	asrs	r5, r7, #2
 800a45e:	f305 050f 	ssat	r5, #16, r5
 800a462:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800a466:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a468:	fa1f fe8c 	uxth.w	lr, ip
 800a46c:	4575      	cmp	r5, lr
 800a46e:	d91c      	bls.n	800a4aa <D24_GENERIC+0x152>
 800a470:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a472:	b2ef      	uxtb	r7, r5
 800a474:	2d01      	cmp	r5, #1
 800a476:	b23e      	sxth	r6, r7
 800a478:	d18f      	bne.n	800a39a <D24_GENERIC+0x42>
 800a47a:	9d06      	ldr	r5, [sp, #24]
 800a47c:	b15d      	cbz	r5, 800a496 <D24_GENERIC+0x13e>
 800a47e:	f01e 0f01 	tst.w	lr, #1
 800a482:	d122      	bne.n	800a4ca <D24_GENERIC+0x172>
 800a484:	7805      	ldrb	r5, [r0, #0]
 800a486:	78c7      	ldrb	r7, [r0, #3]
 800a488:	7846      	ldrb	r6, [r0, #1]
 800a48a:	022d      	lsls	r5, r5, #8
 800a48c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800a490:	44b4      	add	ip, r6
 800a492:	3002      	adds	r0, #2
 800a494:	e78e      	b.n	800a3b4 <D24_GENERIC+0x5c>
 800a496:	7846      	ldrb	r6, [r0, #1]
 800a498:	f890 c002 	ldrb.w	ip, [r0, #2]
 800a49c:	f810 5b03 	ldrb.w	r5, [r0], #3
 800a4a0:	0236      	lsls	r6, r6, #8
 800a4a2:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800a4a6:	44ac      	add	ip, r5
 800a4a8:	e784      	b.n	800a3b4 <D24_GENERIC+0x5c>
 800a4aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a4ae:	61d3      	str	r3, [r2, #28]
 800a4b0:	9b07      	ldr	r3, [sp, #28]
 800a4b2:	6094      	str	r4, [r2, #8]
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f8c2 b00c 	str.w	fp, [r2, #12]
 800a4ba:	f8c2 a010 	str.w	sl, [r2, #16]
 800a4be:	f8c2 9014 	str.w	r9, [r2, #20]
 800a4c2:	6193      	str	r3, [r2, #24]
 800a4c4:	b009      	add	sp, #36	; 0x24
 800a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ca:	78c5      	ldrb	r5, [r0, #3]
 800a4cc:	7887      	ldrb	r7, [r0, #2]
 800a4ce:	f810 6b04 	ldrb.w	r6, [r0], #4
 800a4d2:	022d      	lsls	r5, r5, #8
 800a4d4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800a4d8:	44b4      	add	ip, r6
 800a4da:	e76b      	b.n	800a3b4 <D24_GENERIC+0x5c>
 800a4dc:	20000000 	.word	0x20000000
 800a4e0:	00030001 	.word	0x00030001
 800a4e4:	00060007 	.word	0x00060007

0800a4e8 <D32_GENERIC>:
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a4ee:	6993      	ldr	r3, [r2, #24]
 800a4f0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a4f2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a4f6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800a4fa:	69d6      	ldr	r6, [r2, #28]
 800a4fc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800a500:	b089      	sub	sp, #36	; 0x24
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	9403      	str	r4, [sp, #12]
 800a506:	6893      	ldr	r3, [r2, #8]
 800a508:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a50a:	9104      	str	r1, [sp, #16]
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	f000 809f 	beq.w	800a650 <D32_GENERIC+0x168>
 800a512:	f004 0510 	and.w	r5, r4, #16
 800a516:	f004 0420 	and.w	r4, r4, #32
 800a51a:	9505      	str	r5, [sp, #20]
 800a51c:	4953      	ldr	r1, [pc, #332]	; (800a66c <D32_GENERIC+0x184>)
 800a51e:	9406      	str	r4, [sp, #24]
 800a520:	f04f 0c00 	mov.w	ip, #0
 800a524:	f8cd 9008 	str.w	r9, [sp, #8]
 800a528:	461d      	mov	r5, r3
 800a52a:	4617      	mov	r7, r2
 800a52c:	e077      	b.n	800a61e <D32_GENERIC+0x136>
 800a52e:	f818 3003 	ldrb.w	r3, [r8, r3]
 800a532:	f810 800e 	ldrb.w	r8, [r0, lr]
 800a536:	f810 e002 	ldrb.w	lr, [r0, r2]
 800a53a:	7800      	ldrb	r0, [r0, #0]
 800a53c:	041b      	lsls	r3, r3, #16
 800a53e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800a542:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800a546:	4403      	add	r3, r0
 800a548:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800a54c:	b2dc      	uxtb	r4, r3
 800a54e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a552:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800a556:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a55a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a55e:	0e1b      	lsrs	r3, r3, #24
 800a560:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800a564:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800a568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a56c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a570:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800a574:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800a578:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800a57c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a580:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a584:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a588:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800a58c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a590:	4b37      	ldr	r3, [pc, #220]	; (800a670 <D32_GENERIC+0x188>)
 800a592:	fb22 b403 	smlad	r4, r2, r3, fp
 800a596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a59a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800a59e:	4b35      	ldr	r3, [pc, #212]	; (800a674 <D32_GENERIC+0x18c>)
 800a5a0:	fb22 5503 	smlad	r5, r2, r3, r5
 800a5a4:	4b34      	ldr	r3, [pc, #208]	; (800a678 <D32_GENERIC+0x190>)
 800a5a6:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	fb22 f203 	smuad	r2, r2, r3
 800a5b0:	4b32      	ldr	r3, [pc, #200]	; (800a67c <D32_GENERIC+0x194>)
 800a5b2:	fb2e 2503 	smlad	r5, lr, r3, r2
 800a5b6:	9b02      	ldr	r3, [sp, #8]
 800a5b8:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800a5bc:	eb04 080a 	add.w	r8, r4, sl
 800a5c0:	eba8 0803 	sub.w	r8, r8, r3
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	17d3      	asrs	r3, r2, #31
 800a5c8:	e9cd 2300 	strd	r2, r3, [sp]
 800a5cc:	9b05      	ldr	r3, [sp, #20]
 800a5ce:	f10c 0e01 	add.w	lr, ip, #1
 800a5d2:	b16b      	cbz	r3, 800a5f0 <D32_GENERIC+0x108>
 800a5d4:	6a3a      	ldr	r2, [r7, #32]
 800a5d6:	9b01      	ldr	r3, [sp, #4]
 800a5d8:	9402      	str	r4, [sp, #8]
 800a5da:	fba8 8902 	umull	r8, r9, r8, r2
 800a5de:	fb02 9903 	mla	r9, r2, r3, r9
 800a5e2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800a5e6:	f149 0900 	adc.w	r9, r9, #0
 800a5ea:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800a5ee:	4654      	mov	r4, sl
 800a5f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a5f2:	9a04      	ldr	r2, [sp, #16]
 800a5f4:	fb0c fc03 	mul.w	ip, ip, r3
 800a5f8:	9b03      	ldr	r3, [sp, #12]
 800a5fa:	0364      	lsls	r4, r4, #13
 800a5fc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a600:	f04f 0900 	mov.w	r9, #0
 800a604:	fbc3 8904 	smlal	r8, r9, r3, r4
 800a608:	464b      	mov	r3, r9
 800a60a:	109b      	asrs	r3, r3, #2
 800a60c:	f303 030f 	ssat	r3, #16, r3
 800a610:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800a614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a616:	fa1f fc8e 	uxth.w	ip, lr
 800a61a:	4563      	cmp	r3, ip
 800a61c:	d914      	bls.n	800a648 <D32_GENERIC+0x160>
 800a61e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800a620:	b2e2      	uxtb	r2, r4
 800a622:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800a626:	eb00 080e 	add.w	r8, r0, lr
 800a62a:	4253      	negs	r3, r2
 800a62c:	2c01      	cmp	r4, #1
 800a62e:	eb08 0403 	add.w	r4, r8, r3
 800a632:	f47f af7c 	bne.w	800a52e <D32_GENERIC+0x46>
 800a636:	1d02      	adds	r2, r0, #4
 800a638:	6803      	ldr	r3, [r0, #0]
 800a63a:	9806      	ldr	r0, [sp, #24]
 800a63c:	b110      	cbz	r0, 800a644 <D32_GENERIC+0x15c>
 800a63e:	ba5b      	rev16	r3, r3
 800a640:	4610      	mov	r0, r2
 800a642:	e783      	b.n	800a54c <D32_GENERIC+0x64>
 800a644:	4610      	mov	r0, r2
 800a646:	e781      	b.n	800a54c <D32_GENERIC+0x64>
 800a648:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a64c:	462b      	mov	r3, r5
 800a64e:	463a      	mov	r2, r7
 800a650:	6093      	str	r3, [r2, #8]
 800a652:	9b07      	ldr	r3, [sp, #28]
 800a654:	f8c2 b00c 	str.w	fp, [r2, #12]
 800a658:	2000      	movs	r0, #0
 800a65a:	61d6      	str	r6, [r2, #28]
 800a65c:	f8c2 a010 	str.w	sl, [r2, #16]
 800a660:	f8c2 9014 	str.w	r9, [r2, #20]
 800a664:	6193      	str	r3, [r2, #24]
 800a666:	b009      	add	sp, #36	; 0x24
 800a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66c:	20000000 	.word	0x20000000
 800a670:	00060003 	.word	0x00060003
 800a674:	000a000c 	.word	0x000a000c
 800a678:	000c000a 	.word	0x000c000a
 800a67c:	00030006 	.word	0x00030006

0800a680 <D48_GENERIC>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	b089      	sub	sp, #36	; 0x24
 800a686:	6953      	ldr	r3, [r2, #20]
 800a688:	68d4      	ldr	r4, [r2, #12]
 800a68a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a68c:	9302      	str	r3, [sp, #8]
 800a68e:	9400      	str	r4, [sp, #0]
 800a690:	6993      	ldr	r3, [r2, #24]
 800a692:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a694:	9307      	str	r3, [sp, #28]
 800a696:	9403      	str	r4, [sp, #12]
 800a698:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a69c:	69d6      	ldr	r6, [r2, #28]
 800a69e:	6893      	ldr	r3, [r2, #8]
 800a6a0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a6a2:	9104      	str	r1, [sp, #16]
 800a6a4:	2d00      	cmp	r5, #0
 800a6a6:	f000 80c5 	beq.w	800a834 <D48_GENERIC+0x1b4>
 800a6aa:	f004 0510 	and.w	r5, r4, #16
 800a6ae:	f004 0420 	and.w	r4, r4, #32
 800a6b2:	4967      	ldr	r1, [pc, #412]	; (800a850 <D48_GENERIC+0x1d0>)
 800a6b4:	9505      	str	r5, [sp, #20]
 800a6b6:	9406      	str	r4, [sp, #24]
 800a6b8:	f04f 0c00 	mov.w	ip, #0
 800a6bc:	4657      	mov	r7, sl
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	e09c      	b.n	800a7fc <D48_GENERIC+0x17c>
 800a6c2:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800a6c6:	f810 b009 	ldrb.w	fp, [r0, r9]
 800a6ca:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800a6ce:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800a6d2:	7800      	ldrb	r0, [r0, #0]
 800a6d4:	0424      	lsls	r4, r4, #16
 800a6d6:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800a6da:	f818 4005 	ldrb.w	r4, [r8, r5]
 800a6de:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800a6e2:	44a8      	add	r8, r5
 800a6e4:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800a6e8:	eb0b 0500 	add.w	r5, fp, r0
 800a6ec:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800a6f0:	fa5f f885 	uxtb.w	r8, r5
 800a6f4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800a6f8:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800a6fc:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800a700:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800a704:	0e2d      	lsrs	r5, r5, #24
 800a706:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800a70a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800a70e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800a712:	b2e6      	uxtb	r6, r4
 800a714:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800a718:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a71c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800a720:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a724:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800a728:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800a72c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800a730:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800a734:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a738:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a73c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800a740:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a744:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a748:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a74c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800a750:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800a754:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800a758:	4c3e      	ldr	r4, [pc, #248]	; (800a854 <D48_GENERIC+0x1d4>)
 800a75a:	9d00      	ldr	r5, [sp, #0]
 800a75c:	fb2a 5404 	smlad	r4, sl, r4, r5
 800a760:	4d3d      	ldr	r5, [pc, #244]	; (800a858 <D48_GENERIC+0x1d8>)
 800a762:	fb28 4405 	smlad	r4, r8, r5, r4
 800a766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a76a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800a76e:	4c3b      	ldr	r4, [pc, #236]	; (800a85c <D48_GENERIC+0x1dc>)
 800a770:	9b01      	ldr	r3, [sp, #4]
 800a772:	fb2a 3304 	smlad	r3, sl, r4, r3
 800a776:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a77a:	fb28 3304 	smlad	r3, r8, r4, r3
 800a77e:	4c38      	ldr	r4, [pc, #224]	; (800a860 <D48_GENERIC+0x1e0>)
 800a780:	fb2e 3304 	smlad	r3, lr, r4, r3
 800a784:	2501      	movs	r5, #1
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	fb2a fa05 	smuad	sl, sl, r5
 800a78c:	4b35      	ldr	r3, [pc, #212]	; (800a864 <D48_GENERIC+0x1e4>)
 800a78e:	fb28 a803 	smlad	r8, r8, r3, sl
 800a792:	4b35      	ldr	r3, [pc, #212]	; (800a868 <D48_GENERIC+0x1e8>)
 800a794:	fb2e 8303 	smlad	r3, lr, r3, r8
 800a798:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	9b02      	ldr	r3, [sp, #8]
 800a7a0:	eb04 0807 	add.w	r8, r4, r7
 800a7a4:	eba8 0803 	sub.w	r8, r8, r3
 800a7a8:	9b05      	ldr	r3, [sp, #20]
 800a7aa:	4465      	add	r5, ip
 800a7ac:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800a7b0:	b163      	cbz	r3, 800a7cc <D48_GENERIC+0x14c>
 800a7b2:	6a17      	ldr	r7, [r2, #32]
 800a7b4:	9402      	str	r4, [sp, #8]
 800a7b6:	fba8 8907 	umull	r8, r9, r8, r7
 800a7ba:	fb07 990b 	mla	r9, r7, fp, r9
 800a7be:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800a7c2:	f149 0900 	adc.w	r9, r9, #0
 800a7c6:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800a7ca:	463c      	mov	r4, r7
 800a7cc:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	02e4      	lsls	r4, r4, #11
 800a7d4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a7d8:	f04f 0900 	mov.w	r9, #0
 800a7dc:	fb0c fc0e 	mul.w	ip, ip, lr
 800a7e0:	fbc3 8904 	smlal	r8, r9, r3, r4
 800a7e4:	9b04      	ldr	r3, [sp, #16]
 800a7e6:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800a7ea:	f304 040f 	ssat	r4, #16, r4
 800a7ee:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800a7f2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a7f4:	fa1f fc85 	uxth.w	ip, r5
 800a7f8:	4564      	cmp	r4, ip
 800a7fa:	d919      	bls.n	800a830 <D48_GENERIC+0x1b0>
 800a7fc:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a7fe:	fa5f fe84 	uxtb.w	lr, r4
 800a802:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800a806:	f1ce 0500 	rsb	r5, lr, #0
 800a80a:	eb00 0b09 	add.w	fp, r0, r9
 800a80e:	eb0b 0a05 	add.w	sl, fp, r5
 800a812:	2c01      	cmp	r4, #1
 800a814:	eb0a 0809 	add.w	r8, sl, r9
 800a818:	f47f af53 	bne.w	800a6c2 <D48_GENERIC+0x42>
 800a81c:	9b06      	ldr	r3, [sp, #24]
 800a81e:	6805      	ldr	r5, [r0, #0]
 800a820:	6844      	ldr	r4, [r0, #4]
 800a822:	3006      	adds	r0, #6
 800a824:	2b00      	cmp	r3, #0
 800a826:	f43f af63 	beq.w	800a6f0 <D48_GENERIC+0x70>
 800a82a:	ba6d      	rev16	r5, r5
 800a82c:	ba64      	rev16	r4, r4
 800a82e:	e75f      	b.n	800a6f0 <D48_GENERIC+0x70>
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	46ba      	mov	sl, r7
 800a834:	6093      	str	r3, [r2, #8]
 800a836:	9b00      	ldr	r3, [sp, #0]
 800a838:	60d3      	str	r3, [r2, #12]
 800a83a:	9b02      	ldr	r3, [sp, #8]
 800a83c:	6153      	str	r3, [r2, #20]
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	61d6      	str	r6, [r2, #28]
 800a842:	2000      	movs	r0, #0
 800a844:	f8c2 a010 	str.w	sl, [r2, #16]
 800a848:	6193      	str	r3, [r2, #24]
 800a84a:	b009      	add	sp, #36	; 0x24
 800a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a850:	20000000 	.word	0x20000000
 800a854:	000f000a 	.word	0x000f000a
 800a858:	00060003 	.word	0x00060003
 800a85c:	00150019 	.word	0x00150019
 800a860:	00190015 	.word	0x00190015
 800a864:	00030006 	.word	0x00030006
 800a868:	000a000f 	.word	0x000a000f

0800a86c <D64_GENERIC>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	b089      	sub	sp, #36	; 0x24
 800a872:	6913      	ldr	r3, [r2, #16]
 800a874:	6895      	ldr	r5, [r2, #8]
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	9501      	str	r5, [sp, #4]
 800a87a:	6953      	ldr	r3, [r2, #20]
 800a87c:	68d5      	ldr	r5, [r2, #12]
 800a87e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	9500      	str	r5, [sp, #0]
 800a884:	6993      	ldr	r3, [r2, #24]
 800a886:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a888:	9307      	str	r3, [sp, #28]
 800a88a:	9505      	str	r5, [sp, #20]
 800a88c:	69d3      	ldr	r3, [r2, #28]
 800a88e:	9106      	str	r1, [sp, #24]
 800a890:	2c00      	cmp	r4, #0
 800a892:	f000 80d9 	beq.w	800aa48 <D64_GENERIC+0x1dc>
 800a896:	6a11      	ldr	r1, [r2, #32]
 800a898:	9102      	str	r1, [sp, #8]
 800a89a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800aa88 <D64_GENERIC+0x21c>
 800a89e:	f04f 0c00 	mov.w	ip, #0
 800a8a2:	4681      	mov	r9, r0
 800a8a4:	e0c1      	b.n	800aa2a <D64_GENERIC+0x1be>
 800a8a6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800a8aa:	4274      	negs	r4, r6
 800a8ac:	eb09 0708 	add.w	r7, r9, r8
 800a8b0:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800a8b4:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800a8b8:	5d38      	ldrb	r0, [r7, r4]
 800a8ba:	5d29      	ldrb	r1, [r5, r4]
 800a8bc:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800a8c0:	f819 a008 	ldrb.w	sl, [r9, r8]
 800a8c4:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800a8c8:	f899 7000 	ldrb.w	r7, [r9]
 800a8cc:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800a8d0:	4425      	add	r5, r4
 800a8d2:	0409      	lsls	r1, r1, #16
 800a8d4:	0400      	lsls	r0, r0, #16
 800a8d6:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800a8da:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a8de:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800a8e2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800a8e6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800a8ea:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800a8ee:	4459      	add	r1, fp
 800a8f0:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800a8f4:	4438      	add	r0, r7
 800a8f6:	b2c5      	uxtb	r5, r0
 800a8f8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a8fc:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800a900:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800a904:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800a908:	0e00      	lsrs	r0, r0, #24
 800a90a:	eb03 0806 	add.w	r8, r3, r6
 800a90e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800a912:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800a916:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a91a:	b2c8      	uxtb	r0, r1
 800a91c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a920:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a924:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800a928:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800a92c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800a930:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800a934:	0e09      	lsrs	r1, r1, #24
 800a936:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800a93a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800a93e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800a942:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800a946:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800a94a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a94e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800a952:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a956:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a95a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a95e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800a962:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a966:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a96a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a96e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a972:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800a976:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800a97a:	0a8b      	lsrs	r3, r1, #10
 800a97c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800a980:	4939      	ldr	r1, [pc, #228]	; (800aa68 <D64_GENERIC+0x1fc>)
 800a982:	9c00      	ldr	r4, [sp, #0]
 800a984:	fb28 4101 	smlad	r1, r8, r1, r4
 800a988:	4c38      	ldr	r4, [pc, #224]	; (800aa6c <D64_GENERIC+0x200>)
 800a98a:	fb27 1104 	smlad	r1, r7, r4, r1
 800a98e:	4c38      	ldr	r4, [pc, #224]	; (800aa70 <D64_GENERIC+0x204>)
 800a990:	fb20 1104 	smlad	r1, r0, r4, r1
 800a994:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800a998:	fb2a 1106 	smlad	r1, sl, r6, r1
 800a99c:	4c35      	ldr	r4, [pc, #212]	; (800aa74 <D64_GENERIC+0x208>)
 800a99e:	9d01      	ldr	r5, [sp, #4]
 800a9a0:	fb28 5404 	smlad	r4, r8, r4, r5
 800a9a4:	4d33      	ldr	r5, [pc, #204]	; (800aa74 <D64_GENERIC+0x208>)
 800a9a6:	fb2a 4415 	smladx	r4, sl, r5, r4
 800a9aa:	4d33      	ldr	r5, [pc, #204]	; (800aa78 <D64_GENERIC+0x20c>)
 800a9ac:	fb27 4405 	smlad	r4, r7, r5, r4
 800a9b0:	fb20 4415 	smladx	r4, r0, r5, r4
 800a9b4:	2501      	movs	r5, #1
 800a9b6:	9400      	str	r4, [sp, #0]
 800a9b8:	fb28 f805 	smuad	r8, r8, r5
 800a9bc:	4c2f      	ldr	r4, [pc, #188]	; (800aa7c <D64_GENERIC+0x210>)
 800a9be:	fb27 8704 	smlad	r7, r7, r4, r8
 800a9c2:	4c2f      	ldr	r4, [pc, #188]	; (800aa80 <D64_GENERIC+0x214>)
 800a9c4:	fb20 7004 	smlad	r0, r0, r4, r7
 800a9c8:	4c2e      	ldr	r4, [pc, #184]	; (800aa84 <D64_GENERIC+0x218>)
 800a9ca:	fb2a 0004 	smlad	r0, sl, r4, r0
 800a9ce:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800a9d2:	9902      	ldr	r1, [sp, #8]
 800a9d4:	9001      	str	r0, [sp, #4]
 800a9d6:	b189      	cbz	r1, 800a9fc <D64_GENERIC+0x190>
 800a9d8:	9803      	ldr	r0, [sp, #12]
 800a9da:	9c04      	ldr	r4, [sp, #16]
 800a9dc:	9604      	str	r6, [sp, #16]
 800a9de:	4430      	add	r0, r6
 800a9e0:	1b00      	subs	r0, r0, r4
 800a9e2:	17c5      	asrs	r5, r0, #31
 800a9e4:	460f      	mov	r7, r1
 800a9e6:	fba0 0101 	umull	r0, r1, r0, r1
 800a9ea:	fb07 1105 	mla	r1, r7, r5, r1
 800a9ee:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a9f2:	f141 0100 	adc.w	r1, r1, #0
 800a9f6:	0049      	lsls	r1, r1, #1
 800a9f8:	9103      	str	r1, [sp, #12]
 800a9fa:	460e      	mov	r6, r1
 800a9fc:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800a9fe:	9905      	ldr	r1, [sp, #20]
 800aa00:	9806      	ldr	r0, [sp, #24]
 800aa02:	02b6      	lsls	r6, r6, #10
 800aa04:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800aa08:	f04f 0800 	mov.w	r8, #0
 800aa0c:	fb0c f404 	mul.w	r4, ip, r4
 800aa10:	fbc1 7806 	smlal	r7, r8, r1, r6
 800aa14:	4641      	mov	r1, r8
 800aa16:	1089      	asrs	r1, r1, #2
 800aa18:	f301 010f 	ssat	r1, #16, r1
 800aa1c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800aa20:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800aa22:	f10c 0c01 	add.w	ip, ip, #1
 800aa26:	4561      	cmp	r1, ip
 800aa28:	dd0e      	ble.n	800aa48 <D64_GENERIC+0x1dc>
 800aa2a:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800aa2c:	2e01      	cmp	r6, #1
 800aa2e:	f47f af3a 	bne.w	800a8a6 <D64_GENERIC+0x3a>
 800aa32:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800aa34:	06b4      	lsls	r4, r6, #26
 800aa36:	e899 0003 	ldmia.w	r9, {r0, r1}
 800aa3a:	f109 0908 	add.w	r9, r9, #8
 800aa3e:	f57f af5a 	bpl.w	800a8f6 <D64_GENERIC+0x8a>
 800aa42:	ba40      	rev16	r0, r0
 800aa44:	ba49      	rev16	r1, r1
 800aa46:	e756      	b.n	800a8f6 <D64_GENERIC+0x8a>
 800aa48:	61d3      	str	r3, [r2, #28]
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	9901      	ldr	r1, [sp, #4]
 800aa4e:	6113      	str	r3, [r2, #16]
 800aa50:	9b04      	ldr	r3, [sp, #16]
 800aa52:	6091      	str	r1, [r2, #8]
 800aa54:	6153      	str	r3, [r2, #20]
 800aa56:	9900      	ldr	r1, [sp, #0]
 800aa58:	9b07      	ldr	r3, [sp, #28]
 800aa5a:	60d1      	str	r1, [r2, #12]
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	6193      	str	r3, [r2, #24]
 800aa60:	b009      	add	sp, #36	; 0x24
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	bf00      	nop
 800aa68:	001c0015 	.word	0x001c0015
 800aa6c:	000f000a 	.word	0x000f000a
 800aa70:	00060003 	.word	0x00060003
 800aa74:	0024002a 	.word	0x0024002a
 800aa78:	002e0030 	.word	0x002e0030
 800aa7c:	00030006 	.word	0x00030006
 800aa80:	000a000f 	.word	0x000a000f
 800aa84:	0015001c 	.word	0x0015001c
 800aa88:	20000000 	.word	0x20000000

0800aa8c <D80_GENERIC>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	b08b      	sub	sp, #44	; 0x2c
 800aa92:	6914      	ldr	r4, [r2, #16]
 800aa94:	9404      	str	r4, [sp, #16]
 800aa96:	6954      	ldr	r4, [r2, #20]
 800aa98:	9405      	str	r4, [sp, #20]
 800aa9a:	6994      	ldr	r4, [r2, #24]
 800aa9c:	9409      	str	r4, [sp, #36]	; 0x24
 800aa9e:	6894      	ldr	r4, [r2, #8]
 800aaa0:	9402      	str	r4, [sp, #8]
 800aaa2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800aaa4:	68d4      	ldr	r4, [r2, #12]
 800aaa6:	9401      	str	r4, [sp, #4]
 800aaa8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800aaaa:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800aaae:	9406      	str	r4, [sp, #24]
 800aab0:	9107      	str	r1, [sp, #28]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 810f 	beq.w	800acd6 <D80_GENERIC+0x24a>
 800aab8:	6a13      	ldr	r3, [r2, #32]
 800aaba:	9308      	str	r3, [sp, #32]
 800aabc:	2300      	movs	r3, #0
 800aabe:	9200      	str	r2, [sp, #0]
 800aac0:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800ad28 <D80_GENERIC+0x29c>
 800aac4:	f8cd b00c 	str.w	fp, [sp, #12]
 800aac8:	461a      	mov	r2, r3
 800aaca:	e0ed      	b.n	800aca8 <D80_GENERIC+0x21c>
 800aacc:	fa5f fc8c 	uxtb.w	ip, ip
 800aad0:	fa0f f48c 	sxth.w	r4, ip
 800aad4:	0066      	lsls	r6, r4, #1
 800aad6:	eb06 0804 	add.w	r8, r6, r4
 800aada:	f1cc 0500 	rsb	r5, ip, #0
 800aade:	eb00 0108 	add.w	r1, r0, r8
 800aae2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800aae6:	194b      	adds	r3, r1, r5
 800aae8:	5d49      	ldrb	r1, [r1, r5]
 800aaea:	f810 a008 	ldrb.w	sl, [r0, r8]
 800aaee:	f813 b004 	ldrb.w	fp, [r3, r4]
 800aaf2:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800aaf6:	f890 8000 	ldrb.w	r8, [r0]
 800aafa:	eb03 0e04 	add.w	lr, r3, r4
 800aafe:	eb0e 0705 	add.w	r7, lr, r5
 800ab02:	0409      	lsls	r1, r1, #16
 800ab04:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800ab08:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800ab0c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800ab10:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800ab14:	eb0a 0004 	add.w	r0, sl, r4
 800ab18:	041b      	lsls	r3, r3, #16
 800ab1a:	f81a a004 	ldrb.w	sl, [sl, r4]
 800ab1e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800ab22:	5d44      	ldrb	r4, [r0, r5]
 800ab24:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800ab28:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800ab2c:	4428      	add	r0, r5
 800ab2e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800ab32:	4441      	add	r1, r8
 800ab34:	4430      	add	r0, r6
 800ab36:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800ab3a:	441f      	add	r7, r3
 800ab3c:	b2cd      	uxtb	r5, r1
 800ab3e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ab42:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800ab46:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800ab50:	0e09      	lsrs	r1, r1, #24
 800ab52:	4433      	add	r3, r6
 800ab54:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800ab58:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800ab5c:	b2fd      	uxtb	r5, r7
 800ab5e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800ab62:	469b      	mov	fp, r3
 800ab64:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800ab68:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800ab6c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800ab70:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800ab74:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800ab78:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800ab7c:	0e3b      	lsrs	r3, r7, #24
 800ab7e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800ab82:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800ab86:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ab8a:	fa5f fe84 	uxtb.w	lr, r4
 800ab8e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800ab92:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ab96:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800ab9a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800ab9e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800aba2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800aba6:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800abaa:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800abae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800abb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abb6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800abba:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800abbe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800abc2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800abc6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800abca:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800abce:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800abd2:	0aa3      	lsrs	r3, r4, #10
 800abd4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800abd8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800abdc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800abe0:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800abe4:	9303      	str	r3, [sp, #12]
 800abe6:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800abea:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800abee:	4b42      	ldr	r3, [pc, #264]	; (800acf8 <D80_GENERIC+0x26c>)
 800abf0:	9901      	ldr	r1, [sp, #4]
 800abf2:	fb2b 1303 	smlad	r3, fp, r3, r1
 800abf6:	4941      	ldr	r1, [pc, #260]	; (800acfc <D80_GENERIC+0x270>)
 800abf8:	fb28 3301 	smlad	r3, r8, r1, r3
 800abfc:	4940      	ldr	r1, [pc, #256]	; (800ad00 <D80_GENERIC+0x274>)
 800abfe:	fb2c 3301 	smlad	r3, ip, r1, r3
 800ac02:	4940      	ldr	r1, [pc, #256]	; (800ad04 <D80_GENERIC+0x278>)
 800ac04:	fb27 3301 	smlad	r3, r7, r1, r3
 800ac08:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ac0c:	fb2e 3301 	smlad	r3, lr, r1, r3
 800ac10:	493d      	ldr	r1, [pc, #244]	; (800ad08 <D80_GENERIC+0x27c>)
 800ac12:	9c02      	ldr	r4, [sp, #8]
 800ac14:	fb2b 4401 	smlad	r4, fp, r1, r4
 800ac18:	493c      	ldr	r1, [pc, #240]	; (800ad0c <D80_GENERIC+0x280>)
 800ac1a:	fb28 4401 	smlad	r4, r8, r1, r4
 800ac1e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800ac22:	fb2c 4101 	smlad	r1, ip, r1, r4
 800ac26:	4c3a      	ldr	r4, [pc, #232]	; (800ad10 <D80_GENERIC+0x284>)
 800ac28:	fb27 1104 	smlad	r1, r7, r4, r1
 800ac2c:	4c39      	ldr	r4, [pc, #228]	; (800ad14 <D80_GENERIC+0x288>)
 800ac2e:	fb2e 1104 	smlad	r1, lr, r4, r1
 800ac32:	9101      	str	r1, [sp, #4]
 800ac34:	2101      	movs	r1, #1
 800ac36:	fb2b fb01 	smuad	fp, fp, r1
 800ac3a:	4937      	ldr	r1, [pc, #220]	; (800ad18 <D80_GENERIC+0x28c>)
 800ac3c:	fb28 b801 	smlad	r8, r8, r1, fp
 800ac40:	4d36      	ldr	r5, [pc, #216]	; (800ad1c <D80_GENERIC+0x290>)
 800ac42:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800ac46:	4d36      	ldr	r5, [pc, #216]	; (800ad20 <D80_GENERIC+0x294>)
 800ac48:	fb27 c705 	smlad	r7, r7, r5, ip
 800ac4c:	4d35      	ldr	r5, [pc, #212]	; (800ad24 <D80_GENERIC+0x298>)
 800ac4e:	fb2e 7105 	smlad	r1, lr, r5, r7
 800ac52:	9102      	str	r1, [sp, #8]
 800ac54:	9908      	ldr	r1, [sp, #32]
 800ac56:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800ac5a:	b181      	cbz	r1, 800ac7e <D80_GENERIC+0x1f2>
 800ac5c:	9c04      	ldr	r4, [sp, #16]
 800ac5e:	9d05      	ldr	r5, [sp, #20]
 800ac60:	9305      	str	r3, [sp, #20]
 800ac62:	441c      	add	r4, r3
 800ac64:	1b64      	subs	r4, r4, r5
 800ac66:	17e7      	asrs	r7, r4, #31
 800ac68:	fba4 4501 	umull	r4, r5, r4, r1
 800ac6c:	fb01 5507 	mla	r5, r1, r7, r5
 800ac70:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800ac74:	f145 0500 	adc.w	r5, r5, #0
 800ac78:	0069      	lsls	r1, r5, #1
 800ac7a:	9104      	str	r1, [sp, #16]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	9e00      	ldr	r6, [sp, #0]
 800ac80:	9f06      	ldr	r7, [sp, #24]
 800ac82:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800ac84:	025b      	lsls	r3, r3, #9
 800ac86:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ac8a:	2500      	movs	r5, #0
 800ac8c:	fb02 f101 	mul.w	r1, r2, r1
 800ac90:	fbc7 4503 	smlal	r4, r5, r7, r3
 800ac94:	9c07      	ldr	r4, [sp, #28]
 800ac96:	10ab      	asrs	r3, r5, #2
 800ac98:	f303 030f 	ssat	r3, #16, r3
 800ac9c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800aca0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800aca2:	3201      	adds	r2, #1
 800aca4:	4293      	cmp	r3, r2
 800aca6:	dd13      	ble.n	800acd0 <D80_GENERIC+0x244>
 800aca8:	9b00      	ldr	r3, [sp, #0]
 800acaa:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800acae:	f1bc 0f01 	cmp.w	ip, #1
 800acb2:	f47f af0b 	bne.w	800aacc <D80_GENERIC+0x40>
 800acb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb8:	6884      	ldr	r4, [r0, #8]
 800acba:	069b      	lsls	r3, r3, #26
 800acbc:	e890 0082 	ldmia.w	r0, {r1, r7}
 800acc0:	f100 000a 	add.w	r0, r0, #10
 800acc4:	f57f af3a 	bpl.w	800ab3c <D80_GENERIC+0xb0>
 800acc8:	ba49      	rev16	r1, r1
 800acca:	ba7f      	rev16	r7, r7
 800accc:	ba64      	rev16	r4, r4
 800acce:	e735      	b.n	800ab3c <D80_GENERIC+0xb0>
 800acd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800acd4:	4632      	mov	r2, r6
 800acd6:	9b02      	ldr	r3, [sp, #8]
 800acd8:	6093      	str	r3, [r2, #8]
 800acda:	9b01      	ldr	r3, [sp, #4]
 800acdc:	60d3      	str	r3, [r2, #12]
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	6113      	str	r3, [r2, #16]
 800ace2:	9b05      	ldr	r3, [sp, #20]
 800ace4:	6153      	str	r3, [r2, #20]
 800ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace8:	f8c2 b01c 	str.w	fp, [r2, #28]
 800acec:	2000      	movs	r0, #0
 800acee:	6193      	str	r3, [r2, #24]
 800acf0:	b00b      	add	sp, #44	; 0x2c
 800acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf6:	bf00      	nop
 800acf8:	002d0024 	.word	0x002d0024
 800acfc:	001c0015 	.word	0x001c0015
 800ad00:	000f000a 	.word	0x000f000a
 800ad04:	00060003 	.word	0x00060003
 800ad08:	0037003f 	.word	0x0037003f
 800ad0c:	00450049 	.word	0x00450049
 800ad10:	00490045 	.word	0x00490045
 800ad14:	003f0037 	.word	0x003f0037
 800ad18:	00030006 	.word	0x00030006
 800ad1c:	000a000f 	.word	0x000a000f
 800ad20:	0015001c 	.word	0x0015001c
 800ad24:	0024002d 	.word	0x0024002d
 800ad28:	20000000 	.word	0x20000000

0800ad2c <D128_GENERIC>:
 800ad2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad30:	b093      	sub	sp, #76	; 0x4c
 800ad32:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ad34:	9005      	str	r0, [sp, #20]
 800ad36:	4610      	mov	r0, r2
 800ad38:	9201      	str	r2, [sp, #4]
 800ad3a:	6912      	ldr	r2, [r2, #16]
 800ad3c:	920c      	str	r2, [sp, #48]	; 0x30
 800ad3e:	4602      	mov	r2, r0
 800ad40:	6940      	ldr	r0, [r0, #20]
 800ad42:	900d      	str	r0, [sp, #52]	; 0x34
 800ad44:	4610      	mov	r0, r2
 800ad46:	4614      	mov	r4, r2
 800ad48:	6992      	ldr	r2, [r2, #24]
 800ad4a:	9211      	str	r2, [sp, #68]	; 0x44
 800ad4c:	69c2      	ldr	r2, [r0, #28]
 800ad4e:	9202      	str	r2, [sp, #8]
 800ad50:	68e2      	ldr	r2, [r4, #12]
 800ad52:	6880      	ldr	r0, [r0, #8]
 800ad54:	9203      	str	r2, [sp, #12]
 800ad56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ad58:	9004      	str	r0, [sp, #16]
 800ad5a:	920e      	str	r2, [sp, #56]	; 0x38
 800ad5c:	910f      	str	r1, [sp, #60]	; 0x3c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 819b 	beq.w	800b09a <D128_GENERIC+0x36e>
 800ad64:	6a23      	ldr	r3, [r4, #32]
 800ad66:	9310      	str	r3, [sp, #64]	; 0x40
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800b114 <D128_GENERIC+0x3e8>
 800ad6e:	9306      	str	r3, [sp, #24]
 800ad70:	e17a      	b.n	800b068 <D128_GENERIC+0x33c>
 800ad72:	b2d2      	uxtb	r2, r2
 800ad74:	9d05      	ldr	r5, [sp, #20]
 800ad76:	b214      	sxth	r4, r2
 800ad78:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800ad7c:	4250      	negs	r0, r2
 800ad7e:	eb05 010a 	add.w	r1, r5, sl
 800ad82:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad86:	eb01 0800 	add.w	r8, r1, r0
 800ad8a:	eb0b 0c04 	add.w	ip, fp, r4
 800ad8e:	eb08 070c 	add.w	r7, r8, ip
 800ad92:	183b      	adds	r3, r7, r0
 800ad94:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800ad98:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800ad9c:	eb0e 0604 	add.w	r6, lr, r4
 800ada0:	9307      	str	r3, [sp, #28]
 800ada2:	1833      	adds	r3, r6, r0
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	462b      	mov	r3, r5
 800ada8:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800adac:	f8cd a020 	str.w	sl, [sp, #32]
 800adb0:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800adb4:	f813 c002 	ldrb.w	ip, [r3, r2]
 800adb8:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800adbc:	5c3a      	ldrb	r2, [r7, r0]
 800adbe:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800adc2:	781f      	ldrb	r7, [r3, #0]
 800adc4:	9b07      	ldr	r3, [sp, #28]
 800adc6:	9d05      	ldr	r5, [sp, #20]
 800adc8:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800adcc:	5c09      	ldrb	r1, [r1, r0]
 800adce:	9709      	str	r7, [sp, #36]	; 0x24
 800add0:	9307      	str	r3, [sp, #28]
 800add2:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800add6:	5c33      	ldrb	r3, [r6, r0]
 800add8:	0412      	lsls	r2, r2, #16
 800adda:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800adde:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800ade2:	9d08      	ldr	r5, [sp, #32]
 800ade4:	eb06 0a04 	add.w	sl, r6, r4
 800ade8:	0409      	lsls	r1, r1, #16
 800adea:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800adee:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800adf2:	5d36      	ldrb	r6, [r6, r4]
 800adf4:	9c05      	ldr	r4, [sp, #20]
 800adf6:	042d      	lsls	r5, r5, #16
 800adf8:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800adfc:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800ae00:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800ae04:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800ae08:	eb0a 0c00 	add.w	ip, sl, r0
 800ae0c:	041b      	lsls	r3, r3, #16
 800ae0e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800ae12:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800ae16:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800ae1a:	9d07      	ldr	r5, [sp, #28]
 800ae1c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800ae20:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800ae24:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae26:	4458      	add	r0, fp
 800ae28:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800ae2c:	9005      	str	r0, [sp, #20]
 800ae2e:	4439      	add	r1, r7
 800ae30:	442a      	add	r2, r5
 800ae32:	44b2      	add	sl, r6
 800ae34:	1918      	adds	r0, r3, r4
 800ae36:	b2cb      	uxtb	r3, r1
 800ae38:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ae3c:	9e02      	ldr	r6, [sp, #8]
 800ae3e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ae42:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800ae46:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800ae4a:	441e      	add	r6, r3
 800ae4c:	0e09      	lsrs	r1, r1, #24
 800ae4e:	4633      	mov	r3, r6
 800ae50:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800ae54:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800ae58:	b2d4      	uxtb	r4, r2
 800ae5a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800ae5e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ae62:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800ae66:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800ae6a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ae6e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800ae72:	0e12      	lsrs	r2, r2, #24
 800ae74:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800ae78:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800ae7c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800ae80:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800ae84:	9702      	str	r7, [sp, #8]
 800ae86:	b2c2      	uxtb	r2, r0
 800ae88:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800ae8c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800ae90:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800ae94:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800ae98:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800ae9c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800aea0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800aea4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800aea8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800aeac:	0e00      	lsrs	r0, r0, #24
 800aeae:	fa5f f68a 	uxtb.w	r6, sl
 800aeb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeb6:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb8:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800aebc:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800aec0:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800aec4:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800aec8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800aecc:	950a      	str	r5, [sp, #40]	; 0x28
 800aece:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800aed2:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800aed6:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800aeda:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aede:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800aee2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aee6:	920b      	str	r2, [sp, #44]	; 0x2c
 800aee8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800aeec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeee:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800aef2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800aef6:	9307      	str	r3, [sp, #28]
 800aef8:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800aefc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800af00:	9b02      	ldr	r3, [sp, #8]
 800af02:	f8cd c008 	str.w	ip, [sp, #8]
 800af06:	4694      	mov	ip, r2
 800af08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af0a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800af0e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800af12:	9a02      	ldr	r2, [sp, #8]
 800af14:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800af18:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800af1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800af20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af22:	f8cd a020 	str.w	sl, [sp, #32]
 800af26:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800af2a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800af2e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800af32:	9b07      	ldr	r3, [sp, #28]
 800af34:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800af38:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800af3c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800af40:	9a08      	ldr	r2, [sp, #32]
 800af42:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800af46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af4a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800af4e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800af52:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800af56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800af5a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800af5e:	0a96      	lsrs	r6, r2, #10
 800af60:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800af64:	9602      	str	r6, [sp, #8]
 800af66:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800af6a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800af6e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800af72:	4e53      	ldr	r6, [pc, #332]	; (800b0c0 <D128_GENERIC+0x394>)
 800af74:	9f03      	ldr	r7, [sp, #12]
 800af76:	fb2c 7606 	smlad	r6, ip, r6, r7
 800af7a:	4f52      	ldr	r7, [pc, #328]	; (800b0c4 <D128_GENERIC+0x398>)
 800af7c:	fb2a 6607 	smlad	r6, sl, r7, r6
 800af80:	4f51      	ldr	r7, [pc, #324]	; (800b0c8 <D128_GENERIC+0x39c>)
 800af82:	fb21 6607 	smlad	r6, r1, r7, r6
 800af86:	4f51      	ldr	r7, [pc, #324]	; (800b0cc <D128_GENERIC+0x3a0>)
 800af88:	fb24 6607 	smlad	r6, r4, r7, r6
 800af8c:	4f50      	ldr	r7, [pc, #320]	; (800b0d0 <D128_GENERIC+0x3a4>)
 800af8e:	fb28 6607 	smlad	r6, r8, r7, r6
 800af92:	4f50      	ldr	r7, [pc, #320]	; (800b0d4 <D128_GENERIC+0x3a8>)
 800af94:	fb20 6607 	smlad	r6, r0, r7, r6
 800af98:	4f4f      	ldr	r7, [pc, #316]	; (800b0d8 <D128_GENERIC+0x3ac>)
 800af9a:	fb23 6607 	smlad	r6, r3, r7, r6
 800af9e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800afa2:	fb25 6607 	smlad	r6, r5, r7, r6
 800afa6:	4f4d      	ldr	r7, [pc, #308]	; (800b0dc <D128_GENERIC+0x3b0>)
 800afa8:	9a04      	ldr	r2, [sp, #16]
 800afaa:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800afae:	4a4c      	ldr	r2, [pc, #304]	; (800b0e0 <D128_GENERIC+0x3b4>)
 800afb0:	fb2a ee02 	smlad	lr, sl, r2, lr
 800afb4:	4f4b      	ldr	r7, [pc, #300]	; (800b0e4 <D128_GENERIC+0x3b8>)
 800afb6:	fb21 ee07 	smlad	lr, r1, r7, lr
 800afba:	4f4b      	ldr	r7, [pc, #300]	; (800b0e8 <D128_GENERIC+0x3bc>)
 800afbc:	fb24 ee07 	smlad	lr, r4, r7, lr
 800afc0:	4f4a      	ldr	r7, [pc, #296]	; (800b0ec <D128_GENERIC+0x3c0>)
 800afc2:	fb28 ee07 	smlad	lr, r8, r7, lr
 800afc6:	4f4a      	ldr	r7, [pc, #296]	; (800b0f0 <D128_GENERIC+0x3c4>)
 800afc8:	fb20 ee07 	smlad	lr, r0, r7, lr
 800afcc:	4f49      	ldr	r7, [pc, #292]	; (800b0f4 <D128_GENERIC+0x3c8>)
 800afce:	fb23 e707 	smlad	r7, r3, r7, lr
 800afd2:	f8df e144 	ldr.w	lr, [pc, #324]	; 800b118 <D128_GENERIC+0x3ec>
 800afd6:	fb25 720e 	smlad	r2, r5, lr, r7
 800afda:	f04f 0b01 	mov.w	fp, #1
 800afde:	9203      	str	r2, [sp, #12]
 800afe0:	fb2c fb0b 	smuad	fp, ip, fp
 800afe4:	4f44      	ldr	r7, [pc, #272]	; (800b0f8 <D128_GENERIC+0x3cc>)
 800afe6:	fb2a ba07 	smlad	sl, sl, r7, fp
 800afea:	4f44      	ldr	r7, [pc, #272]	; (800b0fc <D128_GENERIC+0x3d0>)
 800afec:	fb21 aa07 	smlad	sl, r1, r7, sl
 800aff0:	4f43      	ldr	r7, [pc, #268]	; (800b100 <D128_GENERIC+0x3d4>)
 800aff2:	fb24 aa07 	smlad	sl, r4, r7, sl
 800aff6:	4f43      	ldr	r7, [pc, #268]	; (800b104 <D128_GENERIC+0x3d8>)
 800aff8:	fb28 a707 	smlad	r7, r8, r7, sl
 800affc:	4a42      	ldr	r2, [pc, #264]	; (800b108 <D128_GENERIC+0x3dc>)
 800affe:	fb20 7702 	smlad	r7, r0, r2, r7
 800b002:	4a42      	ldr	r2, [pc, #264]	; (800b10c <D128_GENERIC+0x3e0>)
 800b004:	fb23 7702 	smlad	r7, r3, r2, r7
 800b008:	4b41      	ldr	r3, [pc, #260]	; (800b110 <D128_GENERIC+0x3e4>)
 800b00a:	fb25 7303 	smlad	r3, r5, r3, r7
 800b00e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b010:	9304      	str	r3, [sp, #16]
 800b012:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800b016:	b185      	cbz	r5, 800b03a <D128_GENERIC+0x30e>
 800b018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b01a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b01c:	960d      	str	r6, [sp, #52]	; 0x34
 800b01e:	4432      	add	r2, r6
 800b020:	1a52      	subs	r2, r2, r1
 800b022:	17d1      	asrs	r1, r2, #31
 800b024:	fba2 2305 	umull	r2, r3, r2, r5
 800b028:	fb05 3301 	mla	r3, r5, r1, r3
 800b02c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b030:	f143 0300 	adc.w	r3, r3, #0
 800b034:	005b      	lsls	r3, r3, #1
 800b036:	930c      	str	r3, [sp, #48]	; 0x30
 800b038:	461e      	mov	r6, r3
 800b03a:	9801      	ldr	r0, [sp, #4]
 800b03c:	9c06      	ldr	r4, [sp, #24]
 800b03e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800b040:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b042:	01f6      	lsls	r6, r6, #7
 800b044:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b048:	2300      	movs	r3, #0
 800b04a:	fbc5 2306 	smlal	r2, r3, r5, r6
 800b04e:	fb04 f101 	mul.w	r1, r4, r1
 800b052:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b054:	109b      	asrs	r3, r3, #2
 800b056:	f303 030f 	ssat	r3, #16, r3
 800b05a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800b05e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800b060:	1c62      	adds	r2, r4, #1
 800b062:	4293      	cmp	r3, r2
 800b064:	9206      	str	r2, [sp, #24]
 800b066:	dd18      	ble.n	800b09a <D128_GENERIC+0x36e>
 800b068:	9b01      	ldr	r3, [sp, #4]
 800b06a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b06c:	2a01      	cmp	r2, #1
 800b06e:	f47f ae80 	bne.w	800ad72 <D128_GENERIC+0x46>
 800b072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b074:	9d05      	ldr	r5, [sp, #20]
 800b076:	069b      	lsls	r3, r3, #26
 800b078:	6829      	ldr	r1, [r5, #0]
 800b07a:	686a      	ldr	r2, [r5, #4]
 800b07c:	68a8      	ldr	r0, [r5, #8]
 800b07e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b082:	f105 0410 	add.w	r4, r5, #16
 800b086:	d506      	bpl.n	800b096 <D128_GENERIC+0x36a>
 800b088:	ba49      	rev16	r1, r1
 800b08a:	ba52      	rev16	r2, r2
 800b08c:	ba40      	rev16	r0, r0
 800b08e:	fa9a fa9a 	rev16.w	sl, sl
 800b092:	9405      	str	r4, [sp, #20]
 800b094:	e6cf      	b.n	800ae36 <D128_GENERIC+0x10a>
 800b096:	9405      	str	r4, [sp, #20]
 800b098:	e6cd      	b.n	800ae36 <D128_GENERIC+0x10a>
 800b09a:	9a01      	ldr	r2, [sp, #4]
 800b09c:	9904      	ldr	r1, [sp, #16]
 800b09e:	6091      	str	r1, [r2, #8]
 800b0a0:	9903      	ldr	r1, [sp, #12]
 800b0a2:	60d1      	str	r1, [r2, #12]
 800b0a4:	9b02      	ldr	r3, [sp, #8]
 800b0a6:	61d3      	str	r3, [r2, #28]
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ae:	610a      	str	r2, [r1, #16]
 800b0b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b0b2:	6159      	str	r1, [r3, #20]
 800b0b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b0b6:	6199      	str	r1, [r3, #24]
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	b013      	add	sp, #76	; 0x4c
 800b0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c0:	00780069 	.word	0x00780069
 800b0c4:	005b004e 	.word	0x005b004e
 800b0c8:	00420037 	.word	0x00420037
 800b0cc:	002d0024 	.word	0x002d0024
 800b0d0:	001c0015 	.word	0x001c0015
 800b0d4:	000f000a 	.word	0x000f000a
 800b0d8:	00060003 	.word	0x00060003
 800b0dc:	00880096 	.word	0x00880096
 800b0e0:	00a200ac 	.word	0x00a200ac
 800b0e4:	00b400ba 	.word	0x00b400ba
 800b0e8:	00be00c0 	.word	0x00be00c0
 800b0ec:	00c000be 	.word	0x00c000be
 800b0f0:	00ba00b4 	.word	0x00ba00b4
 800b0f4:	00ac00a2 	.word	0x00ac00a2
 800b0f8:	00030006 	.word	0x00030006
 800b0fc:	000a000f 	.word	0x000a000f
 800b100:	0015001c 	.word	0x0015001c
 800b104:	0024002d 	.word	0x0024002d
 800b108:	00370042 	.word	0x00370042
 800b10c:	004e005b 	.word	0x004e005b
 800b110:	00690078 	.word	0x00690078
 800b114:	20000000 	.word	0x20000000
 800b118:	00960088 	.word	0x00960088

0800b11c <D16_1CH_HTONS_VOL_HP>:
 800b11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b120:	4691      	mov	r9, r2
 800b122:	b083      	sub	sp, #12
 800b124:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b126:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b12a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	4680      	mov	r8, r0
 800b132:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800b136:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b13a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b13e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800b142:	9401      	str	r4, [sp, #4]
 800b144:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b148:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800b14c:	2a00      	cmp	r2, #0
 800b14e:	d04e      	beq.n	800b1ee <D16_1CH_HTONS_VOL_HP+0xd2>
 800b150:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800b1fc <D16_1CH_HTONS_VOL_HP+0xe0>
 800b154:	1e8c      	subs	r4, r1, #2
 800b156:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800b15a:	f858 2b02 	ldr.w	r2, [r8], #2
 800b15e:	ba52      	rev16	r2, r2
 800b160:	b2d6      	uxtb	r6, r2
 800b162:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b166:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800b16a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b16e:	4413      	add	r3, r2
 800b170:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800b174:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800b178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b17c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b180:	0a93      	lsrs	r3, r2, #10
 800b182:	4a1c      	ldr	r2, [pc, #112]	; (800b1f4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800b184:	fb21 5202 	smlad	r2, r1, r2, r5
 800b188:	4d1b      	ldr	r5, [pc, #108]	; (800b1f8 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800b18a:	fb21 f505 	smuad	r5, r1, r5
 800b18e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800b192:	4410      	add	r0, r2
 800b194:	1bc0      	subs	r0, r0, r7
 800b196:	17c7      	asrs	r7, r0, #31
 800b198:	fba0 010e 	umull	r0, r1, r0, lr
 800b19c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b1a0:	fb0e 1107 	mla	r1, lr, r7, r1
 800b1a4:	f141 0100 	adc.w	r1, r1, #0
 800b1a8:	0448      	lsls	r0, r1, #17
 800b1aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b1ae:	2700      	movs	r7, #0
 800b1b0:	fbc0 670a 	smlal	r6, r7, r0, sl
 800b1b4:	45d8      	cmp	r8, fp
 800b1b6:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800b1ba:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800b1be:	4617      	mov	r7, r2
 800b1c0:	f301 010f 	ssat	r1, #16, r1
 800b1c4:	f824 1f02 	strh.w	r1, [r4, #2]!
 800b1c8:	d1c7      	bne.n	800b15a <D16_1CH_HTONS_VOL_HP+0x3e>
 800b1ca:	9901      	ldr	r1, [sp, #4]
 800b1cc:	f8c9 301c 	str.w	r3, [r9, #28]
 800b1d0:	9b00      	ldr	r3, [sp, #0]
 800b1d2:	f8c9 0010 	str.w	r0, [r9, #16]
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	f8c9 5008 	str.w	r5, [r9, #8]
 800b1dc:	f8c9 100c 	str.w	r1, [r9, #12]
 800b1e0:	f8c9 2014 	str.w	r2, [r9, #20]
 800b1e4:	f8c9 3018 	str.w	r3, [r9, #24]
 800b1e8:	b003      	add	sp, #12
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	463a      	mov	r2, r7
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	e7eb      	b.n	800b1cc <D16_1CH_HTONS_VOL_HP+0xb0>
 800b1f4:	00030001 	.word	0x00030001
 800b1f8:	00010003 	.word	0x00010003
 800b1fc:	20000000 	.word	0x20000000

0800b200 <D24_1CH_HTONS_VOL_HP>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	b089      	sub	sp, #36	; 0x24
 800b206:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b208:	6996      	ldr	r6, [r2, #24]
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800b20e:	9207      	str	r2, [sp, #28]
 800b210:	6915      	ldr	r5, [r2, #16]
 800b212:	6954      	ldr	r4, [r2, #20]
 800b214:	9606      	str	r6, [sp, #24]
 800b216:	6893      	ldr	r3, [r2, #8]
 800b218:	69d6      	ldr	r6, [r2, #28]
 800b21a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800b21e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b222:	9a04      	ldr	r2, [sp, #16]
 800b224:	9705      	str	r7, [sp, #20]
 800b226:	2a00      	cmp	r2, #0
 800b228:	d07e      	beq.n	800b328 <D24_1CH_HTONS_VOL_HP+0x128>
 800b22a:	f1a1 0b02 	sub.w	fp, r1, #2
 800b22e:	2700      	movs	r7, #0
 800b230:	46a8      	mov	r8, r5
 800b232:	f8cd b004 	str.w	fp, [sp, #4]
 800b236:	4655      	mov	r5, sl
 800b238:	46e3      	mov	fp, ip
 800b23a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800b334 <D24_1CH_HTONS_VOL_HP+0x134>
 800b23e:	46ba      	mov	sl, r7
 800b240:	469c      	mov	ip, r3
 800b242:	e055      	b.n	800b2f0 <D24_1CH_HTONS_VOL_HP+0xf0>
 800b244:	7802      	ldrb	r2, [r0, #0]
 800b246:	78c3      	ldrb	r3, [r0, #3]
 800b248:	7841      	ldrb	r1, [r0, #1]
 800b24a:	0212      	lsls	r2, r2, #8
 800b24c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800b250:	440b      	add	r3, r1
 800b252:	3002      	adds	r0, #2
 800b254:	b2d9      	uxtb	r1, r3
 800b256:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b25a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800b25e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800b262:	0c1b      	lsrs	r3, r3, #16
 800b264:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b268:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800b26c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800b270:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800b274:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800b278:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800b27c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b280:	4a2a      	ldr	r2, [pc, #168]	; (800b32c <D24_1CH_HTONS_VOL_HP+0x12c>)
 800b282:	fb23 b102 	smlad	r1, r3, r2, fp
 800b286:	4a2a      	ldr	r2, [pc, #168]	; (800b330 <D24_1CH_HTONS_VOL_HP+0x130>)
 800b288:	fb23 cb02 	smlad	fp, r3, r2, ip
 800b28c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800b290:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800b294:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800b298:	2201      	movs	r2, #1
 800b29a:	fb23 f702 	smuad	r7, r3, r2
 800b29e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800b2a2:	eb01 0208 	add.w	r2, r1, r8
 800b2a6:	1b12      	subs	r2, r2, r4
 800b2a8:	17d4      	asrs	r4, r2, #31
 800b2aa:	fba2 2305 	umull	r2, r3, r2, r5
 800b2ae:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b2b2:	fb05 3304 	mla	r3, r5, r4, r3
 800b2b6:	f143 0300 	adc.w	r3, r3, #0
 800b2ba:	9c05      	ldr	r4, [sp, #20]
 800b2bc:	03da      	lsls	r2, r3, #15
 800b2be:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b2c2:	f04f 0900 	mov.w	r9, #0
 800b2c6:	fbc4 8902 	smlal	r8, r9, r4, r2
 800b2ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b2ce:	9a01      	ldr	r2, [sp, #4]
 800b2d0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	109b      	asrs	r3, r3, #2
 800b2d8:	f303 030f 	ssat	r3, #16, r3
 800b2dc:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b2e0:	9b04      	ldr	r3, [sp, #16]
 800b2e2:	9201      	str	r2, [sp, #4]
 800b2e4:	f10a 0a01 	add.w	sl, sl, #1
 800b2e8:	459a      	cmp	sl, r3
 800b2ea:	44bc      	add	ip, r7
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	d00b      	beq.n	800b308 <D24_1CH_HTONS_VOL_HP+0x108>
 800b2f0:	f01a 0f01 	tst.w	sl, #1
 800b2f4:	d0a6      	beq.n	800b244 <D24_1CH_HTONS_VOL_HP+0x44>
 800b2f6:	78c2      	ldrb	r2, [r0, #3]
 800b2f8:	7883      	ldrb	r3, [r0, #2]
 800b2fa:	f810 1b04 	ldrb.w	r1, [r0], #4
 800b2fe:	0212      	lsls	r2, r2, #8
 800b300:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800b304:	440b      	add	r3, r1
 800b306:	e7a5      	b.n	800b254 <D24_1CH_HTONS_VOL_HP+0x54>
 800b308:	4663      	mov	r3, ip
 800b30a:	4645      	mov	r5, r8
 800b30c:	46dc      	mov	ip, fp
 800b30e:	9807      	ldr	r0, [sp, #28]
 800b310:	6141      	str	r1, [r0, #20]
 800b312:	9906      	ldr	r1, [sp, #24]
 800b314:	6083      	str	r3, [r0, #8]
 800b316:	f8c0 c00c 	str.w	ip, [r0, #12]
 800b31a:	61c6      	str	r6, [r0, #28]
 800b31c:	6105      	str	r5, [r0, #16]
 800b31e:	6181      	str	r1, [r0, #24]
 800b320:	2000      	movs	r0, #0
 800b322:	b009      	add	sp, #36	; 0x24
 800b324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b328:	4621      	mov	r1, r4
 800b32a:	e7f0      	b.n	800b30e <D24_1CH_HTONS_VOL_HP+0x10e>
 800b32c:	00030001 	.word	0x00030001
 800b330:	00060007 	.word	0x00060007
 800b334:	20000000 	.word	0x20000000

0800b338 <D32_1CH_HTONS_VOL_HP>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	4692      	mov	sl, r2
 800b33e:	b087      	sub	sp, #28
 800b340:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b342:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b346:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800b34a:	9304      	str	r3, [sp, #16]
 800b34c:	f8da 4010 	ldr.w	r4, [sl, #16]
 800b350:	f8da 8014 	ldr.w	r8, [sl, #20]
 800b354:	f8da 601c 	ldr.w	r6, [sl, #28]
 800b358:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b35c:	f8da e00c 	ldr.w	lr, [sl, #12]
 800b360:	9501      	str	r5, [sp, #4]
 800b362:	f8da c020 	ldr.w	ip, [sl, #32]
 800b366:	2a00      	cmp	r2, #0
 800b368:	d07b      	beq.n	800b462 <D32_1CH_HTONS_VOL_HP+0x12a>
 800b36a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b36e:	4f3e      	ldr	r7, [pc, #248]	; (800b468 <D32_1CH_HTONS_VOL_HP+0x130>)
 800b370:	f8cd c00c 	str.w	ip, [sp, #12]
 800b374:	9202      	str	r2, [sp, #8]
 800b376:	460d      	mov	r5, r1
 800b378:	46a1      	mov	r9, r4
 800b37a:	4684      	mov	ip, r0
 800b37c:	f8cd a014 	str.w	sl, [sp, #20]
 800b380:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b384:	ba49      	rev16	r1, r1
 800b386:	b2c8      	uxtb	r0, r1
 800b388:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800b38c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800b390:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800b394:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b398:	0e09      	lsrs	r1, r1, #24
 800b39a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800b39e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800b3a2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800b3a6:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800b3aa:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800b3ae:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800b3b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b3b6:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800b3ba:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b3be:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b3c2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800b3c6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800b3ca:	4a28      	ldr	r2, [pc, #160]	; (800b46c <D32_1CH_HTONS_VOL_HP+0x134>)
 800b3cc:	fb20 e202 	smlad	r2, r0, r2, lr
 800b3d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b3d4:	fb2a 2101 	smlad	r1, sl, r1, r2
 800b3d8:	4a25      	ldr	r2, [pc, #148]	; (800b470 <D32_1CH_HTONS_VOL_HP+0x138>)
 800b3da:	fb20 3302 	smlad	r3, r0, r2, r3
 800b3de:	4a25      	ldr	r2, [pc, #148]	; (800b474 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800b3e0:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	fb20 f003 	smuad	r0, r0, r3
 800b3ea:	4b23      	ldr	r3, [pc, #140]	; (800b478 <D32_1CH_HTONS_VOL_HP+0x140>)
 800b3ec:	fb2a 0303 	smlad	r3, sl, r3, r0
 800b3f0:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800b3f4:	9c03      	ldr	r4, [sp, #12]
 800b3f6:	eb02 0009 	add.w	r0, r2, r9
 800b3fa:	eba0 0008 	sub.w	r0, r0, r8
 800b3fe:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800b402:	fba0 0104 	umull	r0, r1, r0, r4
 800b406:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b40a:	fb04 110b 	mla	r1, r4, fp, r1
 800b40e:	f141 0100 	adc.w	r1, r1, #0
 800b412:	9c01      	ldr	r4, [sp, #4]
 800b414:	0388      	lsls	r0, r1, #14
 800b416:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b41a:	f04f 0900 	mov.w	r9, #0
 800b41e:	fbc0 8904 	smlal	r8, r9, r0, r4
 800b422:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800b426:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800b42a:	f300 000f 	ssat	r0, #16, r0
 800b42e:	9902      	ldr	r1, [sp, #8]
 800b430:	f825 0b02 	strh.w	r0, [r5], #2
 800b434:	428d      	cmp	r5, r1
 800b436:	4690      	mov	r8, r2
 800b438:	d1a2      	bne.n	800b380 <D32_1CH_HTONS_VOL_HP+0x48>
 800b43a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b43e:	464c      	mov	r4, r9
 800b440:	f8ca 3008 	str.w	r3, [sl, #8]
 800b444:	9b04      	ldr	r3, [sp, #16]
 800b446:	f8ca e00c 	str.w	lr, [sl, #12]
 800b44a:	2000      	movs	r0, #0
 800b44c:	f8ca 601c 	str.w	r6, [sl, #28]
 800b450:	f8ca 4010 	str.w	r4, [sl, #16]
 800b454:	f8ca 2014 	str.w	r2, [sl, #20]
 800b458:	f8ca 3018 	str.w	r3, [sl, #24]
 800b45c:	b007      	add	sp, #28
 800b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b462:	4642      	mov	r2, r8
 800b464:	e7ec      	b.n	800b440 <D32_1CH_HTONS_VOL_HP+0x108>
 800b466:	bf00      	nop
 800b468:	20000000 	.word	0x20000000
 800b46c:	00060003 	.word	0x00060003
 800b470:	000a000c 	.word	0x000a000c
 800b474:	000c000a 	.word	0x000c000a
 800b478:	00030006 	.word	0x00030006

0800b47c <D48_1CH_HTONS_VOL_HP>:
 800b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	4613      	mov	r3, r2
 800b482:	461c      	mov	r4, r3
 800b484:	b087      	sub	sp, #28
 800b486:	4625      	mov	r5, r4
 800b488:	4626      	mov	r6, r4
 800b48a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800b48c:	9205      	str	r2, [sp, #20]
 800b48e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b490:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800b494:	9501      	str	r5, [sp, #4]
 800b496:	4680      	mov	r8, r0
 800b498:	6a35      	ldr	r5, [r6, #32]
 800b49a:	6918      	ldr	r0, [r3, #16]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	9304      	str	r3, [sp, #16]
 800b4a0:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800b4a4:	68a3      	ldr	r3, [r4, #8]
 800b4a6:	9502      	str	r5, [sp, #8]
 800b4a8:	68e4      	ldr	r4, [r4, #12]
 800b4aa:	2a00      	cmp	r2, #0
 800b4ac:	f000 808c 	beq.w	800b5c8 <D48_1CH_HTONS_VOL_HP+0x14c>
 800b4b0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b4b4:	4d45      	ldr	r5, [pc, #276]	; (800b5cc <D48_1CH_HTONS_VOL_HP+0x150>)
 800b4b6:	9203      	str	r2, [sp, #12]
 800b4b8:	468c      	mov	ip, r1
 800b4ba:	e898 0044 	ldmia.w	r8, {r2, r6}
 800b4be:	f108 0806 	add.w	r8, r8, #6
 800b4c2:	ba52      	rev16	r2, r2
 800b4c4:	ba76      	rev16	r6, r6
 800b4c6:	b2d7      	uxtb	r7, r2
 800b4c8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b4cc:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800b4d0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b4d4:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800b4d8:	0e12      	lsrs	r2, r2, #24
 800b4da:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800b4de:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b4e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b4e6:	fa5f fb86 	uxtb.w	fp, r6
 800b4ea:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b4ee:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800b4f2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800b4f6:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800b4fa:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800b4fe:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800b502:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800b506:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b50a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b50e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b512:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800b516:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b51a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b51e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b522:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800b526:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800b52a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800b52e:	4a28      	ldr	r2, [pc, #160]	; (800b5d0 <D48_1CH_HTONS_VOL_HP+0x154>)
 800b530:	fb2a 4202 	smlad	r2, sl, r2, r4
 800b534:	4927      	ldr	r1, [pc, #156]	; (800b5d4 <D48_1CH_HTONS_VOL_HP+0x158>)
 800b536:	fb27 2201 	smlad	r2, r7, r1, r2
 800b53a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b53e:	fb26 2201 	smlad	r2, r6, r1, r2
 800b542:	4925      	ldr	r1, [pc, #148]	; (800b5d8 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800b544:	fb2a 3401 	smlad	r4, sl, r1, r3
 800b548:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800b54c:	fb27 4403 	smlad	r4, r7, r3, r4
 800b550:	4b22      	ldr	r3, [pc, #136]	; (800b5dc <D48_1CH_HTONS_VOL_HP+0x160>)
 800b552:	fb26 4403 	smlad	r4, r6, r3, r4
 800b556:	2101      	movs	r1, #1
 800b558:	fb2a fa01 	smuad	sl, sl, r1
 800b55c:	4b20      	ldr	r3, [pc, #128]	; (800b5e0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800b55e:	fb27 a703 	smlad	r7, r7, r3, sl
 800b562:	4b20      	ldr	r3, [pc, #128]	; (800b5e4 <D48_1CH_HTONS_VOL_HP+0x168>)
 800b564:	fb26 7303 	smlad	r3, r6, r3, r7
 800b568:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800b56c:	9e02      	ldr	r6, [sp, #8]
 800b56e:	9f01      	ldr	r7, [sp, #4]
 800b570:	4410      	add	r0, r2
 800b572:	eba0 0009 	sub.w	r0, r0, r9
 800b576:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800b57a:	fba0 0106 	umull	r0, r1, r0, r6
 800b57e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b582:	fb06 110a 	mla	r1, r6, sl, r1
 800b586:	f141 0100 	adc.w	r1, r1, #0
 800b58a:	0308      	lsls	r0, r1, #12
 800b58c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b590:	f04f 0a00 	mov.w	sl, #0
 800b594:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800b598:	4657      	mov	r7, sl
 800b59a:	10b8      	asrs	r0, r7, #2
 800b59c:	f300 000f 	ssat	r0, #16, r0
 800b5a0:	f82c 0b02 	strh.w	r0, [ip], #2
 800b5a4:	0048      	lsls	r0, r1, #1
 800b5a6:	9903      	ldr	r1, [sp, #12]
 800b5a8:	458c      	cmp	ip, r1
 800b5aa:	4691      	mov	r9, r2
 800b5ac:	d185      	bne.n	800b4ba <D48_1CH_HTONS_VOL_HP+0x3e>
 800b5ae:	9d05      	ldr	r5, [sp, #20]
 800b5b0:	616a      	str	r2, [r5, #20]
 800b5b2:	9a04      	ldr	r2, [sp, #16]
 800b5b4:	6128      	str	r0, [r5, #16]
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	60ab      	str	r3, [r5, #8]
 800b5ba:	60ec      	str	r4, [r5, #12]
 800b5bc:	f8c5 e01c 	str.w	lr, [r5, #28]
 800b5c0:	61aa      	str	r2, [r5, #24]
 800b5c2:	b007      	add	sp, #28
 800b5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c8:	464a      	mov	r2, r9
 800b5ca:	e7f0      	b.n	800b5ae <D48_1CH_HTONS_VOL_HP+0x132>
 800b5cc:	20000000 	.word	0x20000000
 800b5d0:	000f000a 	.word	0x000f000a
 800b5d4:	00060003 	.word	0x00060003
 800b5d8:	00150019 	.word	0x00150019
 800b5dc:	00190015 	.word	0x00190015
 800b5e0:	00030006 	.word	0x00030006
 800b5e4:	000a000f 	.word	0x000a000f

0800b5e8 <D64_1CH_HTONS_VOL_HP>:
 800b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	b089      	sub	sp, #36	; 0x24
 800b5ee:	4614      	mov	r4, r2
 800b5f0:	9207      	str	r2, [sp, #28]
 800b5f2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b5f4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800b5f8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800b5fc:	6992      	ldr	r2, [r2, #24]
 800b5fe:	9206      	str	r2, [sp, #24]
 800b600:	68e2      	ldr	r2, [r4, #12]
 800b602:	9201      	str	r2, [sp, #4]
 800b604:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b606:	9203      	str	r2, [sp, #12]
 800b608:	6a22      	ldr	r2, [r4, #32]
 800b60a:	69e5      	ldr	r5, [r4, #28]
 800b60c:	68a6      	ldr	r6, [r4, #8]
 800b60e:	9204      	str	r2, [sp, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 80b0 	beq.w	800b776 <D64_1CH_HTONS_VOL_HP+0x18e>
 800b616:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b61a:	4f58      	ldr	r7, [pc, #352]	; (800b77c <D64_1CH_HTONS_VOL_HP+0x194>)
 800b61c:	9305      	str	r3, [sp, #20]
 800b61e:	9102      	str	r1, [sp, #8]
 800b620:	f850 2b08 	ldr.w	r2, [r0], #8
 800b624:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b628:	ba52      	rev16	r2, r2
 800b62a:	fa93 f993 	rev16.w	r9, r3
 800b62e:	b2d4      	uxtb	r4, r2
 800b630:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800b634:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800b638:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b63c:	9901      	ldr	r1, [sp, #4]
 800b63e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b642:	0e12      	lsrs	r2, r2, #24
 800b644:	44ab      	add	fp, r5
 800b646:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b64a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800b64e:	fa5f f289 	uxtb.w	r2, r9
 800b652:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800b656:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800b65a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800b65e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b662:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b666:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800b66a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800b66e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800b672:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800b676:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800b67a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800b67e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800b682:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b686:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800b68a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b68e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b692:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b69a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b69e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800b6a2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b6a6:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800b6aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b6ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800b6b2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800b6b6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b6ba:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800b6be:	4b30      	ldr	r3, [pc, #192]	; (800b780 <D64_1CH_HTONS_VOL_HP+0x198>)
 800b6c0:	fb2b 1303 	smlad	r3, fp, r3, r1
 800b6c4:	492f      	ldr	r1, [pc, #188]	; (800b784 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800b6c6:	fb24 3301 	smlad	r3, r4, r1, r3
 800b6ca:	492f      	ldr	r1, [pc, #188]	; (800b788 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800b6cc:	fb22 3301 	smlad	r3, r2, r1, r3
 800b6d0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b6d4:	fb2e 390a 	smlad	r9, lr, sl, r3
 800b6d8:	4b2c      	ldr	r3, [pc, #176]	; (800b78c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800b6da:	fb2b 6603 	smlad	r6, fp, r3, r6
 800b6de:	fb2e 6613 	smladx	r6, lr, r3, r6
 800b6e2:	4b2b      	ldr	r3, [pc, #172]	; (800b790 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800b6e4:	fb24 6603 	smlad	r6, r4, r3, r6
 800b6e8:	fb22 6313 	smladx	r3, r2, r3, r6
 800b6ec:	f04f 0a01 	mov.w	sl, #1
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	fb2b fb0a 	smuad	fp, fp, sl
 800b6f6:	4b27      	ldr	r3, [pc, #156]	; (800b794 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800b6f8:	fb24 ba03 	smlad	sl, r4, r3, fp
 800b6fc:	4b26      	ldr	r3, [pc, #152]	; (800b798 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800b6fe:	fb22 a203 	smlad	r2, r2, r3, sl
 800b702:	4b26      	ldr	r3, [pc, #152]	; (800b79c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800b704:	fb2e 2603 	smlad	r6, lr, r3, r2
 800b708:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800b70c:	eb0a 020c 	add.w	r2, sl, ip
 800b710:	9c04      	ldr	r4, [sp, #16]
 800b712:	9903      	ldr	r1, [sp, #12]
 800b714:	eba2 0208 	sub.w	r2, r2, r8
 800b718:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b71c:	fba2 2304 	umull	r2, r3, r2, r4
 800b720:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b724:	fb04 3309 	mla	r3, r4, r9, r3
 800b728:	f143 0300 	adc.w	r3, r3, #0
 800b72c:	02da      	lsls	r2, r3, #11
 800b72e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b732:	f04f 0900 	mov.w	r9, #0
 800b736:	fbc1 8902 	smlal	r8, r9, r1, r2
 800b73a:	9902      	ldr	r1, [sp, #8]
 800b73c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800b740:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b744:	f302 020f 	ssat	r2, #16, r2
 800b748:	9b05      	ldr	r3, [sp, #20]
 800b74a:	f821 2b02 	strh.w	r2, [r1], #2
 800b74e:	4299      	cmp	r1, r3
 800b750:	9102      	str	r1, [sp, #8]
 800b752:	46d0      	mov	r8, sl
 800b754:	f47f af64 	bne.w	800b620 <D64_1CH_HTONS_VOL_HP+0x38>
 800b758:	9a07      	ldr	r2, [sp, #28]
 800b75a:	9901      	ldr	r1, [sp, #4]
 800b75c:	60d1      	str	r1, [r2, #12]
 800b75e:	9906      	ldr	r1, [sp, #24]
 800b760:	6096      	str	r6, [r2, #8]
 800b762:	2000      	movs	r0, #0
 800b764:	61d5      	str	r5, [r2, #28]
 800b766:	f8c2 c010 	str.w	ip, [r2, #16]
 800b76a:	f8c2 a014 	str.w	sl, [r2, #20]
 800b76e:	6191      	str	r1, [r2, #24]
 800b770:	b009      	add	sp, #36	; 0x24
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b776:	46c2      	mov	sl, r8
 800b778:	4622      	mov	r2, r4
 800b77a:	e7ee      	b.n	800b75a <D64_1CH_HTONS_VOL_HP+0x172>
 800b77c:	20000000 	.word	0x20000000
 800b780:	001c0015 	.word	0x001c0015
 800b784:	000f000a 	.word	0x000f000a
 800b788:	00060003 	.word	0x00060003
 800b78c:	0024002a 	.word	0x0024002a
 800b790:	002e0030 	.word	0x002e0030
 800b794:	00030006 	.word	0x00030006
 800b798:	000a000f 	.word	0x000a000f
 800b79c:	0015001c 	.word	0x0015001c

0800b7a0 <D80_1CH_HTONS_VOL_HP>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	b089      	sub	sp, #36	; 0x24
 800b7a8:	4686      	mov	lr, r0
 800b7aa:	6918      	ldr	r0, [r3, #16]
 800b7ac:	9000      	str	r0, [sp, #0]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	461c      	mov	r4, r3
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	9302      	str	r3, [sp, #8]
 800b7b6:	6983      	ldr	r3, [r0, #24]
 800b7b8:	9306      	str	r3, [sp, #24]
 800b7ba:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800b7be:	69c3      	ldr	r3, [r0, #28]
 800b7c0:	68c0      	ldr	r0, [r0, #12]
 800b7c2:	9207      	str	r2, [sp, #28]
 800b7c4:	9001      	str	r0, [sp, #4]
 800b7c6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b7c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b7ca:	9003      	str	r0, [sp, #12]
 800b7cc:	6a20      	ldr	r0, [r4, #32]
 800b7ce:	9004      	str	r0, [sp, #16]
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	f000 80d2 	beq.w	800b97a <D80_1CH_HTONS_VOL_HP+0x1da>
 800b7d6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b7da:	4869      	ldr	r0, [pc, #420]	; (800b980 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b7dc:	9205      	str	r2, [sp, #20]
 800b7de:	461c      	mov	r4, r3
 800b7e0:	f8de 5000 	ldr.w	r5, [lr]
 800b7e4:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b7e8:	f8de 3008 	ldr.w	r3, [lr, #8]
 800b7ec:	f10e 0e0a 	add.w	lr, lr, #10
 800b7f0:	ba6d      	rev16	r5, r5
 800b7f2:	ba52      	rev16	r2, r2
 800b7f4:	fa93 fb93 	rev16.w	fp, r3
 800b7f8:	b2ee      	uxtb	r6, r5
 800b7fa:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800b7fe:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800b802:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b806:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800b80a:	eb04 0a07 	add.w	sl, r4, r7
 800b80e:	0e2d      	lsrs	r5, r5, #24
 800b810:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800b814:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800b818:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800b81c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800b820:	b2d5      	uxtb	r5, r2
 800b822:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800b826:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800b82a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800b82e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b832:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b836:	0e12      	lsrs	r2, r2, #24
 800b838:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800b83c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800b840:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b844:	fa5f f48b 	uxtb.w	r4, fp
 800b848:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b84c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800b850:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800b854:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800b858:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800b85c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800b860:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800b864:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800b868:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b86c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b870:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b874:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b878:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b87c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b880:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800b884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b888:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800b88c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b890:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b894:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800b898:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800b89c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800b8a0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800b8a4:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800b8a8:	4d36      	ldr	r5, [pc, #216]	; (800b984 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b8aa:	9f01      	ldr	r7, [sp, #4]
 800b8ac:	fb23 7505 	smlad	r5, r3, r5, r7
 800b8b0:	4f35      	ldr	r7, [pc, #212]	; (800b988 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b8b2:	fb29 5507 	smlad	r5, r9, r7, r5
 800b8b6:	4f35      	ldr	r7, [pc, #212]	; (800b98c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b8b8:	fb28 5507 	smlad	r5, r8, r7, r5
 800b8bc:	4f34      	ldr	r7, [pc, #208]	; (800b990 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b8be:	fb22 5507 	smlad	r5, r2, r7, r5
 800b8c2:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b8c6:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800b8ca:	4d32      	ldr	r5, [pc, #200]	; (800b994 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b8cc:	fb23 cc05 	smlad	ip, r3, r5, ip
 800b8d0:	4d31      	ldr	r5, [pc, #196]	; (800b998 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b8d2:	fb29 cc05 	smlad	ip, r9, r5, ip
 800b8d6:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800b8da:	fb28 c505 	smlad	r5, r8, r5, ip
 800b8de:	4f2f      	ldr	r7, [pc, #188]	; (800b99c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800b8e0:	fb22 5507 	smlad	r5, r2, r7, r5
 800b8e4:	4f2e      	ldr	r7, [pc, #184]	; (800b9a0 <D80_1CH_HTONS_VOL_HP+0x200>)
 800b8e6:	fb26 5507 	smlad	r5, r6, r7, r5
 800b8ea:	f04f 0a01 	mov.w	sl, #1
 800b8ee:	9501      	str	r5, [sp, #4]
 800b8f0:	fb23 fa0a 	smuad	sl, r3, sl
 800b8f4:	4b2b      	ldr	r3, [pc, #172]	; (800b9a4 <D80_1CH_HTONS_VOL_HP+0x204>)
 800b8f6:	fb29 a903 	smlad	r9, r9, r3, sl
 800b8fa:	4d2b      	ldr	r5, [pc, #172]	; (800b9a8 <D80_1CH_HTONS_VOL_HP+0x208>)
 800b8fc:	fb28 9805 	smlad	r8, r8, r5, r9
 800b900:	4d2a      	ldr	r5, [pc, #168]	; (800b9ac <D80_1CH_HTONS_VOL_HP+0x20c>)
 800b902:	fb22 8205 	smlad	r2, r2, r5, r8
 800b906:	4b2a      	ldr	r3, [pc, #168]	; (800b9b0 <D80_1CH_HTONS_VOL_HP+0x210>)
 800b908:	fb26 2c03 	smlad	ip, r6, r3, r2
 800b90c:	9b00      	ldr	r3, [sp, #0]
 800b90e:	9d04      	ldr	r5, [sp, #16]
 800b910:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800b914:	4453      	add	r3, sl
 800b916:	461a      	mov	r2, r3
 800b918:	9b02      	ldr	r3, [sp, #8]
 800b91a:	f8cd a008 	str.w	sl, [sp, #8]
 800b91e:	1ad2      	subs	r2, r2, r3
 800b920:	17d7      	asrs	r7, r2, #31
 800b922:	fba2 2305 	umull	r2, r3, r2, r5
 800b926:	fb05 3307 	mla	r3, r5, r7, r3
 800b92a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b92e:	f143 0300 	adc.w	r3, r3, #0
 800b932:	9d03      	ldr	r5, [sp, #12]
 800b934:	029a      	lsls	r2, r3, #10
 800b936:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b93a:	2700      	movs	r7, #0
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	fbc5 6702 	smlal	r6, r7, r5, r2
 800b942:	10ba      	asrs	r2, r7, #2
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	f302 020f 	ssat	r2, #16, r2
 800b94a:	9b05      	ldr	r3, [sp, #20]
 800b94c:	f821 2b02 	strh.w	r2, [r1], #2
 800b950:	4299      	cmp	r1, r3
 800b952:	f47f af45 	bne.w	800b7e0 <D80_1CH_HTONS_VOL_HP+0x40>
 800b956:	4623      	mov	r3, r4
 800b958:	9907      	ldr	r1, [sp, #28]
 800b95a:	9801      	ldr	r0, [sp, #4]
 800b95c:	60c8      	str	r0, [r1, #12]
 800b95e:	9a00      	ldr	r2, [sp, #0]
 800b960:	f8c1 c008 	str.w	ip, [r1, #8]
 800b964:	4608      	mov	r0, r1
 800b966:	61cb      	str	r3, [r1, #28]
 800b968:	610a      	str	r2, [r1, #16]
 800b96a:	f8c1 a014 	str.w	sl, [r1, #20]
 800b96e:	9906      	ldr	r1, [sp, #24]
 800b970:	6181      	str	r1, [r0, #24]
 800b972:	2000      	movs	r0, #0
 800b974:	b009      	add	sp, #36	; 0x24
 800b976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b97e:	e7eb      	b.n	800b958 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800b980:	20000000 	.word	0x20000000
 800b984:	002d0024 	.word	0x002d0024
 800b988:	001c0015 	.word	0x001c0015
 800b98c:	000f000a 	.word	0x000f000a
 800b990:	00060003 	.word	0x00060003
 800b994:	0037003f 	.word	0x0037003f
 800b998:	00450049 	.word	0x00450049
 800b99c:	00490045 	.word	0x00490045
 800b9a0:	003f0037 	.word	0x003f0037
 800b9a4:	00030006 	.word	0x00030006
 800b9a8:	000a000f 	.word	0x000a000f
 800b9ac:	0015001c 	.word	0x0015001c
 800b9b0:	0024002d 	.word	0x0024002d

0800b9b4 <D128_1CH_HTONS_VOL_HP>:
 800b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b8:	b093      	sub	sp, #76	; 0x4c
 800b9ba:	4614      	mov	r4, r2
 800b9bc:	9211      	str	r2, [sp, #68]	; 0x44
 800b9be:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b9c0:	6912      	ldr	r2, [r2, #16]
 800b9c2:	9203      	str	r2, [sp, #12]
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4615      	mov	r5, r2
 800b9c8:	6964      	ldr	r4, [r4, #20]
 800b9ca:	9406      	str	r4, [sp, #24]
 800b9cc:	4614      	mov	r4, r2
 800b9ce:	6992      	ldr	r2, [r2, #24]
 800b9d0:	9210      	str	r2, [sp, #64]	; 0x40
 800b9d2:	68ea      	ldr	r2, [r5, #12]
 800b9d4:	9204      	str	r2, [sp, #16]
 800b9d6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800b9d8:	69e6      	ldr	r6, [r4, #28]
 800b9da:	920d      	str	r2, [sp, #52]	; 0x34
 800b9dc:	68a4      	ldr	r4, [r4, #8]
 800b9de:	6a2a      	ldr	r2, [r5, #32]
 800b9e0:	9405      	str	r4, [sp, #20]
 800b9e2:	920e      	str	r2, [sp, #56]	; 0x38
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 8145 	beq.w	800bc74 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800b9ea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9f0:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800bcd0 <D128_1CH_HTONS_VOL_HP+0x31c>
 800b9f4:	9107      	str	r1, [sp, #28]
 800b9f6:	f100 0310 	add.w	r3, r0, #16
 800b9fa:	4699      	mov	r9, r3
 800b9fc:	f1a9 0110 	sub.w	r1, r9, #16
 800ba00:	c90e      	ldmia	r1, {r1, r2, r3}
 800ba02:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800ba06:	ba49      	rev16	r1, r1
 800ba08:	ba52      	rev16	r2, r2
 800ba0a:	ba5b      	rev16	r3, r3
 800ba0c:	fa90 fa90 	rev16.w	sl, r0
 800ba10:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800ba14:	b2cc      	uxtb	r4, r1
 800ba16:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800ba1a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800ba1e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800ba22:	0e09      	lsrs	r1, r1, #24
 800ba24:	4426      	add	r6, r4
 800ba26:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800ba2a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800ba2e:	b2d0      	uxtb	r0, r2
 800ba30:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800ba34:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800ba38:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ba3c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800ba40:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800ba44:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800ba48:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800ba4c:	0e12      	lsrs	r2, r2, #24
 800ba4e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800ba52:	9701      	str	r7, [sp, #4]
 800ba54:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800ba58:	4627      	mov	r7, r4
 800ba5a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800ba5e:	9702      	str	r7, [sp, #8]
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800ba66:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800ba6a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800ba6e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800ba72:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800ba76:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ba7a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800ba7e:	0e1b      	lsrs	r3, r3, #24
 800ba80:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800ba84:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ba88:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800ba8c:	fa5f f38a 	uxtb.w	r3, sl
 800ba90:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ba94:	960a      	str	r6, [sp, #40]	; 0x28
 800ba96:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800ba9a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800ba9e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800baa2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800baa6:	950b      	str	r5, [sp, #44]	; 0x2c
 800baa8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800baac:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800bab0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800bab4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800bab8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800babc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800bac0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800bac4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800bac8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800bacc:	9308      	str	r3, [sp, #32]
 800bace:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800bad2:	9b01      	ldr	r3, [sp, #4]
 800bad4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800bad8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800badc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800bae0:	9b02      	ldr	r3, [sp, #8]
 800bae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	9b08      	ldr	r3, [sp, #32]
 800baea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baee:	9308      	str	r3, [sp, #32]
 800baf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800baf6:	950c      	str	r5, [sp, #48]	; 0x30
 800baf8:	461d      	mov	r5, r3
 800bafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bb00:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bb04:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800bb08:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	9b02      	ldr	r3, [sp, #8]
 800bb10:	9202      	str	r2, [sp, #8]
 800bb12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb16:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bb1a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bb1e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800bb22:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bb26:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800bb2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bb2e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800bb32:	9b08      	ldr	r3, [sp, #32]
 800bb34:	9f01      	ldr	r7, [sp, #4]
 800bb36:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bb3a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bb3e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bb42:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bb46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800bb4a:	46be      	mov	lr, r7
 800bb4c:	0a96      	lsrs	r6, r2, #10
 800bb4e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800bb52:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800bb56:	4f49      	ldr	r7, [pc, #292]	; (800bc7c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800bb58:	9a04      	ldr	r2, [sp, #16]
 800bb5a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800bb5e:	4a48      	ldr	r2, [pc, #288]	; (800bc80 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800bb60:	fb2a ee02 	smlad	lr, sl, r2, lr
 800bb64:	4a47      	ldr	r2, [pc, #284]	; (800bc84 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800bb66:	fb21 ee02 	smlad	lr, r1, r2, lr
 800bb6a:	4a47      	ldr	r2, [pc, #284]	; (800bc88 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800bb6c:	fb24 ee02 	smlad	lr, r4, r2, lr
 800bb70:	4a46      	ldr	r2, [pc, #280]	; (800bc8c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800bb72:	9f02      	ldr	r7, [sp, #8]
 800bb74:	fb27 ee02 	smlad	lr, r7, r2, lr
 800bb78:	4a45      	ldr	r2, [pc, #276]	; (800bc90 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800bb7a:	fb20 ee02 	smlad	lr, r0, r2, lr
 800bb7e:	4a45      	ldr	r2, [pc, #276]	; (800bc94 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800bb80:	fb23 e702 	smlad	r7, r3, r2, lr
 800bb84:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800bb88:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800bb8c:	9f01      	ldr	r7, [sp, #4]
 800bb8e:	4a42      	ldr	r2, [pc, #264]	; (800bc98 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800bb90:	46bc      	mov	ip, r7
 800bb92:	9f05      	ldr	r7, [sp, #20]
 800bb94:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800bb98:	4a40      	ldr	r2, [pc, #256]	; (800bc9c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800bb9a:	fb2a cc02 	smlad	ip, sl, r2, ip
 800bb9e:	4f40      	ldr	r7, [pc, #256]	; (800bca0 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800bba0:	fb21 cc07 	smlad	ip, r1, r7, ip
 800bba4:	4f3f      	ldr	r7, [pc, #252]	; (800bca4 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800bba6:	fb24 cc07 	smlad	ip, r4, r7, ip
 800bbaa:	4f3f      	ldr	r7, [pc, #252]	; (800bca8 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800bbac:	9a02      	ldr	r2, [sp, #8]
 800bbae:	fb22 cc07 	smlad	ip, r2, r7, ip
 800bbb2:	4f3e      	ldr	r7, [pc, #248]	; (800bcac <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800bbb4:	fb20 cc07 	smlad	ip, r0, r7, ip
 800bbb8:	4f3d      	ldr	r7, [pc, #244]	; (800bcb0 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800bbba:	fb23 c707 	smlad	r7, r3, r7, ip
 800bbbe:	f8df c114 	ldr.w	ip, [pc, #276]	; 800bcd4 <D128_1CH_HTONS_VOL_HP+0x320>
 800bbc2:	fb25 720c 	smlad	r2, r5, ip, r7
 800bbc6:	f04f 0b01 	mov.w	fp, #1
 800bbca:	9204      	str	r2, [sp, #16]
 800bbcc:	9f01      	ldr	r7, [sp, #4]
 800bbce:	fb27 fb0b 	smuad	fp, r7, fp
 800bbd2:	4f38      	ldr	r7, [pc, #224]	; (800bcb4 <D128_1CH_HTONS_VOL_HP+0x300>)
 800bbd4:	fb2a ba07 	smlad	sl, sl, r7, fp
 800bbd8:	4f37      	ldr	r7, [pc, #220]	; (800bcb8 <D128_1CH_HTONS_VOL_HP+0x304>)
 800bbda:	fb21 aa07 	smlad	sl, r1, r7, sl
 800bbde:	4f37      	ldr	r7, [pc, #220]	; (800bcbc <D128_1CH_HTONS_VOL_HP+0x308>)
 800bbe0:	fb24 aa07 	smlad	sl, r4, r7, sl
 800bbe4:	4f36      	ldr	r7, [pc, #216]	; (800bcc0 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800bbe6:	9a02      	ldr	r2, [sp, #8]
 800bbe8:	fb22 a707 	smlad	r7, r2, r7, sl
 800bbec:	4a35      	ldr	r2, [pc, #212]	; (800bcc4 <D128_1CH_HTONS_VOL_HP+0x310>)
 800bbee:	fb20 7702 	smlad	r7, r0, r2, r7
 800bbf2:	4a35      	ldr	r2, [pc, #212]	; (800bcc8 <D128_1CH_HTONS_VOL_HP+0x314>)
 800bbf4:	fb23 7702 	smlad	r7, r3, r2, r7
 800bbf8:	4b34      	ldr	r3, [pc, #208]	; (800bccc <D128_1CH_HTONS_VOL_HP+0x318>)
 800bbfa:	fb25 7303 	smlad	r3, r5, r3, r7
 800bbfe:	9305      	str	r3, [sp, #20]
 800bc00:	9b03      	ldr	r3, [sp, #12]
 800bc02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800bc04:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800bc08:	4473      	add	r3, lr
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	9b06      	ldr	r3, [sp, #24]
 800bc0e:	f8cd e018 	str.w	lr, [sp, #24]
 800bc12:	1ad2      	subs	r2, r2, r3
 800bc14:	17d1      	asrs	r1, r2, #31
 800bc16:	fba2 2304 	umull	r2, r3, r2, r4
 800bc1a:	fb04 3301 	mla	r3, r4, r1, r3
 800bc1e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bc22:	f143 0300 	adc.w	r3, r3, #0
 800bc26:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bc28:	021a      	lsls	r2, r3, #8
 800bc2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bc2e:	2100      	movs	r1, #0
 800bc30:	fbc4 0102 	smlal	r0, r1, r4, r2
 800bc34:	108a      	asrs	r2, r1, #2
 800bc36:	9907      	ldr	r1, [sp, #28]
 800bc38:	f302 020f 	ssat	r2, #16, r2
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	f821 2b02 	strh.w	r2, [r1], #2
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc46:	9107      	str	r1, [sp, #28]
 800bc48:	4299      	cmp	r1, r3
 800bc4a:	f109 0910 	add.w	r9, r9, #16
 800bc4e:	f47f aed5 	bne.w	800b9fc <D128_1CH_HTONS_VOL_HP+0x48>
 800bc52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc54:	9905      	ldr	r1, [sp, #20]
 800bc56:	6091      	str	r1, [r2, #8]
 800bc58:	9904      	ldr	r1, [sp, #16]
 800bc5a:	60d1      	str	r1, [r2, #12]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	61d6      	str	r6, [r2, #28]
 800bc60:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bc62:	9a03      	ldr	r2, [sp, #12]
 800bc64:	611a      	str	r2, [r3, #16]
 800bc66:	2000      	movs	r0, #0
 800bc68:	f8c3 e014 	str.w	lr, [r3, #20]
 800bc6c:	6199      	str	r1, [r3, #24]
 800bc6e:	b013      	add	sp, #76	; 0x4c
 800bc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc74:	f8dd e018 	ldr.w	lr, [sp, #24]
 800bc78:	e7eb      	b.n	800bc52 <D128_1CH_HTONS_VOL_HP+0x29e>
 800bc7a:	bf00      	nop
 800bc7c:	00780069 	.word	0x00780069
 800bc80:	005b004e 	.word	0x005b004e
 800bc84:	00420037 	.word	0x00420037
 800bc88:	002d0024 	.word	0x002d0024
 800bc8c:	001c0015 	.word	0x001c0015
 800bc90:	000f000a 	.word	0x000f000a
 800bc94:	00060003 	.word	0x00060003
 800bc98:	00880096 	.word	0x00880096
 800bc9c:	00a200ac 	.word	0x00a200ac
 800bca0:	00b400ba 	.word	0x00b400ba
 800bca4:	00be00c0 	.word	0x00be00c0
 800bca8:	00c000be 	.word	0x00c000be
 800bcac:	00ba00b4 	.word	0x00ba00b4
 800bcb0:	00ac00a2 	.word	0x00ac00a2
 800bcb4:	00030006 	.word	0x00030006
 800bcb8:	000a000f 	.word	0x000a000f
 800bcbc:	0015001c 	.word	0x0015001c
 800bcc0:	0024002d 	.word	0x0024002d
 800bcc4:	00370042 	.word	0x00370042
 800bcc8:	004e005b 	.word	0x004e005b
 800bccc:	00690078 	.word	0x00690078
 800bcd0:	20000000 	.word	0x20000000
 800bcd4:	00960088 	.word	0x00960088

0800bcd8 <PDM_Filter_Init>:
 800bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcda:	2240      	movs	r2, #64	; 0x40
 800bcdc:	4604      	mov	r4, r0
 800bcde:	2100      	movs	r1, #0
 800bce0:	300c      	adds	r0, #12
 800bce2:	f004 f937 	bl	800ff54 <memset>
 800bce6:	493b      	ldr	r1, [pc, #236]	; (800bdd4 <PDM_Filter_Init+0xfc>)
 800bce8:	483b      	ldr	r0, [pc, #236]	; (800bdd8 <PDM_Filter_Init+0x100>)
 800bcea:	f000 f98d 	bl	800c008 <CRC_Lock>
 800bcee:	8822      	ldrh	r2, [r4, #0]
 800bcf0:	8963      	ldrh	r3, [r4, #10]
 800bcf2:	4938      	ldr	r1, [pc, #224]	; (800bdd4 <PDM_Filter_Init+0xfc>)
 800bcf4:	8925      	ldrh	r5, [r4, #8]
 800bcf6:	86a3      	strh	r3, [r4, #52]	; 0x34
 800bcf8:	2801      	cmp	r0, #1
 800bcfa:	f04f 0300 	mov.w	r3, #0
 800bcfe:	bf18      	it	ne
 800bd00:	2100      	movne	r1, #0
 800bd02:	2a01      	cmp	r2, #1
 800bd04:	6461      	str	r1, [r4, #68]	; 0x44
 800bd06:	86e5      	strh	r5, [r4, #54]	; 0x36
 800bd08:	61a3      	str	r3, [r4, #24]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	6163      	str	r3, [r4, #20]
 800bd0e:	60e3      	str	r3, [r4, #12]
 800bd10:	6263      	str	r3, [r4, #36]	; 0x24
 800bd12:	61e3      	str	r3, [r4, #28]
 800bd14:	6223      	str	r3, [r4, #32]
 800bd16:	6423      	str	r3, [r4, #64]	; 0x40
 800bd18:	d918      	bls.n	800bd4c <PDM_Filter_Init+0x74>
 800bd1a:	2003      	movs	r0, #3
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	8862      	ldrh	r2, [r4, #2]
 800bd20:	2a01      	cmp	r2, #1
 800bd22:	d91d      	bls.n	800bd60 <PDM_Filter_Init+0x88>
 800bd24:	2140      	movs	r1, #64	; 0x40
 800bd26:	2300      	movs	r3, #0
 800bd28:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bd2a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800bd2e:	6862      	ldr	r2, [r4, #4]
 800bd30:	bf04      	itt	eq
 800bd32:	6421      	streq	r1, [r4, #64]	; 0x40
 800bd34:	460b      	moveq	r3, r1
 800bd36:	b11a      	cbz	r2, 800bd40 <PDM_Filter_Init+0x68>
 800bd38:	f043 0310 	orr.w	r3, r3, #16
 800bd3c:	6423      	str	r3, [r4, #64]	; 0x40
 800bd3e:	62e2      	str	r2, [r4, #44]	; 0x2c
 800bd40:	2200      	movs	r2, #0
 800bd42:	8722      	strh	r2, [r4, #56]	; 0x38
 800bd44:	b908      	cbnz	r0, 800bd4a <PDM_Filter_Init+0x72>
 800bd46:	3380      	adds	r3, #128	; 0x80
 800bd48:	6423      	str	r3, [r4, #64]	; 0x40
 800bd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd4c:	4d23      	ldr	r5, [pc, #140]	; (800bddc <PDM_Filter_Init+0x104>)
 800bd4e:	d010      	beq.n	800bd72 <PDM_Filter_Init+0x9a>
 800bd50:	782a      	ldrb	r2, [r5, #0]
 800bd52:	2a01      	cmp	r2, #1
 800bd54:	d027      	beq.n	800bda6 <PDM_Filter_Init+0xce>
 800bd56:	8862      	ldrh	r2, [r4, #2]
 800bd58:	2a01      	cmp	r2, #1
 800bd5a:	f04f 0001 	mov.w	r0, #1
 800bd5e:	d8e1      	bhi.n	800bd24 <PDM_Filter_Init+0x4c>
 800bd60:	d001      	beq.n	800bd66 <PDM_Filter_Init+0x8e>
 800bd62:	4618      	mov	r0, r3
 800bd64:	e7de      	b.n	800bd24 <PDM_Filter_Init+0x4c>
 800bd66:	2220      	movs	r2, #32
 800bd68:	4618      	mov	r0, r3
 800bd6a:	6422      	str	r2, [r4, #64]	; 0x40
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	2160      	movs	r1, #96	; 0x60
 800bd70:	e7da      	b.n	800bd28 <PDM_Filter_Init+0x50>
 800bd72:	7829      	ldrb	r1, [r5, #0]
 800bd74:	2900      	cmp	r1, #0
 800bd76:	d1ee      	bne.n	800bd56 <PDM_Filter_Init+0x7e>
 800bd78:	4919      	ldr	r1, [pc, #100]	; (800bde0 <PDM_Filter_Init+0x108>)
 800bd7a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800bde8 <PDM_Filter_Init+0x110>
 800bd7e:	4f19      	ldr	r7, [pc, #100]	; (800bde4 <PDM_Filter_Init+0x10c>)
 800bd80:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800bd84:	684a      	ldr	r2, [r1, #4]
 800bd86:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800bd8a:	ea02 0007 	and.w	r0, r2, r7
 800bd8e:	4303      	orrs	r3, r0
 800bd90:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800bd94:	4413      	add	r3, r2
 800bd96:	f841 3f04 	str.w	r3, [r1, #4]!
 800bd9a:	428e      	cmp	r6, r1
 800bd9c:	d1f2      	bne.n	800bd84 <PDM_Filter_Init+0xac>
 800bd9e:	2001      	movs	r0, #1
 800bda0:	7028      	strb	r0, [r5, #0]
 800bda2:	2300      	movs	r3, #0
 800bda4:	e7bb      	b.n	800bd1e <PDM_Filter_Init+0x46>
 800bda6:	490e      	ldr	r1, [pc, #56]	; (800bde0 <PDM_Filter_Init+0x108>)
 800bda8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800bde8 <PDM_Filter_Init+0x110>
 800bdac:	4f0d      	ldr	r7, [pc, #52]	; (800bde4 <PDM_Filter_Init+0x10c>)
 800bdae:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800bdb2:	684a      	ldr	r2, [r1, #4]
 800bdb4:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800bdb8:	ea02 0007 	and.w	r0, r2, r7
 800bdbc:	4303      	orrs	r3, r0
 800bdbe:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f841 3f04 	str.w	r3, [r1, #4]!
 800bdc8:	428e      	cmp	r6, r1
 800bdca:	d1f2      	bne.n	800bdb2 <PDM_Filter_Init+0xda>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	702b      	strb	r3, [r5, #0]
 800bdd0:	e7c1      	b.n	800bd56 <PDM_Filter_Init+0x7e>
 800bdd2:	bf00      	nop
 800bdd4:	b5e8b5cd 	.word	0xb5e8b5cd
 800bdd8:	f407a5c2 	.word	0xf407a5c2
 800bddc:	200010cc 	.word	0x200010cc
 800bde0:	1ffffffc 	.word	0x1ffffffc
 800bde4:	000ffc00 	.word	0x000ffc00
 800bde8:	3ff00000 	.word	0x3ff00000

0800bdec <PDM_Filter_setConfig>:
 800bdec:	4b66      	ldr	r3, [pc, #408]	; (800bf88 <PDM_Filter_setConfig+0x19c>)
 800bdee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d001      	beq.n	800bdf8 <PDM_Filter_setConfig+0xc>
 800bdf4:	2004      	movs	r0, #4
 800bdf6:	4770      	bx	lr
 800bdf8:	b530      	push	{r4, r5, lr}
 800bdfa:	880a      	ldrh	r2, [r1, #0]
 800bdfc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bdfe:	ed2d 8b04 	vpush	{d8-d9}
 800be02:	4604      	mov	r4, r0
 800be04:	460d      	mov	r5, r1
 800be06:	1e51      	subs	r1, r2, #1
 800be08:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800be0c:	2906      	cmp	r1, #6
 800be0e:	b083      	sub	sp, #12
 800be10:	6420      	str	r0, [r4, #64]	; 0x40
 800be12:	d91a      	bls.n	800be4a <PDM_Filter_setConfig+0x5e>
 800be14:	2008      	movs	r0, #8
 800be16:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800be1a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800be1e:	4299      	cmp	r1, r3
 800be20:	d07e      	beq.n	800bf20 <PDM_Filter_setConfig+0x134>
 800be22:	f113 0f0c 	cmn.w	r3, #12
 800be26:	da2a      	bge.n	800be7e <PDM_Filter_setConfig+0x92>
 800be28:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800be2c:	3040      	adds	r0, #64	; 0x40
 800be2e:	80ab      	strh	r3, [r5, #4]
 800be30:	8622      	strh	r2, [r4, #48]	; 0x30
 800be32:	886b      	ldrh	r3, [r5, #2]
 800be34:	8663      	strh	r3, [r4, #50]	; 0x32
 800be36:	b920      	cbnz	r0, 800be42 <PDM_Filter_setConfig+0x56>
 800be38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be3e:	6423      	str	r3, [r4, #64]	; 0x40
 800be40:	2000      	movs	r0, #0
 800be42:	b003      	add	sp, #12
 800be44:	ecbd 8b04 	vpop	{d8-d9}
 800be48:	bd30      	pop	{r4, r5, pc}
 800be4a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800be4c:	4291      	cmp	r1, r2
 800be4e:	d06c      	beq.n	800bf2a <PDM_Filter_setConfig+0x13e>
 800be50:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800be54:	f023 0301 	bic.w	r3, r3, #1
 800be58:	4313      	orrs	r3, r2
 800be5a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800be5e:	6423      	str	r3, [r4, #64]	; 0x40
 800be60:	2970      	cmp	r1, #112	; 0x70
 800be62:	f003 030f 	and.w	r3, r3, #15
 800be66:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800be6a:	d066      	beq.n	800bf3a <PDM_Filter_setConfig+0x14e>
 800be6c:	2b06      	cmp	r3, #6
 800be6e:	f200 8089 	bhi.w	800bf84 <PDM_Filter_setConfig+0x198>
 800be72:	e8df f003 	tbb	[pc, r3]
 800be76:	4f52      	.short	0x4f52
 800be78:	3d43494c 	.word	0x3d43494c
 800be7c:	46          	.byte	0x46
 800be7d:	00          	.byte	0x00
 800be7e:	2b33      	cmp	r3, #51	; 0x33
 800be80:	dc32      	bgt.n	800bee8 <PDM_Filter_setConfig+0xfc>
 800be82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800be84:	f002 020f 	and.w	r2, r2, #15
 800be88:	3a01      	subs	r2, #1
 800be8a:	2a06      	cmp	r2, #6
 800be8c:	d872      	bhi.n	800bf74 <PDM_Filter_setConfig+0x188>
 800be8e:	493f      	ldr	r1, [pc, #252]	; (800bf8c <PDM_Filter_setConfig+0x1a0>)
 800be90:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800be94:	ed92 9a00 	vldr	s18, [r2]
 800be98:	ed92 8a07 	vldr	s16, [r2, #28]
 800be9c:	9001      	str	r0, [sp, #4]
 800be9e:	ee07 3a90 	vmov	s15, r3
 800bea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bea6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800beaa:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800beae:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800beb2:	f008 fd91 	bl	80149d8 <powf>
 800beb6:	eddf 0a36 	vldr	s1, [pc, #216]	; 800bf90 <PDM_Filter_setConfig+0x1a4>
 800beba:	eef0 8a40 	vmov.f32	s17, s0
 800bebe:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800bec2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800bec6:	f008 fd87 	bl	80149d8 <powf>
 800beca:	ee28 8a28 	vmul.f32	s16, s16, s17
 800bece:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bed2:	f008 fc7d 	bl	80147d0 <roundf>
 800bed6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800beda:	88ab      	ldrh	r3, [r5, #4]
 800bedc:	882a      	ldrh	r2, [r5, #0]
 800bede:	9801      	ldr	r0, [sp, #4]
 800bee0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800bee4:	8723      	strh	r3, [r4, #56]	; 0x38
 800bee6:	e7a3      	b.n	800be30 <PDM_Filter_setConfig+0x44>
 800bee8:	2333      	movs	r3, #51	; 0x33
 800beea:	3040      	adds	r0, #64	; 0x40
 800beec:	80ab      	strh	r3, [r5, #4]
 800beee:	e79f      	b.n	800be30 <PDM_Filter_setConfig+0x44>
 800bef0:	4b28      	ldr	r3, [pc, #160]	; (800bf94 <PDM_Filter_setConfig+0x1a8>)
 800bef2:	64a3      	str	r3, [r4, #72]	; 0x48
 800bef4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800bef8:	2000      	movs	r0, #0
 800befa:	e792      	b.n	800be22 <PDM_Filter_setConfig+0x36>
 800befc:	4b26      	ldr	r3, [pc, #152]	; (800bf98 <PDM_Filter_setConfig+0x1ac>)
 800befe:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf00:	e7f8      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf02:	4b26      	ldr	r3, [pc, #152]	; (800bf9c <PDM_Filter_setConfig+0x1b0>)
 800bf04:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf06:	e7f5      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf08:	4b25      	ldr	r3, [pc, #148]	; (800bfa0 <PDM_Filter_setConfig+0x1b4>)
 800bf0a:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf0c:	e7f2      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf0e:	4b25      	ldr	r3, [pc, #148]	; (800bfa4 <PDM_Filter_setConfig+0x1b8>)
 800bf10:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf12:	e7ef      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf14:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <PDM_Filter_setConfig+0x1bc>)
 800bf16:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf18:	e7ec      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf1a:	4b24      	ldr	r3, [pc, #144]	; (800bfac <PDM_Filter_setConfig+0x1c0>)
 800bf1c:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf1e:	e7e9      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf20:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800bf22:	4291      	cmp	r1, r2
 800bf24:	f47f af7d 	bne.w	800be22 <PDM_Filter_setConfig+0x36>
 800bf28:	e783      	b.n	800be32 <PDM_Filter_setConfig+0x46>
 800bf2a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800bf2e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800bf32:	4299      	cmp	r1, r3
 800bf34:	d023      	beq.n	800bf7e <PDM_Filter_setConfig+0x192>
 800bf36:	2000      	movs	r0, #0
 800bf38:	e773      	b.n	800be22 <PDM_Filter_setConfig+0x36>
 800bf3a:	2b06      	cmp	r3, #6
 800bf3c:	d822      	bhi.n	800bf84 <PDM_Filter_setConfig+0x198>
 800bf3e:	e8df f003 	tbb	[pc, r3]
 800bf42:	1316      	.short	0x1316
 800bf44:	070a0d10 	.word	0x070a0d10
 800bf48:	04          	.byte	0x04
 800bf49:	00          	.byte	0x00
 800bf4a:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <PDM_Filter_setConfig+0x1c4>)
 800bf4c:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf4e:	e7d1      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf50:	4b18      	ldr	r3, [pc, #96]	; (800bfb4 <PDM_Filter_setConfig+0x1c8>)
 800bf52:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf54:	e7ce      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf56:	4b18      	ldr	r3, [pc, #96]	; (800bfb8 <PDM_Filter_setConfig+0x1cc>)
 800bf58:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf5a:	e7cb      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf5c:	4b17      	ldr	r3, [pc, #92]	; (800bfbc <PDM_Filter_setConfig+0x1d0>)
 800bf5e:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf60:	e7c8      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf62:	4b17      	ldr	r3, [pc, #92]	; (800bfc0 <PDM_Filter_setConfig+0x1d4>)
 800bf64:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf66:	e7c5      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf68:	4b16      	ldr	r3, [pc, #88]	; (800bfc4 <PDM_Filter_setConfig+0x1d8>)
 800bf6a:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf6c:	e7c2      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf6e:	4b16      	ldr	r3, [pc, #88]	; (800bfc8 <PDM_Filter_setConfig+0x1dc>)
 800bf70:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf72:	e7bf      	b.n	800bef4 <PDM_Filter_setConfig+0x108>
 800bf74:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800bfcc <PDM_Filter_setConfig+0x1e0>
 800bf78:	eeb0 9a48 	vmov.f32	s18, s16
 800bf7c:	e78e      	b.n	800be9c <PDM_Filter_setConfig+0xb0>
 800bf7e:	886b      	ldrh	r3, [r5, #2]
 800bf80:	8663      	strh	r3, [r4, #50]	; 0x32
 800bf82:	e759      	b.n	800be38 <PDM_Filter_setConfig+0x4c>
 800bf84:	2000      	movs	r0, #0
 800bf86:	e746      	b.n	800be16 <PDM_Filter_setConfig+0x2a>
 800bf88:	b5e8b5cd 	.word	0xb5e8b5cd
 800bf8c:	080169f8 	.word	0x080169f8
 800bf90:	42000000 	.word	0x42000000
 800bf94:	0800a359 	.word	0x0800a359
 800bf98:	0800a239 	.word	0x0800a239
 800bf9c:	0800a4e9 	.word	0x0800a4e9
 800bfa0:	0800ad2d 	.word	0x0800ad2d
 800bfa4:	0800aa8d 	.word	0x0800aa8d
 800bfa8:	0800a86d 	.word	0x0800a86d
 800bfac:	0800a681 	.word	0x0800a681
 800bfb0:	0800b339 	.word	0x0800b339
 800bfb4:	0800b201 	.word	0x0800b201
 800bfb8:	0800b11d 	.word	0x0800b11d
 800bfbc:	0800b9b5 	.word	0x0800b9b5
 800bfc0:	0800b7a1 	.word	0x0800b7a1
 800bfc4:	0800b5e9 	.word	0x0800b5e9
 800bfc8:	0800b47d 	.word	0x0800b47d
 800bfcc:	00000000 	.word	0x00000000

0800bfd0 <PDM_Filter>:
 800bfd0:	b410      	push	{r4}
 800bfd2:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <PDM_Filter+0x34>)
 800bfd4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800bfd6:	429c      	cmp	r4, r3
 800bfd8:	d003      	beq.n	800bfe2 <PDM_Filter+0x12>
 800bfda:	2004      	movs	r0, #4
 800bfdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bfe4:	05dc      	lsls	r4, r3, #23
 800bfe6:	d407      	bmi.n	800bff8 <PDM_Filter+0x28>
 800bfe8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfec:	bf14      	ite	ne
 800bfee:	2020      	movne	r0, #32
 800bff0:	2030      	moveq	r0, #48	; 0x30
 800bff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800bffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bffe:	320c      	adds	r2, #12
 800c000:	4718      	bx	r3
 800c002:	bf00      	nop
 800c004:	b5e8b5cd 	.word	0xb5e8b5cd

0800c008 <CRC_Lock>:
 800c008:	4a17      	ldr	r2, [pc, #92]	; (800c068 <CRC_Lock+0x60>)
 800c00a:	6813      	ldr	r3, [r2, #0]
 800c00c:	b410      	push	{r4}
 800c00e:	f023 0301 	bic.w	r3, r3, #1
 800c012:	4c16      	ldr	r4, [pc, #88]	; (800c06c <CRC_Lock+0x64>)
 800c014:	6013      	str	r3, [r2, #0]
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	b933      	cbnz	r3, 800c028 <CRC_Lock+0x20>
 800c01a:	4b15      	ldr	r3, [pc, #84]	; (800c070 <CRC_Lock+0x68>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c022:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c026:	d00f      	beq.n	800c048 <CRC_Lock+0x40>
 800c028:	4a12      	ldr	r2, [pc, #72]	; (800c074 <CRC_Lock+0x6c>)
 800c02a:	2301      	movs	r3, #1
 800c02c:	6013      	str	r3, [r2, #0]
 800c02e:	6813      	ldr	r3, [r2, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1fc      	bne.n	800c02e <CRC_Lock+0x26>
 800c034:	4b10      	ldr	r3, [pc, #64]	; (800c078 <CRC_Lock+0x70>)
 800c036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c03a:	6018      	str	r0, [r3, #0]
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	1a08      	subs	r0, r1, r0
 800c040:	fab0 f080 	clz	r0, r0
 800c044:	0940      	lsrs	r0, r0, #5
 800c046:	4770      	bx	lr
 800c048:	4a0c      	ldr	r2, [pc, #48]	; (800c07c <CRC_Lock+0x74>)
 800c04a:	2301      	movs	r3, #1
 800c04c:	6013      	str	r3, [r2, #0]
 800c04e:	6813      	ldr	r3, [r2, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1fc      	bne.n	800c04e <CRC_Lock+0x46>
 800c054:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <CRC_Lock+0x78>)
 800c056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c05a:	6018      	str	r0, [r3, #0]
 800c05c:	6818      	ldr	r0, [r3, #0]
 800c05e:	1a40      	subs	r0, r0, r1
 800c060:	fab0 f080 	clz	r0, r0
 800c064:	0940      	lsrs	r0, r0, #5
 800c066:	4770      	bx	lr
 800c068:	e0002000 	.word	0xe0002000
 800c06c:	e0042000 	.word	0xe0042000
 800c070:	5c001000 	.word	0x5c001000
 800c074:	40023008 	.word	0x40023008
 800c078:	40023000 	.word	0x40023000
 800c07c:	58024c08 	.word	0x58024c08
 800c080:	58024c00 	.word	0x58024c00

0800c084 <_ai_platform_acquire_crc>:
 800c084:	2001      	movs	r0, #1
 800c086:	4770      	bx	lr

0800c088 <_ai_platform_release_crc>:
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop

0800c08c <ai_platform_get_weights_map>:
 800c08c:	b132      	cbz	r2, 800c09c <ai_platform_get_weights_map+0x10>
 800c08e:	6912      	ldr	r2, [r2, #16]
 800c090:	b122      	cbz	r2, 800c09c <ai_platform_get_weights_map+0x10>
 800c092:	b110      	cbz	r0, 800c09a <ai_platform_get_weights_map+0xe>
 800c094:	b921      	cbnz	r1, 800c0a0 <ai_platform_get_weights_map+0x14>
 800c096:	4608      	mov	r0, r1
 800c098:	4770      	bx	lr
 800c09a:	4770      	bx	lr
 800c09c:	4610      	mov	r0, r2
 800c09e:	4770      	bx	lr
 800c0a0:	b470      	push	{r4, r5, r6}
 800c0a2:	4b13      	ldr	r3, [pc, #76]	; (800c0f0 <ai_platform_get_weights_map+0x64>)
 800c0a4:	6815      	ldr	r5, [r2, #0]
 800c0a6:	429d      	cmp	r5, r3
 800c0a8:	d007      	beq.n	800c0ba <ai_platform_get_weights_map+0x2e>
 800c0aa:	6002      	str	r2, [r0, #0]
 800c0ac:	f1a1 0001 	sub.w	r0, r1, #1
 800c0b0:	fab0 f080 	clz	r0, r0
 800c0b4:	0940      	lsrs	r0, r0, #5
 800c0b6:	bc70      	pop	{r4, r5, r6}
 800c0b8:	4770      	bx	lr
 800c0ba:	6854      	ldr	r4, [r2, #4]
 800c0bc:	42ac      	cmp	r4, r5
 800c0be:	f102 0204 	add.w	r2, r2, #4
 800c0c2:	d011      	beq.n	800c0e8 <ai_platform_get_weights_map+0x5c>
 800c0c4:	1f03      	subs	r3, r0, #4
 800c0c6:	4616      	mov	r6, r2
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e003      	b.n	800c0d4 <ai_platform_get_weights_map+0x48>
 800c0cc:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800c0d0:	42ac      	cmp	r4, r5
 800c0d2:	d009      	beq.n	800c0e8 <ai_platform_get_weights_map+0x5c>
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	4281      	cmp	r1, r0
 800c0d8:	f843 4f04 	str.w	r4, [r3, #4]!
 800c0dc:	d1f6      	bne.n	800c0cc <ai_platform_get_weights_map+0x40>
 800c0de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c0e2:	4b03      	ldr	r3, [pc, #12]	; (800c0f0 <ai_platform_get_weights_map+0x64>)
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d001      	beq.n	800c0ec <ai_platform_get_weights_map+0x60>
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	e7e4      	b.n	800c0b6 <ai_platform_get_weights_map+0x2a>
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	e7e2      	b.n	800c0b6 <ai_platform_get_weights_map+0x2a>
 800c0f0:	a1facade 	.word	0xa1facade

0800c0f4 <ai_platform_get_activations_map>:
 800c0f4:	b132      	cbz	r2, 800c104 <ai_platform_get_activations_map+0x10>
 800c0f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c0f8:	b122      	cbz	r2, 800c104 <ai_platform_get_activations_map+0x10>
 800c0fa:	b110      	cbz	r0, 800c102 <ai_platform_get_activations_map+0xe>
 800c0fc:	b921      	cbnz	r1, 800c108 <ai_platform_get_activations_map+0x14>
 800c0fe:	4608      	mov	r0, r1
 800c100:	4770      	bx	lr
 800c102:	4770      	bx	lr
 800c104:	4610      	mov	r0, r2
 800c106:	4770      	bx	lr
 800c108:	b470      	push	{r4, r5, r6}
 800c10a:	4b13      	ldr	r3, [pc, #76]	; (800c158 <ai_platform_get_activations_map+0x64>)
 800c10c:	6815      	ldr	r5, [r2, #0]
 800c10e:	429d      	cmp	r5, r3
 800c110:	d007      	beq.n	800c122 <ai_platform_get_activations_map+0x2e>
 800c112:	6002      	str	r2, [r0, #0]
 800c114:	f1a1 0001 	sub.w	r0, r1, #1
 800c118:	fab0 f080 	clz	r0, r0
 800c11c:	0940      	lsrs	r0, r0, #5
 800c11e:	bc70      	pop	{r4, r5, r6}
 800c120:	4770      	bx	lr
 800c122:	6854      	ldr	r4, [r2, #4]
 800c124:	42ac      	cmp	r4, r5
 800c126:	f102 0204 	add.w	r2, r2, #4
 800c12a:	d011      	beq.n	800c150 <ai_platform_get_activations_map+0x5c>
 800c12c:	1f03      	subs	r3, r0, #4
 800c12e:	4616      	mov	r6, r2
 800c130:	2000      	movs	r0, #0
 800c132:	e003      	b.n	800c13c <ai_platform_get_activations_map+0x48>
 800c134:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800c138:	42ac      	cmp	r4, r5
 800c13a:	d009      	beq.n	800c150 <ai_platform_get_activations_map+0x5c>
 800c13c:	3001      	adds	r0, #1
 800c13e:	4281      	cmp	r1, r0
 800c140:	f843 4f04 	str.w	r4, [r3, #4]!
 800c144:	d1f6      	bne.n	800c134 <ai_platform_get_activations_map+0x40>
 800c146:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c14a:	4b03      	ldr	r3, [pc, #12]	; (800c158 <ai_platform_get_activations_map+0x64>)
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d001      	beq.n	800c154 <ai_platform_get_activations_map+0x60>
 800c150:	2000      	movs	r0, #0
 800c152:	e7e4      	b.n	800c11e <ai_platform_get_activations_map+0x2a>
 800c154:	2001      	movs	r0, #1
 800c156:	e7e2      	b.n	800c11e <ai_platform_get_activations_map+0x2a>
 800c158:	a1facade 	.word	0xa1facade

0800c15c <ai_platform_network_create>:
 800c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c160:	b082      	sub	sp, #8
 800c162:	4607      	mov	r7, r0
 800c164:	4616      	mov	r6, r2
 800c166:	461d      	mov	r5, r3
 800c168:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800c16c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 800c170:	f7ff ff88 	bl	800c084 <_ai_platform_acquire_crc>
 800c174:	b178      	cbz	r0, 800c196 <ai_platform_network_create+0x3a>
 800c176:	4b5a      	ldr	r3, [pc, #360]	; (800c2e0 <ai_platform_network_create+0x184>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c17e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c182:	4602      	mov	r2, r0
 800c184:	d00c      	beq.n	800c1a0 <ai_platform_network_create+0x44>
 800c186:	4b57      	ldr	r3, [pc, #348]	; (800c2e4 <ai_platform_network_create+0x188>)
 800c188:	2118      	movs	r1, #24
 800c18a:	6019      	str	r1, [r3, #0]
 800c18c:	6819      	ldr	r1, [r3, #0]
 800c18e:	2918      	cmp	r1, #24
 800c190:	d034      	beq.n	800c1fc <ai_platform_network_create+0xa0>
 800c192:	f7ff ff79 	bl	800c088 <_ai_platform_release_crc>
 800c196:	f241 0033 	movw	r0, #4147	; 0x1033
 800c19a:	b002      	add	sp, #8
 800c19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a0:	4b51      	ldr	r3, [pc, #324]	; (800c2e8 <ai_platform_network_create+0x18c>)
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	6019      	str	r1, [r3, #0]
 800c1a6:	2114      	movs	r1, #20
 800c1a8:	e001      	b.n	800c1ae <ai_platform_network_create+0x52>
 800c1aa:	3901      	subs	r1, #1
 800c1ac:	d002      	beq.n	800c1b4 <ai_platform_network_create+0x58>
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d1fa      	bne.n	800c1aa <ai_platform_network_create+0x4e>
 800c1b4:	4b4c      	ldr	r3, [pc, #304]	; (800c2e8 <ai_platform_network_create+0x18c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	b9f3      	cbnz	r3, 800c1f8 <ai_platform_network_create+0x9c>
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f7ff ff64 	bl	800c088 <_ai_platform_release_crc>
 800c1c0:	4a4a      	ldr	r2, [pc, #296]	; (800c2ec <ai_platform_network_create+0x190>)
 800c1c2:	6813      	ldr	r3, [r2, #0]
 800c1c4:	f023 0301 	bic.w	r3, r3, #1
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	f7ff ff5b 	bl	800c084 <_ai_platform_acquire_crc>
 800c1ce:	4b44      	ldr	r3, [pc, #272]	; (800c2e0 <ai_platform_network_create+0x184>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1da:	d015      	beq.n	800c208 <ai_platform_network_create+0xac>
 800c1dc:	4b41      	ldr	r3, [pc, #260]	; (800c2e4 <ai_platform_network_create+0x188>)
 800c1de:	2201      	movs	r2, #1
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	2a00      	cmp	r2, #0
 800c1e6:	d1fc      	bne.n	800c1e2 <ai_platform_network_create+0x86>
 800c1e8:	4b41      	ldr	r3, [pc, #260]	; (800c2f0 <ai_platform_network_create+0x194>)
 800c1ea:	4a42      	ldr	r2, [pc, #264]	; (800c2f4 <ai_platform_network_create+0x198>)
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	4b41      	ldr	r3, [pc, #260]	; (800c2f8 <ai_platform_network_create+0x19c>)
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d016      	beq.n	800c224 <ai_platform_network_create+0xc8>
 800c1f6:	e7fe      	b.n	800c1f6 <ai_platform_network_create+0x9a>
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	e7ca      	b.n	800c192 <ai_platform_network_create+0x36>
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	6019      	str	r1, [r3, #0]
 800c200:	6819      	ldr	r1, [r3, #0]
 800c202:	2900      	cmp	r1, #0
 800c204:	d1fc      	bne.n	800c200 <ai_platform_network_create+0xa4>
 800c206:	e7d8      	b.n	800c1ba <ai_platform_network_create+0x5e>
 800c208:	4b37      	ldr	r3, [pc, #220]	; (800c2e8 <ai_platform_network_create+0x18c>)
 800c20a:	2201      	movs	r2, #1
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	2a00      	cmp	r2, #0
 800c212:	d1fc      	bne.n	800c20e <ai_platform_network_create+0xb2>
 800c214:	4b39      	ldr	r3, [pc, #228]	; (800c2fc <ai_platform_network_create+0x1a0>)
 800c216:	4a37      	ldr	r2, [pc, #220]	; (800c2f4 <ai_platform_network_create+0x198>)
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	4b36      	ldr	r3, [pc, #216]	; (800c2f8 <ai_platform_network_create+0x19c>)
 800c21e:	429a      	cmp	r2, r3
 800c220:	d000      	beq.n	800c224 <ai_platform_network_create+0xc8>
 800c222:	e7fe      	b.n	800c222 <ai_platform_network_create+0xc6>
 800c224:	f7ff ff30 	bl	800c088 <_ai_platform_release_crc>
 800c228:	b1af      	cbz	r7, 800c256 <ai_platform_network_create+0xfa>
 800c22a:	4b35      	ldr	r3, [pc, #212]	; (800c300 <ai_platform_network_create+0x1a4>)
 800c22c:	6033      	str	r3, [r6, #0]
 800c22e:	603e      	str	r6, [r7, #0]
 800c230:	f000 fc8e 	bl	800cb50 <core_init>
 800c234:	b990      	cbnz	r0, 800c25c <ai_platform_network_create+0x100>
 800c236:	062d      	lsls	r5, r5, #24
 800c238:	0424      	lsls	r4, r4, #16
 800c23a:	2230      	movs	r2, #48	; 0x30
 800c23c:	2300      	movs	r3, #0
 800c23e:	603b      	str	r3, [r7, #0]
 800c240:	2110      	movs	r1, #16
 800c242:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800c246:	2000      	movs	r0, #0
 800c248:	432b      	orrs	r3, r5
 800c24a:	f362 0007 	bfi	r0, r2, #0, #8
 800c24e:	6473      	str	r3, [r6, #68]	; 0x44
 800c250:	f361 201f 	bfi	r0, r1, #8, #24
 800c254:	e7a1      	b.n	800c19a <ai_platform_network_create+0x3e>
 800c256:	f241 0010 	movw	r0, #4112	; 0x1010
 800c25a:	e79e      	b.n	800c19a <ai_platform_network_create+0x3e>
 800c25c:	4a23      	ldr	r2, [pc, #140]	; (800c2ec <ai_platform_network_create+0x190>)
 800c25e:	6813      	ldr	r3, [r2, #0]
 800c260:	f023 0301 	bic.w	r3, r3, #1
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	f7ff ff0d 	bl	800c084 <_ai_platform_acquire_crc>
 800c26a:	4b1d      	ldr	r3, [pc, #116]	; (800c2e0 <ai_platform_network_create+0x184>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c276:	d00d      	beq.n	800c294 <ai_platform_network_create+0x138>
 800c278:	4b1a      	ldr	r3, [pc, #104]	; (800c2e4 <ai_platform_network_create+0x188>)
 800c27a:	2201      	movs	r2, #1
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	2a00      	cmp	r2, #0
 800c282:	d1fc      	bne.n	800c27e <ai_platform_network_create+0x122>
 800c284:	4b1a      	ldr	r3, [pc, #104]	; (800c2f0 <ai_platform_network_create+0x194>)
 800c286:	4a1b      	ldr	r2, [pc, #108]	; (800c2f4 <ai_platform_network_create+0x198>)
 800c288:	601a      	str	r2, [r3, #0]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	4b1a      	ldr	r3, [pc, #104]	; (800c2f8 <ai_platform_network_create+0x19c>)
 800c28e:	429a      	cmp	r2, r3
 800c290:	d00e      	beq.n	800c2b0 <ai_platform_network_create+0x154>
 800c292:	e7fe      	b.n	800c292 <ai_platform_network_create+0x136>
 800c294:	4b14      	ldr	r3, [pc, #80]	; (800c2e8 <ai_platform_network_create+0x18c>)
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	2a00      	cmp	r2, #0
 800c29e:	d1fc      	bne.n	800c29a <ai_platform_network_create+0x13e>
 800c2a0:	4b16      	ldr	r3, [pc, #88]	; (800c2fc <ai_platform_network_create+0x1a0>)
 800c2a2:	4a14      	ldr	r2, [pc, #80]	; (800c2f4 <ai_platform_network_create+0x198>)
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	4b13      	ldr	r3, [pc, #76]	; (800c2f8 <ai_platform_network_create+0x19c>)
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d000      	beq.n	800c2b0 <ai_platform_network_create+0x154>
 800c2ae:	e7fe      	b.n	800c2ae <ai_platform_network_create+0x152>
 800c2b0:	062d      	lsls	r5, r5, #24
 800c2b2:	0424      	lsls	r4, r4, #16
 800c2b4:	f7ff fee8 	bl	800c088 <_ai_platform_release_crc>
 800c2b8:	ea45 0304 	orr.w	r3, r5, r4
 800c2bc:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800c2c0:	d001      	beq.n	800c2c6 <ai_platform_network_create+0x16a>
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	e7ba      	b.n	800c23c <ai_platform_network_create+0xe0>
 800c2c6:	a802      	add	r0, sp, #8
 800c2c8:	4b0e      	ldr	r3, [pc, #56]	; (800c304 <ai_platform_network_create+0x1a8>)
 800c2ca:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c2ce:	f003 fcb3 	bl	800fc38 <ai_check_custom_types>
 800c2d2:	b110      	cbz	r0, 800c2da <ai_platform_network_create+0x17e>
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	460a      	mov	r2, r1
 800c2d8:	e7b3      	b.n	800c242 <ai_platform_network_create+0xe6>
 800c2da:	2202      	movs	r2, #2
 800c2dc:	e7ae      	b.n	800c23c <ai_platform_network_create+0xe0>
 800c2de:	bf00      	nop
 800c2e0:	e0042000 	.word	0xe0042000
 800c2e4:	58024c08 	.word	0x58024c08
 800c2e8:	40023008 	.word	0x40023008
 800c2ec:	e0002000 	.word	0xe0002000
 800c2f0:	58024c00 	.word	0x58024c00
 800c2f4:	f407a5c2 	.word	0xf407a5c2
 800c2f8:	b5e8b5cd 	.word	0xb5e8b5cd
 800c2fc:	40023000 	.word	0x40023000
 800c300:	a1c00100 	.word	0xa1c00100
 800c304:	84048403 	.word	0x84048403

0800c308 <ai_platform_network_init>:
 800c308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d04d      	beq.n	800c3ac <ai_platform_network_init+0xa4>
 800c310:	4b7c      	ldr	r3, [pc, #496]	; (800c504 <ai_platform_network_init+0x1fc>)
 800c312:	6802      	ldr	r2, [r0, #0]
 800c314:	429a      	cmp	r2, r3
 800c316:	4604      	mov	r4, r0
 800c318:	d148      	bne.n	800c3ac <ai_platform_network_init+0xa4>
 800c31a:	4a7b      	ldr	r2, [pc, #492]	; (800c508 <ai_platform_network_init+0x200>)
 800c31c:	6813      	ldr	r3, [r2, #0]
 800c31e:	f023 0301 	bic.w	r3, r3, #1
 800c322:	6013      	str	r3, [r2, #0]
 800c324:	460d      	mov	r5, r1
 800c326:	f7ff fead 	bl	800c084 <_ai_platform_acquire_crc>
 800c32a:	4b78      	ldr	r3, [pc, #480]	; (800c50c <ai_platform_network_init+0x204>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c336:	d00d      	beq.n	800c354 <ai_platform_network_init+0x4c>
 800c338:	4b75      	ldr	r3, [pc, #468]	; (800c510 <ai_platform_network_init+0x208>)
 800c33a:	2201      	movs	r2, #1
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	2a00      	cmp	r2, #0
 800c342:	d1fc      	bne.n	800c33e <ai_platform_network_init+0x36>
 800c344:	4b73      	ldr	r3, [pc, #460]	; (800c514 <ai_platform_network_init+0x20c>)
 800c346:	4a74      	ldr	r2, [pc, #464]	; (800c518 <ai_platform_network_init+0x210>)
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	4b73      	ldr	r3, [pc, #460]	; (800c51c <ai_platform_network_init+0x214>)
 800c34e:	429a      	cmp	r2, r3
 800c350:	d00d      	beq.n	800c36e <ai_platform_network_init+0x66>
 800c352:	e7fe      	b.n	800c352 <ai_platform_network_init+0x4a>
 800c354:	4b72      	ldr	r3, [pc, #456]	; (800c520 <ai_platform_network_init+0x218>)
 800c356:	2201      	movs	r2, #1
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	2a00      	cmp	r2, #0
 800c35e:	d1fc      	bne.n	800c35a <ai_platform_network_init+0x52>
 800c360:	4b70      	ldr	r3, [pc, #448]	; (800c524 <ai_platform_network_init+0x21c>)
 800c362:	4a6d      	ldr	r2, [pc, #436]	; (800c518 <ai_platform_network_init+0x210>)
 800c364:	601a      	str	r2, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	4b6c      	ldr	r3, [pc, #432]	; (800c51c <ai_platform_network_init+0x214>)
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d11d      	bne.n	800c3aa <ai_platform_network_init+0xa2>
 800c36e:	f7ff fe8b 	bl	800c088 <_ai_platform_release_crc>
 800c372:	2d00      	cmp	r5, #0
 800c374:	d076      	beq.n	800c464 <ai_platform_network_init+0x15c>
 800c376:	4b6c      	ldr	r3, [pc, #432]	; (800c528 <ai_platform_network_init+0x220>)
 800c378:	682a      	ldr	r2, [r5, #0]
 800c37a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d030      	beq.n	800c3e4 <ai_platform_network_init+0xdc>
 800c382:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800c384:	46a9      	mov	r9, r5
 800c386:	f105 0118 	add.w	r1, r5, #24
 800c38a:	2e00      	cmp	r6, #0
 800c38c:	f000 8095 	beq.w	800c4ba <ai_platform_network_init+0x1b2>
 800c390:	f1bc 0f00 	cmp.w	ip, #0
 800c394:	f000 80a4 	beq.w	800c4e0 <ai_platform_network_init+0x1d8>
 800c398:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800c39c:	f1b8 0f01 	cmp.w	r8, #1
 800c3a0:	d16a      	bne.n	800c478 <ai_platform_network_init+0x170>
 800c3a2:	2700      	movs	r7, #0
 800c3a4:	468c      	mov	ip, r1
 800c3a6:	83a7      	strh	r7, [r4, #28]
 800c3a8:	e028      	b.n	800c3fc <ai_platform_network_init+0xf4>
 800c3aa:	e7fe      	b.n	800c3aa <ai_platform_network_init+0xa2>
 800c3ac:	4a56      	ldr	r2, [pc, #344]	; (800c508 <ai_platform_network_init+0x200>)
 800c3ae:	6813      	ldr	r3, [r2, #0]
 800c3b0:	f023 0301 	bic.w	r3, r3, #1
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	f7ff fe65 	bl	800c084 <_ai_platform_acquire_crc>
 800c3ba:	4b54      	ldr	r3, [pc, #336]	; (800c50c <ai_platform_network_init+0x204>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3c6:	d067      	beq.n	800c498 <ai_platform_network_init+0x190>
 800c3c8:	4b51      	ldr	r3, [pc, #324]	; (800c510 <ai_platform_network_init+0x208>)
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	d1fc      	bne.n	800c3ce <ai_platform_network_init+0xc6>
 800c3d4:	4b4f      	ldr	r3, [pc, #316]	; (800c514 <ai_platform_network_init+0x20c>)
 800c3d6:	4a50      	ldr	r2, [pc, #320]	; (800c518 <ai_platform_network_init+0x210>)
 800c3d8:	601a      	str	r2, [r3, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	4b4f      	ldr	r3, [pc, #316]	; (800c51c <ai_platform_network_init+0x214>)
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d067      	beq.n	800c4b2 <ai_platform_network_init+0x1aa>
 800c3e2:	e7fe      	b.n	800c3e2 <ai_platform_network_init+0xda>
 800c3e4:	8be1      	ldrh	r1, [r4, #30]
 800c3e6:	88eb      	ldrh	r3, [r5, #6]
 800c3e8:	89af      	ldrh	r7, [r5, #12]
 800c3ea:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800c3ee:	88aa      	ldrh	r2, [r5, #4]
 800c3f0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800c3f4:	428b      	cmp	r3, r1
 800c3f6:	d13f      	bne.n	800c478 <ai_platform_network_init+0x170>
 800c3f8:	83a2      	strh	r2, [r4, #28]
 800c3fa:	b19b      	cbz	r3, 800c424 <ai_platform_network_init+0x11c>
 800c3fc:	f04f 0e00 	mov.w	lr, #0
 800c400:	46f2      	mov	sl, lr
 800c402:	eb09 060e 	add.w	r6, r9, lr
 800c406:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c408:	6a25      	ldr	r5, [r4, #32]
 800c40a:	4475      	add	r5, lr
 800c40c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c40e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c412:	e885 0003 	stmia.w	r5, {r0, r1}
 800c416:	8be3      	ldrh	r3, [r4, #30]
 800c418:	f10a 0a01 	add.w	sl, sl, #1
 800c41c:	459a      	cmp	sl, r3
 800c41e:	f10e 0e18 	add.w	lr, lr, #24
 800c422:	d3ee      	bcc.n	800c402 <ai_platform_network_init+0xfa>
 800c424:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c426:	4598      	cmp	r8, r3
 800c428:	d12e      	bne.n	800c488 <ai_platform_network_init+0x180>
 800c42a:	84a7      	strh	r7, [r4, #36]	; 0x24
 800c42c:	f1b8 0f00 	cmp.w	r8, #0
 800c430:	d012      	beq.n	800c458 <ai_platform_network_init+0x150>
 800c432:	2700      	movs	r7, #0
 800c434:	46be      	mov	lr, r7
 800c436:	eb0c 0607 	add.w	r6, ip, r7
 800c43a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c43c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c43e:	443d      	add	r5, r7
 800c440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c442:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c446:	e885 0003 	stmia.w	r5, {r0, r1}
 800c44a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c44c:	f10e 0e01 	add.w	lr, lr, #1
 800c450:	459e      	cmp	lr, r3
 800c452:	f107 0718 	add.w	r7, r7, #24
 800c456:	d3ee      	bcc.n	800c436 <ai_platform_network_init+0x12e>
 800c458:	2303      	movs	r3, #3
 800c45a:	60e3      	str	r3, [r4, #12]
 800c45c:	4620      	mov	r0, r4
 800c45e:	f003 fc15 	bl	800fc8c <ai_layers_init_all>
 800c462:	e006      	b.n	800c472 <ai_platform_network_init+0x16a>
 800c464:	f104 0010 	add.w	r0, r4, #16
 800c468:	2211      	movs	r2, #17
 800c46a:	2110      	movs	r1, #16
 800c46c:	462c      	mov	r4, r5
 800c46e:	f000 fb71 	bl	800cb54 <core_set_error>
 800c472:	4620      	mov	r0, r4
 800c474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c478:	f104 0010 	add.w	r0, r4, #16
 800c47c:	2212      	movs	r2, #18
 800c47e:	2116      	movs	r1, #22
 800c480:	f000 fb68 	bl	800cb54 <core_set_error>
 800c484:	2400      	movs	r4, #0
 800c486:	e7f4      	b.n	800c472 <ai_platform_network_init+0x16a>
 800c488:	f104 0010 	add.w	r0, r4, #16
 800c48c:	2213      	movs	r2, #19
 800c48e:	2116      	movs	r1, #22
 800c490:	f000 fb60 	bl	800cb54 <core_set_error>
 800c494:	2400      	movs	r4, #0
 800c496:	e7ec      	b.n	800c472 <ai_platform_network_init+0x16a>
 800c498:	4b21      	ldr	r3, [pc, #132]	; (800c520 <ai_platform_network_init+0x218>)
 800c49a:	2201      	movs	r2, #1
 800c49c:	601a      	str	r2, [r3, #0]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	2a00      	cmp	r2, #0
 800c4a2:	d1fc      	bne.n	800c49e <ai_platform_network_init+0x196>
 800c4a4:	4b1f      	ldr	r3, [pc, #124]	; (800c524 <ai_platform_network_init+0x21c>)
 800c4a6:	4a1c      	ldr	r2, [pc, #112]	; (800c518 <ai_platform_network_init+0x210>)
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	4b1b      	ldr	r3, [pc, #108]	; (800c51c <ai_platform_network_init+0x214>)
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d115      	bne.n	800c4de <ai_platform_network_init+0x1d6>
 800c4b2:	f7ff fde9 	bl	800c088 <_ai_platform_release_crc>
 800c4b6:	2400      	movs	r4, #0
 800c4b8:	e7db      	b.n	800c472 <ai_platform_network_init+0x16a>
 800c4ba:	8c28      	ldrh	r0, [r5, #32]
 800c4bc:	8bea      	ldrh	r2, [r5, #30]
 800c4be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4c0:	fb02 f200 	mul.w	r2, r2, r0
 800c4c4:	fb03 f302 	mul.w	r3, r3, r2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f43f af61 	beq.w	800c390 <ai_platform_network_init+0x88>
 800c4ce:	f104 0010 	add.w	r0, r4, #16
 800c4d2:	2213      	movs	r2, #19
 800c4d4:	2110      	movs	r1, #16
 800c4d6:	4634      	mov	r4, r6
 800c4d8:	f000 fb3c 	bl	800cb54 <core_set_error>
 800c4dc:	e7c9      	b.n	800c472 <ai_platform_network_init+0x16a>
 800c4de:	e7fe      	b.n	800c4de <ai_platform_network_init+0x1d6>
 800c4e0:	8928      	ldrh	r0, [r5, #8]
 800c4e2:	88ea      	ldrh	r2, [r5, #6]
 800c4e4:	68eb      	ldr	r3, [r5, #12]
 800c4e6:	fb02 f200 	mul.w	r2, r2, r0
 800c4ea:	fb03 f302 	mul.w	r3, r3, r2
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f43f af52 	beq.w	800c398 <ai_platform_network_init+0x90>
 800c4f4:	f104 0010 	add.w	r0, r4, #16
 800c4f8:	2212      	movs	r2, #18
 800c4fa:	2110      	movs	r1, #16
 800c4fc:	4664      	mov	r4, ip
 800c4fe:	f000 fb29 	bl	800cb54 <core_set_error>
 800c502:	e7b6      	b.n	800c472 <ai_platform_network_init+0x16a>
 800c504:	a1c00100 	.word	0xa1c00100
 800c508:	e0002000 	.word	0xe0002000
 800c50c:	e0042000 	.word	0xe0042000
 800c510:	58024c08 	.word	0x58024c08
 800c514:	58024c00 	.word	0x58024c00
 800c518:	f407a5c2 	.word	0xf407a5c2
 800c51c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c520:	40023008 	.word	0x40023008
 800c524:	40023000 	.word	0x40023000
 800c528:	a1facade 	.word	0xa1facade

0800c52c <ai_platform_network_post_init>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	b120      	cbz	r0, 800c53a <ai_platform_network_post_init+0xe>
 800c530:	4b3f      	ldr	r3, [pc, #252]	; (800c630 <ai_platform_network_post_init+0x104>)
 800c532:	6802      	ldr	r2, [r0, #0]
 800c534:	429a      	cmp	r2, r3
 800c536:	4604      	mov	r4, r0
 800c538:	d02d      	beq.n	800c596 <ai_platform_network_post_init+0x6a>
 800c53a:	4a3e      	ldr	r2, [pc, #248]	; (800c634 <ai_platform_network_post_init+0x108>)
 800c53c:	6813      	ldr	r3, [r2, #0]
 800c53e:	f023 0301 	bic.w	r3, r3, #1
 800c542:	6013      	str	r3, [r2, #0]
 800c544:	f7ff fd9e 	bl	800c084 <_ai_platform_acquire_crc>
 800c548:	4b3b      	ldr	r3, [pc, #236]	; (800c638 <ai_platform_network_post_init+0x10c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c554:	d00d      	beq.n	800c572 <ai_platform_network_post_init+0x46>
 800c556:	4b39      	ldr	r3, [pc, #228]	; (800c63c <ai_platform_network_post_init+0x110>)
 800c558:	2201      	movs	r2, #1
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	2a00      	cmp	r2, #0
 800c560:	d1fc      	bne.n	800c55c <ai_platform_network_post_init+0x30>
 800c562:	4b37      	ldr	r3, [pc, #220]	; (800c640 <ai_platform_network_post_init+0x114>)
 800c564:	4a37      	ldr	r2, [pc, #220]	; (800c644 <ai_platform_network_post_init+0x118>)
 800c566:	601a      	str	r2, [r3, #0]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4b37      	ldr	r3, [pc, #220]	; (800c648 <ai_platform_network_post_init+0x11c>)
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d00d      	beq.n	800c58c <ai_platform_network_post_init+0x60>
 800c570:	e7fe      	b.n	800c570 <ai_platform_network_post_init+0x44>
 800c572:	4b36      	ldr	r3, [pc, #216]	; (800c64c <ai_platform_network_post_init+0x120>)
 800c574:	2201      	movs	r2, #1
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	2a00      	cmp	r2, #0
 800c57c:	d1fc      	bne.n	800c578 <ai_platform_network_post_init+0x4c>
 800c57e:	4b34      	ldr	r3, [pc, #208]	; (800c650 <ai_platform_network_post_init+0x124>)
 800c580:	4a30      	ldr	r2, [pc, #192]	; (800c644 <ai_platform_network_post_init+0x118>)
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	4b30      	ldr	r3, [pc, #192]	; (800c648 <ai_platform_network_post_init+0x11c>)
 800c588:	429a      	cmp	r2, r3
 800c58a:	d103      	bne.n	800c594 <ai_platform_network_post_init+0x68>
 800c58c:	f7ff fd7c 	bl	800c088 <_ai_platform_release_crc>
 800c590:	2000      	movs	r0, #0
 800c592:	bd38      	pop	{r3, r4, r5, pc}
 800c594:	e7fe      	b.n	800c594 <ai_platform_network_post_init+0x68>
 800c596:	4a27      	ldr	r2, [pc, #156]	; (800c634 <ai_platform_network_post_init+0x108>)
 800c598:	6813      	ldr	r3, [r2, #0]
 800c59a:	f023 0301 	bic.w	r3, r3, #1
 800c59e:	6013      	str	r3, [r2, #0]
 800c5a0:	f7ff fd70 	bl	800c084 <_ai_platform_acquire_crc>
 800c5a4:	4b24      	ldr	r3, [pc, #144]	; (800c638 <ai_platform_network_post_init+0x10c>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5b0:	d00d      	beq.n	800c5ce <ai_platform_network_post_init+0xa2>
 800c5b2:	4b22      	ldr	r3, [pc, #136]	; (800c63c <ai_platform_network_post_init+0x110>)
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	2a00      	cmp	r2, #0
 800c5bc:	d1fc      	bne.n	800c5b8 <ai_platform_network_post_init+0x8c>
 800c5be:	4b20      	ldr	r3, [pc, #128]	; (800c640 <ai_platform_network_post_init+0x114>)
 800c5c0:	4a20      	ldr	r2, [pc, #128]	; (800c644 <ai_platform_network_post_init+0x118>)
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	4b20      	ldr	r3, [pc, #128]	; (800c648 <ai_platform_network_post_init+0x11c>)
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d00e      	beq.n	800c5ea <ai_platform_network_post_init+0xbe>
 800c5cc:	e7fe      	b.n	800c5cc <ai_platform_network_post_init+0xa0>
 800c5ce:	4b1f      	ldr	r3, [pc, #124]	; (800c64c <ai_platform_network_post_init+0x120>)
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	d1fc      	bne.n	800c5d4 <ai_platform_network_post_init+0xa8>
 800c5da:	4b1d      	ldr	r3, [pc, #116]	; (800c650 <ai_platform_network_post_init+0x124>)
 800c5dc:	4a19      	ldr	r2, [pc, #100]	; (800c644 <ai_platform_network_post_init+0x118>)
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	4b19      	ldr	r3, [pc, #100]	; (800c648 <ai_platform_network_post_init+0x11c>)
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d000      	beq.n	800c5ea <ai_platform_network_post_init+0xbe>
 800c5e8:	e7fe      	b.n	800c5e8 <ai_platform_network_post_init+0xbc>
 800c5ea:	f7ff fd4d 	bl	800c088 <_ai_platform_release_crc>
 800c5ee:	68e3      	ldr	r3, [r4, #12]
 800c5f0:	f013 0502 	ands.w	r5, r3, #2
 800c5f4:	d011      	beq.n	800c61a <ai_platform_network_post_init+0xee>
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f003 fb5c 	bl	800fcb4 <ai_layers_post_init_all>
 800c5fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c5fe:	b1a3      	cbz	r3, 800c62a <ai_platform_network_post_init+0xfe>
 800c600:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800c602:	b195      	cbz	r5, 800c62a <ai_platform_network_post_init+0xfe>
 800c604:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c606:	4629      	mov	r1, r5
 800c608:	2000      	movs	r0, #0
 800c60a:	4798      	blx	r3
 800c60c:	692b      	ldr	r3, [r5, #16]
 800c60e:	42ab      	cmp	r3, r5
 800c610:	d00b      	beq.n	800c62a <ai_platform_network_post_init+0xfe>
 800c612:	461d      	mov	r5, r3
 800c614:	b14b      	cbz	r3, 800c62a <ai_platform_network_post_init+0xfe>
 800c616:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c618:	e7f4      	b.n	800c604 <ai_platform_network_post_init+0xd8>
 800c61a:	f104 0010 	add.w	r0, r4, #16
 800c61e:	2210      	movs	r2, #16
 800c620:	2111      	movs	r1, #17
 800c622:	f000 fa97 	bl	800cb54 <core_set_error>
 800c626:	4628      	mov	r0, r5
 800c628:	bd38      	pop	{r3, r4, r5, pc}
 800c62a:	2001      	movs	r0, #1
 800c62c:	bd38      	pop	{r3, r4, r5, pc}
 800c62e:	bf00      	nop
 800c630:	a1c00100 	.word	0xa1c00100
 800c634:	e0002000 	.word	0xe0002000
 800c638:	e0042000 	.word	0xe0042000
 800c63c:	58024c08 	.word	0x58024c08
 800c640:	58024c00 	.word	0x58024c00
 800c644:	f407a5c2 	.word	0xf407a5c2
 800c648:	b5e8b5cd 	.word	0xb5e8b5cd
 800c64c:	40023008 	.word	0x40023008
 800c650:	40023000 	.word	0x40023000

0800c654 <ai_platform_network_process>:
 800c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	b085      	sub	sp, #20
 800c65a:	460d      	mov	r5, r1
 800c65c:	9202      	str	r2, [sp, #8]
 800c65e:	4604      	mov	r4, r0
 800c660:	b120      	cbz	r0, 800c66c <ai_platform_network_process+0x18>
 800c662:	4b7b      	ldr	r3, [pc, #492]	; (800c850 <ai_platform_network_process+0x1fc>)
 800c664:	6802      	ldr	r2, [r0, #0]
 800c666:	429a      	cmp	r2, r3
 800c668:	bf18      	it	ne
 800c66a:	2400      	movne	r4, #0
 800c66c:	4a79      	ldr	r2, [pc, #484]	; (800c854 <ai_platform_network_process+0x200>)
 800c66e:	6813      	ldr	r3, [r2, #0]
 800c670:	f023 0301 	bic.w	r3, r3, #1
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	f7ff fd05 	bl	800c084 <_ai_platform_acquire_crc>
 800c67a:	4b77      	ldr	r3, [pc, #476]	; (800c858 <ai_platform_network_process+0x204>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c686:	d00d      	beq.n	800c6a4 <ai_platform_network_process+0x50>
 800c688:	4b74      	ldr	r3, [pc, #464]	; (800c85c <ai_platform_network_process+0x208>)
 800c68a:	2201      	movs	r2, #1
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	2a00      	cmp	r2, #0
 800c692:	d1fc      	bne.n	800c68e <ai_platform_network_process+0x3a>
 800c694:	4b72      	ldr	r3, [pc, #456]	; (800c860 <ai_platform_network_process+0x20c>)
 800c696:	4a73      	ldr	r2, [pc, #460]	; (800c864 <ai_platform_network_process+0x210>)
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	4b72      	ldr	r3, [pc, #456]	; (800c868 <ai_platform_network_process+0x214>)
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d00e      	beq.n	800c6c0 <ai_platform_network_process+0x6c>
 800c6a2:	e7fe      	b.n	800c6a2 <ai_platform_network_process+0x4e>
 800c6a4:	4b71      	ldr	r3, [pc, #452]	; (800c86c <ai_platform_network_process+0x218>)
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	2a00      	cmp	r2, #0
 800c6ae:	d1fc      	bne.n	800c6aa <ai_platform_network_process+0x56>
 800c6b0:	4b6f      	ldr	r3, [pc, #444]	; (800c870 <ai_platform_network_process+0x21c>)
 800c6b2:	4a6c      	ldr	r2, [pc, #432]	; (800c864 <ai_platform_network_process+0x210>)
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	4b6b      	ldr	r3, [pc, #428]	; (800c868 <ai_platform_network_process+0x214>)
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d000      	beq.n	800c6c0 <ai_platform_network_process+0x6c>
 800c6be:	e7fe      	b.n	800c6be <ai_platform_network_process+0x6a>
 800c6c0:	f7ff fce2 	bl	800c088 <_ai_platform_release_crc>
 800c6c4:	2c00      	cmp	r4, #0
 800c6c6:	f000 808e 	beq.w	800c7e6 <ai_platform_network_process+0x192>
 800c6ca:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800c6cc:	2f00      	cmp	r7, #0
 800c6ce:	f040 823c 	bne.w	800cb4a <ai_platform_network_process+0x4f6>
 800c6d2:	68e3      	ldr	r3, [r4, #12]
 800c6d4:	f003 0303 	and.w	r3, r3, #3
 800c6d8:	f04f 0b00 	mov.w	fp, #0
 800c6dc:	2b03      	cmp	r3, #3
 800c6de:	f8c4 b014 	str.w	fp, [r4, #20]
 800c6e2:	f040 822b 	bne.w	800cb3c <ai_platform_network_process+0x4e8>
 800c6e6:	2d00      	cmp	r5, #0
 800c6e8:	f000 80a8 	beq.w	800c83c <ai_platform_network_process+0x1e8>
 800c6ec:	2f00      	cmp	r7, #0
 800c6ee:	f000 80a5 	beq.w	800c83c <ai_platform_network_process+0x1e8>
 800c6f2:	883b      	ldrh	r3, [r7, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 80a1 	beq.w	800c83c <ai_platform_network_process+0x1e8>
 800c6fa:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800c6fe:	9401      	str	r4, [sp, #4]
 800c700:	46d8      	mov	r8, fp
 800c702:	4598      	cmp	r8, r3
 800c704:	f080 80b6 	bcs.w	800c874 <ai_platform_network_process+0x220>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 80b2 	beq.w	800c874 <ai_platform_network_process+0x220>
 800c710:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800c714:	2e00      	cmp	r6, #0
 800c716:	f000 80ad 	beq.w	800c874 <ai_platform_network_process+0x220>
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	9303      	str	r3, [sp, #12]
 800c720:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800c724:	eb13 0a04 	adds.w	sl, r3, r4
 800c728:	f000 8087 	beq.w	800c83a <ai_platform_network_process+0x1e6>
 800c72c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800c730:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800c734:	69b0      	ldr	r0, [r6, #24]
 800c736:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800c73a:	6841      	ldr	r1, [r0, #4]
 800c73c:	fb0b f30e 	mul.w	r3, fp, lr
 800c740:	fb0c f303 	mul.w	r3, ip, r3
 800c744:	4299      	cmp	r1, r3
 800c746:	d36e      	bcc.n	800c826 <ai_platform_network_process+0x1d2>
 800c748:	68f3      	ldr	r3, [r6, #12]
 800c74a:	68da      	ldr	r2, [r3, #12]
 800c74c:	455a      	cmp	r2, fp
 800c74e:	d16a      	bne.n	800c826 <ai_platform_network_process+0x1d2>
 800c750:	689a      	ldr	r2, [r3, #8]
 800c752:	4572      	cmp	r2, lr
 800c754:	d167      	bne.n	800c826 <ai_platform_network_process+0x1d2>
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	459c      	cmp	ip, r3
 800c75a:	d164      	bne.n	800c826 <ai_platform_network_process+0x1d2>
 800c75c:	6800      	ldr	r0, [r0, #0]
 800c75e:	f003 fb67 	bl	800fe30 <ai_array_get_byte_size>
 800c762:	68f2      	ldr	r2, [r6, #12]
 800c764:	6973      	ldr	r3, [r6, #20]
 800c766:	68d2      	ldr	r2, [r2, #12]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	fb03 f302 	mul.w	r3, r3, r2
 800c76e:	4298      	cmp	r0, r3
 800c770:	d359      	bcc.n	800c826 <ai_platform_network_process+0x1d2>
 800c772:	69b3      	ldr	r3, [r6, #24]
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f003 fb03 	bl	800fd80 <ai_array_to_buffer_fmt>
 800c77a:	682b      	ldr	r3, [r5, #0]
 800c77c:	4043      	eors	r3, r0
 800c77e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800c782:	d146      	bne.n	800c812 <ai_platform_network_process+0x1be>
 800c784:	692b      	ldr	r3, [r5, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d03a      	beq.n	800c800 <ai_platform_network_process+0x1ac>
 800c78a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800c78e:	f1bb 0f00 	cmp.w	fp, #0
 800c792:	d02d      	beq.n	800c7f0 <ai_platform_network_process+0x19c>
 800c794:	68f2      	ldr	r2, [r6, #12]
 800c796:	6973      	ldr	r3, [r6, #20]
 800c798:	68d1      	ldr	r1, [r2, #12]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	fb02 f201 	mul.w	r2, r2, r1
 800c7a0:	f8ca 2008 	str.w	r2, [sl, #8]
 800c7a4:	88ab      	ldrh	r3, [r5, #4]
 800c7a6:	fb02 f203 	mul.w	r2, r2, r3
 800c7aa:	f8ca 200c 	str.w	r2, [sl, #12]
 800c7ae:	6929      	ldr	r1, [r5, #16]
 800c7b0:	f8ca 1004 	str.w	r1, [sl, #4]
 800c7b4:	692b      	ldr	r3, [r5, #16]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	9a03      	ldr	r2, [sp, #12]
 800c7ba:	5113      	str	r3, [r2, r4]
 800c7bc:	69b0      	ldr	r0, [r6, #24]
 800c7be:	6803      	ldr	r3, [r0, #0]
 800c7c0:	45d9      	cmp	r9, fp
 800c7c2:	bf38      	it	cc
 800c7c4:	46d9      	movcc	r9, fp
 800c7c6:	009a      	lsls	r2, r3, #2
 800c7c8:	d408      	bmi.n	800c7dc <ai_platform_network_process+0x188>
 800c7ca:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c7ce:	1a9b      	subs	r3, r3, r2
 800c7d0:	4419      	add	r1, r3
 800c7d2:	6081      	str	r1, [r0, #8]
 800c7d4:	69b3      	ldr	r3, [r6, #24]
 800c7d6:	f8da 2004 	ldr.w	r2, [sl, #4]
 800c7da:	60da      	str	r2, [r3, #12]
 800c7dc:	883b      	ldrh	r3, [r7, #0]
 800c7de:	f108 0801 	add.w	r8, r8, #1
 800c7e2:	3518      	adds	r5, #24
 800c7e4:	e78d      	b.n	800c702 <ai_platform_network_process+0xae>
 800c7e6:	46a3      	mov	fp, r4
 800c7e8:	4658      	mov	r0, fp
 800c7ea:	b005      	add	sp, #20
 800c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f0:	9c01      	ldr	r4, [sp, #4]
 800c7f2:	2221      	movs	r2, #33	; 0x21
 800c7f4:	f104 0010 	add.w	r0, r4, #16
 800c7f8:	2112      	movs	r1, #18
 800c7fa:	f000 f9ab 	bl	800cb54 <core_set_error>
 800c7fe:	e7f3      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c800:	9c01      	ldr	r4, [sp, #4]
 800c802:	2217      	movs	r2, #23
 800c804:	f104 0010 	add.w	r0, r4, #16
 800c808:	2112      	movs	r1, #18
 800c80a:	469b      	mov	fp, r3
 800c80c:	f000 f9a2 	bl	800cb54 <core_set_error>
 800c810:	e7ea      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c812:	9c01      	ldr	r4, [sp, #4]
 800c814:	2219      	movs	r2, #25
 800c816:	f104 0010 	add.w	r0, r4, #16
 800c81a:	2112      	movs	r1, #18
 800c81c:	f000 f99a 	bl	800cb54 <core_set_error>
 800c820:	f04f 0b00 	mov.w	fp, #0
 800c824:	e7e0      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c826:	9c01      	ldr	r4, [sp, #4]
 800c828:	2218      	movs	r2, #24
 800c82a:	f104 0010 	add.w	r0, r4, #16
 800c82e:	2112      	movs	r1, #18
 800c830:	f000 f990 	bl	800cb54 <core_set_error>
 800c834:	f04f 0b00 	mov.w	fp, #0
 800c838:	e7d6      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c83a:	9c01      	ldr	r4, [sp, #4]
 800c83c:	f104 0010 	add.w	r0, r4, #16
 800c840:	2217      	movs	r2, #23
 800c842:	2112      	movs	r1, #18
 800c844:	f000 f986 	bl	800cb54 <core_set_error>
 800c848:	f04f 0b00 	mov.w	fp, #0
 800c84c:	e7cc      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c84e:	bf00      	nop
 800c850:	a1c00100 	.word	0xa1c00100
 800c854:	e0002000 	.word	0xe0002000
 800c858:	e0042000 	.word	0xe0042000
 800c85c:	58024c08 	.word	0x58024c08
 800c860:	58024c00 	.word	0x58024c00
 800c864:	f407a5c2 	.word	0xf407a5c2
 800c868:	b5e8b5cd 	.word	0xb5e8b5cd
 800c86c:	40023008 	.word	0x40023008
 800c870:	40023000 	.word	0x40023000
 800c874:	9c01      	ldr	r4, [sp, #4]
 800c876:	9a02      	ldr	r2, [sp, #8]
 800c878:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800c87a:	2a00      	cmp	r2, #0
 800c87c:	f000 80a9 	beq.w	800c9d2 <ai_platform_network_process+0x37e>
 800c880:	2b01      	cmp	r3, #1
 800c882:	f240 809b 	bls.w	800c9bc <ai_platform_network_process+0x368>
 800c886:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800c88a:	f11a 0f0c 	cmn.w	sl, #12
 800c88e:	f000 8095 	beq.w	800c9bc <ai_platform_network_process+0x368>
 800c892:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 8090 	beq.w	800c9bc <ai_platform_network_process+0x368>
 800c89c:	9d02      	ldr	r5, [sp, #8]
 800c89e:	9401      	str	r4, [sp, #4]
 800c8a0:	f04f 0800 	mov.w	r8, #0
 800c8a4:	4598      	cmp	r8, r3
 800c8a6:	f080 8092 	bcs.w	800c9ce <ai_platform_network_process+0x37a>
 800c8aa:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f000 808d 	beq.w	800c9ce <ai_platform_network_process+0x37a>
 800c8b4:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800c8b8:	2e00      	cmp	r6, #0
 800c8ba:	f000 8088 	beq.w	800c9ce <ai_platform_network_process+0x37a>
 800c8be:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	9302      	str	r3, [sp, #8]
 800c8c6:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800c8ca:	191f      	adds	r7, r3, r4
 800c8cc:	f000 812d 	beq.w	800cb2a <ai_platform_network_process+0x4d6>
 800c8d0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800c8d4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800c8d8:	69b0      	ldr	r0, [r6, #24]
 800c8da:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800c8de:	6841      	ldr	r1, [r0, #4]
 800c8e0:	fb0b f30e 	mul.w	r3, fp, lr
 800c8e4:	fb0c f303 	mul.w	r3, ip, r3
 800c8e8:	4299      	cmp	r1, r3
 800c8ea:	d366      	bcc.n	800c9ba <ai_platform_network_process+0x366>
 800c8ec:	68f3      	ldr	r3, [r6, #12]
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	455a      	cmp	r2, fp
 800c8f2:	d162      	bne.n	800c9ba <ai_platform_network_process+0x366>
 800c8f4:	689a      	ldr	r2, [r3, #8]
 800c8f6:	4572      	cmp	r2, lr
 800c8f8:	d15f      	bne.n	800c9ba <ai_platform_network_process+0x366>
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	459c      	cmp	ip, r3
 800c8fe:	d15c      	bne.n	800c9ba <ai_platform_network_process+0x366>
 800c900:	6800      	ldr	r0, [r0, #0]
 800c902:	f003 fa95 	bl	800fe30 <ai_array_get_byte_size>
 800c906:	68f2      	ldr	r2, [r6, #12]
 800c908:	6973      	ldr	r3, [r6, #20]
 800c90a:	68d2      	ldr	r2, [r2, #12]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	fb03 f302 	mul.w	r3, r3, r2
 800c912:	4298      	cmp	r0, r3
 800c914:	d351      	bcc.n	800c9ba <ai_platform_network_process+0x366>
 800c916:	69b3      	ldr	r3, [r6, #24]
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	f003 fa31 	bl	800fd80 <ai_array_to_buffer_fmt>
 800c91e:	682b      	ldr	r3, [r5, #0]
 800c920:	4043      	eors	r3, r0
 800c922:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800c926:	d13e      	bne.n	800c9a6 <ai_platform_network_process+0x352>
 800c928:	692b      	ldr	r3, [r5, #16]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d032      	beq.n	800c994 <ai_platform_network_process+0x340>
 800c92e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800c932:	f1bb 0f00 	cmp.w	fp, #0
 800c936:	d025      	beq.n	800c984 <ai_platform_network_process+0x330>
 800c938:	68f2      	ldr	r2, [r6, #12]
 800c93a:	6973      	ldr	r3, [r6, #20]
 800c93c:	68d1      	ldr	r1, [r2, #12]
 800c93e:	68da      	ldr	r2, [r3, #12]
 800c940:	fb02 f201 	mul.w	r2, r2, r1
 800c944:	60ba      	str	r2, [r7, #8]
 800c946:	88ab      	ldrh	r3, [r5, #4]
 800c948:	fb02 f203 	mul.w	r2, r2, r3
 800c94c:	60fa      	str	r2, [r7, #12]
 800c94e:	6929      	ldr	r1, [r5, #16]
 800c950:	6079      	str	r1, [r7, #4]
 800c952:	692b      	ldr	r3, [r5, #16]
 800c954:	4413      	add	r3, r2
 800c956:	9a02      	ldr	r2, [sp, #8]
 800c958:	5113      	str	r3, [r2, r4]
 800c95a:	69b0      	ldr	r0, [r6, #24]
 800c95c:	6803      	ldr	r3, [r0, #0]
 800c95e:	45d9      	cmp	r9, fp
 800c960:	bf38      	it	cc
 800c962:	46d9      	movcc	r9, fp
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	d407      	bmi.n	800c978 <ai_platform_network_process+0x324>
 800c968:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c96c:	1a9b      	subs	r3, r3, r2
 800c96e:	4419      	add	r1, r3
 800c970:	6081      	str	r1, [r0, #8]
 800c972:	69b3      	ldr	r3, [r6, #24]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	60da      	str	r2, [r3, #12]
 800c978:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800c97c:	f108 0801 	add.w	r8, r8, #1
 800c980:	3518      	adds	r5, #24
 800c982:	e78f      	b.n	800c8a4 <ai_platform_network_process+0x250>
 800c984:	9c01      	ldr	r4, [sp, #4]
 800c986:	2221      	movs	r2, #33	; 0x21
 800c988:	f104 0010 	add.w	r0, r4, #16
 800c98c:	2113      	movs	r1, #19
 800c98e:	f000 f8e1 	bl	800cb54 <core_set_error>
 800c992:	e729      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c994:	9c01      	ldr	r4, [sp, #4]
 800c996:	2217      	movs	r2, #23
 800c998:	f104 0010 	add.w	r0, r4, #16
 800c99c:	2113      	movs	r1, #19
 800c99e:	469b      	mov	fp, r3
 800c9a0:	f000 f8d8 	bl	800cb54 <core_set_error>
 800c9a4:	e720      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c9a6:	9c01      	ldr	r4, [sp, #4]
 800c9a8:	2219      	movs	r2, #25
 800c9aa:	f104 0010 	add.w	r0, r4, #16
 800c9ae:	2113      	movs	r1, #19
 800c9b0:	f000 f8d0 	bl	800cb54 <core_set_error>
 800c9b4:	f04f 0b00 	mov.w	fp, #0
 800c9b8:	e716      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c9ba:	9c01      	ldr	r4, [sp, #4]
 800c9bc:	f104 0010 	add.w	r0, r4, #16
 800c9c0:	2218      	movs	r2, #24
 800c9c2:	2113      	movs	r1, #19
 800c9c4:	f000 f8c6 	bl	800cb54 <core_set_error>
 800c9c8:	f04f 0b00 	mov.w	fp, #0
 800c9cc:	e70c      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800c9ce:	9c01      	ldr	r4, [sp, #4]
 800c9d0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800c9d2:	f8a4 9014 	strh.w	r9, [r4, #20]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80a4 	beq.w	800cb24 <ai_platform_network_process+0x4d0>
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800c9e0:	f240 809e 	bls.w	800cb20 <ai_platform_network_process+0x4cc>
 800c9e4:	f105 070c 	add.w	r7, r5, #12
 800c9e8:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800c9ec:	8aa3      	ldrh	r3, [r4, #20]
 800c9ee:	455b      	cmp	r3, fp
 800c9f0:	f67f aefa 	bls.w	800c7e8 <ai_platform_network_process+0x194>
 800c9f4:	9401      	str	r4, [sp, #4]
 800c9f6:	2d00      	cmp	r5, #0
 800c9f8:	d036      	beq.n	800ca68 <ai_platform_network_process+0x414>
 800c9fa:	882b      	ldrh	r3, [r5, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d033      	beq.n	800ca68 <ai_platform_network_process+0x414>
 800ca00:	686b      	ldr	r3, [r5, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d030      	beq.n	800ca68 <ai_platform_network_process+0x414>
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f04f 0800 	mov.w	r8, #0
 800ca0c:	b9db      	cbnz	r3, 800ca46 <ai_platform_network_process+0x3f2>
 800ca0e:	e02b      	b.n	800ca68 <ai_platform_network_process+0x414>
 800ca10:	68d4      	ldr	r4, [r2, #12]
 800ca12:	1b00      	subs	r0, r0, r4
 800ca14:	4401      	add	r1, r0
 800ca16:	6091      	str	r1, [r2, #8]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	6872      	ldr	r2, [r6, #4]
 800ca1c:	60da      	str	r2, [r3, #12]
 800ca1e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800ca22:	f85a 2009 	ldr.w	r2, [sl, r9]
 800ca26:	440b      	add	r3, r1
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	bf24      	itt	cs
 800ca2c:	68f3      	ldrcs	r3, [r6, #12]
 800ca2e:	1ad3      	subcs	r3, r2, r3
 800ca30:	6073      	str	r3, [r6, #4]
 800ca32:	882b      	ldrh	r3, [r5, #0]
 800ca34:	f108 0801 	add.w	r8, r8, #1
 800ca38:	4598      	cmp	r8, r3
 800ca3a:	d215      	bcs.n	800ca68 <ai_platform_network_process+0x414>
 800ca3c:	686b      	ldr	r3, [r5, #4]
 800ca3e:	b19b      	cbz	r3, 800ca68 <ai_platform_network_process+0x414>
 800ca40:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ca44:	b183      	cbz	r3, 800ca68 <ai_platform_network_process+0x414>
 800ca46:	68a9      	ldr	r1, [r5, #8]
 800ca48:	699a      	ldr	r2, [r3, #24]
 800ca4a:	f8d1 a000 	ldr.w	sl, [r1]
 800ca4e:	6814      	ldr	r4, [r2, #0]
 800ca50:	6890      	ldr	r0, [r2, #8]
 800ca52:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800ca56:	eb0a 0609 	add.w	r6, sl, r9
 800ca5a:	00a4      	lsls	r4, r4, #2
 800ca5c:	6871      	ldr	r1, [r6, #4]
 800ca5e:	d5d7      	bpl.n	800ca10 <ai_platform_network_process+0x3bc>
 800ca60:	68b2      	ldr	r2, [r6, #8]
 800ca62:	f003 fa69 	bl	800ff38 <memcpy>
 800ca66:	e7da      	b.n	800ca1e <ai_platform_network_process+0x3ca>
 800ca68:	9801      	ldr	r0, [sp, #4]
 800ca6a:	f003 f93b 	bl	800fce4 <ai_layers_forward_all>
 800ca6e:	2f00      	cmp	r7, #0
 800ca70:	d047      	beq.n	800cb02 <ai_platform_network_process+0x4ae>
 800ca72:	883b      	ldrh	r3, [r7, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d044      	beq.n	800cb02 <ai_platform_network_process+0x4ae>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d041      	beq.n	800cb02 <ai_platform_network_process+0x4ae>
 800ca7e:	6818      	ldr	r0, [r3, #0]
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d03e      	beq.n	800cb02 <ai_platform_network_process+0x4ae>
 800ca84:	f04f 0800 	mov.w	r8, #0
 800ca88:	e019      	b.n	800cabe <ai_platform_network_process+0x46a>
 800ca8a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	bf24      	itt	cs
 800ca92:	68f3      	ldrcs	r3, [r6, #12]
 800ca94:	1ad3      	subcs	r3, r2, r3
 800ca96:	6073      	str	r3, [r6, #4]
 800ca98:	6981      	ldr	r1, [r0, #24]
 800ca9a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800ca9e:	1b12      	subs	r2, r2, r4
 800caa0:	4413      	add	r3, r2
 800caa2:	608b      	str	r3, [r1, #8]
 800caa4:	6983      	ldr	r3, [r0, #24]
 800caa6:	6872      	ldr	r2, [r6, #4]
 800caa8:	60da      	str	r2, [r3, #12]
 800caaa:	883b      	ldrh	r3, [r7, #0]
 800caac:	f108 0801 	add.w	r8, r8, #1
 800cab0:	4598      	cmp	r8, r3
 800cab2:	d226      	bcs.n	800cb02 <ai_platform_network_process+0x4ae>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	b323      	cbz	r3, 800cb02 <ai_platform_network_process+0x4ae>
 800cab8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cabc:	b308      	cbz	r0, 800cb02 <ai_platform_network_process+0x4ae>
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	6981      	ldr	r1, [r0, #24]
 800cac2:	f8d3 a000 	ldr.w	sl, [r3]
 800cac6:	680c      	ldr	r4, [r1, #0]
 800cac8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800cacc:	eb0a 0609 	add.w	r6, sl, r9
 800cad0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800cad4:	00a4      	lsls	r4, r4, #2
 800cad6:	eb0c 0302 	add.w	r3, ip, r2
 800cada:	d5d6      	bpl.n	800ca8a <ai_platform_network_process+0x436>
 800cadc:	6889      	ldr	r1, [r1, #8]
 800cade:	4660      	mov	r0, ip
 800cae0:	f003 fa2a 	bl	800ff38 <memcpy>
 800cae4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800cae8:	f85a 2009 	ldr.w	r2, [sl, r9]
 800caec:	440b      	add	r3, r1
 800caee:	4293      	cmp	r3, r2
 800caf0:	bf24      	itt	cs
 800caf2:	68f3      	ldrcs	r3, [r6, #12]
 800caf4:	1ad3      	subcs	r3, r2, r3
 800caf6:	6073      	str	r3, [r6, #4]
 800caf8:	883b      	ldrh	r3, [r7, #0]
 800cafa:	f108 0801 	add.w	r8, r8, #1
 800cafe:	4598      	cmp	r8, r3
 800cb00:	d3d8      	bcc.n	800cab4 <ai_platform_network_process+0x460>
 800cb02:	9b01      	ldr	r3, [sp, #4]
 800cb04:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	f10b 0b01 	add.w	fp, fp, #1
 800cb0e:	8a9b      	ldrh	r3, [r3, #20]
 800cb10:	fa1f fb8b 	uxth.w	fp, fp
 800cb14:	455b      	cmp	r3, fp
 800cb16:	f8a2 b016 	strh.w	fp, [r2, #22]
 800cb1a:	f63f af6c 	bhi.w	800c9f6 <ai_platform_network_process+0x3a2>
 800cb1e:	e663      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800cb20:	2700      	movs	r7, #0
 800cb22:	e761      	b.n	800c9e8 <ai_platform_network_process+0x394>
 800cb24:	461d      	mov	r5, r3
 800cb26:	461f      	mov	r7, r3
 800cb28:	e75e      	b.n	800c9e8 <ai_platform_network_process+0x394>
 800cb2a:	9c01      	ldr	r4, [sp, #4]
 800cb2c:	2217      	movs	r2, #23
 800cb2e:	f104 0010 	add.w	r0, r4, #16
 800cb32:	2113      	movs	r1, #19
 800cb34:	f000 f80e 	bl	800cb54 <core_set_error>
 800cb38:	46bb      	mov	fp, r7
 800cb3a:	e655      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800cb3c:	f104 0010 	add.w	r0, r4, #16
 800cb40:	2230      	movs	r2, #48	; 0x30
 800cb42:	2111      	movs	r1, #17
 800cb44:	f000 f806 	bl	800cb54 <core_set_error>
 800cb48:	e64e      	b.n	800c7e8 <ai_platform_network_process+0x194>
 800cb4a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800cb4c:	e5c1      	b.n	800c6d2 <ai_platform_network_process+0x7e>
 800cb4e:	bf00      	nop

0800cb50 <core_init>:
 800cb50:	2001      	movs	r0, #1
 800cb52:	4770      	bx	lr

0800cb54 <core_set_error>:
 800cb54:	7803      	ldrb	r3, [r0, #0]
 800cb56:	b933      	cbnz	r3, 800cb66 <core_set_error+0x12>
 800cb58:	7001      	strb	r1, [r0, #0]
 800cb5a:	6803      	ldr	r3, [r0, #0]
 800cb5c:	f362 231f 	bfi	r3, r2, #8, #24
 800cb60:	6003      	str	r3, [r0, #0]
 800cb62:	2001      	movs	r0, #1
 800cb64:	4770      	bx	lr
 800cb66:	2000      	movs	r0, #0
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop

0800cb6c <func_dummy>:
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop

0800cb70 <ai_dict8_dot_array_f32>:
 800cb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb74:	f8dd c020 	ldr.w	ip, [sp, #32]
 800cb78:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800cb7c:	f000 80c0 	beq.w	800cd00 <ai_dict8_dot_array_f32+0x190>
 800cb80:	f101 0408 	add.w	r4, r1, #8
 800cb84:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800cb88:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800cd08 <ai_dict8_dot_array_f32+0x198>
 800cb8c:	eb04 0e09 	add.w	lr, r4, r9
 800cb90:	f103 0520 	add.w	r5, r3, #32
 800cb94:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800cb98:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800cb9c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800cba0:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800cba4:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800cba8:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800cbac:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800cbb0:	ed55 3a04 	vldr	s7, [r5, #-16]
 800cbb4:	ed55 4a03 	vldr	s9, [r5, #-12]
 800cbb8:	ed55 5a02 	vldr	s11, [r5, #-8]
 800cbbc:	ed55 6a01 	vldr	s13, [r5, #-4]
 800cbc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cbc4:	edd6 7a00 	vldr	s15, [r6]
 800cbc8:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800cbcc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800cbd0:	ee67 7a83 	vmul.f32	s15, s15, s6
 800cbd4:	ed9a 3a00 	vldr	s6, [sl]
 800cbd8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800cbdc:	eee3 7a05 	vfma.f32	s15, s6, s10
 800cbe0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cbe4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cbe8:	ed97 3a00 	vldr	s6, [r7]
 800cbec:	ed96 5a00 	vldr	s10, [r6]
 800cbf0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800cbf4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800cbf8:	eee3 7a04 	vfma.f32	s15, s6, s8
 800cbfc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800cc00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc04:	ed9a 3a00 	vldr	s6, [sl]
 800cc08:	ed96 4a00 	vldr	s8, [r6]
 800cc0c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800cc10:	eee5 7a06 	vfma.f32	s15, s10, s12
 800cc14:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cc18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc1c:	ed97 5a00 	vldr	s10, [r7]
 800cc20:	ed96 6a00 	vldr	s12, [r6]
 800cc24:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cc28:	3408      	adds	r4, #8
 800cc2a:	45a6      	cmp	lr, r4
 800cc2c:	f105 0520 	add.w	r5, r5, #32
 800cc30:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cc34:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cc38:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cc3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc40:	d1a8      	bne.n	800cb94 <ai_dict8_dot_array_f32+0x24>
 800cc42:	4449      	add	r1, r9
 800cc44:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800cc48:	f01c 0c07 	ands.w	ip, ip, #7
 800cc4c:	d050      	beq.n	800ccf0 <ai_dict8_dot_array_f32+0x180>
 800cc4e:	780c      	ldrb	r4, [r1, #0]
 800cc50:	edd3 6a00 	vldr	s13, [r3]
 800cc54:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800cc58:	edd4 7a00 	vldr	s15, [r4]
 800cc5c:	f1bc 0f01 	cmp.w	ip, #1
 800cc60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cc64:	d044      	beq.n	800ccf0 <ai_dict8_dot_array_f32+0x180>
 800cc66:	784c      	ldrb	r4, [r1, #1]
 800cc68:	edd3 6a01 	vldr	s13, [r3, #4]
 800cc6c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800cc70:	edd4 7a00 	vldr	s15, [r4]
 800cc74:	f1bc 0f02 	cmp.w	ip, #2
 800cc78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cc7c:	d038      	beq.n	800ccf0 <ai_dict8_dot_array_f32+0x180>
 800cc7e:	788c      	ldrb	r4, [r1, #2]
 800cc80:	edd3 6a02 	vldr	s13, [r3, #8]
 800cc84:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800cc88:	edd4 7a00 	vldr	s15, [r4]
 800cc8c:	f1bc 0f03 	cmp.w	ip, #3
 800cc90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cc94:	d02c      	beq.n	800ccf0 <ai_dict8_dot_array_f32+0x180>
 800cc96:	78cc      	ldrb	r4, [r1, #3]
 800cc98:	edd3 6a03 	vldr	s13, [r3, #12]
 800cc9c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800cca0:	edd4 7a00 	vldr	s15, [r4]
 800cca4:	f1bc 0f04 	cmp.w	ip, #4
 800cca8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ccac:	d020      	beq.n	800ccf0 <ai_dict8_dot_array_f32+0x180>
 800ccae:	790c      	ldrb	r4, [r1, #4]
 800ccb0:	edd3 6a04 	vldr	s13, [r3, #16]
 800ccb4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ccb8:	edd4 7a00 	vldr	s15, [r4]
 800ccbc:	f1bc 0f05 	cmp.w	ip, #5
 800ccc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ccc4:	d014      	beq.n	800ccf0 <ai_dict8_dot_array_f32+0x180>
 800ccc6:	794c      	ldrb	r4, [r1, #5]
 800ccc8:	edd3 6a05 	vldr	s13, [r3, #20]
 800cccc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ccd0:	edd4 7a00 	vldr	s15, [r4]
 800ccd4:	f1bc 0f06 	cmp.w	ip, #6
 800ccd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ccdc:	d008      	beq.n	800ccf0 <ai_dict8_dot_array_f32+0x180>
 800ccde:	7989      	ldrb	r1, [r1, #6]
 800cce0:	edd3 7a06 	vldr	s15, [r3, #24]
 800cce4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800cce8:	edd2 6a00 	vldr	s13, [r2]
 800ccec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ccf0:	edd0 7a00 	vldr	s15, [r0]
 800ccf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccf8:	ed80 7a00 	vstr	s14, [r0]
 800ccfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd00:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800cd08 <ai_dict8_dot_array_f32+0x198>
 800cd04:	e7a0      	b.n	800cc48 <ai_dict8_dot_array_f32+0xd8>
 800cd06:	bf00      	nop
 800cd08:	00000000 	.word	0x00000000

0800cd0c <ai_dict4_dot_array_f32>:
 800cd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cd12:	f027 0c01 	bic.w	ip, r7, #1
 800cd16:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800cd1a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800cd1e:	f000 80ae 	beq.w	800ce7e <ai_dict4_dot_array_f32+0x172>
 800cd22:	1d0d      	adds	r5, r1, #4
 800cd24:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800cd28:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800ce84 <ai_dict4_dot_array_f32+0x178>
 800cd2c:	eb05 0e09 	add.w	lr, r5, r9
 800cd30:	f103 0420 	add.w	r4, r3, #32
 800cd34:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800cd38:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800cd3c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800cd40:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800cd44:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800cd48:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800cd4c:	ed14 5a04 	vldr	s10, [r4, #-16]
 800cd50:	ed54 5a03 	vldr	s11, [r4, #-12]
 800cd54:	ed14 6a02 	vldr	s12, [r4, #-8]
 800cd58:	ed54 6a01 	vldr	s13, [r4, #-4]
 800cd5c:	f006 0a0f 	and.w	sl, r6, #15
 800cd60:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800cd64:	edda 7a00 	vldr	s15, [sl]
 800cd68:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800cd6c:	0936      	lsrs	r6, r6, #4
 800cd6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd72:	ee67 7a83 	vmul.f32	s15, s15, s6
 800cd76:	ed96 3a00 	vldr	s6, [r6]
 800cd7a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800cd7e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cd82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd86:	f00b 0b0f 	and.w	fp, fp, #15
 800cd8a:	edd6 3a00 	vldr	s7, [r6]
 800cd8e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800cd92:	eee3 7a84 	vfma.f32	s15, s7, s8
 800cd96:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800cd9a:	3504      	adds	r5, #4
 800cd9c:	ed9b 4a00 	vldr	s8, [fp]
 800cda0:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800cda4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cda8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800cdac:	f00a 0a0f 	and.w	sl, sl, #15
 800cdb0:	eddb 4a00 	vldr	s9, [fp]
 800cdb4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cdb8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800cdbc:	45ae      	cmp	lr, r5
 800cdbe:	ed9a 5a00 	vldr	s10, [sl]
 800cdc2:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800cdc6:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cdca:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800cdce:	f006 060f 	and.w	r6, r6, #15
 800cdd2:	edda 5a00 	vldr	s11, [sl]
 800cdd6:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cdda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdde:	f104 0420 	add.w	r4, r4, #32
 800cde2:	ed96 6a00 	vldr	s12, [r6]
 800cde6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cdea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdee:	d1a1      	bne.n	800cd34 <ai_dict4_dot_array_f32+0x28>
 800cdf0:	4449      	add	r1, r9
 800cdf2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800cdf6:	459c      	cmp	ip, r3
 800cdf8:	d92d      	bls.n	800ce56 <ai_dict4_dot_array_f32+0x14a>
 800cdfa:	f10c 0c07 	add.w	ip, ip, #7
 800cdfe:	f103 0508 	add.w	r5, r3, #8
 800ce02:	ebac 0c05 	sub.w	ip, ip, r5
 800ce06:	f02c 0407 	bic.w	r4, ip, #7
 800ce0a:	f103 0810 	add.w	r8, r3, #16
 800ce0e:	44a0      	add	r8, r4
 800ce10:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800ce14:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800ce18:	ed15 6a01 	vldr	s12, [r5, #-4]
 800ce1c:	ed55 6a02 	vldr	s13, [r5, #-8]
 800ce20:	f004 060f 	and.w	r6, r4, #15
 800ce24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce28:	0924      	lsrs	r4, r4, #4
 800ce2a:	edd6 7a00 	vldr	s15, [r6]
 800ce2e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ce32:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ce36:	ed94 6a00 	vldr	s12, [r4]
 800ce3a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ce3e:	3508      	adds	r5, #8
 800ce40:	45a8      	cmp	r8, r5
 800ce42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce46:	d1e5      	bne.n	800ce14 <ai_dict4_dot_array_f32+0x108>
 800ce48:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800ce4c:	f10c 0c01 	add.w	ip, ip, #1
 800ce50:	4461      	add	r1, ip
 800ce52:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800ce56:	07fc      	lsls	r4, r7, #31
 800ce58:	d509      	bpl.n	800ce6e <ai_dict4_dot_array_f32+0x162>
 800ce5a:	7809      	ldrb	r1, [r1, #0]
 800ce5c:	edd3 7a00 	vldr	s15, [r3]
 800ce60:	090b      	lsrs	r3, r1, #4
 800ce62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ce66:	edd2 6a00 	vldr	s13, [r2]
 800ce6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce6e:	edd0 7a00 	vldr	s15, [r0]
 800ce72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce76:	ed80 7a00 	vstr	s14, [r0]
 800ce7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800ce84 <ai_dict4_dot_array_f32+0x178>
 800ce82:	e7b8      	b.n	800cdf6 <ai_dict4_dot_array_f32+0xea>
 800ce84:	00000000 	.word	0x00000000

0800ce88 <ai_dict_decompress_f32>:
 800ce88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce8c:	9f08      	ldr	r7, [sp, #32]
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800ce94:	d00e      	beq.n	800ceb4 <ai_dict_decompress_f32+0x2c>
 800ce96:	2b08      	cmp	r3, #8
 800ce98:	d10a      	bne.n	800ceb0 <ai_dict_decompress_f32+0x28>
 800ce9a:	42b8      	cmp	r0, r7
 800ce9c:	d208      	bcs.n	800ceb0 <ai_dict_decompress_f32+0x28>
 800ce9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cea2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f840 3b04 	str.w	r3, [r0], #4
 800ceac:	4287      	cmp	r7, r0
 800ceae:	d8f6      	bhi.n	800ce9e <ai_dict_decompress_f32+0x16>
 800ceb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb4:	9b07      	ldr	r3, [sp, #28]
 800ceb6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800ceba:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800cebe:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 800cec2:	f003 0e01 	and.w	lr, r3, #1
 800cec6:	42b8      	cmp	r0, r7
 800cec8:	d2f2      	bcs.n	800ceb0 <ai_dict_decompress_f32+0x28>
 800ceca:	f1bc 0f00 	cmp.w	ip, #0
 800cece:	d01a      	beq.n	800cf06 <ai_dict_decompress_f32+0x7e>
 800ced0:	f100 0508 	add.w	r5, r0, #8
 800ced4:	1e4c      	subs	r4, r1, #1
 800ced6:	eb01 0608 	add.w	r6, r1, r8
 800ceda:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cede:	091b      	lsrs	r3, r3, #4
 800cee0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cee4:	42a6      	cmp	r6, r4
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f845 3c08 	str.w	r3, [r5, #-8]
 800ceec:	7823      	ldrb	r3, [r4, #0]
 800ceee:	f003 030f 	and.w	r3, r3, #15
 800cef2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cef6:	f105 0508 	add.w	r5, r5, #8
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f845 3c0c 	str.w	r3, [r5, #-12]
 800cf00:	d1eb      	bne.n	800ceda <ai_dict_decompress_f32+0x52>
 800cf02:	4461      	add	r1, ip
 800cf04:	4448      	add	r0, r9
 800cf06:	f1be 0f00 	cmp.w	lr, #0
 800cf0a:	d103      	bne.n	800cf14 <ai_dict_decompress_f32+0x8c>
 800cf0c:	4287      	cmp	r7, r0
 800cf0e:	d8dc      	bhi.n	800ceca <ai_dict_decompress_f32+0x42>
 800cf10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf14:	780b      	ldrb	r3, [r1, #0]
 800cf16:	091b      	lsrs	r3, r3, #4
 800cf18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf1c:	3101      	adds	r1, #1
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6003      	str	r3, [r0, #0]
 800cf22:	3004      	adds	r0, #4
 800cf24:	e7cf      	b.n	800cec6 <ai_dict_decompress_f32+0x3e>
 800cf26:	bf00      	nop

0800cf28 <forward_conv2d>:
 800cf28:	6983      	ldr	r3, [r0, #24]
 800cf2a:	881a      	ldrh	r2, [r3, #0]
 800cf2c:	2a00      	cmp	r2, #0
 800cf2e:	f000 87c7 	beq.w	800dec0 <forward_conv2d+0xf98>
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	6859      	ldr	r1, [r3, #4]
 800cf36:	b101      	cbz	r1, 800cf3a <forward_conv2d+0x12>
 800cf38:	6809      	ldr	r1, [r1, #0]
 800cf3a:	2a01      	cmp	r2, #1
 800cf3c:	f240 87bd 	bls.w	800deba <forward_conv2d+0xf92>
 800cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	ed2d 8b10 	vpush	{d8-d15}
 800cf48:	b0cb      	sub	sp, #300	; 0x12c
 800cf4a:	691c      	ldr	r4, [r3, #16]
 800cf4c:	af02      	add	r7, sp, #8
 800cf4e:	2c00      	cmp	r4, #0
 800cf50:	f000 87af 	beq.w	800deb2 <forward_conv2d+0xf8a>
 800cf54:	6824      	ldr	r4, [r4, #0]
 800cf56:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800cf5a:	2a02      	cmp	r2, #2
 800cf5c:	f000 87a4 	beq.w	800dea8 <forward_conv2d+0xf80>
 800cf60:	69dd      	ldr	r5, [r3, #28]
 800cf62:	2d00      	cmp	r5, #0
 800cf64:	f000 8799 	beq.w	800de9a <forward_conv2d+0xf72>
 800cf68:	f113 0218 	adds.w	r2, r3, #24
 800cf6c:	682c      	ldr	r4, [r5, #0]
 800cf6e:	d004      	beq.n	800cf7a <forward_conv2d+0x52>
 800cf70:	8b1b      	ldrh	r3, [r3, #24]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	f240 87a6 	bls.w	800dec4 <forward_conv2d+0xf9c>
 800cf78:	686a      	ldr	r2, [r5, #4]
 800cf7a:	68ab      	ldr	r3, [r5, #8]
 800cf7c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800cf80:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800cf84:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800cf88:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800cf8c:	68ce      	ldr	r6, [r1, #12]
 800cf8e:	69a1      	ldr	r1, [r4, #24]
 800cf90:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800cf94:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800cf98:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800cf9c:	f8de 1004 	ldr.w	r1, [lr, #4]
 800cfa0:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800cfa4:	f8de 100c 	ldr.w	r1, [lr, #12]
 800cfa8:	6479      	str	r1, [r7, #68]	; 0x44
 800cfaa:	f8de 1008 	ldr.w	r1, [lr, #8]
 800cfae:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800cfb2:	6871      	ldr	r1, [r6, #4]
 800cfb4:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800cfb8:	68f1      	ldr	r1, [r6, #12]
 800cfba:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800cfbe:	68b1      	ldr	r1, [r6, #8]
 800cfc0:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800cfc4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800cfc8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800cfcc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cfd0:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800cfd4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800cfd8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800cfda:	6889      	ldr	r1, [r1, #8]
 800cfdc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800cfe0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cfe2:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800cfe6:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800cfea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800cfec:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800cff0:	69c1      	ldr	r1, [r0, #28]
 800cff2:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800cff6:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 800cffa:	2a00      	cmp	r2, #0
 800cffc:	f000 8749 	beq.w	800de92 <forward_conv2d+0xf6a>
 800d000:	6992      	ldr	r2, [r2, #24]
 800d002:	6892      	ldr	r2, [r2, #8]
 800d004:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800d008:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d00c:	6992      	ldr	r2, [r2, #24]
 800d00e:	6892      	ldr	r2, [r2, #8]
 800d010:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d014:	4606      	mov	r6, r0
 800d016:	6a00      	ldr	r0, [r0, #32]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 872c 	beq.w	800de76 <forward_conv2d+0xf4e>
 800d01e:	699a      	ldr	r2, [r3, #24]
 800d020:	2a00      	cmp	r2, #0
 800d022:	f000 8594 	beq.w	800db4e <forward_conv2d+0xc26>
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d02e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800d032:	6893      	ldr	r3, [r2, #8]
 800d034:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d038:	f002 fefa 	bl	800fe30 <ai_array_get_byte_size>
 800d03c:	69a3      	ldr	r3, [r4, #24]
 800d03e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800d042:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800d04c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d04e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d052:	f3c3 5441 	ubfx	r4, r3, #21, #2
 800d056:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 800d05a:	fa1f f088 	uxth.w	r0, r8
 800d05e:	4125      	asrs	r5, r4
 800d060:	3801      	subs	r0, #1
 800d062:	1e4c      	subs	r4, r1, #1
 800d064:	fb04 1100 	mla	r1, r4, r0, r1
 800d068:	6439      	str	r1, [r7, #64]	; 0x40
 800d06a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800d06e:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800d410 <forward_conv2d+0x4e8>
 800d072:	fa1f f289 	uxth.w	r2, r9
 800d076:	3a01      	subs	r2, #1
 800d078:	1e48      	subs	r0, r1, #1
 800d07a:	fb00 1102 	mla	r1, r0, r2, r1
 800d07e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d082:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800d086:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800d08a:	4610      	mov	r0, r2
 800d08c:	2a00      	cmp	r2, #0
 800d08e:	bf08      	it	eq
 800d090:	4660      	moveq	r0, ip
 800d092:	2b04      	cmp	r3, #4
 800d094:	b2ad      	uxth	r5, r5
 800d096:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800d09a:	f000 8533 	beq.w	800db04 <forward_conv2d+0xbdc>
 800d09e:	2b08      	cmp	r3, #8
 800d0a0:	f000 8530 	beq.w	800db04 <forward_conv2d+0xbdc>
 800d0a4:	fa1f f38b 	uxth.w	r3, fp
 800d0a8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d0ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d0b0:	425b      	negs	r3, r3
 800d0b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d0b6:	2900      	cmp	r1, #0
 800d0b8:	f000 8242 	beq.w	800d540 <forward_conv2d+0x618>
 800d0bc:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800d0c0:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 800d0c4:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 800d40c <forward_conv2d+0x4e4>
 800d0c8:	fb00 f305 	mul.w	r3, r0, r5
 800d0cc:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 800d0d0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800d0d4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800d0d8:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 800d0dc:	663d      	str	r5, [r7, #96]	; 0x60
 800d0de:	fa0f f288 	sxth.w	r2, r8
 800d0e2:	fb03 f400 	mul.w	r4, r3, r0
 800d0e6:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800d0ea:	fa1f f18a 	uxth.w	r1, sl
 800d0ee:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d0f2:	67bc      	str	r4, [r7, #120]	; 0x78
 800d0f4:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800d0f8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800d0fc:	4249      	negs	r1, r1
 800d0fe:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800d102:	0092      	lsls	r2, r2, #2
 800d104:	0081      	lsls	r1, r0, #2
 800d106:	4605      	mov	r5, r0
 800d108:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800d10c:	fb04 f200 	mul.w	r2, r4, r0
 800d110:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800d114:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800d118:	fb01 fc00 	mul.w	ip, r1, r0
 800d11c:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800d120:	fb01 fc03 	mul.w	ip, r1, r3
 800d124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d126:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d134:	fa0f f689 	sxth.w	r6, r9
 800d138:	469c      	mov	ip, r3
 800d13a:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800d13e:	4633      	mov	r3, r6
 800d140:	fb0c f606 	mul.w	r6, ip, r6
 800d144:	677e      	str	r6, [r7, #116]	; 0x74
 800d146:	4666      	mov	r6, ip
 800d148:	fb04 f606 	mul.w	r6, r4, r6
 800d14c:	4686      	mov	lr, r0
 800d14e:	4620      	mov	r0, r4
 800d150:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800d154:	62be      	str	r6, [r7, #40]	; 0x28
 800d156:	fb01 f404 	mul.w	r4, r1, r4
 800d15a:	fb03 f605 	mul.w	r6, r3, r5
 800d15e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800d160:	66bc      	str	r4, [r7, #104]	; 0x68
 800d162:	460b      	mov	r3, r1
 800d164:	4604      	mov	r4, r0
 800d166:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800d16a:	627e      	str	r6, [r7, #36]	; 0x24
 800d16c:	fb05 f404 	mul.w	r4, r5, r4
 800d170:	617c      	str	r4, [r7, #20]
 800d172:	460c      	mov	r4, r1
 800d174:	fb04 f403 	mul.w	r4, r4, r3
 800d178:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800d17c:	65bc      	str	r4, [r7, #88]	; 0x58
 800d17e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800d182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d186:	fb01 f104 	mul.w	r1, r1, r4
 800d18a:	61b9      	str	r1, [r7, #24]
 800d18c:	0091      	lsls	r1, r2, #2
 800d18e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d192:	64b9      	str	r1, [r7, #72]	; 0x48
 800d194:	fb00 f202 	mul.w	r2, r0, r2
 800d198:	0081      	lsls	r1, r0, #2
 800d19a:	61f9      	str	r1, [r7, #28]
 800d19c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800d1a0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800d1a4:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800d1a8:	011a      	lsls	r2, r3, #4
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d1b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d1b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d1b8:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800d1bc:	2300      	movs	r3, #0
 800d1be:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d1c0:	607a      	str	r2, [r7, #4]
 800d1c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d1c4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800d1c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d1d0:	2900      	cmp	r1, #0
 800d1d2:	441a      	add	r2, r3
 800d1d4:	bfb4      	ite	lt
 800d1d6:	2100      	movlt	r1, #0
 800d1d8:	2300      	movge	r3, #0
 800d1da:	4282      	cmp	r2, r0
 800d1dc:	bf28      	it	cs
 800d1de:	4602      	movcs	r2, r0
 800d1e0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800d1e4:	2801      	cmp	r0, #1
 800d1e6:	f000 8320 	beq.w	800d82a <forward_conv2d+0x902>
 800d1ea:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800d1ee:	4281      	cmp	r1, r0
 800d1f0:	f000 81c3 	beq.w	800d57a <forward_conv2d+0x652>
 800d1f4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800d1f8:	2900      	cmp	r1, #0
 800d1fa:	f000 8182 	beq.w	800d502 <forward_conv2d+0x5da>
 800d1fe:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800d202:	fb93 f1f0 	sdiv	r1, r3, r0
 800d206:	fb00 3111 	mls	r1, r0, r1, r3
 800d20a:	1a41      	subs	r1, r0, r1
 800d20c:	1ad2      	subs	r2, r2, r3
 800d20e:	fb91 f5f0 	sdiv	r5, r1, r0
 800d212:	fb00 1515 	mls	r5, r0, r5, r1
 800d216:	1b52      	subs	r2, r2, r5
 800d218:	4601      	mov	r1, r0
 800d21a:	4402      	add	r2, r0
 800d21c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800d220:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 800d224:	f8c7 b020 	str.w	fp, [r7, #32]
 800d228:	4604      	mov	r4, r0
 800d22a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800d22e:	fbb4 f4f0 	udiv	r4, r4, r0
 800d232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d234:	3a01      	subs	r2, #1
 800d236:	fb92 f8f1 	sdiv	r8, r2, r1
 800d23a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d23e:	eba0 0c04 	sub.w	ip, r0, r4
 800d242:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800d246:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800d24a:	4614      	mov	r4, r2
 800d24c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800d250:	fbb4 f2f2 	udiv	r2, r4, r2
 800d254:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800d258:	657a      	str	r2, [r7, #84]	; 0x54
 800d25a:	441d      	add	r5, r3
 800d25c:	fb0e f000 	mul.w	r0, lr, r0
 800d260:	440b      	add	r3, r1
 800d262:	eba6 0608 	sub.w	r6, r6, r8
 800d266:	fb04 f505 	mul.w	r5, r4, r5
 800d26a:	3b01      	subs	r3, #1
 800d26c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800d270:	fb93 f3f4 	sdiv	r3, r3, r4
 800d274:	fb00 f406 	mul.w	r4, r0, r6
 800d278:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800d27c:	66fd      	str	r5, [r7, #108]	; 0x6c
 800d27e:	0091      	lsls	r1, r2, #2
 800d280:	fb00 f003 	mul.w	r0, r0, r3
 800d284:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800d288:	6538      	str	r0, [r7, #80]	; 0x50
 800d28a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d28e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800d292:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800d296:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800d29a:	1ac3      	subs	r3, r0, r3
 800d29c:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800d2a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2a4:	008b      	lsls	r3, r1, #2
 800d2a6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a8:	00d3      	lsls	r3, r2, #3
 800d2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d2b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d2b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d2bc:	2300      	movs	r3, #0
 800d2be:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800d2c2:	673b      	str	r3, [r7, #112]	; 0x70
 800d2c4:	46c2      	mov	sl, r8
 800d2c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d2ce:	eb03 0c02 	add.w	ip, r3, r2
 800d2d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f2c0 813b 	blt.w	800d552 <forward_conv2d+0x62a>
 800d2dc:	2000      	movs	r0, #0
 800d2de:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800d2e0:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2f0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d2fa:	440a      	add	r2, r1
 800d2fc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d300:	428b      	cmp	r3, r1
 800d302:	bf94      	ite	ls
 800d304:	ebc6 0303 	rsbls	r3, r6, r3
 800d308:	ebc6 0301 	rsbhi	r3, r6, r1
 800d30c:	4415      	add	r5, r2
 800d30e:	1a1b      	subs	r3, r3, r0
 800d310:	00a4      	lsls	r4, r4, #2
 800d312:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800d316:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800d31a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d31e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800d320:	4602      	mov	r2, r0
 800d322:	2800      	cmp	r0, #0
 800d324:	bf08      	it	eq
 800d326:	4662      	moveq	r2, ip
 800d328:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800d32c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800d330:	fb91 f1f0 	sdiv	r1, r1, r0
 800d334:	4429      	add	r1, r5
 800d336:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800d33a:	fb0e 5501 	mla	r5, lr, r1, r5
 800d33e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800d342:	4403      	add	r3, r0
 800d344:	fb01 6104 	mla	r1, r1, r4, r6
 800d348:	3b01      	subs	r3, #1
 800d34a:	fb93 f6f0 	sdiv	r6, r3, r0
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800d354:	fb06 3110 	mls	r1, r6, r0, r3
 800d358:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d35c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800d360:	4562      	cmp	r2, ip
 800d362:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d366:	bf08      	it	eq
 800d368:	eeb0 6a48 	vmoveq.f32	s12, s16
 800d36c:	1b9b      	subs	r3, r3, r6
 800d36e:	2800      	cmp	r0, #0
 800d370:	d076      	beq.n	800d460 <forward_conv2d+0x538>
 800d372:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d376:	fb0e f803 	mul.w	r8, lr, r3
 800d37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d37c:	fb00 fb01 	mul.w	fp, r0, r1
 800d380:	2b00      	cmp	r3, #0
 800d382:	d06d      	beq.n	800d460 <forward_conv2d+0x538>
 800d384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d388:	18d3      	adds	r3, r2, r3
 800d38a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d38e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d392:	1a9b      	subs	r3, r3, r2
 800d394:	633b      	str	r3, [r7, #48]	; 0x30
 800d396:	2300      	movs	r3, #0
 800d398:	667b      	str	r3, [r7, #100]	; 0x64
 800d39a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a0:	4413      	add	r3, r2
 800d3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d3b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d3b4:	ecf3 7a01 	vldmia	r3!, {s15}
 800d3b8:	f1ba 0f00 	cmp.w	sl, #0
 800d3bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d3c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d3c4:	f340 80c3 	ble.w	800d54e <forward_conv2d+0x626>
 800d3c8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800d3cc:	f04f 0c00 	mov.w	ip, #0
 800d3d0:	2e00      	cmp	r6, #0
 800d3d2:	dd1f      	ble.n	800d414 <forward_conv2d+0x4ec>
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	eb00 040e 	add.w	r4, r0, lr
 800d3da:	4284      	cmp	r4, r0
 800d3dc:	d910      	bls.n	800d400 <forward_conv2d+0x4d8>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	462a      	mov	r2, r5
 800d3e2:	ecb3 7a01 	vldmia	r3!, {s14}
 800d3e6:	ecf2 6a01 	vldmia	r2!, {s13}
 800d3ea:	429c      	cmp	r4, r3
 800d3ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d3f0:	d8f7      	bhi.n	800d3e2 <forward_conv2d+0x4ba>
 800d3f2:	43c3      	mvns	r3, r0
 800d3f4:	441c      	add	r4, r3
 800d3f6:	f024 0403 	bic.w	r4, r4, #3
 800d3fa:	3404      	adds	r4, #4
 800d3fc:	4425      	add	r5, r4
 800d3fe:	4420      	add	r0, r4
 800d400:	3101      	adds	r1, #1
 800d402:	428e      	cmp	r6, r1
 800d404:	4448      	add	r0, r9
 800d406:	d1e6      	bne.n	800d3d6 <forward_conv2d+0x4ae>
 800d408:	e004      	b.n	800d414 <forward_conv2d+0x4ec>
 800d40a:	bf00      	nop
 800d40c:	00000000 	.word	0x00000000
 800d410:	0800cb6d 	.word	0x0800cb6d
 800d414:	f10c 0c01 	add.w	ip, ip, #1
 800d418:	45e2      	cmp	sl, ip
 800d41a:	4458      	add	r0, fp
 800d41c:	4445      	add	r5, r8
 800d41e:	d1d7      	bne.n	800d3d0 <forward_conv2d+0x4a8>
 800d420:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d428:	441d      	add	r5, r3
 800d42a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d42e:	ece3 7a01 	vstmia	r3!, {s15}
 800d432:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d1b8      	bne.n	800d3b0 <forward_conv2d+0x488>
 800d43e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800d442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d446:	4472      	add	r2, lr
 800d448:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d44c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d44e:	1a52      	subs	r2, r2, r1
 800d450:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800d454:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800d458:	3301      	adds	r3, #1
 800d45a:	429a      	cmp	r2, r3
 800d45c:	667b      	str	r3, [r7, #100]	; 0x64
 800d45e:	d19c      	bne.n	800d39a <forward_conv2d+0x472>
 800d460:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800d464:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d46a:	4608      	mov	r0, r1
 800d46c:	4410      	add	r0, r2
 800d46e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800d472:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800d476:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800d47a:	4401      	add	r1, r0
 800d47c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800d480:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800d484:	1a8a      	subs	r2, r1, r2
 800d486:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d48a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d48e:	3301      	adds	r3, #1
 800d490:	429a      	cmp	r2, r3
 800d492:	673b      	str	r3, [r7, #112]	; 0x70
 800d494:	f47f af17 	bne.w	800d2c6 <forward_conv2d+0x39e>
 800d498:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800d49c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d4a0:	b37b      	cbz	r3, 800d502 <forward_conv2d+0x5da>
 800d4a2:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800d4a6:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800d4aa:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 800d4ae:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 800d4b2:	2500      	movs	r5, #0
 800d4b4:	46a2      	mov	sl, r4
 800d4b6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d4ba:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800d4be:	f8c2 a008 	str.w	sl, [r2, #8]
 800d4c2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d4c6:	4633      	mov	r3, r6
 800d4c8:	4641      	mov	r1, r8
 800d4ca:	4416      	add	r6, r2
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d4d2:	47a0      	blx	r4
 800d4d4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800d4d8:	4492      	add	sl, r2
 800d4da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800d4de:	eba6 0309 	sub.w	r3, r6, r9
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	bfa8      	it	ge
 800d4e6:	464e      	movge	r6, r9
 800d4e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d4ec:	3501      	adds	r5, #1
 800d4ee:	42ab      	cmp	r3, r5
 800d4f0:	d1e1      	bne.n	800d4b6 <forward_conv2d+0x58e>
 800d4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4f6:	69ba      	ldr	r2, [r7, #24]
 800d4f8:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 800d4fc:	4413      	add	r3, r2
 800d4fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d506:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	68da      	ldr	r2, [r3, #12]
 800d50c:	609a      	str	r2, [r3, #8]
 800d50e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d514:	4610      	mov	r0, r2
 800d516:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d51a:	4418      	add	r0, r3
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d528:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800d52c:	4413      	add	r3, r2
 800d52e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d536:	3101      	adds	r1, #1
 800d538:	428b      	cmp	r3, r1
 800d53a:	67f9      	str	r1, [r7, #124]	; 0x7c
 800d53c:	f47f ae42 	bne.w	800d1c4 <forward_conv2d+0x29c>
 800d540:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800d544:	46bd      	mov	sp, r7
 800d546:	ecbd 8b10 	vpop	{d8-d15}
 800d54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54e:	461a      	mov	r2, r3
 800d550:	e768      	b.n	800d424 <forward_conv2d+0x4fc>
 800d552:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d556:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800d55a:	fb90 f3f2 	sdiv	r3, r0, r2
 800d55e:	fb02 0313 	mls	r3, r2, r3, r0
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	4605      	mov	r5, r0
 800d566:	fb93 f0f2 	sdiv	r0, r3, r2
 800d56a:	fb02 3010 	mls	r0, r2, r0, r3
 800d56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d570:	462e      	mov	r6, r5
 800d572:	18c4      	adds	r4, r0, r3
 800d574:	eb02 0805 	add.w	r8, r2, r5
 800d578:	e6b6      	b.n	800d2e8 <forward_conv2d+0x3c0>
 800d57a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d57c:	2901      	cmp	r1, #1
 800d57e:	f47f ae39 	bne.w	800d1f4 <forward_conv2d+0x2cc>
 800d582:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800d586:	2900      	cmp	r1, #0
 800d588:	d0bb      	beq.n	800d502 <forward_conv2d+0x5da>
 800d58a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800d58e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800d592:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800d596:	fbb1 f5f0 	udiv	r5, r1, r0
 800d59a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800d59e:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800d5a2:	633d      	str	r5, [r7, #48]	; 0x30
 800d5a4:	1ad2      	subs	r2, r2, r3
 800d5a6:	1a8c      	subs	r4, r1, r2
 800d5a8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d5ac:	00b2      	lsls	r2, r6, #2
 800d5ae:	fb02 f204 	mul.w	r2, r2, r4
 800d5b2:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 800d5b6:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800d5ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5bc:	0082      	lsls	r2, r0, #2
 800d5be:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d5c0:	00ca      	lsls	r2, r1, #3
 800d5c2:	603a      	str	r2, [r7, #0]
 800d5c4:	00aa      	lsls	r2, r5, #2
 800d5c6:	60ba      	str	r2, [r7, #8]
 800d5c8:	fb03 f206 	mul.w	r2, r3, r6
 800d5cc:	673a      	str	r2, [r7, #112]	; 0x70
 800d5ce:	69fa      	ldr	r2, [r7, #28]
 800d5d0:	fb02 f303 	mul.w	r3, r2, r3
 800d5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d5de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d5e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d5ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d5f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f2c0 8110 	blt.w	800d81e <forward_conv2d+0x8f6>
 800d5fe:	2100      	movs	r1, #0
 800d600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d602:	460a      	mov	r2, r1
 800d604:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800d608:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800d60c:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800d610:	4420      	add	r0, r4
 800d612:	4408      	add	r0, r1
 800d614:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800d618:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800d61c:	190c      	adds	r4, r1, r4
 800d61e:	42ac      	cmp	r4, r5
 800d620:	bf28      	it	cs
 800d622:	462c      	movcs	r4, r5
 800d624:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800d628:	0080      	lsls	r0, r0, #2
 800d62a:	1aa4      	subs	r4, r4, r2
 800d62c:	2d00      	cmp	r5, #0
 800d62e:	f000 80e7 	beq.w	800d800 <forward_conv2d+0x8d8>
 800d632:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800d636:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 800d63a:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800d63e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d642:	42b5      	cmp	r5, r6
 800d644:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800d648:	eba3 0204 	sub.w	r2, r3, r4
 800d64c:	eba1 0104 	sub.w	r1, r1, r4
 800d650:	bf08      	it	eq
 800d652:	eef0 3a48 	vmoveq.f32	s7, s16
 800d656:	462b      	mov	r3, r5
 800d658:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800d65a:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800d65e:	4428      	add	r0, r5
 800d660:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800d664:	fb05 6e00 	mla	lr, r5, r0, r6
 800d668:	eb0e 000b 	add.w	r0, lr, fp
 800d66c:	4586      	cmp	lr, r0
 800d66e:	6238      	str	r0, [r7, #32]
 800d670:	f080 80a5 	bcs.w	800d7be <forward_conv2d+0x896>
 800d674:	0092      	lsls	r2, r2, #2
 800d676:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d67c:	fb0b f101 	mul.w	r1, fp, r1
 800d680:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d684:	f024 0803 	bic.w	r8, r4, #3
 800d688:	2a00      	cmp	r2, #0
 800d68a:	f000 8098 	beq.w	800d7be <forward_conv2d+0x896>
 800d68e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800d692:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d694:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800d698:	0892      	lsrs	r2, r2, #2
 800d69a:	3201      	adds	r2, #1
 800d69c:	4401      	add	r1, r0
 800d69e:	fb02 f00a 	mul.w	r0, r2, sl
 800d6a2:	6578      	str	r0, [r7, #84]	; 0x54
 800d6a4:	0110      	lsls	r0, r2, #4
 800d6a6:	0092      	lsls	r2, r2, #2
 800d6a8:	653a      	str	r2, [r7, #80]	; 0x50
 800d6aa:	1aca      	subs	r2, r1, r3
 800d6ac:	613a      	str	r2, [r7, #16]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	6678      	str	r0, [r7, #100]	; 0x64
 800d6b2:	4413      	add	r3, r2
 800d6b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6be:	4413      	add	r3, r2
 800d6c0:	60fb      	str	r3, [r7, #12]
 800d6c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6d0:	ecf3 6a01 	vldmia	r3!, {s13}
 800d6d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d6e2:	dd57      	ble.n	800d794 <forward_conv2d+0x86c>
 800d6e4:	4676      	mov	r6, lr
 800d6e6:	f04f 0c00 	mov.w	ip, #0
 800d6ea:	f1b8 0f00 	cmp.w	r8, #0
 800d6ee:	f340 8085 	ble.w	800d7fc <forward_conv2d+0x8d4>
 800d6f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d6f6:	f109 0310 	add.w	r3, r9, #16
 800d6fa:	18b1      	adds	r1, r6, r2
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	4632      	mov	r2, r6
 800d700:	eb02 050b 	add.w	r5, r2, fp
 800d704:	ed95 7a00 	vldr	s14, [r5]
 800d708:	ed53 7a03 	vldr	s15, [r3, #-12]
 800d70c:	ed92 4a00 	vldr	s8, [r2]
 800d710:	ed53 4a04 	vldr	s9, [r3, #-16]
 800d714:	ed91 5a00 	vldr	s10, [r1]
 800d718:	ed53 5a02 	vldr	s11, [r3, #-8]
 800d71c:	ed13 6a01 	vldr	s12, [r3, #-4]
 800d720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d724:	eb01 050b 	add.w	r5, r1, fp
 800d728:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d72c:	3004      	adds	r0, #4
 800d72e:	4540      	cmp	r0, r8
 800d730:	ed95 7a00 	vldr	s14, [r5]
 800d734:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d738:	4452      	add	r2, sl
 800d73a:	4451      	add	r1, sl
 800d73c:	f103 0310 	add.w	r3, r3, #16
 800d740:	eee7 7a06 	vfma.f32	s15, s14, s12
 800d744:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d748:	dbda      	blt.n	800d700 <forward_conv2d+0x7d8>
 800d74a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d74c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d74e:	441e      	add	r6, r3
 800d750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d752:	4499      	add	r9, r3
 800d754:	42a0      	cmp	r0, r4
 800d756:	da11      	bge.n	800d77c <forward_conv2d+0x854>
 800d758:	4602      	mov	r2, r0
 800d75a:	4633      	mov	r3, r6
 800d75c:	4649      	mov	r1, r9
 800d75e:	edd3 7a00 	vldr	s15, [r3]
 800d762:	ecb1 7a01 	vldmia	r1!, {s14}
 800d766:	3201      	adds	r2, #1
 800d768:	42a2      	cmp	r2, r4
 800d76a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d76e:	445b      	add	r3, fp
 800d770:	d1f5      	bne.n	800d75e <forward_conv2d+0x836>
 800d772:	1a20      	subs	r0, r4, r0
 800d774:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800d778:	fb00 660b 	mla	r6, r0, fp, r6
 800d77c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d780:	441e      	add	r6, r3
 800d782:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d786:	4499      	add	r9, r3
 800d788:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d78c:	f10c 0c01 	add.w	ip, ip, #1
 800d790:	4563      	cmp	r3, ip
 800d792:	d1aa      	bne.n	800d6ea <forward_conv2d+0x7c2>
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d796:	4499      	add	r9, r3
 800d798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d79a:	ece3 6a01 	vstmia	r3!, {s13}
 800d79e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7a0:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d191      	bne.n	800d6cc <forward_conv2d+0x7a4>
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	1a9b      	subs	r3, r3, r2
 800d7ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d7b2:	6a3b      	ldr	r3, [r7, #32]
 800d7b4:	f10e 0e04 	add.w	lr, lr, #4
 800d7b8:	459e      	cmp	lr, r3
 800d7ba:	f4ff af7d 	bcc.w	800d6b8 <forward_conv2d+0x790>
 800d7be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d7c2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800d7c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7ca:	440a      	add	r2, r1
 800d7cc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800d7d0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800d7d4:	4608      	mov	r0, r1
 800d7d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d7da:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800d7de:	4410      	add	r0, r2
 800d7e0:	1a8a      	subs	r2, r1, r2
 800d7e2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800d7e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d7ea:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d7f6:	f47f aefd 	bne.w	800d5f4 <forward_conv2d+0x6cc>
 800d7fa:	e64f      	b.n	800d49c <forward_conv2d+0x574>
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	e7a9      	b.n	800d754 <forward_conv2d+0x82c>
 800d800:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800d804:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800d808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d80c:	1b19      	subs	r1, r3, r4
 800d80e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d812:	eef0 3a48 	vmov.f32	s7, s16
 800d816:	1b1a      	subs	r2, r3, r4
 800d818:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d81c:	e71c      	b.n	800d658 <forward_conv2d+0x730>
 800d81e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800d822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d824:	460a      	mov	r2, r1
 800d826:	440b      	add	r3, r1
 800d828:	e6ec      	b.n	800d604 <forward_conv2d+0x6dc>
 800d82a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d82c:	2801      	cmp	r0, #1
 800d82e:	f47f ace1 	bne.w	800d1f4 <forward_conv2d+0x2cc>
 800d832:	1ad2      	subs	r2, r2, r3
 800d834:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d836:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800d83a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800d83e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d840:	fb00 4101 	mla	r1, r0, r1, r4
 800d844:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800d848:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800d84c:	f080 8191 	bcs.w	800db72 <forward_conv2d+0xc4a>
 800d850:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d854:	2a00      	cmp	r2, #0
 800d856:	f43f ae21 	beq.w	800d49c <forward_conv2d+0x574>
 800d85a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d85c:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 800d860:	fb02 f303 	mul.w	r3, r2, r3
 800d864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d866:	667b      	str	r3, [r7, #100]	; 0x64
 800d868:	1a9b      	subs	r3, r3, r2
 800d86a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d86c:	188b      	adds	r3, r1, r2
 800d86e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d870:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d874:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d87c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d888:	2300      	movs	r3, #0
 800d88a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d88e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 8133 	beq.w	800dafe <forward_conv2d+0xbd6>
 800d898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d89c:	ed93 6a00 	vldr	s12, [r3]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d8a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f000 8101 	beq.w	800dab2 <forward_conv2d+0xb8a>
 800d8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d8b8:	eb03 0802 	add.w	r8, r3, r2
 800d8bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8cc:	673b      	str	r3, [r7, #112]	; 0x70
 800d8ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d8d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d8d6:	f04f 0b00 	mov.w	fp, #0
 800d8da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f2c0 8104 	blt.w	800daec <forward_conv2d+0xbc4>
 800d8e4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800d8e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800d8f0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800d8f4:	eb02 0c04 	add.w	ip, r2, r4
 800d8f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800d8fc:	4540      	cmp	r0, r8
 800d8fe:	bf94      	ite	ls
 800d900:	ebc3 0300 	rsbls	r3, r3, r0
 800d904:	ebc3 0308 	rsbhi	r3, r3, r8
 800d908:	eba2 0903 	sub.w	r9, r2, r3
 800d90c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800d910:	1ac4      	subs	r4, r0, r3
 800d912:	fb03 f302 	mul.w	r3, r3, r2
 800d916:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d91a:	2a00      	cmp	r2, #0
 800d91c:	f340 80e3 	ble.w	800dae6 <forward_conv2d+0xbbe>
 800d920:	f023 050f 	bic.w	r5, r3, #15
 800d924:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800d928:	1e68      	subs	r0, r5, #1
 800d92a:	0900      	lsrs	r0, r0, #4
 800d92c:	3001      	adds	r0, #1
 800d92e:	fb06 f204 	mul.w	r2, r6, r4
 800d932:	657a      	str	r2, [r7, #84]	; 0x54
 800d934:	0102      	lsls	r2, r0, #4
 800d936:	653a      	str	r2, [r7, #80]	; 0x50
 800d938:	fb06 f909 	mul.w	r9, r6, r9
 800d93c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800d940:	eef0 6a46 	vmov.f32	s13, s12
 800d944:	f04f 0e00 	mov.w	lr, #0
 800d948:	4662      	mov	r2, ip
 800d94a:	2d00      	cmp	r5, #0
 800d94c:	f340 80c9 	ble.w	800dae2 <forward_conv2d+0xbba>
 800d950:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800d954:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800d958:	2600      	movs	r6, #0
 800d95a:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800d95e:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800d962:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800d966:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800d96a:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800d96e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800d972:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800d976:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800d97a:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800d97e:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800d982:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800d986:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800d98a:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800d98e:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800d992:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800d996:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800d99a:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800d99e:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800d9a2:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800d9a6:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800d9aa:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800d9ae:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800d9b2:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800d9b6:	ed50 3a04 	vldr	s7, [r0, #-16]
 800d9ba:	ed14 4a04 	vldr	s8, [r4, #-16]
 800d9be:	ed50 4a03 	vldr	s9, [r0, #-12]
 800d9c2:	ed14 5a03 	vldr	s10, [r4, #-12]
 800d9c6:	ed50 5a02 	vldr	s11, [r0, #-8]
 800d9ca:	ed14 7a02 	vldr	s14, [r4, #-8]
 800d9ce:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800d9d2:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800d9d6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800d9da:	3610      	adds	r6, #16
 800d9dc:	42ae      	cmp	r6, r5
 800d9de:	ed14 fa01 	vldr	s30, [r4, #-4]
 800d9e2:	ed50 ea01 	vldr	s29, [r0, #-4]
 800d9e6:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800d9ea:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800d9ee:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800d9f2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800d9f6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800d9fa:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800d9fe:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800da02:	eee9 7a89 	vfma.f32	s15, s19, s18
 800da06:	eee8 7a80 	vfma.f32	s15, s17, s0
 800da0a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800da0e:	eee1 7a82 	vfma.f32	s15, s3, s4
 800da12:	eee2 7a83 	vfma.f32	s15, s5, s6
 800da16:	eee3 7a84 	vfma.f32	s15, s7, s8
 800da1a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800da1e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800da22:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800da26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800da2a:	db96      	blt.n	800d95a <forward_conv2d+0xa32>
 800da2c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800da2e:	4451      	add	r1, sl
 800da30:	4452      	add	r2, sl
 800da32:	4283      	cmp	r3, r0
 800da34:	dd0f      	ble.n	800da56 <forward_conv2d+0xb2e>
 800da36:	4604      	mov	r4, r0
 800da38:	468c      	mov	ip, r1
 800da3a:	4616      	mov	r6, r2
 800da3c:	ecb6 7a01 	vldmia	r6!, {s14}
 800da40:	ecfc 7a01 	vldmia	ip!, {s15}
 800da44:	3401      	adds	r4, #1
 800da46:	42a3      	cmp	r3, r4
 800da48:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da4c:	d1f6      	bne.n	800da3c <forward_conv2d+0xb14>
 800da4e:	1a18      	subs	r0, r3, r0
 800da50:	0080      	lsls	r0, r0, #2
 800da52:	4402      	add	r2, r0
 800da54:	4401      	add	r1, r0
 800da56:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800da58:	4402      	add	r2, r0
 800da5a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800da5e:	f10e 0e01 	add.w	lr, lr, #1
 800da62:	4570      	cmp	r0, lr
 800da64:	4449      	add	r1, r9
 800da66:	f47f af70 	bne.w	800d94a <forward_conv2d+0xa22>
 800da6a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800da6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da70:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800da74:	edc3 6a00 	vstr	s13, [r3]
 800da78:	4608      	mov	r0, r1
 800da7a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800da7e:	440b      	add	r3, r1
 800da80:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800da84:	673b      	str	r3, [r7, #112]	; 0x70
 800da86:	4410      	add	r0, r2
 800da88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da8a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800da8e:	4608      	mov	r0, r1
 800da90:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800da94:	4418      	add	r0, r3
 800da96:	1acb      	subs	r3, r1, r3
 800da98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800da9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800daa0:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800daa4:	f10b 0b01 	add.w	fp, fp, #1
 800daa8:	455b      	cmp	r3, fp
 800daaa:	eba8 0802 	sub.w	r8, r8, r2
 800daae:	f47f af14 	bne.w	800d8da <forward_conv2d+0x9b2>
 800dab2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800dab6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dabc:	440a      	add	r2, r1
 800dabe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800dac2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dac6:	3204      	adds	r2, #4
 800dac8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800dacc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800dad0:	3301      	adds	r3, #1
 800dad2:	429a      	cmp	r2, r3
 800dad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dad8:	f47f aed9 	bne.w	800d88e <forward_conv2d+0x966>
 800dadc:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 800dae0:	e4dc      	b.n	800d49c <forward_conv2d+0x574>
 800dae2:	2000      	movs	r0, #0
 800dae4:	e7a5      	b.n	800da32 <forward_conv2d+0xb0a>
 800dae6:	eef0 6a46 	vmov.f32	s13, s12
 800daea:	e7be      	b.n	800da6a <forward_conv2d+0xb42>
 800daec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daf0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800daf4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800daf8:	eba8 0303 	sub.w	r3, r8, r3
 800dafc:	e6f6      	b.n	800d8ec <forward_conv2d+0x9c4>
 800dafe:	eeb0 6a48 	vmov.f32	s12, s16
 800db02:	e6d0      	b.n	800d8a6 <forward_conv2d+0x97e>
 800db04:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800db08:	68ca      	ldr	r2, [r1, #12]
 800db0a:	2a00      	cmp	r2, #0
 800db0c:	f43f aaca 	beq.w	800d0a4 <forward_conv2d+0x17c>
 800db10:	69b3      	ldr	r3, [r6, #24]
 800db12:	8818      	ldrh	r0, [r3, #0]
 800db14:	2803      	cmp	r0, #3
 800db16:	f240 819f 	bls.w	800de58 <forward_conv2d+0xf30>
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1e:	b32b      	cbz	r3, 800db6c <forward_conv2d+0xc44>
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	b31b      	cbz	r3, 800db6c <forward_conv2d+0xc44>
 800db24:	699b      	ldr	r3, [r3, #24]
 800db26:	6889      	ldr	r1, [r1, #8]
 800db28:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800db32:	9000      	str	r0, [sp, #0]
 800db34:	462b      	mov	r3, r5
 800db36:	4620      	mov	r0, r4
 800db38:	f7ff f9a6 	bl	800ce88 <ai_dict_decompress_f32>
 800db3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db40:	2c00      	cmp	r4, #0
 800db42:	bf18      	it	ne
 800db44:	4623      	movne	r3, r4
 800db46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800db4a:	f7ff baab 	b.w	800d0a4 <forward_conv2d+0x17c>
 800db4e:	2800      	cmp	r0, #0
 800db50:	f000 8185 	beq.w	800de5e <forward_conv2d+0xf36>
 800db54:	6883      	ldr	r3, [r0, #8]
 800db56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800db5a:	2301      	movs	r3, #1
 800db5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800db60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800db64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800db68:	f7ff ba6d 	b.w	800d046 <forward_conv2d+0x11e>
 800db6c:	2300      	movs	r3, #0
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	deff      	udf	#255	; 0xff
 800db72:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800db76:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 800db7a:	320a      	adds	r2, #10
 800db7c:	f022 0207 	bic.w	r2, r2, #7
 800db80:	ebad 0d02 	sub.w	sp, sp, r2
 800db84:	aa02      	add	r2, sp, #8
 800db86:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800db8a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800db8e:	2a00      	cmp	r2, #0
 800db90:	f000 814d 	beq.w	800de2e <forward_conv2d+0xf06>
 800db94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db96:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800db9a:	fb02 f303 	mul.w	r3, r2, r3
 800db9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dba0:	657b      	str	r3, [r7, #84]	; 0x54
 800dba2:	1a9b      	subs	r3, r3, r2
 800dba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dba6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dbaa:	4413      	add	r3, r2
 800dbac:	637b      	str	r3, [r7, #52]	; 0x34
 800dbae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dbb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dbba:	673b      	str	r3, [r7, #112]	; 0x70
 800dbbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dbca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbcc:	b13b      	cbz	r3, 800dbde <forward_conv2d+0xcb6>
 800dbce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dbd2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800dbd6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800dbda:	f002 f9ad 	bl	800ff38 <memcpy>
 800dbde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f000 8135 	beq.w	800de52 <forward_conv2d+0xf2a>
 800dbe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbea:	ed93 6a00 	vldr	s12, [r3]
 800dbee:	3304      	adds	r3, #4
 800dbf0:	673b      	str	r3, [r7, #112]	; 0x70
 800dbf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 8101 	beq.w	800ddfe <forward_conv2d+0xed6>
 800dbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dc04:	eb03 0802 	add.w	r8, r3, r2
 800dc08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dc14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dc1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dc22:	f04f 0b00 	mov.w	fp, #0
 800dc26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f2c0 8108 	blt.w	800de40 <forward_conv2d+0xf18>
 800dc30:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800dc34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc36:	2300      	movs	r3, #0
 800dc38:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800dc3c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800dc40:	eb02 0c04 	add.w	ip, r2, r4
 800dc44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800dc48:	4540      	cmp	r0, r8
 800dc4a:	bf94      	ite	ls
 800dc4c:	ebc3 0300 	rsbls	r3, r3, r0
 800dc50:	ebc3 0308 	rsbhi	r3, r3, r8
 800dc54:	eba2 0903 	sub.w	r9, r2, r3
 800dc58:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800dc5c:	1ac4      	subs	r4, r0, r3
 800dc5e:	fb03 f302 	mul.w	r3, r3, r2
 800dc62:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800dc66:	2a00      	cmp	r2, #0
 800dc68:	f340 80e7 	ble.w	800de3a <forward_conv2d+0xf12>
 800dc6c:	f023 050f 	bic.w	r5, r3, #15
 800dc70:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800dc74:	1e68      	subs	r0, r5, #1
 800dc76:	0900      	lsrs	r0, r0, #4
 800dc78:	3001      	adds	r0, #1
 800dc7a:	fb06 f204 	mul.w	r2, r6, r4
 800dc7e:	653a      	str	r2, [r7, #80]	; 0x50
 800dc80:	0102      	lsls	r2, r0, #4
 800dc82:	633a      	str	r2, [r7, #48]	; 0x30
 800dc84:	fb06 f909 	mul.w	r9, r6, r9
 800dc88:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800dc8c:	eef0 6a46 	vmov.f32	s13, s12
 800dc90:	f04f 0e00 	mov.w	lr, #0
 800dc94:	4662      	mov	r2, ip
 800dc96:	2d00      	cmp	r5, #0
 800dc98:	f340 80cd 	ble.w	800de36 <forward_conv2d+0xf0e>
 800dc9c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800dca0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800dca4:	2600      	movs	r6, #0
 800dca6:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800dcaa:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800dcae:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800dcb2:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800dcb6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800dcba:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800dcbe:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800dcc2:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 800dcc6:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800dcca:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 800dcce:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 800dcd2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800dcd6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800dcda:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800dcde:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800dce2:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800dce6:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800dcea:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800dcee:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800dcf2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800dcf6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800dcfa:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800dcfe:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800dd02:	ed54 3a04 	vldr	s7, [r4, #-16]
 800dd06:	ed10 4a04 	vldr	s8, [r0, #-16]
 800dd0a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800dd0e:	ed14 5a03 	vldr	s10, [r4, #-12]
 800dd12:	ed54 5a02 	vldr	s11, [r4, #-8]
 800dd16:	ed10 7a02 	vldr	s14, [r0, #-8]
 800dd1a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800dd1e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800dd22:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800dd26:	3610      	adds	r6, #16
 800dd28:	42b5      	cmp	r5, r6
 800dd2a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800dd2e:	ed50 ea01 	vldr	s29, [r0, #-4]
 800dd32:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800dd36:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800dd3a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800dd3e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800dd42:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800dd46:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800dd4a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800dd4e:	eee9 7a89 	vfma.f32	s15, s19, s18
 800dd52:	eee8 7a80 	vfma.f32	s15, s17, s0
 800dd56:	eee0 7a81 	vfma.f32	s15, s1, s2
 800dd5a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800dd5e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800dd62:	eee3 7a84 	vfma.f32	s15, s7, s8
 800dd66:	eee4 7a85 	vfma.f32	s15, s9, s10
 800dd6a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800dd6e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800dd72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dd76:	dc96      	bgt.n	800dca6 <forward_conv2d+0xd7e>
 800dd78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd7a:	4451      	add	r1, sl
 800dd7c:	4452      	add	r2, sl
 800dd7e:	4283      	cmp	r3, r0
 800dd80:	dd0f      	ble.n	800dda2 <forward_conv2d+0xe7a>
 800dd82:	4604      	mov	r4, r0
 800dd84:	468c      	mov	ip, r1
 800dd86:	4616      	mov	r6, r2
 800dd88:	ecb6 7a01 	vldmia	r6!, {s14}
 800dd8c:	ecfc 7a01 	vldmia	ip!, {s15}
 800dd90:	3401      	adds	r4, #1
 800dd92:	42a3      	cmp	r3, r4
 800dd94:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dd98:	d1f6      	bne.n	800dd88 <forward_conv2d+0xe60>
 800dd9a:	1a18      	subs	r0, r3, r0
 800dd9c:	0080      	lsls	r0, r0, #2
 800dd9e:	4402      	add	r2, r0
 800dda0:	4401      	add	r1, r0
 800dda2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dda4:	4402      	add	r2, r0
 800dda6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ddaa:	f10e 0e01 	add.w	lr, lr, #1
 800ddae:	4570      	cmp	r0, lr
 800ddb0:	4449      	add	r1, r9
 800ddb2:	f47f af70 	bne.w	800dc96 <forward_conv2d+0xd6e>
 800ddb6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800ddba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddbc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ddc0:	edc3 6a00 	vstr	s13, [r3]
 800ddc4:	4608      	mov	r0, r1
 800ddc6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800ddca:	440b      	add	r3, r1
 800ddcc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ddd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ddd2:	4410      	add	r0, r2
 800ddd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddd6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800ddda:	4608      	mov	r0, r1
 800dddc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800dde0:	4418      	add	r0, r3
 800dde2:	1acb      	subs	r3, r1, r3
 800dde4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dde8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ddec:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800ddf0:	f10b 0b01 	add.w	fp, fp, #1
 800ddf4:	455b      	cmp	r3, fp
 800ddf6:	eba8 0802 	sub.w	r8, r8, r2
 800ddfa:	f47f af14 	bne.w	800dc26 <forward_conv2d+0xcfe>
 800ddfe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800de02:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800de06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de0a:	440a      	add	r2, r1
 800de0c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800de10:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800de14:	3204      	adds	r2, #4
 800de16:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800de1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800de1e:	3301      	adds	r3, #1
 800de20:	429a      	cmp	r2, r3
 800de22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800de26:	f47f aed0 	bne.w	800dbca <forward_conv2d+0xca2>
 800de2a:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800de2e:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800de32:	f7ff bb33 	b.w	800d49c <forward_conv2d+0x574>
 800de36:	2000      	movs	r0, #0
 800de38:	e7a1      	b.n	800dd7e <forward_conv2d+0xe56>
 800de3a:	eef0 6a46 	vmov.f32	s13, s12
 800de3e:	e7ba      	b.n	800ddb6 <forward_conv2d+0xe8e>
 800de40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800de48:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800de4c:	eba8 0303 	sub.w	r3, r8, r3
 800de50:	e6f2      	b.n	800dc38 <forward_conv2d+0xd10>
 800de52:	eeb0 6a48 	vmov.f32	s12, s16
 800de56:	e6cc      	b.n	800dbf2 <forward_conv2d+0xcca>
 800de58:	2300      	movs	r3, #0
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	deff      	udf	#255	; 0xff
 800de5e:	4603      	mov	r3, r0
 800de60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800de64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800de68:	2301      	movs	r3, #1
 800de6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800de6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800de72:	f7ff b8e8 	b.w	800d046 <forward_conv2d+0x11e>
 800de76:	2800      	cmp	r0, #0
 800de78:	d0f2      	beq.n	800de60 <forward_conv2d+0xf38>
 800de7a:	6882      	ldr	r2, [r0, #8]
 800de7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800de80:	2301      	movs	r3, #1
 800de82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800de86:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800de8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800de8e:	f7ff b8da 	b.w	800d046 <forward_conv2d+0x11e>
 800de92:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800de96:	f7ff b8b7 	b.w	800d008 <forward_conv2d+0xe0>
 800de9a:	3318      	adds	r3, #24
 800de9c:	d007      	beq.n	800deae <forward_conv2d+0xf86>
 800de9e:	462a      	mov	r2, r5
 800dea0:	462c      	mov	r4, r5
 800dea2:	462b      	mov	r3, r5
 800dea4:	f7ff b86a 	b.w	800cf7c <forward_conv2d+0x54>
 800dea8:	2300      	movs	r3, #0
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	deff      	udf	#255	; 0xff
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	deff      	udf	#255	; 0xff
 800deb2:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800deb6:	f7ff b850 	b.w	800cf5a <forward_conv2d+0x32>
 800deba:	2300      	movs	r3, #0
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	deff      	udf	#255	; 0xff
 800dec0:	6853      	ldr	r3, [r2, #4]
 800dec2:	deff      	udf	#255	; 0xff
 800dec4:	2200      	movs	r2, #0
 800dec6:	f7ff b858 	b.w	800cf7a <forward_conv2d+0x52>
 800deca:	bf00      	nop

0800decc <forward_conv2d_nl_pool>:
 800decc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded0:	ed2d 8b10 	vpush	{d8-d15}
 800ded4:	b0e1      	sub	sp, #388	; 0x184
 800ded6:	6983      	ldr	r3, [r0, #24]
 800ded8:	881e      	ldrh	r6, [r3, #0]
 800deda:	af0a      	add	r7, sp, #40	; 0x28
 800dedc:	2e00      	cmp	r6, #0
 800dede:	f000 859b 	beq.w	800ea18 <forward_conv2d_nl_pool+0xb4c>
 800dee2:	6859      	ldr	r1, [r3, #4]
 800dee4:	684a      	ldr	r2, [r1, #4]
 800dee6:	2a00      	cmp	r2, #0
 800dee8:	f000 8593 	beq.w	800ea12 <forward_conv2d_nl_pool+0xb46>
 800deec:	f8d2 c000 	ldr.w	ip, [r2]
 800def0:	2e01      	cmp	r6, #1
 800def2:	f240 858b 	bls.w	800ea0c <forward_conv2d_nl_pool+0xb40>
 800def6:	690a      	ldr	r2, [r1, #16]
 800def8:	2a00      	cmp	r2, #0
 800defa:	f000 8582 	beq.w	800ea02 <forward_conv2d_nl_pool+0xb36>
 800defe:	f8d2 9000 	ldr.w	r9, [r2]
 800df02:	2e02      	cmp	r6, #2
 800df04:	f000 8582 	beq.w	800ea0c <forward_conv2d_nl_pool+0xb40>
 800df08:	69cd      	ldr	r5, [r1, #28]
 800df0a:	2d00      	cmp	r5, #0
 800df0c:	f000 8571 	beq.w	800e9f2 <forward_conv2d_nl_pool+0xb26>
 800df10:	682a      	ldr	r2, [r5, #0]
 800df12:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800df16:	f111 0218 	adds.w	r2, r1, #24
 800df1a:	d004      	beq.n	800df26 <forward_conv2d_nl_pool+0x5a>
 800df1c:	8b0a      	ldrh	r2, [r1, #24]
 800df1e:	2a01      	cmp	r2, #1
 800df20:	f240 857c 	bls.w	800ea1c <forward_conv2d_nl_pool+0xb50>
 800df24:	686a      	ldr	r2, [r5, #4]
 800df26:	68a9      	ldr	r1, [r5, #8]
 800df28:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800df2a:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800df2e:	f8dc b018 	ldr.w	fp, [ip, #24]
 800df32:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800df36:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800df3a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800df3e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800df42:	f8db 4008 	ldr.w	r4, [fp, #8]
 800df46:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800df4a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800df4e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800df52:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800df56:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800df5a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800df5e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df62:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800df66:	f8de 4004 	ldr.w	r4, [lr, #4]
 800df6a:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800df6e:	f8de 400c 	ldr.w	r4, [lr, #12]
 800df72:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800df76:	f8de 4008 	ldr.w	r4, [lr, #8]
 800df7a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800df7e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800df82:	6824      	ldr	r4, [r4, #0]
 800df84:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 800df88:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800df8c:	6864      	ldr	r4, [r4, #4]
 800df8e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800df92:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800df96:	68a5      	ldr	r5, [r4, #8]
 800df98:	f8da 4004 	ldr.w	r4, [sl, #4]
 800df9c:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800dfa0:	f8da 4008 	ldr.w	r4, [sl, #8]
 800dfa4:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800dfa8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800dfaa:	6824      	ldr	r4, [r4, #0]
 800dfac:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 800dfb0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800dfb2:	6864      	ldr	r4, [r4, #4]
 800dfb4:	643c      	str	r4, [r7, #64]	; 0x40
 800dfb6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800dfba:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800dfbe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dfc0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800dfc4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800dfc6:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800dfca:	69c4      	ldr	r4, [r0, #28]
 800dfcc:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 800dfd0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800dfd2:	64bc      	str	r4, [r7, #72]	; 0x48
 800dfd4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800dfd6:	647c      	str	r4, [r7, #68]	; 0x44
 800dfd8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800dfda:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800dfde:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 800dfe2:	2a00      	cmp	r2, #0
 800dfe4:	f000 84f8 	beq.w	800e9d8 <forward_conv2d_nl_pool+0xb0c>
 800dfe8:	6992      	ldr	r2, [r2, #24]
 800dfea:	6892      	ldr	r2, [r2, #8]
 800dfec:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800dff0:	4680      	mov	r8, r0
 800dff2:	6a00      	ldr	r0, [r0, #32]
 800dff4:	2900      	cmp	r1, #0
 800dff6:	f000 84e4 	beq.w	800e9c2 <forward_conv2d_nl_pool+0xaf6>
 800dffa:	698a      	ldr	r2, [r1, #24]
 800dffc:	2a00      	cmp	r2, #0
 800dffe:	f000 8533 	beq.w	800ea68 <forward_conv2d_nl_pool+0xb9c>
 800e002:	694b      	ldr	r3, [r1, #20]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e00a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800e00e:	6893      	ldr	r3, [r2, #8]
 800e010:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e014:	f001 ff0c 	bl	800fe30 <ai_array_get_byte_size>
 800e018:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e01c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800e020:	881e      	ldrh	r6, [r3, #0]
 800e022:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800e026:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800e02a:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800e02e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e030:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800e034:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800e038:	fa11 f585 	uxtah	r5, r1, r5
 800e03c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800e040:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e044:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800e048:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800e04c:	3901      	subs	r1, #1
 800e04e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800e052:	eb05 0e00 	add.w	lr, r5, r0
 800e056:	fa1f f28a 	uxth.w	r2, sl
 800e05a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800e05e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800e062:	f8dc 4000 	ldr.w	r4, [ip]
 800e066:	f8dc 1000 	ldr.w	r1, [ip]
 800e06a:	3a01      	subs	r2, #1
 800e06c:	fb00 5002 	mla	r0, r0, r2, r5
 800e070:	fa1f f28b 	uxth.w	r2, fp
 800e074:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 800e078:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800e07c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800e080:	1e50      	subs	r0, r2, #1
 800e082:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800e086:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800e08a:	fa44 f101 	asr.w	r1, r4, r1
 800e08e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800e092:	f8dc 4000 	ldr.w	r4, [ip]
 800e096:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800e09a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e09e:	f3c4 4543 	ubfx	r5, r4, #17, #4
 800e0a2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800e0a6:	ebae 0202 	sub.w	r2, lr, r2
 800e0aa:	fa1f fe81 	uxth.w	lr, r1
 800e0ae:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800e0b2:	fbb2 f2f1 	udiv	r2, r2, r1
 800e0b6:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800e0ba:	3c01      	subs	r4, #1
 800e0bc:	fb04 1100 	mla	r1, r4, r0, r1
 800e0c0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800e0c4:	1c51      	adds	r1, r2, #1
 800e0c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e0ca:	487c      	ldr	r0, [pc, #496]	; (800e2bc <forward_conv2d_nl_pool+0x3f0>)
 800e0cc:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	2a00      	cmp	r2, #0
 800e0d4:	bf08      	it	eq
 800e0d6:	4601      	moveq	r1, r0
 800e0d8:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800e0dc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800e0e0:	2d04      	cmp	r5, #4
 800e0e2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800e0e6:	f000 849e 	beq.w	800ea26 <forward_conv2d_nl_pool+0xb5a>
 800e0ea:	2d08      	cmp	r5, #8
 800e0ec:	f000 849b 	beq.w	800ea26 <forward_conv2d_nl_pool+0xb5a>
 800e0f0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800e0f4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800e0f8:	2e03      	cmp	r6, #3
 800e0fa:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800e0fe:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800e102:	f240 8483 	bls.w	800ea0c <forward_conv2d_nl_pool+0xb40>
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f000 8489 	beq.w	800ea22 <forward_conv2d_nl_pool+0xb56>
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800e116:	68da      	ldr	r2, [r3, #12]
 800e118:	699b      	ldr	r3, [r3, #24]
 800e11a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e11e:	6899      	ldr	r1, [r3, #8]
 800e120:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800e124:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800e128:	6896      	ldr	r6, [r2, #8]
 800e12a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800e12e:	4249      	negs	r1, r1
 800e130:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800e134:	2800      	cmp	r0, #0
 800e136:	f000 82dd 	beq.w	800e6f4 <forward_conv2d_nl_pool+0x828>
 800e13a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e13e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e142:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e146:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800e14a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800e2c0 <forward_conv2d_nl_pool+0x3f4>
 800e14e:	fb03 f200 	mul.w	r2, r3, r0
 800e152:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e156:	008c      	lsls	r4, r1, #2
 800e158:	fb04 f000 	mul.w	r0, r4, r0
 800e15c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800e160:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800e164:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800e168:	fb01 fc02 	mul.w	ip, r1, r2
 800e16c:	00a2      	lsls	r2, r4, #2
 800e16e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800e172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e176:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800e17a:	00ab      	lsls	r3, r5, #2
 800e17c:	4694      	mov	ip, r2
 800e17e:	fb0c f204 	mul.w	r2, ip, r4
 800e182:	fb04 f303 	mul.w	r3, r4, r3
 800e186:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800e18a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800e18e:	00a4      	lsls	r4, r4, #2
 800e190:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800e194:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800e198:	f04f 0c00 	mov.w	ip, #0
 800e19c:	fa0f f58b 	sxth.w	r5, fp
 800e1a0:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 800e1a4:	46a4      	mov	ip, r4
 800e1a6:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800e1aa:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 800e1ae:	fa0f f58a 	sxth.w	r5, sl
 800e1b2:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800e1b6:	fb0c fc04 	mul.w	ip, ip, r4
 800e1ba:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 800e1be:	fb06 fc03 	mul.w	ip, r6, r3
 800e1c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e1c6:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800e1ca:	4240      	negs	r0, r0
 800e1cc:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800e1d0:	469c      	mov	ip, r3
 800e1d2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800e1d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e1da:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800e1de:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800e1e2:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 800e1e6:	fb00 f303 	mul.w	r3, r0, r3
 800e1ea:	460d      	mov	r5, r1
 800e1ec:	fb0c fc04 	mul.w	ip, ip, r4
 800e1f0:	627b      	str	r3, [r7, #36]	; 0x24
 800e1f2:	fb04 f305 	mul.w	r3, r4, r5
 800e1f6:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800e1fa:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800e1fe:	623b      	str	r3, [r7, #32]
 800e200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e204:	46a6      	mov	lr, r4
 800e206:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800e20a:	fb05 f503 	mul.w	r5, r5, r3
 800e20e:	667d      	str	r5, [r7, #100]	; 0x64
 800e210:	4625      	mov	r5, r4
 800e212:	fb05 f503 	mul.w	r5, r5, r3
 800e216:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e21a:	66bd      	str	r5, [r7, #104]	; 0x68
 800e21c:	fb00 f101 	mul.w	r1, r0, r1
 800e220:	fb03 f306 	mul.w	r3, r3, r6
 800e224:	657b      	str	r3, [r7, #84]	; 0x54
 800e226:	008b      	lsls	r3, r1, #2
 800e228:	633b      	str	r3, [r7, #48]	; 0x30
 800e22a:	0093      	lsls	r3, r2, #2
 800e22c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e22e:	0083      	lsls	r3, r0, #2
 800e230:	61bb      	str	r3, [r7, #24]
 800e232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e236:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800e23a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800e23e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800e242:	2400      	movs	r4, #0
 800e244:	63bb      	str	r3, [r7, #56]	; 0x38
 800e246:	4603      	mov	r3, r0
 800e248:	fb03 f301 	mul.w	r3, r3, r1
 800e24c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 800e250:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800e254:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800e258:	00d1      	lsls	r1, r2, #3
 800e25a:	0113      	lsls	r3, r2, #4
 800e25c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800e260:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800e264:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800e268:	fb00 f004 	mul.w	r0, r0, r4
 800e26c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800e270:	66f8      	str	r0, [r7, #108]	; 0x6c
 800e272:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800e276:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800e27a:	469a      	mov	sl, r3
 800e27c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e280:	2b00      	cmp	r3, #0
 800e282:	f340 81d0 	ble.w	800e626 <forward_conv2d_nl_pool+0x75a>
 800e286:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800e28a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e28e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e292:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e296:	2900      	cmp	r1, #0
 800e298:	441a      	add	r2, r3
 800e29a:	bfb4      	ite	lt
 800e29c:	2100      	movlt	r1, #0
 800e29e:	2300      	movge	r3, #0
 800e2a0:	4282      	cmp	r2, r0
 800e2a2:	bf28      	it	cs
 800e2a4:	4602      	movcs	r2, r0
 800e2a6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e2aa:	2801      	cmp	r0, #1
 800e2ac:	f000 83f6 	beq.w	800ea9c <forward_conv2d_nl_pool+0xbd0>
 800e2b0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e2b4:	4281      	cmp	r1, r0
 800e2b6:	f000 822a 	beq.w	800e70e <forward_conv2d_nl_pool+0x842>
 800e2ba:	e003      	b.n	800e2c4 <forward_conv2d_nl_pool+0x3f8>
 800e2bc:	0800cb6d 	.word	0x0800cb6d
 800e2c0:	00000000 	.word	0x00000000
 800e2c4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800e2c8:	2900      	cmp	r1, #0
 800e2ca:	f000 819f 	beq.w	800e60c <forward_conv2d_nl_pool+0x740>
 800e2ce:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800e2d2:	fb93 f1f0 	sdiv	r1, r3, r0
 800e2d6:	fb00 3111 	mls	r1, r0, r1, r3
 800e2da:	1a41      	subs	r1, r0, r1
 800e2dc:	1ad2      	subs	r2, r2, r3
 800e2de:	fb91 f5f0 	sdiv	r5, r1, r0
 800e2e2:	fb00 1515 	mls	r5, r0, r5, r1
 800e2e6:	1b52      	subs	r2, r2, r5
 800e2e8:	4601      	mov	r1, r0
 800e2ea:	4402      	add	r2, r0
 800e2ec:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800e2f0:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e2fa:	fbb4 f4f0 	udiv	r4, r4, r0
 800e2fe:	6a38      	ldr	r0, [r7, #32]
 800e300:	3a01      	subs	r2, #1
 800e302:	fb92 f8f1 	sdiv	r8, r2, r1
 800e306:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e30a:	eba0 0c04 	sub.w	ip, r0, r4
 800e30e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e312:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800e316:	4614      	mov	r4, r2
 800e318:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800e31c:	fbb4 f2f2 	udiv	r2, r4, r2
 800e320:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800e324:	663a      	str	r2, [r7, #96]	; 0x60
 800e326:	441d      	add	r5, r3
 800e328:	fb0e f000 	mul.w	r0, lr, r0
 800e32c:	440b      	add	r3, r1
 800e32e:	eba6 0608 	sub.w	r6, r6, r8
 800e332:	fb04 f505 	mul.w	r5, r4, r5
 800e336:	3b01      	subs	r3, #1
 800e338:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800e33c:	fb93 f3f4 	sdiv	r3, r3, r4
 800e340:	fb00 f406 	mul.w	r4, r0, r6
 800e344:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e348:	677d      	str	r5, [r7, #116]	; 0x74
 800e34a:	0091      	lsls	r1, r2, #2
 800e34c:	fb00 f003 	mul.w	r0, r0, r3
 800e350:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800e354:	65f8      	str	r0, [r7, #92]	; 0x5c
 800e356:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e35a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800e35e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800e362:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800e366:	1ac3      	subs	r3, r0, r3
 800e368:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800e36c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e370:	008b      	lsls	r3, r1, #2
 800e372:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e374:	00d3      	lsls	r3, r2, #3
 800e376:	61fb      	str	r3, [r7, #28]
 800e378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e37c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e384:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e388:	2300      	movs	r3, #0
 800e38a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 800e38e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800e392:	67bb      	str	r3, [r7, #120]	; 0x78
 800e394:	46c2      	mov	sl, r8
 800e396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e39a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e39e:	eb03 0c02 	add.w	ip, r3, r2
 800e3a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f2c0 811c 	blt.w	800e5e4 <forward_conv2d_nl_pool+0x718>
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800e3b0:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 800e3b4:	4605      	mov	r5, r0
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e3c0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800e3c4:	4413      	add	r3, r2
 800e3c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e3ca:	440a      	add	r2, r1
 800e3cc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e3d0:	428b      	cmp	r3, r1
 800e3d2:	bf94      	ite	ls
 800e3d4:	ebc6 0303 	rsbls	r3, r6, r3
 800e3d8:	ebc6 0301 	rsbhi	r3, r6, r1
 800e3dc:	4415      	add	r5, r2
 800e3de:	1a1b      	subs	r3, r3, r0
 800e3e0:	00a4      	lsls	r4, r4, #2
 800e3e2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800e3e6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800e3ea:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800e3ee:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	bf08      	it	eq
 800e3f6:	4662      	moveq	r2, ip
 800e3f8:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800e3fc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800e400:	fb91 f1f0 	sdiv	r1, r1, r0
 800e404:	4429      	add	r1, r5
 800e406:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800e40a:	fb0e 5501 	mla	r5, lr, r1, r5
 800e40e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e412:	4403      	add	r3, r0
 800e414:	fb01 6104 	mla	r1, r1, r4, r6
 800e418:	3b01      	subs	r3, #1
 800e41a:	fb93 f6f0 	sdiv	r6, r3, r0
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800e424:	fb06 3110 	mls	r1, r6, r0, r3
 800e428:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e42c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e430:	4562      	cmp	r2, ip
 800e432:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e436:	bf08      	it	eq
 800e438:	eeb0 6a48 	vmoveq.f32	s12, s16
 800e43c:	1b9b      	subs	r3, r3, r6
 800e43e:	2800      	cmp	r0, #0
 800e440:	d070      	beq.n	800e524 <forward_conv2d_nl_pool+0x658>
 800e442:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e446:	fb0e f803 	mul.w	r8, lr, r3
 800e44a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e44c:	fb00 fb01 	mul.w	fp, r0, r1
 800e450:	2b00      	cmp	r3, #0
 800e452:	d067      	beq.n	800e524 <forward_conv2d_nl_pool+0x658>
 800e454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e458:	18d3      	adds	r3, r2, r3
 800e45a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e45e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e462:	1a9b      	subs	r3, r3, r2
 800e464:	62bb      	str	r3, [r7, #40]	; 0x28
 800e466:	2300      	movs	r3, #0
 800e468:	673b      	str	r3, [r7, #112]	; 0x70
 800e46a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	4413      	add	r3, r2
 800e472:	65bb      	str	r3, [r7, #88]	; 0x58
 800e474:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	4413      	add	r3, r2
 800e47c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800e480:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e484:	ecf3 7a01 	vldmia	r3!, {s15}
 800e488:	f1ba 0f00 	cmp.w	sl, #0
 800e48c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800e490:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e494:	f340 80a4 	ble.w	800e5e0 <forward_conv2d_nl_pool+0x714>
 800e498:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800e49c:	f04f 0c00 	mov.w	ip, #0
 800e4a0:	2e00      	cmp	r6, #0
 800e4a2:	dd19      	ble.n	800e4d8 <forward_conv2d_nl_pool+0x60c>
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	eb00 040e 	add.w	r4, r0, lr
 800e4aa:	4284      	cmp	r4, r0
 800e4ac:	d910      	bls.n	800e4d0 <forward_conv2d_nl_pool+0x604>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	462a      	mov	r2, r5
 800e4b2:	ecb3 7a01 	vldmia	r3!, {s14}
 800e4b6:	ecf2 6a01 	vldmia	r2!, {s13}
 800e4ba:	429c      	cmp	r4, r3
 800e4bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e4c0:	d8f7      	bhi.n	800e4b2 <forward_conv2d_nl_pool+0x5e6>
 800e4c2:	43c3      	mvns	r3, r0
 800e4c4:	441c      	add	r4, r3
 800e4c6:	f024 0403 	bic.w	r4, r4, #3
 800e4ca:	3404      	adds	r4, #4
 800e4cc:	4425      	add	r5, r4
 800e4ce:	4420      	add	r0, r4
 800e4d0:	3101      	adds	r1, #1
 800e4d2:	428e      	cmp	r6, r1
 800e4d4:	4448      	add	r0, r9
 800e4d6:	d1e6      	bne.n	800e4a6 <forward_conv2d_nl_pool+0x5da>
 800e4d8:	f10c 0c01 	add.w	ip, ip, #1
 800e4dc:	45e2      	cmp	sl, ip
 800e4de:	4458      	add	r0, fp
 800e4e0:	4445      	add	r5, r8
 800e4e2:	d1dd      	bne.n	800e4a0 <forward_conv2d_nl_pool+0x5d4>
 800e4e4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800e4e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e4ec:	441d      	add	r5, r3
 800e4ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e4f2:	ece3 7a01 	vstmia	r3!, {s15}
 800e4f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800e4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d1be      	bne.n	800e480 <forward_conv2d_nl_pool+0x5b4>
 800e502:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800e506:	69f9      	ldr	r1, [r7, #28]
 800e508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e50a:	4472      	add	r2, lr
 800e50c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800e510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e512:	1a52      	subs	r2, r2, r1
 800e514:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800e518:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800e51c:	3301      	adds	r3, #1
 800e51e:	429a      	cmp	r2, r3
 800e520:	673b      	str	r3, [r7, #112]	; 0x70
 800e522:	d1a2      	bne.n	800e46a <forward_conv2d_nl_pool+0x59e>
 800e524:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e528:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e52e:	4608      	mov	r0, r1
 800e530:	4410      	add	r0, r2
 800e532:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800e536:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800e53a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800e53e:	4401      	add	r1, r0
 800e540:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800e544:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800e548:	1a8a      	subs	r2, r1, r2
 800e54a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800e54e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800e552:	3301      	adds	r3, #1
 800e554:	429a      	cmp	r2, r3
 800e556:	67bb      	str	r3, [r7, #120]	; 0x78
 800e558:	f47f af1d 	bne.w	800e396 <forward_conv2d_nl_pool+0x4ca>
 800e55c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e560:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e564:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800e568:	699b      	ldr	r3, [r3, #24]
 800e56a:	2a00      	cmp	r2, #0
 800e56c:	f000 8210 	beq.w	800e990 <forward_conv2d_nl_pool+0xac4>
 800e570:	2400      	movs	r4, #0
 800e572:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800e576:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800e57a:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800e57e:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 800e582:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800e586:	609e      	str	r6, [r3, #8]
 800e588:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e58c:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 800e590:	462b      	mov	r3, r5
 800e592:	4641      	mov	r1, r8
 800e594:	4640      	mov	r0, r8
 800e596:	47a0      	blx	r4
 800e598:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e59c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800e5a0:	6859      	ldr	r1, [r3, #4]
 800e5a2:	68da      	ldr	r2, [r3, #12]
 800e5a4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800e5a8:	4405      	add	r5, r0
 800e5aa:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800e5ae:	0089      	lsls	r1, r1, #2
 800e5b0:	4406      	add	r6, r0
 800e5b2:	eba5 0c09 	sub.w	ip, r5, r9
 800e5b6:	1850      	adds	r0, r2, r1
 800e5b8:	45a4      	cmp	ip, r4
 800e5ba:	bfa8      	it	ge
 800e5bc:	464d      	movge	r5, r9
 800e5be:	4286      	cmp	r6, r0
 800e5c0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800e5c4:	bf28      	it	cs
 800e5c6:	1a76      	subcs	r6, r6, r1
 800e5c8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800e5cc:	3001      	adds	r0, #1
 800e5ce:	4281      	cmp	r1, r0
 800e5d0:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 800e5d4:	d1d7      	bne.n	800e586 <forward_conv2d_nl_pool+0x6ba>
 800e5d6:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800e5da:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800e5de:	e019      	b.n	800e614 <forward_conv2d_nl_pool+0x748>
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	e781      	b.n	800e4e8 <forward_conv2d_nl_pool+0x61c>
 800e5e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800e5e8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800e5ec:	fb90 f3f2 	sdiv	r3, r0, r2
 800e5f0:	fb02 0313 	mls	r3, r2, r3, r0
 800e5f4:	1ad3      	subs	r3, r2, r3
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	fb93 f0f2 	sdiv	r0, r3, r2
 800e5fc:	fb02 3010 	mls	r0, r2, r0, r3
 800e600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e602:	462e      	mov	r6, r5
 800e604:	18c4      	adds	r4, r0, r3
 800e606:	eb02 0805 	add.w	r8, r2, r5
 800e60a:	e6d5      	b.n	800e3b8 <forward_conv2d_nl_pool+0x4ec>
 800e60c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	68da      	ldr	r2, [r3, #12]
 800e614:	609a      	str	r2, [r3, #8]
 800e616:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e61a:	3301      	adds	r3, #1
 800e61c:	b21b      	sxth	r3, r3
 800e61e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800e622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e626:	3b01      	subs	r3, #1
 800e628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e62c:	f100 83bf 	bmi.w	800edae <forward_conv2d_nl_pool+0xee2>
 800e630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e634:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800e638:	42a3      	cmp	r3, r4
 800e63a:	f200 839d 	bhi.w	800ed78 <forward_conv2d_nl_pool+0xeac>
 800e63e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800e642:	b29b      	uxth	r3, r3
 800e644:	6990      	ldr	r0, [r2, #24]
 800e646:	9301      	str	r3, [sp, #4]
 800e648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e64c:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 800e650:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800e654:	1a9b      	subs	r3, r3, r2
 800e656:	fa1f f188 	uxth.w	r1, r8
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e660:	9308      	str	r3, [sp, #32]
 800e662:	9105      	str	r1, [sp, #20]
 800e664:	2601      	movs	r6, #1
 800e666:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e66a:	9607      	str	r6, [sp, #28]
 800e66c:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 800e670:	9506      	str	r5, [sp, #24]
 800e672:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 800e676:	9304      	str	r3, [sp, #16]
 800e678:	1a64      	subs	r4, r4, r1
 800e67a:	b2b1      	uxth	r1, r6
 800e67c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800e686:	b224      	sxth	r4, r4
 800e688:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800e68c:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800e690:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800e694:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800e696:	47a0      	blx	r4
 800e698:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800e69c:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800e6a0:	688a      	ldr	r2, [r1, #8]
 800e6a2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800e6a4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800e6a8:	fa0f f388 	sxth.w	r3, r8
 800e6ac:	1af3      	subs	r3, r6, r3
 800e6ae:	4422      	add	r2, r4
 800e6b0:	462e      	mov	r6, r5
 800e6b2:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800e6b6:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800e6ba:	608a      	str	r2, [r1, #8]
 800e6bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e6c0:	4426      	add	r6, r4
 800e6c2:	b21b      	sxth	r3, r3
 800e6c4:	1b2c      	subs	r4, r5, r4
 800e6c6:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800e6ca:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800e6cc:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800e6d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e6d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6d8:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800e6dc:	3001      	adds	r0, #1
 800e6de:	442c      	add	r4, r5
 800e6e0:	4283      	cmp	r3, r0
 800e6e2:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 800e6e6:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800e6ea:	f63f adc7 	bhi.w	800e27c <forward_conv2d_nl_pool+0x3b0>
 800e6ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e6f2:	699b      	ldr	r3, [r3, #24]
 800e6f4:	68da      	ldr	r2, [r3, #12]
 800e6f6:	609a      	str	r2, [r3, #8]
 800e6f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e6fc:	68d3      	ldr	r3, [r2, #12]
 800e6fe:	6093      	str	r3, [r2, #8]
 800e700:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800e704:	46bd      	mov	sp, r7
 800e706:	ecbd 8b10 	vpop	{d8-d15}
 800e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e710:	2901      	cmp	r1, #1
 800e712:	f47f add7 	bne.w	800e2c4 <forward_conv2d_nl_pool+0x3f8>
 800e716:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800e71a:	2900      	cmp	r1, #0
 800e71c:	f43f af76 	beq.w	800e60c <forward_conv2d_nl_pool+0x740>
 800e720:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800e724:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800e728:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800e72c:	1ad2      	subs	r2, r2, r3
 800e72e:	1a8c      	subs	r4, r1, r2
 800e730:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800e734:	00b2      	lsls	r2, r6, #2
 800e736:	fb02 f204 	mul.w	r2, r2, r4
 800e73a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800e73e:	fbb1 f1f0 	udiv	r1, r1, r0
 800e742:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800e746:	460d      	mov	r5, r1
 800e748:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e74a:	62ba      	str	r2, [r7, #40]	; 0x28
 800e74c:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800e750:	0082      	lsls	r2, r0, #2
 800e752:	65ba      	str	r2, [r7, #88]	; 0x58
 800e754:	00ca      	lsls	r2, r1, #3
 800e756:	607a      	str	r2, [r7, #4]
 800e758:	00aa      	lsls	r2, r5, #2
 800e75a:	60ba      	str	r2, [r7, #8]
 800e75c:	fb03 f206 	mul.w	r2, r3, r6
 800e760:	67ba      	str	r2, [r7, #120]	; 0x78
 800e762:	69ba      	ldr	r2, [r7, #24]
 800e764:	fb02 f303 	mul.w	r3, r2, r3
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e76e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e772:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e776:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800e77a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e77e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e782:	2300      	movs	r3, #0
 800e784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f2c0 8112 	blt.w	800e9b6 <forward_conv2d_nl_pool+0xaea>
 800e792:	2100      	movs	r1, #0
 800e794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e796:	460a      	mov	r2, r1
 800e798:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800e79c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800e7a0:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800e7a4:	4420      	add	r0, r4
 800e7a6:	4408      	add	r0, r1
 800e7a8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800e7ac:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800e7b0:	190c      	adds	r4, r1, r4
 800e7b2:	42ac      	cmp	r4, r5
 800e7b4:	bf28      	it	cs
 800e7b6:	462c      	movcs	r4, r5
 800e7b8:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800e7bc:	0080      	lsls	r0, r0, #2
 800e7be:	1aa4      	subs	r4, r4, r2
 800e7c0:	2d00      	cmp	r5, #0
 800e7c2:	f000 80e9 	beq.w	800e998 <forward_conv2d_nl_pool+0xacc>
 800e7c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e7ca:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800e7ce:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800e7d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e7d6:	42b5      	cmp	r5, r6
 800e7d8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800e7dc:	eba3 0204 	sub.w	r2, r3, r4
 800e7e0:	eba1 0104 	sub.w	r1, r1, r4
 800e7e4:	bf08      	it	eq
 800e7e6:	eef0 3a48 	vmoveq.f32	s7, s16
 800e7ea:	462b      	mov	r3, r5
 800e7ec:	697d      	ldr	r5, [r7, #20]
 800e7ee:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800e7f2:	4428      	add	r0, r5
 800e7f4:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800e7f8:	fb05 6e00 	mla	lr, r5, r0, r6
 800e7fc:	eb0e 000b 	add.w	r0, lr, fp
 800e800:	4586      	cmp	lr, r0
 800e802:	61f8      	str	r0, [r7, #28]
 800e804:	f080 80a5 	bcs.w	800e952 <forward_conv2d_nl_pool+0xa86>
 800e808:	0092      	lsls	r2, r2, #2
 800e80a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800e80e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e810:	fb01 f10b 	mul.w	r1, r1, fp
 800e814:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800e818:	f024 0803 	bic.w	r8, r4, #3
 800e81c:	2a00      	cmp	r2, #0
 800e81e:	f000 8098 	beq.w	800e952 <forward_conv2d_nl_pool+0xa86>
 800e822:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800e826:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e828:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800e82c:	0892      	lsrs	r2, r2, #2
 800e82e:	3201      	adds	r2, #1
 800e830:	4401      	add	r1, r0
 800e832:	fb02 f00a 	mul.w	r0, r2, sl
 800e836:	6638      	str	r0, [r7, #96]	; 0x60
 800e838:	0110      	lsls	r0, r2, #4
 800e83a:	0092      	lsls	r2, r2, #2
 800e83c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e83e:	1aca      	subs	r2, r1, r3
 800e840:	613a      	str	r2, [r7, #16]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	6738      	str	r0, [r7, #112]	; 0x70
 800e846:	4413      	add	r3, r2
 800e848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e84c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e852:	4413      	add	r3, r2
 800e854:	60fb      	str	r3, [r7, #12]
 800e856:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	4413      	add	r3, r2
 800e85e:	677b      	str	r3, [r7, #116]	; 0x74
 800e860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e864:	ecf3 6a01 	vldmia	r3!, {s13}
 800e868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e86c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e870:	2b00      	cmp	r3, #0
 800e872:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800e876:	dd57      	ble.n	800e928 <forward_conv2d_nl_pool+0xa5c>
 800e878:	4676      	mov	r6, lr
 800e87a:	f04f 0c00 	mov.w	ip, #0
 800e87e:	f1b8 0f00 	cmp.w	r8, #0
 800e882:	f340 8087 	ble.w	800e994 <forward_conv2d_nl_pool+0xac8>
 800e886:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e88a:	f109 0310 	add.w	r3, r9, #16
 800e88e:	18b1      	adds	r1, r6, r2
 800e890:	2000      	movs	r0, #0
 800e892:	4632      	mov	r2, r6
 800e894:	eb02 050b 	add.w	r5, r2, fp
 800e898:	ed95 7a00 	vldr	s14, [r5]
 800e89c:	ed53 7a03 	vldr	s15, [r3, #-12]
 800e8a0:	ed92 4a00 	vldr	s8, [r2]
 800e8a4:	ed53 4a04 	vldr	s9, [r3, #-16]
 800e8a8:	ed91 5a00 	vldr	s10, [r1]
 800e8ac:	ed53 5a02 	vldr	s11, [r3, #-8]
 800e8b0:	ed13 6a01 	vldr	s12, [r3, #-4]
 800e8b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8b8:	eb01 050b 	add.w	r5, r1, fp
 800e8bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e8c0:	3004      	adds	r0, #4
 800e8c2:	4540      	cmp	r0, r8
 800e8c4:	ed95 7a00 	vldr	s14, [r5]
 800e8c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e8cc:	4452      	add	r2, sl
 800e8ce:	4451      	add	r1, sl
 800e8d0:	f103 0310 	add.w	r3, r3, #16
 800e8d4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e8d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e8dc:	dbda      	blt.n	800e894 <forward_conv2d_nl_pool+0x9c8>
 800e8de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e8e2:	441e      	add	r6, r3
 800e8e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8e6:	4499      	add	r9, r3
 800e8e8:	42a0      	cmp	r0, r4
 800e8ea:	da11      	bge.n	800e910 <forward_conv2d_nl_pool+0xa44>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	4633      	mov	r3, r6
 800e8f0:	4649      	mov	r1, r9
 800e8f2:	edd3 7a00 	vldr	s15, [r3]
 800e8f6:	ecb1 7a01 	vldmia	r1!, {s14}
 800e8fa:	3201      	adds	r2, #1
 800e8fc:	42a2      	cmp	r2, r4
 800e8fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e902:	445b      	add	r3, fp
 800e904:	d1f5      	bne.n	800e8f2 <forward_conv2d_nl_pool+0xa26>
 800e906:	1a20      	subs	r0, r4, r0
 800e908:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800e90c:	fb00 660b 	mla	r6, r0, fp, r6
 800e910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e914:	441e      	add	r6, r3
 800e916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e91a:	4499      	add	r9, r3
 800e91c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e920:	f10c 0c01 	add.w	ip, ip, #1
 800e924:	4563      	cmp	r3, ip
 800e926:	d1aa      	bne.n	800e87e <forward_conv2d_nl_pool+0x9b2>
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	4499      	add	r9, r3
 800e92c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e92e:	ece3 6a01 	vstmia	r3!, {s13}
 800e932:	677b      	str	r3, [r7, #116]	; 0x74
 800e934:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 800e938:	4293      	cmp	r3, r2
 800e93a:	d191      	bne.n	800e860 <forward_conv2d_nl_pool+0x994>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	1a9b      	subs	r3, r3, r2
 800e942:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	f10e 0e04 	add.w	lr, lr, #4
 800e94c:	459e      	cmp	lr, r3
 800e94e:	f4ff af7d 	bcc.w	800e84c <forward_conv2d_nl_pool+0x980>
 800e952:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800e956:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800e95a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e95e:	440a      	add	r2, r1
 800e960:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800e964:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800e968:	4608      	mov	r0, r1
 800e96a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e96e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800e972:	4410      	add	r0, r2
 800e974:	1a8a      	subs	r2, r1, r2
 800e976:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800e97a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800e97e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800e982:	3301      	adds	r3, #1
 800e984:	429a      	cmp	r2, r3
 800e986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e98a:	f47f aefd 	bne.w	800e788 <forward_conv2d_nl_pool+0x8bc>
 800e98e:	e5e7      	b.n	800e560 <forward_conv2d_nl_pool+0x694>
 800e990:	68da      	ldr	r2, [r3, #12]
 800e992:	e63f      	b.n	800e614 <forward_conv2d_nl_pool+0x748>
 800e994:	2000      	movs	r0, #0
 800e996:	e7a7      	b.n	800e8e8 <forward_conv2d_nl_pool+0xa1c>
 800e998:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e99c:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800e9a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e9a4:	1b19      	subs	r1, r3, r4
 800e9a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e9aa:	eef0 3a48 	vmov.f32	s7, s16
 800e9ae:	1b1a      	subs	r2, r3, r4
 800e9b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e9b4:	e71a      	b.n	800e7ec <forward_conv2d_nl_pool+0x920>
 800e9b6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800e9ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9bc:	460a      	mov	r2, r1
 800e9be:	440b      	add	r3, r1
 800e9c0:	e6ea      	b.n	800e798 <forward_conv2d_nl_pool+0x8cc>
 800e9c2:	b168      	cbz	r0, 800e9e0 <forward_conv2d_nl_pool+0xb14>
 800e9c4:	6882      	ldr	r2, [r0, #8]
 800e9c6:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800e9d0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800e9d4:	f7ff bb29 	b.w	800e02a <forward_conv2d_nl_pool+0x15e>
 800e9d8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800e9dc:	f7ff bb08 	b.w	800dff0 <forward_conv2d_nl_pool+0x124>
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800e9e6:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800e9ea:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800e9ee:	f7ff bb1c 	b.w	800e02a <forward_conv2d_nl_pool+0x15e>
 800e9f2:	3118      	adds	r1, #24
 800e9f4:	d008      	beq.n	800ea08 <forward_conv2d_nl_pool+0xb3c>
 800e9f6:	462a      	mov	r2, r5
 800e9f8:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	f7ff ba93 	b.w	800df28 <forward_conv2d_nl_pool+0x5c>
 800ea02:	4691      	mov	r9, r2
 800ea04:	f7ff ba7d 	b.w	800df02 <forward_conv2d_nl_pool+0x36>
 800ea08:	68cb      	ldr	r3, [r1, #12]
 800ea0a:	deff      	udf	#255	; 0xff
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	deff      	udf	#255	; 0xff
 800ea12:	4694      	mov	ip, r2
 800ea14:	f7ff ba6c 	b.w	800def0 <forward_conv2d_nl_pool+0x24>
 800ea18:	6873      	ldr	r3, [r6, #4]
 800ea1a:	deff      	udf	#255	; 0xff
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f7ff ba82 	b.w	800df26 <forward_conv2d_nl_pool+0x5a>
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	deff      	udf	#255	; 0xff
 800ea26:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800ea2a:	2a00      	cmp	r2, #0
 800ea2c:	f43f ab60 	beq.w	800e0f0 <forward_conv2d_nl_pool+0x224>
 800ea30:	2e03      	cmp	r6, #3
 800ea32:	d9eb      	bls.n	800ea0c <forward_conv2d_nl_pool+0xb40>
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea38:	b323      	cbz	r3, 800ea84 <forward_conv2d_nl_pool+0xbb8>
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	b313      	cbz	r3, 800ea84 <forward_conv2d_nl_pool+0xbb8>
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800ea44:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800ea4e:	9000      	str	r0, [sp, #0]
 800ea50:	4673      	mov	r3, lr
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7fe fa18 	bl	800ce88 <ai_dict_decompress_f32>
 800ea58:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ea5c:	b17c      	cbz	r4, 800ea7e <forward_conv2d_nl_pool+0xbb2>
 800ea5e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800ea62:	881e      	ldrh	r6, [r3, #0]
 800ea64:	f7ff bb44 	b.w	800e0f0 <forward_conv2d_nl_pool+0x224>
 800ea68:	b178      	cbz	r0, 800ea8a <forward_conv2d_nl_pool+0xbbe>
 800ea6a:	6881      	ldr	r1, [r0, #8]
 800ea6c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800ea70:	2201      	movs	r2, #1
 800ea72:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800ea76:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800ea7a:	f7ff bad6 	b.w	800e02a <forward_conv2d_nl_pool+0x15e>
 800ea7e:	881e      	ldrh	r6, [r3, #0]
 800ea80:	f7ff bb36 	b.w	800e0f0 <forward_conv2d_nl_pool+0x224>
 800ea84:	2300      	movs	r3, #0
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	deff      	udf	#255	; 0xff
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800ea90:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800ea94:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800ea98:	f7ff bac7 	b.w	800e02a <forward_conv2d_nl_pool+0x15e>
 800ea9c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ea9e:	2801      	cmp	r0, #1
 800eaa0:	f47f ac10 	bne.w	800e2c4 <forward_conv2d_nl_pool+0x3f8>
 800eaa4:	1ad2      	subs	r2, r2, r3
 800eaa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaa8:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800eaac:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800eab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eab2:	fb00 4101 	mla	r1, r0, r1, r4
 800eab6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800eaba:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800eabe:	f080 81c4 	bcs.w	800ee4a <forward_conv2d_nl_pool+0xf7e>
 800eac2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800eac6:	2a00      	cmp	r2, #0
 800eac8:	f43f ad4a 	beq.w	800e560 <forward_conv2d_nl_pool+0x694>
 800eacc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ead0:	fb02 f303 	mul.w	r3, r2, r3
 800ead4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ead6:	677b      	str	r3, [r7, #116]	; 0x74
 800ead8:	1a9b      	subs	r3, r3, r2
 800eada:	663b      	str	r3, [r7, #96]	; 0x60
 800eadc:	188b      	adds	r3, r1, r2
 800eade:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eae4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800eae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800eaec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800eaf0:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 800eaf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eaf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eafc:	2300      	movs	r3, #0
 800eafe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eb02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	f000 8133 	beq.w	800ed72 <forward_conv2d_nl_pool+0xea6>
 800eb0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eb10:	ed93 6a00 	vldr	s12, [r3]
 800eb14:	3304      	adds	r3, #4
 800eb16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eb1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 8101 	beq.w	800ed26 <forward_conv2d_nl_pool+0xe5a>
 800eb24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eb28:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eb2c:	eb03 0802 	add.w	r8, r3, r2
 800eb30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eb36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb40:	67bb      	str	r3, [r7, #120]	; 0x78
 800eb42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eb46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eb4a:	f04f 0b00 	mov.w	fp, #0
 800eb4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f2c0 8104 	blt.w	800ed60 <forward_conv2d_nl_pool+0xe94>
 800eb58:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800eb5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eb5e:	2300      	movs	r3, #0
 800eb60:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800eb64:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800eb68:	eb02 0c04 	add.w	ip, r2, r4
 800eb6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eb70:	4540      	cmp	r0, r8
 800eb72:	bf94      	ite	ls
 800eb74:	ebc3 0300 	rsbls	r3, r3, r0
 800eb78:	ebc3 0308 	rsbhi	r3, r3, r8
 800eb7c:	eba2 0903 	sub.w	r9, r2, r3
 800eb80:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800eb84:	1ac4      	subs	r4, r0, r3
 800eb86:	fb03 f302 	mul.w	r3, r3, r2
 800eb8a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800eb8e:	2a00      	cmp	r2, #0
 800eb90:	f340 80e3 	ble.w	800ed5a <forward_conv2d_nl_pool+0xe8e>
 800eb94:	f023 050f 	bic.w	r5, r3, #15
 800eb98:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800eb9c:	1e68      	subs	r0, r5, #1
 800eb9e:	0900      	lsrs	r0, r0, #4
 800eba0:	3001      	adds	r0, #1
 800eba2:	fb06 f204 	mul.w	r2, r6, r4
 800eba6:	673a      	str	r2, [r7, #112]	; 0x70
 800eba8:	0102      	lsls	r2, r0, #4
 800ebaa:	65ba      	str	r2, [r7, #88]	; 0x58
 800ebac:	fb06 f909 	mul.w	r9, r6, r9
 800ebb0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800ebb4:	eef0 6a46 	vmov.f32	s13, s12
 800ebb8:	f04f 0e00 	mov.w	lr, #0
 800ebbc:	4662      	mov	r2, ip
 800ebbe:	2d00      	cmp	r5, #0
 800ebc0:	f340 80c9 	ble.w	800ed56 <forward_conv2d_nl_pool+0xe8a>
 800ebc4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800ebc8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800ebcc:	2600      	movs	r6, #0
 800ebce:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800ebd2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800ebd6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800ebda:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800ebde:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800ebe2:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800ebe6:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800ebea:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800ebee:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800ebf2:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800ebf6:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800ebfa:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800ebfe:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800ec02:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800ec06:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800ec0a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800ec0e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800ec12:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800ec16:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800ec1a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800ec1e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800ec22:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800ec26:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800ec2a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800ec2e:	ed14 4a04 	vldr	s8, [r4, #-16]
 800ec32:	ed50 4a03 	vldr	s9, [r0, #-12]
 800ec36:	ed14 5a03 	vldr	s10, [r4, #-12]
 800ec3a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800ec3e:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ec42:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800ec46:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800ec4a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800ec4e:	3610      	adds	r6, #16
 800ec50:	42ae      	cmp	r6, r5
 800ec52:	ed14 fa01 	vldr	s30, [r4, #-4]
 800ec56:	ed50 ea01 	vldr	s29, [r0, #-4]
 800ec5a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800ec5e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800ec62:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800ec66:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800ec6a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ec6e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ec72:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ec76:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ec7a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800ec7e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800ec82:	eee1 7a82 	vfma.f32	s15, s3, s4
 800ec86:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ec8a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ec8e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ec92:	eee5 7a87 	vfma.f32	s15, s11, s14
 800ec96:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800ec9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ec9e:	db96      	blt.n	800ebce <forward_conv2d_nl_pool+0xd02>
 800eca0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eca2:	4451      	add	r1, sl
 800eca4:	4452      	add	r2, sl
 800eca6:	4283      	cmp	r3, r0
 800eca8:	dd0f      	ble.n	800ecca <forward_conv2d_nl_pool+0xdfe>
 800ecaa:	4604      	mov	r4, r0
 800ecac:	468c      	mov	ip, r1
 800ecae:	4616      	mov	r6, r2
 800ecb0:	ecb6 7a01 	vldmia	r6!, {s14}
 800ecb4:	ecfc 7a01 	vldmia	ip!, {s15}
 800ecb8:	3401      	adds	r4, #1
 800ecba:	42a3      	cmp	r3, r4
 800ecbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ecc0:	d1f6      	bne.n	800ecb0 <forward_conv2d_nl_pool+0xde4>
 800ecc2:	1a18      	subs	r0, r3, r0
 800ecc4:	0080      	lsls	r0, r0, #2
 800ecc6:	4402      	add	r2, r0
 800ecc8:	4401      	add	r1, r0
 800ecca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800eccc:	4402      	add	r2, r0
 800ecce:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800ecd2:	f10e 0e01 	add.w	lr, lr, #1
 800ecd6:	4570      	cmp	r0, lr
 800ecd8:	4449      	add	r1, r9
 800ecda:	f47f af70 	bne.w	800ebbe <forward_conv2d_nl_pool+0xcf2>
 800ecde:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ece2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ece4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ece8:	edc3 6a00 	vstr	s13, [r3]
 800ecec:	4608      	mov	r0, r1
 800ecee:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800ecf2:	440b      	add	r3, r1
 800ecf4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800ecf8:	67bb      	str	r3, [r7, #120]	; 0x78
 800ecfa:	4410      	add	r0, r2
 800ecfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecfe:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800ed02:	4608      	mov	r0, r1
 800ed04:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800ed08:	4418      	add	r0, r3
 800ed0a:	1acb      	subs	r3, r1, r3
 800ed0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ed10:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ed14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800ed18:	f10b 0b01 	add.w	fp, fp, #1
 800ed1c:	455b      	cmp	r3, fp
 800ed1e:	eba8 0802 	sub.w	r8, r8, r2
 800ed22:	f47f af14 	bne.w	800eb4e <forward_conv2d_nl_pool+0xc82>
 800ed26:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ed2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ed30:	440a      	add	r2, r1
 800ed32:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800ed36:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ed3a:	3204      	adds	r2, #4
 800ed3c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800ed40:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800ed44:	3301      	adds	r3, #1
 800ed46:	429a      	cmp	r2, r3
 800ed48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ed4c:	f47f aed9 	bne.w	800eb02 <forward_conv2d_nl_pool+0xc36>
 800ed50:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800ed54:	e404      	b.n	800e560 <forward_conv2d_nl_pool+0x694>
 800ed56:	2000      	movs	r0, #0
 800ed58:	e7a5      	b.n	800eca6 <forward_conv2d_nl_pool+0xdda>
 800ed5a:	eef0 6a46 	vmov.f32	s13, s12
 800ed5e:	e7be      	b.n	800ecde <forward_conv2d_nl_pool+0xe12>
 800ed60:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ed64:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ed68:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800ed6c:	eba8 0303 	sub.w	r3, r8, r3
 800ed70:	e6f6      	b.n	800eb60 <forward_conv2d_nl_pool+0xc94>
 800ed72:	eeb0 6a48 	vmov.f32	s12, s16
 800ed76:	e6d0      	b.n	800eb1a <forward_conv2d_nl_pool+0xc4e>
 800ed78:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ed7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed80:	4611      	mov	r1, r2
 800ed82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800ed86:	4419      	add	r1, r3
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ed8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ed90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed94:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800ed98:	4413      	add	r3, r2
 800ed9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ed9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800eda2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eda6:	4293      	cmp	r3, r2
 800eda8:	f63f aa68 	bhi.w	800e27c <forward_conv2d_nl_pool+0x3b0>
 800edac:	e49f      	b.n	800e6ee <forward_conv2d_nl_pool+0x822>
 800edae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800edb2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800edb6:	699a      	ldr	r2, [r3, #24]
 800edb8:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800edbc:	68d1      	ldr	r1, [r2, #12]
 800edbe:	6853      	ldr	r3, [r2, #4]
 800edc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edc2:	fb00 4012 	mls	r0, r0, r2, r4
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	4281      	cmp	r1, r0
 800edca:	bf88      	it	hi
 800edcc:	18c0      	addhi	r0, r0, r3
 800edce:	4281      	cmp	r1, r0
 800edd0:	eb01 0203 	add.w	r2, r1, r3
 800edd4:	d216      	bcs.n	800ee04 <forward_conv2d_nl_pool+0xf38>
 800edd6:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800edda:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800edde:	42a1      	cmp	r1, r4
 800ede0:	d010      	beq.n	800ee04 <forward_conv2d_nl_pool+0xf38>
 800ede2:	4290      	cmp	r0, r2
 800ede4:	d20e      	bcs.n	800ee04 <forward_conv2d_nl_pool+0xf38>
 800ede6:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800edea:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800edee:	f850 3b04 	ldr.w	r3, [r0], #4
 800edf2:	f841 3b04 	str.w	r3, [r1], #4
 800edf6:	69a2      	ldr	r2, [r4, #24]
 800edf8:	6853      	ldr	r3, [r2, #4]
 800edfa:	68d2      	ldr	r2, [r2, #12]
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	441a      	add	r2, r3
 800ee00:	4282      	cmp	r2, r0
 800ee02:	d8f4      	bhi.n	800edee <forward_conv2d_nl_pool+0xf22>
 800ee04:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ee08:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800ee0c:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800ee10:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800ee12:	4420      	add	r0, r4
 800ee14:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800ee18:	1a40      	subs	r0, r0, r1
 800ee1a:	4421      	add	r1, r4
 800ee1c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800ee20:	442c      	add	r4, r5
 800ee22:	b209      	sxth	r1, r1
 800ee24:	b200      	sxth	r0, r0
 800ee26:	4294      	cmp	r4, r2
 800ee28:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800ee2c:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800ee30:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800ee34:	4621      	mov	r1, r4
 800ee36:	f4ff abfb 	bcc.w	800e630 <forward_conv2d_nl_pool+0x764>
 800ee3a:	425b      	negs	r3, r3
 800ee3c:	4419      	add	r1, r3
 800ee3e:	4291      	cmp	r1, r2
 800ee40:	d2fc      	bcs.n	800ee3c <forward_conv2d_nl_pool+0xf70>
 800ee42:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800ee46:	f7ff bbf3 	b.w	800e630 <forward_conv2d_nl_pool+0x764>
 800ee4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee4e:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800ee52:	320a      	adds	r2, #10
 800ee54:	f022 0207 	bic.w	r2, r2, #7
 800ee58:	ebad 0d02 	sub.w	sp, sp, r2
 800ee5c:	aa0a      	add	r2, sp, #40	; 0x28
 800ee5e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800ee62:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800ee66:	2a00      	cmp	r2, #0
 800ee68:	f000 8153 	beq.w	800f112 <forward_conv2d_nl_pool+0x1246>
 800ee6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ee70:	f8c7 b01c 	str.w	fp, [r7, #28]
 800ee74:	fb02 f303 	mul.w	r3, r2, r3
 800ee78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee7a:	663b      	str	r3, [r7, #96]	; 0x60
 800ee7c:	1a9b      	subs	r3, r3, r2
 800ee7e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ee84:	f8c7 a014 	str.w	sl, [r7, #20]
 800ee88:	4413      	add	r3, r2
 800ee8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ee90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ee94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee98:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800eea2:	2300      	movs	r3, #0
 800eea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eeac:	b13b      	cbz	r3, 800eebe <forward_conv2d_nl_pool+0xff2>
 800eeae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eeb2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800eeb6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800eeba:	f001 f83d 	bl	800ff38 <memcpy>
 800eebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	f000 8137 	beq.w	800f136 <forward_conv2d_nl_pool+0x126a>
 800eec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eeca:	ed93 6a00 	vldr	s12, [r3]
 800eece:	3304      	adds	r3, #4
 800eed0:	67bb      	str	r3, [r7, #120]	; 0x78
 800eed2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f000 8101 	beq.w	800f0de <forward_conv2d_nl_pool+0x1212>
 800eedc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eee0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eee4:	eb03 0802 	add.w	r8, r3, r2
 800eee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eeea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eef8:	677b      	str	r3, [r7, #116]	; 0x74
 800eefa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eefe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef02:	f04f 0b00 	mov.w	fp, #0
 800ef06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f2c0 810a 	blt.w	800f124 <forward_conv2d_nl_pool+0x1258>
 800ef10:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800ef14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef16:	2300      	movs	r3, #0
 800ef18:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800ef1c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800ef20:	eb02 0c04 	add.w	ip, r2, r4
 800ef24:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef28:	4540      	cmp	r0, r8
 800ef2a:	bf94      	ite	ls
 800ef2c:	ebc3 0300 	rsbls	r3, r3, r0
 800ef30:	ebc3 0308 	rsbhi	r3, r3, r8
 800ef34:	eba2 0903 	sub.w	r9, r2, r3
 800ef38:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800ef3c:	1ac4      	subs	r4, r0, r3
 800ef3e:	fb03 f302 	mul.w	r3, r3, r2
 800ef42:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ef46:	2a00      	cmp	r2, #0
 800ef48:	f340 80e9 	ble.w	800f11e <forward_conv2d_nl_pool+0x1252>
 800ef4c:	f023 050f 	bic.w	r5, r3, #15
 800ef50:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800ef54:	1e68      	subs	r0, r5, #1
 800ef56:	0900      	lsrs	r0, r0, #4
 800ef58:	3001      	adds	r0, #1
 800ef5a:	fb06 f204 	mul.w	r2, r6, r4
 800ef5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ef60:	0102      	lsls	r2, r0, #4
 800ef62:	62ba      	str	r2, [r7, #40]	; 0x28
 800ef64:	fb06 f909 	mul.w	r9, r6, r9
 800ef68:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800ef6c:	eef0 6a46 	vmov.f32	s13, s12
 800ef70:	f04f 0e00 	mov.w	lr, #0
 800ef74:	4662      	mov	r2, ip
 800ef76:	2d00      	cmp	r5, #0
 800ef78:	f340 80cf 	ble.w	800f11a <forward_conv2d_nl_pool+0x124e>
 800ef7c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800ef80:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800ef84:	2600      	movs	r6, #0
 800ef86:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800ef8a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800ef8e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800ef92:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800ef96:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800ef9a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800ef9e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800efa2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800efa6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800efaa:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800efae:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800efb2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800efb6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800efba:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800efbe:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800efc2:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800efc6:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800efca:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800efce:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800efd2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800efd6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800efda:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800efde:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800efe2:	ed50 3a04 	vldr	s7, [r0, #-16]
 800efe6:	ed14 4a04 	vldr	s8, [r4, #-16]
 800efea:	ed54 4a03 	vldr	s9, [r4, #-12]
 800efee:	ed10 5a03 	vldr	s10, [r0, #-12]
 800eff2:	ed50 5a02 	vldr	s11, [r0, #-8]
 800eff6:	ed14 7a02 	vldr	s14, [r4, #-8]
 800effa:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800effe:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800f002:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800f006:	3610      	adds	r6, #16
 800f008:	42ae      	cmp	r6, r5
 800f00a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800f00e:	ed50 ea01 	vldr	s29, [r0, #-4]
 800f012:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800f016:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800f01a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800f01e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800f022:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800f026:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800f02a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800f02e:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f032:	eee8 7a80 	vfma.f32	s15, s17, s0
 800f036:	eee0 7a81 	vfma.f32	s15, s1, s2
 800f03a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800f03e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800f042:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f046:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f04a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f04e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800f052:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f056:	db96      	blt.n	800ef86 <forward_conv2d_nl_pool+0x10ba>
 800f058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f05a:	4451      	add	r1, sl
 800f05c:	4452      	add	r2, sl
 800f05e:	4283      	cmp	r3, r0
 800f060:	dd0f      	ble.n	800f082 <forward_conv2d_nl_pool+0x11b6>
 800f062:	4604      	mov	r4, r0
 800f064:	468c      	mov	ip, r1
 800f066:	4616      	mov	r6, r2
 800f068:	ecb6 7a01 	vldmia	r6!, {s14}
 800f06c:	ecfc 7a01 	vldmia	ip!, {s15}
 800f070:	3401      	adds	r4, #1
 800f072:	42a3      	cmp	r3, r4
 800f074:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f078:	d1f6      	bne.n	800f068 <forward_conv2d_nl_pool+0x119c>
 800f07a:	1a18      	subs	r0, r3, r0
 800f07c:	0080      	lsls	r0, r0, #2
 800f07e:	4402      	add	r2, r0
 800f080:	4401      	add	r1, r0
 800f082:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f084:	4402      	add	r2, r0
 800f086:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800f08a:	f10e 0e01 	add.w	lr, lr, #1
 800f08e:	4570      	cmp	r0, lr
 800f090:	4449      	add	r1, r9
 800f092:	f47f af70 	bne.w	800ef76 <forward_conv2d_nl_pool+0x10aa>
 800f096:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800f09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f09c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f0a0:	edc3 6a00 	vstr	s13, [r3]
 800f0a4:	4608      	mov	r0, r1
 800f0a6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800f0aa:	440b      	add	r3, r1
 800f0ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800f0b0:	677b      	str	r3, [r7, #116]	; 0x74
 800f0b2:	4410      	add	r0, r2
 800f0b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0b6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800f0ba:	4608      	mov	r0, r1
 800f0bc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800f0c0:	4418      	add	r0, r3
 800f0c2:	1acb      	subs	r3, r1, r3
 800f0c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f0c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f0cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800f0d0:	f10b 0b01 	add.w	fp, fp, #1
 800f0d4:	455b      	cmp	r3, fp
 800f0d6:	eba8 0802 	sub.w	r8, r8, r2
 800f0da:	f47f af14 	bne.w	800ef06 <forward_conv2d_nl_pool+0x103a>
 800f0de:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800f0e2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800f0e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f0ea:	440a      	add	r2, r1
 800f0ec:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800f0f0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f0f4:	3204      	adds	r2, #4
 800f0f6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800f0fa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f0fe:	3301      	adds	r3, #1
 800f100:	429a      	cmp	r2, r3
 800f102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f106:	f47f aecf 	bne.w	800eea8 <forward_conv2d_nl_pool+0xfdc>
 800f10a:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800f10e:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800f112:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800f116:	f7ff ba23 	b.w	800e560 <forward_conv2d_nl_pool+0x694>
 800f11a:	2000      	movs	r0, #0
 800f11c:	e79f      	b.n	800f05e <forward_conv2d_nl_pool+0x1192>
 800f11e:	eef0 6a46 	vmov.f32	s13, s12
 800f122:	e7b8      	b.n	800f096 <forward_conv2d_nl_pool+0x11ca>
 800f124:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f128:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f12c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800f130:	eba8 0303 	sub.w	r3, r8, r3
 800f134:	e6f0      	b.n	800ef18 <forward_conv2d_nl_pool+0x104c>
 800f136:	eeb0 6a48 	vmov.f32	s12, s16
 800f13a:	e6ca      	b.n	800eed2 <forward_conv2d_nl_pool+0x1006>

0800f13c <forward_dense>:
 800f13c:	6983      	ldr	r3, [r0, #24]
 800f13e:	881a      	ldrh	r2, [r3, #0]
 800f140:	2a00      	cmp	r2, #0
 800f142:	f000 80b5 	beq.w	800f2b0 <forward_dense+0x174>
 800f146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14a:	ed2d 8b10 	vpush	{d8-d15}
 800f14e:	685f      	ldr	r7, [r3, #4]
 800f150:	687e      	ldr	r6, [r7, #4]
 800f152:	b091      	sub	sp, #68	; 0x44
 800f154:	b106      	cbz	r6, 800f158 <forward_dense+0x1c>
 800f156:	6836      	ldr	r6, [r6, #0]
 800f158:	2a01      	cmp	r2, #1
 800f15a:	f240 80a6 	bls.w	800f2aa <forward_dense+0x16e>
 800f15e:	693d      	ldr	r5, [r7, #16]
 800f160:	b105      	cbz	r5, 800f164 <forward_dense+0x28>
 800f162:	682d      	ldr	r5, [r5, #0]
 800f164:	2a02      	cmp	r2, #2
 800f166:	f000 80a5 	beq.w	800f2b4 <forward_dense+0x178>
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f000 821b 	beq.w	800f5a8 <forward_dense+0x46c>
 800f172:	6819      	ldr	r1, [r3, #0]
 800f174:	9106      	str	r1, [sp, #24]
 800f176:	f117 0118 	adds.w	r1, r7, #24
 800f17a:	f000 80c9 	beq.w	800f310 <forward_dense+0x1d4>
 800f17e:	8b39      	ldrh	r1, [r7, #24]
 800f180:	2901      	cmp	r1, #1
 800f182:	f240 820e 	bls.w	800f5a2 <forward_dense+0x466>
 800f186:	2b00      	cmp	r3, #0
 800f188:	f000 80c4 	beq.w	800f314 <forward_dense+0x1d8>
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	9307      	str	r3, [sp, #28]
 800f190:	9b06      	ldr	r3, [sp, #24]
 800f192:	68ec      	ldr	r4, [r5, #12]
 800f194:	6998      	ldr	r0, [r3, #24]
 800f196:	68f1      	ldr	r1, [r6, #12]
 800f198:	6803      	ldr	r3, [r0, #0]
 800f19a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f19e:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800f1a2:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800f1a6:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800f1aa:	fa49 f101 	asr.w	r1, r9, r1
 800f1ae:	910b      	str	r1, [sp, #44]	; 0x2c
 800f1b0:	2a03      	cmp	r2, #3
 800f1b2:	fb0e f10c 	mul.w	r1, lr, ip
 800f1b6:	6864      	ldr	r4, [r4, #4]
 800f1b8:	9108      	str	r1, [sp, #32]
 800f1ba:	f000 81de 	beq.w	800f57a <forward_dense+0x43e>
 800f1be:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800f1c0:	b117      	cbz	r7, 800f1c8 <forward_dense+0x8c>
 800f1c2:	683f      	ldr	r7, [r7, #0]
 800f1c4:	b107      	cbz	r7, 800f1c8 <forward_dense+0x8c>
 800f1c6:	69bf      	ldr	r7, [r7, #24]
 800f1c8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800f1cc:	2b04      	cmp	r3, #4
 800f1ce:	f000 81d7 	beq.w	800f580 <forward_dense+0x444>
 800f1d2:	2b08      	cmp	r3, #8
 800f1d4:	f000 81d4 	beq.w	800f580 <forward_dense+0x444>
 800f1d8:	f04f 0a00 	mov.w	sl, #0
 800f1dc:	69ab      	ldr	r3, [r5, #24]
 800f1de:	69b2      	ldr	r2, [r6, #24]
 800f1e0:	6899      	ldr	r1, [r3, #8]
 800f1e2:	9b06      	ldr	r3, [sp, #24]
 800f1e4:	9104      	str	r1, [sp, #16]
 800f1e6:	695b      	ldr	r3, [r3, #20]
 800f1e8:	6897      	ldr	r7, [r2, #8]
 800f1ea:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f1ee:	00a3      	lsls	r3, r4, #2
 800f1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f2:	18ce      	adds	r6, r1, r3
 800f1f4:	9b08      	ldr	r3, [sp, #32]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d052      	beq.n	800f2a0 <forward_dense+0x164>
 800f1fa:	f1a8 0310 	sub.w	r3, r8, #16
 800f1fe:	091b      	lsrs	r3, r3, #4
 800f200:	3301      	adds	r3, #1
 800f202:	019b      	lsls	r3, r3, #6
 800f204:	930c      	str	r3, [sp, #48]	; 0x30
 800f206:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800f20a:	930a      	str	r3, [sp, #40]	; 0x28
 800f20c:	2300      	movs	r3, #0
 800f20e:	9305      	str	r3, [sp, #20]
 800f210:	eddf aace 	vldr	s21, [pc, #824]	; 800f54c <forward_dense+0x410>
 800f214:	f008 030f 	and.w	r3, r8, #15
 800f218:	930d      	str	r3, [sp, #52]	; 0x34
 800f21a:	9b06      	ldr	r3, [sp, #24]
 800f21c:	699b      	ldr	r3, [r3, #24]
 800f21e:	689d      	ldr	r5, [r3, #8]
 800f220:	9b07      	ldr	r3, [sp, #28]
 800f222:	2b00      	cmp	r3, #0
 800f224:	f000 818f 	beq.w	800f546 <forward_dense+0x40a>
 800f228:	699b      	ldr	r3, [r3, #24]
 800f22a:	689c      	ldr	r4, [r3, #8]
 800f22c:	9b04      	ldr	r3, [sp, #16]
 800f22e:	f1ba 0f00 	cmp.w	sl, #0
 800f232:	d071      	beq.n	800f318 <forward_dense+0x1dc>
 800f234:	42b3      	cmp	r3, r6
 800f236:	d229      	bcs.n	800f28c <forward_dense+0x150>
 800f238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f23a:	469b      	mov	fp, r3
 800f23c:	ab0f      	add	r3, sp, #60	; 0x3c
 800f23e:	9303      	str	r3, [sp, #12]
 800f240:	2a04      	cmp	r2, #4
 800f242:	4633      	mov	r3, r6
 800f244:	4646      	mov	r6, r8
 800f246:	4698      	mov	r8, r3
 800f248:	d037      	beq.n	800f2ba <forward_dense+0x17e>
 800f24a:	2c00      	cmp	r4, #0
 800f24c:	f000 8180 	beq.w	800f550 <forward_dense+0x414>
 800f250:	f8d4 c000 	ldr.w	ip, [r4]
 800f254:	9803      	ldr	r0, [sp, #12]
 800f256:	9600      	str	r6, [sp, #0]
 800f258:	463b      	mov	r3, r7
 800f25a:	4629      	mov	r1, r5
 800f25c:	4652      	mov	r2, sl
 800f25e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f262:	f7fd fc85 	bl	800cb70 <ai_dict8_dot_array_f32>
 800f266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f268:	f84b 3b04 	str.w	r3, [fp], #4
 800f26c:	45c3      	cmp	fp, r8
 800f26e:	f104 0404 	add.w	r4, r4, #4
 800f272:	444d      	add	r5, r9
 800f274:	d3e9      	bcc.n	800f24a <forward_dense+0x10e>
 800f276:	4643      	mov	r3, r8
 800f278:	46b0      	mov	r8, r6
 800f27a:	461e      	mov	r6, r3
 800f27c:	9a04      	ldr	r2, [sp, #16]
 800f27e:	43d3      	mvns	r3, r2
 800f280:	4433      	add	r3, r6
 800f282:	f023 0303 	bic.w	r3, r3, #3
 800f286:	3304      	adds	r3, #4
 800f288:	18d3      	adds	r3, r2, r3
 800f28a:	9304      	str	r3, [sp, #16]
 800f28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f28e:	9b05      	ldr	r3, [sp, #20]
 800f290:	4417      	add	r7, r2
 800f292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f294:	4416      	add	r6, r2
 800f296:	9a08      	ldr	r2, [sp, #32]
 800f298:	3301      	adds	r3, #1
 800f29a:	4293      	cmp	r3, r2
 800f29c:	9305      	str	r3, [sp, #20]
 800f29e:	d1bc      	bne.n	800f21a <forward_dense+0xde>
 800f2a0:	b011      	add	sp, #68	; 0x44
 800f2a2:	ecbd 8b10 	vpop	{d8-d15}
 800f2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	deff      	udf	#255	; 0xff
 800f2b0:	6853      	ldr	r3, [r2, #4]
 800f2b2:	deff      	udf	#255	; 0xff
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	deff      	udf	#255	; 0xff
 800f2ba:	b1a4      	cbz	r4, 800f2e6 <forward_dense+0x1aa>
 800f2bc:	f8d4 c000 	ldr.w	ip, [r4]
 800f2c0:	9803      	ldr	r0, [sp, #12]
 800f2c2:	9600      	str	r6, [sp, #0]
 800f2c4:	463b      	mov	r3, r7
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	4652      	mov	r2, sl
 800f2ca:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f2ce:	f7fd fd1d 	bl	800cd0c <ai_dict4_dot_array_f32>
 800f2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2d4:	f84b 3b04 	str.w	r3, [fp], #4
 800f2d8:	45c3      	cmp	fp, r8
 800f2da:	f104 0404 	add.w	r4, r4, #4
 800f2de:	444d      	add	r5, r9
 800f2e0:	d2c9      	bcs.n	800f276 <forward_dense+0x13a>
 800f2e2:	2c00      	cmp	r4, #0
 800f2e4:	d1ea      	bne.n	800f2bc <forward_dense+0x180>
 800f2e6:	4634      	mov	r4, r6
 800f2e8:	4646      	mov	r6, r8
 800f2ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f2ee:	9400      	str	r4, [sp, #0]
 800f2f0:	463b      	mov	r3, r7
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	4652      	mov	r2, sl
 800f2f6:	4640      	mov	r0, r8
 800f2f8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800f2fc:	f7fd fd06 	bl	800cd0c <ai_dict4_dot_array_f32>
 800f300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f302:	f84b 3b04 	str.w	r3, [fp], #4
 800f306:	45b3      	cmp	fp, r6
 800f308:	444d      	add	r5, r9
 800f30a:	d3f0      	bcc.n	800f2ee <forward_dense+0x1b2>
 800f30c:	46a0      	mov	r8, r4
 800f30e:	e7b5      	b.n	800f27c <forward_dense+0x140>
 800f310:	9107      	str	r1, [sp, #28]
 800f312:	e73d      	b.n	800f190 <forward_dense+0x54>
 800f314:	9307      	str	r3, [sp, #28]
 800f316:	e73b      	b.n	800f190 <forward_dense+0x54>
 800f318:	42b3      	cmp	r3, r6
 800f31a:	d2b7      	bcs.n	800f28c <forward_dense+0x150>
 800f31c:	4618      	mov	r0, r3
 800f31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f320:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800f324:	eb07 0c03 	add.w	ip, r7, r3
 800f328:	469e      	mov	lr, r3
 800f32a:	2c00      	cmp	r4, #0
 800f32c:	f000 80ff 	beq.w	800f52e <forward_dense+0x3f2>
 800f330:	f1b8 0f0f 	cmp.w	r8, #15
 800f334:	edd4 fa00 	vldr	s31, [r4]
 800f338:	eddf 6a84 	vldr	s13, [pc, #528]	; 800f54c <forward_dense+0x410>
 800f33c:	f104 0404 	add.w	r4, r4, #4
 800f340:	f240 80fd 	bls.w	800f53e <forward_dense+0x402>
 800f344:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f348:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800f34c:	4641      	mov	r1, r8
 800f34e:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800f352:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800f356:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800f35a:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800f35e:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800f362:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800f366:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800f36a:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800f36e:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800f372:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800f376:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800f37a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800f37e:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800f382:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800f386:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800f38a:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800f38e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800f392:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800f396:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800f39a:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800f39e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800f3a2:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800f3a6:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800f3aa:	ed12 4a04 	vldr	s8, [r2, #-16]
 800f3ae:	ed53 4a04 	vldr	s9, [r3, #-16]
 800f3b2:	ed13 5a03 	vldr	s10, [r3, #-12]
 800f3b6:	ed52 5a03 	vldr	s11, [r2, #-12]
 800f3ba:	ed13 6a02 	vldr	s12, [r3, #-8]
 800f3be:	ed12 7a02 	vldr	s14, [r2, #-8]
 800f3c2:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800f3c6:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800f3ca:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800f3ce:	3910      	subs	r1, #16
 800f3d0:	290f      	cmp	r1, #15
 800f3d2:	ed52 ea01 	vldr	s29, [r2, #-4]
 800f3d6:	ed13 ea01 	vldr	s28, [r3, #-4]
 800f3da:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800f3de:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800f3e2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800f3e6:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800f3ea:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800f3ee:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800f3f2:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f3f6:	eee8 7a88 	vfma.f32	s15, s17, s16
 800f3fa:	eee0 7a20 	vfma.f32	s15, s0, s1
 800f3fe:	eee1 7a21 	vfma.f32	s15, s2, s3
 800f402:	eee2 7a22 	vfma.f32	s15, s4, s5
 800f406:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f40a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f40e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f412:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f416:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800f41a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f41e:	d896      	bhi.n	800f34e <forward_dense+0x212>
 800f420:	eb05 010e 	add.w	r1, r5, lr
 800f424:	465b      	mov	r3, fp
 800f426:	4662      	mov	r2, ip
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d075      	beq.n	800f518 <forward_dense+0x3dc>
 800f42c:	ed91 7a00 	vldr	s14, [r1]
 800f430:	edd2 7a00 	vldr	s15, [r2]
 800f434:	2b01      	cmp	r3, #1
 800f436:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f43a:	d06d      	beq.n	800f518 <forward_dense+0x3dc>
 800f43c:	ed91 7a01 	vldr	s14, [r1, #4]
 800f440:	edd2 7a01 	vldr	s15, [r2, #4]
 800f444:	2b02      	cmp	r3, #2
 800f446:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f44a:	d065      	beq.n	800f518 <forward_dense+0x3dc>
 800f44c:	ed91 7a02 	vldr	s14, [r1, #8]
 800f450:	edd2 7a02 	vldr	s15, [r2, #8]
 800f454:	2b03      	cmp	r3, #3
 800f456:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f45a:	d05d      	beq.n	800f518 <forward_dense+0x3dc>
 800f45c:	ed91 7a03 	vldr	s14, [r1, #12]
 800f460:	edd2 7a03 	vldr	s15, [r2, #12]
 800f464:	2b04      	cmp	r3, #4
 800f466:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f46a:	d055      	beq.n	800f518 <forward_dense+0x3dc>
 800f46c:	ed91 7a04 	vldr	s14, [r1, #16]
 800f470:	edd2 7a04 	vldr	s15, [r2, #16]
 800f474:	2b05      	cmp	r3, #5
 800f476:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f47a:	d04d      	beq.n	800f518 <forward_dense+0x3dc>
 800f47c:	ed91 7a05 	vldr	s14, [r1, #20]
 800f480:	edd2 7a05 	vldr	s15, [r2, #20]
 800f484:	2b06      	cmp	r3, #6
 800f486:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f48a:	d045      	beq.n	800f518 <forward_dense+0x3dc>
 800f48c:	ed91 7a06 	vldr	s14, [r1, #24]
 800f490:	edd2 7a06 	vldr	s15, [r2, #24]
 800f494:	2b07      	cmp	r3, #7
 800f496:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f49a:	d03d      	beq.n	800f518 <forward_dense+0x3dc>
 800f49c:	ed91 7a07 	vldr	s14, [r1, #28]
 800f4a0:	edd2 7a07 	vldr	s15, [r2, #28]
 800f4a4:	2b08      	cmp	r3, #8
 800f4a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4aa:	d035      	beq.n	800f518 <forward_dense+0x3dc>
 800f4ac:	ed91 7a08 	vldr	s14, [r1, #32]
 800f4b0:	edd2 7a08 	vldr	s15, [r2, #32]
 800f4b4:	2b09      	cmp	r3, #9
 800f4b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4ba:	d02d      	beq.n	800f518 <forward_dense+0x3dc>
 800f4bc:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800f4c0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800f4c4:	2b0a      	cmp	r3, #10
 800f4c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4ca:	d025      	beq.n	800f518 <forward_dense+0x3dc>
 800f4cc:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800f4d0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800f4d4:	2b0b      	cmp	r3, #11
 800f4d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4da:	d01d      	beq.n	800f518 <forward_dense+0x3dc>
 800f4dc:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800f4e0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800f4e4:	2b0c      	cmp	r3, #12
 800f4e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4ea:	d015      	beq.n	800f518 <forward_dense+0x3dc>
 800f4ec:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800f4f0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800f4f4:	2b0d      	cmp	r3, #13
 800f4f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4fa:	d00d      	beq.n	800f518 <forward_dense+0x3dc>
 800f4fc:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800f500:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800f504:	2b0e      	cmp	r3, #14
 800f506:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f50a:	d005      	beq.n	800f518 <forward_dense+0x3dc>
 800f50c:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800f510:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800f514:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f518:	444d      	add	r5, r9
 800f51a:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800f51e:	ece0 6a01 	vstmia	r0!, {s13}
 800f522:	42b0      	cmp	r0, r6
 800f524:	f4bf aeaa 	bcs.w	800f27c <forward_dense+0x140>
 800f528:	2c00      	cmp	r4, #0
 800f52a:	f47f af01 	bne.w	800f330 <forward_dense+0x1f4>
 800f52e:	f1b8 0f0f 	cmp.w	r8, #15
 800f532:	eef0 fa6a 	vmov.f32	s31, s21
 800f536:	eddf 6a05 	vldr	s13, [pc, #20]	; 800f54c <forward_dense+0x410>
 800f53a:	f63f af03 	bhi.w	800f344 <forward_dense+0x208>
 800f53e:	4643      	mov	r3, r8
 800f540:	4629      	mov	r1, r5
 800f542:	463a      	mov	r2, r7
 800f544:	e770      	b.n	800f428 <forward_dense+0x2ec>
 800f546:	461c      	mov	r4, r3
 800f548:	e670      	b.n	800f22c <forward_dense+0xf0>
 800f54a:	bf00      	nop
 800f54c:	00000000 	.word	0x00000000
 800f550:	4634      	mov	r4, r6
 800f552:	4646      	mov	r6, r8
 800f554:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f558:	9400      	str	r4, [sp, #0]
 800f55a:	463b      	mov	r3, r7
 800f55c:	4629      	mov	r1, r5
 800f55e:	4652      	mov	r2, sl
 800f560:	4640      	mov	r0, r8
 800f562:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800f566:	f7fd fb03 	bl	800cb70 <ai_dict8_dot_array_f32>
 800f56a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f56c:	f84b 3b04 	str.w	r3, [fp], #4
 800f570:	455e      	cmp	r6, fp
 800f572:	444d      	add	r5, r9
 800f574:	d8f0      	bhi.n	800f558 <forward_dense+0x41c>
 800f576:	46a0      	mov	r8, r4
 800f578:	e680      	b.n	800f27c <forward_dense+0x140>
 800f57a:	2300      	movs	r3, #0
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	deff      	udf	#255	; 0xff
 800f580:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f584:	2f00      	cmp	r7, #0
 800f586:	f43f ae29 	beq.w	800f1dc <forward_dense+0xa0>
 800f58a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f58e:	f000 fc4f 	bl	800fe30 <ai_array_get_byte_size>
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	4602      	mov	r2, r0
 800f596:	4651      	mov	r1, sl
 800f598:	4618      	mov	r0, r3
 800f59a:	f000 fccd 	bl	800ff38 <memcpy>
 800f59e:	4682      	mov	sl, r0
 800f5a0:	e61c      	b.n	800f1dc <forward_dense+0xa0>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	9307      	str	r3, [sp, #28]
 800f5a6:	e5f3      	b.n	800f190 <forward_dense+0x54>
 800f5a8:	9306      	str	r3, [sp, #24]
 800f5aa:	e5e4      	b.n	800f176 <forward_dense+0x3a>

0800f5ac <nl_func_relu_array_f32>:
 800f5ac:	b410      	push	{r4}
 800f5ae:	698c      	ldr	r4, [r1, #24]
 800f5b0:	6981      	ldr	r1, [r0, #24]
 800f5b2:	68a3      	ldr	r3, [r4, #8]
 800f5b4:	6889      	ldr	r1, [r1, #8]
 800f5b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f5ba:	3a01      	subs	r2, #1
 800f5bc:	0092      	lsls	r2, r2, #2
 800f5be:	189b      	adds	r3, r3, r2
 800f5c0:	d216      	bcs.n	800f5f0 <nl_func_relu_array_f32+0x44>
 800f5c2:	3204      	adds	r2, #4
 800f5c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f5f8 <nl_func_relu_array_f32+0x4c>
 800f5c8:	4411      	add	r1, r2
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f5d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d8:	bfb8      	it	lt
 800f5da:	eef0 7a47 	vmovlt.f32	s15, s14
 800f5de:	ed61 7a01 	vstmdb	r1!, {s15}
 800f5e2:	68a0      	ldr	r0, [r4, #8]
 800f5e4:	f1a3 0208 	sub.w	r2, r3, #8
 800f5e8:	4290      	cmp	r0, r2
 800f5ea:	f1a3 0304 	sub.w	r3, r3, #4
 800f5ee:	d9ed      	bls.n	800f5cc <nl_func_relu_array_f32+0x20>
 800f5f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	00000000 	.word	0x00000000

0800f5fc <nl_func_sm_array_f32>:
 800f5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f600:	ed2d 8b04 	vpush	{d8-d9}
 800f604:	b089      	sub	sp, #36	; 0x24
 800f606:	698f      	ldr	r7, [r1, #24]
 800f608:	6984      	ldr	r4, [r0, #24]
 800f60a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800f60e:	68bd      	ldr	r5, [r7, #8]
 800f610:	9402      	str	r4, [sp, #8]
 800f612:	4626      	mov	r6, r4
 800f614:	4696      	mov	lr, r2
 800f616:	eba2 020c 	sub.w	r2, r2, ip
 800f61a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800f61e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	68b6      	ldr	r6, [r6, #8]
 800f624:	ebae 0e04 	sub.w	lr, lr, r4
 800f628:	4295      	cmp	r5, r2
 800f62a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800f62e:	d354      	bcc.n	800f6da <nl_func_sm_array_f32+0xde>
 800f630:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f634:	f1cc 0200 	rsb	r2, ip, #0
 800f638:	00a4      	lsls	r4, r4, #2
 800f63a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800f63e:	9303      	str	r3, [sp, #12]
 800f640:	9204      	str	r2, [sp, #16]
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	4262      	negs	r2, r4
 800f646:	9205      	str	r2, [sp, #20]
 800f648:	9301      	str	r3, [sp, #4]
 800f64a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800f64e:	9b02      	ldr	r3, [sp, #8]
 800f650:	9a07      	ldr	r2, [sp, #28]
 800f652:	60bd      	str	r5, [r7, #8]
 800f654:	609e      	str	r6, [r3, #8]
 800f656:	9b06      	ldr	r3, [sp, #24]
 800f658:	6992      	ldr	r2, [r2, #24]
 800f65a:	699b      	ldr	r3, [r3, #24]
 800f65c:	6894      	ldr	r4, [r2, #8]
 800f65e:	9a03      	ldr	r2, [sp, #12]
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	2a01      	cmp	r2, #1
 800f664:	ed93 8a00 	vldr	s16, [r3]
 800f668:	d940      	bls.n	800f6ec <nl_func_sm_array_f32+0xf0>
 800f66a:	9901      	ldr	r1, [sp, #4]
 800f66c:	1d1a      	adds	r2, r3, #4
 800f66e:	eb03 0b01 	add.w	fp, r3, r1
 800f672:	ecf2 7a01 	vldmia	r2!, {s15}
 800f676:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67e:	bfb8      	it	lt
 800f680:	eeb0 8a67 	vmovlt.f32	s16, s15
 800f684:	4593      	cmp	fp, r2
 800f686:	d1f4      	bne.n	800f672 <nl_func_sm_array_f32+0x76>
 800f688:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800f6f8 <nl_func_sm_array_f32+0xfc>
 800f68c:	469a      	mov	sl, r3
 800f68e:	46a1      	mov	r9, r4
 800f690:	46a0      	mov	r8, r4
 800f692:	ecba 0a01 	vldmia	sl!, {s0}
 800f696:	ee30 0a48 	vsub.f32	s0, s0, s16
 800f69a:	f005 f8f3 	bl	8014884 <expf>
 800f69e:	45d3      	cmp	fp, sl
 800f6a0:	eca8 0a01 	vstmia	r8!, {s0}
 800f6a4:	ee78 8a80 	vadd.f32	s17, s17, s0
 800f6a8:	d1f3      	bne.n	800f692 <nl_func_sm_array_f32+0x96>
 800f6aa:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b2:	d00b      	beq.n	800f6cc <nl_func_sm_array_f32+0xd0>
 800f6b4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800f6b8:	9b01      	ldr	r3, [sp, #4]
 800f6ba:	441c      	add	r4, r3
 800f6bc:	edd9 7a00 	vldr	s15, [r9]
 800f6c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6c4:	ece9 7a01 	vstmia	r9!, {s15}
 800f6c8:	454c      	cmp	r4, r9
 800f6ca:	d1f7      	bne.n	800f6bc <nl_func_sm_array_f32+0xc0>
 800f6cc:	9b04      	ldr	r3, [sp, #16]
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	441d      	add	r5, r3
 800f6d2:	9b05      	ldr	r3, [sp, #20]
 800f6d4:	42aa      	cmp	r2, r5
 800f6d6:	441e      	add	r6, r3
 800f6d8:	d9b9      	bls.n	800f64e <nl_func_sm_array_f32+0x52>
 800f6da:	60ba      	str	r2, [r7, #8]
 800f6dc:	9a02      	ldr	r2, [sp, #8]
 800f6de:	68d3      	ldr	r3, [r2, #12]
 800f6e0:	6093      	str	r3, [r2, #8]
 800f6e2:	b009      	add	sp, #36	; 0x24
 800f6e4:	ecbd 8b04 	vpop	{d8-d9}
 800f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ec:	2a00      	cmp	r2, #0
 800f6ee:	d0ed      	beq.n	800f6cc <nl_func_sm_array_f32+0xd0>
 800f6f0:	9a01      	ldr	r2, [sp, #4]
 800f6f2:	eb03 0b02 	add.w	fp, r3, r2
 800f6f6:	e7c7      	b.n	800f688 <nl_func_sm_array_f32+0x8c>
 800f6f8:	00000000 	.word	0x00000000

0800f6fc <nl_func_relu_generic_array_f32>:
 800f6fc:	b430      	push	{r4, r5}
 800f6fe:	6989      	ldr	r1, [r1, #24]
 800f700:	6980      	ldr	r0, [r0, #24]
 800f702:	edd3 6a02 	vldr	s13, [r3, #8]
 800f706:	688c      	ldr	r4, [r1, #8]
 800f708:	6880      	ldr	r0, [r0, #8]
 800f70a:	ed93 7a00 	vldr	s14, [r3]
 800f70e:	ed93 6a01 	vldr	s12, [r3, #4]
 800f712:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f716:	3a01      	subs	r2, #1
 800f718:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f71c:	0092      	lsls	r2, r2, #2
 800f71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f722:	4410      	add	r0, r2
 800f724:	4422      	add	r2, r4
 800f726:	d421      	bmi.n	800f76c <nl_func_relu_generic_array_f32+0x70>
 800f728:	4294      	cmp	r4, r2
 800f72a:	d83d      	bhi.n	800f7a8 <nl_func_relu_generic_array_f32+0xac>
 800f72c:	1d13      	adds	r3, r2, #4
 800f72e:	1d02      	adds	r2, r0, #4
 800f730:	e010      	b.n	800f754 <nl_func_relu_generic_array_f32+0x58>
 800f732:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f73a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800f73e:	d501      	bpl.n	800f744 <nl_func_relu_generic_array_f32+0x48>
 800f740:	ee65 7a86 	vmul.f32	s15, s11, s12
 800f744:	ed62 7a01 	vstmdb	r2!, {s15}
 800f748:	6888      	ldr	r0, [r1, #8]
 800f74a:	f1a3 0408 	sub.w	r4, r3, #8
 800f74e:	4284      	cmp	r4, r0
 800f750:	462b      	mov	r3, r5
 800f752:	d329      	bcc.n	800f7a8 <nl_func_relu_generic_array_f32+0xac>
 800f754:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f758:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f760:	f1a3 0504 	sub.w	r5, r3, #4
 800f764:	d4e5      	bmi.n	800f732 <nl_func_relu_generic_array_f32+0x36>
 800f766:	eef0 7a66 	vmov.f32	s15, s13
 800f76a:	e7eb      	b.n	800f744 <nl_func_relu_generic_array_f32+0x48>
 800f76c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f774:	d01a      	beq.n	800f7ac <nl_func_relu_generic_array_f32+0xb0>
 800f776:	4294      	cmp	r4, r2
 800f778:	d816      	bhi.n	800f7a8 <nl_func_relu_generic_array_f32+0xac>
 800f77a:	1d13      	adds	r3, r2, #4
 800f77c:	1d02      	adds	r2, r0, #4
 800f77e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f782:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f78a:	f1a3 0408 	sub.w	r4, r3, #8
 800f78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f792:	f1a3 0004 	sub.w	r0, r3, #4
 800f796:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f79a:	4623      	mov	r3, r4
 800f79c:	d51e      	bpl.n	800f7dc <nl_func_relu_generic_array_f32+0xe0>
 800f79e:	ed62 6a01 	vstmdb	r2!, {s13}
 800f7a2:	688b      	ldr	r3, [r1, #8]
 800f7a4:	42a3      	cmp	r3, r4
 800f7a6:	d91e      	bls.n	800f7e6 <nl_func_relu_generic_array_f32+0xea>
 800f7a8:	bc30      	pop	{r4, r5}
 800f7aa:	4770      	bx	lr
 800f7ac:	4294      	cmp	r4, r2
 800f7ae:	d8fb      	bhi.n	800f7a8 <nl_func_relu_generic_array_f32+0xac>
 800f7b0:	1d13      	adds	r3, r2, #4
 800f7b2:	2500      	movs	r5, #0
 800f7b4:	1d02      	adds	r2, r0, #4
 800f7b6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f7ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f7be:	f1a3 0408 	sub.w	r4, r3, #8
 800f7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c6:	f1a3 0004 	sub.w	r0, r3, #4
 800f7ca:	4623      	mov	r3, r4
 800f7cc:	db0d      	blt.n	800f7ea <nl_func_relu_generic_array_f32+0xee>
 800f7ce:	ed62 7a01 	vstmdb	r2!, {s15}
 800f7d2:	688b      	ldr	r3, [r1, #8]
 800f7d4:	42a3      	cmp	r3, r4
 800f7d6:	d8e7      	bhi.n	800f7a8 <nl_func_relu_generic_array_f32+0xac>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	e7ec      	b.n	800f7b6 <nl_func_relu_generic_array_f32+0xba>
 800f7dc:	ed62 7a01 	vstmdb	r2!, {s15}
 800f7e0:	688c      	ldr	r4, [r1, #8]
 800f7e2:	429c      	cmp	r4, r3
 800f7e4:	d8e0      	bhi.n	800f7a8 <nl_func_relu_generic_array_f32+0xac>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	e7c9      	b.n	800f77e <nl_func_relu_generic_array_f32+0x82>
 800f7ea:	f842 5d04 	str.w	r5, [r2, #-4]!
 800f7ee:	688c      	ldr	r4, [r1, #8]
 800f7f0:	429c      	cmp	r4, r3
 800f7f2:	d8d9      	bhi.n	800f7a8 <nl_func_relu_generic_array_f32+0xac>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	e7de      	b.n	800f7b6 <nl_func_relu_generic_array_f32+0xba>

0800f7f8 <forward_relu>:
 800f7f8:	6982      	ldr	r2, [r0, #24]
 800f7fa:	8813      	ldrh	r3, [r2, #0]
 800f7fc:	b333      	cbz	r3, 800f84c <forward_relu+0x54>
 800f7fe:	6852      	ldr	r2, [r2, #4]
 800f800:	6851      	ldr	r1, [r2, #4]
 800f802:	b101      	cbz	r1, 800f806 <forward_relu+0xe>
 800f804:	6809      	ldr	r1, [r1, #0]
 800f806:	2b01      	cmp	r3, #1
 800f808:	d91d      	bls.n	800f846 <forward_relu+0x4e>
 800f80a:	b4f0      	push	{r4, r5, r6, r7}
 800f80c:	6917      	ldr	r7, [r2, #16]
 800f80e:	b107      	cbz	r7, 800f812 <forward_relu+0x1a>
 800f810:	683f      	ldr	r7, [r7, #0]
 800f812:	688c      	ldr	r4, [r1, #8]
 800f814:	69c3      	ldr	r3, [r0, #28]
 800f816:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d044      	beq.n	800f8a8 <forward_relu+0xb0>
 800f81e:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800f822:	2d01      	cmp	r5, #1
 800f824:	d014      	beq.n	800f850 <forward_relu+0x58>
 800f826:	2c00      	cmp	r4, #0
 800f828:	d074      	beq.n	800f914 <forward_relu+0x11c>
 800f82a:	68ce      	ldr	r6, [r1, #12]
 800f82c:	2201      	movs	r2, #1
 800f82e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f832:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f836:	42a6      	cmp	r6, r4
 800f838:	fb05 f202 	mul.w	r2, r5, r2
 800f83c:	d1f9      	bne.n	800f832 <forward_relu+0x3a>
 800f83e:	4638      	mov	r0, r7
 800f840:	bcf0      	pop	{r4, r5, r6, r7}
 800f842:	f7ff bf5b 	b.w	800f6fc <nl_func_relu_generic_array_f32>
 800f846:	2300      	movs	r3, #0
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	deff      	udf	#255	; 0xff
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	deff      	udf	#255	; 0xff
 800f850:	69ba      	ldr	r2, [r7, #24]
 800f852:	6988      	ldr	r0, [r1, #24]
 800f854:	6896      	ldr	r6, [r2, #8]
 800f856:	ed93 7a00 	vldr	s14, [r3]
 800f85a:	6882      	ldr	r2, [r0, #8]
 800f85c:	b184      	cbz	r4, 800f880 <forward_relu+0x88>
 800f85e:	68cf      	ldr	r7, [r1, #12]
 800f860:	462b      	mov	r3, r5
 800f862:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f866:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800f86a:	42a7      	cmp	r7, r4
 800f86c:	fb01 f303 	mul.w	r3, r1, r3
 800f870:	d1f9      	bne.n	800f866 <forward_relu+0x6e>
 800f872:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f876:	3b01      	subs	r3, #1
 800f878:	009b      	lsls	r3, r3, #2
 800f87a:	18d2      	adds	r2, r2, r3
 800f87c:	441e      	add	r6, r3
 800f87e:	d23f      	bcs.n	800f900 <forward_relu+0x108>
 800f880:	1d13      	adds	r3, r2, #4
 800f882:	2500      	movs	r5, #0
 800f884:	1d32      	adds	r2, r6, #4
 800f886:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f88a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f892:	f1a3 0104 	sub.w	r1, r3, #4
 800f896:	d835      	bhi.n	800f904 <forward_relu+0x10c>
 800f898:	ed62 7a01 	vstmdb	r2!, {s15}
 800f89c:	6884      	ldr	r4, [r0, #8]
 800f89e:	3b08      	subs	r3, #8
 800f8a0:	429c      	cmp	r4, r3
 800f8a2:	d82d      	bhi.n	800f900 <forward_relu+0x108>
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	e7ee      	b.n	800f886 <forward_relu+0x8e>
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	698d      	ldr	r5, [r1, #24]
 800f8ac:	6898      	ldr	r0, [r3, #8]
 800f8ae:	68ab      	ldr	r3, [r5, #8]
 800f8b0:	b184      	cbz	r4, 800f8d4 <forward_relu+0xdc>
 800f8b2:	68ce      	ldr	r6, [r1, #12]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f8ba:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800f8be:	42a6      	cmp	r6, r4
 800f8c0:	fb01 f202 	mul.w	r2, r1, r2
 800f8c4:	d1f9      	bne.n	800f8ba <forward_relu+0xc2>
 800f8c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f8ca:	3a01      	subs	r2, #1
 800f8cc:	0092      	lsls	r2, r2, #2
 800f8ce:	189b      	adds	r3, r3, r2
 800f8d0:	4410      	add	r0, r2
 800f8d2:	d215      	bcs.n	800f900 <forward_relu+0x108>
 800f8d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f918 <forward_relu+0x120>
 800f8d8:	3304      	adds	r3, #4
 800f8da:	1d01      	adds	r1, r0, #4
 800f8dc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f8e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e8:	bfb8      	it	lt
 800f8ea:	eef0 7a47 	vmovlt.f32	s15, s14
 800f8ee:	ed61 7a01 	vstmdb	r1!, {s15}
 800f8f2:	68a8      	ldr	r0, [r5, #8]
 800f8f4:	f1a3 0208 	sub.w	r2, r3, #8
 800f8f8:	4290      	cmp	r0, r2
 800f8fa:	f1a3 0304 	sub.w	r3, r3, #4
 800f8fe:	d9ed      	bls.n	800f8dc <forward_relu+0xe4>
 800f900:	bcf0      	pop	{r4, r5, r6, r7}
 800f902:	4770      	bx	lr
 800f904:	f842 5d04 	str.w	r5, [r2, #-4]!
 800f908:	6884      	ldr	r4, [r0, #8]
 800f90a:	3b08      	subs	r3, #8
 800f90c:	429c      	cmp	r4, r3
 800f90e:	d8f7      	bhi.n	800f900 <forward_relu+0x108>
 800f910:	460b      	mov	r3, r1
 800f912:	e7b8      	b.n	800f886 <forward_relu+0x8e>
 800f914:	2201      	movs	r2, #1
 800f916:	e792      	b.n	800f83e <forward_relu+0x46>
 800f918:	00000000 	.word	0x00000000

0800f91c <forward_sm>:
 800f91c:	6982      	ldr	r2, [r0, #24]
 800f91e:	8813      	ldrh	r3, [r2, #0]
 800f920:	b32b      	cbz	r3, 800f96e <forward_sm+0x52>
 800f922:	6852      	ldr	r2, [r2, #4]
 800f924:	6851      	ldr	r1, [r2, #4]
 800f926:	b101      	cbz	r1, 800f92a <forward_sm+0xe>
 800f928:	6809      	ldr	r1, [r1, #0]
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d91c      	bls.n	800f968 <forward_sm+0x4c>
 800f92e:	6913      	ldr	r3, [r2, #16]
 800f930:	b1c3      	cbz	r3, 800f964 <forward_sm+0x48>
 800f932:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f934:	6818      	ldr	r0, [r3, #0]
 800f936:	688c      	ldr	r4, [r1, #8]
 800f938:	68c3      	ldr	r3, [r0, #12]
 800f93a:	68ce      	ldr	r6, [r1, #12]
 800f93c:	685f      	ldr	r7, [r3, #4]
 800f93e:	6873      	ldr	r3, [r6, #4]
 800f940:	0a24      	lsrs	r4, r4, #8
 800f942:	b083      	sub	sp, #12
 800f944:	d015      	beq.n	800f972 <forward_sm+0x56>
 800f946:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f94a:	2201      	movs	r2, #1
 800f94c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f950:	42a6      	cmp	r6, r4
 800f952:	fb05 f202 	mul.w	r2, r5, r2
 800f956:	d1f9      	bne.n	800f94c <forward_sm+0x30>
 800f958:	e9cd 3700 	strd	r3, r7, [sp]
 800f95c:	f7ff fe4e 	bl	800f5fc <nl_func_sm_array_f32>
 800f960:	b003      	add	sp, #12
 800f962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	deff      	udf	#255	; 0xff
 800f968:	2300      	movs	r3, #0
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	deff      	udf	#255	; 0xff
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	deff      	udf	#255	; 0xff
 800f972:	2201      	movs	r2, #1
 800f974:	e9cd 3700 	strd	r3, r7, [sp]
 800f978:	f7ff fe40 	bl	800f5fc <nl_func_sm_array_f32>
 800f97c:	b003      	add	sp, #12
 800f97e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f980 <pool_func_mp_array_f32>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	b093      	sub	sp, #76	; 0x4c
 800f986:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800f98a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800f98c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800f990:	68a8      	ldr	r0, [r5, #8]
 800f992:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800f996:	9508      	str	r5, [sp, #32]
 800f998:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800f99c:	9002      	str	r0, [sp, #8]
 800f99e:	950d      	str	r5, [sp, #52]	; 0x34
 800f9a0:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800f9a4:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800f9a8:	9004      	str	r0, [sp, #16]
 800f9aa:	9506      	str	r5, [sp, #24]
 800f9ac:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800f9b0:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800f9b4:	9009      	str	r0, [sp, #36]	; 0x24
 800f9b6:	950b      	str	r5, [sp, #44]	; 0x2c
 800f9b8:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800f9bc:	9200      	str	r2, [sp, #0]
 800f9be:	468a      	mov	sl, r1
 800f9c0:	4699      	mov	r9, r3
 800f9c2:	b95c      	cbnz	r4, 800f9dc <pool_func_mp_array_f32+0x5c>
 800f9c4:	b950      	cbnz	r0, 800f9dc <pool_func_mp_array_f32+0x5c>
 800f9c6:	9b04      	ldr	r3, [sp, #16]
 800f9c8:	1a5a      	subs	r2, r3, r1
 800f9ca:	9b06      	ldr	r3, [sp, #24]
 800f9cc:	9908      	ldr	r1, [sp, #32]
 800f9ce:	3a01      	subs	r2, #1
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	fb13 2301 	smlabb	r3, r3, r1, r2
 800f9d6:	041a      	lsls	r2, r3, #16
 800f9d8:	f100 809b 	bmi.w	800fb12 <pool_func_mp_array_f32+0x192>
 800f9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f000 808b 	beq.w	800fafa <pool_func_mp_array_f32+0x17a>
 800f9e4:	9b06      	ldr	r3, [sp, #24]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f000 8087 	beq.w	800fafa <pool_func_mp_array_f32+0x17a>
 800f9ec:	f1b9 0f00 	cmp.w	r9, #0
 800f9f0:	f000 8083 	beq.w	800fafa <pool_func_mp_array_f32+0x17a>
 800f9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f6:	1b1c      	subs	r4, r3, r4
 800f9f8:	9b04      	ldr	r3, [sp, #16]
 800f9fa:	1a1b      	subs	r3, r3, r0
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	4240      	negs	r0, r0
 800fa00:	2200      	movs	r2, #0
 800fa02:	b2a1      	uxth	r1, r4
 800fa04:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa06:	b283      	uxth	r3, r0
 800fa08:	920e      	str	r2, [sp, #56]	; 0x38
 800fa0a:	910c      	str	r1, [sp, #48]	; 0x30
 800fa0c:	9310      	str	r3, [sp, #64]	; 0x40
 800fa0e:	9c06      	ldr	r4, [sp, #24]
 800fa10:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fa12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa14:	fb02 f204 	mul.w	r2, r2, r4
 800fa18:	1acb      	subs	r3, r1, r3
 800fa1a:	920a      	str	r2, [sp, #40]	; 0x28
 800fa1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa1e:	9205      	str	r2, [sp, #20]
 800fa20:	2000      	movs	r0, #0
 800fa22:	b21b      	sxth	r3, r3
 800fa24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fa26:	9303      	str	r3, [sp, #12]
 800fa28:	9007      	str	r0, [sp, #28]
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	fa0f f881 	sxth.w	r8, r1
 800fa30:	9204      	str	r2, [sp, #16]
 800fa32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa34:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800fa38:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	f04f 0e00 	mov.w	lr, #0
 800fa42:	fb09 f303 	mul.w	r3, r9, r3
 800fa46:	9301      	str	r3, [sp, #4]
 800fa48:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800fa4c:	4675      	mov	r5, lr
 800fa4e:	9903      	ldr	r1, [sp, #12]
 800fa50:	eddf 7a78 	vldr	s15, [pc, #480]	; 800fc34 <pool_func_mp_array_f32+0x2b4>
 800fa54:	4588      	cmp	r8, r1
 800fa56:	dd24      	ble.n	800faa2 <pool_func_mp_array_f32+0x122>
 800fa58:	4564      	cmp	r4, ip
 800fa5a:	dd1e      	ble.n	800fa9a <pool_func_mp_array_f32+0x11a>
 800fa5c:	2900      	cmp	r1, #0
 800fa5e:	fb0a f601 	mul.w	r6, sl, r1
 800fa62:	db1a      	blt.n	800fa9a <pool_func_mp_array_f32+0x11a>
 800fa64:	9b00      	ldr	r3, [sp, #0]
 800fa66:	4299      	cmp	r1, r3
 800fa68:	da17      	bge.n	800fa9a <pool_func_mp_array_f32+0x11a>
 800fa6a:	f1bc 0f00 	cmp.w	ip, #0
 800fa6e:	4663      	mov	r3, ip
 800fa70:	db46      	blt.n	800fb00 <pool_func_mp_array_f32+0x180>
 800fa72:	18f2      	adds	r2, r6, r3
 800fa74:	fb09 5202 	mla	r2, r9, r2, r5
 800fa78:	1c58      	adds	r0, r3, #1
 800fa7a:	459a      	cmp	sl, r3
 800fa7c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800fa80:	b203      	sxth	r3, r0
 800fa82:	dd08      	ble.n	800fa96 <pool_func_mp_array_f32+0x116>
 800fa84:	ed92 7a00 	vldr	s14, [r2]
 800fa88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fa8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa90:	bfb8      	it	lt
 800fa92:	eef0 7a47 	vmovlt.f32	s15, s14
 800fa96:	429c      	cmp	r4, r3
 800fa98:	dceb      	bgt.n	800fa72 <pool_func_mp_array_f32+0xf2>
 800fa9a:	3101      	adds	r1, #1
 800fa9c:	b209      	sxth	r1, r1
 800fa9e:	4588      	cmp	r8, r1
 800faa0:	dcda      	bgt.n	800fa58 <pool_func_mp_array_f32+0xd8>
 800faa2:	9b01      	ldr	r3, [sp, #4]
 800faa4:	f10e 0e01 	add.w	lr, lr, #1
 800faa8:	441d      	add	r5, r3
 800faaa:	9b02      	ldr	r3, [sp, #8]
 800faac:	fa0f fe8e 	sxth.w	lr, lr
 800fab0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fab4:	45ce      	cmp	lr, r9
 800fab6:	edc5 7a00 	vstr	s15, [r5]
 800faba:	4675      	mov	r5, lr
 800fabc:	dbc7      	blt.n	800fa4e <pool_func_mp_array_f32+0xce>
 800fabe:	9b07      	ldr	r3, [sp, #28]
 800fac0:	9808      	ldr	r0, [sp, #32]
 800fac2:	3301      	adds	r3, #1
 800fac4:	b219      	sxth	r1, r3
 800fac6:	9b05      	ldr	r3, [sp, #20]
 800fac8:	9107      	str	r1, [sp, #28]
 800faca:	461a      	mov	r2, r3
 800facc:	4402      	add	r2, r0
 800face:	9b04      	ldr	r3, [sp, #16]
 800fad0:	b292      	uxth	r2, r2
 800fad2:	9205      	str	r2, [sp, #20]
 800fad4:	9a06      	ldr	r2, [sp, #24]
 800fad6:	4403      	add	r3, r0
 800fad8:	b29b      	uxth	r3, r3
 800fada:	428a      	cmp	r2, r1
 800fadc:	9304      	str	r3, [sp, #16]
 800fade:	460b      	mov	r3, r1
 800fae0:	dca7      	bgt.n	800fa32 <pool_func_mp_array_f32+0xb2>
 800fae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fae4:	3301      	adds	r3, #1
 800fae6:	b21a      	sxth	r2, r3
 800fae8:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800faec:	440b      	add	r3, r1
 800faee:	b29b      	uxth	r3, r3
 800faf0:	930c      	str	r3, [sp, #48]	; 0x30
 800faf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800faf4:	920e      	str	r2, [sp, #56]	; 0x38
 800faf6:	4293      	cmp	r3, r2
 800faf8:	dc89      	bgt.n	800fa0e <pool_func_mp_array_f32+0x8e>
 800fafa:	b013      	add	sp, #76	; 0x4c
 800fafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb00:	3301      	adds	r3, #1
 800fb02:	b21b      	sxth	r3, r3
 800fb04:	42bb      	cmp	r3, r7
 800fb06:	dac6      	bge.n	800fa96 <pool_func_mp_array_f32+0x116>
 800fb08:	3301      	adds	r3, #1
 800fb0a:	b21b      	sxth	r3, r3
 800fb0c:	42bb      	cmp	r3, r7
 800fb0e:	dbf7      	blt.n	800fb00 <pool_func_mp_array_f32+0x180>
 800fb10:	e7c1      	b.n	800fa96 <pool_func_mp_array_f32+0x116>
 800fb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb14:	9a00      	ldr	r2, [sp, #0]
 800fb16:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fb18:	1a9a      	subs	r2, r3, r2
 800fb1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb1c:	3a01      	subs	r2, #1
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	fb13 2301 	smlabb	r3, r3, r1, r2
 800fb24:	041b      	lsls	r3, r3, #16
 800fb26:	f57f af59 	bpl.w	800f9dc <pool_func_mp_array_f32+0x5c>
 800fb2a:	fb0a f309 	mul.w	r3, sl, r9
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800fb34:	930e      	str	r3, [sp, #56]	; 0x38
 800fb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb38:	9001      	str	r0, [sp, #4]
 800fb3a:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800fb44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb46:	429a      	cmp	r2, r3
 800fb48:	ddd7      	ble.n	800fafa <pool_func_mp_array_f32+0x17a>
 800fb4a:	9a00      	ldr	r2, [sp, #0]
 800fb4c:	9906      	ldr	r1, [sp, #24]
 800fb4e:	fa0f f882 	sxth.w	r8, r2
 800fb52:	2900      	cmp	r1, #0
 800fb54:	d062      	beq.n	800fc1c <pool_func_mp_array_f32+0x29c>
 800fb56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb58:	fb01 f303 	mul.w	r3, r1, r3
 800fb5c:	1a12      	subs	r2, r2, r0
 800fb5e:	9305      	str	r3, [sp, #20]
 800fb60:	b213      	sxth	r3, r2
 800fb62:	9307      	str	r3, [sp, #28]
 800fb64:	f1b9 0f00 	cmp.w	r9, #0
 800fb68:	d058      	beq.n	800fc1c <pool_func_mp_array_f32+0x29c>
 800fb6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb6c:	fb02 f303 	mul.w	r3, r2, r3
 800fb70:	2600      	movs	r6, #0
 800fb72:	930c      	str	r3, [sp, #48]	; 0x30
 800fb74:	9b04      	ldr	r3, [sp, #16]
 800fb76:	9303      	str	r3, [sp, #12]
 800fb78:	4637      	mov	r7, r6
 800fb7a:	46b2      	mov	sl, r6
 800fb7c:	9b05      	ldr	r3, [sp, #20]
 800fb7e:	9611      	str	r6, [sp, #68]	; 0x44
 800fb80:	eb0a 0b03 	add.w	fp, sl, r3
 800fb84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb86:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800fb8a:	b235      	sxth	r5, r6
 800fb8c:	18eb      	adds	r3, r5, r3
 800fb8e:	f04f 0a00 	mov.w	sl, #0
 800fb92:	fb09 f303 	mul.w	r3, r9, r3
 800fb96:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fb98:	930a      	str	r3, [sp, #40]	; 0x28
 800fb9a:	fb09 fb0b 	mul.w	fp, r9, fp
 800fb9e:	46d6      	mov	lr, sl
 800fba0:	9807      	ldr	r0, [sp, #28]
 800fba2:	4580      	cmp	r8, r0
 800fba4:	dd43      	ble.n	800fc2e <pool_func_mp_array_f32+0x2ae>
 800fba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fba8:	eddf 7a22 	vldr	s15, [pc, #136]	; 800fc34 <pool_func_mp_array_f32+0x2b4>
 800fbac:	eb0e 0403 	add.w	r4, lr, r3
 800fbb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbb6:	42a9      	cmp	r1, r5
 800fbb8:	dd0f      	ble.n	800fbda <pool_func_mp_array_f32+0x25a>
 800fbba:	4622      	mov	r2, r4
 800fbbc:	462b      	mov	r3, r5
 800fbbe:	ed92 7a00 	vldr	s14, [r2]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbcc:	b21b      	sxth	r3, r3
 800fbce:	bfb8      	it	lt
 800fbd0:	eef0 7a47 	vmovlt.f32	s15, s14
 800fbd4:	4299      	cmp	r1, r3
 800fbd6:	4462      	add	r2, ip
 800fbd8:	d1f1      	bne.n	800fbbe <pool_func_mp_array_f32+0x23e>
 800fbda:	3001      	adds	r0, #1
 800fbdc:	b200      	sxth	r0, r0
 800fbde:	4580      	cmp	r8, r0
 800fbe0:	4434      	add	r4, r6
 800fbe2:	d1e8      	bne.n	800fbb6 <pool_func_mp_array_f32+0x236>
 800fbe4:	f10a 0a01 	add.w	sl, sl, #1
 800fbe8:	9a02      	ldr	r2, [sp, #8]
 800fbea:	eb0b 030e 	add.w	r3, fp, lr
 800fbee:	fa0f fa8a 	sxth.w	sl, sl
 800fbf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbf6:	45ca      	cmp	sl, r9
 800fbf8:	edc3 7a00 	vstr	s15, [r3]
 800fbfc:	46d6      	mov	lr, sl
 800fbfe:	dbcf      	blt.n	800fba0 <pool_func_mp_array_f32+0x220>
 800fc00:	9b03      	ldr	r3, [sp, #12]
 800fc02:	9a08      	ldr	r2, [sp, #32]
 800fc04:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fc06:	4413      	add	r3, r2
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	3701      	adds	r7, #1
 800fc0c:	9303      	str	r3, [sp, #12]
 800fc0e:	9b06      	ldr	r3, [sp, #24]
 800fc10:	b23f      	sxth	r7, r7
 800fc12:	4416      	add	r6, r2
 800fc14:	42bb      	cmp	r3, r7
 800fc16:	b2b6      	uxth	r6, r6
 800fc18:	46ba      	mov	sl, r7
 800fc1a:	dcaf      	bgt.n	800fb7c <pool_func_mp_array_f32+0x1fc>
 800fc1c:	9b00      	ldr	r3, [sp, #0]
 800fc1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc20:	4413      	add	r3, r2
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	9301      	str	r3, [sp, #4]
 800fc2c:	e788      	b.n	800fb40 <pool_func_mp_array_f32+0x1c0>
 800fc2e:	eddf 7a01 	vldr	s15, [pc, #4]	; 800fc34 <pool_func_mp_array_f32+0x2b4>
 800fc32:	e7d7      	b.n	800fbe4 <pool_func_mp_array_f32+0x264>
 800fc34:	cf000000 	.word	0xcf000000

0800fc38 <ai_check_custom_types>:
 800fc38:	4b13      	ldr	r3, [pc, #76]	; (800fc88 <ai_check_custom_types+0x50>)
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	9301      	str	r3, [sp, #4]
 800fc40:	b118      	cbz	r0, 800fc4a <ai_check_custom_types+0x12>
 800fc42:	7803      	ldrb	r3, [r0, #0]
 800fc44:	2b03      	cmp	r3, #3
 800fc46:	d002      	beq.n	800fc4e <ai_check_custom_types+0x16>
 800fc48:	2000      	movs	r0, #0
 800fc4a:	b002      	add	sp, #8
 800fc4c:	4770      	bx	lr
 800fc4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d004      	beq.n	800fc60 <ai_check_custom_types+0x28>
 800fc56:	2001      	movs	r0, #1
 800fc58:	f080 0001 	eor.w	r0, r0, #1
 800fc5c:	b002      	add	sp, #8
 800fc5e:	4770      	bx	lr
 800fc60:	7842      	ldrb	r2, [r0, #1]
 800fc62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	f100 0001 	add.w	r0, r0, #1
 800fc6c:	d1f3      	bne.n	800fc56 <ai_check_custom_types+0x1e>
 800fc6e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800fc72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d1ed      	bne.n	800fc56 <ai_check_custom_types+0x1e>
 800fc7a:	7842      	ldrb	r2, [r0, #1]
 800fc7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d1e8      	bne.n	800fc56 <ai_check_custom_types+0x1e>
 800fc84:	2000      	movs	r0, #0
 800fc86:	e7e7      	b.n	800fc58 <ai_check_custom_types+0x20>
 800fc88:	08016a30 	.word	0x08016a30

0800fc8c <ai_layers_init_all>:
 800fc8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800fc8e:	b17a      	cbz	r2, 800fcb0 <ai_layers_init_all+0x24>
 800fc90:	6913      	ldr	r3, [r2, #16]
 800fc92:	60d0      	str	r0, [r2, #12]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	f04f 0201 	mov.w	r2, #1
 800fc9a:	d009      	beq.n	800fcb0 <ai_layers_init_all+0x24>
 800fc9c:	b143      	cbz	r3, 800fcb0 <ai_layers_init_all+0x24>
 800fc9e:	6919      	ldr	r1, [r3, #16]
 800fca0:	60d8      	str	r0, [r3, #12]
 800fca2:	4299      	cmp	r1, r3
 800fca4:	f102 0201 	add.w	r2, r2, #1
 800fca8:	d002      	beq.n	800fcb0 <ai_layers_init_all+0x24>
 800fcaa:	460b      	mov	r3, r1
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1f6      	bne.n	800fc9e <ai_layers_init_all+0x12>
 800fcb0:	4610      	mov	r0, r2
 800fcb2:	4770      	bx	lr

0800fcb4 <ai_layers_post_init_all>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800fcb8:	b18c      	cbz	r4, 800fcde <ai_layers_post_init_all+0x2a>
 800fcba:	2500      	movs	r5, #0
 800fcbc:	6863      	ldr	r3, [r4, #4]
 800fcbe:	f013 0f01 	tst.w	r3, #1
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	d003      	beq.n	800fcce <ai_layers_post_init_all+0x1a>
 800fcc6:	6a23      	ldr	r3, [r4, #32]
 800fcc8:	b10b      	cbz	r3, 800fcce <ai_layers_post_init_all+0x1a>
 800fcca:	4798      	blx	r3
 800fccc:	3501      	adds	r5, #1
 800fcce:	6923      	ldr	r3, [r4, #16]
 800fcd0:	42a3      	cmp	r3, r4
 800fcd2:	d002      	beq.n	800fcda <ai_layers_post_init_all+0x26>
 800fcd4:	461c      	mov	r4, r3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1f0      	bne.n	800fcbc <ai_layers_post_init_all+0x8>
 800fcda:	4628      	mov	r0, r5
 800fcdc:	bd38      	pop	{r3, r4, r5, pc}
 800fcde:	4625      	mov	r5, r4
 800fce0:	e7fb      	b.n	800fcda <ai_layers_post_init_all+0x26>
 800fce2:	bf00      	nop

0800fce4 <ai_layers_forward_all>:
 800fce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800fcea:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800fcec:	4604      	mov	r4, r0
 800fcee:	2f00      	cmp	r7, #0
 800fcf0:	d02c      	beq.n	800fd4c <ai_layers_forward_all+0x68>
 800fcf2:	2d00      	cmp	r5, #0
 800fcf4:	d03f      	beq.n	800fd76 <ai_layers_forward_all+0x92>
 800fcf6:	6385      	str	r5, [r0, #56]	; 0x38
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	47b8      	blx	r7
 800fd00:	2600      	movs	r6, #0
 800fd02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd04:	46b0      	mov	r8, r6
 800fd06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fd08:	2002      	movs	r0, #2
 800fd0a:	47b8      	blx	r7
 800fd0c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800fd0e:	696b      	ldr	r3, [r5, #20]
 800fd10:	4628      	mov	r0, r5
 800fd12:	4798      	blx	r3
 800fd14:	692b      	ldr	r3, [r5, #16]
 800fd16:	429d      	cmp	r5, r3
 800fd18:	f04f 0003 	mov.w	r0, #3
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	d009      	beq.n	800fd34 <ai_layers_forward_all+0x50>
 800fd20:	63a3      	str	r3, [r4, #56]	; 0x38
 800fd22:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fd24:	47b8      	blx	r7
 800fd26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd28:	3601      	adds	r6, #1
 800fd2a:	2900      	cmp	r1, #0
 800fd2c:	d1eb      	bne.n	800fd06 <ai_layers_forward_all+0x22>
 800fd2e:	4630      	mov	r0, r6
 800fd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd34:	2100      	movs	r1, #0
 800fd36:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800fd3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fd3c:	47b8      	blx	r7
 800fd3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd40:	3601      	adds	r6, #1
 800fd42:	2900      	cmp	r1, #0
 800fd44:	d1df      	bne.n	800fd06 <ai_layers_forward_all+0x22>
 800fd46:	4630      	mov	r0, r6
 800fd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4c:	b19d      	cbz	r5, 800fd76 <ai_layers_forward_all+0x92>
 800fd4e:	6385      	str	r5, [r0, #56]	; 0x38
 800fd50:	463e      	mov	r6, r7
 800fd52:	696b      	ldr	r3, [r5, #20]
 800fd54:	4628      	mov	r0, r5
 800fd56:	4798      	blx	r3
 800fd58:	692b      	ldr	r3, [r5, #16]
 800fd5a:	42ab      	cmp	r3, r5
 800fd5c:	f106 0601 	add.w	r6, r6, #1
 800fd60:	d004      	beq.n	800fd6c <ai_layers_forward_all+0x88>
 800fd62:	63a3      	str	r3, [r4, #56]	; 0x38
 800fd64:	461d      	mov	r5, r3
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1f3      	bne.n	800fd52 <ai_layers_forward_all+0x6e>
 800fd6a:	e7e0      	b.n	800fd2e <ai_layers_forward_all+0x4a>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	63a3      	str	r3, [r4, #56]	; 0x38
 800fd70:	4630      	mov	r0, r6
 800fd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd76:	462e      	mov	r6, r5
 800fd78:	4630      	mov	r0, r6
 800fd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7e:	bf00      	nop

0800fd80 <ai_array_to_buffer_fmt>:
 800fd80:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d029      	beq.n	800fddc <ai_array_to_buffer_fmt+0x5c>
 800fd88:	4a22      	ldr	r2, [pc, #136]	; (800fe14 <ai_array_to_buffer_fmt+0x94>)
 800fd8a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d010      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fd92:	dd13      	ble.n	800fdbc <ai_array_to_buffer_fmt+0x3c>
 800fd94:	4a20      	ldr	r2, [pc, #128]	; (800fe18 <ai_array_to_buffer_fmt+0x98>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d00c      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fd9a:	dc27      	bgt.n	800fdec <ai_array_to_buffer_fmt+0x6c>
 800fd9c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d007      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fda4:	3207      	adds	r2, #7
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d004      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fdaa:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d000      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fdb2:	2340      	movs	r3, #64	; 0x40
 800fdb4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800fdb8:	4318      	orrs	r0, r3
 800fdba:	4770      	bx	lr
 800fdbc:	4a17      	ldr	r2, [pc, #92]	; (800fe1c <ai_array_to_buffer_fmt+0x9c>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d0f8      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fdc2:	dd1e      	ble.n	800fe02 <ai_array_to_buffer_fmt+0x82>
 800fdc4:	4a16      	ldr	r2, [pc, #88]	; (800fe20 <ai_array_to_buffer_fmt+0xa0>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d0f4      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fdca:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d0f0      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fdd2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d1eb      	bne.n	800fdb2 <ai_array_to_buffer_fmt+0x32>
 800fdda:	e7eb      	b.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fddc:	4b11      	ldr	r3, [pc, #68]	; (800fe24 <ai_array_to_buffer_fmt+0xa4>)
 800fdde:	4003      	ands	r3, r0
 800fde0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fde4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800fde8:	4318      	orrs	r0, r3
 800fdea:	4770      	bx	lr
 800fdec:	4a0e      	ldr	r2, [pc, #56]	; (800fe28 <ai_array_to_buffer_fmt+0xa8>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d0e0      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fdf2:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d0dc      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fdfa:	4a0c      	ldr	r2, [pc, #48]	; (800fe2c <ai_array_to_buffer_fmt+0xac>)
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d1d8      	bne.n	800fdb2 <ai_array_to_buffer_fmt+0x32>
 800fe00:	e7d8      	b.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fe02:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d0d4      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fe0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d0d0      	beq.n	800fdb4 <ai_array_to_buffer_fmt+0x34>
 800fe12:	e7ce      	b.n	800fdb2 <ai_array_to_buffer_fmt+0x32>
 800fe14:	00060440 	.word	0x00060440
 800fe18:	00840840 	.word	0x00840840
 800fe1c:	00040447 	.word	0x00040447
 800fe20:	0004084f 	.word	0x0004084f
 800fe24:	00803fff 	.word	0x00803fff
 800fe28:	00841040 	.word	0x00841040
 800fe2c:	0084084f 	.word	0x0084084f

0800fe30 <ai_array_get_byte_size>:
 800fe30:	b1c1      	cbz	r1, 800fe64 <ai_array_get_byte_size+0x34>
 800fe32:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800fe36:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800fe3a:	4413      	add	r3, r2
 800fe3c:	fb01 f103 	mul.w	r1, r1, r3
 800fe40:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800fe44:	3107      	adds	r1, #7
 800fe46:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800fe4a:	f021 0107 	bic.w	r1, r1, #7
 800fe4e:	2804      	cmp	r0, #4
 800fe50:	fa21 f102 	lsr.w	r1, r1, r2
 800fe54:	d008      	beq.n	800fe68 <ai_array_get_byte_size+0x38>
 800fe56:	2808      	cmp	r0, #8
 800fe58:	d101      	bne.n	800fe5e <ai_array_get_byte_size+0x2e>
 800fe5a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fe5e:	3107      	adds	r1, #7
 800fe60:	08c8      	lsrs	r0, r1, #3
 800fe62:	4770      	bx	lr
 800fe64:	4608      	mov	r0, r1
 800fe66:	4770      	bx	lr
 800fe68:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800fe6c:	3107      	adds	r1, #7
 800fe6e:	08c8      	lsrs	r0, r1, #3
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop

0800fe74 <__assert_func>:
 800fe74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe76:	4614      	mov	r4, r2
 800fe78:	461a      	mov	r2, r3
 800fe7a:	4b09      	ldr	r3, [pc, #36]	; (800fea0 <__assert_func+0x2c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	4605      	mov	r5, r0
 800fe80:	68d8      	ldr	r0, [r3, #12]
 800fe82:	b14c      	cbz	r4, 800fe98 <__assert_func+0x24>
 800fe84:	4b07      	ldr	r3, [pc, #28]	; (800fea4 <__assert_func+0x30>)
 800fe86:	9100      	str	r1, [sp, #0]
 800fe88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe8c:	4906      	ldr	r1, [pc, #24]	; (800fea8 <__assert_func+0x34>)
 800fe8e:	462b      	mov	r3, r5
 800fe90:	f000 f814 	bl	800febc <fiprintf>
 800fe94:	f002 f88e 	bl	8011fb4 <abort>
 800fe98:	4b04      	ldr	r3, [pc, #16]	; (800feac <__assert_func+0x38>)
 800fe9a:	461c      	mov	r4, r3
 800fe9c:	e7f3      	b.n	800fe86 <__assert_func+0x12>
 800fe9e:	bf00      	nop
 800fea0:	20000ed8 	.word	0x20000ed8
 800fea4:	0805f344 	.word	0x0805f344
 800fea8:	0805f351 	.word	0x0805f351
 800feac:	0805f37f 	.word	0x0805f37f

0800feb0 <__errno>:
 800feb0:	4b01      	ldr	r3, [pc, #4]	; (800feb8 <__errno+0x8>)
 800feb2:	6818      	ldr	r0, [r3, #0]
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	20000ed8 	.word	0x20000ed8

0800febc <fiprintf>:
 800febc:	b40e      	push	{r1, r2, r3}
 800febe:	b503      	push	{r0, r1, lr}
 800fec0:	4601      	mov	r1, r0
 800fec2:	ab03      	add	r3, sp, #12
 800fec4:	4805      	ldr	r0, [pc, #20]	; (800fedc <fiprintf+0x20>)
 800fec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800feca:	6800      	ldr	r0, [r0, #0]
 800fecc:	9301      	str	r3, [sp, #4]
 800fece:	f000 f91d 	bl	801010c <_vfiprintf_r>
 800fed2:	b002      	add	sp, #8
 800fed4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fed8:	b003      	add	sp, #12
 800feda:	4770      	bx	lr
 800fedc:	20000ed8 	.word	0x20000ed8

0800fee0 <__libc_init_array>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	4d0d      	ldr	r5, [pc, #52]	; (800ff18 <__libc_init_array+0x38>)
 800fee4:	4c0d      	ldr	r4, [pc, #52]	; (800ff1c <__libc_init_array+0x3c>)
 800fee6:	1b64      	subs	r4, r4, r5
 800fee8:	10a4      	asrs	r4, r4, #2
 800feea:	2600      	movs	r6, #0
 800feec:	42a6      	cmp	r6, r4
 800feee:	d109      	bne.n	800ff04 <__libc_init_array+0x24>
 800fef0:	4d0b      	ldr	r5, [pc, #44]	; (800ff20 <__libc_init_array+0x40>)
 800fef2:	4c0c      	ldr	r4, [pc, #48]	; (800ff24 <__libc_init_array+0x44>)
 800fef4:	f006 fcc4 	bl	8016880 <_init>
 800fef8:	1b64      	subs	r4, r4, r5
 800fefa:	10a4      	asrs	r4, r4, #2
 800fefc:	2600      	movs	r6, #0
 800fefe:	42a6      	cmp	r6, r4
 800ff00:	d105      	bne.n	800ff0e <__libc_init_array+0x2e>
 800ff02:	bd70      	pop	{r4, r5, r6, pc}
 800ff04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff08:	4798      	blx	r3
 800ff0a:	3601      	adds	r6, #1
 800ff0c:	e7ee      	b.n	800feec <__libc_init_array+0xc>
 800ff0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff12:	4798      	blx	r3
 800ff14:	3601      	adds	r6, #1
 800ff16:	e7f2      	b.n	800fefe <__libc_init_array+0x1e>
 800ff18:	0805fa10 	.word	0x0805fa10
 800ff1c:	0805fa10 	.word	0x0805fa10
 800ff20:	0805fa10 	.word	0x0805fa10
 800ff24:	0805fa14 	.word	0x0805fa14

0800ff28 <malloc>:
 800ff28:	4b02      	ldr	r3, [pc, #8]	; (800ff34 <malloc+0xc>)
 800ff2a:	4601      	mov	r1, r0
 800ff2c:	6818      	ldr	r0, [r3, #0]
 800ff2e:	f000 b869 	b.w	8010004 <_malloc_r>
 800ff32:	bf00      	nop
 800ff34:	20000ed8 	.word	0x20000ed8

0800ff38 <memcpy>:
 800ff38:	440a      	add	r2, r1
 800ff3a:	4291      	cmp	r1, r2
 800ff3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff40:	d100      	bne.n	800ff44 <memcpy+0xc>
 800ff42:	4770      	bx	lr
 800ff44:	b510      	push	{r4, lr}
 800ff46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff4e:	4291      	cmp	r1, r2
 800ff50:	d1f9      	bne.n	800ff46 <memcpy+0xe>
 800ff52:	bd10      	pop	{r4, pc}

0800ff54 <memset>:
 800ff54:	4402      	add	r2, r0
 800ff56:	4603      	mov	r3, r0
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d100      	bne.n	800ff5e <memset+0xa>
 800ff5c:	4770      	bx	lr
 800ff5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ff62:	e7f9      	b.n	800ff58 <memset+0x4>

0800ff64 <_free_r>:
 800ff64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff66:	2900      	cmp	r1, #0
 800ff68:	d048      	beq.n	800fffc <_free_r+0x98>
 800ff6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff6e:	9001      	str	r0, [sp, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f1a1 0404 	sub.w	r4, r1, #4
 800ff76:	bfb8      	it	lt
 800ff78:	18e4      	addlt	r4, r4, r3
 800ff7a:	f003 fc57 	bl	801382c <__malloc_lock>
 800ff7e:	4a20      	ldr	r2, [pc, #128]	; (8010000 <_free_r+0x9c>)
 800ff80:	9801      	ldr	r0, [sp, #4]
 800ff82:	6813      	ldr	r3, [r2, #0]
 800ff84:	4615      	mov	r5, r2
 800ff86:	b933      	cbnz	r3, 800ff96 <_free_r+0x32>
 800ff88:	6063      	str	r3, [r4, #4]
 800ff8a:	6014      	str	r4, [r2, #0]
 800ff8c:	b003      	add	sp, #12
 800ff8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff92:	f003 bc51 	b.w	8013838 <__malloc_unlock>
 800ff96:	42a3      	cmp	r3, r4
 800ff98:	d90b      	bls.n	800ffb2 <_free_r+0x4e>
 800ff9a:	6821      	ldr	r1, [r4, #0]
 800ff9c:	1862      	adds	r2, r4, r1
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	bf04      	itt	eq
 800ffa2:	681a      	ldreq	r2, [r3, #0]
 800ffa4:	685b      	ldreq	r3, [r3, #4]
 800ffa6:	6063      	str	r3, [r4, #4]
 800ffa8:	bf04      	itt	eq
 800ffaa:	1852      	addeq	r2, r2, r1
 800ffac:	6022      	streq	r2, [r4, #0]
 800ffae:	602c      	str	r4, [r5, #0]
 800ffb0:	e7ec      	b.n	800ff8c <_free_r+0x28>
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	b10b      	cbz	r3, 800ffbc <_free_r+0x58>
 800ffb8:	42a3      	cmp	r3, r4
 800ffba:	d9fa      	bls.n	800ffb2 <_free_r+0x4e>
 800ffbc:	6811      	ldr	r1, [r2, #0]
 800ffbe:	1855      	adds	r5, r2, r1
 800ffc0:	42a5      	cmp	r5, r4
 800ffc2:	d10b      	bne.n	800ffdc <_free_r+0x78>
 800ffc4:	6824      	ldr	r4, [r4, #0]
 800ffc6:	4421      	add	r1, r4
 800ffc8:	1854      	adds	r4, r2, r1
 800ffca:	42a3      	cmp	r3, r4
 800ffcc:	6011      	str	r1, [r2, #0]
 800ffce:	d1dd      	bne.n	800ff8c <_free_r+0x28>
 800ffd0:	681c      	ldr	r4, [r3, #0]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	6053      	str	r3, [r2, #4]
 800ffd6:	4421      	add	r1, r4
 800ffd8:	6011      	str	r1, [r2, #0]
 800ffda:	e7d7      	b.n	800ff8c <_free_r+0x28>
 800ffdc:	d902      	bls.n	800ffe4 <_free_r+0x80>
 800ffde:	230c      	movs	r3, #12
 800ffe0:	6003      	str	r3, [r0, #0]
 800ffe2:	e7d3      	b.n	800ff8c <_free_r+0x28>
 800ffe4:	6825      	ldr	r5, [r4, #0]
 800ffe6:	1961      	adds	r1, r4, r5
 800ffe8:	428b      	cmp	r3, r1
 800ffea:	bf04      	itt	eq
 800ffec:	6819      	ldreq	r1, [r3, #0]
 800ffee:	685b      	ldreq	r3, [r3, #4]
 800fff0:	6063      	str	r3, [r4, #4]
 800fff2:	bf04      	itt	eq
 800fff4:	1949      	addeq	r1, r1, r5
 800fff6:	6021      	streq	r1, [r4, #0]
 800fff8:	6054      	str	r4, [r2, #4]
 800fffa:	e7c7      	b.n	800ff8c <_free_r+0x28>
 800fffc:	b003      	add	sp, #12
 800fffe:	bd30      	pop	{r4, r5, pc}
 8010000:	20001318 	.word	0x20001318

08010004 <_malloc_r>:
 8010004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010006:	1ccd      	adds	r5, r1, #3
 8010008:	f025 0503 	bic.w	r5, r5, #3
 801000c:	3508      	adds	r5, #8
 801000e:	2d0c      	cmp	r5, #12
 8010010:	bf38      	it	cc
 8010012:	250c      	movcc	r5, #12
 8010014:	2d00      	cmp	r5, #0
 8010016:	4606      	mov	r6, r0
 8010018:	db01      	blt.n	801001e <_malloc_r+0x1a>
 801001a:	42a9      	cmp	r1, r5
 801001c:	d903      	bls.n	8010026 <_malloc_r+0x22>
 801001e:	230c      	movs	r3, #12
 8010020:	6033      	str	r3, [r6, #0]
 8010022:	2000      	movs	r0, #0
 8010024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010026:	f003 fc01 	bl	801382c <__malloc_lock>
 801002a:	4921      	ldr	r1, [pc, #132]	; (80100b0 <_malloc_r+0xac>)
 801002c:	680a      	ldr	r2, [r1, #0]
 801002e:	4614      	mov	r4, r2
 8010030:	b99c      	cbnz	r4, 801005a <_malloc_r+0x56>
 8010032:	4f20      	ldr	r7, [pc, #128]	; (80100b4 <_malloc_r+0xb0>)
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	b923      	cbnz	r3, 8010042 <_malloc_r+0x3e>
 8010038:	4621      	mov	r1, r4
 801003a:	4630      	mov	r0, r6
 801003c:	f001 f810 	bl	8011060 <_sbrk_r>
 8010040:	6038      	str	r0, [r7, #0]
 8010042:	4629      	mov	r1, r5
 8010044:	4630      	mov	r0, r6
 8010046:	f001 f80b 	bl	8011060 <_sbrk_r>
 801004a:	1c43      	adds	r3, r0, #1
 801004c:	d123      	bne.n	8010096 <_malloc_r+0x92>
 801004e:	230c      	movs	r3, #12
 8010050:	6033      	str	r3, [r6, #0]
 8010052:	4630      	mov	r0, r6
 8010054:	f003 fbf0 	bl	8013838 <__malloc_unlock>
 8010058:	e7e3      	b.n	8010022 <_malloc_r+0x1e>
 801005a:	6823      	ldr	r3, [r4, #0]
 801005c:	1b5b      	subs	r3, r3, r5
 801005e:	d417      	bmi.n	8010090 <_malloc_r+0x8c>
 8010060:	2b0b      	cmp	r3, #11
 8010062:	d903      	bls.n	801006c <_malloc_r+0x68>
 8010064:	6023      	str	r3, [r4, #0]
 8010066:	441c      	add	r4, r3
 8010068:	6025      	str	r5, [r4, #0]
 801006a:	e004      	b.n	8010076 <_malloc_r+0x72>
 801006c:	6863      	ldr	r3, [r4, #4]
 801006e:	42a2      	cmp	r2, r4
 8010070:	bf0c      	ite	eq
 8010072:	600b      	streq	r3, [r1, #0]
 8010074:	6053      	strne	r3, [r2, #4]
 8010076:	4630      	mov	r0, r6
 8010078:	f003 fbde 	bl	8013838 <__malloc_unlock>
 801007c:	f104 000b 	add.w	r0, r4, #11
 8010080:	1d23      	adds	r3, r4, #4
 8010082:	f020 0007 	bic.w	r0, r0, #7
 8010086:	1ac2      	subs	r2, r0, r3
 8010088:	d0cc      	beq.n	8010024 <_malloc_r+0x20>
 801008a:	1a1b      	subs	r3, r3, r0
 801008c:	50a3      	str	r3, [r4, r2]
 801008e:	e7c9      	b.n	8010024 <_malloc_r+0x20>
 8010090:	4622      	mov	r2, r4
 8010092:	6864      	ldr	r4, [r4, #4]
 8010094:	e7cc      	b.n	8010030 <_malloc_r+0x2c>
 8010096:	1cc4      	adds	r4, r0, #3
 8010098:	f024 0403 	bic.w	r4, r4, #3
 801009c:	42a0      	cmp	r0, r4
 801009e:	d0e3      	beq.n	8010068 <_malloc_r+0x64>
 80100a0:	1a21      	subs	r1, r4, r0
 80100a2:	4630      	mov	r0, r6
 80100a4:	f000 ffdc 	bl	8011060 <_sbrk_r>
 80100a8:	3001      	adds	r0, #1
 80100aa:	d1dd      	bne.n	8010068 <_malloc_r+0x64>
 80100ac:	e7cf      	b.n	801004e <_malloc_r+0x4a>
 80100ae:	bf00      	nop
 80100b0:	20001318 	.word	0x20001318
 80100b4:	2000131c 	.word	0x2000131c

080100b8 <__sfputc_r>:
 80100b8:	6893      	ldr	r3, [r2, #8]
 80100ba:	3b01      	subs	r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	b410      	push	{r4}
 80100c0:	6093      	str	r3, [r2, #8]
 80100c2:	da08      	bge.n	80100d6 <__sfputc_r+0x1e>
 80100c4:	6994      	ldr	r4, [r2, #24]
 80100c6:	42a3      	cmp	r3, r4
 80100c8:	db01      	blt.n	80100ce <__sfputc_r+0x16>
 80100ca:	290a      	cmp	r1, #10
 80100cc:	d103      	bne.n	80100d6 <__sfputc_r+0x1e>
 80100ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100d2:	f001 beaf 	b.w	8011e34 <__swbuf_r>
 80100d6:	6813      	ldr	r3, [r2, #0]
 80100d8:	1c58      	adds	r0, r3, #1
 80100da:	6010      	str	r0, [r2, #0]
 80100dc:	7019      	strb	r1, [r3, #0]
 80100de:	4608      	mov	r0, r1
 80100e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100e4:	4770      	bx	lr

080100e6 <__sfputs_r>:
 80100e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e8:	4606      	mov	r6, r0
 80100ea:	460f      	mov	r7, r1
 80100ec:	4614      	mov	r4, r2
 80100ee:	18d5      	adds	r5, r2, r3
 80100f0:	42ac      	cmp	r4, r5
 80100f2:	d101      	bne.n	80100f8 <__sfputs_r+0x12>
 80100f4:	2000      	movs	r0, #0
 80100f6:	e007      	b.n	8010108 <__sfputs_r+0x22>
 80100f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100fc:	463a      	mov	r2, r7
 80100fe:	4630      	mov	r0, r6
 8010100:	f7ff ffda 	bl	80100b8 <__sfputc_r>
 8010104:	1c43      	adds	r3, r0, #1
 8010106:	d1f3      	bne.n	80100f0 <__sfputs_r+0xa>
 8010108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801010c <_vfiprintf_r>:
 801010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	460d      	mov	r5, r1
 8010112:	b09d      	sub	sp, #116	; 0x74
 8010114:	4614      	mov	r4, r2
 8010116:	4698      	mov	r8, r3
 8010118:	4606      	mov	r6, r0
 801011a:	b118      	cbz	r0, 8010124 <_vfiprintf_r+0x18>
 801011c:	6983      	ldr	r3, [r0, #24]
 801011e:	b90b      	cbnz	r3, 8010124 <_vfiprintf_r+0x18>
 8010120:	f002 fee0 	bl	8012ee4 <__sinit>
 8010124:	4b89      	ldr	r3, [pc, #548]	; (801034c <_vfiprintf_r+0x240>)
 8010126:	429d      	cmp	r5, r3
 8010128:	d11b      	bne.n	8010162 <_vfiprintf_r+0x56>
 801012a:	6875      	ldr	r5, [r6, #4]
 801012c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801012e:	07d9      	lsls	r1, r3, #31
 8010130:	d405      	bmi.n	801013e <_vfiprintf_r+0x32>
 8010132:	89ab      	ldrh	r3, [r5, #12]
 8010134:	059a      	lsls	r2, r3, #22
 8010136:	d402      	bmi.n	801013e <_vfiprintf_r+0x32>
 8010138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801013a:	f003 fae4 	bl	8013706 <__retarget_lock_acquire_recursive>
 801013e:	89ab      	ldrh	r3, [r5, #12]
 8010140:	071b      	lsls	r3, r3, #28
 8010142:	d501      	bpl.n	8010148 <_vfiprintf_r+0x3c>
 8010144:	692b      	ldr	r3, [r5, #16]
 8010146:	b9eb      	cbnz	r3, 8010184 <_vfiprintf_r+0x78>
 8010148:	4629      	mov	r1, r5
 801014a:	4630      	mov	r0, r6
 801014c:	f001 fec4 	bl	8011ed8 <__swsetup_r>
 8010150:	b1c0      	cbz	r0, 8010184 <_vfiprintf_r+0x78>
 8010152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010154:	07dc      	lsls	r4, r3, #31
 8010156:	d50e      	bpl.n	8010176 <_vfiprintf_r+0x6a>
 8010158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801015c:	b01d      	add	sp, #116	; 0x74
 801015e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010162:	4b7b      	ldr	r3, [pc, #492]	; (8010350 <_vfiprintf_r+0x244>)
 8010164:	429d      	cmp	r5, r3
 8010166:	d101      	bne.n	801016c <_vfiprintf_r+0x60>
 8010168:	68b5      	ldr	r5, [r6, #8]
 801016a:	e7df      	b.n	801012c <_vfiprintf_r+0x20>
 801016c:	4b79      	ldr	r3, [pc, #484]	; (8010354 <_vfiprintf_r+0x248>)
 801016e:	429d      	cmp	r5, r3
 8010170:	bf08      	it	eq
 8010172:	68f5      	ldreq	r5, [r6, #12]
 8010174:	e7da      	b.n	801012c <_vfiprintf_r+0x20>
 8010176:	89ab      	ldrh	r3, [r5, #12]
 8010178:	0598      	lsls	r0, r3, #22
 801017a:	d4ed      	bmi.n	8010158 <_vfiprintf_r+0x4c>
 801017c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801017e:	f003 fac3 	bl	8013708 <__retarget_lock_release_recursive>
 8010182:	e7e9      	b.n	8010158 <_vfiprintf_r+0x4c>
 8010184:	2300      	movs	r3, #0
 8010186:	9309      	str	r3, [sp, #36]	; 0x24
 8010188:	2320      	movs	r3, #32
 801018a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801018e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010192:	2330      	movs	r3, #48	; 0x30
 8010194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010358 <_vfiprintf_r+0x24c>
 8010198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801019c:	f04f 0901 	mov.w	r9, #1
 80101a0:	4623      	mov	r3, r4
 80101a2:	469a      	mov	sl, r3
 80101a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101a8:	b10a      	cbz	r2, 80101ae <_vfiprintf_r+0xa2>
 80101aa:	2a25      	cmp	r2, #37	; 0x25
 80101ac:	d1f9      	bne.n	80101a2 <_vfiprintf_r+0x96>
 80101ae:	ebba 0b04 	subs.w	fp, sl, r4
 80101b2:	d00b      	beq.n	80101cc <_vfiprintf_r+0xc0>
 80101b4:	465b      	mov	r3, fp
 80101b6:	4622      	mov	r2, r4
 80101b8:	4629      	mov	r1, r5
 80101ba:	4630      	mov	r0, r6
 80101bc:	f7ff ff93 	bl	80100e6 <__sfputs_r>
 80101c0:	3001      	adds	r0, #1
 80101c2:	f000 80aa 	beq.w	801031a <_vfiprintf_r+0x20e>
 80101c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101c8:	445a      	add	r2, fp
 80101ca:	9209      	str	r2, [sp, #36]	; 0x24
 80101cc:	f89a 3000 	ldrb.w	r3, [sl]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 80a2 	beq.w	801031a <_vfiprintf_r+0x20e>
 80101d6:	2300      	movs	r3, #0
 80101d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101e0:	f10a 0a01 	add.w	sl, sl, #1
 80101e4:	9304      	str	r3, [sp, #16]
 80101e6:	9307      	str	r3, [sp, #28]
 80101e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101ec:	931a      	str	r3, [sp, #104]	; 0x68
 80101ee:	4654      	mov	r4, sl
 80101f0:	2205      	movs	r2, #5
 80101f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f6:	4858      	ldr	r0, [pc, #352]	; (8010358 <_vfiprintf_r+0x24c>)
 80101f8:	f7f0 f802 	bl	8000200 <memchr>
 80101fc:	9a04      	ldr	r2, [sp, #16]
 80101fe:	b9d8      	cbnz	r0, 8010238 <_vfiprintf_r+0x12c>
 8010200:	06d1      	lsls	r1, r2, #27
 8010202:	bf44      	itt	mi
 8010204:	2320      	movmi	r3, #32
 8010206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801020a:	0713      	lsls	r3, r2, #28
 801020c:	bf44      	itt	mi
 801020e:	232b      	movmi	r3, #43	; 0x2b
 8010210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010214:	f89a 3000 	ldrb.w	r3, [sl]
 8010218:	2b2a      	cmp	r3, #42	; 0x2a
 801021a:	d015      	beq.n	8010248 <_vfiprintf_r+0x13c>
 801021c:	9a07      	ldr	r2, [sp, #28]
 801021e:	4654      	mov	r4, sl
 8010220:	2000      	movs	r0, #0
 8010222:	f04f 0c0a 	mov.w	ip, #10
 8010226:	4621      	mov	r1, r4
 8010228:	f811 3b01 	ldrb.w	r3, [r1], #1
 801022c:	3b30      	subs	r3, #48	; 0x30
 801022e:	2b09      	cmp	r3, #9
 8010230:	d94e      	bls.n	80102d0 <_vfiprintf_r+0x1c4>
 8010232:	b1b0      	cbz	r0, 8010262 <_vfiprintf_r+0x156>
 8010234:	9207      	str	r2, [sp, #28]
 8010236:	e014      	b.n	8010262 <_vfiprintf_r+0x156>
 8010238:	eba0 0308 	sub.w	r3, r0, r8
 801023c:	fa09 f303 	lsl.w	r3, r9, r3
 8010240:	4313      	orrs	r3, r2
 8010242:	9304      	str	r3, [sp, #16]
 8010244:	46a2      	mov	sl, r4
 8010246:	e7d2      	b.n	80101ee <_vfiprintf_r+0xe2>
 8010248:	9b03      	ldr	r3, [sp, #12]
 801024a:	1d19      	adds	r1, r3, #4
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	9103      	str	r1, [sp, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	bfbb      	ittet	lt
 8010254:	425b      	neglt	r3, r3
 8010256:	f042 0202 	orrlt.w	r2, r2, #2
 801025a:	9307      	strge	r3, [sp, #28]
 801025c:	9307      	strlt	r3, [sp, #28]
 801025e:	bfb8      	it	lt
 8010260:	9204      	strlt	r2, [sp, #16]
 8010262:	7823      	ldrb	r3, [r4, #0]
 8010264:	2b2e      	cmp	r3, #46	; 0x2e
 8010266:	d10c      	bne.n	8010282 <_vfiprintf_r+0x176>
 8010268:	7863      	ldrb	r3, [r4, #1]
 801026a:	2b2a      	cmp	r3, #42	; 0x2a
 801026c:	d135      	bne.n	80102da <_vfiprintf_r+0x1ce>
 801026e:	9b03      	ldr	r3, [sp, #12]
 8010270:	1d1a      	adds	r2, r3, #4
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	9203      	str	r2, [sp, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	bfb8      	it	lt
 801027a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801027e:	3402      	adds	r4, #2
 8010280:	9305      	str	r3, [sp, #20]
 8010282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010368 <_vfiprintf_r+0x25c>
 8010286:	7821      	ldrb	r1, [r4, #0]
 8010288:	2203      	movs	r2, #3
 801028a:	4650      	mov	r0, sl
 801028c:	f7ef ffb8 	bl	8000200 <memchr>
 8010290:	b140      	cbz	r0, 80102a4 <_vfiprintf_r+0x198>
 8010292:	2340      	movs	r3, #64	; 0x40
 8010294:	eba0 000a 	sub.w	r0, r0, sl
 8010298:	fa03 f000 	lsl.w	r0, r3, r0
 801029c:	9b04      	ldr	r3, [sp, #16]
 801029e:	4303      	orrs	r3, r0
 80102a0:	3401      	adds	r4, #1
 80102a2:	9304      	str	r3, [sp, #16]
 80102a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a8:	482c      	ldr	r0, [pc, #176]	; (801035c <_vfiprintf_r+0x250>)
 80102aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102ae:	2206      	movs	r2, #6
 80102b0:	f7ef ffa6 	bl	8000200 <memchr>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d03f      	beq.n	8010338 <_vfiprintf_r+0x22c>
 80102b8:	4b29      	ldr	r3, [pc, #164]	; (8010360 <_vfiprintf_r+0x254>)
 80102ba:	bb1b      	cbnz	r3, 8010304 <_vfiprintf_r+0x1f8>
 80102bc:	9b03      	ldr	r3, [sp, #12]
 80102be:	3307      	adds	r3, #7
 80102c0:	f023 0307 	bic.w	r3, r3, #7
 80102c4:	3308      	adds	r3, #8
 80102c6:	9303      	str	r3, [sp, #12]
 80102c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ca:	443b      	add	r3, r7
 80102cc:	9309      	str	r3, [sp, #36]	; 0x24
 80102ce:	e767      	b.n	80101a0 <_vfiprintf_r+0x94>
 80102d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80102d4:	460c      	mov	r4, r1
 80102d6:	2001      	movs	r0, #1
 80102d8:	e7a5      	b.n	8010226 <_vfiprintf_r+0x11a>
 80102da:	2300      	movs	r3, #0
 80102dc:	3401      	adds	r4, #1
 80102de:	9305      	str	r3, [sp, #20]
 80102e0:	4619      	mov	r1, r3
 80102e2:	f04f 0c0a 	mov.w	ip, #10
 80102e6:	4620      	mov	r0, r4
 80102e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ec:	3a30      	subs	r2, #48	; 0x30
 80102ee:	2a09      	cmp	r2, #9
 80102f0:	d903      	bls.n	80102fa <_vfiprintf_r+0x1ee>
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d0c5      	beq.n	8010282 <_vfiprintf_r+0x176>
 80102f6:	9105      	str	r1, [sp, #20]
 80102f8:	e7c3      	b.n	8010282 <_vfiprintf_r+0x176>
 80102fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80102fe:	4604      	mov	r4, r0
 8010300:	2301      	movs	r3, #1
 8010302:	e7f0      	b.n	80102e6 <_vfiprintf_r+0x1da>
 8010304:	ab03      	add	r3, sp, #12
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	462a      	mov	r2, r5
 801030a:	4b16      	ldr	r3, [pc, #88]	; (8010364 <_vfiprintf_r+0x258>)
 801030c:	a904      	add	r1, sp, #16
 801030e:	4630      	mov	r0, r6
 8010310:	f000 f8cc 	bl	80104ac <_printf_float>
 8010314:	4607      	mov	r7, r0
 8010316:	1c78      	adds	r0, r7, #1
 8010318:	d1d6      	bne.n	80102c8 <_vfiprintf_r+0x1bc>
 801031a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801031c:	07d9      	lsls	r1, r3, #31
 801031e:	d405      	bmi.n	801032c <_vfiprintf_r+0x220>
 8010320:	89ab      	ldrh	r3, [r5, #12]
 8010322:	059a      	lsls	r2, r3, #22
 8010324:	d402      	bmi.n	801032c <_vfiprintf_r+0x220>
 8010326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010328:	f003 f9ee 	bl	8013708 <__retarget_lock_release_recursive>
 801032c:	89ab      	ldrh	r3, [r5, #12]
 801032e:	065b      	lsls	r3, r3, #25
 8010330:	f53f af12 	bmi.w	8010158 <_vfiprintf_r+0x4c>
 8010334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010336:	e711      	b.n	801015c <_vfiprintf_r+0x50>
 8010338:	ab03      	add	r3, sp, #12
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	462a      	mov	r2, r5
 801033e:	4b09      	ldr	r3, [pc, #36]	; (8010364 <_vfiprintf_r+0x258>)
 8010340:	a904      	add	r1, sp, #16
 8010342:	4630      	mov	r0, r6
 8010344:	f000 fb56 	bl	80109f4 <_printf_i>
 8010348:	e7e4      	b.n	8010314 <_vfiprintf_r+0x208>
 801034a:	bf00      	nop
 801034c:	0805f5d8 	.word	0x0805f5d8
 8010350:	0805f5f8 	.word	0x0805f5f8
 8010354:	0805f5b8 	.word	0x0805f5b8
 8010358:	0805f384 	.word	0x0805f384
 801035c:	0805f38e 	.word	0x0805f38e
 8010360:	080104ad 	.word	0x080104ad
 8010364:	080100e7 	.word	0x080100e7
 8010368:	0805f38a 	.word	0x0805f38a

0801036c <__cvt>:
 801036c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010370:	ec55 4b10 	vmov	r4, r5, d0
 8010374:	2d00      	cmp	r5, #0
 8010376:	460e      	mov	r6, r1
 8010378:	4619      	mov	r1, r3
 801037a:	462b      	mov	r3, r5
 801037c:	bfbb      	ittet	lt
 801037e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010382:	461d      	movlt	r5, r3
 8010384:	2300      	movge	r3, #0
 8010386:	232d      	movlt	r3, #45	; 0x2d
 8010388:	700b      	strb	r3, [r1, #0]
 801038a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801038c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010390:	4691      	mov	r9, r2
 8010392:	f023 0820 	bic.w	r8, r3, #32
 8010396:	bfbc      	itt	lt
 8010398:	4622      	movlt	r2, r4
 801039a:	4614      	movlt	r4, r2
 801039c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103a0:	d005      	beq.n	80103ae <__cvt+0x42>
 80103a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80103a6:	d100      	bne.n	80103aa <__cvt+0x3e>
 80103a8:	3601      	adds	r6, #1
 80103aa:	2102      	movs	r1, #2
 80103ac:	e000      	b.n	80103b0 <__cvt+0x44>
 80103ae:	2103      	movs	r1, #3
 80103b0:	ab03      	add	r3, sp, #12
 80103b2:	9301      	str	r3, [sp, #4]
 80103b4:	ab02      	add	r3, sp, #8
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	ec45 4b10 	vmov	d0, r4, r5
 80103bc:	4653      	mov	r3, sl
 80103be:	4632      	mov	r2, r6
 80103c0:	f001 fe8a 	bl	80120d8 <_dtoa_r>
 80103c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80103c8:	4607      	mov	r7, r0
 80103ca:	d102      	bne.n	80103d2 <__cvt+0x66>
 80103cc:	f019 0f01 	tst.w	r9, #1
 80103d0:	d022      	beq.n	8010418 <__cvt+0xac>
 80103d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103d6:	eb07 0906 	add.w	r9, r7, r6
 80103da:	d110      	bne.n	80103fe <__cvt+0x92>
 80103dc:	783b      	ldrb	r3, [r7, #0]
 80103de:	2b30      	cmp	r3, #48	; 0x30
 80103e0:	d10a      	bne.n	80103f8 <__cvt+0x8c>
 80103e2:	2200      	movs	r2, #0
 80103e4:	2300      	movs	r3, #0
 80103e6:	4620      	mov	r0, r4
 80103e8:	4629      	mov	r1, r5
 80103ea:	f7f0 fb7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80103ee:	b918      	cbnz	r0, 80103f8 <__cvt+0x8c>
 80103f0:	f1c6 0601 	rsb	r6, r6, #1
 80103f4:	f8ca 6000 	str.w	r6, [sl]
 80103f8:	f8da 3000 	ldr.w	r3, [sl]
 80103fc:	4499      	add	r9, r3
 80103fe:	2200      	movs	r2, #0
 8010400:	2300      	movs	r3, #0
 8010402:	4620      	mov	r0, r4
 8010404:	4629      	mov	r1, r5
 8010406:	f7f0 fb6f 	bl	8000ae8 <__aeabi_dcmpeq>
 801040a:	b108      	cbz	r0, 8010410 <__cvt+0xa4>
 801040c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010410:	2230      	movs	r2, #48	; 0x30
 8010412:	9b03      	ldr	r3, [sp, #12]
 8010414:	454b      	cmp	r3, r9
 8010416:	d307      	bcc.n	8010428 <__cvt+0xbc>
 8010418:	9b03      	ldr	r3, [sp, #12]
 801041a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801041c:	1bdb      	subs	r3, r3, r7
 801041e:	4638      	mov	r0, r7
 8010420:	6013      	str	r3, [r2, #0]
 8010422:	b004      	add	sp, #16
 8010424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010428:	1c59      	adds	r1, r3, #1
 801042a:	9103      	str	r1, [sp, #12]
 801042c:	701a      	strb	r2, [r3, #0]
 801042e:	e7f0      	b.n	8010412 <__cvt+0xa6>

08010430 <__exponent>:
 8010430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010432:	4603      	mov	r3, r0
 8010434:	2900      	cmp	r1, #0
 8010436:	bfb8      	it	lt
 8010438:	4249      	neglt	r1, r1
 801043a:	f803 2b02 	strb.w	r2, [r3], #2
 801043e:	bfb4      	ite	lt
 8010440:	222d      	movlt	r2, #45	; 0x2d
 8010442:	222b      	movge	r2, #43	; 0x2b
 8010444:	2909      	cmp	r1, #9
 8010446:	7042      	strb	r2, [r0, #1]
 8010448:	dd2a      	ble.n	80104a0 <__exponent+0x70>
 801044a:	f10d 0407 	add.w	r4, sp, #7
 801044e:	46a4      	mov	ip, r4
 8010450:	270a      	movs	r7, #10
 8010452:	46a6      	mov	lr, r4
 8010454:	460a      	mov	r2, r1
 8010456:	fb91 f6f7 	sdiv	r6, r1, r7
 801045a:	fb07 1516 	mls	r5, r7, r6, r1
 801045e:	3530      	adds	r5, #48	; 0x30
 8010460:	2a63      	cmp	r2, #99	; 0x63
 8010462:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010466:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801046a:	4631      	mov	r1, r6
 801046c:	dcf1      	bgt.n	8010452 <__exponent+0x22>
 801046e:	3130      	adds	r1, #48	; 0x30
 8010470:	f1ae 0502 	sub.w	r5, lr, #2
 8010474:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010478:	1c44      	adds	r4, r0, #1
 801047a:	4629      	mov	r1, r5
 801047c:	4561      	cmp	r1, ip
 801047e:	d30a      	bcc.n	8010496 <__exponent+0x66>
 8010480:	f10d 0209 	add.w	r2, sp, #9
 8010484:	eba2 020e 	sub.w	r2, r2, lr
 8010488:	4565      	cmp	r5, ip
 801048a:	bf88      	it	hi
 801048c:	2200      	movhi	r2, #0
 801048e:	4413      	add	r3, r2
 8010490:	1a18      	subs	r0, r3, r0
 8010492:	b003      	add	sp, #12
 8010494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010496:	f811 2b01 	ldrb.w	r2, [r1], #1
 801049a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801049e:	e7ed      	b.n	801047c <__exponent+0x4c>
 80104a0:	2330      	movs	r3, #48	; 0x30
 80104a2:	3130      	adds	r1, #48	; 0x30
 80104a4:	7083      	strb	r3, [r0, #2]
 80104a6:	70c1      	strb	r1, [r0, #3]
 80104a8:	1d03      	adds	r3, r0, #4
 80104aa:	e7f1      	b.n	8010490 <__exponent+0x60>

080104ac <_printf_float>:
 80104ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b0:	ed2d 8b02 	vpush	{d8}
 80104b4:	b08d      	sub	sp, #52	; 0x34
 80104b6:	460c      	mov	r4, r1
 80104b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80104bc:	4616      	mov	r6, r2
 80104be:	461f      	mov	r7, r3
 80104c0:	4605      	mov	r5, r0
 80104c2:	f003 f91b 	bl	80136fc <_localeconv_r>
 80104c6:	f8d0 a000 	ldr.w	sl, [r0]
 80104ca:	4650      	mov	r0, sl
 80104cc:	f7ef fe8a 	bl	80001e4 <strlen>
 80104d0:	2300      	movs	r3, #0
 80104d2:	930a      	str	r3, [sp, #40]	; 0x28
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	9305      	str	r3, [sp, #20]
 80104d8:	f8d8 3000 	ldr.w	r3, [r8]
 80104dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80104e0:	3307      	adds	r3, #7
 80104e2:	f023 0307 	bic.w	r3, r3, #7
 80104e6:	f103 0208 	add.w	r2, r3, #8
 80104ea:	f8c8 2000 	str.w	r2, [r8]
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80104f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80104fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80104fe:	9307      	str	r3, [sp, #28]
 8010500:	f8cd 8018 	str.w	r8, [sp, #24]
 8010504:	ee08 0a10 	vmov	s16, r0
 8010508:	4b9f      	ldr	r3, [pc, #636]	; (8010788 <_printf_float+0x2dc>)
 801050a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801050e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010512:	f7f0 fb1b 	bl	8000b4c <__aeabi_dcmpun>
 8010516:	bb88      	cbnz	r0, 801057c <_printf_float+0xd0>
 8010518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801051c:	4b9a      	ldr	r3, [pc, #616]	; (8010788 <_printf_float+0x2dc>)
 801051e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010522:	f7f0 faf5 	bl	8000b10 <__aeabi_dcmple>
 8010526:	bb48      	cbnz	r0, 801057c <_printf_float+0xd0>
 8010528:	2200      	movs	r2, #0
 801052a:	2300      	movs	r3, #0
 801052c:	4640      	mov	r0, r8
 801052e:	4649      	mov	r1, r9
 8010530:	f7f0 fae4 	bl	8000afc <__aeabi_dcmplt>
 8010534:	b110      	cbz	r0, 801053c <_printf_float+0x90>
 8010536:	232d      	movs	r3, #45	; 0x2d
 8010538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801053c:	4b93      	ldr	r3, [pc, #588]	; (801078c <_printf_float+0x2e0>)
 801053e:	4894      	ldr	r0, [pc, #592]	; (8010790 <_printf_float+0x2e4>)
 8010540:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010544:	bf94      	ite	ls
 8010546:	4698      	movls	r8, r3
 8010548:	4680      	movhi	r8, r0
 801054a:	2303      	movs	r3, #3
 801054c:	6123      	str	r3, [r4, #16]
 801054e:	9b05      	ldr	r3, [sp, #20]
 8010550:	f023 0204 	bic.w	r2, r3, #4
 8010554:	6022      	str	r2, [r4, #0]
 8010556:	f04f 0900 	mov.w	r9, #0
 801055a:	9700      	str	r7, [sp, #0]
 801055c:	4633      	mov	r3, r6
 801055e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010560:	4621      	mov	r1, r4
 8010562:	4628      	mov	r0, r5
 8010564:	f000 f9d8 	bl	8010918 <_printf_common>
 8010568:	3001      	adds	r0, #1
 801056a:	f040 8090 	bne.w	801068e <_printf_float+0x1e2>
 801056e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010572:	b00d      	add	sp, #52	; 0x34
 8010574:	ecbd 8b02 	vpop	{d8}
 8010578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057c:	4642      	mov	r2, r8
 801057e:	464b      	mov	r3, r9
 8010580:	4640      	mov	r0, r8
 8010582:	4649      	mov	r1, r9
 8010584:	f7f0 fae2 	bl	8000b4c <__aeabi_dcmpun>
 8010588:	b140      	cbz	r0, 801059c <_printf_float+0xf0>
 801058a:	464b      	mov	r3, r9
 801058c:	2b00      	cmp	r3, #0
 801058e:	bfbc      	itt	lt
 8010590:	232d      	movlt	r3, #45	; 0x2d
 8010592:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010596:	487f      	ldr	r0, [pc, #508]	; (8010794 <_printf_float+0x2e8>)
 8010598:	4b7f      	ldr	r3, [pc, #508]	; (8010798 <_printf_float+0x2ec>)
 801059a:	e7d1      	b.n	8010540 <_printf_float+0x94>
 801059c:	6863      	ldr	r3, [r4, #4]
 801059e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80105a2:	9206      	str	r2, [sp, #24]
 80105a4:	1c5a      	adds	r2, r3, #1
 80105a6:	d13f      	bne.n	8010628 <_printf_float+0x17c>
 80105a8:	2306      	movs	r3, #6
 80105aa:	6063      	str	r3, [r4, #4]
 80105ac:	9b05      	ldr	r3, [sp, #20]
 80105ae:	6861      	ldr	r1, [r4, #4]
 80105b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80105b4:	2300      	movs	r3, #0
 80105b6:	9303      	str	r3, [sp, #12]
 80105b8:	ab0a      	add	r3, sp, #40	; 0x28
 80105ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80105be:	ab09      	add	r3, sp, #36	; 0x24
 80105c0:	ec49 8b10 	vmov	d0, r8, r9
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	6022      	str	r2, [r4, #0]
 80105c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80105cc:	4628      	mov	r0, r5
 80105ce:	f7ff fecd 	bl	801036c <__cvt>
 80105d2:	9b06      	ldr	r3, [sp, #24]
 80105d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105d6:	2b47      	cmp	r3, #71	; 0x47
 80105d8:	4680      	mov	r8, r0
 80105da:	d108      	bne.n	80105ee <_printf_float+0x142>
 80105dc:	1cc8      	adds	r0, r1, #3
 80105de:	db02      	blt.n	80105e6 <_printf_float+0x13a>
 80105e0:	6863      	ldr	r3, [r4, #4]
 80105e2:	4299      	cmp	r1, r3
 80105e4:	dd41      	ble.n	801066a <_printf_float+0x1be>
 80105e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80105ea:	fa5f fb8b 	uxtb.w	fp, fp
 80105ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80105f2:	d820      	bhi.n	8010636 <_printf_float+0x18a>
 80105f4:	3901      	subs	r1, #1
 80105f6:	465a      	mov	r2, fp
 80105f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80105fc:	9109      	str	r1, [sp, #36]	; 0x24
 80105fe:	f7ff ff17 	bl	8010430 <__exponent>
 8010602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010604:	1813      	adds	r3, r2, r0
 8010606:	2a01      	cmp	r2, #1
 8010608:	4681      	mov	r9, r0
 801060a:	6123      	str	r3, [r4, #16]
 801060c:	dc02      	bgt.n	8010614 <_printf_float+0x168>
 801060e:	6822      	ldr	r2, [r4, #0]
 8010610:	07d2      	lsls	r2, r2, #31
 8010612:	d501      	bpl.n	8010618 <_printf_float+0x16c>
 8010614:	3301      	adds	r3, #1
 8010616:	6123      	str	r3, [r4, #16]
 8010618:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801061c:	2b00      	cmp	r3, #0
 801061e:	d09c      	beq.n	801055a <_printf_float+0xae>
 8010620:	232d      	movs	r3, #45	; 0x2d
 8010622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010626:	e798      	b.n	801055a <_printf_float+0xae>
 8010628:	9a06      	ldr	r2, [sp, #24]
 801062a:	2a47      	cmp	r2, #71	; 0x47
 801062c:	d1be      	bne.n	80105ac <_printf_float+0x100>
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1bc      	bne.n	80105ac <_printf_float+0x100>
 8010632:	2301      	movs	r3, #1
 8010634:	e7b9      	b.n	80105aa <_printf_float+0xfe>
 8010636:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801063a:	d118      	bne.n	801066e <_printf_float+0x1c2>
 801063c:	2900      	cmp	r1, #0
 801063e:	6863      	ldr	r3, [r4, #4]
 8010640:	dd0b      	ble.n	801065a <_printf_float+0x1ae>
 8010642:	6121      	str	r1, [r4, #16]
 8010644:	b913      	cbnz	r3, 801064c <_printf_float+0x1a0>
 8010646:	6822      	ldr	r2, [r4, #0]
 8010648:	07d0      	lsls	r0, r2, #31
 801064a:	d502      	bpl.n	8010652 <_printf_float+0x1a6>
 801064c:	3301      	adds	r3, #1
 801064e:	440b      	add	r3, r1
 8010650:	6123      	str	r3, [r4, #16]
 8010652:	65a1      	str	r1, [r4, #88]	; 0x58
 8010654:	f04f 0900 	mov.w	r9, #0
 8010658:	e7de      	b.n	8010618 <_printf_float+0x16c>
 801065a:	b913      	cbnz	r3, 8010662 <_printf_float+0x1b6>
 801065c:	6822      	ldr	r2, [r4, #0]
 801065e:	07d2      	lsls	r2, r2, #31
 8010660:	d501      	bpl.n	8010666 <_printf_float+0x1ba>
 8010662:	3302      	adds	r3, #2
 8010664:	e7f4      	b.n	8010650 <_printf_float+0x1a4>
 8010666:	2301      	movs	r3, #1
 8010668:	e7f2      	b.n	8010650 <_printf_float+0x1a4>
 801066a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801066e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010670:	4299      	cmp	r1, r3
 8010672:	db05      	blt.n	8010680 <_printf_float+0x1d4>
 8010674:	6823      	ldr	r3, [r4, #0]
 8010676:	6121      	str	r1, [r4, #16]
 8010678:	07d8      	lsls	r0, r3, #31
 801067a:	d5ea      	bpl.n	8010652 <_printf_float+0x1a6>
 801067c:	1c4b      	adds	r3, r1, #1
 801067e:	e7e7      	b.n	8010650 <_printf_float+0x1a4>
 8010680:	2900      	cmp	r1, #0
 8010682:	bfd4      	ite	le
 8010684:	f1c1 0202 	rsble	r2, r1, #2
 8010688:	2201      	movgt	r2, #1
 801068a:	4413      	add	r3, r2
 801068c:	e7e0      	b.n	8010650 <_printf_float+0x1a4>
 801068e:	6823      	ldr	r3, [r4, #0]
 8010690:	055a      	lsls	r2, r3, #21
 8010692:	d407      	bmi.n	80106a4 <_printf_float+0x1f8>
 8010694:	6923      	ldr	r3, [r4, #16]
 8010696:	4642      	mov	r2, r8
 8010698:	4631      	mov	r1, r6
 801069a:	4628      	mov	r0, r5
 801069c:	47b8      	blx	r7
 801069e:	3001      	adds	r0, #1
 80106a0:	d12c      	bne.n	80106fc <_printf_float+0x250>
 80106a2:	e764      	b.n	801056e <_printf_float+0xc2>
 80106a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80106a8:	f240 80e0 	bls.w	801086c <_printf_float+0x3c0>
 80106ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80106b0:	2200      	movs	r2, #0
 80106b2:	2300      	movs	r3, #0
 80106b4:	f7f0 fa18 	bl	8000ae8 <__aeabi_dcmpeq>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	d034      	beq.n	8010726 <_printf_float+0x27a>
 80106bc:	4a37      	ldr	r2, [pc, #220]	; (801079c <_printf_float+0x2f0>)
 80106be:	2301      	movs	r3, #1
 80106c0:	4631      	mov	r1, r6
 80106c2:	4628      	mov	r0, r5
 80106c4:	47b8      	blx	r7
 80106c6:	3001      	adds	r0, #1
 80106c8:	f43f af51 	beq.w	801056e <_printf_float+0xc2>
 80106cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106d0:	429a      	cmp	r2, r3
 80106d2:	db02      	blt.n	80106da <_printf_float+0x22e>
 80106d4:	6823      	ldr	r3, [r4, #0]
 80106d6:	07d8      	lsls	r0, r3, #31
 80106d8:	d510      	bpl.n	80106fc <_printf_float+0x250>
 80106da:	ee18 3a10 	vmov	r3, s16
 80106de:	4652      	mov	r2, sl
 80106e0:	4631      	mov	r1, r6
 80106e2:	4628      	mov	r0, r5
 80106e4:	47b8      	blx	r7
 80106e6:	3001      	adds	r0, #1
 80106e8:	f43f af41 	beq.w	801056e <_printf_float+0xc2>
 80106ec:	f04f 0800 	mov.w	r8, #0
 80106f0:	f104 091a 	add.w	r9, r4, #26
 80106f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f6:	3b01      	subs	r3, #1
 80106f8:	4543      	cmp	r3, r8
 80106fa:	dc09      	bgt.n	8010710 <_printf_float+0x264>
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	079b      	lsls	r3, r3, #30
 8010700:	f100 8105 	bmi.w	801090e <_printf_float+0x462>
 8010704:	68e0      	ldr	r0, [r4, #12]
 8010706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010708:	4298      	cmp	r0, r3
 801070a:	bfb8      	it	lt
 801070c:	4618      	movlt	r0, r3
 801070e:	e730      	b.n	8010572 <_printf_float+0xc6>
 8010710:	2301      	movs	r3, #1
 8010712:	464a      	mov	r2, r9
 8010714:	4631      	mov	r1, r6
 8010716:	4628      	mov	r0, r5
 8010718:	47b8      	blx	r7
 801071a:	3001      	adds	r0, #1
 801071c:	f43f af27 	beq.w	801056e <_printf_float+0xc2>
 8010720:	f108 0801 	add.w	r8, r8, #1
 8010724:	e7e6      	b.n	80106f4 <_printf_float+0x248>
 8010726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010728:	2b00      	cmp	r3, #0
 801072a:	dc39      	bgt.n	80107a0 <_printf_float+0x2f4>
 801072c:	4a1b      	ldr	r2, [pc, #108]	; (801079c <_printf_float+0x2f0>)
 801072e:	2301      	movs	r3, #1
 8010730:	4631      	mov	r1, r6
 8010732:	4628      	mov	r0, r5
 8010734:	47b8      	blx	r7
 8010736:	3001      	adds	r0, #1
 8010738:	f43f af19 	beq.w	801056e <_printf_float+0xc2>
 801073c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010740:	4313      	orrs	r3, r2
 8010742:	d102      	bne.n	801074a <_printf_float+0x29e>
 8010744:	6823      	ldr	r3, [r4, #0]
 8010746:	07d9      	lsls	r1, r3, #31
 8010748:	d5d8      	bpl.n	80106fc <_printf_float+0x250>
 801074a:	ee18 3a10 	vmov	r3, s16
 801074e:	4652      	mov	r2, sl
 8010750:	4631      	mov	r1, r6
 8010752:	4628      	mov	r0, r5
 8010754:	47b8      	blx	r7
 8010756:	3001      	adds	r0, #1
 8010758:	f43f af09 	beq.w	801056e <_printf_float+0xc2>
 801075c:	f04f 0900 	mov.w	r9, #0
 8010760:	f104 0a1a 	add.w	sl, r4, #26
 8010764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010766:	425b      	negs	r3, r3
 8010768:	454b      	cmp	r3, r9
 801076a:	dc01      	bgt.n	8010770 <_printf_float+0x2c4>
 801076c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801076e:	e792      	b.n	8010696 <_printf_float+0x1ea>
 8010770:	2301      	movs	r3, #1
 8010772:	4652      	mov	r2, sl
 8010774:	4631      	mov	r1, r6
 8010776:	4628      	mov	r0, r5
 8010778:	47b8      	blx	r7
 801077a:	3001      	adds	r0, #1
 801077c:	f43f aef7 	beq.w	801056e <_printf_float+0xc2>
 8010780:	f109 0901 	add.w	r9, r9, #1
 8010784:	e7ee      	b.n	8010764 <_printf_float+0x2b8>
 8010786:	bf00      	nop
 8010788:	7fefffff 	.word	0x7fefffff
 801078c:	0805f395 	.word	0x0805f395
 8010790:	0805f399 	.word	0x0805f399
 8010794:	0805f3a1 	.word	0x0805f3a1
 8010798:	0805f39d 	.word	0x0805f39d
 801079c:	0805f3a5 	.word	0x0805f3a5
 80107a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80107a4:	429a      	cmp	r2, r3
 80107a6:	bfa8      	it	ge
 80107a8:	461a      	movge	r2, r3
 80107aa:	2a00      	cmp	r2, #0
 80107ac:	4691      	mov	r9, r2
 80107ae:	dc37      	bgt.n	8010820 <_printf_float+0x374>
 80107b0:	f04f 0b00 	mov.w	fp, #0
 80107b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107b8:	f104 021a 	add.w	r2, r4, #26
 80107bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80107be:	9305      	str	r3, [sp, #20]
 80107c0:	eba3 0309 	sub.w	r3, r3, r9
 80107c4:	455b      	cmp	r3, fp
 80107c6:	dc33      	bgt.n	8010830 <_printf_float+0x384>
 80107c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107cc:	429a      	cmp	r2, r3
 80107ce:	db3b      	blt.n	8010848 <_printf_float+0x39c>
 80107d0:	6823      	ldr	r3, [r4, #0]
 80107d2:	07da      	lsls	r2, r3, #31
 80107d4:	d438      	bmi.n	8010848 <_printf_float+0x39c>
 80107d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107d8:	9b05      	ldr	r3, [sp, #20]
 80107da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	eba2 0901 	sub.w	r9, r2, r1
 80107e2:	4599      	cmp	r9, r3
 80107e4:	bfa8      	it	ge
 80107e6:	4699      	movge	r9, r3
 80107e8:	f1b9 0f00 	cmp.w	r9, #0
 80107ec:	dc35      	bgt.n	801085a <_printf_float+0x3ae>
 80107ee:	f04f 0800 	mov.w	r8, #0
 80107f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107f6:	f104 0a1a 	add.w	sl, r4, #26
 80107fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107fe:	1a9b      	subs	r3, r3, r2
 8010800:	eba3 0309 	sub.w	r3, r3, r9
 8010804:	4543      	cmp	r3, r8
 8010806:	f77f af79 	ble.w	80106fc <_printf_float+0x250>
 801080a:	2301      	movs	r3, #1
 801080c:	4652      	mov	r2, sl
 801080e:	4631      	mov	r1, r6
 8010810:	4628      	mov	r0, r5
 8010812:	47b8      	blx	r7
 8010814:	3001      	adds	r0, #1
 8010816:	f43f aeaa 	beq.w	801056e <_printf_float+0xc2>
 801081a:	f108 0801 	add.w	r8, r8, #1
 801081e:	e7ec      	b.n	80107fa <_printf_float+0x34e>
 8010820:	4613      	mov	r3, r2
 8010822:	4631      	mov	r1, r6
 8010824:	4642      	mov	r2, r8
 8010826:	4628      	mov	r0, r5
 8010828:	47b8      	blx	r7
 801082a:	3001      	adds	r0, #1
 801082c:	d1c0      	bne.n	80107b0 <_printf_float+0x304>
 801082e:	e69e      	b.n	801056e <_printf_float+0xc2>
 8010830:	2301      	movs	r3, #1
 8010832:	4631      	mov	r1, r6
 8010834:	4628      	mov	r0, r5
 8010836:	9205      	str	r2, [sp, #20]
 8010838:	47b8      	blx	r7
 801083a:	3001      	adds	r0, #1
 801083c:	f43f ae97 	beq.w	801056e <_printf_float+0xc2>
 8010840:	9a05      	ldr	r2, [sp, #20]
 8010842:	f10b 0b01 	add.w	fp, fp, #1
 8010846:	e7b9      	b.n	80107bc <_printf_float+0x310>
 8010848:	ee18 3a10 	vmov	r3, s16
 801084c:	4652      	mov	r2, sl
 801084e:	4631      	mov	r1, r6
 8010850:	4628      	mov	r0, r5
 8010852:	47b8      	blx	r7
 8010854:	3001      	adds	r0, #1
 8010856:	d1be      	bne.n	80107d6 <_printf_float+0x32a>
 8010858:	e689      	b.n	801056e <_printf_float+0xc2>
 801085a:	9a05      	ldr	r2, [sp, #20]
 801085c:	464b      	mov	r3, r9
 801085e:	4442      	add	r2, r8
 8010860:	4631      	mov	r1, r6
 8010862:	4628      	mov	r0, r5
 8010864:	47b8      	blx	r7
 8010866:	3001      	adds	r0, #1
 8010868:	d1c1      	bne.n	80107ee <_printf_float+0x342>
 801086a:	e680      	b.n	801056e <_printf_float+0xc2>
 801086c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801086e:	2a01      	cmp	r2, #1
 8010870:	dc01      	bgt.n	8010876 <_printf_float+0x3ca>
 8010872:	07db      	lsls	r3, r3, #31
 8010874:	d538      	bpl.n	80108e8 <_printf_float+0x43c>
 8010876:	2301      	movs	r3, #1
 8010878:	4642      	mov	r2, r8
 801087a:	4631      	mov	r1, r6
 801087c:	4628      	mov	r0, r5
 801087e:	47b8      	blx	r7
 8010880:	3001      	adds	r0, #1
 8010882:	f43f ae74 	beq.w	801056e <_printf_float+0xc2>
 8010886:	ee18 3a10 	vmov	r3, s16
 801088a:	4652      	mov	r2, sl
 801088c:	4631      	mov	r1, r6
 801088e:	4628      	mov	r0, r5
 8010890:	47b8      	blx	r7
 8010892:	3001      	adds	r0, #1
 8010894:	f43f ae6b 	beq.w	801056e <_printf_float+0xc2>
 8010898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801089c:	2200      	movs	r2, #0
 801089e:	2300      	movs	r3, #0
 80108a0:	f7f0 f922 	bl	8000ae8 <__aeabi_dcmpeq>
 80108a4:	b9d8      	cbnz	r0, 80108de <_printf_float+0x432>
 80108a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108a8:	f108 0201 	add.w	r2, r8, #1
 80108ac:	3b01      	subs	r3, #1
 80108ae:	4631      	mov	r1, r6
 80108b0:	4628      	mov	r0, r5
 80108b2:	47b8      	blx	r7
 80108b4:	3001      	adds	r0, #1
 80108b6:	d10e      	bne.n	80108d6 <_printf_float+0x42a>
 80108b8:	e659      	b.n	801056e <_printf_float+0xc2>
 80108ba:	2301      	movs	r3, #1
 80108bc:	4652      	mov	r2, sl
 80108be:	4631      	mov	r1, r6
 80108c0:	4628      	mov	r0, r5
 80108c2:	47b8      	blx	r7
 80108c4:	3001      	adds	r0, #1
 80108c6:	f43f ae52 	beq.w	801056e <_printf_float+0xc2>
 80108ca:	f108 0801 	add.w	r8, r8, #1
 80108ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108d0:	3b01      	subs	r3, #1
 80108d2:	4543      	cmp	r3, r8
 80108d4:	dcf1      	bgt.n	80108ba <_printf_float+0x40e>
 80108d6:	464b      	mov	r3, r9
 80108d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80108dc:	e6dc      	b.n	8010698 <_printf_float+0x1ec>
 80108de:	f04f 0800 	mov.w	r8, #0
 80108e2:	f104 0a1a 	add.w	sl, r4, #26
 80108e6:	e7f2      	b.n	80108ce <_printf_float+0x422>
 80108e8:	2301      	movs	r3, #1
 80108ea:	4642      	mov	r2, r8
 80108ec:	e7df      	b.n	80108ae <_printf_float+0x402>
 80108ee:	2301      	movs	r3, #1
 80108f0:	464a      	mov	r2, r9
 80108f2:	4631      	mov	r1, r6
 80108f4:	4628      	mov	r0, r5
 80108f6:	47b8      	blx	r7
 80108f8:	3001      	adds	r0, #1
 80108fa:	f43f ae38 	beq.w	801056e <_printf_float+0xc2>
 80108fe:	f108 0801 	add.w	r8, r8, #1
 8010902:	68e3      	ldr	r3, [r4, #12]
 8010904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010906:	1a5b      	subs	r3, r3, r1
 8010908:	4543      	cmp	r3, r8
 801090a:	dcf0      	bgt.n	80108ee <_printf_float+0x442>
 801090c:	e6fa      	b.n	8010704 <_printf_float+0x258>
 801090e:	f04f 0800 	mov.w	r8, #0
 8010912:	f104 0919 	add.w	r9, r4, #25
 8010916:	e7f4      	b.n	8010902 <_printf_float+0x456>

08010918 <_printf_common>:
 8010918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801091c:	4616      	mov	r6, r2
 801091e:	4699      	mov	r9, r3
 8010920:	688a      	ldr	r2, [r1, #8]
 8010922:	690b      	ldr	r3, [r1, #16]
 8010924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010928:	4293      	cmp	r3, r2
 801092a:	bfb8      	it	lt
 801092c:	4613      	movlt	r3, r2
 801092e:	6033      	str	r3, [r6, #0]
 8010930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010934:	4607      	mov	r7, r0
 8010936:	460c      	mov	r4, r1
 8010938:	b10a      	cbz	r2, 801093e <_printf_common+0x26>
 801093a:	3301      	adds	r3, #1
 801093c:	6033      	str	r3, [r6, #0]
 801093e:	6823      	ldr	r3, [r4, #0]
 8010940:	0699      	lsls	r1, r3, #26
 8010942:	bf42      	ittt	mi
 8010944:	6833      	ldrmi	r3, [r6, #0]
 8010946:	3302      	addmi	r3, #2
 8010948:	6033      	strmi	r3, [r6, #0]
 801094a:	6825      	ldr	r5, [r4, #0]
 801094c:	f015 0506 	ands.w	r5, r5, #6
 8010950:	d106      	bne.n	8010960 <_printf_common+0x48>
 8010952:	f104 0a19 	add.w	sl, r4, #25
 8010956:	68e3      	ldr	r3, [r4, #12]
 8010958:	6832      	ldr	r2, [r6, #0]
 801095a:	1a9b      	subs	r3, r3, r2
 801095c:	42ab      	cmp	r3, r5
 801095e:	dc26      	bgt.n	80109ae <_printf_common+0x96>
 8010960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010964:	1e13      	subs	r3, r2, #0
 8010966:	6822      	ldr	r2, [r4, #0]
 8010968:	bf18      	it	ne
 801096a:	2301      	movne	r3, #1
 801096c:	0692      	lsls	r2, r2, #26
 801096e:	d42b      	bmi.n	80109c8 <_printf_common+0xb0>
 8010970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010974:	4649      	mov	r1, r9
 8010976:	4638      	mov	r0, r7
 8010978:	47c0      	blx	r8
 801097a:	3001      	adds	r0, #1
 801097c:	d01e      	beq.n	80109bc <_printf_common+0xa4>
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	68e5      	ldr	r5, [r4, #12]
 8010982:	6832      	ldr	r2, [r6, #0]
 8010984:	f003 0306 	and.w	r3, r3, #6
 8010988:	2b04      	cmp	r3, #4
 801098a:	bf08      	it	eq
 801098c:	1aad      	subeq	r5, r5, r2
 801098e:	68a3      	ldr	r3, [r4, #8]
 8010990:	6922      	ldr	r2, [r4, #16]
 8010992:	bf0c      	ite	eq
 8010994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010998:	2500      	movne	r5, #0
 801099a:	4293      	cmp	r3, r2
 801099c:	bfc4      	itt	gt
 801099e:	1a9b      	subgt	r3, r3, r2
 80109a0:	18ed      	addgt	r5, r5, r3
 80109a2:	2600      	movs	r6, #0
 80109a4:	341a      	adds	r4, #26
 80109a6:	42b5      	cmp	r5, r6
 80109a8:	d11a      	bne.n	80109e0 <_printf_common+0xc8>
 80109aa:	2000      	movs	r0, #0
 80109ac:	e008      	b.n	80109c0 <_printf_common+0xa8>
 80109ae:	2301      	movs	r3, #1
 80109b0:	4652      	mov	r2, sl
 80109b2:	4649      	mov	r1, r9
 80109b4:	4638      	mov	r0, r7
 80109b6:	47c0      	blx	r8
 80109b8:	3001      	adds	r0, #1
 80109ba:	d103      	bne.n	80109c4 <_printf_common+0xac>
 80109bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c4:	3501      	adds	r5, #1
 80109c6:	e7c6      	b.n	8010956 <_printf_common+0x3e>
 80109c8:	18e1      	adds	r1, r4, r3
 80109ca:	1c5a      	adds	r2, r3, #1
 80109cc:	2030      	movs	r0, #48	; 0x30
 80109ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109d2:	4422      	add	r2, r4
 80109d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109dc:	3302      	adds	r3, #2
 80109de:	e7c7      	b.n	8010970 <_printf_common+0x58>
 80109e0:	2301      	movs	r3, #1
 80109e2:	4622      	mov	r2, r4
 80109e4:	4649      	mov	r1, r9
 80109e6:	4638      	mov	r0, r7
 80109e8:	47c0      	blx	r8
 80109ea:	3001      	adds	r0, #1
 80109ec:	d0e6      	beq.n	80109bc <_printf_common+0xa4>
 80109ee:	3601      	adds	r6, #1
 80109f0:	e7d9      	b.n	80109a6 <_printf_common+0x8e>
	...

080109f4 <_printf_i>:
 80109f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109f8:	460c      	mov	r4, r1
 80109fa:	4691      	mov	r9, r2
 80109fc:	7e27      	ldrb	r7, [r4, #24]
 80109fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a00:	2f78      	cmp	r7, #120	; 0x78
 8010a02:	4680      	mov	r8, r0
 8010a04:	469a      	mov	sl, r3
 8010a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a0a:	d807      	bhi.n	8010a1c <_printf_i+0x28>
 8010a0c:	2f62      	cmp	r7, #98	; 0x62
 8010a0e:	d80a      	bhi.n	8010a26 <_printf_i+0x32>
 8010a10:	2f00      	cmp	r7, #0
 8010a12:	f000 80d8 	beq.w	8010bc6 <_printf_i+0x1d2>
 8010a16:	2f58      	cmp	r7, #88	; 0x58
 8010a18:	f000 80a3 	beq.w	8010b62 <_printf_i+0x16e>
 8010a1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a24:	e03a      	b.n	8010a9c <_printf_i+0xa8>
 8010a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a2a:	2b15      	cmp	r3, #21
 8010a2c:	d8f6      	bhi.n	8010a1c <_printf_i+0x28>
 8010a2e:	a001      	add	r0, pc, #4	; (adr r0, 8010a34 <_printf_i+0x40>)
 8010a30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010a34:	08010a8d 	.word	0x08010a8d
 8010a38:	08010aa1 	.word	0x08010aa1
 8010a3c:	08010a1d 	.word	0x08010a1d
 8010a40:	08010a1d 	.word	0x08010a1d
 8010a44:	08010a1d 	.word	0x08010a1d
 8010a48:	08010a1d 	.word	0x08010a1d
 8010a4c:	08010aa1 	.word	0x08010aa1
 8010a50:	08010a1d 	.word	0x08010a1d
 8010a54:	08010a1d 	.word	0x08010a1d
 8010a58:	08010a1d 	.word	0x08010a1d
 8010a5c:	08010a1d 	.word	0x08010a1d
 8010a60:	08010bad 	.word	0x08010bad
 8010a64:	08010ad1 	.word	0x08010ad1
 8010a68:	08010b8f 	.word	0x08010b8f
 8010a6c:	08010a1d 	.word	0x08010a1d
 8010a70:	08010a1d 	.word	0x08010a1d
 8010a74:	08010bcf 	.word	0x08010bcf
 8010a78:	08010a1d 	.word	0x08010a1d
 8010a7c:	08010ad1 	.word	0x08010ad1
 8010a80:	08010a1d 	.word	0x08010a1d
 8010a84:	08010a1d 	.word	0x08010a1d
 8010a88:	08010b97 	.word	0x08010b97
 8010a8c:	680b      	ldr	r3, [r1, #0]
 8010a8e:	1d1a      	adds	r2, r3, #4
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	600a      	str	r2, [r1, #0]
 8010a94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e0a3      	b.n	8010be8 <_printf_i+0x1f4>
 8010aa0:	6825      	ldr	r5, [r4, #0]
 8010aa2:	6808      	ldr	r0, [r1, #0]
 8010aa4:	062e      	lsls	r6, r5, #24
 8010aa6:	f100 0304 	add.w	r3, r0, #4
 8010aaa:	d50a      	bpl.n	8010ac2 <_printf_i+0xce>
 8010aac:	6805      	ldr	r5, [r0, #0]
 8010aae:	600b      	str	r3, [r1, #0]
 8010ab0:	2d00      	cmp	r5, #0
 8010ab2:	da03      	bge.n	8010abc <_printf_i+0xc8>
 8010ab4:	232d      	movs	r3, #45	; 0x2d
 8010ab6:	426d      	negs	r5, r5
 8010ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010abc:	485e      	ldr	r0, [pc, #376]	; (8010c38 <_printf_i+0x244>)
 8010abe:	230a      	movs	r3, #10
 8010ac0:	e019      	b.n	8010af6 <_printf_i+0x102>
 8010ac2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010ac6:	6805      	ldr	r5, [r0, #0]
 8010ac8:	600b      	str	r3, [r1, #0]
 8010aca:	bf18      	it	ne
 8010acc:	b22d      	sxthne	r5, r5
 8010ace:	e7ef      	b.n	8010ab0 <_printf_i+0xbc>
 8010ad0:	680b      	ldr	r3, [r1, #0]
 8010ad2:	6825      	ldr	r5, [r4, #0]
 8010ad4:	1d18      	adds	r0, r3, #4
 8010ad6:	6008      	str	r0, [r1, #0]
 8010ad8:	0628      	lsls	r0, r5, #24
 8010ada:	d501      	bpl.n	8010ae0 <_printf_i+0xec>
 8010adc:	681d      	ldr	r5, [r3, #0]
 8010ade:	e002      	b.n	8010ae6 <_printf_i+0xf2>
 8010ae0:	0669      	lsls	r1, r5, #25
 8010ae2:	d5fb      	bpl.n	8010adc <_printf_i+0xe8>
 8010ae4:	881d      	ldrh	r5, [r3, #0]
 8010ae6:	4854      	ldr	r0, [pc, #336]	; (8010c38 <_printf_i+0x244>)
 8010ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8010aea:	bf0c      	ite	eq
 8010aec:	2308      	moveq	r3, #8
 8010aee:	230a      	movne	r3, #10
 8010af0:	2100      	movs	r1, #0
 8010af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010af6:	6866      	ldr	r6, [r4, #4]
 8010af8:	60a6      	str	r6, [r4, #8]
 8010afa:	2e00      	cmp	r6, #0
 8010afc:	bfa2      	ittt	ge
 8010afe:	6821      	ldrge	r1, [r4, #0]
 8010b00:	f021 0104 	bicge.w	r1, r1, #4
 8010b04:	6021      	strge	r1, [r4, #0]
 8010b06:	b90d      	cbnz	r5, 8010b0c <_printf_i+0x118>
 8010b08:	2e00      	cmp	r6, #0
 8010b0a:	d04d      	beq.n	8010ba8 <_printf_i+0x1b4>
 8010b0c:	4616      	mov	r6, r2
 8010b0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b12:	fb03 5711 	mls	r7, r3, r1, r5
 8010b16:	5dc7      	ldrb	r7, [r0, r7]
 8010b18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b1c:	462f      	mov	r7, r5
 8010b1e:	42bb      	cmp	r3, r7
 8010b20:	460d      	mov	r5, r1
 8010b22:	d9f4      	bls.n	8010b0e <_printf_i+0x11a>
 8010b24:	2b08      	cmp	r3, #8
 8010b26:	d10b      	bne.n	8010b40 <_printf_i+0x14c>
 8010b28:	6823      	ldr	r3, [r4, #0]
 8010b2a:	07df      	lsls	r7, r3, #31
 8010b2c:	d508      	bpl.n	8010b40 <_printf_i+0x14c>
 8010b2e:	6923      	ldr	r3, [r4, #16]
 8010b30:	6861      	ldr	r1, [r4, #4]
 8010b32:	4299      	cmp	r1, r3
 8010b34:	bfde      	ittt	le
 8010b36:	2330      	movle	r3, #48	; 0x30
 8010b38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010b40:	1b92      	subs	r2, r2, r6
 8010b42:	6122      	str	r2, [r4, #16]
 8010b44:	f8cd a000 	str.w	sl, [sp]
 8010b48:	464b      	mov	r3, r9
 8010b4a:	aa03      	add	r2, sp, #12
 8010b4c:	4621      	mov	r1, r4
 8010b4e:	4640      	mov	r0, r8
 8010b50:	f7ff fee2 	bl	8010918 <_printf_common>
 8010b54:	3001      	adds	r0, #1
 8010b56:	d14c      	bne.n	8010bf2 <_printf_i+0x1fe>
 8010b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b5c:	b004      	add	sp, #16
 8010b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b62:	4835      	ldr	r0, [pc, #212]	; (8010c38 <_printf_i+0x244>)
 8010b64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b68:	6823      	ldr	r3, [r4, #0]
 8010b6a:	680e      	ldr	r6, [r1, #0]
 8010b6c:	061f      	lsls	r7, r3, #24
 8010b6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010b72:	600e      	str	r6, [r1, #0]
 8010b74:	d514      	bpl.n	8010ba0 <_printf_i+0x1ac>
 8010b76:	07d9      	lsls	r1, r3, #31
 8010b78:	bf44      	itt	mi
 8010b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8010b7e:	6023      	strmi	r3, [r4, #0]
 8010b80:	b91d      	cbnz	r5, 8010b8a <_printf_i+0x196>
 8010b82:	6823      	ldr	r3, [r4, #0]
 8010b84:	f023 0320 	bic.w	r3, r3, #32
 8010b88:	6023      	str	r3, [r4, #0]
 8010b8a:	2310      	movs	r3, #16
 8010b8c:	e7b0      	b.n	8010af0 <_printf_i+0xfc>
 8010b8e:	6823      	ldr	r3, [r4, #0]
 8010b90:	f043 0320 	orr.w	r3, r3, #32
 8010b94:	6023      	str	r3, [r4, #0]
 8010b96:	2378      	movs	r3, #120	; 0x78
 8010b98:	4828      	ldr	r0, [pc, #160]	; (8010c3c <_printf_i+0x248>)
 8010b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b9e:	e7e3      	b.n	8010b68 <_printf_i+0x174>
 8010ba0:	065e      	lsls	r6, r3, #25
 8010ba2:	bf48      	it	mi
 8010ba4:	b2ad      	uxthmi	r5, r5
 8010ba6:	e7e6      	b.n	8010b76 <_printf_i+0x182>
 8010ba8:	4616      	mov	r6, r2
 8010baa:	e7bb      	b.n	8010b24 <_printf_i+0x130>
 8010bac:	680b      	ldr	r3, [r1, #0]
 8010bae:	6826      	ldr	r6, [r4, #0]
 8010bb0:	6960      	ldr	r0, [r4, #20]
 8010bb2:	1d1d      	adds	r5, r3, #4
 8010bb4:	600d      	str	r5, [r1, #0]
 8010bb6:	0635      	lsls	r5, r6, #24
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	d501      	bpl.n	8010bc0 <_printf_i+0x1cc>
 8010bbc:	6018      	str	r0, [r3, #0]
 8010bbe:	e002      	b.n	8010bc6 <_printf_i+0x1d2>
 8010bc0:	0671      	lsls	r1, r6, #25
 8010bc2:	d5fb      	bpl.n	8010bbc <_printf_i+0x1c8>
 8010bc4:	8018      	strh	r0, [r3, #0]
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	6123      	str	r3, [r4, #16]
 8010bca:	4616      	mov	r6, r2
 8010bcc:	e7ba      	b.n	8010b44 <_printf_i+0x150>
 8010bce:	680b      	ldr	r3, [r1, #0]
 8010bd0:	1d1a      	adds	r2, r3, #4
 8010bd2:	600a      	str	r2, [r1, #0]
 8010bd4:	681e      	ldr	r6, [r3, #0]
 8010bd6:	6862      	ldr	r2, [r4, #4]
 8010bd8:	2100      	movs	r1, #0
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f7ef fb10 	bl	8000200 <memchr>
 8010be0:	b108      	cbz	r0, 8010be6 <_printf_i+0x1f2>
 8010be2:	1b80      	subs	r0, r0, r6
 8010be4:	6060      	str	r0, [r4, #4]
 8010be6:	6863      	ldr	r3, [r4, #4]
 8010be8:	6123      	str	r3, [r4, #16]
 8010bea:	2300      	movs	r3, #0
 8010bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bf0:	e7a8      	b.n	8010b44 <_printf_i+0x150>
 8010bf2:	6923      	ldr	r3, [r4, #16]
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	47d0      	blx	sl
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	d0ab      	beq.n	8010b58 <_printf_i+0x164>
 8010c00:	6823      	ldr	r3, [r4, #0]
 8010c02:	079b      	lsls	r3, r3, #30
 8010c04:	d413      	bmi.n	8010c2e <_printf_i+0x23a>
 8010c06:	68e0      	ldr	r0, [r4, #12]
 8010c08:	9b03      	ldr	r3, [sp, #12]
 8010c0a:	4298      	cmp	r0, r3
 8010c0c:	bfb8      	it	lt
 8010c0e:	4618      	movlt	r0, r3
 8010c10:	e7a4      	b.n	8010b5c <_printf_i+0x168>
 8010c12:	2301      	movs	r3, #1
 8010c14:	4632      	mov	r2, r6
 8010c16:	4649      	mov	r1, r9
 8010c18:	4640      	mov	r0, r8
 8010c1a:	47d0      	blx	sl
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	d09b      	beq.n	8010b58 <_printf_i+0x164>
 8010c20:	3501      	adds	r5, #1
 8010c22:	68e3      	ldr	r3, [r4, #12]
 8010c24:	9903      	ldr	r1, [sp, #12]
 8010c26:	1a5b      	subs	r3, r3, r1
 8010c28:	42ab      	cmp	r3, r5
 8010c2a:	dcf2      	bgt.n	8010c12 <_printf_i+0x21e>
 8010c2c:	e7eb      	b.n	8010c06 <_printf_i+0x212>
 8010c2e:	2500      	movs	r5, #0
 8010c30:	f104 0619 	add.w	r6, r4, #25
 8010c34:	e7f5      	b.n	8010c22 <_printf_i+0x22e>
 8010c36:	bf00      	nop
 8010c38:	0805f3a7 	.word	0x0805f3a7
 8010c3c:	0805f3b8 	.word	0x0805f3b8

08010c40 <_scanf_float>:
 8010c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c44:	b087      	sub	sp, #28
 8010c46:	4617      	mov	r7, r2
 8010c48:	9303      	str	r3, [sp, #12]
 8010c4a:	688b      	ldr	r3, [r1, #8]
 8010c4c:	1e5a      	subs	r2, r3, #1
 8010c4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010c52:	bf83      	ittte	hi
 8010c54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010c58:	195b      	addhi	r3, r3, r5
 8010c5a:	9302      	strhi	r3, [sp, #8]
 8010c5c:	2300      	movls	r3, #0
 8010c5e:	bf86      	itte	hi
 8010c60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010c64:	608b      	strhi	r3, [r1, #8]
 8010c66:	9302      	strls	r3, [sp, #8]
 8010c68:	680b      	ldr	r3, [r1, #0]
 8010c6a:	468b      	mov	fp, r1
 8010c6c:	2500      	movs	r5, #0
 8010c6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010c72:	f84b 3b1c 	str.w	r3, [fp], #28
 8010c76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010c7a:	4680      	mov	r8, r0
 8010c7c:	460c      	mov	r4, r1
 8010c7e:	465e      	mov	r6, fp
 8010c80:	46aa      	mov	sl, r5
 8010c82:	46a9      	mov	r9, r5
 8010c84:	9501      	str	r5, [sp, #4]
 8010c86:	68a2      	ldr	r2, [r4, #8]
 8010c88:	b152      	cbz	r2, 8010ca0 <_scanf_float+0x60>
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	2b4e      	cmp	r3, #78	; 0x4e
 8010c90:	d864      	bhi.n	8010d5c <_scanf_float+0x11c>
 8010c92:	2b40      	cmp	r3, #64	; 0x40
 8010c94:	d83c      	bhi.n	8010d10 <_scanf_float+0xd0>
 8010c96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010c9a:	b2c8      	uxtb	r0, r1
 8010c9c:	280e      	cmp	r0, #14
 8010c9e:	d93a      	bls.n	8010d16 <_scanf_float+0xd6>
 8010ca0:	f1b9 0f00 	cmp.w	r9, #0
 8010ca4:	d003      	beq.n	8010cae <_scanf_float+0x6e>
 8010ca6:	6823      	ldr	r3, [r4, #0]
 8010ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010cac:	6023      	str	r3, [r4, #0]
 8010cae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010cb2:	f1ba 0f01 	cmp.w	sl, #1
 8010cb6:	f200 8113 	bhi.w	8010ee0 <_scanf_float+0x2a0>
 8010cba:	455e      	cmp	r6, fp
 8010cbc:	f200 8105 	bhi.w	8010eca <_scanf_float+0x28a>
 8010cc0:	2501      	movs	r5, #1
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	b007      	add	sp, #28
 8010cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010cce:	2a0d      	cmp	r2, #13
 8010cd0:	d8e6      	bhi.n	8010ca0 <_scanf_float+0x60>
 8010cd2:	a101      	add	r1, pc, #4	; (adr r1, 8010cd8 <_scanf_float+0x98>)
 8010cd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010cd8:	08010e17 	.word	0x08010e17
 8010cdc:	08010ca1 	.word	0x08010ca1
 8010ce0:	08010ca1 	.word	0x08010ca1
 8010ce4:	08010ca1 	.word	0x08010ca1
 8010ce8:	08010e77 	.word	0x08010e77
 8010cec:	08010e4f 	.word	0x08010e4f
 8010cf0:	08010ca1 	.word	0x08010ca1
 8010cf4:	08010ca1 	.word	0x08010ca1
 8010cf8:	08010e25 	.word	0x08010e25
 8010cfc:	08010ca1 	.word	0x08010ca1
 8010d00:	08010ca1 	.word	0x08010ca1
 8010d04:	08010ca1 	.word	0x08010ca1
 8010d08:	08010ca1 	.word	0x08010ca1
 8010d0c:	08010ddd 	.word	0x08010ddd
 8010d10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010d14:	e7db      	b.n	8010cce <_scanf_float+0x8e>
 8010d16:	290e      	cmp	r1, #14
 8010d18:	d8c2      	bhi.n	8010ca0 <_scanf_float+0x60>
 8010d1a:	a001      	add	r0, pc, #4	; (adr r0, 8010d20 <_scanf_float+0xe0>)
 8010d1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010d20:	08010dcf 	.word	0x08010dcf
 8010d24:	08010ca1 	.word	0x08010ca1
 8010d28:	08010dcf 	.word	0x08010dcf
 8010d2c:	08010e63 	.word	0x08010e63
 8010d30:	08010ca1 	.word	0x08010ca1
 8010d34:	08010d7d 	.word	0x08010d7d
 8010d38:	08010db9 	.word	0x08010db9
 8010d3c:	08010db9 	.word	0x08010db9
 8010d40:	08010db9 	.word	0x08010db9
 8010d44:	08010db9 	.word	0x08010db9
 8010d48:	08010db9 	.word	0x08010db9
 8010d4c:	08010db9 	.word	0x08010db9
 8010d50:	08010db9 	.word	0x08010db9
 8010d54:	08010db9 	.word	0x08010db9
 8010d58:	08010db9 	.word	0x08010db9
 8010d5c:	2b6e      	cmp	r3, #110	; 0x6e
 8010d5e:	d809      	bhi.n	8010d74 <_scanf_float+0x134>
 8010d60:	2b60      	cmp	r3, #96	; 0x60
 8010d62:	d8b2      	bhi.n	8010cca <_scanf_float+0x8a>
 8010d64:	2b54      	cmp	r3, #84	; 0x54
 8010d66:	d077      	beq.n	8010e58 <_scanf_float+0x218>
 8010d68:	2b59      	cmp	r3, #89	; 0x59
 8010d6a:	d199      	bne.n	8010ca0 <_scanf_float+0x60>
 8010d6c:	2d07      	cmp	r5, #7
 8010d6e:	d197      	bne.n	8010ca0 <_scanf_float+0x60>
 8010d70:	2508      	movs	r5, #8
 8010d72:	e029      	b.n	8010dc8 <_scanf_float+0x188>
 8010d74:	2b74      	cmp	r3, #116	; 0x74
 8010d76:	d06f      	beq.n	8010e58 <_scanf_float+0x218>
 8010d78:	2b79      	cmp	r3, #121	; 0x79
 8010d7a:	e7f6      	b.n	8010d6a <_scanf_float+0x12a>
 8010d7c:	6821      	ldr	r1, [r4, #0]
 8010d7e:	05c8      	lsls	r0, r1, #23
 8010d80:	d51a      	bpl.n	8010db8 <_scanf_float+0x178>
 8010d82:	9b02      	ldr	r3, [sp, #8]
 8010d84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010d88:	6021      	str	r1, [r4, #0]
 8010d8a:	f109 0901 	add.w	r9, r9, #1
 8010d8e:	b11b      	cbz	r3, 8010d98 <_scanf_float+0x158>
 8010d90:	3b01      	subs	r3, #1
 8010d92:	3201      	adds	r2, #1
 8010d94:	9302      	str	r3, [sp, #8]
 8010d96:	60a2      	str	r2, [r4, #8]
 8010d98:	68a3      	ldr	r3, [r4, #8]
 8010d9a:	3b01      	subs	r3, #1
 8010d9c:	60a3      	str	r3, [r4, #8]
 8010d9e:	6923      	ldr	r3, [r4, #16]
 8010da0:	3301      	adds	r3, #1
 8010da2:	6123      	str	r3, [r4, #16]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	3b01      	subs	r3, #1
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	607b      	str	r3, [r7, #4]
 8010dac:	f340 8084 	ble.w	8010eb8 <_scanf_float+0x278>
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	3301      	adds	r3, #1
 8010db4:	603b      	str	r3, [r7, #0]
 8010db6:	e766      	b.n	8010c86 <_scanf_float+0x46>
 8010db8:	eb1a 0f05 	cmn.w	sl, r5
 8010dbc:	f47f af70 	bne.w	8010ca0 <_scanf_float+0x60>
 8010dc0:	6822      	ldr	r2, [r4, #0]
 8010dc2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010dc6:	6022      	str	r2, [r4, #0]
 8010dc8:	f806 3b01 	strb.w	r3, [r6], #1
 8010dcc:	e7e4      	b.n	8010d98 <_scanf_float+0x158>
 8010dce:	6822      	ldr	r2, [r4, #0]
 8010dd0:	0610      	lsls	r0, r2, #24
 8010dd2:	f57f af65 	bpl.w	8010ca0 <_scanf_float+0x60>
 8010dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010dda:	e7f4      	b.n	8010dc6 <_scanf_float+0x186>
 8010ddc:	f1ba 0f00 	cmp.w	sl, #0
 8010de0:	d10e      	bne.n	8010e00 <_scanf_float+0x1c0>
 8010de2:	f1b9 0f00 	cmp.w	r9, #0
 8010de6:	d10e      	bne.n	8010e06 <_scanf_float+0x1c6>
 8010de8:	6822      	ldr	r2, [r4, #0]
 8010dea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010dee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010df2:	d108      	bne.n	8010e06 <_scanf_float+0x1c6>
 8010df4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010df8:	6022      	str	r2, [r4, #0]
 8010dfa:	f04f 0a01 	mov.w	sl, #1
 8010dfe:	e7e3      	b.n	8010dc8 <_scanf_float+0x188>
 8010e00:	f1ba 0f02 	cmp.w	sl, #2
 8010e04:	d055      	beq.n	8010eb2 <_scanf_float+0x272>
 8010e06:	2d01      	cmp	r5, #1
 8010e08:	d002      	beq.n	8010e10 <_scanf_float+0x1d0>
 8010e0a:	2d04      	cmp	r5, #4
 8010e0c:	f47f af48 	bne.w	8010ca0 <_scanf_float+0x60>
 8010e10:	3501      	adds	r5, #1
 8010e12:	b2ed      	uxtb	r5, r5
 8010e14:	e7d8      	b.n	8010dc8 <_scanf_float+0x188>
 8010e16:	f1ba 0f01 	cmp.w	sl, #1
 8010e1a:	f47f af41 	bne.w	8010ca0 <_scanf_float+0x60>
 8010e1e:	f04f 0a02 	mov.w	sl, #2
 8010e22:	e7d1      	b.n	8010dc8 <_scanf_float+0x188>
 8010e24:	b97d      	cbnz	r5, 8010e46 <_scanf_float+0x206>
 8010e26:	f1b9 0f00 	cmp.w	r9, #0
 8010e2a:	f47f af3c 	bne.w	8010ca6 <_scanf_float+0x66>
 8010e2e:	6822      	ldr	r2, [r4, #0]
 8010e30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010e34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010e38:	f47f af39 	bne.w	8010cae <_scanf_float+0x6e>
 8010e3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010e40:	6022      	str	r2, [r4, #0]
 8010e42:	2501      	movs	r5, #1
 8010e44:	e7c0      	b.n	8010dc8 <_scanf_float+0x188>
 8010e46:	2d03      	cmp	r5, #3
 8010e48:	d0e2      	beq.n	8010e10 <_scanf_float+0x1d0>
 8010e4a:	2d05      	cmp	r5, #5
 8010e4c:	e7de      	b.n	8010e0c <_scanf_float+0x1cc>
 8010e4e:	2d02      	cmp	r5, #2
 8010e50:	f47f af26 	bne.w	8010ca0 <_scanf_float+0x60>
 8010e54:	2503      	movs	r5, #3
 8010e56:	e7b7      	b.n	8010dc8 <_scanf_float+0x188>
 8010e58:	2d06      	cmp	r5, #6
 8010e5a:	f47f af21 	bne.w	8010ca0 <_scanf_float+0x60>
 8010e5e:	2507      	movs	r5, #7
 8010e60:	e7b2      	b.n	8010dc8 <_scanf_float+0x188>
 8010e62:	6822      	ldr	r2, [r4, #0]
 8010e64:	0591      	lsls	r1, r2, #22
 8010e66:	f57f af1b 	bpl.w	8010ca0 <_scanf_float+0x60>
 8010e6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010e6e:	6022      	str	r2, [r4, #0]
 8010e70:	f8cd 9004 	str.w	r9, [sp, #4]
 8010e74:	e7a8      	b.n	8010dc8 <_scanf_float+0x188>
 8010e76:	6822      	ldr	r2, [r4, #0]
 8010e78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010e7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010e80:	d006      	beq.n	8010e90 <_scanf_float+0x250>
 8010e82:	0550      	lsls	r0, r2, #21
 8010e84:	f57f af0c 	bpl.w	8010ca0 <_scanf_float+0x60>
 8010e88:	f1b9 0f00 	cmp.w	r9, #0
 8010e8c:	f43f af0f 	beq.w	8010cae <_scanf_float+0x6e>
 8010e90:	0591      	lsls	r1, r2, #22
 8010e92:	bf58      	it	pl
 8010e94:	9901      	ldrpl	r1, [sp, #4]
 8010e96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010e9a:	bf58      	it	pl
 8010e9c:	eba9 0101 	subpl.w	r1, r9, r1
 8010ea0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010ea4:	bf58      	it	pl
 8010ea6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010eaa:	6022      	str	r2, [r4, #0]
 8010eac:	f04f 0900 	mov.w	r9, #0
 8010eb0:	e78a      	b.n	8010dc8 <_scanf_float+0x188>
 8010eb2:	f04f 0a03 	mov.w	sl, #3
 8010eb6:	e787      	b.n	8010dc8 <_scanf_float+0x188>
 8010eb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010ebc:	4639      	mov	r1, r7
 8010ebe:	4640      	mov	r0, r8
 8010ec0:	4798      	blx	r3
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	f43f aedf 	beq.w	8010c86 <_scanf_float+0x46>
 8010ec8:	e6ea      	b.n	8010ca0 <_scanf_float+0x60>
 8010eca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ece:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ed2:	463a      	mov	r2, r7
 8010ed4:	4640      	mov	r0, r8
 8010ed6:	4798      	blx	r3
 8010ed8:	6923      	ldr	r3, [r4, #16]
 8010eda:	3b01      	subs	r3, #1
 8010edc:	6123      	str	r3, [r4, #16]
 8010ede:	e6ec      	b.n	8010cba <_scanf_float+0x7a>
 8010ee0:	1e6b      	subs	r3, r5, #1
 8010ee2:	2b06      	cmp	r3, #6
 8010ee4:	d825      	bhi.n	8010f32 <_scanf_float+0x2f2>
 8010ee6:	2d02      	cmp	r5, #2
 8010ee8:	d836      	bhi.n	8010f58 <_scanf_float+0x318>
 8010eea:	455e      	cmp	r6, fp
 8010eec:	f67f aee8 	bls.w	8010cc0 <_scanf_float+0x80>
 8010ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ef4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ef8:	463a      	mov	r2, r7
 8010efa:	4640      	mov	r0, r8
 8010efc:	4798      	blx	r3
 8010efe:	6923      	ldr	r3, [r4, #16]
 8010f00:	3b01      	subs	r3, #1
 8010f02:	6123      	str	r3, [r4, #16]
 8010f04:	e7f1      	b.n	8010eea <_scanf_float+0x2aa>
 8010f06:	9802      	ldr	r0, [sp, #8]
 8010f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010f10:	9002      	str	r0, [sp, #8]
 8010f12:	463a      	mov	r2, r7
 8010f14:	4640      	mov	r0, r8
 8010f16:	4798      	blx	r3
 8010f18:	6923      	ldr	r3, [r4, #16]
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	6123      	str	r3, [r4, #16]
 8010f1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010f22:	fa5f fa8a 	uxtb.w	sl, sl
 8010f26:	f1ba 0f02 	cmp.w	sl, #2
 8010f2a:	d1ec      	bne.n	8010f06 <_scanf_float+0x2c6>
 8010f2c:	3d03      	subs	r5, #3
 8010f2e:	b2ed      	uxtb	r5, r5
 8010f30:	1b76      	subs	r6, r6, r5
 8010f32:	6823      	ldr	r3, [r4, #0]
 8010f34:	05da      	lsls	r2, r3, #23
 8010f36:	d52f      	bpl.n	8010f98 <_scanf_float+0x358>
 8010f38:	055b      	lsls	r3, r3, #21
 8010f3a:	d510      	bpl.n	8010f5e <_scanf_float+0x31e>
 8010f3c:	455e      	cmp	r6, fp
 8010f3e:	f67f aebf 	bls.w	8010cc0 <_scanf_float+0x80>
 8010f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f4a:	463a      	mov	r2, r7
 8010f4c:	4640      	mov	r0, r8
 8010f4e:	4798      	blx	r3
 8010f50:	6923      	ldr	r3, [r4, #16]
 8010f52:	3b01      	subs	r3, #1
 8010f54:	6123      	str	r3, [r4, #16]
 8010f56:	e7f1      	b.n	8010f3c <_scanf_float+0x2fc>
 8010f58:	46aa      	mov	sl, r5
 8010f5a:	9602      	str	r6, [sp, #8]
 8010f5c:	e7df      	b.n	8010f1e <_scanf_float+0x2de>
 8010f5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010f62:	6923      	ldr	r3, [r4, #16]
 8010f64:	2965      	cmp	r1, #101	; 0x65
 8010f66:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010f6a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8010f6e:	6123      	str	r3, [r4, #16]
 8010f70:	d00c      	beq.n	8010f8c <_scanf_float+0x34c>
 8010f72:	2945      	cmp	r1, #69	; 0x45
 8010f74:	d00a      	beq.n	8010f8c <_scanf_float+0x34c>
 8010f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f7a:	463a      	mov	r2, r7
 8010f7c:	4640      	mov	r0, r8
 8010f7e:	4798      	blx	r3
 8010f80:	6923      	ldr	r3, [r4, #16]
 8010f82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010f86:	3b01      	subs	r3, #1
 8010f88:	1eb5      	subs	r5, r6, #2
 8010f8a:	6123      	str	r3, [r4, #16]
 8010f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f90:	463a      	mov	r2, r7
 8010f92:	4640      	mov	r0, r8
 8010f94:	4798      	blx	r3
 8010f96:	462e      	mov	r6, r5
 8010f98:	6825      	ldr	r5, [r4, #0]
 8010f9a:	f015 0510 	ands.w	r5, r5, #16
 8010f9e:	d158      	bne.n	8011052 <_scanf_float+0x412>
 8010fa0:	7035      	strb	r5, [r6, #0]
 8010fa2:	6823      	ldr	r3, [r4, #0]
 8010fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010fac:	d11c      	bne.n	8010fe8 <_scanf_float+0x3a8>
 8010fae:	9b01      	ldr	r3, [sp, #4]
 8010fb0:	454b      	cmp	r3, r9
 8010fb2:	eba3 0209 	sub.w	r2, r3, r9
 8010fb6:	d124      	bne.n	8011002 <_scanf_float+0x3c2>
 8010fb8:	2200      	movs	r2, #0
 8010fba:	4659      	mov	r1, fp
 8010fbc:	4640      	mov	r0, r8
 8010fbe:	f000 fead 	bl	8011d1c <_strtod_r>
 8010fc2:	9b03      	ldr	r3, [sp, #12]
 8010fc4:	6821      	ldr	r1, [r4, #0]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f011 0f02 	tst.w	r1, #2
 8010fcc:	ec57 6b10 	vmov	r6, r7, d0
 8010fd0:	f103 0204 	add.w	r2, r3, #4
 8010fd4:	d020      	beq.n	8011018 <_scanf_float+0x3d8>
 8010fd6:	9903      	ldr	r1, [sp, #12]
 8010fd8:	600a      	str	r2, [r1, #0]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	e9c3 6700 	strd	r6, r7, [r3]
 8010fe0:	68e3      	ldr	r3, [r4, #12]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	60e3      	str	r3, [r4, #12]
 8010fe6:	e66c      	b.n	8010cc2 <_scanf_float+0x82>
 8010fe8:	9b04      	ldr	r3, [sp, #16]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d0e4      	beq.n	8010fb8 <_scanf_float+0x378>
 8010fee:	9905      	ldr	r1, [sp, #20]
 8010ff0:	230a      	movs	r3, #10
 8010ff2:	462a      	mov	r2, r5
 8010ff4:	3101      	adds	r1, #1
 8010ff6:	4640      	mov	r0, r8
 8010ff8:	f000 ff1a 	bl	8011e30 <_strtol_r>
 8010ffc:	9b04      	ldr	r3, [sp, #16]
 8010ffe:	9e05      	ldr	r6, [sp, #20]
 8011000:	1ac2      	subs	r2, r0, r3
 8011002:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011006:	429e      	cmp	r6, r3
 8011008:	bf28      	it	cs
 801100a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801100e:	4912      	ldr	r1, [pc, #72]	; (8011058 <_scanf_float+0x418>)
 8011010:	4630      	mov	r0, r6
 8011012:	f000 f83b 	bl	801108c <siprintf>
 8011016:	e7cf      	b.n	8010fb8 <_scanf_float+0x378>
 8011018:	f011 0f04 	tst.w	r1, #4
 801101c:	9903      	ldr	r1, [sp, #12]
 801101e:	600a      	str	r2, [r1, #0]
 8011020:	d1db      	bne.n	8010fda <_scanf_float+0x39a>
 8011022:	f8d3 8000 	ldr.w	r8, [r3]
 8011026:	ee10 2a10 	vmov	r2, s0
 801102a:	ee10 0a10 	vmov	r0, s0
 801102e:	463b      	mov	r3, r7
 8011030:	4639      	mov	r1, r7
 8011032:	f7ef fd8b 	bl	8000b4c <__aeabi_dcmpun>
 8011036:	b128      	cbz	r0, 8011044 <_scanf_float+0x404>
 8011038:	4808      	ldr	r0, [pc, #32]	; (801105c <_scanf_float+0x41c>)
 801103a:	f000 f821 	bl	8011080 <nanf>
 801103e:	ed88 0a00 	vstr	s0, [r8]
 8011042:	e7cd      	b.n	8010fe0 <_scanf_float+0x3a0>
 8011044:	4630      	mov	r0, r6
 8011046:	4639      	mov	r1, r7
 8011048:	f7ef fdde 	bl	8000c08 <__aeabi_d2f>
 801104c:	f8c8 0000 	str.w	r0, [r8]
 8011050:	e7c6      	b.n	8010fe0 <_scanf_float+0x3a0>
 8011052:	2500      	movs	r5, #0
 8011054:	e635      	b.n	8010cc2 <_scanf_float+0x82>
 8011056:	bf00      	nop
 8011058:	0805f3c9 	.word	0x0805f3c9
 801105c:	0805f37f 	.word	0x0805f37f

08011060 <_sbrk_r>:
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	4d06      	ldr	r5, [pc, #24]	; (801107c <_sbrk_r+0x1c>)
 8011064:	2300      	movs	r3, #0
 8011066:	4604      	mov	r4, r0
 8011068:	4608      	mov	r0, r1
 801106a:	602b      	str	r3, [r5, #0]
 801106c:	f7f1 f90c 	bl	8002288 <_sbrk>
 8011070:	1c43      	adds	r3, r0, #1
 8011072:	d102      	bne.n	801107a <_sbrk_r+0x1a>
 8011074:	682b      	ldr	r3, [r5, #0]
 8011076:	b103      	cbz	r3, 801107a <_sbrk_r+0x1a>
 8011078:	6023      	str	r3, [r4, #0]
 801107a:	bd38      	pop	{r3, r4, r5, pc}
 801107c:	20013cb0 	.word	0x20013cb0

08011080 <nanf>:
 8011080:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011088 <nanf+0x8>
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop
 8011088:	7fc00000 	.word	0x7fc00000

0801108c <siprintf>:
 801108c:	b40e      	push	{r1, r2, r3}
 801108e:	b500      	push	{lr}
 8011090:	b09c      	sub	sp, #112	; 0x70
 8011092:	ab1d      	add	r3, sp, #116	; 0x74
 8011094:	9002      	str	r0, [sp, #8]
 8011096:	9006      	str	r0, [sp, #24]
 8011098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801109c:	4809      	ldr	r0, [pc, #36]	; (80110c4 <siprintf+0x38>)
 801109e:	9107      	str	r1, [sp, #28]
 80110a0:	9104      	str	r1, [sp, #16]
 80110a2:	4909      	ldr	r1, [pc, #36]	; (80110c8 <siprintf+0x3c>)
 80110a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80110a8:	9105      	str	r1, [sp, #20]
 80110aa:	6800      	ldr	r0, [r0, #0]
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	a902      	add	r1, sp, #8
 80110b0:	f003 f914 	bl	80142dc <_svfiprintf_r>
 80110b4:	9b02      	ldr	r3, [sp, #8]
 80110b6:	2200      	movs	r2, #0
 80110b8:	701a      	strb	r2, [r3, #0]
 80110ba:	b01c      	add	sp, #112	; 0x70
 80110bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80110c0:	b003      	add	sp, #12
 80110c2:	4770      	bx	lr
 80110c4:	20000ed8 	.word	0x20000ed8
 80110c8:	ffff0208 	.word	0xffff0208

080110cc <sulp>:
 80110cc:	b570      	push	{r4, r5, r6, lr}
 80110ce:	4604      	mov	r4, r0
 80110d0:	460d      	mov	r5, r1
 80110d2:	ec45 4b10 	vmov	d0, r4, r5
 80110d6:	4616      	mov	r6, r2
 80110d8:	f002 ff20 	bl	8013f1c <__ulp>
 80110dc:	ec51 0b10 	vmov	r0, r1, d0
 80110e0:	b17e      	cbz	r6, 8011102 <sulp+0x36>
 80110e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80110e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	dd09      	ble.n	8011102 <sulp+0x36>
 80110ee:	051b      	lsls	r3, r3, #20
 80110f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80110f4:	2400      	movs	r4, #0
 80110f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80110fa:	4622      	mov	r2, r4
 80110fc:	462b      	mov	r3, r5
 80110fe:	f7ef fa8b 	bl	8000618 <__aeabi_dmul>
 8011102:	bd70      	pop	{r4, r5, r6, pc}
 8011104:	0000      	movs	r0, r0
	...

08011108 <_strtod_l>:
 8011108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110c:	b0a3      	sub	sp, #140	; 0x8c
 801110e:	461f      	mov	r7, r3
 8011110:	2300      	movs	r3, #0
 8011112:	931e      	str	r3, [sp, #120]	; 0x78
 8011114:	4ba4      	ldr	r3, [pc, #656]	; (80113a8 <_strtod_l+0x2a0>)
 8011116:	9219      	str	r2, [sp, #100]	; 0x64
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	9307      	str	r3, [sp, #28]
 801111c:	4604      	mov	r4, r0
 801111e:	4618      	mov	r0, r3
 8011120:	4688      	mov	r8, r1
 8011122:	f7ef f85f 	bl	80001e4 <strlen>
 8011126:	f04f 0a00 	mov.w	sl, #0
 801112a:	4605      	mov	r5, r0
 801112c:	f04f 0b00 	mov.w	fp, #0
 8011130:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011136:	781a      	ldrb	r2, [r3, #0]
 8011138:	2a2b      	cmp	r2, #43	; 0x2b
 801113a:	d04c      	beq.n	80111d6 <_strtod_l+0xce>
 801113c:	d839      	bhi.n	80111b2 <_strtod_l+0xaa>
 801113e:	2a0d      	cmp	r2, #13
 8011140:	d832      	bhi.n	80111a8 <_strtod_l+0xa0>
 8011142:	2a08      	cmp	r2, #8
 8011144:	d832      	bhi.n	80111ac <_strtod_l+0xa4>
 8011146:	2a00      	cmp	r2, #0
 8011148:	d03c      	beq.n	80111c4 <_strtod_l+0xbc>
 801114a:	2300      	movs	r3, #0
 801114c:	930e      	str	r3, [sp, #56]	; 0x38
 801114e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011150:	7833      	ldrb	r3, [r6, #0]
 8011152:	2b30      	cmp	r3, #48	; 0x30
 8011154:	f040 80b4 	bne.w	80112c0 <_strtod_l+0x1b8>
 8011158:	7873      	ldrb	r3, [r6, #1]
 801115a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801115e:	2b58      	cmp	r3, #88	; 0x58
 8011160:	d16c      	bne.n	801123c <_strtod_l+0x134>
 8011162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011164:	9301      	str	r3, [sp, #4]
 8011166:	ab1e      	add	r3, sp, #120	; 0x78
 8011168:	9702      	str	r7, [sp, #8]
 801116a:	9300      	str	r3, [sp, #0]
 801116c:	4a8f      	ldr	r2, [pc, #572]	; (80113ac <_strtod_l+0x2a4>)
 801116e:	ab1f      	add	r3, sp, #124	; 0x7c
 8011170:	a91d      	add	r1, sp, #116	; 0x74
 8011172:	4620      	mov	r0, r4
 8011174:	f001 ffba 	bl	80130ec <__gethex>
 8011178:	f010 0707 	ands.w	r7, r0, #7
 801117c:	4605      	mov	r5, r0
 801117e:	d005      	beq.n	801118c <_strtod_l+0x84>
 8011180:	2f06      	cmp	r7, #6
 8011182:	d12a      	bne.n	80111da <_strtod_l+0xd2>
 8011184:	3601      	adds	r6, #1
 8011186:	2300      	movs	r3, #0
 8011188:	961d      	str	r6, [sp, #116]	; 0x74
 801118a:	930e      	str	r3, [sp, #56]	; 0x38
 801118c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801118e:	2b00      	cmp	r3, #0
 8011190:	f040 8596 	bne.w	8011cc0 <_strtod_l+0xbb8>
 8011194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011196:	b1db      	cbz	r3, 80111d0 <_strtod_l+0xc8>
 8011198:	4652      	mov	r2, sl
 801119a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801119e:	ec43 2b10 	vmov	d0, r2, r3
 80111a2:	b023      	add	sp, #140	; 0x8c
 80111a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a8:	2a20      	cmp	r2, #32
 80111aa:	d1ce      	bne.n	801114a <_strtod_l+0x42>
 80111ac:	3301      	adds	r3, #1
 80111ae:	931d      	str	r3, [sp, #116]	; 0x74
 80111b0:	e7c0      	b.n	8011134 <_strtod_l+0x2c>
 80111b2:	2a2d      	cmp	r2, #45	; 0x2d
 80111b4:	d1c9      	bne.n	801114a <_strtod_l+0x42>
 80111b6:	2201      	movs	r2, #1
 80111b8:	920e      	str	r2, [sp, #56]	; 0x38
 80111ba:	1c5a      	adds	r2, r3, #1
 80111bc:	921d      	str	r2, [sp, #116]	; 0x74
 80111be:	785b      	ldrb	r3, [r3, #1]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d1c4      	bne.n	801114e <_strtod_l+0x46>
 80111c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80111c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f040 8576 	bne.w	8011cbc <_strtod_l+0xbb4>
 80111d0:	4652      	mov	r2, sl
 80111d2:	465b      	mov	r3, fp
 80111d4:	e7e3      	b.n	801119e <_strtod_l+0x96>
 80111d6:	2200      	movs	r2, #0
 80111d8:	e7ee      	b.n	80111b8 <_strtod_l+0xb0>
 80111da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80111dc:	b13a      	cbz	r2, 80111ee <_strtod_l+0xe6>
 80111de:	2135      	movs	r1, #53	; 0x35
 80111e0:	a820      	add	r0, sp, #128	; 0x80
 80111e2:	f002 ffa6 	bl	8014132 <__copybits>
 80111e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80111e8:	4620      	mov	r0, r4
 80111ea:	f002 fb6b 	bl	80138c4 <_Bfree>
 80111ee:	3f01      	subs	r7, #1
 80111f0:	2f05      	cmp	r7, #5
 80111f2:	d807      	bhi.n	8011204 <_strtod_l+0xfc>
 80111f4:	e8df f007 	tbb	[pc, r7]
 80111f8:	1d180b0e 	.word	0x1d180b0e
 80111fc:	030e      	.short	0x030e
 80111fe:	f04f 0b00 	mov.w	fp, #0
 8011202:	46da      	mov	sl, fp
 8011204:	0728      	lsls	r0, r5, #28
 8011206:	d5c1      	bpl.n	801118c <_strtod_l+0x84>
 8011208:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801120c:	e7be      	b.n	801118c <_strtod_l+0x84>
 801120e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011212:	e7f7      	b.n	8011204 <_strtod_l+0xfc>
 8011214:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011218:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801121a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801121e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011222:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011226:	e7ed      	b.n	8011204 <_strtod_l+0xfc>
 8011228:	f8df b184 	ldr.w	fp, [pc, #388]	; 80113b0 <_strtod_l+0x2a8>
 801122c:	f04f 0a00 	mov.w	sl, #0
 8011230:	e7e8      	b.n	8011204 <_strtod_l+0xfc>
 8011232:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011236:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801123a:	e7e3      	b.n	8011204 <_strtod_l+0xfc>
 801123c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801123e:	1c5a      	adds	r2, r3, #1
 8011240:	921d      	str	r2, [sp, #116]	; 0x74
 8011242:	785b      	ldrb	r3, [r3, #1]
 8011244:	2b30      	cmp	r3, #48	; 0x30
 8011246:	d0f9      	beq.n	801123c <_strtod_l+0x134>
 8011248:	2b00      	cmp	r3, #0
 801124a:	d09f      	beq.n	801118c <_strtod_l+0x84>
 801124c:	2301      	movs	r3, #1
 801124e:	f04f 0900 	mov.w	r9, #0
 8011252:	9304      	str	r3, [sp, #16]
 8011254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011256:	930a      	str	r3, [sp, #40]	; 0x28
 8011258:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801125c:	464f      	mov	r7, r9
 801125e:	220a      	movs	r2, #10
 8011260:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011262:	7806      	ldrb	r6, [r0, #0]
 8011264:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011268:	b2d9      	uxtb	r1, r3
 801126a:	2909      	cmp	r1, #9
 801126c:	d92a      	bls.n	80112c4 <_strtod_l+0x1bc>
 801126e:	9907      	ldr	r1, [sp, #28]
 8011270:	462a      	mov	r2, r5
 8011272:	f003 f9c4 	bl	80145fe <strncmp>
 8011276:	b398      	cbz	r0, 80112e0 <_strtod_l+0x1d8>
 8011278:	2000      	movs	r0, #0
 801127a:	4633      	mov	r3, r6
 801127c:	463d      	mov	r5, r7
 801127e:	9007      	str	r0, [sp, #28]
 8011280:	4602      	mov	r2, r0
 8011282:	2b65      	cmp	r3, #101	; 0x65
 8011284:	d001      	beq.n	801128a <_strtod_l+0x182>
 8011286:	2b45      	cmp	r3, #69	; 0x45
 8011288:	d118      	bne.n	80112bc <_strtod_l+0x1b4>
 801128a:	b91d      	cbnz	r5, 8011294 <_strtod_l+0x18c>
 801128c:	9b04      	ldr	r3, [sp, #16]
 801128e:	4303      	orrs	r3, r0
 8011290:	d098      	beq.n	80111c4 <_strtod_l+0xbc>
 8011292:	2500      	movs	r5, #0
 8011294:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011298:	f108 0301 	add.w	r3, r8, #1
 801129c:	931d      	str	r3, [sp, #116]	; 0x74
 801129e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80112a2:	2b2b      	cmp	r3, #43	; 0x2b
 80112a4:	d075      	beq.n	8011392 <_strtod_l+0x28a>
 80112a6:	2b2d      	cmp	r3, #45	; 0x2d
 80112a8:	d07b      	beq.n	80113a2 <_strtod_l+0x29a>
 80112aa:	f04f 0c00 	mov.w	ip, #0
 80112ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80112b2:	2909      	cmp	r1, #9
 80112b4:	f240 8082 	bls.w	80113bc <_strtod_l+0x2b4>
 80112b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80112bc:	2600      	movs	r6, #0
 80112be:	e09d      	b.n	80113fc <_strtod_l+0x2f4>
 80112c0:	2300      	movs	r3, #0
 80112c2:	e7c4      	b.n	801124e <_strtod_l+0x146>
 80112c4:	2f08      	cmp	r7, #8
 80112c6:	bfd8      	it	le
 80112c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80112ca:	f100 0001 	add.w	r0, r0, #1
 80112ce:	bfda      	itte	le
 80112d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80112d4:	9309      	strle	r3, [sp, #36]	; 0x24
 80112d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80112da:	3701      	adds	r7, #1
 80112dc:	901d      	str	r0, [sp, #116]	; 0x74
 80112de:	e7bf      	b.n	8011260 <_strtod_l+0x158>
 80112e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112e2:	195a      	adds	r2, r3, r5
 80112e4:	921d      	str	r2, [sp, #116]	; 0x74
 80112e6:	5d5b      	ldrb	r3, [r3, r5]
 80112e8:	2f00      	cmp	r7, #0
 80112ea:	d037      	beq.n	801135c <_strtod_l+0x254>
 80112ec:	9007      	str	r0, [sp, #28]
 80112ee:	463d      	mov	r5, r7
 80112f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80112f4:	2a09      	cmp	r2, #9
 80112f6:	d912      	bls.n	801131e <_strtod_l+0x216>
 80112f8:	2201      	movs	r2, #1
 80112fa:	e7c2      	b.n	8011282 <_strtod_l+0x17a>
 80112fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112fe:	1c5a      	adds	r2, r3, #1
 8011300:	921d      	str	r2, [sp, #116]	; 0x74
 8011302:	785b      	ldrb	r3, [r3, #1]
 8011304:	3001      	adds	r0, #1
 8011306:	2b30      	cmp	r3, #48	; 0x30
 8011308:	d0f8      	beq.n	80112fc <_strtod_l+0x1f4>
 801130a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801130e:	2a08      	cmp	r2, #8
 8011310:	f200 84db 	bhi.w	8011cca <_strtod_l+0xbc2>
 8011314:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011316:	9007      	str	r0, [sp, #28]
 8011318:	2000      	movs	r0, #0
 801131a:	920a      	str	r2, [sp, #40]	; 0x28
 801131c:	4605      	mov	r5, r0
 801131e:	3b30      	subs	r3, #48	; 0x30
 8011320:	f100 0201 	add.w	r2, r0, #1
 8011324:	d014      	beq.n	8011350 <_strtod_l+0x248>
 8011326:	9907      	ldr	r1, [sp, #28]
 8011328:	4411      	add	r1, r2
 801132a:	9107      	str	r1, [sp, #28]
 801132c:	462a      	mov	r2, r5
 801132e:	eb00 0e05 	add.w	lr, r0, r5
 8011332:	210a      	movs	r1, #10
 8011334:	4572      	cmp	r2, lr
 8011336:	d113      	bne.n	8011360 <_strtod_l+0x258>
 8011338:	182a      	adds	r2, r5, r0
 801133a:	2a08      	cmp	r2, #8
 801133c:	f105 0501 	add.w	r5, r5, #1
 8011340:	4405      	add	r5, r0
 8011342:	dc1c      	bgt.n	801137e <_strtod_l+0x276>
 8011344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011346:	220a      	movs	r2, #10
 8011348:	fb02 3301 	mla	r3, r2, r1, r3
 801134c:	9309      	str	r3, [sp, #36]	; 0x24
 801134e:	2200      	movs	r2, #0
 8011350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011352:	1c59      	adds	r1, r3, #1
 8011354:	911d      	str	r1, [sp, #116]	; 0x74
 8011356:	785b      	ldrb	r3, [r3, #1]
 8011358:	4610      	mov	r0, r2
 801135a:	e7c9      	b.n	80112f0 <_strtod_l+0x1e8>
 801135c:	4638      	mov	r0, r7
 801135e:	e7d2      	b.n	8011306 <_strtod_l+0x1fe>
 8011360:	2a08      	cmp	r2, #8
 8011362:	dc04      	bgt.n	801136e <_strtod_l+0x266>
 8011364:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011366:	434e      	muls	r6, r1
 8011368:	9609      	str	r6, [sp, #36]	; 0x24
 801136a:	3201      	adds	r2, #1
 801136c:	e7e2      	b.n	8011334 <_strtod_l+0x22c>
 801136e:	f102 0c01 	add.w	ip, r2, #1
 8011372:	f1bc 0f10 	cmp.w	ip, #16
 8011376:	bfd8      	it	le
 8011378:	fb01 f909 	mulle.w	r9, r1, r9
 801137c:	e7f5      	b.n	801136a <_strtod_l+0x262>
 801137e:	2d10      	cmp	r5, #16
 8011380:	bfdc      	itt	le
 8011382:	220a      	movle	r2, #10
 8011384:	fb02 3909 	mlale	r9, r2, r9, r3
 8011388:	e7e1      	b.n	801134e <_strtod_l+0x246>
 801138a:	2300      	movs	r3, #0
 801138c:	9307      	str	r3, [sp, #28]
 801138e:	2201      	movs	r2, #1
 8011390:	e77c      	b.n	801128c <_strtod_l+0x184>
 8011392:	f04f 0c00 	mov.w	ip, #0
 8011396:	f108 0302 	add.w	r3, r8, #2
 801139a:	931d      	str	r3, [sp, #116]	; 0x74
 801139c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80113a0:	e785      	b.n	80112ae <_strtod_l+0x1a6>
 80113a2:	f04f 0c01 	mov.w	ip, #1
 80113a6:	e7f6      	b.n	8011396 <_strtod_l+0x28e>
 80113a8:	0805f684 	.word	0x0805f684
 80113ac:	0805f3d0 	.word	0x0805f3d0
 80113b0:	7ff00000 	.word	0x7ff00000
 80113b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113b6:	1c59      	adds	r1, r3, #1
 80113b8:	911d      	str	r1, [sp, #116]	; 0x74
 80113ba:	785b      	ldrb	r3, [r3, #1]
 80113bc:	2b30      	cmp	r3, #48	; 0x30
 80113be:	d0f9      	beq.n	80113b4 <_strtod_l+0x2ac>
 80113c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80113c4:	2908      	cmp	r1, #8
 80113c6:	f63f af79 	bhi.w	80112bc <_strtod_l+0x1b4>
 80113ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80113ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113d0:	9308      	str	r3, [sp, #32]
 80113d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113d4:	1c59      	adds	r1, r3, #1
 80113d6:	911d      	str	r1, [sp, #116]	; 0x74
 80113d8:	785b      	ldrb	r3, [r3, #1]
 80113da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80113de:	2e09      	cmp	r6, #9
 80113e0:	d937      	bls.n	8011452 <_strtod_l+0x34a>
 80113e2:	9e08      	ldr	r6, [sp, #32]
 80113e4:	1b89      	subs	r1, r1, r6
 80113e6:	2908      	cmp	r1, #8
 80113e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80113ec:	dc02      	bgt.n	80113f4 <_strtod_l+0x2ec>
 80113ee:	4576      	cmp	r6, lr
 80113f0:	bfa8      	it	ge
 80113f2:	4676      	movge	r6, lr
 80113f4:	f1bc 0f00 	cmp.w	ip, #0
 80113f8:	d000      	beq.n	80113fc <_strtod_l+0x2f4>
 80113fa:	4276      	negs	r6, r6
 80113fc:	2d00      	cmp	r5, #0
 80113fe:	d14f      	bne.n	80114a0 <_strtod_l+0x398>
 8011400:	9904      	ldr	r1, [sp, #16]
 8011402:	4301      	orrs	r1, r0
 8011404:	f47f aec2 	bne.w	801118c <_strtod_l+0x84>
 8011408:	2a00      	cmp	r2, #0
 801140a:	f47f aedb 	bne.w	80111c4 <_strtod_l+0xbc>
 801140e:	2b69      	cmp	r3, #105	; 0x69
 8011410:	d027      	beq.n	8011462 <_strtod_l+0x35a>
 8011412:	dc24      	bgt.n	801145e <_strtod_l+0x356>
 8011414:	2b49      	cmp	r3, #73	; 0x49
 8011416:	d024      	beq.n	8011462 <_strtod_l+0x35a>
 8011418:	2b4e      	cmp	r3, #78	; 0x4e
 801141a:	f47f aed3 	bne.w	80111c4 <_strtod_l+0xbc>
 801141e:	499e      	ldr	r1, [pc, #632]	; (8011698 <_strtod_l+0x590>)
 8011420:	a81d      	add	r0, sp, #116	; 0x74
 8011422:	f002 f8bb 	bl	801359c <__match>
 8011426:	2800      	cmp	r0, #0
 8011428:	f43f aecc 	beq.w	80111c4 <_strtod_l+0xbc>
 801142c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b28      	cmp	r3, #40	; 0x28
 8011432:	d12d      	bne.n	8011490 <_strtod_l+0x388>
 8011434:	4999      	ldr	r1, [pc, #612]	; (801169c <_strtod_l+0x594>)
 8011436:	aa20      	add	r2, sp, #128	; 0x80
 8011438:	a81d      	add	r0, sp, #116	; 0x74
 801143a:	f002 f8c3 	bl	80135c4 <__hexnan>
 801143e:	2805      	cmp	r0, #5
 8011440:	d126      	bne.n	8011490 <_strtod_l+0x388>
 8011442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011444:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011448:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801144c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011450:	e69c      	b.n	801118c <_strtod_l+0x84>
 8011452:	210a      	movs	r1, #10
 8011454:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011458:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801145c:	e7b9      	b.n	80113d2 <_strtod_l+0x2ca>
 801145e:	2b6e      	cmp	r3, #110	; 0x6e
 8011460:	e7db      	b.n	801141a <_strtod_l+0x312>
 8011462:	498f      	ldr	r1, [pc, #572]	; (80116a0 <_strtod_l+0x598>)
 8011464:	a81d      	add	r0, sp, #116	; 0x74
 8011466:	f002 f899 	bl	801359c <__match>
 801146a:	2800      	cmp	r0, #0
 801146c:	f43f aeaa 	beq.w	80111c4 <_strtod_l+0xbc>
 8011470:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011472:	498c      	ldr	r1, [pc, #560]	; (80116a4 <_strtod_l+0x59c>)
 8011474:	3b01      	subs	r3, #1
 8011476:	a81d      	add	r0, sp, #116	; 0x74
 8011478:	931d      	str	r3, [sp, #116]	; 0x74
 801147a:	f002 f88f 	bl	801359c <__match>
 801147e:	b910      	cbnz	r0, 8011486 <_strtod_l+0x37e>
 8011480:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011482:	3301      	adds	r3, #1
 8011484:	931d      	str	r3, [sp, #116]	; 0x74
 8011486:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80116b4 <_strtod_l+0x5ac>
 801148a:	f04f 0a00 	mov.w	sl, #0
 801148e:	e67d      	b.n	801118c <_strtod_l+0x84>
 8011490:	4885      	ldr	r0, [pc, #532]	; (80116a8 <_strtod_l+0x5a0>)
 8011492:	f003 f825 	bl	80144e0 <nan>
 8011496:	ed8d 0b04 	vstr	d0, [sp, #16]
 801149a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801149e:	e675      	b.n	801118c <_strtod_l+0x84>
 80114a0:	9b07      	ldr	r3, [sp, #28]
 80114a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114a4:	1af3      	subs	r3, r6, r3
 80114a6:	2f00      	cmp	r7, #0
 80114a8:	bf08      	it	eq
 80114aa:	462f      	moveq	r7, r5
 80114ac:	2d10      	cmp	r5, #16
 80114ae:	9308      	str	r3, [sp, #32]
 80114b0:	46a8      	mov	r8, r5
 80114b2:	bfa8      	it	ge
 80114b4:	f04f 0810 	movge.w	r8, #16
 80114b8:	f7ef f834 	bl	8000524 <__aeabi_ui2d>
 80114bc:	2d09      	cmp	r5, #9
 80114be:	4682      	mov	sl, r0
 80114c0:	468b      	mov	fp, r1
 80114c2:	dd13      	ble.n	80114ec <_strtod_l+0x3e4>
 80114c4:	4b79      	ldr	r3, [pc, #484]	; (80116ac <_strtod_l+0x5a4>)
 80114c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80114ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80114ce:	f7ef f8a3 	bl	8000618 <__aeabi_dmul>
 80114d2:	4682      	mov	sl, r0
 80114d4:	4648      	mov	r0, r9
 80114d6:	468b      	mov	fp, r1
 80114d8:	f7ef f824 	bl	8000524 <__aeabi_ui2d>
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	4650      	mov	r0, sl
 80114e2:	4659      	mov	r1, fp
 80114e4:	f7ee fee2 	bl	80002ac <__adddf3>
 80114e8:	4682      	mov	sl, r0
 80114ea:	468b      	mov	fp, r1
 80114ec:	2d0f      	cmp	r5, #15
 80114ee:	dc38      	bgt.n	8011562 <_strtod_l+0x45a>
 80114f0:	9b08      	ldr	r3, [sp, #32]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f43f ae4a 	beq.w	801118c <_strtod_l+0x84>
 80114f8:	dd24      	ble.n	8011544 <_strtod_l+0x43c>
 80114fa:	2b16      	cmp	r3, #22
 80114fc:	dc0b      	bgt.n	8011516 <_strtod_l+0x40e>
 80114fe:	4d6b      	ldr	r5, [pc, #428]	; (80116ac <_strtod_l+0x5a4>)
 8011500:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011504:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011508:	4652      	mov	r2, sl
 801150a:	465b      	mov	r3, fp
 801150c:	f7ef f884 	bl	8000618 <__aeabi_dmul>
 8011510:	4682      	mov	sl, r0
 8011512:	468b      	mov	fp, r1
 8011514:	e63a      	b.n	801118c <_strtod_l+0x84>
 8011516:	9a08      	ldr	r2, [sp, #32]
 8011518:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801151c:	4293      	cmp	r3, r2
 801151e:	db20      	blt.n	8011562 <_strtod_l+0x45a>
 8011520:	4c62      	ldr	r4, [pc, #392]	; (80116ac <_strtod_l+0x5a4>)
 8011522:	f1c5 050f 	rsb	r5, r5, #15
 8011526:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801152a:	4652      	mov	r2, sl
 801152c:	465b      	mov	r3, fp
 801152e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011532:	f7ef f871 	bl	8000618 <__aeabi_dmul>
 8011536:	9b08      	ldr	r3, [sp, #32]
 8011538:	1b5d      	subs	r5, r3, r5
 801153a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801153e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011542:	e7e3      	b.n	801150c <_strtod_l+0x404>
 8011544:	9b08      	ldr	r3, [sp, #32]
 8011546:	3316      	adds	r3, #22
 8011548:	db0b      	blt.n	8011562 <_strtod_l+0x45a>
 801154a:	9b07      	ldr	r3, [sp, #28]
 801154c:	4a57      	ldr	r2, [pc, #348]	; (80116ac <_strtod_l+0x5a4>)
 801154e:	1b9e      	subs	r6, r3, r6
 8011550:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011554:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011558:	4650      	mov	r0, sl
 801155a:	4659      	mov	r1, fp
 801155c:	f7ef f986 	bl	800086c <__aeabi_ddiv>
 8011560:	e7d6      	b.n	8011510 <_strtod_l+0x408>
 8011562:	9b08      	ldr	r3, [sp, #32]
 8011564:	eba5 0808 	sub.w	r8, r5, r8
 8011568:	4498      	add	r8, r3
 801156a:	f1b8 0f00 	cmp.w	r8, #0
 801156e:	dd71      	ble.n	8011654 <_strtod_l+0x54c>
 8011570:	f018 030f 	ands.w	r3, r8, #15
 8011574:	d00a      	beq.n	801158c <_strtod_l+0x484>
 8011576:	494d      	ldr	r1, [pc, #308]	; (80116ac <_strtod_l+0x5a4>)
 8011578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801157c:	4652      	mov	r2, sl
 801157e:	465b      	mov	r3, fp
 8011580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011584:	f7ef f848 	bl	8000618 <__aeabi_dmul>
 8011588:	4682      	mov	sl, r0
 801158a:	468b      	mov	fp, r1
 801158c:	f038 080f 	bics.w	r8, r8, #15
 8011590:	d04d      	beq.n	801162e <_strtod_l+0x526>
 8011592:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011596:	dd22      	ble.n	80115de <_strtod_l+0x4d6>
 8011598:	2500      	movs	r5, #0
 801159a:	462e      	mov	r6, r5
 801159c:	9509      	str	r5, [sp, #36]	; 0x24
 801159e:	9507      	str	r5, [sp, #28]
 80115a0:	2322      	movs	r3, #34	; 0x22
 80115a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80116b4 <_strtod_l+0x5ac>
 80115a6:	6023      	str	r3, [r4, #0]
 80115a8:	f04f 0a00 	mov.w	sl, #0
 80115ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f43f adec 	beq.w	801118c <_strtod_l+0x84>
 80115b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80115b6:	4620      	mov	r0, r4
 80115b8:	f002 f984 	bl	80138c4 <_Bfree>
 80115bc:	9907      	ldr	r1, [sp, #28]
 80115be:	4620      	mov	r0, r4
 80115c0:	f002 f980 	bl	80138c4 <_Bfree>
 80115c4:	4631      	mov	r1, r6
 80115c6:	4620      	mov	r0, r4
 80115c8:	f002 f97c 	bl	80138c4 <_Bfree>
 80115cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115ce:	4620      	mov	r0, r4
 80115d0:	f002 f978 	bl	80138c4 <_Bfree>
 80115d4:	4629      	mov	r1, r5
 80115d6:	4620      	mov	r0, r4
 80115d8:	f002 f974 	bl	80138c4 <_Bfree>
 80115dc:	e5d6      	b.n	801118c <_strtod_l+0x84>
 80115de:	2300      	movs	r3, #0
 80115e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80115e4:	4650      	mov	r0, sl
 80115e6:	4659      	mov	r1, fp
 80115e8:	4699      	mov	r9, r3
 80115ea:	f1b8 0f01 	cmp.w	r8, #1
 80115ee:	dc21      	bgt.n	8011634 <_strtod_l+0x52c>
 80115f0:	b10b      	cbz	r3, 80115f6 <_strtod_l+0x4ee>
 80115f2:	4682      	mov	sl, r0
 80115f4:	468b      	mov	fp, r1
 80115f6:	4b2e      	ldr	r3, [pc, #184]	; (80116b0 <_strtod_l+0x5a8>)
 80115f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80115fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011600:	4652      	mov	r2, sl
 8011602:	465b      	mov	r3, fp
 8011604:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011608:	f7ef f806 	bl	8000618 <__aeabi_dmul>
 801160c:	4b29      	ldr	r3, [pc, #164]	; (80116b4 <_strtod_l+0x5ac>)
 801160e:	460a      	mov	r2, r1
 8011610:	400b      	ands	r3, r1
 8011612:	4929      	ldr	r1, [pc, #164]	; (80116b8 <_strtod_l+0x5b0>)
 8011614:	428b      	cmp	r3, r1
 8011616:	4682      	mov	sl, r0
 8011618:	d8be      	bhi.n	8011598 <_strtod_l+0x490>
 801161a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801161e:	428b      	cmp	r3, r1
 8011620:	bf86      	itte	hi
 8011622:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80116bc <_strtod_l+0x5b4>
 8011626:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801162a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801162e:	2300      	movs	r3, #0
 8011630:	9304      	str	r3, [sp, #16]
 8011632:	e081      	b.n	8011738 <_strtod_l+0x630>
 8011634:	f018 0f01 	tst.w	r8, #1
 8011638:	d007      	beq.n	801164a <_strtod_l+0x542>
 801163a:	4b1d      	ldr	r3, [pc, #116]	; (80116b0 <_strtod_l+0x5a8>)
 801163c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011644:	f7ee ffe8 	bl	8000618 <__aeabi_dmul>
 8011648:	2301      	movs	r3, #1
 801164a:	f109 0901 	add.w	r9, r9, #1
 801164e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011652:	e7ca      	b.n	80115ea <_strtod_l+0x4e2>
 8011654:	d0eb      	beq.n	801162e <_strtod_l+0x526>
 8011656:	f1c8 0800 	rsb	r8, r8, #0
 801165a:	f018 020f 	ands.w	r2, r8, #15
 801165e:	d00a      	beq.n	8011676 <_strtod_l+0x56e>
 8011660:	4b12      	ldr	r3, [pc, #72]	; (80116ac <_strtod_l+0x5a4>)
 8011662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011666:	4650      	mov	r0, sl
 8011668:	4659      	mov	r1, fp
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7ef f8fd 	bl	800086c <__aeabi_ddiv>
 8011672:	4682      	mov	sl, r0
 8011674:	468b      	mov	fp, r1
 8011676:	ea5f 1828 	movs.w	r8, r8, asr #4
 801167a:	d0d8      	beq.n	801162e <_strtod_l+0x526>
 801167c:	f1b8 0f1f 	cmp.w	r8, #31
 8011680:	dd1e      	ble.n	80116c0 <_strtod_l+0x5b8>
 8011682:	2500      	movs	r5, #0
 8011684:	462e      	mov	r6, r5
 8011686:	9509      	str	r5, [sp, #36]	; 0x24
 8011688:	9507      	str	r5, [sp, #28]
 801168a:	2322      	movs	r3, #34	; 0x22
 801168c:	f04f 0a00 	mov.w	sl, #0
 8011690:	f04f 0b00 	mov.w	fp, #0
 8011694:	6023      	str	r3, [r4, #0]
 8011696:	e789      	b.n	80115ac <_strtod_l+0x4a4>
 8011698:	0805f3a2 	.word	0x0805f3a2
 801169c:	0805f3e4 	.word	0x0805f3e4
 80116a0:	0805f39a 	.word	0x0805f39a
 80116a4:	0805f524 	.word	0x0805f524
 80116a8:	0805f37f 	.word	0x0805f37f
 80116ac:	0805f720 	.word	0x0805f720
 80116b0:	0805f6f8 	.word	0x0805f6f8
 80116b4:	7ff00000 	.word	0x7ff00000
 80116b8:	7ca00000 	.word	0x7ca00000
 80116bc:	7fefffff 	.word	0x7fefffff
 80116c0:	f018 0310 	ands.w	r3, r8, #16
 80116c4:	bf18      	it	ne
 80116c6:	236a      	movne	r3, #106	; 0x6a
 80116c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011a80 <_strtod_l+0x978>
 80116cc:	9304      	str	r3, [sp, #16]
 80116ce:	4650      	mov	r0, sl
 80116d0:	4659      	mov	r1, fp
 80116d2:	2300      	movs	r3, #0
 80116d4:	f018 0f01 	tst.w	r8, #1
 80116d8:	d004      	beq.n	80116e4 <_strtod_l+0x5dc>
 80116da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80116de:	f7ee ff9b 	bl	8000618 <__aeabi_dmul>
 80116e2:	2301      	movs	r3, #1
 80116e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80116e8:	f109 0908 	add.w	r9, r9, #8
 80116ec:	d1f2      	bne.n	80116d4 <_strtod_l+0x5cc>
 80116ee:	b10b      	cbz	r3, 80116f4 <_strtod_l+0x5ec>
 80116f0:	4682      	mov	sl, r0
 80116f2:	468b      	mov	fp, r1
 80116f4:	9b04      	ldr	r3, [sp, #16]
 80116f6:	b1bb      	cbz	r3, 8011728 <_strtod_l+0x620>
 80116f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80116fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011700:	2b00      	cmp	r3, #0
 8011702:	4659      	mov	r1, fp
 8011704:	dd10      	ble.n	8011728 <_strtod_l+0x620>
 8011706:	2b1f      	cmp	r3, #31
 8011708:	f340 8128 	ble.w	801195c <_strtod_l+0x854>
 801170c:	2b34      	cmp	r3, #52	; 0x34
 801170e:	bfde      	ittt	le
 8011710:	3b20      	suble	r3, #32
 8011712:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011716:	fa02 f303 	lslle.w	r3, r2, r3
 801171a:	f04f 0a00 	mov.w	sl, #0
 801171e:	bfcc      	ite	gt
 8011720:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011724:	ea03 0b01 	andle.w	fp, r3, r1
 8011728:	2200      	movs	r2, #0
 801172a:	2300      	movs	r3, #0
 801172c:	4650      	mov	r0, sl
 801172e:	4659      	mov	r1, fp
 8011730:	f7ef f9da 	bl	8000ae8 <__aeabi_dcmpeq>
 8011734:	2800      	cmp	r0, #0
 8011736:	d1a4      	bne.n	8011682 <_strtod_l+0x57a>
 8011738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801173e:	462b      	mov	r3, r5
 8011740:	463a      	mov	r2, r7
 8011742:	4620      	mov	r0, r4
 8011744:	f002 f92a 	bl	801399c <__s2b>
 8011748:	9009      	str	r0, [sp, #36]	; 0x24
 801174a:	2800      	cmp	r0, #0
 801174c:	f43f af24 	beq.w	8011598 <_strtod_l+0x490>
 8011750:	9b07      	ldr	r3, [sp, #28]
 8011752:	1b9e      	subs	r6, r3, r6
 8011754:	9b08      	ldr	r3, [sp, #32]
 8011756:	2b00      	cmp	r3, #0
 8011758:	bfb4      	ite	lt
 801175a:	4633      	movlt	r3, r6
 801175c:	2300      	movge	r3, #0
 801175e:	9310      	str	r3, [sp, #64]	; 0x40
 8011760:	9b08      	ldr	r3, [sp, #32]
 8011762:	2500      	movs	r5, #0
 8011764:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011768:	9318      	str	r3, [sp, #96]	; 0x60
 801176a:	462e      	mov	r6, r5
 801176c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801176e:	4620      	mov	r0, r4
 8011770:	6859      	ldr	r1, [r3, #4]
 8011772:	f002 f867 	bl	8013844 <_Balloc>
 8011776:	9007      	str	r0, [sp, #28]
 8011778:	2800      	cmp	r0, #0
 801177a:	f43f af11 	beq.w	80115a0 <_strtod_l+0x498>
 801177e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011780:	691a      	ldr	r2, [r3, #16]
 8011782:	3202      	adds	r2, #2
 8011784:	f103 010c 	add.w	r1, r3, #12
 8011788:	0092      	lsls	r2, r2, #2
 801178a:	300c      	adds	r0, #12
 801178c:	f7fe fbd4 	bl	800ff38 <memcpy>
 8011790:	ec4b ab10 	vmov	d0, sl, fp
 8011794:	aa20      	add	r2, sp, #128	; 0x80
 8011796:	a91f      	add	r1, sp, #124	; 0x7c
 8011798:	4620      	mov	r0, r4
 801179a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801179e:	f002 fc39 	bl	8014014 <__d2b>
 80117a2:	901e      	str	r0, [sp, #120]	; 0x78
 80117a4:	2800      	cmp	r0, #0
 80117a6:	f43f aefb 	beq.w	80115a0 <_strtod_l+0x498>
 80117aa:	2101      	movs	r1, #1
 80117ac:	4620      	mov	r0, r4
 80117ae:	f002 f98f 	bl	8013ad0 <__i2b>
 80117b2:	4606      	mov	r6, r0
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f43f aef3 	beq.w	80115a0 <_strtod_l+0x498>
 80117ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80117bc:	9904      	ldr	r1, [sp, #16]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	bfab      	itete	ge
 80117c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80117c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80117c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80117c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80117cc:	bfac      	ite	ge
 80117ce:	eb03 0902 	addge.w	r9, r3, r2
 80117d2:	1ad7      	sublt	r7, r2, r3
 80117d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80117d6:	eba3 0801 	sub.w	r8, r3, r1
 80117da:	4490      	add	r8, r2
 80117dc:	4ba3      	ldr	r3, [pc, #652]	; (8011a6c <_strtod_l+0x964>)
 80117de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80117e2:	4598      	cmp	r8, r3
 80117e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80117e8:	f280 80cc 	bge.w	8011984 <_strtod_l+0x87c>
 80117ec:	eba3 0308 	sub.w	r3, r3, r8
 80117f0:	2b1f      	cmp	r3, #31
 80117f2:	eba2 0203 	sub.w	r2, r2, r3
 80117f6:	f04f 0101 	mov.w	r1, #1
 80117fa:	f300 80b6 	bgt.w	801196a <_strtod_l+0x862>
 80117fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011802:	9311      	str	r3, [sp, #68]	; 0x44
 8011804:	2300      	movs	r3, #0
 8011806:	930c      	str	r3, [sp, #48]	; 0x30
 8011808:	eb09 0802 	add.w	r8, r9, r2
 801180c:	9b04      	ldr	r3, [sp, #16]
 801180e:	45c1      	cmp	r9, r8
 8011810:	4417      	add	r7, r2
 8011812:	441f      	add	r7, r3
 8011814:	464b      	mov	r3, r9
 8011816:	bfa8      	it	ge
 8011818:	4643      	movge	r3, r8
 801181a:	42bb      	cmp	r3, r7
 801181c:	bfa8      	it	ge
 801181e:	463b      	movge	r3, r7
 8011820:	2b00      	cmp	r3, #0
 8011822:	bfc2      	ittt	gt
 8011824:	eba8 0803 	subgt.w	r8, r8, r3
 8011828:	1aff      	subgt	r7, r7, r3
 801182a:	eba9 0903 	subgt.w	r9, r9, r3
 801182e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011830:	2b00      	cmp	r3, #0
 8011832:	dd17      	ble.n	8011864 <_strtod_l+0x75c>
 8011834:	4631      	mov	r1, r6
 8011836:	461a      	mov	r2, r3
 8011838:	4620      	mov	r0, r4
 801183a:	f002 fa05 	bl	8013c48 <__pow5mult>
 801183e:	4606      	mov	r6, r0
 8011840:	2800      	cmp	r0, #0
 8011842:	f43f aead 	beq.w	80115a0 <_strtod_l+0x498>
 8011846:	4601      	mov	r1, r0
 8011848:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801184a:	4620      	mov	r0, r4
 801184c:	f002 f956 	bl	8013afc <__multiply>
 8011850:	900f      	str	r0, [sp, #60]	; 0x3c
 8011852:	2800      	cmp	r0, #0
 8011854:	f43f aea4 	beq.w	80115a0 <_strtod_l+0x498>
 8011858:	991e      	ldr	r1, [sp, #120]	; 0x78
 801185a:	4620      	mov	r0, r4
 801185c:	f002 f832 	bl	80138c4 <_Bfree>
 8011860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011862:	931e      	str	r3, [sp, #120]	; 0x78
 8011864:	f1b8 0f00 	cmp.w	r8, #0
 8011868:	f300 8091 	bgt.w	801198e <_strtod_l+0x886>
 801186c:	9b08      	ldr	r3, [sp, #32]
 801186e:	2b00      	cmp	r3, #0
 8011870:	dd08      	ble.n	8011884 <_strtod_l+0x77c>
 8011872:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011874:	9907      	ldr	r1, [sp, #28]
 8011876:	4620      	mov	r0, r4
 8011878:	f002 f9e6 	bl	8013c48 <__pow5mult>
 801187c:	9007      	str	r0, [sp, #28]
 801187e:	2800      	cmp	r0, #0
 8011880:	f43f ae8e 	beq.w	80115a0 <_strtod_l+0x498>
 8011884:	2f00      	cmp	r7, #0
 8011886:	dd08      	ble.n	801189a <_strtod_l+0x792>
 8011888:	9907      	ldr	r1, [sp, #28]
 801188a:	463a      	mov	r2, r7
 801188c:	4620      	mov	r0, r4
 801188e:	f002 fa35 	bl	8013cfc <__lshift>
 8011892:	9007      	str	r0, [sp, #28]
 8011894:	2800      	cmp	r0, #0
 8011896:	f43f ae83 	beq.w	80115a0 <_strtod_l+0x498>
 801189a:	f1b9 0f00 	cmp.w	r9, #0
 801189e:	dd08      	ble.n	80118b2 <_strtod_l+0x7aa>
 80118a0:	4631      	mov	r1, r6
 80118a2:	464a      	mov	r2, r9
 80118a4:	4620      	mov	r0, r4
 80118a6:	f002 fa29 	bl	8013cfc <__lshift>
 80118aa:	4606      	mov	r6, r0
 80118ac:	2800      	cmp	r0, #0
 80118ae:	f43f ae77 	beq.w	80115a0 <_strtod_l+0x498>
 80118b2:	9a07      	ldr	r2, [sp, #28]
 80118b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80118b6:	4620      	mov	r0, r4
 80118b8:	f002 faa8 	bl	8013e0c <__mdiff>
 80118bc:	4605      	mov	r5, r0
 80118be:	2800      	cmp	r0, #0
 80118c0:	f43f ae6e 	beq.w	80115a0 <_strtod_l+0x498>
 80118c4:	68c3      	ldr	r3, [r0, #12]
 80118c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80118c8:	2300      	movs	r3, #0
 80118ca:	60c3      	str	r3, [r0, #12]
 80118cc:	4631      	mov	r1, r6
 80118ce:	f002 fa81 	bl	8013dd4 <__mcmp>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	da65      	bge.n	80119a2 <_strtod_l+0x89a>
 80118d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118d8:	ea53 030a 	orrs.w	r3, r3, sl
 80118dc:	f040 8087 	bne.w	80119ee <_strtod_l+0x8e6>
 80118e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f040 8082 	bne.w	80119ee <_strtod_l+0x8e6>
 80118ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118ee:	0d1b      	lsrs	r3, r3, #20
 80118f0:	051b      	lsls	r3, r3, #20
 80118f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80118f6:	d97a      	bls.n	80119ee <_strtod_l+0x8e6>
 80118f8:	696b      	ldr	r3, [r5, #20]
 80118fa:	b913      	cbnz	r3, 8011902 <_strtod_l+0x7fa>
 80118fc:	692b      	ldr	r3, [r5, #16]
 80118fe:	2b01      	cmp	r3, #1
 8011900:	dd75      	ble.n	80119ee <_strtod_l+0x8e6>
 8011902:	4629      	mov	r1, r5
 8011904:	2201      	movs	r2, #1
 8011906:	4620      	mov	r0, r4
 8011908:	f002 f9f8 	bl	8013cfc <__lshift>
 801190c:	4631      	mov	r1, r6
 801190e:	4605      	mov	r5, r0
 8011910:	f002 fa60 	bl	8013dd4 <__mcmp>
 8011914:	2800      	cmp	r0, #0
 8011916:	dd6a      	ble.n	80119ee <_strtod_l+0x8e6>
 8011918:	9904      	ldr	r1, [sp, #16]
 801191a:	4a55      	ldr	r2, [pc, #340]	; (8011a70 <_strtod_l+0x968>)
 801191c:	465b      	mov	r3, fp
 801191e:	2900      	cmp	r1, #0
 8011920:	f000 8085 	beq.w	8011a2e <_strtod_l+0x926>
 8011924:	ea02 010b 	and.w	r1, r2, fp
 8011928:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801192c:	dc7f      	bgt.n	8011a2e <_strtod_l+0x926>
 801192e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011932:	f77f aeaa 	ble.w	801168a <_strtod_l+0x582>
 8011936:	4a4f      	ldr	r2, [pc, #316]	; (8011a74 <_strtod_l+0x96c>)
 8011938:	2300      	movs	r3, #0
 801193a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801193e:	4650      	mov	r0, sl
 8011940:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011944:	4659      	mov	r1, fp
 8011946:	f7ee fe67 	bl	8000618 <__aeabi_dmul>
 801194a:	460b      	mov	r3, r1
 801194c:	4303      	orrs	r3, r0
 801194e:	bf08      	it	eq
 8011950:	2322      	moveq	r3, #34	; 0x22
 8011952:	4682      	mov	sl, r0
 8011954:	468b      	mov	fp, r1
 8011956:	bf08      	it	eq
 8011958:	6023      	streq	r3, [r4, #0]
 801195a:	e62b      	b.n	80115b4 <_strtod_l+0x4ac>
 801195c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011960:	fa02 f303 	lsl.w	r3, r2, r3
 8011964:	ea03 0a0a 	and.w	sl, r3, sl
 8011968:	e6de      	b.n	8011728 <_strtod_l+0x620>
 801196a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801196e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011972:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011976:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801197a:	fa01 f308 	lsl.w	r3, r1, r8
 801197e:	930c      	str	r3, [sp, #48]	; 0x30
 8011980:	9111      	str	r1, [sp, #68]	; 0x44
 8011982:	e741      	b.n	8011808 <_strtod_l+0x700>
 8011984:	2300      	movs	r3, #0
 8011986:	930c      	str	r3, [sp, #48]	; 0x30
 8011988:	2301      	movs	r3, #1
 801198a:	9311      	str	r3, [sp, #68]	; 0x44
 801198c:	e73c      	b.n	8011808 <_strtod_l+0x700>
 801198e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011990:	4642      	mov	r2, r8
 8011992:	4620      	mov	r0, r4
 8011994:	f002 f9b2 	bl	8013cfc <__lshift>
 8011998:	901e      	str	r0, [sp, #120]	; 0x78
 801199a:	2800      	cmp	r0, #0
 801199c:	f47f af66 	bne.w	801186c <_strtod_l+0x764>
 80119a0:	e5fe      	b.n	80115a0 <_strtod_l+0x498>
 80119a2:	465f      	mov	r7, fp
 80119a4:	d16e      	bne.n	8011a84 <_strtod_l+0x97c>
 80119a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80119a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119ac:	b342      	cbz	r2, 8011a00 <_strtod_l+0x8f8>
 80119ae:	4a32      	ldr	r2, [pc, #200]	; (8011a78 <_strtod_l+0x970>)
 80119b0:	4293      	cmp	r3, r2
 80119b2:	d128      	bne.n	8011a06 <_strtod_l+0x8fe>
 80119b4:	9b04      	ldr	r3, [sp, #16]
 80119b6:	4650      	mov	r0, sl
 80119b8:	b1eb      	cbz	r3, 80119f6 <_strtod_l+0x8ee>
 80119ba:	4a2d      	ldr	r2, [pc, #180]	; (8011a70 <_strtod_l+0x968>)
 80119bc:	403a      	ands	r2, r7
 80119be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80119c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80119c6:	d819      	bhi.n	80119fc <_strtod_l+0x8f4>
 80119c8:	0d12      	lsrs	r2, r2, #20
 80119ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80119ce:	fa01 f303 	lsl.w	r3, r1, r3
 80119d2:	4298      	cmp	r0, r3
 80119d4:	d117      	bne.n	8011a06 <_strtod_l+0x8fe>
 80119d6:	4b29      	ldr	r3, [pc, #164]	; (8011a7c <_strtod_l+0x974>)
 80119d8:	429f      	cmp	r7, r3
 80119da:	d102      	bne.n	80119e2 <_strtod_l+0x8da>
 80119dc:	3001      	adds	r0, #1
 80119de:	f43f addf 	beq.w	80115a0 <_strtod_l+0x498>
 80119e2:	4b23      	ldr	r3, [pc, #140]	; (8011a70 <_strtod_l+0x968>)
 80119e4:	403b      	ands	r3, r7
 80119e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80119ea:	f04f 0a00 	mov.w	sl, #0
 80119ee:	9b04      	ldr	r3, [sp, #16]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d1a0      	bne.n	8011936 <_strtod_l+0x82e>
 80119f4:	e5de      	b.n	80115b4 <_strtod_l+0x4ac>
 80119f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119fa:	e7ea      	b.n	80119d2 <_strtod_l+0x8ca>
 80119fc:	460b      	mov	r3, r1
 80119fe:	e7e8      	b.n	80119d2 <_strtod_l+0x8ca>
 8011a00:	ea53 030a 	orrs.w	r3, r3, sl
 8011a04:	d088      	beq.n	8011918 <_strtod_l+0x810>
 8011a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a08:	b1db      	cbz	r3, 8011a42 <_strtod_l+0x93a>
 8011a0a:	423b      	tst	r3, r7
 8011a0c:	d0ef      	beq.n	80119ee <_strtod_l+0x8e6>
 8011a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a10:	9a04      	ldr	r2, [sp, #16]
 8011a12:	4650      	mov	r0, sl
 8011a14:	4659      	mov	r1, fp
 8011a16:	b1c3      	cbz	r3, 8011a4a <_strtod_l+0x942>
 8011a18:	f7ff fb58 	bl	80110cc <sulp>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	460b      	mov	r3, r1
 8011a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a24:	f7ee fc42 	bl	80002ac <__adddf3>
 8011a28:	4682      	mov	sl, r0
 8011a2a:	468b      	mov	fp, r1
 8011a2c:	e7df      	b.n	80119ee <_strtod_l+0x8e6>
 8011a2e:	4013      	ands	r3, r2
 8011a30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011a38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011a3c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011a40:	e7d5      	b.n	80119ee <_strtod_l+0x8e6>
 8011a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a44:	ea13 0f0a 	tst.w	r3, sl
 8011a48:	e7e0      	b.n	8011a0c <_strtod_l+0x904>
 8011a4a:	f7ff fb3f 	bl	80110cc <sulp>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	460b      	mov	r3, r1
 8011a52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a56:	f7ee fc27 	bl	80002a8 <__aeabi_dsub>
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	4682      	mov	sl, r0
 8011a60:	468b      	mov	fp, r1
 8011a62:	f7ef f841 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d0c1      	beq.n	80119ee <_strtod_l+0x8e6>
 8011a6a:	e60e      	b.n	801168a <_strtod_l+0x582>
 8011a6c:	fffffc02 	.word	0xfffffc02
 8011a70:	7ff00000 	.word	0x7ff00000
 8011a74:	39500000 	.word	0x39500000
 8011a78:	000fffff 	.word	0x000fffff
 8011a7c:	7fefffff 	.word	0x7fefffff
 8011a80:	0805f3f8 	.word	0x0805f3f8
 8011a84:	4631      	mov	r1, r6
 8011a86:	4628      	mov	r0, r5
 8011a88:	f002 fb20 	bl	80140cc <__ratio>
 8011a8c:	ec59 8b10 	vmov	r8, r9, d0
 8011a90:	ee10 0a10 	vmov	r0, s0
 8011a94:	2200      	movs	r2, #0
 8011a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a9a:	4649      	mov	r1, r9
 8011a9c:	f7ef f838 	bl	8000b10 <__aeabi_dcmple>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d07c      	beq.n	8011b9e <_strtod_l+0xa96>
 8011aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d04c      	beq.n	8011b44 <_strtod_l+0xa3c>
 8011aaa:	4b95      	ldr	r3, [pc, #596]	; (8011d00 <_strtod_l+0xbf8>)
 8011aac:	2200      	movs	r2, #0
 8011aae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011ab2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011d00 <_strtod_l+0xbf8>
 8011ab6:	f04f 0800 	mov.w	r8, #0
 8011aba:	4b92      	ldr	r3, [pc, #584]	; (8011d04 <_strtod_l+0xbfc>)
 8011abc:	403b      	ands	r3, r7
 8011abe:	9311      	str	r3, [sp, #68]	; 0x44
 8011ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011ac2:	4b91      	ldr	r3, [pc, #580]	; (8011d08 <_strtod_l+0xc00>)
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	f040 80b2 	bne.w	8011c2e <_strtod_l+0xb26>
 8011aca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ad2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011ad6:	ec4b ab10 	vmov	d0, sl, fp
 8011ada:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011ade:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011ae2:	f002 fa1b 	bl	8013f1c <__ulp>
 8011ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011aea:	ec53 2b10 	vmov	r2, r3, d0
 8011aee:	f7ee fd93 	bl	8000618 <__aeabi_dmul>
 8011af2:	4652      	mov	r2, sl
 8011af4:	465b      	mov	r3, fp
 8011af6:	f7ee fbd9 	bl	80002ac <__adddf3>
 8011afa:	460b      	mov	r3, r1
 8011afc:	4981      	ldr	r1, [pc, #516]	; (8011d04 <_strtod_l+0xbfc>)
 8011afe:	4a83      	ldr	r2, [pc, #524]	; (8011d0c <_strtod_l+0xc04>)
 8011b00:	4019      	ands	r1, r3
 8011b02:	4291      	cmp	r1, r2
 8011b04:	4682      	mov	sl, r0
 8011b06:	d95e      	bls.n	8011bc6 <_strtod_l+0xabe>
 8011b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	d103      	bne.n	8011b1a <_strtod_l+0xa12>
 8011b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b14:	3301      	adds	r3, #1
 8011b16:	f43f ad43 	beq.w	80115a0 <_strtod_l+0x498>
 8011b1a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011d18 <_strtod_l+0xc10>
 8011b1e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011b22:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011b24:	4620      	mov	r0, r4
 8011b26:	f001 fecd 	bl	80138c4 <_Bfree>
 8011b2a:	9907      	ldr	r1, [sp, #28]
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f001 fec9 	bl	80138c4 <_Bfree>
 8011b32:	4631      	mov	r1, r6
 8011b34:	4620      	mov	r0, r4
 8011b36:	f001 fec5 	bl	80138c4 <_Bfree>
 8011b3a:	4629      	mov	r1, r5
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	f001 fec1 	bl	80138c4 <_Bfree>
 8011b42:	e613      	b.n	801176c <_strtod_l+0x664>
 8011b44:	f1ba 0f00 	cmp.w	sl, #0
 8011b48:	d11b      	bne.n	8011b82 <_strtod_l+0xa7a>
 8011b4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b4e:	b9f3      	cbnz	r3, 8011b8e <_strtod_l+0xa86>
 8011b50:	4b6b      	ldr	r3, [pc, #428]	; (8011d00 <_strtod_l+0xbf8>)
 8011b52:	2200      	movs	r2, #0
 8011b54:	4640      	mov	r0, r8
 8011b56:	4649      	mov	r1, r9
 8011b58:	f7ee ffd0 	bl	8000afc <__aeabi_dcmplt>
 8011b5c:	b9d0      	cbnz	r0, 8011b94 <_strtod_l+0xa8c>
 8011b5e:	4640      	mov	r0, r8
 8011b60:	4649      	mov	r1, r9
 8011b62:	4b6b      	ldr	r3, [pc, #428]	; (8011d10 <_strtod_l+0xc08>)
 8011b64:	2200      	movs	r2, #0
 8011b66:	f7ee fd57 	bl	8000618 <__aeabi_dmul>
 8011b6a:	4680      	mov	r8, r0
 8011b6c:	4689      	mov	r9, r1
 8011b6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011b72:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011b76:	931b      	str	r3, [sp, #108]	; 0x6c
 8011b78:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011b7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011b80:	e79b      	b.n	8011aba <_strtod_l+0x9b2>
 8011b82:	f1ba 0f01 	cmp.w	sl, #1
 8011b86:	d102      	bne.n	8011b8e <_strtod_l+0xa86>
 8011b88:	2f00      	cmp	r7, #0
 8011b8a:	f43f ad7e 	beq.w	801168a <_strtod_l+0x582>
 8011b8e:	4b61      	ldr	r3, [pc, #388]	; (8011d14 <_strtod_l+0xc0c>)
 8011b90:	2200      	movs	r2, #0
 8011b92:	e78c      	b.n	8011aae <_strtod_l+0x9a6>
 8011b94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011d10 <_strtod_l+0xc08>
 8011b98:	f04f 0800 	mov.w	r8, #0
 8011b9c:	e7e7      	b.n	8011b6e <_strtod_l+0xa66>
 8011b9e:	4b5c      	ldr	r3, [pc, #368]	; (8011d10 <_strtod_l+0xc08>)
 8011ba0:	4640      	mov	r0, r8
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f7ee fd37 	bl	8000618 <__aeabi_dmul>
 8011baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bac:	4680      	mov	r8, r0
 8011bae:	4689      	mov	r9, r1
 8011bb0:	b933      	cbnz	r3, 8011bc0 <_strtod_l+0xab8>
 8011bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bb6:	9012      	str	r0, [sp, #72]	; 0x48
 8011bb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8011bba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011bbe:	e7dd      	b.n	8011b7c <_strtod_l+0xa74>
 8011bc0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011bc4:	e7f9      	b.n	8011bba <_strtod_l+0xab2>
 8011bc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011bca:	9b04      	ldr	r3, [sp, #16]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d1a8      	bne.n	8011b22 <_strtod_l+0xa1a>
 8011bd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011bd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011bd6:	0d1b      	lsrs	r3, r3, #20
 8011bd8:	051b      	lsls	r3, r3, #20
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d1a1      	bne.n	8011b22 <_strtod_l+0xa1a>
 8011bde:	4640      	mov	r0, r8
 8011be0:	4649      	mov	r1, r9
 8011be2:	f7ef f879 	bl	8000cd8 <__aeabi_d2lz>
 8011be6:	f7ee fce9 	bl	80005bc <__aeabi_l2d>
 8011bea:	4602      	mov	r2, r0
 8011bec:	460b      	mov	r3, r1
 8011bee:	4640      	mov	r0, r8
 8011bf0:	4649      	mov	r1, r9
 8011bf2:	f7ee fb59 	bl	80002a8 <__aeabi_dsub>
 8011bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011bf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bfc:	ea43 030a 	orr.w	r3, r3, sl
 8011c00:	4313      	orrs	r3, r2
 8011c02:	4680      	mov	r8, r0
 8011c04:	4689      	mov	r9, r1
 8011c06:	d053      	beq.n	8011cb0 <_strtod_l+0xba8>
 8011c08:	a335      	add	r3, pc, #212	; (adr r3, 8011ce0 <_strtod_l+0xbd8>)
 8011c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0e:	f7ee ff75 	bl	8000afc <__aeabi_dcmplt>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	f47f acce 	bne.w	80115b4 <_strtod_l+0x4ac>
 8011c18:	a333      	add	r3, pc, #204	; (adr r3, 8011ce8 <_strtod_l+0xbe0>)
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	4640      	mov	r0, r8
 8011c20:	4649      	mov	r1, r9
 8011c22:	f7ee ff89 	bl	8000b38 <__aeabi_dcmpgt>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	f43f af7b 	beq.w	8011b22 <_strtod_l+0xa1a>
 8011c2c:	e4c2      	b.n	80115b4 <_strtod_l+0x4ac>
 8011c2e:	9b04      	ldr	r3, [sp, #16]
 8011c30:	b333      	cbz	r3, 8011c80 <_strtod_l+0xb78>
 8011c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011c38:	d822      	bhi.n	8011c80 <_strtod_l+0xb78>
 8011c3a:	a32d      	add	r3, pc, #180	; (adr r3, 8011cf0 <_strtod_l+0xbe8>)
 8011c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c40:	4640      	mov	r0, r8
 8011c42:	4649      	mov	r1, r9
 8011c44:	f7ee ff64 	bl	8000b10 <__aeabi_dcmple>
 8011c48:	b1a0      	cbz	r0, 8011c74 <_strtod_l+0xb6c>
 8011c4a:	4649      	mov	r1, r9
 8011c4c:	4640      	mov	r0, r8
 8011c4e:	f7ee ffbb 	bl	8000bc8 <__aeabi_d2uiz>
 8011c52:	2801      	cmp	r0, #1
 8011c54:	bf38      	it	cc
 8011c56:	2001      	movcc	r0, #1
 8011c58:	f7ee fc64 	bl	8000524 <__aeabi_ui2d>
 8011c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c5e:	4680      	mov	r8, r0
 8011c60:	4689      	mov	r9, r1
 8011c62:	bb13      	cbnz	r3, 8011caa <_strtod_l+0xba2>
 8011c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c68:	9014      	str	r0, [sp, #80]	; 0x50
 8011c6a:	9315      	str	r3, [sp, #84]	; 0x54
 8011c6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011c70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011c78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011c7c:	1a9b      	subs	r3, r3, r2
 8011c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8011c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c84:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011c88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011c8c:	f002 f946 	bl	8013f1c <__ulp>
 8011c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c94:	ec53 2b10 	vmov	r2, r3, d0
 8011c98:	f7ee fcbe 	bl	8000618 <__aeabi_dmul>
 8011c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ca0:	f7ee fb04 	bl	80002ac <__adddf3>
 8011ca4:	4682      	mov	sl, r0
 8011ca6:	468b      	mov	fp, r1
 8011ca8:	e78f      	b.n	8011bca <_strtod_l+0xac2>
 8011caa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011cae:	e7dd      	b.n	8011c6c <_strtod_l+0xb64>
 8011cb0:	a311      	add	r3, pc, #68	; (adr r3, 8011cf8 <_strtod_l+0xbf0>)
 8011cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb6:	f7ee ff21 	bl	8000afc <__aeabi_dcmplt>
 8011cba:	e7b4      	b.n	8011c26 <_strtod_l+0xb1e>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8011cc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011cc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cc4:	6013      	str	r3, [r2, #0]
 8011cc6:	f7ff ba65 	b.w	8011194 <_strtod_l+0x8c>
 8011cca:	2b65      	cmp	r3, #101	; 0x65
 8011ccc:	f43f ab5d 	beq.w	801138a <_strtod_l+0x282>
 8011cd0:	2b45      	cmp	r3, #69	; 0x45
 8011cd2:	f43f ab5a 	beq.w	801138a <_strtod_l+0x282>
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	f7ff bb92 	b.w	8011400 <_strtod_l+0x2f8>
 8011cdc:	f3af 8000 	nop.w
 8011ce0:	94a03595 	.word	0x94a03595
 8011ce4:	3fdfffff 	.word	0x3fdfffff
 8011ce8:	35afe535 	.word	0x35afe535
 8011cec:	3fe00000 	.word	0x3fe00000
 8011cf0:	ffc00000 	.word	0xffc00000
 8011cf4:	41dfffff 	.word	0x41dfffff
 8011cf8:	94a03595 	.word	0x94a03595
 8011cfc:	3fcfffff 	.word	0x3fcfffff
 8011d00:	3ff00000 	.word	0x3ff00000
 8011d04:	7ff00000 	.word	0x7ff00000
 8011d08:	7fe00000 	.word	0x7fe00000
 8011d0c:	7c9fffff 	.word	0x7c9fffff
 8011d10:	3fe00000 	.word	0x3fe00000
 8011d14:	bff00000 	.word	0xbff00000
 8011d18:	7fefffff 	.word	0x7fefffff

08011d1c <_strtod_r>:
 8011d1c:	4b01      	ldr	r3, [pc, #4]	; (8011d24 <_strtod_r+0x8>)
 8011d1e:	f7ff b9f3 	b.w	8011108 <_strtod_l>
 8011d22:	bf00      	nop
 8011d24:	20000f40 	.word	0x20000f40

08011d28 <_strtol_l.isra.0>:
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d2e:	d001      	beq.n	8011d34 <_strtol_l.isra.0+0xc>
 8011d30:	2b24      	cmp	r3, #36	; 0x24
 8011d32:	d906      	bls.n	8011d42 <_strtol_l.isra.0+0x1a>
 8011d34:	f7fe f8bc 	bl	800feb0 <__errno>
 8011d38:	2316      	movs	r3, #22
 8011d3a:	6003      	str	r3, [r0, #0]
 8011d3c:	2000      	movs	r0, #0
 8011d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d42:	4f3a      	ldr	r7, [pc, #232]	; (8011e2c <_strtol_l.isra.0+0x104>)
 8011d44:	468e      	mov	lr, r1
 8011d46:	4676      	mov	r6, lr
 8011d48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011d4c:	5de5      	ldrb	r5, [r4, r7]
 8011d4e:	f015 0508 	ands.w	r5, r5, #8
 8011d52:	d1f8      	bne.n	8011d46 <_strtol_l.isra.0+0x1e>
 8011d54:	2c2d      	cmp	r4, #45	; 0x2d
 8011d56:	d134      	bne.n	8011dc2 <_strtol_l.isra.0+0x9a>
 8011d58:	f89e 4000 	ldrb.w	r4, [lr]
 8011d5c:	f04f 0801 	mov.w	r8, #1
 8011d60:	f106 0e02 	add.w	lr, r6, #2
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d05c      	beq.n	8011e22 <_strtol_l.isra.0+0xfa>
 8011d68:	2b10      	cmp	r3, #16
 8011d6a:	d10c      	bne.n	8011d86 <_strtol_l.isra.0+0x5e>
 8011d6c:	2c30      	cmp	r4, #48	; 0x30
 8011d6e:	d10a      	bne.n	8011d86 <_strtol_l.isra.0+0x5e>
 8011d70:	f89e 4000 	ldrb.w	r4, [lr]
 8011d74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011d78:	2c58      	cmp	r4, #88	; 0x58
 8011d7a:	d14d      	bne.n	8011e18 <_strtol_l.isra.0+0xf0>
 8011d7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011d80:	2310      	movs	r3, #16
 8011d82:	f10e 0e02 	add.w	lr, lr, #2
 8011d86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011d8a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8011d8e:	2600      	movs	r6, #0
 8011d90:	fbbc f9f3 	udiv	r9, ip, r3
 8011d94:	4635      	mov	r5, r6
 8011d96:	fb03 ca19 	mls	sl, r3, r9, ip
 8011d9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011d9e:	2f09      	cmp	r7, #9
 8011da0:	d818      	bhi.n	8011dd4 <_strtol_l.isra.0+0xac>
 8011da2:	463c      	mov	r4, r7
 8011da4:	42a3      	cmp	r3, r4
 8011da6:	dd24      	ble.n	8011df2 <_strtol_l.isra.0+0xca>
 8011da8:	2e00      	cmp	r6, #0
 8011daa:	db1f      	blt.n	8011dec <_strtol_l.isra.0+0xc4>
 8011dac:	45a9      	cmp	r9, r5
 8011dae:	d31d      	bcc.n	8011dec <_strtol_l.isra.0+0xc4>
 8011db0:	d101      	bne.n	8011db6 <_strtol_l.isra.0+0x8e>
 8011db2:	45a2      	cmp	sl, r4
 8011db4:	db1a      	blt.n	8011dec <_strtol_l.isra.0+0xc4>
 8011db6:	fb05 4503 	mla	r5, r5, r3, r4
 8011dba:	2601      	movs	r6, #1
 8011dbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011dc0:	e7eb      	b.n	8011d9a <_strtol_l.isra.0+0x72>
 8011dc2:	2c2b      	cmp	r4, #43	; 0x2b
 8011dc4:	bf08      	it	eq
 8011dc6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011dca:	46a8      	mov	r8, r5
 8011dcc:	bf08      	it	eq
 8011dce:	f106 0e02 	addeq.w	lr, r6, #2
 8011dd2:	e7c7      	b.n	8011d64 <_strtol_l.isra.0+0x3c>
 8011dd4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011dd8:	2f19      	cmp	r7, #25
 8011dda:	d801      	bhi.n	8011de0 <_strtol_l.isra.0+0xb8>
 8011ddc:	3c37      	subs	r4, #55	; 0x37
 8011dde:	e7e1      	b.n	8011da4 <_strtol_l.isra.0+0x7c>
 8011de0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011de4:	2f19      	cmp	r7, #25
 8011de6:	d804      	bhi.n	8011df2 <_strtol_l.isra.0+0xca>
 8011de8:	3c57      	subs	r4, #87	; 0x57
 8011dea:	e7db      	b.n	8011da4 <_strtol_l.isra.0+0x7c>
 8011dec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011df0:	e7e4      	b.n	8011dbc <_strtol_l.isra.0+0x94>
 8011df2:	2e00      	cmp	r6, #0
 8011df4:	da05      	bge.n	8011e02 <_strtol_l.isra.0+0xda>
 8011df6:	2322      	movs	r3, #34	; 0x22
 8011df8:	6003      	str	r3, [r0, #0]
 8011dfa:	4665      	mov	r5, ip
 8011dfc:	b942      	cbnz	r2, 8011e10 <_strtol_l.isra.0+0xe8>
 8011dfe:	4628      	mov	r0, r5
 8011e00:	e79d      	b.n	8011d3e <_strtol_l.isra.0+0x16>
 8011e02:	f1b8 0f00 	cmp.w	r8, #0
 8011e06:	d000      	beq.n	8011e0a <_strtol_l.isra.0+0xe2>
 8011e08:	426d      	negs	r5, r5
 8011e0a:	2a00      	cmp	r2, #0
 8011e0c:	d0f7      	beq.n	8011dfe <_strtol_l.isra.0+0xd6>
 8011e0e:	b10e      	cbz	r6, 8011e14 <_strtol_l.isra.0+0xec>
 8011e10:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8011e14:	6011      	str	r1, [r2, #0]
 8011e16:	e7f2      	b.n	8011dfe <_strtol_l.isra.0+0xd6>
 8011e18:	2430      	movs	r4, #48	; 0x30
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d1b3      	bne.n	8011d86 <_strtol_l.isra.0+0x5e>
 8011e1e:	2308      	movs	r3, #8
 8011e20:	e7b1      	b.n	8011d86 <_strtol_l.isra.0+0x5e>
 8011e22:	2c30      	cmp	r4, #48	; 0x30
 8011e24:	d0a4      	beq.n	8011d70 <_strtol_l.isra.0+0x48>
 8011e26:	230a      	movs	r3, #10
 8011e28:	e7ad      	b.n	8011d86 <_strtol_l.isra.0+0x5e>
 8011e2a:	bf00      	nop
 8011e2c:	0805f421 	.word	0x0805f421

08011e30 <_strtol_r>:
 8011e30:	f7ff bf7a 	b.w	8011d28 <_strtol_l.isra.0>

08011e34 <__swbuf_r>:
 8011e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e36:	460e      	mov	r6, r1
 8011e38:	4614      	mov	r4, r2
 8011e3a:	4605      	mov	r5, r0
 8011e3c:	b118      	cbz	r0, 8011e46 <__swbuf_r+0x12>
 8011e3e:	6983      	ldr	r3, [r0, #24]
 8011e40:	b90b      	cbnz	r3, 8011e46 <__swbuf_r+0x12>
 8011e42:	f001 f84f 	bl	8012ee4 <__sinit>
 8011e46:	4b21      	ldr	r3, [pc, #132]	; (8011ecc <__swbuf_r+0x98>)
 8011e48:	429c      	cmp	r4, r3
 8011e4a:	d12b      	bne.n	8011ea4 <__swbuf_r+0x70>
 8011e4c:	686c      	ldr	r4, [r5, #4]
 8011e4e:	69a3      	ldr	r3, [r4, #24]
 8011e50:	60a3      	str	r3, [r4, #8]
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	071a      	lsls	r2, r3, #28
 8011e56:	d52f      	bpl.n	8011eb8 <__swbuf_r+0x84>
 8011e58:	6923      	ldr	r3, [r4, #16]
 8011e5a:	b36b      	cbz	r3, 8011eb8 <__swbuf_r+0x84>
 8011e5c:	6923      	ldr	r3, [r4, #16]
 8011e5e:	6820      	ldr	r0, [r4, #0]
 8011e60:	1ac0      	subs	r0, r0, r3
 8011e62:	6963      	ldr	r3, [r4, #20]
 8011e64:	b2f6      	uxtb	r6, r6
 8011e66:	4283      	cmp	r3, r0
 8011e68:	4637      	mov	r7, r6
 8011e6a:	dc04      	bgt.n	8011e76 <__swbuf_r+0x42>
 8011e6c:	4621      	mov	r1, r4
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f000 ffa4 	bl	8012dbc <_fflush_r>
 8011e74:	bb30      	cbnz	r0, 8011ec4 <__swbuf_r+0x90>
 8011e76:	68a3      	ldr	r3, [r4, #8]
 8011e78:	3b01      	subs	r3, #1
 8011e7a:	60a3      	str	r3, [r4, #8]
 8011e7c:	6823      	ldr	r3, [r4, #0]
 8011e7e:	1c5a      	adds	r2, r3, #1
 8011e80:	6022      	str	r2, [r4, #0]
 8011e82:	701e      	strb	r6, [r3, #0]
 8011e84:	6963      	ldr	r3, [r4, #20]
 8011e86:	3001      	adds	r0, #1
 8011e88:	4283      	cmp	r3, r0
 8011e8a:	d004      	beq.n	8011e96 <__swbuf_r+0x62>
 8011e8c:	89a3      	ldrh	r3, [r4, #12]
 8011e8e:	07db      	lsls	r3, r3, #31
 8011e90:	d506      	bpl.n	8011ea0 <__swbuf_r+0x6c>
 8011e92:	2e0a      	cmp	r6, #10
 8011e94:	d104      	bne.n	8011ea0 <__swbuf_r+0x6c>
 8011e96:	4621      	mov	r1, r4
 8011e98:	4628      	mov	r0, r5
 8011e9a:	f000 ff8f 	bl	8012dbc <_fflush_r>
 8011e9e:	b988      	cbnz	r0, 8011ec4 <__swbuf_r+0x90>
 8011ea0:	4638      	mov	r0, r7
 8011ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ea4:	4b0a      	ldr	r3, [pc, #40]	; (8011ed0 <__swbuf_r+0x9c>)
 8011ea6:	429c      	cmp	r4, r3
 8011ea8:	d101      	bne.n	8011eae <__swbuf_r+0x7a>
 8011eaa:	68ac      	ldr	r4, [r5, #8]
 8011eac:	e7cf      	b.n	8011e4e <__swbuf_r+0x1a>
 8011eae:	4b09      	ldr	r3, [pc, #36]	; (8011ed4 <__swbuf_r+0xa0>)
 8011eb0:	429c      	cmp	r4, r3
 8011eb2:	bf08      	it	eq
 8011eb4:	68ec      	ldreq	r4, [r5, #12]
 8011eb6:	e7ca      	b.n	8011e4e <__swbuf_r+0x1a>
 8011eb8:	4621      	mov	r1, r4
 8011eba:	4628      	mov	r0, r5
 8011ebc:	f000 f80c 	bl	8011ed8 <__swsetup_r>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d0cb      	beq.n	8011e5c <__swbuf_r+0x28>
 8011ec4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011ec8:	e7ea      	b.n	8011ea0 <__swbuf_r+0x6c>
 8011eca:	bf00      	nop
 8011ecc:	0805f5d8 	.word	0x0805f5d8
 8011ed0:	0805f5f8 	.word	0x0805f5f8
 8011ed4:	0805f5b8 	.word	0x0805f5b8

08011ed8 <__swsetup_r>:
 8011ed8:	4b32      	ldr	r3, [pc, #200]	; (8011fa4 <__swsetup_r+0xcc>)
 8011eda:	b570      	push	{r4, r5, r6, lr}
 8011edc:	681d      	ldr	r5, [r3, #0]
 8011ede:	4606      	mov	r6, r0
 8011ee0:	460c      	mov	r4, r1
 8011ee2:	b125      	cbz	r5, 8011eee <__swsetup_r+0x16>
 8011ee4:	69ab      	ldr	r3, [r5, #24]
 8011ee6:	b913      	cbnz	r3, 8011eee <__swsetup_r+0x16>
 8011ee8:	4628      	mov	r0, r5
 8011eea:	f000 fffb 	bl	8012ee4 <__sinit>
 8011eee:	4b2e      	ldr	r3, [pc, #184]	; (8011fa8 <__swsetup_r+0xd0>)
 8011ef0:	429c      	cmp	r4, r3
 8011ef2:	d10f      	bne.n	8011f14 <__swsetup_r+0x3c>
 8011ef4:	686c      	ldr	r4, [r5, #4]
 8011ef6:	89a3      	ldrh	r3, [r4, #12]
 8011ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011efc:	0719      	lsls	r1, r3, #28
 8011efe:	d42c      	bmi.n	8011f5a <__swsetup_r+0x82>
 8011f00:	06dd      	lsls	r5, r3, #27
 8011f02:	d411      	bmi.n	8011f28 <__swsetup_r+0x50>
 8011f04:	2309      	movs	r3, #9
 8011f06:	6033      	str	r3, [r6, #0]
 8011f08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011f0c:	81a3      	strh	r3, [r4, #12]
 8011f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f12:	e03e      	b.n	8011f92 <__swsetup_r+0xba>
 8011f14:	4b25      	ldr	r3, [pc, #148]	; (8011fac <__swsetup_r+0xd4>)
 8011f16:	429c      	cmp	r4, r3
 8011f18:	d101      	bne.n	8011f1e <__swsetup_r+0x46>
 8011f1a:	68ac      	ldr	r4, [r5, #8]
 8011f1c:	e7eb      	b.n	8011ef6 <__swsetup_r+0x1e>
 8011f1e:	4b24      	ldr	r3, [pc, #144]	; (8011fb0 <__swsetup_r+0xd8>)
 8011f20:	429c      	cmp	r4, r3
 8011f22:	bf08      	it	eq
 8011f24:	68ec      	ldreq	r4, [r5, #12]
 8011f26:	e7e6      	b.n	8011ef6 <__swsetup_r+0x1e>
 8011f28:	0758      	lsls	r0, r3, #29
 8011f2a:	d512      	bpl.n	8011f52 <__swsetup_r+0x7a>
 8011f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f2e:	b141      	cbz	r1, 8011f42 <__swsetup_r+0x6a>
 8011f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f34:	4299      	cmp	r1, r3
 8011f36:	d002      	beq.n	8011f3e <__swsetup_r+0x66>
 8011f38:	4630      	mov	r0, r6
 8011f3a:	f7fe f813 	bl	800ff64 <_free_r>
 8011f3e:	2300      	movs	r3, #0
 8011f40:	6363      	str	r3, [r4, #52]	; 0x34
 8011f42:	89a3      	ldrh	r3, [r4, #12]
 8011f44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011f48:	81a3      	strh	r3, [r4, #12]
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	6063      	str	r3, [r4, #4]
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	89a3      	ldrh	r3, [r4, #12]
 8011f54:	f043 0308 	orr.w	r3, r3, #8
 8011f58:	81a3      	strh	r3, [r4, #12]
 8011f5a:	6923      	ldr	r3, [r4, #16]
 8011f5c:	b94b      	cbnz	r3, 8011f72 <__swsetup_r+0x9a>
 8011f5e:	89a3      	ldrh	r3, [r4, #12]
 8011f60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f68:	d003      	beq.n	8011f72 <__swsetup_r+0x9a>
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f001 fbf1 	bl	8013754 <__smakebuf_r>
 8011f72:	89a0      	ldrh	r0, [r4, #12]
 8011f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f78:	f010 0301 	ands.w	r3, r0, #1
 8011f7c:	d00a      	beq.n	8011f94 <__swsetup_r+0xbc>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	60a3      	str	r3, [r4, #8]
 8011f82:	6963      	ldr	r3, [r4, #20]
 8011f84:	425b      	negs	r3, r3
 8011f86:	61a3      	str	r3, [r4, #24]
 8011f88:	6923      	ldr	r3, [r4, #16]
 8011f8a:	b943      	cbnz	r3, 8011f9e <__swsetup_r+0xc6>
 8011f8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011f90:	d1ba      	bne.n	8011f08 <__swsetup_r+0x30>
 8011f92:	bd70      	pop	{r4, r5, r6, pc}
 8011f94:	0781      	lsls	r1, r0, #30
 8011f96:	bf58      	it	pl
 8011f98:	6963      	ldrpl	r3, [r4, #20]
 8011f9a:	60a3      	str	r3, [r4, #8]
 8011f9c:	e7f4      	b.n	8011f88 <__swsetup_r+0xb0>
 8011f9e:	2000      	movs	r0, #0
 8011fa0:	e7f7      	b.n	8011f92 <__swsetup_r+0xba>
 8011fa2:	bf00      	nop
 8011fa4:	20000ed8 	.word	0x20000ed8
 8011fa8:	0805f5d8 	.word	0x0805f5d8
 8011fac:	0805f5f8 	.word	0x0805f5f8
 8011fb0:	0805f5b8 	.word	0x0805f5b8

08011fb4 <abort>:
 8011fb4:	b508      	push	{r3, lr}
 8011fb6:	2006      	movs	r0, #6
 8011fb8:	f002 fac2 	bl	8014540 <raise>
 8011fbc:	2001      	movs	r0, #1
 8011fbe:	f004 fc5d 	bl	801687c <_exit>

08011fc2 <quorem>:
 8011fc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc6:	6903      	ldr	r3, [r0, #16]
 8011fc8:	690c      	ldr	r4, [r1, #16]
 8011fca:	42a3      	cmp	r3, r4
 8011fcc:	4607      	mov	r7, r0
 8011fce:	f2c0 8081 	blt.w	80120d4 <quorem+0x112>
 8011fd2:	3c01      	subs	r4, #1
 8011fd4:	f101 0814 	add.w	r8, r1, #20
 8011fd8:	f100 0514 	add.w	r5, r0, #20
 8011fdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fe0:	9301      	str	r3, [sp, #4]
 8011fe2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011fe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fea:	3301      	adds	r3, #1
 8011fec:	429a      	cmp	r2, r3
 8011fee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011ff2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ff6:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ffa:	d331      	bcc.n	8012060 <quorem+0x9e>
 8011ffc:	f04f 0e00 	mov.w	lr, #0
 8012000:	4640      	mov	r0, r8
 8012002:	46ac      	mov	ip, r5
 8012004:	46f2      	mov	sl, lr
 8012006:	f850 2b04 	ldr.w	r2, [r0], #4
 801200a:	b293      	uxth	r3, r2
 801200c:	fb06 e303 	mla	r3, r6, r3, lr
 8012010:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012014:	b29b      	uxth	r3, r3
 8012016:	ebaa 0303 	sub.w	r3, sl, r3
 801201a:	0c12      	lsrs	r2, r2, #16
 801201c:	f8dc a000 	ldr.w	sl, [ip]
 8012020:	fb06 e202 	mla	r2, r6, r2, lr
 8012024:	fa13 f38a 	uxtah	r3, r3, sl
 8012028:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801202c:	fa1f fa82 	uxth.w	sl, r2
 8012030:	f8dc 2000 	ldr.w	r2, [ip]
 8012034:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801203c:	b29b      	uxth	r3, r3
 801203e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012042:	4581      	cmp	r9, r0
 8012044:	f84c 3b04 	str.w	r3, [ip], #4
 8012048:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801204c:	d2db      	bcs.n	8012006 <quorem+0x44>
 801204e:	f855 300b 	ldr.w	r3, [r5, fp]
 8012052:	b92b      	cbnz	r3, 8012060 <quorem+0x9e>
 8012054:	9b01      	ldr	r3, [sp, #4]
 8012056:	3b04      	subs	r3, #4
 8012058:	429d      	cmp	r5, r3
 801205a:	461a      	mov	r2, r3
 801205c:	d32e      	bcc.n	80120bc <quorem+0xfa>
 801205e:	613c      	str	r4, [r7, #16]
 8012060:	4638      	mov	r0, r7
 8012062:	f001 feb7 	bl	8013dd4 <__mcmp>
 8012066:	2800      	cmp	r0, #0
 8012068:	db24      	blt.n	80120b4 <quorem+0xf2>
 801206a:	3601      	adds	r6, #1
 801206c:	4628      	mov	r0, r5
 801206e:	f04f 0c00 	mov.w	ip, #0
 8012072:	f858 2b04 	ldr.w	r2, [r8], #4
 8012076:	f8d0 e000 	ldr.w	lr, [r0]
 801207a:	b293      	uxth	r3, r2
 801207c:	ebac 0303 	sub.w	r3, ip, r3
 8012080:	0c12      	lsrs	r2, r2, #16
 8012082:	fa13 f38e 	uxtah	r3, r3, lr
 8012086:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801208a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801208e:	b29b      	uxth	r3, r3
 8012090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012094:	45c1      	cmp	r9, r8
 8012096:	f840 3b04 	str.w	r3, [r0], #4
 801209a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801209e:	d2e8      	bcs.n	8012072 <quorem+0xb0>
 80120a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120a8:	b922      	cbnz	r2, 80120b4 <quorem+0xf2>
 80120aa:	3b04      	subs	r3, #4
 80120ac:	429d      	cmp	r5, r3
 80120ae:	461a      	mov	r2, r3
 80120b0:	d30a      	bcc.n	80120c8 <quorem+0x106>
 80120b2:	613c      	str	r4, [r7, #16]
 80120b4:	4630      	mov	r0, r6
 80120b6:	b003      	add	sp, #12
 80120b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120bc:	6812      	ldr	r2, [r2, #0]
 80120be:	3b04      	subs	r3, #4
 80120c0:	2a00      	cmp	r2, #0
 80120c2:	d1cc      	bne.n	801205e <quorem+0x9c>
 80120c4:	3c01      	subs	r4, #1
 80120c6:	e7c7      	b.n	8012058 <quorem+0x96>
 80120c8:	6812      	ldr	r2, [r2, #0]
 80120ca:	3b04      	subs	r3, #4
 80120cc:	2a00      	cmp	r2, #0
 80120ce:	d1f0      	bne.n	80120b2 <quorem+0xf0>
 80120d0:	3c01      	subs	r4, #1
 80120d2:	e7eb      	b.n	80120ac <quorem+0xea>
 80120d4:	2000      	movs	r0, #0
 80120d6:	e7ee      	b.n	80120b6 <quorem+0xf4>

080120d8 <_dtoa_r>:
 80120d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120dc:	ed2d 8b02 	vpush	{d8}
 80120e0:	ec57 6b10 	vmov	r6, r7, d0
 80120e4:	b095      	sub	sp, #84	; 0x54
 80120e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80120e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80120ec:	9105      	str	r1, [sp, #20]
 80120ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80120f2:	4604      	mov	r4, r0
 80120f4:	9209      	str	r2, [sp, #36]	; 0x24
 80120f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80120f8:	b975      	cbnz	r5, 8012118 <_dtoa_r+0x40>
 80120fa:	2010      	movs	r0, #16
 80120fc:	f7fd ff14 	bl	800ff28 <malloc>
 8012100:	4602      	mov	r2, r0
 8012102:	6260      	str	r0, [r4, #36]	; 0x24
 8012104:	b920      	cbnz	r0, 8012110 <_dtoa_r+0x38>
 8012106:	4bb2      	ldr	r3, [pc, #712]	; (80123d0 <_dtoa_r+0x2f8>)
 8012108:	21ea      	movs	r1, #234	; 0xea
 801210a:	48b2      	ldr	r0, [pc, #712]	; (80123d4 <_dtoa_r+0x2fc>)
 801210c:	f7fd feb2 	bl	800fe74 <__assert_func>
 8012110:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012114:	6005      	str	r5, [r0, #0]
 8012116:	60c5      	str	r5, [r0, #12]
 8012118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801211a:	6819      	ldr	r1, [r3, #0]
 801211c:	b151      	cbz	r1, 8012134 <_dtoa_r+0x5c>
 801211e:	685a      	ldr	r2, [r3, #4]
 8012120:	604a      	str	r2, [r1, #4]
 8012122:	2301      	movs	r3, #1
 8012124:	4093      	lsls	r3, r2
 8012126:	608b      	str	r3, [r1, #8]
 8012128:	4620      	mov	r0, r4
 801212a:	f001 fbcb 	bl	80138c4 <_Bfree>
 801212e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012130:	2200      	movs	r2, #0
 8012132:	601a      	str	r2, [r3, #0]
 8012134:	1e3b      	subs	r3, r7, #0
 8012136:	bfb9      	ittee	lt
 8012138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801213c:	9303      	strlt	r3, [sp, #12]
 801213e:	2300      	movge	r3, #0
 8012140:	f8c8 3000 	strge.w	r3, [r8]
 8012144:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012148:	4ba3      	ldr	r3, [pc, #652]	; (80123d8 <_dtoa_r+0x300>)
 801214a:	bfbc      	itt	lt
 801214c:	2201      	movlt	r2, #1
 801214e:	f8c8 2000 	strlt.w	r2, [r8]
 8012152:	ea33 0309 	bics.w	r3, r3, r9
 8012156:	d11b      	bne.n	8012190 <_dtoa_r+0xb8>
 8012158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801215a:	f242 730f 	movw	r3, #9999	; 0x270f
 801215e:	6013      	str	r3, [r2, #0]
 8012160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012164:	4333      	orrs	r3, r6
 8012166:	f000 857a 	beq.w	8012c5e <_dtoa_r+0xb86>
 801216a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801216c:	b963      	cbnz	r3, 8012188 <_dtoa_r+0xb0>
 801216e:	4b9b      	ldr	r3, [pc, #620]	; (80123dc <_dtoa_r+0x304>)
 8012170:	e024      	b.n	80121bc <_dtoa_r+0xe4>
 8012172:	4b9b      	ldr	r3, [pc, #620]	; (80123e0 <_dtoa_r+0x308>)
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	3308      	adds	r3, #8
 8012178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801217a:	6013      	str	r3, [r2, #0]
 801217c:	9800      	ldr	r0, [sp, #0]
 801217e:	b015      	add	sp, #84	; 0x54
 8012180:	ecbd 8b02 	vpop	{d8}
 8012184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012188:	4b94      	ldr	r3, [pc, #592]	; (80123dc <_dtoa_r+0x304>)
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	3303      	adds	r3, #3
 801218e:	e7f3      	b.n	8012178 <_dtoa_r+0xa0>
 8012190:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012194:	2200      	movs	r2, #0
 8012196:	ec51 0b17 	vmov	r0, r1, d7
 801219a:	2300      	movs	r3, #0
 801219c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80121a0:	f7ee fca2 	bl	8000ae8 <__aeabi_dcmpeq>
 80121a4:	4680      	mov	r8, r0
 80121a6:	b158      	cbz	r0, 80121c0 <_dtoa_r+0xe8>
 80121a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121aa:	2301      	movs	r3, #1
 80121ac:	6013      	str	r3, [r2, #0]
 80121ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	f000 8551 	beq.w	8012c58 <_dtoa_r+0xb80>
 80121b6:	488b      	ldr	r0, [pc, #556]	; (80123e4 <_dtoa_r+0x30c>)
 80121b8:	6018      	str	r0, [r3, #0]
 80121ba:	1e43      	subs	r3, r0, #1
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	e7dd      	b.n	801217c <_dtoa_r+0xa4>
 80121c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80121c4:	aa12      	add	r2, sp, #72	; 0x48
 80121c6:	a913      	add	r1, sp, #76	; 0x4c
 80121c8:	4620      	mov	r0, r4
 80121ca:	f001 ff23 	bl	8014014 <__d2b>
 80121ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80121d2:	4683      	mov	fp, r0
 80121d4:	2d00      	cmp	r5, #0
 80121d6:	d07c      	beq.n	80122d2 <_dtoa_r+0x1fa>
 80121d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80121de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80121e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80121ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80121ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80121f2:	4b7d      	ldr	r3, [pc, #500]	; (80123e8 <_dtoa_r+0x310>)
 80121f4:	2200      	movs	r2, #0
 80121f6:	4630      	mov	r0, r6
 80121f8:	4639      	mov	r1, r7
 80121fa:	f7ee f855 	bl	80002a8 <__aeabi_dsub>
 80121fe:	a36e      	add	r3, pc, #440	; (adr r3, 80123b8 <_dtoa_r+0x2e0>)
 8012200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012204:	f7ee fa08 	bl	8000618 <__aeabi_dmul>
 8012208:	a36d      	add	r3, pc, #436	; (adr r3, 80123c0 <_dtoa_r+0x2e8>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f7ee f84d 	bl	80002ac <__adddf3>
 8012212:	4606      	mov	r6, r0
 8012214:	4628      	mov	r0, r5
 8012216:	460f      	mov	r7, r1
 8012218:	f7ee f994 	bl	8000544 <__aeabi_i2d>
 801221c:	a36a      	add	r3, pc, #424	; (adr r3, 80123c8 <_dtoa_r+0x2f0>)
 801221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012222:	f7ee f9f9 	bl	8000618 <__aeabi_dmul>
 8012226:	4602      	mov	r2, r0
 8012228:	460b      	mov	r3, r1
 801222a:	4630      	mov	r0, r6
 801222c:	4639      	mov	r1, r7
 801222e:	f7ee f83d 	bl	80002ac <__adddf3>
 8012232:	4606      	mov	r6, r0
 8012234:	460f      	mov	r7, r1
 8012236:	f7ee fc9f 	bl	8000b78 <__aeabi_d2iz>
 801223a:	2200      	movs	r2, #0
 801223c:	4682      	mov	sl, r0
 801223e:	2300      	movs	r3, #0
 8012240:	4630      	mov	r0, r6
 8012242:	4639      	mov	r1, r7
 8012244:	f7ee fc5a 	bl	8000afc <__aeabi_dcmplt>
 8012248:	b148      	cbz	r0, 801225e <_dtoa_r+0x186>
 801224a:	4650      	mov	r0, sl
 801224c:	f7ee f97a 	bl	8000544 <__aeabi_i2d>
 8012250:	4632      	mov	r2, r6
 8012252:	463b      	mov	r3, r7
 8012254:	f7ee fc48 	bl	8000ae8 <__aeabi_dcmpeq>
 8012258:	b908      	cbnz	r0, 801225e <_dtoa_r+0x186>
 801225a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801225e:	f1ba 0f16 	cmp.w	sl, #22
 8012262:	d854      	bhi.n	801230e <_dtoa_r+0x236>
 8012264:	4b61      	ldr	r3, [pc, #388]	; (80123ec <_dtoa_r+0x314>)
 8012266:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012272:	f7ee fc43 	bl	8000afc <__aeabi_dcmplt>
 8012276:	2800      	cmp	r0, #0
 8012278:	d04b      	beq.n	8012312 <_dtoa_r+0x23a>
 801227a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801227e:	2300      	movs	r3, #0
 8012280:	930e      	str	r3, [sp, #56]	; 0x38
 8012282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012284:	1b5d      	subs	r5, r3, r5
 8012286:	1e6b      	subs	r3, r5, #1
 8012288:	9304      	str	r3, [sp, #16]
 801228a:	bf43      	ittte	mi
 801228c:	2300      	movmi	r3, #0
 801228e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012292:	9304      	strmi	r3, [sp, #16]
 8012294:	f04f 0800 	movpl.w	r8, #0
 8012298:	f1ba 0f00 	cmp.w	sl, #0
 801229c:	db3b      	blt.n	8012316 <_dtoa_r+0x23e>
 801229e:	9b04      	ldr	r3, [sp, #16]
 80122a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80122a4:	4453      	add	r3, sl
 80122a6:	9304      	str	r3, [sp, #16]
 80122a8:	2300      	movs	r3, #0
 80122aa:	9306      	str	r3, [sp, #24]
 80122ac:	9b05      	ldr	r3, [sp, #20]
 80122ae:	2b09      	cmp	r3, #9
 80122b0:	d869      	bhi.n	8012386 <_dtoa_r+0x2ae>
 80122b2:	2b05      	cmp	r3, #5
 80122b4:	bfc4      	itt	gt
 80122b6:	3b04      	subgt	r3, #4
 80122b8:	9305      	strgt	r3, [sp, #20]
 80122ba:	9b05      	ldr	r3, [sp, #20]
 80122bc:	f1a3 0302 	sub.w	r3, r3, #2
 80122c0:	bfcc      	ite	gt
 80122c2:	2500      	movgt	r5, #0
 80122c4:	2501      	movle	r5, #1
 80122c6:	2b03      	cmp	r3, #3
 80122c8:	d869      	bhi.n	801239e <_dtoa_r+0x2c6>
 80122ca:	e8df f003 	tbb	[pc, r3]
 80122ce:	4e2c      	.short	0x4e2c
 80122d0:	5a4c      	.short	0x5a4c
 80122d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80122d6:	441d      	add	r5, r3
 80122d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80122dc:	2b20      	cmp	r3, #32
 80122de:	bfc1      	itttt	gt
 80122e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80122e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80122e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80122ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80122f0:	bfda      	itte	le
 80122f2:	f1c3 0320 	rsble	r3, r3, #32
 80122f6:	fa06 f003 	lslle.w	r0, r6, r3
 80122fa:	4318      	orrgt	r0, r3
 80122fc:	f7ee f912 	bl	8000524 <__aeabi_ui2d>
 8012300:	2301      	movs	r3, #1
 8012302:	4606      	mov	r6, r0
 8012304:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012308:	3d01      	subs	r5, #1
 801230a:	9310      	str	r3, [sp, #64]	; 0x40
 801230c:	e771      	b.n	80121f2 <_dtoa_r+0x11a>
 801230e:	2301      	movs	r3, #1
 8012310:	e7b6      	b.n	8012280 <_dtoa_r+0x1a8>
 8012312:	900e      	str	r0, [sp, #56]	; 0x38
 8012314:	e7b5      	b.n	8012282 <_dtoa_r+0x1aa>
 8012316:	f1ca 0300 	rsb	r3, sl, #0
 801231a:	9306      	str	r3, [sp, #24]
 801231c:	2300      	movs	r3, #0
 801231e:	eba8 080a 	sub.w	r8, r8, sl
 8012322:	930d      	str	r3, [sp, #52]	; 0x34
 8012324:	e7c2      	b.n	80122ac <_dtoa_r+0x1d4>
 8012326:	2300      	movs	r3, #0
 8012328:	9308      	str	r3, [sp, #32]
 801232a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801232c:	2b00      	cmp	r3, #0
 801232e:	dc39      	bgt.n	80123a4 <_dtoa_r+0x2cc>
 8012330:	f04f 0901 	mov.w	r9, #1
 8012334:	f8cd 9004 	str.w	r9, [sp, #4]
 8012338:	464b      	mov	r3, r9
 801233a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801233e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012340:	2200      	movs	r2, #0
 8012342:	6042      	str	r2, [r0, #4]
 8012344:	2204      	movs	r2, #4
 8012346:	f102 0614 	add.w	r6, r2, #20
 801234a:	429e      	cmp	r6, r3
 801234c:	6841      	ldr	r1, [r0, #4]
 801234e:	d92f      	bls.n	80123b0 <_dtoa_r+0x2d8>
 8012350:	4620      	mov	r0, r4
 8012352:	f001 fa77 	bl	8013844 <_Balloc>
 8012356:	9000      	str	r0, [sp, #0]
 8012358:	2800      	cmp	r0, #0
 801235a:	d14b      	bne.n	80123f4 <_dtoa_r+0x31c>
 801235c:	4b24      	ldr	r3, [pc, #144]	; (80123f0 <_dtoa_r+0x318>)
 801235e:	4602      	mov	r2, r0
 8012360:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012364:	e6d1      	b.n	801210a <_dtoa_r+0x32>
 8012366:	2301      	movs	r3, #1
 8012368:	e7de      	b.n	8012328 <_dtoa_r+0x250>
 801236a:	2300      	movs	r3, #0
 801236c:	9308      	str	r3, [sp, #32]
 801236e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012370:	eb0a 0903 	add.w	r9, sl, r3
 8012374:	f109 0301 	add.w	r3, r9, #1
 8012378:	2b01      	cmp	r3, #1
 801237a:	9301      	str	r3, [sp, #4]
 801237c:	bfb8      	it	lt
 801237e:	2301      	movlt	r3, #1
 8012380:	e7dd      	b.n	801233e <_dtoa_r+0x266>
 8012382:	2301      	movs	r3, #1
 8012384:	e7f2      	b.n	801236c <_dtoa_r+0x294>
 8012386:	2501      	movs	r5, #1
 8012388:	2300      	movs	r3, #0
 801238a:	9305      	str	r3, [sp, #20]
 801238c:	9508      	str	r5, [sp, #32]
 801238e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8012392:	2200      	movs	r2, #0
 8012394:	f8cd 9004 	str.w	r9, [sp, #4]
 8012398:	2312      	movs	r3, #18
 801239a:	9209      	str	r2, [sp, #36]	; 0x24
 801239c:	e7cf      	b.n	801233e <_dtoa_r+0x266>
 801239e:	2301      	movs	r3, #1
 80123a0:	9308      	str	r3, [sp, #32]
 80123a2:	e7f4      	b.n	801238e <_dtoa_r+0x2b6>
 80123a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80123a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80123ac:	464b      	mov	r3, r9
 80123ae:	e7c6      	b.n	801233e <_dtoa_r+0x266>
 80123b0:	3101      	adds	r1, #1
 80123b2:	6041      	str	r1, [r0, #4]
 80123b4:	0052      	lsls	r2, r2, #1
 80123b6:	e7c6      	b.n	8012346 <_dtoa_r+0x26e>
 80123b8:	636f4361 	.word	0x636f4361
 80123bc:	3fd287a7 	.word	0x3fd287a7
 80123c0:	8b60c8b3 	.word	0x8b60c8b3
 80123c4:	3fc68a28 	.word	0x3fc68a28
 80123c8:	509f79fb 	.word	0x509f79fb
 80123cc:	3fd34413 	.word	0x3fd34413
 80123d0:	0805f52e 	.word	0x0805f52e
 80123d4:	0805f545 	.word	0x0805f545
 80123d8:	7ff00000 	.word	0x7ff00000
 80123dc:	0805f52a 	.word	0x0805f52a
 80123e0:	0805f521 	.word	0x0805f521
 80123e4:	0805f3a6 	.word	0x0805f3a6
 80123e8:	3ff80000 	.word	0x3ff80000
 80123ec:	0805f720 	.word	0x0805f720
 80123f0:	0805f5a4 	.word	0x0805f5a4
 80123f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123f6:	9a00      	ldr	r2, [sp, #0]
 80123f8:	601a      	str	r2, [r3, #0]
 80123fa:	9b01      	ldr	r3, [sp, #4]
 80123fc:	2b0e      	cmp	r3, #14
 80123fe:	f200 80ad 	bhi.w	801255c <_dtoa_r+0x484>
 8012402:	2d00      	cmp	r5, #0
 8012404:	f000 80aa 	beq.w	801255c <_dtoa_r+0x484>
 8012408:	f1ba 0f00 	cmp.w	sl, #0
 801240c:	dd36      	ble.n	801247c <_dtoa_r+0x3a4>
 801240e:	4ac3      	ldr	r2, [pc, #780]	; (801271c <_dtoa_r+0x644>)
 8012410:	f00a 030f 	and.w	r3, sl, #15
 8012414:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012418:	ed93 7b00 	vldr	d7, [r3]
 801241c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012420:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012424:	eeb0 8a47 	vmov.f32	s16, s14
 8012428:	eef0 8a67 	vmov.f32	s17, s15
 801242c:	d016      	beq.n	801245c <_dtoa_r+0x384>
 801242e:	4bbc      	ldr	r3, [pc, #752]	; (8012720 <_dtoa_r+0x648>)
 8012430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012438:	f7ee fa18 	bl	800086c <__aeabi_ddiv>
 801243c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012440:	f007 070f 	and.w	r7, r7, #15
 8012444:	2503      	movs	r5, #3
 8012446:	4eb6      	ldr	r6, [pc, #728]	; (8012720 <_dtoa_r+0x648>)
 8012448:	b957      	cbnz	r7, 8012460 <_dtoa_r+0x388>
 801244a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801244e:	ec53 2b18 	vmov	r2, r3, d8
 8012452:	f7ee fa0b 	bl	800086c <__aeabi_ddiv>
 8012456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801245a:	e029      	b.n	80124b0 <_dtoa_r+0x3d8>
 801245c:	2502      	movs	r5, #2
 801245e:	e7f2      	b.n	8012446 <_dtoa_r+0x36e>
 8012460:	07f9      	lsls	r1, r7, #31
 8012462:	d508      	bpl.n	8012476 <_dtoa_r+0x39e>
 8012464:	ec51 0b18 	vmov	r0, r1, d8
 8012468:	e9d6 2300 	ldrd	r2, r3, [r6]
 801246c:	f7ee f8d4 	bl	8000618 <__aeabi_dmul>
 8012470:	ec41 0b18 	vmov	d8, r0, r1
 8012474:	3501      	adds	r5, #1
 8012476:	107f      	asrs	r7, r7, #1
 8012478:	3608      	adds	r6, #8
 801247a:	e7e5      	b.n	8012448 <_dtoa_r+0x370>
 801247c:	f000 80a6 	beq.w	80125cc <_dtoa_r+0x4f4>
 8012480:	f1ca 0600 	rsb	r6, sl, #0
 8012484:	4ba5      	ldr	r3, [pc, #660]	; (801271c <_dtoa_r+0x644>)
 8012486:	4fa6      	ldr	r7, [pc, #664]	; (8012720 <_dtoa_r+0x648>)
 8012488:	f006 020f 	and.w	r2, r6, #15
 801248c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012494:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012498:	f7ee f8be 	bl	8000618 <__aeabi_dmul>
 801249c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124a0:	1136      	asrs	r6, r6, #4
 80124a2:	2300      	movs	r3, #0
 80124a4:	2502      	movs	r5, #2
 80124a6:	2e00      	cmp	r6, #0
 80124a8:	f040 8085 	bne.w	80125b6 <_dtoa_r+0x4de>
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d1d2      	bne.n	8012456 <_dtoa_r+0x37e>
 80124b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f000 808c 	beq.w	80125d0 <_dtoa_r+0x4f8>
 80124b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124bc:	4b99      	ldr	r3, [pc, #612]	; (8012724 <_dtoa_r+0x64c>)
 80124be:	2200      	movs	r2, #0
 80124c0:	4630      	mov	r0, r6
 80124c2:	4639      	mov	r1, r7
 80124c4:	f7ee fb1a 	bl	8000afc <__aeabi_dcmplt>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	f000 8081 	beq.w	80125d0 <_dtoa_r+0x4f8>
 80124ce:	9b01      	ldr	r3, [sp, #4]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d07d      	beq.n	80125d0 <_dtoa_r+0x4f8>
 80124d4:	f1b9 0f00 	cmp.w	r9, #0
 80124d8:	dd3c      	ble.n	8012554 <_dtoa_r+0x47c>
 80124da:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80124de:	9307      	str	r3, [sp, #28]
 80124e0:	2200      	movs	r2, #0
 80124e2:	4b91      	ldr	r3, [pc, #580]	; (8012728 <_dtoa_r+0x650>)
 80124e4:	4630      	mov	r0, r6
 80124e6:	4639      	mov	r1, r7
 80124e8:	f7ee f896 	bl	8000618 <__aeabi_dmul>
 80124ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124f0:	3501      	adds	r5, #1
 80124f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80124f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124fa:	4628      	mov	r0, r5
 80124fc:	f7ee f822 	bl	8000544 <__aeabi_i2d>
 8012500:	4632      	mov	r2, r6
 8012502:	463b      	mov	r3, r7
 8012504:	f7ee f888 	bl	8000618 <__aeabi_dmul>
 8012508:	4b88      	ldr	r3, [pc, #544]	; (801272c <_dtoa_r+0x654>)
 801250a:	2200      	movs	r2, #0
 801250c:	f7ed fece 	bl	80002ac <__adddf3>
 8012510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012518:	9303      	str	r3, [sp, #12]
 801251a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801251c:	2b00      	cmp	r3, #0
 801251e:	d15c      	bne.n	80125da <_dtoa_r+0x502>
 8012520:	4b83      	ldr	r3, [pc, #524]	; (8012730 <_dtoa_r+0x658>)
 8012522:	2200      	movs	r2, #0
 8012524:	4630      	mov	r0, r6
 8012526:	4639      	mov	r1, r7
 8012528:	f7ed febe 	bl	80002a8 <__aeabi_dsub>
 801252c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012530:	4606      	mov	r6, r0
 8012532:	460f      	mov	r7, r1
 8012534:	f7ee fb00 	bl	8000b38 <__aeabi_dcmpgt>
 8012538:	2800      	cmp	r0, #0
 801253a:	f040 8296 	bne.w	8012a6a <_dtoa_r+0x992>
 801253e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012542:	4630      	mov	r0, r6
 8012544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012548:	4639      	mov	r1, r7
 801254a:	f7ee fad7 	bl	8000afc <__aeabi_dcmplt>
 801254e:	2800      	cmp	r0, #0
 8012550:	f040 8288 	bne.w	8012a64 <_dtoa_r+0x98c>
 8012554:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801255c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801255e:	2b00      	cmp	r3, #0
 8012560:	f2c0 8158 	blt.w	8012814 <_dtoa_r+0x73c>
 8012564:	f1ba 0f0e 	cmp.w	sl, #14
 8012568:	f300 8154 	bgt.w	8012814 <_dtoa_r+0x73c>
 801256c:	4b6b      	ldr	r3, [pc, #428]	; (801271c <_dtoa_r+0x644>)
 801256e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012572:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012578:	2b00      	cmp	r3, #0
 801257a:	f280 80e3 	bge.w	8012744 <_dtoa_r+0x66c>
 801257e:	9b01      	ldr	r3, [sp, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	f300 80df 	bgt.w	8012744 <_dtoa_r+0x66c>
 8012586:	f040 826d 	bne.w	8012a64 <_dtoa_r+0x98c>
 801258a:	4b69      	ldr	r3, [pc, #420]	; (8012730 <_dtoa_r+0x658>)
 801258c:	2200      	movs	r2, #0
 801258e:	4640      	mov	r0, r8
 8012590:	4649      	mov	r1, r9
 8012592:	f7ee f841 	bl	8000618 <__aeabi_dmul>
 8012596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801259a:	f7ee fac3 	bl	8000b24 <__aeabi_dcmpge>
 801259e:	9e01      	ldr	r6, [sp, #4]
 80125a0:	4637      	mov	r7, r6
 80125a2:	2800      	cmp	r0, #0
 80125a4:	f040 8243 	bne.w	8012a2e <_dtoa_r+0x956>
 80125a8:	9d00      	ldr	r5, [sp, #0]
 80125aa:	2331      	movs	r3, #49	; 0x31
 80125ac:	f805 3b01 	strb.w	r3, [r5], #1
 80125b0:	f10a 0a01 	add.w	sl, sl, #1
 80125b4:	e23f      	b.n	8012a36 <_dtoa_r+0x95e>
 80125b6:	07f2      	lsls	r2, r6, #31
 80125b8:	d505      	bpl.n	80125c6 <_dtoa_r+0x4ee>
 80125ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125be:	f7ee f82b 	bl	8000618 <__aeabi_dmul>
 80125c2:	3501      	adds	r5, #1
 80125c4:	2301      	movs	r3, #1
 80125c6:	1076      	asrs	r6, r6, #1
 80125c8:	3708      	adds	r7, #8
 80125ca:	e76c      	b.n	80124a6 <_dtoa_r+0x3ce>
 80125cc:	2502      	movs	r5, #2
 80125ce:	e76f      	b.n	80124b0 <_dtoa_r+0x3d8>
 80125d0:	9b01      	ldr	r3, [sp, #4]
 80125d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80125d6:	930c      	str	r3, [sp, #48]	; 0x30
 80125d8:	e78d      	b.n	80124f6 <_dtoa_r+0x41e>
 80125da:	9900      	ldr	r1, [sp, #0]
 80125dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80125de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125e0:	4b4e      	ldr	r3, [pc, #312]	; (801271c <_dtoa_r+0x644>)
 80125e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125e6:	4401      	add	r1, r0
 80125e8:	9102      	str	r1, [sp, #8]
 80125ea:	9908      	ldr	r1, [sp, #32]
 80125ec:	eeb0 8a47 	vmov.f32	s16, s14
 80125f0:	eef0 8a67 	vmov.f32	s17, s15
 80125f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80125fc:	2900      	cmp	r1, #0
 80125fe:	d045      	beq.n	801268c <_dtoa_r+0x5b4>
 8012600:	494c      	ldr	r1, [pc, #304]	; (8012734 <_dtoa_r+0x65c>)
 8012602:	2000      	movs	r0, #0
 8012604:	f7ee f932 	bl	800086c <__aeabi_ddiv>
 8012608:	ec53 2b18 	vmov	r2, r3, d8
 801260c:	f7ed fe4c 	bl	80002a8 <__aeabi_dsub>
 8012610:	9d00      	ldr	r5, [sp, #0]
 8012612:	ec41 0b18 	vmov	d8, r0, r1
 8012616:	4639      	mov	r1, r7
 8012618:	4630      	mov	r0, r6
 801261a:	f7ee faad 	bl	8000b78 <__aeabi_d2iz>
 801261e:	900c      	str	r0, [sp, #48]	; 0x30
 8012620:	f7ed ff90 	bl	8000544 <__aeabi_i2d>
 8012624:	4602      	mov	r2, r0
 8012626:	460b      	mov	r3, r1
 8012628:	4630      	mov	r0, r6
 801262a:	4639      	mov	r1, r7
 801262c:	f7ed fe3c 	bl	80002a8 <__aeabi_dsub>
 8012630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012632:	3330      	adds	r3, #48	; 0x30
 8012634:	f805 3b01 	strb.w	r3, [r5], #1
 8012638:	ec53 2b18 	vmov	r2, r3, d8
 801263c:	4606      	mov	r6, r0
 801263e:	460f      	mov	r7, r1
 8012640:	f7ee fa5c 	bl	8000afc <__aeabi_dcmplt>
 8012644:	2800      	cmp	r0, #0
 8012646:	d165      	bne.n	8012714 <_dtoa_r+0x63c>
 8012648:	4632      	mov	r2, r6
 801264a:	463b      	mov	r3, r7
 801264c:	4935      	ldr	r1, [pc, #212]	; (8012724 <_dtoa_r+0x64c>)
 801264e:	2000      	movs	r0, #0
 8012650:	f7ed fe2a 	bl	80002a8 <__aeabi_dsub>
 8012654:	ec53 2b18 	vmov	r2, r3, d8
 8012658:	f7ee fa50 	bl	8000afc <__aeabi_dcmplt>
 801265c:	2800      	cmp	r0, #0
 801265e:	f040 80b9 	bne.w	80127d4 <_dtoa_r+0x6fc>
 8012662:	9b02      	ldr	r3, [sp, #8]
 8012664:	429d      	cmp	r5, r3
 8012666:	f43f af75 	beq.w	8012554 <_dtoa_r+0x47c>
 801266a:	4b2f      	ldr	r3, [pc, #188]	; (8012728 <_dtoa_r+0x650>)
 801266c:	ec51 0b18 	vmov	r0, r1, d8
 8012670:	2200      	movs	r2, #0
 8012672:	f7ed ffd1 	bl	8000618 <__aeabi_dmul>
 8012676:	4b2c      	ldr	r3, [pc, #176]	; (8012728 <_dtoa_r+0x650>)
 8012678:	ec41 0b18 	vmov	d8, r0, r1
 801267c:	2200      	movs	r2, #0
 801267e:	4630      	mov	r0, r6
 8012680:	4639      	mov	r1, r7
 8012682:	f7ed ffc9 	bl	8000618 <__aeabi_dmul>
 8012686:	4606      	mov	r6, r0
 8012688:	460f      	mov	r7, r1
 801268a:	e7c4      	b.n	8012616 <_dtoa_r+0x53e>
 801268c:	ec51 0b17 	vmov	r0, r1, d7
 8012690:	f7ed ffc2 	bl	8000618 <__aeabi_dmul>
 8012694:	9b02      	ldr	r3, [sp, #8]
 8012696:	9d00      	ldr	r5, [sp, #0]
 8012698:	930c      	str	r3, [sp, #48]	; 0x30
 801269a:	ec41 0b18 	vmov	d8, r0, r1
 801269e:	4639      	mov	r1, r7
 80126a0:	4630      	mov	r0, r6
 80126a2:	f7ee fa69 	bl	8000b78 <__aeabi_d2iz>
 80126a6:	9011      	str	r0, [sp, #68]	; 0x44
 80126a8:	f7ed ff4c 	bl	8000544 <__aeabi_i2d>
 80126ac:	4602      	mov	r2, r0
 80126ae:	460b      	mov	r3, r1
 80126b0:	4630      	mov	r0, r6
 80126b2:	4639      	mov	r1, r7
 80126b4:	f7ed fdf8 	bl	80002a8 <__aeabi_dsub>
 80126b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126ba:	3330      	adds	r3, #48	; 0x30
 80126bc:	f805 3b01 	strb.w	r3, [r5], #1
 80126c0:	9b02      	ldr	r3, [sp, #8]
 80126c2:	429d      	cmp	r5, r3
 80126c4:	4606      	mov	r6, r0
 80126c6:	460f      	mov	r7, r1
 80126c8:	f04f 0200 	mov.w	r2, #0
 80126cc:	d134      	bne.n	8012738 <_dtoa_r+0x660>
 80126ce:	4b19      	ldr	r3, [pc, #100]	; (8012734 <_dtoa_r+0x65c>)
 80126d0:	ec51 0b18 	vmov	r0, r1, d8
 80126d4:	f7ed fdea 	bl	80002ac <__adddf3>
 80126d8:	4602      	mov	r2, r0
 80126da:	460b      	mov	r3, r1
 80126dc:	4630      	mov	r0, r6
 80126de:	4639      	mov	r1, r7
 80126e0:	f7ee fa2a 	bl	8000b38 <__aeabi_dcmpgt>
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d175      	bne.n	80127d4 <_dtoa_r+0x6fc>
 80126e8:	ec53 2b18 	vmov	r2, r3, d8
 80126ec:	4911      	ldr	r1, [pc, #68]	; (8012734 <_dtoa_r+0x65c>)
 80126ee:	2000      	movs	r0, #0
 80126f0:	f7ed fdda 	bl	80002a8 <__aeabi_dsub>
 80126f4:	4602      	mov	r2, r0
 80126f6:	460b      	mov	r3, r1
 80126f8:	4630      	mov	r0, r6
 80126fa:	4639      	mov	r1, r7
 80126fc:	f7ee f9fe 	bl	8000afc <__aeabi_dcmplt>
 8012700:	2800      	cmp	r0, #0
 8012702:	f43f af27 	beq.w	8012554 <_dtoa_r+0x47c>
 8012706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012708:	1e6b      	subs	r3, r5, #1
 801270a:	930c      	str	r3, [sp, #48]	; 0x30
 801270c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012710:	2b30      	cmp	r3, #48	; 0x30
 8012712:	d0f8      	beq.n	8012706 <_dtoa_r+0x62e>
 8012714:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012718:	e04a      	b.n	80127b0 <_dtoa_r+0x6d8>
 801271a:	bf00      	nop
 801271c:	0805f720 	.word	0x0805f720
 8012720:	0805f6f8 	.word	0x0805f6f8
 8012724:	3ff00000 	.word	0x3ff00000
 8012728:	40240000 	.word	0x40240000
 801272c:	401c0000 	.word	0x401c0000
 8012730:	40140000 	.word	0x40140000
 8012734:	3fe00000 	.word	0x3fe00000
 8012738:	4baf      	ldr	r3, [pc, #700]	; (80129f8 <_dtoa_r+0x920>)
 801273a:	f7ed ff6d 	bl	8000618 <__aeabi_dmul>
 801273e:	4606      	mov	r6, r0
 8012740:	460f      	mov	r7, r1
 8012742:	e7ac      	b.n	801269e <_dtoa_r+0x5c6>
 8012744:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012748:	9d00      	ldr	r5, [sp, #0]
 801274a:	4642      	mov	r2, r8
 801274c:	464b      	mov	r3, r9
 801274e:	4630      	mov	r0, r6
 8012750:	4639      	mov	r1, r7
 8012752:	f7ee f88b 	bl	800086c <__aeabi_ddiv>
 8012756:	f7ee fa0f 	bl	8000b78 <__aeabi_d2iz>
 801275a:	9002      	str	r0, [sp, #8]
 801275c:	f7ed fef2 	bl	8000544 <__aeabi_i2d>
 8012760:	4642      	mov	r2, r8
 8012762:	464b      	mov	r3, r9
 8012764:	f7ed ff58 	bl	8000618 <__aeabi_dmul>
 8012768:	4602      	mov	r2, r0
 801276a:	460b      	mov	r3, r1
 801276c:	4630      	mov	r0, r6
 801276e:	4639      	mov	r1, r7
 8012770:	f7ed fd9a 	bl	80002a8 <__aeabi_dsub>
 8012774:	9e02      	ldr	r6, [sp, #8]
 8012776:	9f01      	ldr	r7, [sp, #4]
 8012778:	3630      	adds	r6, #48	; 0x30
 801277a:	f805 6b01 	strb.w	r6, [r5], #1
 801277e:	9e00      	ldr	r6, [sp, #0]
 8012780:	1bae      	subs	r6, r5, r6
 8012782:	42b7      	cmp	r7, r6
 8012784:	4602      	mov	r2, r0
 8012786:	460b      	mov	r3, r1
 8012788:	d137      	bne.n	80127fa <_dtoa_r+0x722>
 801278a:	f7ed fd8f 	bl	80002ac <__adddf3>
 801278e:	4642      	mov	r2, r8
 8012790:	464b      	mov	r3, r9
 8012792:	4606      	mov	r6, r0
 8012794:	460f      	mov	r7, r1
 8012796:	f7ee f9cf 	bl	8000b38 <__aeabi_dcmpgt>
 801279a:	b9c8      	cbnz	r0, 80127d0 <_dtoa_r+0x6f8>
 801279c:	4642      	mov	r2, r8
 801279e:	464b      	mov	r3, r9
 80127a0:	4630      	mov	r0, r6
 80127a2:	4639      	mov	r1, r7
 80127a4:	f7ee f9a0 	bl	8000ae8 <__aeabi_dcmpeq>
 80127a8:	b110      	cbz	r0, 80127b0 <_dtoa_r+0x6d8>
 80127aa:	9b02      	ldr	r3, [sp, #8]
 80127ac:	07d9      	lsls	r1, r3, #31
 80127ae:	d40f      	bmi.n	80127d0 <_dtoa_r+0x6f8>
 80127b0:	4620      	mov	r0, r4
 80127b2:	4659      	mov	r1, fp
 80127b4:	f001 f886 	bl	80138c4 <_Bfree>
 80127b8:	2300      	movs	r3, #0
 80127ba:	702b      	strb	r3, [r5, #0]
 80127bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127be:	f10a 0001 	add.w	r0, sl, #1
 80127c2:	6018      	str	r0, [r3, #0]
 80127c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	f43f acd8 	beq.w	801217c <_dtoa_r+0xa4>
 80127cc:	601d      	str	r5, [r3, #0]
 80127ce:	e4d5      	b.n	801217c <_dtoa_r+0xa4>
 80127d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80127d4:	462b      	mov	r3, r5
 80127d6:	461d      	mov	r5, r3
 80127d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127dc:	2a39      	cmp	r2, #57	; 0x39
 80127de:	d108      	bne.n	80127f2 <_dtoa_r+0x71a>
 80127e0:	9a00      	ldr	r2, [sp, #0]
 80127e2:	429a      	cmp	r2, r3
 80127e4:	d1f7      	bne.n	80127d6 <_dtoa_r+0x6fe>
 80127e6:	9a07      	ldr	r2, [sp, #28]
 80127e8:	9900      	ldr	r1, [sp, #0]
 80127ea:	3201      	adds	r2, #1
 80127ec:	9207      	str	r2, [sp, #28]
 80127ee:	2230      	movs	r2, #48	; 0x30
 80127f0:	700a      	strb	r2, [r1, #0]
 80127f2:	781a      	ldrb	r2, [r3, #0]
 80127f4:	3201      	adds	r2, #1
 80127f6:	701a      	strb	r2, [r3, #0]
 80127f8:	e78c      	b.n	8012714 <_dtoa_r+0x63c>
 80127fa:	4b7f      	ldr	r3, [pc, #508]	; (80129f8 <_dtoa_r+0x920>)
 80127fc:	2200      	movs	r2, #0
 80127fe:	f7ed ff0b 	bl	8000618 <__aeabi_dmul>
 8012802:	2200      	movs	r2, #0
 8012804:	2300      	movs	r3, #0
 8012806:	4606      	mov	r6, r0
 8012808:	460f      	mov	r7, r1
 801280a:	f7ee f96d 	bl	8000ae8 <__aeabi_dcmpeq>
 801280e:	2800      	cmp	r0, #0
 8012810:	d09b      	beq.n	801274a <_dtoa_r+0x672>
 8012812:	e7cd      	b.n	80127b0 <_dtoa_r+0x6d8>
 8012814:	9a08      	ldr	r2, [sp, #32]
 8012816:	2a00      	cmp	r2, #0
 8012818:	f000 80c4 	beq.w	80129a4 <_dtoa_r+0x8cc>
 801281c:	9a05      	ldr	r2, [sp, #20]
 801281e:	2a01      	cmp	r2, #1
 8012820:	f300 80a8 	bgt.w	8012974 <_dtoa_r+0x89c>
 8012824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012826:	2a00      	cmp	r2, #0
 8012828:	f000 80a0 	beq.w	801296c <_dtoa_r+0x894>
 801282c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012830:	9e06      	ldr	r6, [sp, #24]
 8012832:	4645      	mov	r5, r8
 8012834:	9a04      	ldr	r2, [sp, #16]
 8012836:	2101      	movs	r1, #1
 8012838:	441a      	add	r2, r3
 801283a:	4620      	mov	r0, r4
 801283c:	4498      	add	r8, r3
 801283e:	9204      	str	r2, [sp, #16]
 8012840:	f001 f946 	bl	8013ad0 <__i2b>
 8012844:	4607      	mov	r7, r0
 8012846:	2d00      	cmp	r5, #0
 8012848:	dd0b      	ble.n	8012862 <_dtoa_r+0x78a>
 801284a:	9b04      	ldr	r3, [sp, #16]
 801284c:	2b00      	cmp	r3, #0
 801284e:	dd08      	ble.n	8012862 <_dtoa_r+0x78a>
 8012850:	42ab      	cmp	r3, r5
 8012852:	9a04      	ldr	r2, [sp, #16]
 8012854:	bfa8      	it	ge
 8012856:	462b      	movge	r3, r5
 8012858:	eba8 0803 	sub.w	r8, r8, r3
 801285c:	1aed      	subs	r5, r5, r3
 801285e:	1ad3      	subs	r3, r2, r3
 8012860:	9304      	str	r3, [sp, #16]
 8012862:	9b06      	ldr	r3, [sp, #24]
 8012864:	b1fb      	cbz	r3, 80128a6 <_dtoa_r+0x7ce>
 8012866:	9b08      	ldr	r3, [sp, #32]
 8012868:	2b00      	cmp	r3, #0
 801286a:	f000 809f 	beq.w	80129ac <_dtoa_r+0x8d4>
 801286e:	2e00      	cmp	r6, #0
 8012870:	dd11      	ble.n	8012896 <_dtoa_r+0x7be>
 8012872:	4639      	mov	r1, r7
 8012874:	4632      	mov	r2, r6
 8012876:	4620      	mov	r0, r4
 8012878:	f001 f9e6 	bl	8013c48 <__pow5mult>
 801287c:	465a      	mov	r2, fp
 801287e:	4601      	mov	r1, r0
 8012880:	4607      	mov	r7, r0
 8012882:	4620      	mov	r0, r4
 8012884:	f001 f93a 	bl	8013afc <__multiply>
 8012888:	4659      	mov	r1, fp
 801288a:	9007      	str	r0, [sp, #28]
 801288c:	4620      	mov	r0, r4
 801288e:	f001 f819 	bl	80138c4 <_Bfree>
 8012892:	9b07      	ldr	r3, [sp, #28]
 8012894:	469b      	mov	fp, r3
 8012896:	9b06      	ldr	r3, [sp, #24]
 8012898:	1b9a      	subs	r2, r3, r6
 801289a:	d004      	beq.n	80128a6 <_dtoa_r+0x7ce>
 801289c:	4659      	mov	r1, fp
 801289e:	4620      	mov	r0, r4
 80128a0:	f001 f9d2 	bl	8013c48 <__pow5mult>
 80128a4:	4683      	mov	fp, r0
 80128a6:	2101      	movs	r1, #1
 80128a8:	4620      	mov	r0, r4
 80128aa:	f001 f911 	bl	8013ad0 <__i2b>
 80128ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	4606      	mov	r6, r0
 80128b4:	dd7c      	ble.n	80129b0 <_dtoa_r+0x8d8>
 80128b6:	461a      	mov	r2, r3
 80128b8:	4601      	mov	r1, r0
 80128ba:	4620      	mov	r0, r4
 80128bc:	f001 f9c4 	bl	8013c48 <__pow5mult>
 80128c0:	9b05      	ldr	r3, [sp, #20]
 80128c2:	2b01      	cmp	r3, #1
 80128c4:	4606      	mov	r6, r0
 80128c6:	dd76      	ble.n	80129b6 <_dtoa_r+0x8de>
 80128c8:	2300      	movs	r3, #0
 80128ca:	9306      	str	r3, [sp, #24]
 80128cc:	6933      	ldr	r3, [r6, #16]
 80128ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80128d2:	6918      	ldr	r0, [r3, #16]
 80128d4:	f001 f8ac 	bl	8013a30 <__hi0bits>
 80128d8:	f1c0 0020 	rsb	r0, r0, #32
 80128dc:	9b04      	ldr	r3, [sp, #16]
 80128de:	4418      	add	r0, r3
 80128e0:	f010 001f 	ands.w	r0, r0, #31
 80128e4:	f000 8086 	beq.w	80129f4 <_dtoa_r+0x91c>
 80128e8:	f1c0 0320 	rsb	r3, r0, #32
 80128ec:	2b04      	cmp	r3, #4
 80128ee:	dd7f      	ble.n	80129f0 <_dtoa_r+0x918>
 80128f0:	f1c0 001c 	rsb	r0, r0, #28
 80128f4:	9b04      	ldr	r3, [sp, #16]
 80128f6:	4403      	add	r3, r0
 80128f8:	4480      	add	r8, r0
 80128fa:	4405      	add	r5, r0
 80128fc:	9304      	str	r3, [sp, #16]
 80128fe:	f1b8 0f00 	cmp.w	r8, #0
 8012902:	dd05      	ble.n	8012910 <_dtoa_r+0x838>
 8012904:	4659      	mov	r1, fp
 8012906:	4642      	mov	r2, r8
 8012908:	4620      	mov	r0, r4
 801290a:	f001 f9f7 	bl	8013cfc <__lshift>
 801290e:	4683      	mov	fp, r0
 8012910:	9b04      	ldr	r3, [sp, #16]
 8012912:	2b00      	cmp	r3, #0
 8012914:	dd05      	ble.n	8012922 <_dtoa_r+0x84a>
 8012916:	4631      	mov	r1, r6
 8012918:	461a      	mov	r2, r3
 801291a:	4620      	mov	r0, r4
 801291c:	f001 f9ee 	bl	8013cfc <__lshift>
 8012920:	4606      	mov	r6, r0
 8012922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012924:	2b00      	cmp	r3, #0
 8012926:	d069      	beq.n	80129fc <_dtoa_r+0x924>
 8012928:	4631      	mov	r1, r6
 801292a:	4658      	mov	r0, fp
 801292c:	f001 fa52 	bl	8013dd4 <__mcmp>
 8012930:	2800      	cmp	r0, #0
 8012932:	da63      	bge.n	80129fc <_dtoa_r+0x924>
 8012934:	2300      	movs	r3, #0
 8012936:	4659      	mov	r1, fp
 8012938:	220a      	movs	r2, #10
 801293a:	4620      	mov	r0, r4
 801293c:	f000 ffe4 	bl	8013908 <__multadd>
 8012940:	9b08      	ldr	r3, [sp, #32]
 8012942:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012946:	4683      	mov	fp, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	f000 818f 	beq.w	8012c6c <_dtoa_r+0xb94>
 801294e:	4639      	mov	r1, r7
 8012950:	2300      	movs	r3, #0
 8012952:	220a      	movs	r2, #10
 8012954:	4620      	mov	r0, r4
 8012956:	f000 ffd7 	bl	8013908 <__multadd>
 801295a:	f1b9 0f00 	cmp.w	r9, #0
 801295e:	4607      	mov	r7, r0
 8012960:	f300 808e 	bgt.w	8012a80 <_dtoa_r+0x9a8>
 8012964:	9b05      	ldr	r3, [sp, #20]
 8012966:	2b02      	cmp	r3, #2
 8012968:	dc50      	bgt.n	8012a0c <_dtoa_r+0x934>
 801296a:	e089      	b.n	8012a80 <_dtoa_r+0x9a8>
 801296c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801296e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012972:	e75d      	b.n	8012830 <_dtoa_r+0x758>
 8012974:	9b01      	ldr	r3, [sp, #4]
 8012976:	1e5e      	subs	r6, r3, #1
 8012978:	9b06      	ldr	r3, [sp, #24]
 801297a:	42b3      	cmp	r3, r6
 801297c:	bfbf      	itttt	lt
 801297e:	9b06      	ldrlt	r3, [sp, #24]
 8012980:	9606      	strlt	r6, [sp, #24]
 8012982:	1af2      	sublt	r2, r6, r3
 8012984:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012986:	bfb6      	itet	lt
 8012988:	189b      	addlt	r3, r3, r2
 801298a:	1b9e      	subge	r6, r3, r6
 801298c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801298e:	9b01      	ldr	r3, [sp, #4]
 8012990:	bfb8      	it	lt
 8012992:	2600      	movlt	r6, #0
 8012994:	2b00      	cmp	r3, #0
 8012996:	bfb5      	itete	lt
 8012998:	eba8 0503 	sublt.w	r5, r8, r3
 801299c:	9b01      	ldrge	r3, [sp, #4]
 801299e:	2300      	movlt	r3, #0
 80129a0:	4645      	movge	r5, r8
 80129a2:	e747      	b.n	8012834 <_dtoa_r+0x75c>
 80129a4:	9e06      	ldr	r6, [sp, #24]
 80129a6:	9f08      	ldr	r7, [sp, #32]
 80129a8:	4645      	mov	r5, r8
 80129aa:	e74c      	b.n	8012846 <_dtoa_r+0x76e>
 80129ac:	9a06      	ldr	r2, [sp, #24]
 80129ae:	e775      	b.n	801289c <_dtoa_r+0x7c4>
 80129b0:	9b05      	ldr	r3, [sp, #20]
 80129b2:	2b01      	cmp	r3, #1
 80129b4:	dc18      	bgt.n	80129e8 <_dtoa_r+0x910>
 80129b6:	9b02      	ldr	r3, [sp, #8]
 80129b8:	b9b3      	cbnz	r3, 80129e8 <_dtoa_r+0x910>
 80129ba:	9b03      	ldr	r3, [sp, #12]
 80129bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129c0:	b9a3      	cbnz	r3, 80129ec <_dtoa_r+0x914>
 80129c2:	9b03      	ldr	r3, [sp, #12]
 80129c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129c8:	0d1b      	lsrs	r3, r3, #20
 80129ca:	051b      	lsls	r3, r3, #20
 80129cc:	b12b      	cbz	r3, 80129da <_dtoa_r+0x902>
 80129ce:	9b04      	ldr	r3, [sp, #16]
 80129d0:	3301      	adds	r3, #1
 80129d2:	9304      	str	r3, [sp, #16]
 80129d4:	f108 0801 	add.w	r8, r8, #1
 80129d8:	2301      	movs	r3, #1
 80129da:	9306      	str	r3, [sp, #24]
 80129dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129de:	2b00      	cmp	r3, #0
 80129e0:	f47f af74 	bne.w	80128cc <_dtoa_r+0x7f4>
 80129e4:	2001      	movs	r0, #1
 80129e6:	e779      	b.n	80128dc <_dtoa_r+0x804>
 80129e8:	2300      	movs	r3, #0
 80129ea:	e7f6      	b.n	80129da <_dtoa_r+0x902>
 80129ec:	9b02      	ldr	r3, [sp, #8]
 80129ee:	e7f4      	b.n	80129da <_dtoa_r+0x902>
 80129f0:	d085      	beq.n	80128fe <_dtoa_r+0x826>
 80129f2:	4618      	mov	r0, r3
 80129f4:	301c      	adds	r0, #28
 80129f6:	e77d      	b.n	80128f4 <_dtoa_r+0x81c>
 80129f8:	40240000 	.word	0x40240000
 80129fc:	9b01      	ldr	r3, [sp, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	dc38      	bgt.n	8012a74 <_dtoa_r+0x99c>
 8012a02:	9b05      	ldr	r3, [sp, #20]
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	dd35      	ble.n	8012a74 <_dtoa_r+0x99c>
 8012a08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012a0c:	f1b9 0f00 	cmp.w	r9, #0
 8012a10:	d10d      	bne.n	8012a2e <_dtoa_r+0x956>
 8012a12:	4631      	mov	r1, r6
 8012a14:	464b      	mov	r3, r9
 8012a16:	2205      	movs	r2, #5
 8012a18:	4620      	mov	r0, r4
 8012a1a:	f000 ff75 	bl	8013908 <__multadd>
 8012a1e:	4601      	mov	r1, r0
 8012a20:	4606      	mov	r6, r0
 8012a22:	4658      	mov	r0, fp
 8012a24:	f001 f9d6 	bl	8013dd4 <__mcmp>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	f73f adbd 	bgt.w	80125a8 <_dtoa_r+0x4d0>
 8012a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a30:	9d00      	ldr	r5, [sp, #0]
 8012a32:	ea6f 0a03 	mvn.w	sl, r3
 8012a36:	f04f 0800 	mov.w	r8, #0
 8012a3a:	4631      	mov	r1, r6
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	f000 ff41 	bl	80138c4 <_Bfree>
 8012a42:	2f00      	cmp	r7, #0
 8012a44:	f43f aeb4 	beq.w	80127b0 <_dtoa_r+0x6d8>
 8012a48:	f1b8 0f00 	cmp.w	r8, #0
 8012a4c:	d005      	beq.n	8012a5a <_dtoa_r+0x982>
 8012a4e:	45b8      	cmp	r8, r7
 8012a50:	d003      	beq.n	8012a5a <_dtoa_r+0x982>
 8012a52:	4641      	mov	r1, r8
 8012a54:	4620      	mov	r0, r4
 8012a56:	f000 ff35 	bl	80138c4 <_Bfree>
 8012a5a:	4639      	mov	r1, r7
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	f000 ff31 	bl	80138c4 <_Bfree>
 8012a62:	e6a5      	b.n	80127b0 <_dtoa_r+0x6d8>
 8012a64:	2600      	movs	r6, #0
 8012a66:	4637      	mov	r7, r6
 8012a68:	e7e1      	b.n	8012a2e <_dtoa_r+0x956>
 8012a6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012a6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012a70:	4637      	mov	r7, r6
 8012a72:	e599      	b.n	80125a8 <_dtoa_r+0x4d0>
 8012a74:	9b08      	ldr	r3, [sp, #32]
 8012a76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	f000 80fd 	beq.w	8012c7a <_dtoa_r+0xba2>
 8012a80:	2d00      	cmp	r5, #0
 8012a82:	dd05      	ble.n	8012a90 <_dtoa_r+0x9b8>
 8012a84:	4639      	mov	r1, r7
 8012a86:	462a      	mov	r2, r5
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f001 f937 	bl	8013cfc <__lshift>
 8012a8e:	4607      	mov	r7, r0
 8012a90:	9b06      	ldr	r3, [sp, #24]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d05c      	beq.n	8012b50 <_dtoa_r+0xa78>
 8012a96:	6879      	ldr	r1, [r7, #4]
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f000 fed3 	bl	8013844 <_Balloc>
 8012a9e:	4605      	mov	r5, r0
 8012aa0:	b928      	cbnz	r0, 8012aae <_dtoa_r+0x9d6>
 8012aa2:	4b80      	ldr	r3, [pc, #512]	; (8012ca4 <_dtoa_r+0xbcc>)
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012aaa:	f7ff bb2e 	b.w	801210a <_dtoa_r+0x32>
 8012aae:	693a      	ldr	r2, [r7, #16]
 8012ab0:	3202      	adds	r2, #2
 8012ab2:	0092      	lsls	r2, r2, #2
 8012ab4:	f107 010c 	add.w	r1, r7, #12
 8012ab8:	300c      	adds	r0, #12
 8012aba:	f7fd fa3d 	bl	800ff38 <memcpy>
 8012abe:	2201      	movs	r2, #1
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	f001 f91a 	bl	8013cfc <__lshift>
 8012ac8:	9b00      	ldr	r3, [sp, #0]
 8012aca:	3301      	adds	r3, #1
 8012acc:	9301      	str	r3, [sp, #4]
 8012ace:	9b00      	ldr	r3, [sp, #0]
 8012ad0:	444b      	add	r3, r9
 8012ad2:	9307      	str	r3, [sp, #28]
 8012ad4:	9b02      	ldr	r3, [sp, #8]
 8012ad6:	f003 0301 	and.w	r3, r3, #1
 8012ada:	46b8      	mov	r8, r7
 8012adc:	9306      	str	r3, [sp, #24]
 8012ade:	4607      	mov	r7, r0
 8012ae0:	9b01      	ldr	r3, [sp, #4]
 8012ae2:	4631      	mov	r1, r6
 8012ae4:	3b01      	subs	r3, #1
 8012ae6:	4658      	mov	r0, fp
 8012ae8:	9302      	str	r3, [sp, #8]
 8012aea:	f7ff fa6a 	bl	8011fc2 <quorem>
 8012aee:	4603      	mov	r3, r0
 8012af0:	3330      	adds	r3, #48	; 0x30
 8012af2:	9004      	str	r0, [sp, #16]
 8012af4:	4641      	mov	r1, r8
 8012af6:	4658      	mov	r0, fp
 8012af8:	9308      	str	r3, [sp, #32]
 8012afa:	f001 f96b 	bl	8013dd4 <__mcmp>
 8012afe:	463a      	mov	r2, r7
 8012b00:	4681      	mov	r9, r0
 8012b02:	4631      	mov	r1, r6
 8012b04:	4620      	mov	r0, r4
 8012b06:	f001 f981 	bl	8013e0c <__mdiff>
 8012b0a:	68c2      	ldr	r2, [r0, #12]
 8012b0c:	9b08      	ldr	r3, [sp, #32]
 8012b0e:	4605      	mov	r5, r0
 8012b10:	bb02      	cbnz	r2, 8012b54 <_dtoa_r+0xa7c>
 8012b12:	4601      	mov	r1, r0
 8012b14:	4658      	mov	r0, fp
 8012b16:	f001 f95d 	bl	8013dd4 <__mcmp>
 8012b1a:	9b08      	ldr	r3, [sp, #32]
 8012b1c:	4602      	mov	r2, r0
 8012b1e:	4629      	mov	r1, r5
 8012b20:	4620      	mov	r0, r4
 8012b22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012b26:	f000 fecd 	bl	80138c4 <_Bfree>
 8012b2a:	9b05      	ldr	r3, [sp, #20]
 8012b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b2e:	9d01      	ldr	r5, [sp, #4]
 8012b30:	ea43 0102 	orr.w	r1, r3, r2
 8012b34:	9b06      	ldr	r3, [sp, #24]
 8012b36:	430b      	orrs	r3, r1
 8012b38:	9b08      	ldr	r3, [sp, #32]
 8012b3a:	d10d      	bne.n	8012b58 <_dtoa_r+0xa80>
 8012b3c:	2b39      	cmp	r3, #57	; 0x39
 8012b3e:	d029      	beq.n	8012b94 <_dtoa_r+0xabc>
 8012b40:	f1b9 0f00 	cmp.w	r9, #0
 8012b44:	dd01      	ble.n	8012b4a <_dtoa_r+0xa72>
 8012b46:	9b04      	ldr	r3, [sp, #16]
 8012b48:	3331      	adds	r3, #49	; 0x31
 8012b4a:	9a02      	ldr	r2, [sp, #8]
 8012b4c:	7013      	strb	r3, [r2, #0]
 8012b4e:	e774      	b.n	8012a3a <_dtoa_r+0x962>
 8012b50:	4638      	mov	r0, r7
 8012b52:	e7b9      	b.n	8012ac8 <_dtoa_r+0x9f0>
 8012b54:	2201      	movs	r2, #1
 8012b56:	e7e2      	b.n	8012b1e <_dtoa_r+0xa46>
 8012b58:	f1b9 0f00 	cmp.w	r9, #0
 8012b5c:	db06      	blt.n	8012b6c <_dtoa_r+0xa94>
 8012b5e:	9905      	ldr	r1, [sp, #20]
 8012b60:	ea41 0909 	orr.w	r9, r1, r9
 8012b64:	9906      	ldr	r1, [sp, #24]
 8012b66:	ea59 0101 	orrs.w	r1, r9, r1
 8012b6a:	d120      	bne.n	8012bae <_dtoa_r+0xad6>
 8012b6c:	2a00      	cmp	r2, #0
 8012b6e:	ddec      	ble.n	8012b4a <_dtoa_r+0xa72>
 8012b70:	4659      	mov	r1, fp
 8012b72:	2201      	movs	r2, #1
 8012b74:	4620      	mov	r0, r4
 8012b76:	9301      	str	r3, [sp, #4]
 8012b78:	f001 f8c0 	bl	8013cfc <__lshift>
 8012b7c:	4631      	mov	r1, r6
 8012b7e:	4683      	mov	fp, r0
 8012b80:	f001 f928 	bl	8013dd4 <__mcmp>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	9b01      	ldr	r3, [sp, #4]
 8012b88:	dc02      	bgt.n	8012b90 <_dtoa_r+0xab8>
 8012b8a:	d1de      	bne.n	8012b4a <_dtoa_r+0xa72>
 8012b8c:	07da      	lsls	r2, r3, #31
 8012b8e:	d5dc      	bpl.n	8012b4a <_dtoa_r+0xa72>
 8012b90:	2b39      	cmp	r3, #57	; 0x39
 8012b92:	d1d8      	bne.n	8012b46 <_dtoa_r+0xa6e>
 8012b94:	9a02      	ldr	r2, [sp, #8]
 8012b96:	2339      	movs	r3, #57	; 0x39
 8012b98:	7013      	strb	r3, [r2, #0]
 8012b9a:	462b      	mov	r3, r5
 8012b9c:	461d      	mov	r5, r3
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012ba4:	2a39      	cmp	r2, #57	; 0x39
 8012ba6:	d050      	beq.n	8012c4a <_dtoa_r+0xb72>
 8012ba8:	3201      	adds	r2, #1
 8012baa:	701a      	strb	r2, [r3, #0]
 8012bac:	e745      	b.n	8012a3a <_dtoa_r+0x962>
 8012bae:	2a00      	cmp	r2, #0
 8012bb0:	dd03      	ble.n	8012bba <_dtoa_r+0xae2>
 8012bb2:	2b39      	cmp	r3, #57	; 0x39
 8012bb4:	d0ee      	beq.n	8012b94 <_dtoa_r+0xabc>
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	e7c7      	b.n	8012b4a <_dtoa_r+0xa72>
 8012bba:	9a01      	ldr	r2, [sp, #4]
 8012bbc:	9907      	ldr	r1, [sp, #28]
 8012bbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012bc2:	428a      	cmp	r2, r1
 8012bc4:	d02a      	beq.n	8012c1c <_dtoa_r+0xb44>
 8012bc6:	4659      	mov	r1, fp
 8012bc8:	2300      	movs	r3, #0
 8012bca:	220a      	movs	r2, #10
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f000 fe9b 	bl	8013908 <__multadd>
 8012bd2:	45b8      	cmp	r8, r7
 8012bd4:	4683      	mov	fp, r0
 8012bd6:	f04f 0300 	mov.w	r3, #0
 8012bda:	f04f 020a 	mov.w	r2, #10
 8012bde:	4641      	mov	r1, r8
 8012be0:	4620      	mov	r0, r4
 8012be2:	d107      	bne.n	8012bf4 <_dtoa_r+0xb1c>
 8012be4:	f000 fe90 	bl	8013908 <__multadd>
 8012be8:	4680      	mov	r8, r0
 8012bea:	4607      	mov	r7, r0
 8012bec:	9b01      	ldr	r3, [sp, #4]
 8012bee:	3301      	adds	r3, #1
 8012bf0:	9301      	str	r3, [sp, #4]
 8012bf2:	e775      	b.n	8012ae0 <_dtoa_r+0xa08>
 8012bf4:	f000 fe88 	bl	8013908 <__multadd>
 8012bf8:	4639      	mov	r1, r7
 8012bfa:	4680      	mov	r8, r0
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	220a      	movs	r2, #10
 8012c00:	4620      	mov	r0, r4
 8012c02:	f000 fe81 	bl	8013908 <__multadd>
 8012c06:	4607      	mov	r7, r0
 8012c08:	e7f0      	b.n	8012bec <_dtoa_r+0xb14>
 8012c0a:	f1b9 0f00 	cmp.w	r9, #0
 8012c0e:	9a00      	ldr	r2, [sp, #0]
 8012c10:	bfcc      	ite	gt
 8012c12:	464d      	movgt	r5, r9
 8012c14:	2501      	movle	r5, #1
 8012c16:	4415      	add	r5, r2
 8012c18:	f04f 0800 	mov.w	r8, #0
 8012c1c:	4659      	mov	r1, fp
 8012c1e:	2201      	movs	r2, #1
 8012c20:	4620      	mov	r0, r4
 8012c22:	9301      	str	r3, [sp, #4]
 8012c24:	f001 f86a 	bl	8013cfc <__lshift>
 8012c28:	4631      	mov	r1, r6
 8012c2a:	4683      	mov	fp, r0
 8012c2c:	f001 f8d2 	bl	8013dd4 <__mcmp>
 8012c30:	2800      	cmp	r0, #0
 8012c32:	dcb2      	bgt.n	8012b9a <_dtoa_r+0xac2>
 8012c34:	d102      	bne.n	8012c3c <_dtoa_r+0xb64>
 8012c36:	9b01      	ldr	r3, [sp, #4]
 8012c38:	07db      	lsls	r3, r3, #31
 8012c3a:	d4ae      	bmi.n	8012b9a <_dtoa_r+0xac2>
 8012c3c:	462b      	mov	r3, r5
 8012c3e:	461d      	mov	r5, r3
 8012c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c44:	2a30      	cmp	r2, #48	; 0x30
 8012c46:	d0fa      	beq.n	8012c3e <_dtoa_r+0xb66>
 8012c48:	e6f7      	b.n	8012a3a <_dtoa_r+0x962>
 8012c4a:	9a00      	ldr	r2, [sp, #0]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d1a5      	bne.n	8012b9c <_dtoa_r+0xac4>
 8012c50:	f10a 0a01 	add.w	sl, sl, #1
 8012c54:	2331      	movs	r3, #49	; 0x31
 8012c56:	e779      	b.n	8012b4c <_dtoa_r+0xa74>
 8012c58:	4b13      	ldr	r3, [pc, #76]	; (8012ca8 <_dtoa_r+0xbd0>)
 8012c5a:	f7ff baaf 	b.w	80121bc <_dtoa_r+0xe4>
 8012c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	f47f aa86 	bne.w	8012172 <_dtoa_r+0x9a>
 8012c66:	4b11      	ldr	r3, [pc, #68]	; (8012cac <_dtoa_r+0xbd4>)
 8012c68:	f7ff baa8 	b.w	80121bc <_dtoa_r+0xe4>
 8012c6c:	f1b9 0f00 	cmp.w	r9, #0
 8012c70:	dc03      	bgt.n	8012c7a <_dtoa_r+0xba2>
 8012c72:	9b05      	ldr	r3, [sp, #20]
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	f73f aec9 	bgt.w	8012a0c <_dtoa_r+0x934>
 8012c7a:	9d00      	ldr	r5, [sp, #0]
 8012c7c:	4631      	mov	r1, r6
 8012c7e:	4658      	mov	r0, fp
 8012c80:	f7ff f99f 	bl	8011fc2 <quorem>
 8012c84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012c88:	f805 3b01 	strb.w	r3, [r5], #1
 8012c8c:	9a00      	ldr	r2, [sp, #0]
 8012c8e:	1aaa      	subs	r2, r5, r2
 8012c90:	4591      	cmp	r9, r2
 8012c92:	ddba      	ble.n	8012c0a <_dtoa_r+0xb32>
 8012c94:	4659      	mov	r1, fp
 8012c96:	2300      	movs	r3, #0
 8012c98:	220a      	movs	r2, #10
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	f000 fe34 	bl	8013908 <__multadd>
 8012ca0:	4683      	mov	fp, r0
 8012ca2:	e7eb      	b.n	8012c7c <_dtoa_r+0xba4>
 8012ca4:	0805f5a4 	.word	0x0805f5a4
 8012ca8:	0805f3a5 	.word	0x0805f3a5
 8012cac:	0805f521 	.word	0x0805f521

08012cb0 <__sflush_r>:
 8012cb0:	898a      	ldrh	r2, [r1, #12]
 8012cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	0710      	lsls	r0, r2, #28
 8012cba:	460c      	mov	r4, r1
 8012cbc:	d458      	bmi.n	8012d70 <__sflush_r+0xc0>
 8012cbe:	684b      	ldr	r3, [r1, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	dc05      	bgt.n	8012cd0 <__sflush_r+0x20>
 8012cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dc02      	bgt.n	8012cd0 <__sflush_r+0x20>
 8012cca:	2000      	movs	r0, #0
 8012ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cd2:	2e00      	cmp	r6, #0
 8012cd4:	d0f9      	beq.n	8012cca <__sflush_r+0x1a>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012cdc:	682f      	ldr	r7, [r5, #0]
 8012cde:	602b      	str	r3, [r5, #0]
 8012ce0:	d032      	beq.n	8012d48 <__sflush_r+0x98>
 8012ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ce4:	89a3      	ldrh	r3, [r4, #12]
 8012ce6:	075a      	lsls	r2, r3, #29
 8012ce8:	d505      	bpl.n	8012cf6 <__sflush_r+0x46>
 8012cea:	6863      	ldr	r3, [r4, #4]
 8012cec:	1ac0      	subs	r0, r0, r3
 8012cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cf0:	b10b      	cbz	r3, 8012cf6 <__sflush_r+0x46>
 8012cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cf4:	1ac0      	subs	r0, r0, r3
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cfc:	6a21      	ldr	r1, [r4, #32]
 8012cfe:	4628      	mov	r0, r5
 8012d00:	47b0      	blx	r6
 8012d02:	1c43      	adds	r3, r0, #1
 8012d04:	89a3      	ldrh	r3, [r4, #12]
 8012d06:	d106      	bne.n	8012d16 <__sflush_r+0x66>
 8012d08:	6829      	ldr	r1, [r5, #0]
 8012d0a:	291d      	cmp	r1, #29
 8012d0c:	d82c      	bhi.n	8012d68 <__sflush_r+0xb8>
 8012d0e:	4a2a      	ldr	r2, [pc, #168]	; (8012db8 <__sflush_r+0x108>)
 8012d10:	40ca      	lsrs	r2, r1
 8012d12:	07d6      	lsls	r6, r2, #31
 8012d14:	d528      	bpl.n	8012d68 <__sflush_r+0xb8>
 8012d16:	2200      	movs	r2, #0
 8012d18:	6062      	str	r2, [r4, #4]
 8012d1a:	04d9      	lsls	r1, r3, #19
 8012d1c:	6922      	ldr	r2, [r4, #16]
 8012d1e:	6022      	str	r2, [r4, #0]
 8012d20:	d504      	bpl.n	8012d2c <__sflush_r+0x7c>
 8012d22:	1c42      	adds	r2, r0, #1
 8012d24:	d101      	bne.n	8012d2a <__sflush_r+0x7a>
 8012d26:	682b      	ldr	r3, [r5, #0]
 8012d28:	b903      	cbnz	r3, 8012d2c <__sflush_r+0x7c>
 8012d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8012d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d2e:	602f      	str	r7, [r5, #0]
 8012d30:	2900      	cmp	r1, #0
 8012d32:	d0ca      	beq.n	8012cca <__sflush_r+0x1a>
 8012d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d38:	4299      	cmp	r1, r3
 8012d3a:	d002      	beq.n	8012d42 <__sflush_r+0x92>
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	f7fd f911 	bl	800ff64 <_free_r>
 8012d42:	2000      	movs	r0, #0
 8012d44:	6360      	str	r0, [r4, #52]	; 0x34
 8012d46:	e7c1      	b.n	8012ccc <__sflush_r+0x1c>
 8012d48:	6a21      	ldr	r1, [r4, #32]
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	47b0      	blx	r6
 8012d50:	1c41      	adds	r1, r0, #1
 8012d52:	d1c7      	bne.n	8012ce4 <__sflush_r+0x34>
 8012d54:	682b      	ldr	r3, [r5, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d0c4      	beq.n	8012ce4 <__sflush_r+0x34>
 8012d5a:	2b1d      	cmp	r3, #29
 8012d5c:	d001      	beq.n	8012d62 <__sflush_r+0xb2>
 8012d5e:	2b16      	cmp	r3, #22
 8012d60:	d101      	bne.n	8012d66 <__sflush_r+0xb6>
 8012d62:	602f      	str	r7, [r5, #0]
 8012d64:	e7b1      	b.n	8012cca <__sflush_r+0x1a>
 8012d66:	89a3      	ldrh	r3, [r4, #12]
 8012d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d6c:	81a3      	strh	r3, [r4, #12]
 8012d6e:	e7ad      	b.n	8012ccc <__sflush_r+0x1c>
 8012d70:	690f      	ldr	r7, [r1, #16]
 8012d72:	2f00      	cmp	r7, #0
 8012d74:	d0a9      	beq.n	8012cca <__sflush_r+0x1a>
 8012d76:	0793      	lsls	r3, r2, #30
 8012d78:	680e      	ldr	r6, [r1, #0]
 8012d7a:	bf08      	it	eq
 8012d7c:	694b      	ldreq	r3, [r1, #20]
 8012d7e:	600f      	str	r7, [r1, #0]
 8012d80:	bf18      	it	ne
 8012d82:	2300      	movne	r3, #0
 8012d84:	eba6 0807 	sub.w	r8, r6, r7
 8012d88:	608b      	str	r3, [r1, #8]
 8012d8a:	f1b8 0f00 	cmp.w	r8, #0
 8012d8e:	dd9c      	ble.n	8012cca <__sflush_r+0x1a>
 8012d90:	6a21      	ldr	r1, [r4, #32]
 8012d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d94:	4643      	mov	r3, r8
 8012d96:	463a      	mov	r2, r7
 8012d98:	4628      	mov	r0, r5
 8012d9a:	47b0      	blx	r6
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	dc06      	bgt.n	8012dae <__sflush_r+0xfe>
 8012da0:	89a3      	ldrh	r3, [r4, #12]
 8012da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012da6:	81a3      	strh	r3, [r4, #12]
 8012da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012dac:	e78e      	b.n	8012ccc <__sflush_r+0x1c>
 8012dae:	4407      	add	r7, r0
 8012db0:	eba8 0800 	sub.w	r8, r8, r0
 8012db4:	e7e9      	b.n	8012d8a <__sflush_r+0xda>
 8012db6:	bf00      	nop
 8012db8:	20400001 	.word	0x20400001

08012dbc <_fflush_r>:
 8012dbc:	b538      	push	{r3, r4, r5, lr}
 8012dbe:	690b      	ldr	r3, [r1, #16]
 8012dc0:	4605      	mov	r5, r0
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	b913      	cbnz	r3, 8012dcc <_fflush_r+0x10>
 8012dc6:	2500      	movs	r5, #0
 8012dc8:	4628      	mov	r0, r5
 8012dca:	bd38      	pop	{r3, r4, r5, pc}
 8012dcc:	b118      	cbz	r0, 8012dd6 <_fflush_r+0x1a>
 8012dce:	6983      	ldr	r3, [r0, #24]
 8012dd0:	b90b      	cbnz	r3, 8012dd6 <_fflush_r+0x1a>
 8012dd2:	f000 f887 	bl	8012ee4 <__sinit>
 8012dd6:	4b14      	ldr	r3, [pc, #80]	; (8012e28 <_fflush_r+0x6c>)
 8012dd8:	429c      	cmp	r4, r3
 8012dda:	d11b      	bne.n	8012e14 <_fflush_r+0x58>
 8012ddc:	686c      	ldr	r4, [r5, #4]
 8012dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d0ef      	beq.n	8012dc6 <_fflush_r+0xa>
 8012de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012de8:	07d0      	lsls	r0, r2, #31
 8012dea:	d404      	bmi.n	8012df6 <_fflush_r+0x3a>
 8012dec:	0599      	lsls	r1, r3, #22
 8012dee:	d402      	bmi.n	8012df6 <_fflush_r+0x3a>
 8012df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012df2:	f000 fc88 	bl	8013706 <__retarget_lock_acquire_recursive>
 8012df6:	4628      	mov	r0, r5
 8012df8:	4621      	mov	r1, r4
 8012dfa:	f7ff ff59 	bl	8012cb0 <__sflush_r>
 8012dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e00:	07da      	lsls	r2, r3, #31
 8012e02:	4605      	mov	r5, r0
 8012e04:	d4e0      	bmi.n	8012dc8 <_fflush_r+0xc>
 8012e06:	89a3      	ldrh	r3, [r4, #12]
 8012e08:	059b      	lsls	r3, r3, #22
 8012e0a:	d4dd      	bmi.n	8012dc8 <_fflush_r+0xc>
 8012e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e0e:	f000 fc7b 	bl	8013708 <__retarget_lock_release_recursive>
 8012e12:	e7d9      	b.n	8012dc8 <_fflush_r+0xc>
 8012e14:	4b05      	ldr	r3, [pc, #20]	; (8012e2c <_fflush_r+0x70>)
 8012e16:	429c      	cmp	r4, r3
 8012e18:	d101      	bne.n	8012e1e <_fflush_r+0x62>
 8012e1a:	68ac      	ldr	r4, [r5, #8]
 8012e1c:	e7df      	b.n	8012dde <_fflush_r+0x22>
 8012e1e:	4b04      	ldr	r3, [pc, #16]	; (8012e30 <_fflush_r+0x74>)
 8012e20:	429c      	cmp	r4, r3
 8012e22:	bf08      	it	eq
 8012e24:	68ec      	ldreq	r4, [r5, #12]
 8012e26:	e7da      	b.n	8012dde <_fflush_r+0x22>
 8012e28:	0805f5d8 	.word	0x0805f5d8
 8012e2c:	0805f5f8 	.word	0x0805f5f8
 8012e30:	0805f5b8 	.word	0x0805f5b8

08012e34 <std>:
 8012e34:	2300      	movs	r3, #0
 8012e36:	b510      	push	{r4, lr}
 8012e38:	4604      	mov	r4, r0
 8012e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8012e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e42:	6083      	str	r3, [r0, #8]
 8012e44:	8181      	strh	r1, [r0, #12]
 8012e46:	6643      	str	r3, [r0, #100]	; 0x64
 8012e48:	81c2      	strh	r2, [r0, #14]
 8012e4a:	6183      	str	r3, [r0, #24]
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	2208      	movs	r2, #8
 8012e50:	305c      	adds	r0, #92	; 0x5c
 8012e52:	f7fd f87f 	bl	800ff54 <memset>
 8012e56:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <std+0x38>)
 8012e58:	6263      	str	r3, [r4, #36]	; 0x24
 8012e5a:	4b05      	ldr	r3, [pc, #20]	; (8012e70 <std+0x3c>)
 8012e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e5e:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <std+0x40>)
 8012e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e62:	4b05      	ldr	r3, [pc, #20]	; (8012e78 <std+0x44>)
 8012e64:	6224      	str	r4, [r4, #32]
 8012e66:	6323      	str	r3, [r4, #48]	; 0x30
 8012e68:	bd10      	pop	{r4, pc}
 8012e6a:	bf00      	nop
 8012e6c:	08014579 	.word	0x08014579
 8012e70:	0801459b 	.word	0x0801459b
 8012e74:	080145d3 	.word	0x080145d3
 8012e78:	080145f7 	.word	0x080145f7

08012e7c <_cleanup_r>:
 8012e7c:	4901      	ldr	r1, [pc, #4]	; (8012e84 <_cleanup_r+0x8>)
 8012e7e:	f000 b8af 	b.w	8012fe0 <_fwalk_reent>
 8012e82:	bf00      	nop
 8012e84:	08012dbd 	.word	0x08012dbd

08012e88 <__sfmoreglue>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	1e4a      	subs	r2, r1, #1
 8012e8c:	2568      	movs	r5, #104	; 0x68
 8012e8e:	4355      	muls	r5, r2
 8012e90:	460e      	mov	r6, r1
 8012e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e96:	f7fd f8b5 	bl	8010004 <_malloc_r>
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	b140      	cbz	r0, 8012eb0 <__sfmoreglue+0x28>
 8012e9e:	2100      	movs	r1, #0
 8012ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8012ea4:	300c      	adds	r0, #12
 8012ea6:	60a0      	str	r0, [r4, #8]
 8012ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012eac:	f7fd f852 	bl	800ff54 <memset>
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	bd70      	pop	{r4, r5, r6, pc}

08012eb4 <__sfp_lock_acquire>:
 8012eb4:	4801      	ldr	r0, [pc, #4]	; (8012ebc <__sfp_lock_acquire+0x8>)
 8012eb6:	f000 bc26 	b.w	8013706 <__retarget_lock_acquire_recursive>
 8012eba:	bf00      	nop
 8012ebc:	20013cac 	.word	0x20013cac

08012ec0 <__sfp_lock_release>:
 8012ec0:	4801      	ldr	r0, [pc, #4]	; (8012ec8 <__sfp_lock_release+0x8>)
 8012ec2:	f000 bc21 	b.w	8013708 <__retarget_lock_release_recursive>
 8012ec6:	bf00      	nop
 8012ec8:	20013cac 	.word	0x20013cac

08012ecc <__sinit_lock_acquire>:
 8012ecc:	4801      	ldr	r0, [pc, #4]	; (8012ed4 <__sinit_lock_acquire+0x8>)
 8012ece:	f000 bc1a 	b.w	8013706 <__retarget_lock_acquire_recursive>
 8012ed2:	bf00      	nop
 8012ed4:	20013ca7 	.word	0x20013ca7

08012ed8 <__sinit_lock_release>:
 8012ed8:	4801      	ldr	r0, [pc, #4]	; (8012ee0 <__sinit_lock_release+0x8>)
 8012eda:	f000 bc15 	b.w	8013708 <__retarget_lock_release_recursive>
 8012ede:	bf00      	nop
 8012ee0:	20013ca7 	.word	0x20013ca7

08012ee4 <__sinit>:
 8012ee4:	b510      	push	{r4, lr}
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	f7ff fff0 	bl	8012ecc <__sinit_lock_acquire>
 8012eec:	69a3      	ldr	r3, [r4, #24]
 8012eee:	b11b      	cbz	r3, 8012ef8 <__sinit+0x14>
 8012ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ef4:	f7ff bff0 	b.w	8012ed8 <__sinit_lock_release>
 8012ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012efc:	6523      	str	r3, [r4, #80]	; 0x50
 8012efe:	4b13      	ldr	r3, [pc, #76]	; (8012f4c <__sinit+0x68>)
 8012f00:	4a13      	ldr	r2, [pc, #76]	; (8012f50 <__sinit+0x6c>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f06:	42a3      	cmp	r3, r4
 8012f08:	bf04      	itt	eq
 8012f0a:	2301      	moveq	r3, #1
 8012f0c:	61a3      	streq	r3, [r4, #24]
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f000 f820 	bl	8012f54 <__sfp>
 8012f14:	6060      	str	r0, [r4, #4]
 8012f16:	4620      	mov	r0, r4
 8012f18:	f000 f81c 	bl	8012f54 <__sfp>
 8012f1c:	60a0      	str	r0, [r4, #8]
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f000 f818 	bl	8012f54 <__sfp>
 8012f24:	2200      	movs	r2, #0
 8012f26:	60e0      	str	r0, [r4, #12]
 8012f28:	2104      	movs	r1, #4
 8012f2a:	6860      	ldr	r0, [r4, #4]
 8012f2c:	f7ff ff82 	bl	8012e34 <std>
 8012f30:	68a0      	ldr	r0, [r4, #8]
 8012f32:	2201      	movs	r2, #1
 8012f34:	2109      	movs	r1, #9
 8012f36:	f7ff ff7d 	bl	8012e34 <std>
 8012f3a:	68e0      	ldr	r0, [r4, #12]
 8012f3c:	2202      	movs	r2, #2
 8012f3e:	2112      	movs	r1, #18
 8012f40:	f7ff ff78 	bl	8012e34 <std>
 8012f44:	2301      	movs	r3, #1
 8012f46:	61a3      	str	r3, [r4, #24]
 8012f48:	e7d2      	b.n	8012ef0 <__sinit+0xc>
 8012f4a:	bf00      	nop
 8012f4c:	0805f380 	.word	0x0805f380
 8012f50:	08012e7d 	.word	0x08012e7d

08012f54 <__sfp>:
 8012f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f56:	4607      	mov	r7, r0
 8012f58:	f7ff ffac 	bl	8012eb4 <__sfp_lock_acquire>
 8012f5c:	4b1e      	ldr	r3, [pc, #120]	; (8012fd8 <__sfp+0x84>)
 8012f5e:	681e      	ldr	r6, [r3, #0]
 8012f60:	69b3      	ldr	r3, [r6, #24]
 8012f62:	b913      	cbnz	r3, 8012f6a <__sfp+0x16>
 8012f64:	4630      	mov	r0, r6
 8012f66:	f7ff ffbd 	bl	8012ee4 <__sinit>
 8012f6a:	3648      	adds	r6, #72	; 0x48
 8012f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f70:	3b01      	subs	r3, #1
 8012f72:	d503      	bpl.n	8012f7c <__sfp+0x28>
 8012f74:	6833      	ldr	r3, [r6, #0]
 8012f76:	b30b      	cbz	r3, 8012fbc <__sfp+0x68>
 8012f78:	6836      	ldr	r6, [r6, #0]
 8012f7a:	e7f7      	b.n	8012f6c <__sfp+0x18>
 8012f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f80:	b9d5      	cbnz	r5, 8012fb8 <__sfp+0x64>
 8012f82:	4b16      	ldr	r3, [pc, #88]	; (8012fdc <__sfp+0x88>)
 8012f84:	60e3      	str	r3, [r4, #12]
 8012f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8012f8c:	f000 fbba 	bl	8013704 <__retarget_lock_init_recursive>
 8012f90:	f7ff ff96 	bl	8012ec0 <__sfp_lock_release>
 8012f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f9c:	6025      	str	r5, [r4, #0]
 8012f9e:	61a5      	str	r5, [r4, #24]
 8012fa0:	2208      	movs	r2, #8
 8012fa2:	4629      	mov	r1, r5
 8012fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fa8:	f7fc ffd4 	bl	800ff54 <memset>
 8012fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fb8:	3468      	adds	r4, #104	; 0x68
 8012fba:	e7d9      	b.n	8012f70 <__sfp+0x1c>
 8012fbc:	2104      	movs	r1, #4
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	f7ff ff62 	bl	8012e88 <__sfmoreglue>
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	6030      	str	r0, [r6, #0]
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	d1d5      	bne.n	8012f78 <__sfp+0x24>
 8012fcc:	f7ff ff78 	bl	8012ec0 <__sfp_lock_release>
 8012fd0:	230c      	movs	r3, #12
 8012fd2:	603b      	str	r3, [r7, #0]
 8012fd4:	e7ee      	b.n	8012fb4 <__sfp+0x60>
 8012fd6:	bf00      	nop
 8012fd8:	0805f380 	.word	0x0805f380
 8012fdc:	ffff0001 	.word	0xffff0001

08012fe0 <_fwalk_reent>:
 8012fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe4:	4606      	mov	r6, r0
 8012fe6:	4688      	mov	r8, r1
 8012fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012fec:	2700      	movs	r7, #0
 8012fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8012ff6:	d505      	bpl.n	8013004 <_fwalk_reent+0x24>
 8012ff8:	6824      	ldr	r4, [r4, #0]
 8012ffa:	2c00      	cmp	r4, #0
 8012ffc:	d1f7      	bne.n	8012fee <_fwalk_reent+0xe>
 8012ffe:	4638      	mov	r0, r7
 8013000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013004:	89ab      	ldrh	r3, [r5, #12]
 8013006:	2b01      	cmp	r3, #1
 8013008:	d907      	bls.n	801301a <_fwalk_reent+0x3a>
 801300a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801300e:	3301      	adds	r3, #1
 8013010:	d003      	beq.n	801301a <_fwalk_reent+0x3a>
 8013012:	4629      	mov	r1, r5
 8013014:	4630      	mov	r0, r6
 8013016:	47c0      	blx	r8
 8013018:	4307      	orrs	r7, r0
 801301a:	3568      	adds	r5, #104	; 0x68
 801301c:	e7e9      	b.n	8012ff2 <_fwalk_reent+0x12>

0801301e <rshift>:
 801301e:	6903      	ldr	r3, [r0, #16]
 8013020:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013028:	ea4f 1261 	mov.w	r2, r1, asr #5
 801302c:	f100 0414 	add.w	r4, r0, #20
 8013030:	dd45      	ble.n	80130be <rshift+0xa0>
 8013032:	f011 011f 	ands.w	r1, r1, #31
 8013036:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801303a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801303e:	d10c      	bne.n	801305a <rshift+0x3c>
 8013040:	f100 0710 	add.w	r7, r0, #16
 8013044:	4629      	mov	r1, r5
 8013046:	42b1      	cmp	r1, r6
 8013048:	d334      	bcc.n	80130b4 <rshift+0x96>
 801304a:	1a9b      	subs	r3, r3, r2
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	1eea      	subs	r2, r5, #3
 8013050:	4296      	cmp	r6, r2
 8013052:	bf38      	it	cc
 8013054:	2300      	movcc	r3, #0
 8013056:	4423      	add	r3, r4
 8013058:	e015      	b.n	8013086 <rshift+0x68>
 801305a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801305e:	f1c1 0820 	rsb	r8, r1, #32
 8013062:	40cf      	lsrs	r7, r1
 8013064:	f105 0e04 	add.w	lr, r5, #4
 8013068:	46a1      	mov	r9, r4
 801306a:	4576      	cmp	r6, lr
 801306c:	46f4      	mov	ip, lr
 801306e:	d815      	bhi.n	801309c <rshift+0x7e>
 8013070:	1a9b      	subs	r3, r3, r2
 8013072:	009a      	lsls	r2, r3, #2
 8013074:	3a04      	subs	r2, #4
 8013076:	3501      	adds	r5, #1
 8013078:	42ae      	cmp	r6, r5
 801307a:	bf38      	it	cc
 801307c:	2200      	movcc	r2, #0
 801307e:	18a3      	adds	r3, r4, r2
 8013080:	50a7      	str	r7, [r4, r2]
 8013082:	b107      	cbz	r7, 8013086 <rshift+0x68>
 8013084:	3304      	adds	r3, #4
 8013086:	1b1a      	subs	r2, r3, r4
 8013088:	42a3      	cmp	r3, r4
 801308a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801308e:	bf08      	it	eq
 8013090:	2300      	moveq	r3, #0
 8013092:	6102      	str	r2, [r0, #16]
 8013094:	bf08      	it	eq
 8013096:	6143      	streq	r3, [r0, #20]
 8013098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801309c:	f8dc c000 	ldr.w	ip, [ip]
 80130a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80130a4:	ea4c 0707 	orr.w	r7, ip, r7
 80130a8:	f849 7b04 	str.w	r7, [r9], #4
 80130ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80130b0:	40cf      	lsrs	r7, r1
 80130b2:	e7da      	b.n	801306a <rshift+0x4c>
 80130b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80130b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80130bc:	e7c3      	b.n	8013046 <rshift+0x28>
 80130be:	4623      	mov	r3, r4
 80130c0:	e7e1      	b.n	8013086 <rshift+0x68>

080130c2 <__hexdig_fun>:
 80130c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80130c6:	2b09      	cmp	r3, #9
 80130c8:	d802      	bhi.n	80130d0 <__hexdig_fun+0xe>
 80130ca:	3820      	subs	r0, #32
 80130cc:	b2c0      	uxtb	r0, r0
 80130ce:	4770      	bx	lr
 80130d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80130d4:	2b05      	cmp	r3, #5
 80130d6:	d801      	bhi.n	80130dc <__hexdig_fun+0x1a>
 80130d8:	3847      	subs	r0, #71	; 0x47
 80130da:	e7f7      	b.n	80130cc <__hexdig_fun+0xa>
 80130dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80130e0:	2b05      	cmp	r3, #5
 80130e2:	d801      	bhi.n	80130e8 <__hexdig_fun+0x26>
 80130e4:	3827      	subs	r0, #39	; 0x27
 80130e6:	e7f1      	b.n	80130cc <__hexdig_fun+0xa>
 80130e8:	2000      	movs	r0, #0
 80130ea:	4770      	bx	lr

080130ec <__gethex>:
 80130ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f0:	ed2d 8b02 	vpush	{d8}
 80130f4:	b089      	sub	sp, #36	; 0x24
 80130f6:	ee08 0a10 	vmov	s16, r0
 80130fa:	9304      	str	r3, [sp, #16]
 80130fc:	4bbc      	ldr	r3, [pc, #752]	; (80133f0 <__gethex+0x304>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	9301      	str	r3, [sp, #4]
 8013102:	4618      	mov	r0, r3
 8013104:	468b      	mov	fp, r1
 8013106:	4690      	mov	r8, r2
 8013108:	f7ed f86c 	bl	80001e4 <strlen>
 801310c:	9b01      	ldr	r3, [sp, #4]
 801310e:	f8db 2000 	ldr.w	r2, [fp]
 8013112:	4403      	add	r3, r0
 8013114:	4682      	mov	sl, r0
 8013116:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801311a:	9305      	str	r3, [sp, #20]
 801311c:	1c93      	adds	r3, r2, #2
 801311e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013122:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013126:	32fe      	adds	r2, #254	; 0xfe
 8013128:	18d1      	adds	r1, r2, r3
 801312a:	461f      	mov	r7, r3
 801312c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013130:	9100      	str	r1, [sp, #0]
 8013132:	2830      	cmp	r0, #48	; 0x30
 8013134:	d0f8      	beq.n	8013128 <__gethex+0x3c>
 8013136:	f7ff ffc4 	bl	80130c2 <__hexdig_fun>
 801313a:	4604      	mov	r4, r0
 801313c:	2800      	cmp	r0, #0
 801313e:	d13a      	bne.n	80131b6 <__gethex+0xca>
 8013140:	9901      	ldr	r1, [sp, #4]
 8013142:	4652      	mov	r2, sl
 8013144:	4638      	mov	r0, r7
 8013146:	f001 fa5a 	bl	80145fe <strncmp>
 801314a:	4605      	mov	r5, r0
 801314c:	2800      	cmp	r0, #0
 801314e:	d168      	bne.n	8013222 <__gethex+0x136>
 8013150:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013154:	eb07 060a 	add.w	r6, r7, sl
 8013158:	f7ff ffb3 	bl	80130c2 <__hexdig_fun>
 801315c:	2800      	cmp	r0, #0
 801315e:	d062      	beq.n	8013226 <__gethex+0x13a>
 8013160:	4633      	mov	r3, r6
 8013162:	7818      	ldrb	r0, [r3, #0]
 8013164:	2830      	cmp	r0, #48	; 0x30
 8013166:	461f      	mov	r7, r3
 8013168:	f103 0301 	add.w	r3, r3, #1
 801316c:	d0f9      	beq.n	8013162 <__gethex+0x76>
 801316e:	f7ff ffa8 	bl	80130c2 <__hexdig_fun>
 8013172:	2301      	movs	r3, #1
 8013174:	fab0 f480 	clz	r4, r0
 8013178:	0964      	lsrs	r4, r4, #5
 801317a:	4635      	mov	r5, r6
 801317c:	9300      	str	r3, [sp, #0]
 801317e:	463a      	mov	r2, r7
 8013180:	4616      	mov	r6, r2
 8013182:	3201      	adds	r2, #1
 8013184:	7830      	ldrb	r0, [r6, #0]
 8013186:	f7ff ff9c 	bl	80130c2 <__hexdig_fun>
 801318a:	2800      	cmp	r0, #0
 801318c:	d1f8      	bne.n	8013180 <__gethex+0x94>
 801318e:	9901      	ldr	r1, [sp, #4]
 8013190:	4652      	mov	r2, sl
 8013192:	4630      	mov	r0, r6
 8013194:	f001 fa33 	bl	80145fe <strncmp>
 8013198:	b980      	cbnz	r0, 80131bc <__gethex+0xd0>
 801319a:	b94d      	cbnz	r5, 80131b0 <__gethex+0xc4>
 801319c:	eb06 050a 	add.w	r5, r6, sl
 80131a0:	462a      	mov	r2, r5
 80131a2:	4616      	mov	r6, r2
 80131a4:	3201      	adds	r2, #1
 80131a6:	7830      	ldrb	r0, [r6, #0]
 80131a8:	f7ff ff8b 	bl	80130c2 <__hexdig_fun>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d1f8      	bne.n	80131a2 <__gethex+0xb6>
 80131b0:	1bad      	subs	r5, r5, r6
 80131b2:	00ad      	lsls	r5, r5, #2
 80131b4:	e004      	b.n	80131c0 <__gethex+0xd4>
 80131b6:	2400      	movs	r4, #0
 80131b8:	4625      	mov	r5, r4
 80131ba:	e7e0      	b.n	801317e <__gethex+0x92>
 80131bc:	2d00      	cmp	r5, #0
 80131be:	d1f7      	bne.n	80131b0 <__gethex+0xc4>
 80131c0:	7833      	ldrb	r3, [r6, #0]
 80131c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80131c6:	2b50      	cmp	r3, #80	; 0x50
 80131c8:	d13b      	bne.n	8013242 <__gethex+0x156>
 80131ca:	7873      	ldrb	r3, [r6, #1]
 80131cc:	2b2b      	cmp	r3, #43	; 0x2b
 80131ce:	d02c      	beq.n	801322a <__gethex+0x13e>
 80131d0:	2b2d      	cmp	r3, #45	; 0x2d
 80131d2:	d02e      	beq.n	8013232 <__gethex+0x146>
 80131d4:	1c71      	adds	r1, r6, #1
 80131d6:	f04f 0900 	mov.w	r9, #0
 80131da:	7808      	ldrb	r0, [r1, #0]
 80131dc:	f7ff ff71 	bl	80130c2 <__hexdig_fun>
 80131e0:	1e43      	subs	r3, r0, #1
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	2b18      	cmp	r3, #24
 80131e6:	d82c      	bhi.n	8013242 <__gethex+0x156>
 80131e8:	f1a0 0210 	sub.w	r2, r0, #16
 80131ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80131f0:	f7ff ff67 	bl	80130c2 <__hexdig_fun>
 80131f4:	1e43      	subs	r3, r0, #1
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	2b18      	cmp	r3, #24
 80131fa:	d91d      	bls.n	8013238 <__gethex+0x14c>
 80131fc:	f1b9 0f00 	cmp.w	r9, #0
 8013200:	d000      	beq.n	8013204 <__gethex+0x118>
 8013202:	4252      	negs	r2, r2
 8013204:	4415      	add	r5, r2
 8013206:	f8cb 1000 	str.w	r1, [fp]
 801320a:	b1e4      	cbz	r4, 8013246 <__gethex+0x15a>
 801320c:	9b00      	ldr	r3, [sp, #0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	bf14      	ite	ne
 8013212:	2700      	movne	r7, #0
 8013214:	2706      	moveq	r7, #6
 8013216:	4638      	mov	r0, r7
 8013218:	b009      	add	sp, #36	; 0x24
 801321a:	ecbd 8b02 	vpop	{d8}
 801321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013222:	463e      	mov	r6, r7
 8013224:	4625      	mov	r5, r4
 8013226:	2401      	movs	r4, #1
 8013228:	e7ca      	b.n	80131c0 <__gethex+0xd4>
 801322a:	f04f 0900 	mov.w	r9, #0
 801322e:	1cb1      	adds	r1, r6, #2
 8013230:	e7d3      	b.n	80131da <__gethex+0xee>
 8013232:	f04f 0901 	mov.w	r9, #1
 8013236:	e7fa      	b.n	801322e <__gethex+0x142>
 8013238:	230a      	movs	r3, #10
 801323a:	fb03 0202 	mla	r2, r3, r2, r0
 801323e:	3a10      	subs	r2, #16
 8013240:	e7d4      	b.n	80131ec <__gethex+0x100>
 8013242:	4631      	mov	r1, r6
 8013244:	e7df      	b.n	8013206 <__gethex+0x11a>
 8013246:	1bf3      	subs	r3, r6, r7
 8013248:	3b01      	subs	r3, #1
 801324a:	4621      	mov	r1, r4
 801324c:	2b07      	cmp	r3, #7
 801324e:	dc0b      	bgt.n	8013268 <__gethex+0x17c>
 8013250:	ee18 0a10 	vmov	r0, s16
 8013254:	f000 faf6 	bl	8013844 <_Balloc>
 8013258:	4604      	mov	r4, r0
 801325a:	b940      	cbnz	r0, 801326e <__gethex+0x182>
 801325c:	4b65      	ldr	r3, [pc, #404]	; (80133f4 <__gethex+0x308>)
 801325e:	4602      	mov	r2, r0
 8013260:	21de      	movs	r1, #222	; 0xde
 8013262:	4865      	ldr	r0, [pc, #404]	; (80133f8 <__gethex+0x30c>)
 8013264:	f7fc fe06 	bl	800fe74 <__assert_func>
 8013268:	3101      	adds	r1, #1
 801326a:	105b      	asrs	r3, r3, #1
 801326c:	e7ee      	b.n	801324c <__gethex+0x160>
 801326e:	f100 0914 	add.w	r9, r0, #20
 8013272:	f04f 0b00 	mov.w	fp, #0
 8013276:	f1ca 0301 	rsb	r3, sl, #1
 801327a:	f8cd 9008 	str.w	r9, [sp, #8]
 801327e:	f8cd b000 	str.w	fp, [sp]
 8013282:	9306      	str	r3, [sp, #24]
 8013284:	42b7      	cmp	r7, r6
 8013286:	d340      	bcc.n	801330a <__gethex+0x21e>
 8013288:	9802      	ldr	r0, [sp, #8]
 801328a:	9b00      	ldr	r3, [sp, #0]
 801328c:	f840 3b04 	str.w	r3, [r0], #4
 8013290:	eba0 0009 	sub.w	r0, r0, r9
 8013294:	1080      	asrs	r0, r0, #2
 8013296:	0146      	lsls	r6, r0, #5
 8013298:	6120      	str	r0, [r4, #16]
 801329a:	4618      	mov	r0, r3
 801329c:	f000 fbc8 	bl	8013a30 <__hi0bits>
 80132a0:	1a30      	subs	r0, r6, r0
 80132a2:	f8d8 6000 	ldr.w	r6, [r8]
 80132a6:	42b0      	cmp	r0, r6
 80132a8:	dd63      	ble.n	8013372 <__gethex+0x286>
 80132aa:	1b87      	subs	r7, r0, r6
 80132ac:	4639      	mov	r1, r7
 80132ae:	4620      	mov	r0, r4
 80132b0:	f000 ff62 	bl	8014178 <__any_on>
 80132b4:	4682      	mov	sl, r0
 80132b6:	b1a8      	cbz	r0, 80132e4 <__gethex+0x1f8>
 80132b8:	1e7b      	subs	r3, r7, #1
 80132ba:	1159      	asrs	r1, r3, #5
 80132bc:	f003 021f 	and.w	r2, r3, #31
 80132c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80132c4:	f04f 0a01 	mov.w	sl, #1
 80132c8:	fa0a f202 	lsl.w	r2, sl, r2
 80132cc:	420a      	tst	r2, r1
 80132ce:	d009      	beq.n	80132e4 <__gethex+0x1f8>
 80132d0:	4553      	cmp	r3, sl
 80132d2:	dd05      	ble.n	80132e0 <__gethex+0x1f4>
 80132d4:	1eb9      	subs	r1, r7, #2
 80132d6:	4620      	mov	r0, r4
 80132d8:	f000 ff4e 	bl	8014178 <__any_on>
 80132dc:	2800      	cmp	r0, #0
 80132de:	d145      	bne.n	801336c <__gethex+0x280>
 80132e0:	f04f 0a02 	mov.w	sl, #2
 80132e4:	4639      	mov	r1, r7
 80132e6:	4620      	mov	r0, r4
 80132e8:	f7ff fe99 	bl	801301e <rshift>
 80132ec:	443d      	add	r5, r7
 80132ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80132f2:	42ab      	cmp	r3, r5
 80132f4:	da4c      	bge.n	8013390 <__gethex+0x2a4>
 80132f6:	ee18 0a10 	vmov	r0, s16
 80132fa:	4621      	mov	r1, r4
 80132fc:	f000 fae2 	bl	80138c4 <_Bfree>
 8013300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013302:	2300      	movs	r3, #0
 8013304:	6013      	str	r3, [r2, #0]
 8013306:	27a3      	movs	r7, #163	; 0xa3
 8013308:	e785      	b.n	8013216 <__gethex+0x12a>
 801330a:	1e73      	subs	r3, r6, #1
 801330c:	9a05      	ldr	r2, [sp, #20]
 801330e:	9303      	str	r3, [sp, #12]
 8013310:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013314:	4293      	cmp	r3, r2
 8013316:	d019      	beq.n	801334c <__gethex+0x260>
 8013318:	f1bb 0f20 	cmp.w	fp, #32
 801331c:	d107      	bne.n	801332e <__gethex+0x242>
 801331e:	9b02      	ldr	r3, [sp, #8]
 8013320:	9a00      	ldr	r2, [sp, #0]
 8013322:	f843 2b04 	str.w	r2, [r3], #4
 8013326:	9302      	str	r3, [sp, #8]
 8013328:	2300      	movs	r3, #0
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	469b      	mov	fp, r3
 801332e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013332:	f7ff fec6 	bl	80130c2 <__hexdig_fun>
 8013336:	9b00      	ldr	r3, [sp, #0]
 8013338:	f000 000f 	and.w	r0, r0, #15
 801333c:	fa00 f00b 	lsl.w	r0, r0, fp
 8013340:	4303      	orrs	r3, r0
 8013342:	9300      	str	r3, [sp, #0]
 8013344:	f10b 0b04 	add.w	fp, fp, #4
 8013348:	9b03      	ldr	r3, [sp, #12]
 801334a:	e00d      	b.n	8013368 <__gethex+0x27c>
 801334c:	9b03      	ldr	r3, [sp, #12]
 801334e:	9a06      	ldr	r2, [sp, #24]
 8013350:	4413      	add	r3, r2
 8013352:	42bb      	cmp	r3, r7
 8013354:	d3e0      	bcc.n	8013318 <__gethex+0x22c>
 8013356:	4618      	mov	r0, r3
 8013358:	9901      	ldr	r1, [sp, #4]
 801335a:	9307      	str	r3, [sp, #28]
 801335c:	4652      	mov	r2, sl
 801335e:	f001 f94e 	bl	80145fe <strncmp>
 8013362:	9b07      	ldr	r3, [sp, #28]
 8013364:	2800      	cmp	r0, #0
 8013366:	d1d7      	bne.n	8013318 <__gethex+0x22c>
 8013368:	461e      	mov	r6, r3
 801336a:	e78b      	b.n	8013284 <__gethex+0x198>
 801336c:	f04f 0a03 	mov.w	sl, #3
 8013370:	e7b8      	b.n	80132e4 <__gethex+0x1f8>
 8013372:	da0a      	bge.n	801338a <__gethex+0x29e>
 8013374:	1a37      	subs	r7, r6, r0
 8013376:	4621      	mov	r1, r4
 8013378:	ee18 0a10 	vmov	r0, s16
 801337c:	463a      	mov	r2, r7
 801337e:	f000 fcbd 	bl	8013cfc <__lshift>
 8013382:	1bed      	subs	r5, r5, r7
 8013384:	4604      	mov	r4, r0
 8013386:	f100 0914 	add.w	r9, r0, #20
 801338a:	f04f 0a00 	mov.w	sl, #0
 801338e:	e7ae      	b.n	80132ee <__gethex+0x202>
 8013390:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013394:	42a8      	cmp	r0, r5
 8013396:	dd72      	ble.n	801347e <__gethex+0x392>
 8013398:	1b45      	subs	r5, r0, r5
 801339a:	42ae      	cmp	r6, r5
 801339c:	dc36      	bgt.n	801340c <__gethex+0x320>
 801339e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80133a2:	2b02      	cmp	r3, #2
 80133a4:	d02a      	beq.n	80133fc <__gethex+0x310>
 80133a6:	2b03      	cmp	r3, #3
 80133a8:	d02c      	beq.n	8013404 <__gethex+0x318>
 80133aa:	2b01      	cmp	r3, #1
 80133ac:	d115      	bne.n	80133da <__gethex+0x2ee>
 80133ae:	42ae      	cmp	r6, r5
 80133b0:	d113      	bne.n	80133da <__gethex+0x2ee>
 80133b2:	2e01      	cmp	r6, #1
 80133b4:	d10b      	bne.n	80133ce <__gethex+0x2e2>
 80133b6:	9a04      	ldr	r2, [sp, #16]
 80133b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80133bc:	6013      	str	r3, [r2, #0]
 80133be:	2301      	movs	r3, #1
 80133c0:	6123      	str	r3, [r4, #16]
 80133c2:	f8c9 3000 	str.w	r3, [r9]
 80133c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80133c8:	2762      	movs	r7, #98	; 0x62
 80133ca:	601c      	str	r4, [r3, #0]
 80133cc:	e723      	b.n	8013216 <__gethex+0x12a>
 80133ce:	1e71      	subs	r1, r6, #1
 80133d0:	4620      	mov	r0, r4
 80133d2:	f000 fed1 	bl	8014178 <__any_on>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d1ed      	bne.n	80133b6 <__gethex+0x2ca>
 80133da:	ee18 0a10 	vmov	r0, s16
 80133de:	4621      	mov	r1, r4
 80133e0:	f000 fa70 	bl	80138c4 <_Bfree>
 80133e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80133e6:	2300      	movs	r3, #0
 80133e8:	6013      	str	r3, [r2, #0]
 80133ea:	2750      	movs	r7, #80	; 0x50
 80133ec:	e713      	b.n	8013216 <__gethex+0x12a>
 80133ee:	bf00      	nop
 80133f0:	0805f684 	.word	0x0805f684
 80133f4:	0805f5a4 	.word	0x0805f5a4
 80133f8:	0805f618 	.word	0x0805f618
 80133fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d1eb      	bne.n	80133da <__gethex+0x2ee>
 8013402:	e7d8      	b.n	80133b6 <__gethex+0x2ca>
 8013404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013406:	2b00      	cmp	r3, #0
 8013408:	d1d5      	bne.n	80133b6 <__gethex+0x2ca>
 801340a:	e7e6      	b.n	80133da <__gethex+0x2ee>
 801340c:	1e6f      	subs	r7, r5, #1
 801340e:	f1ba 0f00 	cmp.w	sl, #0
 8013412:	d131      	bne.n	8013478 <__gethex+0x38c>
 8013414:	b127      	cbz	r7, 8013420 <__gethex+0x334>
 8013416:	4639      	mov	r1, r7
 8013418:	4620      	mov	r0, r4
 801341a:	f000 fead 	bl	8014178 <__any_on>
 801341e:	4682      	mov	sl, r0
 8013420:	117b      	asrs	r3, r7, #5
 8013422:	2101      	movs	r1, #1
 8013424:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013428:	f007 071f 	and.w	r7, r7, #31
 801342c:	fa01 f707 	lsl.w	r7, r1, r7
 8013430:	421f      	tst	r7, r3
 8013432:	4629      	mov	r1, r5
 8013434:	4620      	mov	r0, r4
 8013436:	bf18      	it	ne
 8013438:	f04a 0a02 	orrne.w	sl, sl, #2
 801343c:	1b76      	subs	r6, r6, r5
 801343e:	f7ff fdee 	bl	801301e <rshift>
 8013442:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013446:	2702      	movs	r7, #2
 8013448:	f1ba 0f00 	cmp.w	sl, #0
 801344c:	d048      	beq.n	80134e0 <__gethex+0x3f4>
 801344e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013452:	2b02      	cmp	r3, #2
 8013454:	d015      	beq.n	8013482 <__gethex+0x396>
 8013456:	2b03      	cmp	r3, #3
 8013458:	d017      	beq.n	801348a <__gethex+0x39e>
 801345a:	2b01      	cmp	r3, #1
 801345c:	d109      	bne.n	8013472 <__gethex+0x386>
 801345e:	f01a 0f02 	tst.w	sl, #2
 8013462:	d006      	beq.n	8013472 <__gethex+0x386>
 8013464:	f8d9 0000 	ldr.w	r0, [r9]
 8013468:	ea4a 0a00 	orr.w	sl, sl, r0
 801346c:	f01a 0f01 	tst.w	sl, #1
 8013470:	d10e      	bne.n	8013490 <__gethex+0x3a4>
 8013472:	f047 0710 	orr.w	r7, r7, #16
 8013476:	e033      	b.n	80134e0 <__gethex+0x3f4>
 8013478:	f04f 0a01 	mov.w	sl, #1
 801347c:	e7d0      	b.n	8013420 <__gethex+0x334>
 801347e:	2701      	movs	r7, #1
 8013480:	e7e2      	b.n	8013448 <__gethex+0x35c>
 8013482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013484:	f1c3 0301 	rsb	r3, r3, #1
 8013488:	9315      	str	r3, [sp, #84]	; 0x54
 801348a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801348c:	2b00      	cmp	r3, #0
 801348e:	d0f0      	beq.n	8013472 <__gethex+0x386>
 8013490:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013494:	f104 0314 	add.w	r3, r4, #20
 8013498:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801349c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80134a0:	f04f 0c00 	mov.w	ip, #0
 80134a4:	4618      	mov	r0, r3
 80134a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80134aa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80134ae:	d01c      	beq.n	80134ea <__gethex+0x3fe>
 80134b0:	3201      	adds	r2, #1
 80134b2:	6002      	str	r2, [r0, #0]
 80134b4:	2f02      	cmp	r7, #2
 80134b6:	f104 0314 	add.w	r3, r4, #20
 80134ba:	d13f      	bne.n	801353c <__gethex+0x450>
 80134bc:	f8d8 2000 	ldr.w	r2, [r8]
 80134c0:	3a01      	subs	r2, #1
 80134c2:	42b2      	cmp	r2, r6
 80134c4:	d10a      	bne.n	80134dc <__gethex+0x3f0>
 80134c6:	1171      	asrs	r1, r6, #5
 80134c8:	2201      	movs	r2, #1
 80134ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80134ce:	f006 061f 	and.w	r6, r6, #31
 80134d2:	fa02 f606 	lsl.w	r6, r2, r6
 80134d6:	421e      	tst	r6, r3
 80134d8:	bf18      	it	ne
 80134da:	4617      	movne	r7, r2
 80134dc:	f047 0720 	orr.w	r7, r7, #32
 80134e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80134e2:	601c      	str	r4, [r3, #0]
 80134e4:	9b04      	ldr	r3, [sp, #16]
 80134e6:	601d      	str	r5, [r3, #0]
 80134e8:	e695      	b.n	8013216 <__gethex+0x12a>
 80134ea:	4299      	cmp	r1, r3
 80134ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80134f0:	d8d8      	bhi.n	80134a4 <__gethex+0x3b8>
 80134f2:	68a3      	ldr	r3, [r4, #8]
 80134f4:	459b      	cmp	fp, r3
 80134f6:	db19      	blt.n	801352c <__gethex+0x440>
 80134f8:	6861      	ldr	r1, [r4, #4]
 80134fa:	ee18 0a10 	vmov	r0, s16
 80134fe:	3101      	adds	r1, #1
 8013500:	f000 f9a0 	bl	8013844 <_Balloc>
 8013504:	4681      	mov	r9, r0
 8013506:	b918      	cbnz	r0, 8013510 <__gethex+0x424>
 8013508:	4b1a      	ldr	r3, [pc, #104]	; (8013574 <__gethex+0x488>)
 801350a:	4602      	mov	r2, r0
 801350c:	2184      	movs	r1, #132	; 0x84
 801350e:	e6a8      	b.n	8013262 <__gethex+0x176>
 8013510:	6922      	ldr	r2, [r4, #16]
 8013512:	3202      	adds	r2, #2
 8013514:	f104 010c 	add.w	r1, r4, #12
 8013518:	0092      	lsls	r2, r2, #2
 801351a:	300c      	adds	r0, #12
 801351c:	f7fc fd0c 	bl	800ff38 <memcpy>
 8013520:	4621      	mov	r1, r4
 8013522:	ee18 0a10 	vmov	r0, s16
 8013526:	f000 f9cd 	bl	80138c4 <_Bfree>
 801352a:	464c      	mov	r4, r9
 801352c:	6923      	ldr	r3, [r4, #16]
 801352e:	1c5a      	adds	r2, r3, #1
 8013530:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013534:	6122      	str	r2, [r4, #16]
 8013536:	2201      	movs	r2, #1
 8013538:	615a      	str	r2, [r3, #20]
 801353a:	e7bb      	b.n	80134b4 <__gethex+0x3c8>
 801353c:	6922      	ldr	r2, [r4, #16]
 801353e:	455a      	cmp	r2, fp
 8013540:	dd0b      	ble.n	801355a <__gethex+0x46e>
 8013542:	2101      	movs	r1, #1
 8013544:	4620      	mov	r0, r4
 8013546:	f7ff fd6a 	bl	801301e <rshift>
 801354a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801354e:	3501      	adds	r5, #1
 8013550:	42ab      	cmp	r3, r5
 8013552:	f6ff aed0 	blt.w	80132f6 <__gethex+0x20a>
 8013556:	2701      	movs	r7, #1
 8013558:	e7c0      	b.n	80134dc <__gethex+0x3f0>
 801355a:	f016 061f 	ands.w	r6, r6, #31
 801355e:	d0fa      	beq.n	8013556 <__gethex+0x46a>
 8013560:	449a      	add	sl, r3
 8013562:	f1c6 0620 	rsb	r6, r6, #32
 8013566:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801356a:	f000 fa61 	bl	8013a30 <__hi0bits>
 801356e:	42b0      	cmp	r0, r6
 8013570:	dbe7      	blt.n	8013542 <__gethex+0x456>
 8013572:	e7f0      	b.n	8013556 <__gethex+0x46a>
 8013574:	0805f5a4 	.word	0x0805f5a4

08013578 <L_shift>:
 8013578:	f1c2 0208 	rsb	r2, r2, #8
 801357c:	0092      	lsls	r2, r2, #2
 801357e:	b570      	push	{r4, r5, r6, lr}
 8013580:	f1c2 0620 	rsb	r6, r2, #32
 8013584:	6843      	ldr	r3, [r0, #4]
 8013586:	6804      	ldr	r4, [r0, #0]
 8013588:	fa03 f506 	lsl.w	r5, r3, r6
 801358c:	432c      	orrs	r4, r5
 801358e:	40d3      	lsrs	r3, r2
 8013590:	6004      	str	r4, [r0, #0]
 8013592:	f840 3f04 	str.w	r3, [r0, #4]!
 8013596:	4288      	cmp	r0, r1
 8013598:	d3f4      	bcc.n	8013584 <L_shift+0xc>
 801359a:	bd70      	pop	{r4, r5, r6, pc}

0801359c <__match>:
 801359c:	b530      	push	{r4, r5, lr}
 801359e:	6803      	ldr	r3, [r0, #0]
 80135a0:	3301      	adds	r3, #1
 80135a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135a6:	b914      	cbnz	r4, 80135ae <__match+0x12>
 80135a8:	6003      	str	r3, [r0, #0]
 80135aa:	2001      	movs	r0, #1
 80135ac:	bd30      	pop	{r4, r5, pc}
 80135ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80135b6:	2d19      	cmp	r5, #25
 80135b8:	bf98      	it	ls
 80135ba:	3220      	addls	r2, #32
 80135bc:	42a2      	cmp	r2, r4
 80135be:	d0f0      	beq.n	80135a2 <__match+0x6>
 80135c0:	2000      	movs	r0, #0
 80135c2:	e7f3      	b.n	80135ac <__match+0x10>

080135c4 <__hexnan>:
 80135c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c8:	680b      	ldr	r3, [r1, #0]
 80135ca:	6801      	ldr	r1, [r0, #0]
 80135cc:	115e      	asrs	r6, r3, #5
 80135ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80135d2:	f013 031f 	ands.w	r3, r3, #31
 80135d6:	b087      	sub	sp, #28
 80135d8:	bf18      	it	ne
 80135da:	3604      	addne	r6, #4
 80135dc:	2500      	movs	r5, #0
 80135de:	1f37      	subs	r7, r6, #4
 80135e0:	4682      	mov	sl, r0
 80135e2:	4690      	mov	r8, r2
 80135e4:	9301      	str	r3, [sp, #4]
 80135e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80135ea:	46b9      	mov	r9, r7
 80135ec:	463c      	mov	r4, r7
 80135ee:	9502      	str	r5, [sp, #8]
 80135f0:	46ab      	mov	fp, r5
 80135f2:	784a      	ldrb	r2, [r1, #1]
 80135f4:	1c4b      	adds	r3, r1, #1
 80135f6:	9303      	str	r3, [sp, #12]
 80135f8:	b342      	cbz	r2, 801364c <__hexnan+0x88>
 80135fa:	4610      	mov	r0, r2
 80135fc:	9105      	str	r1, [sp, #20]
 80135fe:	9204      	str	r2, [sp, #16]
 8013600:	f7ff fd5f 	bl	80130c2 <__hexdig_fun>
 8013604:	2800      	cmp	r0, #0
 8013606:	d14f      	bne.n	80136a8 <__hexnan+0xe4>
 8013608:	9a04      	ldr	r2, [sp, #16]
 801360a:	9905      	ldr	r1, [sp, #20]
 801360c:	2a20      	cmp	r2, #32
 801360e:	d818      	bhi.n	8013642 <__hexnan+0x7e>
 8013610:	9b02      	ldr	r3, [sp, #8]
 8013612:	459b      	cmp	fp, r3
 8013614:	dd13      	ble.n	801363e <__hexnan+0x7a>
 8013616:	454c      	cmp	r4, r9
 8013618:	d206      	bcs.n	8013628 <__hexnan+0x64>
 801361a:	2d07      	cmp	r5, #7
 801361c:	dc04      	bgt.n	8013628 <__hexnan+0x64>
 801361e:	462a      	mov	r2, r5
 8013620:	4649      	mov	r1, r9
 8013622:	4620      	mov	r0, r4
 8013624:	f7ff ffa8 	bl	8013578 <L_shift>
 8013628:	4544      	cmp	r4, r8
 801362a:	d950      	bls.n	80136ce <__hexnan+0x10a>
 801362c:	2300      	movs	r3, #0
 801362e:	f1a4 0904 	sub.w	r9, r4, #4
 8013632:	f844 3c04 	str.w	r3, [r4, #-4]
 8013636:	f8cd b008 	str.w	fp, [sp, #8]
 801363a:	464c      	mov	r4, r9
 801363c:	461d      	mov	r5, r3
 801363e:	9903      	ldr	r1, [sp, #12]
 8013640:	e7d7      	b.n	80135f2 <__hexnan+0x2e>
 8013642:	2a29      	cmp	r2, #41	; 0x29
 8013644:	d156      	bne.n	80136f4 <__hexnan+0x130>
 8013646:	3102      	adds	r1, #2
 8013648:	f8ca 1000 	str.w	r1, [sl]
 801364c:	f1bb 0f00 	cmp.w	fp, #0
 8013650:	d050      	beq.n	80136f4 <__hexnan+0x130>
 8013652:	454c      	cmp	r4, r9
 8013654:	d206      	bcs.n	8013664 <__hexnan+0xa0>
 8013656:	2d07      	cmp	r5, #7
 8013658:	dc04      	bgt.n	8013664 <__hexnan+0xa0>
 801365a:	462a      	mov	r2, r5
 801365c:	4649      	mov	r1, r9
 801365e:	4620      	mov	r0, r4
 8013660:	f7ff ff8a 	bl	8013578 <L_shift>
 8013664:	4544      	cmp	r4, r8
 8013666:	d934      	bls.n	80136d2 <__hexnan+0x10e>
 8013668:	f1a8 0204 	sub.w	r2, r8, #4
 801366c:	4623      	mov	r3, r4
 801366e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013672:	f842 1f04 	str.w	r1, [r2, #4]!
 8013676:	429f      	cmp	r7, r3
 8013678:	d2f9      	bcs.n	801366e <__hexnan+0xaa>
 801367a:	1b3b      	subs	r3, r7, r4
 801367c:	f023 0303 	bic.w	r3, r3, #3
 8013680:	3304      	adds	r3, #4
 8013682:	3401      	adds	r4, #1
 8013684:	3e03      	subs	r6, #3
 8013686:	42b4      	cmp	r4, r6
 8013688:	bf88      	it	hi
 801368a:	2304      	movhi	r3, #4
 801368c:	4443      	add	r3, r8
 801368e:	2200      	movs	r2, #0
 8013690:	f843 2b04 	str.w	r2, [r3], #4
 8013694:	429f      	cmp	r7, r3
 8013696:	d2fb      	bcs.n	8013690 <__hexnan+0xcc>
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	b91b      	cbnz	r3, 80136a4 <__hexnan+0xe0>
 801369c:	4547      	cmp	r7, r8
 801369e:	d127      	bne.n	80136f0 <__hexnan+0x12c>
 80136a0:	2301      	movs	r3, #1
 80136a2:	603b      	str	r3, [r7, #0]
 80136a4:	2005      	movs	r0, #5
 80136a6:	e026      	b.n	80136f6 <__hexnan+0x132>
 80136a8:	3501      	adds	r5, #1
 80136aa:	2d08      	cmp	r5, #8
 80136ac:	f10b 0b01 	add.w	fp, fp, #1
 80136b0:	dd06      	ble.n	80136c0 <__hexnan+0xfc>
 80136b2:	4544      	cmp	r4, r8
 80136b4:	d9c3      	bls.n	801363e <__hexnan+0x7a>
 80136b6:	2300      	movs	r3, #0
 80136b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80136bc:	2501      	movs	r5, #1
 80136be:	3c04      	subs	r4, #4
 80136c0:	6822      	ldr	r2, [r4, #0]
 80136c2:	f000 000f 	and.w	r0, r0, #15
 80136c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80136ca:	6022      	str	r2, [r4, #0]
 80136cc:	e7b7      	b.n	801363e <__hexnan+0x7a>
 80136ce:	2508      	movs	r5, #8
 80136d0:	e7b5      	b.n	801363e <__hexnan+0x7a>
 80136d2:	9b01      	ldr	r3, [sp, #4]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d0df      	beq.n	8013698 <__hexnan+0xd4>
 80136d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136dc:	f1c3 0320 	rsb	r3, r3, #32
 80136e0:	fa22 f303 	lsr.w	r3, r2, r3
 80136e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80136e8:	401a      	ands	r2, r3
 80136ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80136ee:	e7d3      	b.n	8013698 <__hexnan+0xd4>
 80136f0:	3f04      	subs	r7, #4
 80136f2:	e7d1      	b.n	8013698 <__hexnan+0xd4>
 80136f4:	2004      	movs	r0, #4
 80136f6:	b007      	add	sp, #28
 80136f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080136fc <_localeconv_r>:
 80136fc:	4800      	ldr	r0, [pc, #0]	; (8013700 <_localeconv_r+0x4>)
 80136fe:	4770      	bx	lr
 8013700:	20001030 	.word	0x20001030

08013704 <__retarget_lock_init_recursive>:
 8013704:	4770      	bx	lr

08013706 <__retarget_lock_acquire_recursive>:
 8013706:	4770      	bx	lr

08013708 <__retarget_lock_release_recursive>:
 8013708:	4770      	bx	lr

0801370a <__swhatbuf_r>:
 801370a:	b570      	push	{r4, r5, r6, lr}
 801370c:	460e      	mov	r6, r1
 801370e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013712:	2900      	cmp	r1, #0
 8013714:	b096      	sub	sp, #88	; 0x58
 8013716:	4614      	mov	r4, r2
 8013718:	461d      	mov	r5, r3
 801371a:	da07      	bge.n	801372c <__swhatbuf_r+0x22>
 801371c:	2300      	movs	r3, #0
 801371e:	602b      	str	r3, [r5, #0]
 8013720:	89b3      	ldrh	r3, [r6, #12]
 8013722:	061a      	lsls	r2, r3, #24
 8013724:	d410      	bmi.n	8013748 <__swhatbuf_r+0x3e>
 8013726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801372a:	e00e      	b.n	801374a <__swhatbuf_r+0x40>
 801372c:	466a      	mov	r2, sp
 801372e:	f000 ffa7 	bl	8014680 <_fstat_r>
 8013732:	2800      	cmp	r0, #0
 8013734:	dbf2      	blt.n	801371c <__swhatbuf_r+0x12>
 8013736:	9a01      	ldr	r2, [sp, #4]
 8013738:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801373c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013740:	425a      	negs	r2, r3
 8013742:	415a      	adcs	r2, r3
 8013744:	602a      	str	r2, [r5, #0]
 8013746:	e7ee      	b.n	8013726 <__swhatbuf_r+0x1c>
 8013748:	2340      	movs	r3, #64	; 0x40
 801374a:	2000      	movs	r0, #0
 801374c:	6023      	str	r3, [r4, #0]
 801374e:	b016      	add	sp, #88	; 0x58
 8013750:	bd70      	pop	{r4, r5, r6, pc}
	...

08013754 <__smakebuf_r>:
 8013754:	898b      	ldrh	r3, [r1, #12]
 8013756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013758:	079d      	lsls	r5, r3, #30
 801375a:	4606      	mov	r6, r0
 801375c:	460c      	mov	r4, r1
 801375e:	d507      	bpl.n	8013770 <__smakebuf_r+0x1c>
 8013760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013764:	6023      	str	r3, [r4, #0]
 8013766:	6123      	str	r3, [r4, #16]
 8013768:	2301      	movs	r3, #1
 801376a:	6163      	str	r3, [r4, #20]
 801376c:	b002      	add	sp, #8
 801376e:	bd70      	pop	{r4, r5, r6, pc}
 8013770:	ab01      	add	r3, sp, #4
 8013772:	466a      	mov	r2, sp
 8013774:	f7ff ffc9 	bl	801370a <__swhatbuf_r>
 8013778:	9900      	ldr	r1, [sp, #0]
 801377a:	4605      	mov	r5, r0
 801377c:	4630      	mov	r0, r6
 801377e:	f7fc fc41 	bl	8010004 <_malloc_r>
 8013782:	b948      	cbnz	r0, 8013798 <__smakebuf_r+0x44>
 8013784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013788:	059a      	lsls	r2, r3, #22
 801378a:	d4ef      	bmi.n	801376c <__smakebuf_r+0x18>
 801378c:	f023 0303 	bic.w	r3, r3, #3
 8013790:	f043 0302 	orr.w	r3, r3, #2
 8013794:	81a3      	strh	r3, [r4, #12]
 8013796:	e7e3      	b.n	8013760 <__smakebuf_r+0xc>
 8013798:	4b0d      	ldr	r3, [pc, #52]	; (80137d0 <__smakebuf_r+0x7c>)
 801379a:	62b3      	str	r3, [r6, #40]	; 0x28
 801379c:	89a3      	ldrh	r3, [r4, #12]
 801379e:	6020      	str	r0, [r4, #0]
 80137a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137a4:	81a3      	strh	r3, [r4, #12]
 80137a6:	9b00      	ldr	r3, [sp, #0]
 80137a8:	6163      	str	r3, [r4, #20]
 80137aa:	9b01      	ldr	r3, [sp, #4]
 80137ac:	6120      	str	r0, [r4, #16]
 80137ae:	b15b      	cbz	r3, 80137c8 <__smakebuf_r+0x74>
 80137b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137b4:	4630      	mov	r0, r6
 80137b6:	f000 ff75 	bl	80146a4 <_isatty_r>
 80137ba:	b128      	cbz	r0, 80137c8 <__smakebuf_r+0x74>
 80137bc:	89a3      	ldrh	r3, [r4, #12]
 80137be:	f023 0303 	bic.w	r3, r3, #3
 80137c2:	f043 0301 	orr.w	r3, r3, #1
 80137c6:	81a3      	strh	r3, [r4, #12]
 80137c8:	89a0      	ldrh	r0, [r4, #12]
 80137ca:	4305      	orrs	r5, r0
 80137cc:	81a5      	strh	r5, [r4, #12]
 80137ce:	e7cd      	b.n	801376c <__smakebuf_r+0x18>
 80137d0:	08012e7d 	.word	0x08012e7d

080137d4 <__ascii_mbtowc>:
 80137d4:	b082      	sub	sp, #8
 80137d6:	b901      	cbnz	r1, 80137da <__ascii_mbtowc+0x6>
 80137d8:	a901      	add	r1, sp, #4
 80137da:	b142      	cbz	r2, 80137ee <__ascii_mbtowc+0x1a>
 80137dc:	b14b      	cbz	r3, 80137f2 <__ascii_mbtowc+0x1e>
 80137de:	7813      	ldrb	r3, [r2, #0]
 80137e0:	600b      	str	r3, [r1, #0]
 80137e2:	7812      	ldrb	r2, [r2, #0]
 80137e4:	1e10      	subs	r0, r2, #0
 80137e6:	bf18      	it	ne
 80137e8:	2001      	movne	r0, #1
 80137ea:	b002      	add	sp, #8
 80137ec:	4770      	bx	lr
 80137ee:	4610      	mov	r0, r2
 80137f0:	e7fb      	b.n	80137ea <__ascii_mbtowc+0x16>
 80137f2:	f06f 0001 	mvn.w	r0, #1
 80137f6:	e7f8      	b.n	80137ea <__ascii_mbtowc+0x16>

080137f8 <memmove>:
 80137f8:	4288      	cmp	r0, r1
 80137fa:	b510      	push	{r4, lr}
 80137fc:	eb01 0402 	add.w	r4, r1, r2
 8013800:	d902      	bls.n	8013808 <memmove+0x10>
 8013802:	4284      	cmp	r4, r0
 8013804:	4623      	mov	r3, r4
 8013806:	d807      	bhi.n	8013818 <memmove+0x20>
 8013808:	1e43      	subs	r3, r0, #1
 801380a:	42a1      	cmp	r1, r4
 801380c:	d008      	beq.n	8013820 <memmove+0x28>
 801380e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013816:	e7f8      	b.n	801380a <memmove+0x12>
 8013818:	4402      	add	r2, r0
 801381a:	4601      	mov	r1, r0
 801381c:	428a      	cmp	r2, r1
 801381e:	d100      	bne.n	8013822 <memmove+0x2a>
 8013820:	bd10      	pop	{r4, pc}
 8013822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801382a:	e7f7      	b.n	801381c <memmove+0x24>

0801382c <__malloc_lock>:
 801382c:	4801      	ldr	r0, [pc, #4]	; (8013834 <__malloc_lock+0x8>)
 801382e:	f7ff bf6a 	b.w	8013706 <__retarget_lock_acquire_recursive>
 8013832:	bf00      	nop
 8013834:	20013ca8 	.word	0x20013ca8

08013838 <__malloc_unlock>:
 8013838:	4801      	ldr	r0, [pc, #4]	; (8013840 <__malloc_unlock+0x8>)
 801383a:	f7ff bf65 	b.w	8013708 <__retarget_lock_release_recursive>
 801383e:	bf00      	nop
 8013840:	20013ca8 	.word	0x20013ca8

08013844 <_Balloc>:
 8013844:	b570      	push	{r4, r5, r6, lr}
 8013846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013848:	4604      	mov	r4, r0
 801384a:	460d      	mov	r5, r1
 801384c:	b976      	cbnz	r6, 801386c <_Balloc+0x28>
 801384e:	2010      	movs	r0, #16
 8013850:	f7fc fb6a 	bl	800ff28 <malloc>
 8013854:	4602      	mov	r2, r0
 8013856:	6260      	str	r0, [r4, #36]	; 0x24
 8013858:	b920      	cbnz	r0, 8013864 <_Balloc+0x20>
 801385a:	4b18      	ldr	r3, [pc, #96]	; (80138bc <_Balloc+0x78>)
 801385c:	4818      	ldr	r0, [pc, #96]	; (80138c0 <_Balloc+0x7c>)
 801385e:	2166      	movs	r1, #102	; 0x66
 8013860:	f7fc fb08 	bl	800fe74 <__assert_func>
 8013864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013868:	6006      	str	r6, [r0, #0]
 801386a:	60c6      	str	r6, [r0, #12]
 801386c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801386e:	68f3      	ldr	r3, [r6, #12]
 8013870:	b183      	cbz	r3, 8013894 <_Balloc+0x50>
 8013872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013874:	68db      	ldr	r3, [r3, #12]
 8013876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801387a:	b9b8      	cbnz	r0, 80138ac <_Balloc+0x68>
 801387c:	2101      	movs	r1, #1
 801387e:	fa01 f605 	lsl.w	r6, r1, r5
 8013882:	1d72      	adds	r2, r6, #5
 8013884:	0092      	lsls	r2, r2, #2
 8013886:	4620      	mov	r0, r4
 8013888:	f000 fc97 	bl	80141ba <_calloc_r>
 801388c:	b160      	cbz	r0, 80138a8 <_Balloc+0x64>
 801388e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013892:	e00e      	b.n	80138b2 <_Balloc+0x6e>
 8013894:	2221      	movs	r2, #33	; 0x21
 8013896:	2104      	movs	r1, #4
 8013898:	4620      	mov	r0, r4
 801389a:	f000 fc8e 	bl	80141ba <_calloc_r>
 801389e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138a0:	60f0      	str	r0, [r6, #12]
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d1e4      	bne.n	8013872 <_Balloc+0x2e>
 80138a8:	2000      	movs	r0, #0
 80138aa:	bd70      	pop	{r4, r5, r6, pc}
 80138ac:	6802      	ldr	r2, [r0, #0]
 80138ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80138b2:	2300      	movs	r3, #0
 80138b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138b8:	e7f7      	b.n	80138aa <_Balloc+0x66>
 80138ba:	bf00      	nop
 80138bc:	0805f52e 	.word	0x0805f52e
 80138c0:	0805f698 	.word	0x0805f698

080138c4 <_Bfree>:
 80138c4:	b570      	push	{r4, r5, r6, lr}
 80138c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138c8:	4605      	mov	r5, r0
 80138ca:	460c      	mov	r4, r1
 80138cc:	b976      	cbnz	r6, 80138ec <_Bfree+0x28>
 80138ce:	2010      	movs	r0, #16
 80138d0:	f7fc fb2a 	bl	800ff28 <malloc>
 80138d4:	4602      	mov	r2, r0
 80138d6:	6268      	str	r0, [r5, #36]	; 0x24
 80138d8:	b920      	cbnz	r0, 80138e4 <_Bfree+0x20>
 80138da:	4b09      	ldr	r3, [pc, #36]	; (8013900 <_Bfree+0x3c>)
 80138dc:	4809      	ldr	r0, [pc, #36]	; (8013904 <_Bfree+0x40>)
 80138de:	218a      	movs	r1, #138	; 0x8a
 80138e0:	f7fc fac8 	bl	800fe74 <__assert_func>
 80138e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138e8:	6006      	str	r6, [r0, #0]
 80138ea:	60c6      	str	r6, [r0, #12]
 80138ec:	b13c      	cbz	r4, 80138fe <_Bfree+0x3a>
 80138ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80138f0:	6862      	ldr	r2, [r4, #4]
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138f8:	6021      	str	r1, [r4, #0]
 80138fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138fe:	bd70      	pop	{r4, r5, r6, pc}
 8013900:	0805f52e 	.word	0x0805f52e
 8013904:	0805f698 	.word	0x0805f698

08013908 <__multadd>:
 8013908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801390c:	690e      	ldr	r6, [r1, #16]
 801390e:	4607      	mov	r7, r0
 8013910:	4698      	mov	r8, r3
 8013912:	460c      	mov	r4, r1
 8013914:	f101 0014 	add.w	r0, r1, #20
 8013918:	2300      	movs	r3, #0
 801391a:	6805      	ldr	r5, [r0, #0]
 801391c:	b2a9      	uxth	r1, r5
 801391e:	fb02 8101 	mla	r1, r2, r1, r8
 8013922:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013926:	0c2d      	lsrs	r5, r5, #16
 8013928:	fb02 c505 	mla	r5, r2, r5, ip
 801392c:	b289      	uxth	r1, r1
 801392e:	3301      	adds	r3, #1
 8013930:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013934:	429e      	cmp	r6, r3
 8013936:	f840 1b04 	str.w	r1, [r0], #4
 801393a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801393e:	dcec      	bgt.n	801391a <__multadd+0x12>
 8013940:	f1b8 0f00 	cmp.w	r8, #0
 8013944:	d022      	beq.n	801398c <__multadd+0x84>
 8013946:	68a3      	ldr	r3, [r4, #8]
 8013948:	42b3      	cmp	r3, r6
 801394a:	dc19      	bgt.n	8013980 <__multadd+0x78>
 801394c:	6861      	ldr	r1, [r4, #4]
 801394e:	4638      	mov	r0, r7
 8013950:	3101      	adds	r1, #1
 8013952:	f7ff ff77 	bl	8013844 <_Balloc>
 8013956:	4605      	mov	r5, r0
 8013958:	b928      	cbnz	r0, 8013966 <__multadd+0x5e>
 801395a:	4602      	mov	r2, r0
 801395c:	4b0d      	ldr	r3, [pc, #52]	; (8013994 <__multadd+0x8c>)
 801395e:	480e      	ldr	r0, [pc, #56]	; (8013998 <__multadd+0x90>)
 8013960:	21b5      	movs	r1, #181	; 0xb5
 8013962:	f7fc fa87 	bl	800fe74 <__assert_func>
 8013966:	6922      	ldr	r2, [r4, #16]
 8013968:	3202      	adds	r2, #2
 801396a:	f104 010c 	add.w	r1, r4, #12
 801396e:	0092      	lsls	r2, r2, #2
 8013970:	300c      	adds	r0, #12
 8013972:	f7fc fae1 	bl	800ff38 <memcpy>
 8013976:	4621      	mov	r1, r4
 8013978:	4638      	mov	r0, r7
 801397a:	f7ff ffa3 	bl	80138c4 <_Bfree>
 801397e:	462c      	mov	r4, r5
 8013980:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013984:	3601      	adds	r6, #1
 8013986:	f8c3 8014 	str.w	r8, [r3, #20]
 801398a:	6126      	str	r6, [r4, #16]
 801398c:	4620      	mov	r0, r4
 801398e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013992:	bf00      	nop
 8013994:	0805f5a4 	.word	0x0805f5a4
 8013998:	0805f698 	.word	0x0805f698

0801399c <__s2b>:
 801399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139a0:	460c      	mov	r4, r1
 80139a2:	4615      	mov	r5, r2
 80139a4:	461f      	mov	r7, r3
 80139a6:	2209      	movs	r2, #9
 80139a8:	3308      	adds	r3, #8
 80139aa:	4606      	mov	r6, r0
 80139ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80139b0:	2100      	movs	r1, #0
 80139b2:	2201      	movs	r2, #1
 80139b4:	429a      	cmp	r2, r3
 80139b6:	db09      	blt.n	80139cc <__s2b+0x30>
 80139b8:	4630      	mov	r0, r6
 80139ba:	f7ff ff43 	bl	8013844 <_Balloc>
 80139be:	b940      	cbnz	r0, 80139d2 <__s2b+0x36>
 80139c0:	4602      	mov	r2, r0
 80139c2:	4b19      	ldr	r3, [pc, #100]	; (8013a28 <__s2b+0x8c>)
 80139c4:	4819      	ldr	r0, [pc, #100]	; (8013a2c <__s2b+0x90>)
 80139c6:	21ce      	movs	r1, #206	; 0xce
 80139c8:	f7fc fa54 	bl	800fe74 <__assert_func>
 80139cc:	0052      	lsls	r2, r2, #1
 80139ce:	3101      	adds	r1, #1
 80139d0:	e7f0      	b.n	80139b4 <__s2b+0x18>
 80139d2:	9b08      	ldr	r3, [sp, #32]
 80139d4:	6143      	str	r3, [r0, #20]
 80139d6:	2d09      	cmp	r5, #9
 80139d8:	f04f 0301 	mov.w	r3, #1
 80139dc:	6103      	str	r3, [r0, #16]
 80139de:	dd16      	ble.n	8013a0e <__s2b+0x72>
 80139e0:	f104 0909 	add.w	r9, r4, #9
 80139e4:	46c8      	mov	r8, r9
 80139e6:	442c      	add	r4, r5
 80139e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80139ec:	4601      	mov	r1, r0
 80139ee:	3b30      	subs	r3, #48	; 0x30
 80139f0:	220a      	movs	r2, #10
 80139f2:	4630      	mov	r0, r6
 80139f4:	f7ff ff88 	bl	8013908 <__multadd>
 80139f8:	45a0      	cmp	r8, r4
 80139fa:	d1f5      	bne.n	80139e8 <__s2b+0x4c>
 80139fc:	f1a5 0408 	sub.w	r4, r5, #8
 8013a00:	444c      	add	r4, r9
 8013a02:	1b2d      	subs	r5, r5, r4
 8013a04:	1963      	adds	r3, r4, r5
 8013a06:	42bb      	cmp	r3, r7
 8013a08:	db04      	blt.n	8013a14 <__s2b+0x78>
 8013a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a0e:	340a      	adds	r4, #10
 8013a10:	2509      	movs	r5, #9
 8013a12:	e7f6      	b.n	8013a02 <__s2b+0x66>
 8013a14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013a18:	4601      	mov	r1, r0
 8013a1a:	3b30      	subs	r3, #48	; 0x30
 8013a1c:	220a      	movs	r2, #10
 8013a1e:	4630      	mov	r0, r6
 8013a20:	f7ff ff72 	bl	8013908 <__multadd>
 8013a24:	e7ee      	b.n	8013a04 <__s2b+0x68>
 8013a26:	bf00      	nop
 8013a28:	0805f5a4 	.word	0x0805f5a4
 8013a2c:	0805f698 	.word	0x0805f698

08013a30 <__hi0bits>:
 8013a30:	0c03      	lsrs	r3, r0, #16
 8013a32:	041b      	lsls	r3, r3, #16
 8013a34:	b9d3      	cbnz	r3, 8013a6c <__hi0bits+0x3c>
 8013a36:	0400      	lsls	r0, r0, #16
 8013a38:	2310      	movs	r3, #16
 8013a3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a3e:	bf04      	itt	eq
 8013a40:	0200      	lsleq	r0, r0, #8
 8013a42:	3308      	addeq	r3, #8
 8013a44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a48:	bf04      	itt	eq
 8013a4a:	0100      	lsleq	r0, r0, #4
 8013a4c:	3304      	addeq	r3, #4
 8013a4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a52:	bf04      	itt	eq
 8013a54:	0080      	lsleq	r0, r0, #2
 8013a56:	3302      	addeq	r3, #2
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	db05      	blt.n	8013a68 <__hi0bits+0x38>
 8013a5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a60:	f103 0301 	add.w	r3, r3, #1
 8013a64:	bf08      	it	eq
 8013a66:	2320      	moveq	r3, #32
 8013a68:	4618      	mov	r0, r3
 8013a6a:	4770      	bx	lr
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	e7e4      	b.n	8013a3a <__hi0bits+0xa>

08013a70 <__lo0bits>:
 8013a70:	6803      	ldr	r3, [r0, #0]
 8013a72:	f013 0207 	ands.w	r2, r3, #7
 8013a76:	4601      	mov	r1, r0
 8013a78:	d00b      	beq.n	8013a92 <__lo0bits+0x22>
 8013a7a:	07da      	lsls	r2, r3, #31
 8013a7c:	d424      	bmi.n	8013ac8 <__lo0bits+0x58>
 8013a7e:	0798      	lsls	r0, r3, #30
 8013a80:	bf49      	itett	mi
 8013a82:	085b      	lsrmi	r3, r3, #1
 8013a84:	089b      	lsrpl	r3, r3, #2
 8013a86:	2001      	movmi	r0, #1
 8013a88:	600b      	strmi	r3, [r1, #0]
 8013a8a:	bf5c      	itt	pl
 8013a8c:	600b      	strpl	r3, [r1, #0]
 8013a8e:	2002      	movpl	r0, #2
 8013a90:	4770      	bx	lr
 8013a92:	b298      	uxth	r0, r3
 8013a94:	b9b0      	cbnz	r0, 8013ac4 <__lo0bits+0x54>
 8013a96:	0c1b      	lsrs	r3, r3, #16
 8013a98:	2010      	movs	r0, #16
 8013a9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a9e:	bf04      	itt	eq
 8013aa0:	0a1b      	lsreq	r3, r3, #8
 8013aa2:	3008      	addeq	r0, #8
 8013aa4:	071a      	lsls	r2, r3, #28
 8013aa6:	bf04      	itt	eq
 8013aa8:	091b      	lsreq	r3, r3, #4
 8013aaa:	3004      	addeq	r0, #4
 8013aac:	079a      	lsls	r2, r3, #30
 8013aae:	bf04      	itt	eq
 8013ab0:	089b      	lsreq	r3, r3, #2
 8013ab2:	3002      	addeq	r0, #2
 8013ab4:	07da      	lsls	r2, r3, #31
 8013ab6:	d403      	bmi.n	8013ac0 <__lo0bits+0x50>
 8013ab8:	085b      	lsrs	r3, r3, #1
 8013aba:	f100 0001 	add.w	r0, r0, #1
 8013abe:	d005      	beq.n	8013acc <__lo0bits+0x5c>
 8013ac0:	600b      	str	r3, [r1, #0]
 8013ac2:	4770      	bx	lr
 8013ac4:	4610      	mov	r0, r2
 8013ac6:	e7e8      	b.n	8013a9a <__lo0bits+0x2a>
 8013ac8:	2000      	movs	r0, #0
 8013aca:	4770      	bx	lr
 8013acc:	2020      	movs	r0, #32
 8013ace:	4770      	bx	lr

08013ad0 <__i2b>:
 8013ad0:	b510      	push	{r4, lr}
 8013ad2:	460c      	mov	r4, r1
 8013ad4:	2101      	movs	r1, #1
 8013ad6:	f7ff feb5 	bl	8013844 <_Balloc>
 8013ada:	4602      	mov	r2, r0
 8013adc:	b928      	cbnz	r0, 8013aea <__i2b+0x1a>
 8013ade:	4b05      	ldr	r3, [pc, #20]	; (8013af4 <__i2b+0x24>)
 8013ae0:	4805      	ldr	r0, [pc, #20]	; (8013af8 <__i2b+0x28>)
 8013ae2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ae6:	f7fc f9c5 	bl	800fe74 <__assert_func>
 8013aea:	2301      	movs	r3, #1
 8013aec:	6144      	str	r4, [r0, #20]
 8013aee:	6103      	str	r3, [r0, #16]
 8013af0:	bd10      	pop	{r4, pc}
 8013af2:	bf00      	nop
 8013af4:	0805f5a4 	.word	0x0805f5a4
 8013af8:	0805f698 	.word	0x0805f698

08013afc <__multiply>:
 8013afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b00:	4614      	mov	r4, r2
 8013b02:	690a      	ldr	r2, [r1, #16]
 8013b04:	6923      	ldr	r3, [r4, #16]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	bfb8      	it	lt
 8013b0a:	460b      	movlt	r3, r1
 8013b0c:	460d      	mov	r5, r1
 8013b0e:	bfbc      	itt	lt
 8013b10:	4625      	movlt	r5, r4
 8013b12:	461c      	movlt	r4, r3
 8013b14:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013b18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013b1c:	68ab      	ldr	r3, [r5, #8]
 8013b1e:	6869      	ldr	r1, [r5, #4]
 8013b20:	eb0a 0709 	add.w	r7, sl, r9
 8013b24:	42bb      	cmp	r3, r7
 8013b26:	b085      	sub	sp, #20
 8013b28:	bfb8      	it	lt
 8013b2a:	3101      	addlt	r1, #1
 8013b2c:	f7ff fe8a 	bl	8013844 <_Balloc>
 8013b30:	b930      	cbnz	r0, 8013b40 <__multiply+0x44>
 8013b32:	4602      	mov	r2, r0
 8013b34:	4b42      	ldr	r3, [pc, #264]	; (8013c40 <__multiply+0x144>)
 8013b36:	4843      	ldr	r0, [pc, #268]	; (8013c44 <__multiply+0x148>)
 8013b38:	f240 115d 	movw	r1, #349	; 0x15d
 8013b3c:	f7fc f99a 	bl	800fe74 <__assert_func>
 8013b40:	f100 0614 	add.w	r6, r0, #20
 8013b44:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013b48:	4633      	mov	r3, r6
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	4543      	cmp	r3, r8
 8013b4e:	d31e      	bcc.n	8013b8e <__multiply+0x92>
 8013b50:	f105 0c14 	add.w	ip, r5, #20
 8013b54:	f104 0314 	add.w	r3, r4, #20
 8013b58:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013b5c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013b60:	9202      	str	r2, [sp, #8]
 8013b62:	ebac 0205 	sub.w	r2, ip, r5
 8013b66:	3a15      	subs	r2, #21
 8013b68:	f022 0203 	bic.w	r2, r2, #3
 8013b6c:	3204      	adds	r2, #4
 8013b6e:	f105 0115 	add.w	r1, r5, #21
 8013b72:	458c      	cmp	ip, r1
 8013b74:	bf38      	it	cc
 8013b76:	2204      	movcc	r2, #4
 8013b78:	9201      	str	r2, [sp, #4]
 8013b7a:	9a02      	ldr	r2, [sp, #8]
 8013b7c:	9303      	str	r3, [sp, #12]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d808      	bhi.n	8013b94 <__multiply+0x98>
 8013b82:	2f00      	cmp	r7, #0
 8013b84:	dc55      	bgt.n	8013c32 <__multiply+0x136>
 8013b86:	6107      	str	r7, [r0, #16]
 8013b88:	b005      	add	sp, #20
 8013b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b8e:	f843 2b04 	str.w	r2, [r3], #4
 8013b92:	e7db      	b.n	8013b4c <__multiply+0x50>
 8013b94:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b98:	f1ba 0f00 	cmp.w	sl, #0
 8013b9c:	d020      	beq.n	8013be0 <__multiply+0xe4>
 8013b9e:	f105 0e14 	add.w	lr, r5, #20
 8013ba2:	46b1      	mov	r9, r6
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013baa:	f8d9 b000 	ldr.w	fp, [r9]
 8013bae:	b2a1      	uxth	r1, r4
 8013bb0:	fa1f fb8b 	uxth.w	fp, fp
 8013bb4:	fb0a b101 	mla	r1, sl, r1, fp
 8013bb8:	4411      	add	r1, r2
 8013bba:	f8d9 2000 	ldr.w	r2, [r9]
 8013bbe:	0c24      	lsrs	r4, r4, #16
 8013bc0:	0c12      	lsrs	r2, r2, #16
 8013bc2:	fb0a 2404 	mla	r4, sl, r4, r2
 8013bc6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013bca:	b289      	uxth	r1, r1
 8013bcc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013bd0:	45f4      	cmp	ip, lr
 8013bd2:	f849 1b04 	str.w	r1, [r9], #4
 8013bd6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013bda:	d8e4      	bhi.n	8013ba6 <__multiply+0xaa>
 8013bdc:	9901      	ldr	r1, [sp, #4]
 8013bde:	5072      	str	r2, [r6, r1]
 8013be0:	9a03      	ldr	r2, [sp, #12]
 8013be2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013be6:	3304      	adds	r3, #4
 8013be8:	f1b9 0f00 	cmp.w	r9, #0
 8013bec:	d01f      	beq.n	8013c2e <__multiply+0x132>
 8013bee:	6834      	ldr	r4, [r6, #0]
 8013bf0:	f105 0114 	add.w	r1, r5, #20
 8013bf4:	46b6      	mov	lr, r6
 8013bf6:	f04f 0a00 	mov.w	sl, #0
 8013bfa:	880a      	ldrh	r2, [r1, #0]
 8013bfc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013c00:	fb09 b202 	mla	r2, r9, r2, fp
 8013c04:	4492      	add	sl, r2
 8013c06:	b2a4      	uxth	r4, r4
 8013c08:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013c0c:	f84e 4b04 	str.w	r4, [lr], #4
 8013c10:	f851 4b04 	ldr.w	r4, [r1], #4
 8013c14:	f8be 2000 	ldrh.w	r2, [lr]
 8013c18:	0c24      	lsrs	r4, r4, #16
 8013c1a:	fb09 2404 	mla	r4, r9, r4, r2
 8013c1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013c22:	458c      	cmp	ip, r1
 8013c24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013c28:	d8e7      	bhi.n	8013bfa <__multiply+0xfe>
 8013c2a:	9a01      	ldr	r2, [sp, #4]
 8013c2c:	50b4      	str	r4, [r6, r2]
 8013c2e:	3604      	adds	r6, #4
 8013c30:	e7a3      	b.n	8013b7a <__multiply+0x7e>
 8013c32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1a5      	bne.n	8013b86 <__multiply+0x8a>
 8013c3a:	3f01      	subs	r7, #1
 8013c3c:	e7a1      	b.n	8013b82 <__multiply+0x86>
 8013c3e:	bf00      	nop
 8013c40:	0805f5a4 	.word	0x0805f5a4
 8013c44:	0805f698 	.word	0x0805f698

08013c48 <__pow5mult>:
 8013c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c4c:	4615      	mov	r5, r2
 8013c4e:	f012 0203 	ands.w	r2, r2, #3
 8013c52:	4606      	mov	r6, r0
 8013c54:	460f      	mov	r7, r1
 8013c56:	d007      	beq.n	8013c68 <__pow5mult+0x20>
 8013c58:	4c25      	ldr	r4, [pc, #148]	; (8013cf0 <__pow5mult+0xa8>)
 8013c5a:	3a01      	subs	r2, #1
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c62:	f7ff fe51 	bl	8013908 <__multadd>
 8013c66:	4607      	mov	r7, r0
 8013c68:	10ad      	asrs	r5, r5, #2
 8013c6a:	d03d      	beq.n	8013ce8 <__pow5mult+0xa0>
 8013c6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c6e:	b97c      	cbnz	r4, 8013c90 <__pow5mult+0x48>
 8013c70:	2010      	movs	r0, #16
 8013c72:	f7fc f959 	bl	800ff28 <malloc>
 8013c76:	4602      	mov	r2, r0
 8013c78:	6270      	str	r0, [r6, #36]	; 0x24
 8013c7a:	b928      	cbnz	r0, 8013c88 <__pow5mult+0x40>
 8013c7c:	4b1d      	ldr	r3, [pc, #116]	; (8013cf4 <__pow5mult+0xac>)
 8013c7e:	481e      	ldr	r0, [pc, #120]	; (8013cf8 <__pow5mult+0xb0>)
 8013c80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c84:	f7fc f8f6 	bl	800fe74 <__assert_func>
 8013c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c8c:	6004      	str	r4, [r0, #0]
 8013c8e:	60c4      	str	r4, [r0, #12]
 8013c90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c98:	b94c      	cbnz	r4, 8013cae <__pow5mult+0x66>
 8013c9a:	f240 2171 	movw	r1, #625	; 0x271
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f7ff ff16 	bl	8013ad0 <__i2b>
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013caa:	4604      	mov	r4, r0
 8013cac:	6003      	str	r3, [r0, #0]
 8013cae:	f04f 0900 	mov.w	r9, #0
 8013cb2:	07eb      	lsls	r3, r5, #31
 8013cb4:	d50a      	bpl.n	8013ccc <__pow5mult+0x84>
 8013cb6:	4639      	mov	r1, r7
 8013cb8:	4622      	mov	r2, r4
 8013cba:	4630      	mov	r0, r6
 8013cbc:	f7ff ff1e 	bl	8013afc <__multiply>
 8013cc0:	4639      	mov	r1, r7
 8013cc2:	4680      	mov	r8, r0
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f7ff fdfd 	bl	80138c4 <_Bfree>
 8013cca:	4647      	mov	r7, r8
 8013ccc:	106d      	asrs	r5, r5, #1
 8013cce:	d00b      	beq.n	8013ce8 <__pow5mult+0xa0>
 8013cd0:	6820      	ldr	r0, [r4, #0]
 8013cd2:	b938      	cbnz	r0, 8013ce4 <__pow5mult+0x9c>
 8013cd4:	4622      	mov	r2, r4
 8013cd6:	4621      	mov	r1, r4
 8013cd8:	4630      	mov	r0, r6
 8013cda:	f7ff ff0f 	bl	8013afc <__multiply>
 8013cde:	6020      	str	r0, [r4, #0]
 8013ce0:	f8c0 9000 	str.w	r9, [r0]
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	e7e4      	b.n	8013cb2 <__pow5mult+0x6a>
 8013ce8:	4638      	mov	r0, r7
 8013cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cee:	bf00      	nop
 8013cf0:	0805f7e8 	.word	0x0805f7e8
 8013cf4:	0805f52e 	.word	0x0805f52e
 8013cf8:	0805f698 	.word	0x0805f698

08013cfc <__lshift>:
 8013cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d00:	460c      	mov	r4, r1
 8013d02:	6849      	ldr	r1, [r1, #4]
 8013d04:	6923      	ldr	r3, [r4, #16]
 8013d06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d0a:	68a3      	ldr	r3, [r4, #8]
 8013d0c:	4607      	mov	r7, r0
 8013d0e:	4691      	mov	r9, r2
 8013d10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d14:	f108 0601 	add.w	r6, r8, #1
 8013d18:	42b3      	cmp	r3, r6
 8013d1a:	db0b      	blt.n	8013d34 <__lshift+0x38>
 8013d1c:	4638      	mov	r0, r7
 8013d1e:	f7ff fd91 	bl	8013844 <_Balloc>
 8013d22:	4605      	mov	r5, r0
 8013d24:	b948      	cbnz	r0, 8013d3a <__lshift+0x3e>
 8013d26:	4602      	mov	r2, r0
 8013d28:	4b28      	ldr	r3, [pc, #160]	; (8013dcc <__lshift+0xd0>)
 8013d2a:	4829      	ldr	r0, [pc, #164]	; (8013dd0 <__lshift+0xd4>)
 8013d2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d30:	f7fc f8a0 	bl	800fe74 <__assert_func>
 8013d34:	3101      	adds	r1, #1
 8013d36:	005b      	lsls	r3, r3, #1
 8013d38:	e7ee      	b.n	8013d18 <__lshift+0x1c>
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	f100 0114 	add.w	r1, r0, #20
 8013d40:	f100 0210 	add.w	r2, r0, #16
 8013d44:	4618      	mov	r0, r3
 8013d46:	4553      	cmp	r3, sl
 8013d48:	db33      	blt.n	8013db2 <__lshift+0xb6>
 8013d4a:	6920      	ldr	r0, [r4, #16]
 8013d4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d50:	f104 0314 	add.w	r3, r4, #20
 8013d54:	f019 091f 	ands.w	r9, r9, #31
 8013d58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d60:	d02b      	beq.n	8013dba <__lshift+0xbe>
 8013d62:	f1c9 0e20 	rsb	lr, r9, #32
 8013d66:	468a      	mov	sl, r1
 8013d68:	2200      	movs	r2, #0
 8013d6a:	6818      	ldr	r0, [r3, #0]
 8013d6c:	fa00 f009 	lsl.w	r0, r0, r9
 8013d70:	4302      	orrs	r2, r0
 8013d72:	f84a 2b04 	str.w	r2, [sl], #4
 8013d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d7a:	459c      	cmp	ip, r3
 8013d7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d80:	d8f3      	bhi.n	8013d6a <__lshift+0x6e>
 8013d82:	ebac 0304 	sub.w	r3, ip, r4
 8013d86:	3b15      	subs	r3, #21
 8013d88:	f023 0303 	bic.w	r3, r3, #3
 8013d8c:	3304      	adds	r3, #4
 8013d8e:	f104 0015 	add.w	r0, r4, #21
 8013d92:	4584      	cmp	ip, r0
 8013d94:	bf38      	it	cc
 8013d96:	2304      	movcc	r3, #4
 8013d98:	50ca      	str	r2, [r1, r3]
 8013d9a:	b10a      	cbz	r2, 8013da0 <__lshift+0xa4>
 8013d9c:	f108 0602 	add.w	r6, r8, #2
 8013da0:	3e01      	subs	r6, #1
 8013da2:	4638      	mov	r0, r7
 8013da4:	612e      	str	r6, [r5, #16]
 8013da6:	4621      	mov	r1, r4
 8013da8:	f7ff fd8c 	bl	80138c4 <_Bfree>
 8013dac:	4628      	mov	r0, r5
 8013dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013db2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013db6:	3301      	adds	r3, #1
 8013db8:	e7c5      	b.n	8013d46 <__lshift+0x4a>
 8013dba:	3904      	subs	r1, #4
 8013dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dc4:	459c      	cmp	ip, r3
 8013dc6:	d8f9      	bhi.n	8013dbc <__lshift+0xc0>
 8013dc8:	e7ea      	b.n	8013da0 <__lshift+0xa4>
 8013dca:	bf00      	nop
 8013dcc:	0805f5a4 	.word	0x0805f5a4
 8013dd0:	0805f698 	.word	0x0805f698

08013dd4 <__mcmp>:
 8013dd4:	b530      	push	{r4, r5, lr}
 8013dd6:	6902      	ldr	r2, [r0, #16]
 8013dd8:	690c      	ldr	r4, [r1, #16]
 8013dda:	1b12      	subs	r2, r2, r4
 8013ddc:	d10e      	bne.n	8013dfc <__mcmp+0x28>
 8013dde:	f100 0314 	add.w	r3, r0, #20
 8013de2:	3114      	adds	r1, #20
 8013de4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013de8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013dec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013df0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013df4:	42a5      	cmp	r5, r4
 8013df6:	d003      	beq.n	8013e00 <__mcmp+0x2c>
 8013df8:	d305      	bcc.n	8013e06 <__mcmp+0x32>
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	4610      	mov	r0, r2
 8013dfe:	bd30      	pop	{r4, r5, pc}
 8013e00:	4283      	cmp	r3, r0
 8013e02:	d3f3      	bcc.n	8013dec <__mcmp+0x18>
 8013e04:	e7fa      	b.n	8013dfc <__mcmp+0x28>
 8013e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e0a:	e7f7      	b.n	8013dfc <__mcmp+0x28>

08013e0c <__mdiff>:
 8013e0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e10:	460c      	mov	r4, r1
 8013e12:	4606      	mov	r6, r0
 8013e14:	4611      	mov	r1, r2
 8013e16:	4620      	mov	r0, r4
 8013e18:	4617      	mov	r7, r2
 8013e1a:	f7ff ffdb 	bl	8013dd4 <__mcmp>
 8013e1e:	1e05      	subs	r5, r0, #0
 8013e20:	d110      	bne.n	8013e44 <__mdiff+0x38>
 8013e22:	4629      	mov	r1, r5
 8013e24:	4630      	mov	r0, r6
 8013e26:	f7ff fd0d 	bl	8013844 <_Balloc>
 8013e2a:	b930      	cbnz	r0, 8013e3a <__mdiff+0x2e>
 8013e2c:	4b39      	ldr	r3, [pc, #228]	; (8013f14 <__mdiff+0x108>)
 8013e2e:	4602      	mov	r2, r0
 8013e30:	f240 2132 	movw	r1, #562	; 0x232
 8013e34:	4838      	ldr	r0, [pc, #224]	; (8013f18 <__mdiff+0x10c>)
 8013e36:	f7fc f81d 	bl	800fe74 <__assert_func>
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e44:	bfa4      	itt	ge
 8013e46:	463b      	movge	r3, r7
 8013e48:	4627      	movge	r7, r4
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	6879      	ldr	r1, [r7, #4]
 8013e4e:	bfa6      	itte	ge
 8013e50:	461c      	movge	r4, r3
 8013e52:	2500      	movge	r5, #0
 8013e54:	2501      	movlt	r5, #1
 8013e56:	f7ff fcf5 	bl	8013844 <_Balloc>
 8013e5a:	b920      	cbnz	r0, 8013e66 <__mdiff+0x5a>
 8013e5c:	4b2d      	ldr	r3, [pc, #180]	; (8013f14 <__mdiff+0x108>)
 8013e5e:	4602      	mov	r2, r0
 8013e60:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e64:	e7e6      	b.n	8013e34 <__mdiff+0x28>
 8013e66:	693e      	ldr	r6, [r7, #16]
 8013e68:	60c5      	str	r5, [r0, #12]
 8013e6a:	6925      	ldr	r5, [r4, #16]
 8013e6c:	f107 0114 	add.w	r1, r7, #20
 8013e70:	f104 0914 	add.w	r9, r4, #20
 8013e74:	f100 0e14 	add.w	lr, r0, #20
 8013e78:	f107 0210 	add.w	r2, r7, #16
 8013e7c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013e80:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013e84:	46f2      	mov	sl, lr
 8013e86:	2700      	movs	r7, #0
 8013e88:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e90:	fa1f f883 	uxth.w	r8, r3
 8013e94:	fa17 f78b 	uxtah	r7, r7, fp
 8013e98:	0c1b      	lsrs	r3, r3, #16
 8013e9a:	eba7 0808 	sub.w	r8, r7, r8
 8013e9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013ea2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013ea6:	fa1f f888 	uxth.w	r8, r8
 8013eaa:	141f      	asrs	r7, r3, #16
 8013eac:	454d      	cmp	r5, r9
 8013eae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013eb2:	f84a 3b04 	str.w	r3, [sl], #4
 8013eb6:	d8e7      	bhi.n	8013e88 <__mdiff+0x7c>
 8013eb8:	1b2b      	subs	r3, r5, r4
 8013eba:	3b15      	subs	r3, #21
 8013ebc:	f023 0303 	bic.w	r3, r3, #3
 8013ec0:	3304      	adds	r3, #4
 8013ec2:	3415      	adds	r4, #21
 8013ec4:	42a5      	cmp	r5, r4
 8013ec6:	bf38      	it	cc
 8013ec8:	2304      	movcc	r3, #4
 8013eca:	4419      	add	r1, r3
 8013ecc:	4473      	add	r3, lr
 8013ece:	469e      	mov	lr, r3
 8013ed0:	460d      	mov	r5, r1
 8013ed2:	4565      	cmp	r5, ip
 8013ed4:	d30e      	bcc.n	8013ef4 <__mdiff+0xe8>
 8013ed6:	f10c 0203 	add.w	r2, ip, #3
 8013eda:	1a52      	subs	r2, r2, r1
 8013edc:	f022 0203 	bic.w	r2, r2, #3
 8013ee0:	3903      	subs	r1, #3
 8013ee2:	458c      	cmp	ip, r1
 8013ee4:	bf38      	it	cc
 8013ee6:	2200      	movcc	r2, #0
 8013ee8:	441a      	add	r2, r3
 8013eea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013eee:	b17b      	cbz	r3, 8013f10 <__mdiff+0x104>
 8013ef0:	6106      	str	r6, [r0, #16]
 8013ef2:	e7a5      	b.n	8013e40 <__mdiff+0x34>
 8013ef4:	f855 8b04 	ldr.w	r8, [r5], #4
 8013ef8:	fa17 f488 	uxtah	r4, r7, r8
 8013efc:	1422      	asrs	r2, r4, #16
 8013efe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013f02:	b2a4      	uxth	r4, r4
 8013f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013f08:	f84e 4b04 	str.w	r4, [lr], #4
 8013f0c:	1417      	asrs	r7, r2, #16
 8013f0e:	e7e0      	b.n	8013ed2 <__mdiff+0xc6>
 8013f10:	3e01      	subs	r6, #1
 8013f12:	e7ea      	b.n	8013eea <__mdiff+0xde>
 8013f14:	0805f5a4 	.word	0x0805f5a4
 8013f18:	0805f698 	.word	0x0805f698

08013f1c <__ulp>:
 8013f1c:	b082      	sub	sp, #8
 8013f1e:	ed8d 0b00 	vstr	d0, [sp]
 8013f22:	9b01      	ldr	r3, [sp, #4]
 8013f24:	4912      	ldr	r1, [pc, #72]	; (8013f70 <__ulp+0x54>)
 8013f26:	4019      	ands	r1, r3
 8013f28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013f2c:	2900      	cmp	r1, #0
 8013f2e:	dd05      	ble.n	8013f3c <__ulp+0x20>
 8013f30:	2200      	movs	r2, #0
 8013f32:	460b      	mov	r3, r1
 8013f34:	ec43 2b10 	vmov	d0, r2, r3
 8013f38:	b002      	add	sp, #8
 8013f3a:	4770      	bx	lr
 8013f3c:	4249      	negs	r1, r1
 8013f3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013f42:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013f46:	f04f 0200 	mov.w	r2, #0
 8013f4a:	f04f 0300 	mov.w	r3, #0
 8013f4e:	da04      	bge.n	8013f5a <__ulp+0x3e>
 8013f50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013f54:	fa41 f300 	asr.w	r3, r1, r0
 8013f58:	e7ec      	b.n	8013f34 <__ulp+0x18>
 8013f5a:	f1a0 0114 	sub.w	r1, r0, #20
 8013f5e:	291e      	cmp	r1, #30
 8013f60:	bfda      	itte	le
 8013f62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013f66:	fa20 f101 	lsrle.w	r1, r0, r1
 8013f6a:	2101      	movgt	r1, #1
 8013f6c:	460a      	mov	r2, r1
 8013f6e:	e7e1      	b.n	8013f34 <__ulp+0x18>
 8013f70:	7ff00000 	.word	0x7ff00000

08013f74 <__b2d>:
 8013f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f76:	6905      	ldr	r5, [r0, #16]
 8013f78:	f100 0714 	add.w	r7, r0, #20
 8013f7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013f80:	1f2e      	subs	r6, r5, #4
 8013f82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013f86:	4620      	mov	r0, r4
 8013f88:	f7ff fd52 	bl	8013a30 <__hi0bits>
 8013f8c:	f1c0 0320 	rsb	r3, r0, #32
 8013f90:	280a      	cmp	r0, #10
 8013f92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014010 <__b2d+0x9c>
 8013f96:	600b      	str	r3, [r1, #0]
 8013f98:	dc14      	bgt.n	8013fc4 <__b2d+0x50>
 8013f9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8013f9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013fa2:	42b7      	cmp	r7, r6
 8013fa4:	ea41 030c 	orr.w	r3, r1, ip
 8013fa8:	bf34      	ite	cc
 8013faa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013fae:	2100      	movcs	r1, #0
 8013fb0:	3015      	adds	r0, #21
 8013fb2:	fa04 f000 	lsl.w	r0, r4, r0
 8013fb6:	fa21 f10e 	lsr.w	r1, r1, lr
 8013fba:	ea40 0201 	orr.w	r2, r0, r1
 8013fbe:	ec43 2b10 	vmov	d0, r2, r3
 8013fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fc4:	42b7      	cmp	r7, r6
 8013fc6:	bf3a      	itte	cc
 8013fc8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013fcc:	f1a5 0608 	subcc.w	r6, r5, #8
 8013fd0:	2100      	movcs	r1, #0
 8013fd2:	380b      	subs	r0, #11
 8013fd4:	d017      	beq.n	8014006 <__b2d+0x92>
 8013fd6:	f1c0 0c20 	rsb	ip, r0, #32
 8013fda:	fa04 f500 	lsl.w	r5, r4, r0
 8013fde:	42be      	cmp	r6, r7
 8013fe0:	fa21 f40c 	lsr.w	r4, r1, ip
 8013fe4:	ea45 0504 	orr.w	r5, r5, r4
 8013fe8:	bf8c      	ite	hi
 8013fea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013fee:	2400      	movls	r4, #0
 8013ff0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013ff4:	fa01 f000 	lsl.w	r0, r1, r0
 8013ff8:	fa24 f40c 	lsr.w	r4, r4, ip
 8013ffc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014000:	ea40 0204 	orr.w	r2, r0, r4
 8014004:	e7db      	b.n	8013fbe <__b2d+0x4a>
 8014006:	ea44 030c 	orr.w	r3, r4, ip
 801400a:	460a      	mov	r2, r1
 801400c:	e7d7      	b.n	8013fbe <__b2d+0x4a>
 801400e:	bf00      	nop
 8014010:	3ff00000 	.word	0x3ff00000

08014014 <__d2b>:
 8014014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014018:	4689      	mov	r9, r1
 801401a:	2101      	movs	r1, #1
 801401c:	ec57 6b10 	vmov	r6, r7, d0
 8014020:	4690      	mov	r8, r2
 8014022:	f7ff fc0f 	bl	8013844 <_Balloc>
 8014026:	4604      	mov	r4, r0
 8014028:	b930      	cbnz	r0, 8014038 <__d2b+0x24>
 801402a:	4602      	mov	r2, r0
 801402c:	4b25      	ldr	r3, [pc, #148]	; (80140c4 <__d2b+0xb0>)
 801402e:	4826      	ldr	r0, [pc, #152]	; (80140c8 <__d2b+0xb4>)
 8014030:	f240 310a 	movw	r1, #778	; 0x30a
 8014034:	f7fb ff1e 	bl	800fe74 <__assert_func>
 8014038:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801403c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014040:	bb35      	cbnz	r5, 8014090 <__d2b+0x7c>
 8014042:	2e00      	cmp	r6, #0
 8014044:	9301      	str	r3, [sp, #4]
 8014046:	d028      	beq.n	801409a <__d2b+0x86>
 8014048:	4668      	mov	r0, sp
 801404a:	9600      	str	r6, [sp, #0]
 801404c:	f7ff fd10 	bl	8013a70 <__lo0bits>
 8014050:	9900      	ldr	r1, [sp, #0]
 8014052:	b300      	cbz	r0, 8014096 <__d2b+0x82>
 8014054:	9a01      	ldr	r2, [sp, #4]
 8014056:	f1c0 0320 	rsb	r3, r0, #32
 801405a:	fa02 f303 	lsl.w	r3, r2, r3
 801405e:	430b      	orrs	r3, r1
 8014060:	40c2      	lsrs	r2, r0
 8014062:	6163      	str	r3, [r4, #20]
 8014064:	9201      	str	r2, [sp, #4]
 8014066:	9b01      	ldr	r3, [sp, #4]
 8014068:	61a3      	str	r3, [r4, #24]
 801406a:	2b00      	cmp	r3, #0
 801406c:	bf14      	ite	ne
 801406e:	2202      	movne	r2, #2
 8014070:	2201      	moveq	r2, #1
 8014072:	6122      	str	r2, [r4, #16]
 8014074:	b1d5      	cbz	r5, 80140ac <__d2b+0x98>
 8014076:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801407a:	4405      	add	r5, r0
 801407c:	f8c9 5000 	str.w	r5, [r9]
 8014080:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014084:	f8c8 0000 	str.w	r0, [r8]
 8014088:	4620      	mov	r0, r4
 801408a:	b003      	add	sp, #12
 801408c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014094:	e7d5      	b.n	8014042 <__d2b+0x2e>
 8014096:	6161      	str	r1, [r4, #20]
 8014098:	e7e5      	b.n	8014066 <__d2b+0x52>
 801409a:	a801      	add	r0, sp, #4
 801409c:	f7ff fce8 	bl	8013a70 <__lo0bits>
 80140a0:	9b01      	ldr	r3, [sp, #4]
 80140a2:	6163      	str	r3, [r4, #20]
 80140a4:	2201      	movs	r2, #1
 80140a6:	6122      	str	r2, [r4, #16]
 80140a8:	3020      	adds	r0, #32
 80140aa:	e7e3      	b.n	8014074 <__d2b+0x60>
 80140ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80140b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80140b4:	f8c9 0000 	str.w	r0, [r9]
 80140b8:	6918      	ldr	r0, [r3, #16]
 80140ba:	f7ff fcb9 	bl	8013a30 <__hi0bits>
 80140be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140c2:	e7df      	b.n	8014084 <__d2b+0x70>
 80140c4:	0805f5a4 	.word	0x0805f5a4
 80140c8:	0805f698 	.word	0x0805f698

080140cc <__ratio>:
 80140cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d0:	4688      	mov	r8, r1
 80140d2:	4669      	mov	r1, sp
 80140d4:	4681      	mov	r9, r0
 80140d6:	f7ff ff4d 	bl	8013f74 <__b2d>
 80140da:	a901      	add	r1, sp, #4
 80140dc:	4640      	mov	r0, r8
 80140de:	ec55 4b10 	vmov	r4, r5, d0
 80140e2:	f7ff ff47 	bl	8013f74 <__b2d>
 80140e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80140ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80140ee:	eba3 0c02 	sub.w	ip, r3, r2
 80140f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140f6:	1a9b      	subs	r3, r3, r2
 80140f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80140fc:	ec51 0b10 	vmov	r0, r1, d0
 8014100:	2b00      	cmp	r3, #0
 8014102:	bfd6      	itet	le
 8014104:	460a      	movle	r2, r1
 8014106:	462a      	movgt	r2, r5
 8014108:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801410c:	468b      	mov	fp, r1
 801410e:	462f      	mov	r7, r5
 8014110:	bfd4      	ite	le
 8014112:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014116:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801411a:	4620      	mov	r0, r4
 801411c:	ee10 2a10 	vmov	r2, s0
 8014120:	465b      	mov	r3, fp
 8014122:	4639      	mov	r1, r7
 8014124:	f7ec fba2 	bl	800086c <__aeabi_ddiv>
 8014128:	ec41 0b10 	vmov	d0, r0, r1
 801412c:	b003      	add	sp, #12
 801412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014132 <__copybits>:
 8014132:	3901      	subs	r1, #1
 8014134:	b570      	push	{r4, r5, r6, lr}
 8014136:	1149      	asrs	r1, r1, #5
 8014138:	6914      	ldr	r4, [r2, #16]
 801413a:	3101      	adds	r1, #1
 801413c:	f102 0314 	add.w	r3, r2, #20
 8014140:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014144:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014148:	1f05      	subs	r5, r0, #4
 801414a:	42a3      	cmp	r3, r4
 801414c:	d30c      	bcc.n	8014168 <__copybits+0x36>
 801414e:	1aa3      	subs	r3, r4, r2
 8014150:	3b11      	subs	r3, #17
 8014152:	f023 0303 	bic.w	r3, r3, #3
 8014156:	3211      	adds	r2, #17
 8014158:	42a2      	cmp	r2, r4
 801415a:	bf88      	it	hi
 801415c:	2300      	movhi	r3, #0
 801415e:	4418      	add	r0, r3
 8014160:	2300      	movs	r3, #0
 8014162:	4288      	cmp	r0, r1
 8014164:	d305      	bcc.n	8014172 <__copybits+0x40>
 8014166:	bd70      	pop	{r4, r5, r6, pc}
 8014168:	f853 6b04 	ldr.w	r6, [r3], #4
 801416c:	f845 6f04 	str.w	r6, [r5, #4]!
 8014170:	e7eb      	b.n	801414a <__copybits+0x18>
 8014172:	f840 3b04 	str.w	r3, [r0], #4
 8014176:	e7f4      	b.n	8014162 <__copybits+0x30>

08014178 <__any_on>:
 8014178:	f100 0214 	add.w	r2, r0, #20
 801417c:	6900      	ldr	r0, [r0, #16]
 801417e:	114b      	asrs	r3, r1, #5
 8014180:	4298      	cmp	r0, r3
 8014182:	b510      	push	{r4, lr}
 8014184:	db11      	blt.n	80141aa <__any_on+0x32>
 8014186:	dd0a      	ble.n	801419e <__any_on+0x26>
 8014188:	f011 011f 	ands.w	r1, r1, #31
 801418c:	d007      	beq.n	801419e <__any_on+0x26>
 801418e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014192:	fa24 f001 	lsr.w	r0, r4, r1
 8014196:	fa00 f101 	lsl.w	r1, r0, r1
 801419a:	428c      	cmp	r4, r1
 801419c:	d10b      	bne.n	80141b6 <__any_on+0x3e>
 801419e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80141a2:	4293      	cmp	r3, r2
 80141a4:	d803      	bhi.n	80141ae <__any_on+0x36>
 80141a6:	2000      	movs	r0, #0
 80141a8:	bd10      	pop	{r4, pc}
 80141aa:	4603      	mov	r3, r0
 80141ac:	e7f7      	b.n	801419e <__any_on+0x26>
 80141ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80141b2:	2900      	cmp	r1, #0
 80141b4:	d0f5      	beq.n	80141a2 <__any_on+0x2a>
 80141b6:	2001      	movs	r0, #1
 80141b8:	e7f6      	b.n	80141a8 <__any_on+0x30>

080141ba <_calloc_r>:
 80141ba:	b513      	push	{r0, r1, r4, lr}
 80141bc:	434a      	muls	r2, r1
 80141be:	4611      	mov	r1, r2
 80141c0:	9201      	str	r2, [sp, #4]
 80141c2:	f7fb ff1f 	bl	8010004 <_malloc_r>
 80141c6:	4604      	mov	r4, r0
 80141c8:	b118      	cbz	r0, 80141d2 <_calloc_r+0x18>
 80141ca:	9a01      	ldr	r2, [sp, #4]
 80141cc:	2100      	movs	r1, #0
 80141ce:	f7fb fec1 	bl	800ff54 <memset>
 80141d2:	4620      	mov	r0, r4
 80141d4:	b002      	add	sp, #8
 80141d6:	bd10      	pop	{r4, pc}

080141d8 <_realloc_r>:
 80141d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141da:	4607      	mov	r7, r0
 80141dc:	4614      	mov	r4, r2
 80141de:	460e      	mov	r6, r1
 80141e0:	b921      	cbnz	r1, 80141ec <_realloc_r+0x14>
 80141e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80141e6:	4611      	mov	r1, r2
 80141e8:	f7fb bf0c 	b.w	8010004 <_malloc_r>
 80141ec:	b922      	cbnz	r2, 80141f8 <_realloc_r+0x20>
 80141ee:	f7fb feb9 	bl	800ff64 <_free_r>
 80141f2:	4625      	mov	r5, r4
 80141f4:	4628      	mov	r0, r5
 80141f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141f8:	f000 fa76 	bl	80146e8 <_malloc_usable_size_r>
 80141fc:	42a0      	cmp	r0, r4
 80141fe:	d20f      	bcs.n	8014220 <_realloc_r+0x48>
 8014200:	4621      	mov	r1, r4
 8014202:	4638      	mov	r0, r7
 8014204:	f7fb fefe 	bl	8010004 <_malloc_r>
 8014208:	4605      	mov	r5, r0
 801420a:	2800      	cmp	r0, #0
 801420c:	d0f2      	beq.n	80141f4 <_realloc_r+0x1c>
 801420e:	4631      	mov	r1, r6
 8014210:	4622      	mov	r2, r4
 8014212:	f7fb fe91 	bl	800ff38 <memcpy>
 8014216:	4631      	mov	r1, r6
 8014218:	4638      	mov	r0, r7
 801421a:	f7fb fea3 	bl	800ff64 <_free_r>
 801421e:	e7e9      	b.n	80141f4 <_realloc_r+0x1c>
 8014220:	4635      	mov	r5, r6
 8014222:	e7e7      	b.n	80141f4 <_realloc_r+0x1c>

08014224 <__ssputs_r>:
 8014224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014228:	688e      	ldr	r6, [r1, #8]
 801422a:	429e      	cmp	r6, r3
 801422c:	4682      	mov	sl, r0
 801422e:	460c      	mov	r4, r1
 8014230:	4690      	mov	r8, r2
 8014232:	461f      	mov	r7, r3
 8014234:	d838      	bhi.n	80142a8 <__ssputs_r+0x84>
 8014236:	898a      	ldrh	r2, [r1, #12]
 8014238:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801423c:	d032      	beq.n	80142a4 <__ssputs_r+0x80>
 801423e:	6825      	ldr	r5, [r4, #0]
 8014240:	6909      	ldr	r1, [r1, #16]
 8014242:	eba5 0901 	sub.w	r9, r5, r1
 8014246:	6965      	ldr	r5, [r4, #20]
 8014248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801424c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014250:	3301      	adds	r3, #1
 8014252:	444b      	add	r3, r9
 8014254:	106d      	asrs	r5, r5, #1
 8014256:	429d      	cmp	r5, r3
 8014258:	bf38      	it	cc
 801425a:	461d      	movcc	r5, r3
 801425c:	0553      	lsls	r3, r2, #21
 801425e:	d531      	bpl.n	80142c4 <__ssputs_r+0xa0>
 8014260:	4629      	mov	r1, r5
 8014262:	f7fb fecf 	bl	8010004 <_malloc_r>
 8014266:	4606      	mov	r6, r0
 8014268:	b950      	cbnz	r0, 8014280 <__ssputs_r+0x5c>
 801426a:	230c      	movs	r3, #12
 801426c:	f8ca 3000 	str.w	r3, [sl]
 8014270:	89a3      	ldrh	r3, [r4, #12]
 8014272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014276:	81a3      	strh	r3, [r4, #12]
 8014278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014280:	6921      	ldr	r1, [r4, #16]
 8014282:	464a      	mov	r2, r9
 8014284:	f7fb fe58 	bl	800ff38 <memcpy>
 8014288:	89a3      	ldrh	r3, [r4, #12]
 801428a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801428e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014292:	81a3      	strh	r3, [r4, #12]
 8014294:	6126      	str	r6, [r4, #16]
 8014296:	6165      	str	r5, [r4, #20]
 8014298:	444e      	add	r6, r9
 801429a:	eba5 0509 	sub.w	r5, r5, r9
 801429e:	6026      	str	r6, [r4, #0]
 80142a0:	60a5      	str	r5, [r4, #8]
 80142a2:	463e      	mov	r6, r7
 80142a4:	42be      	cmp	r6, r7
 80142a6:	d900      	bls.n	80142aa <__ssputs_r+0x86>
 80142a8:	463e      	mov	r6, r7
 80142aa:	4632      	mov	r2, r6
 80142ac:	6820      	ldr	r0, [r4, #0]
 80142ae:	4641      	mov	r1, r8
 80142b0:	f7ff faa2 	bl	80137f8 <memmove>
 80142b4:	68a3      	ldr	r3, [r4, #8]
 80142b6:	6822      	ldr	r2, [r4, #0]
 80142b8:	1b9b      	subs	r3, r3, r6
 80142ba:	4432      	add	r2, r6
 80142bc:	60a3      	str	r3, [r4, #8]
 80142be:	6022      	str	r2, [r4, #0]
 80142c0:	2000      	movs	r0, #0
 80142c2:	e7db      	b.n	801427c <__ssputs_r+0x58>
 80142c4:	462a      	mov	r2, r5
 80142c6:	f7ff ff87 	bl	80141d8 <_realloc_r>
 80142ca:	4606      	mov	r6, r0
 80142cc:	2800      	cmp	r0, #0
 80142ce:	d1e1      	bne.n	8014294 <__ssputs_r+0x70>
 80142d0:	6921      	ldr	r1, [r4, #16]
 80142d2:	4650      	mov	r0, sl
 80142d4:	f7fb fe46 	bl	800ff64 <_free_r>
 80142d8:	e7c7      	b.n	801426a <__ssputs_r+0x46>
	...

080142dc <_svfiprintf_r>:
 80142dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e0:	4698      	mov	r8, r3
 80142e2:	898b      	ldrh	r3, [r1, #12]
 80142e4:	061b      	lsls	r3, r3, #24
 80142e6:	b09d      	sub	sp, #116	; 0x74
 80142e8:	4607      	mov	r7, r0
 80142ea:	460d      	mov	r5, r1
 80142ec:	4614      	mov	r4, r2
 80142ee:	d50e      	bpl.n	801430e <_svfiprintf_r+0x32>
 80142f0:	690b      	ldr	r3, [r1, #16]
 80142f2:	b963      	cbnz	r3, 801430e <_svfiprintf_r+0x32>
 80142f4:	2140      	movs	r1, #64	; 0x40
 80142f6:	f7fb fe85 	bl	8010004 <_malloc_r>
 80142fa:	6028      	str	r0, [r5, #0]
 80142fc:	6128      	str	r0, [r5, #16]
 80142fe:	b920      	cbnz	r0, 801430a <_svfiprintf_r+0x2e>
 8014300:	230c      	movs	r3, #12
 8014302:	603b      	str	r3, [r7, #0]
 8014304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014308:	e0d1      	b.n	80144ae <_svfiprintf_r+0x1d2>
 801430a:	2340      	movs	r3, #64	; 0x40
 801430c:	616b      	str	r3, [r5, #20]
 801430e:	2300      	movs	r3, #0
 8014310:	9309      	str	r3, [sp, #36]	; 0x24
 8014312:	2320      	movs	r3, #32
 8014314:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014318:	f8cd 800c 	str.w	r8, [sp, #12]
 801431c:	2330      	movs	r3, #48	; 0x30
 801431e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80144c8 <_svfiprintf_r+0x1ec>
 8014322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014326:	f04f 0901 	mov.w	r9, #1
 801432a:	4623      	mov	r3, r4
 801432c:	469a      	mov	sl, r3
 801432e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014332:	b10a      	cbz	r2, 8014338 <_svfiprintf_r+0x5c>
 8014334:	2a25      	cmp	r2, #37	; 0x25
 8014336:	d1f9      	bne.n	801432c <_svfiprintf_r+0x50>
 8014338:	ebba 0b04 	subs.w	fp, sl, r4
 801433c:	d00b      	beq.n	8014356 <_svfiprintf_r+0x7a>
 801433e:	465b      	mov	r3, fp
 8014340:	4622      	mov	r2, r4
 8014342:	4629      	mov	r1, r5
 8014344:	4638      	mov	r0, r7
 8014346:	f7ff ff6d 	bl	8014224 <__ssputs_r>
 801434a:	3001      	adds	r0, #1
 801434c:	f000 80aa 	beq.w	80144a4 <_svfiprintf_r+0x1c8>
 8014350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014352:	445a      	add	r2, fp
 8014354:	9209      	str	r2, [sp, #36]	; 0x24
 8014356:	f89a 3000 	ldrb.w	r3, [sl]
 801435a:	2b00      	cmp	r3, #0
 801435c:	f000 80a2 	beq.w	80144a4 <_svfiprintf_r+0x1c8>
 8014360:	2300      	movs	r3, #0
 8014362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801436a:	f10a 0a01 	add.w	sl, sl, #1
 801436e:	9304      	str	r3, [sp, #16]
 8014370:	9307      	str	r3, [sp, #28]
 8014372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014376:	931a      	str	r3, [sp, #104]	; 0x68
 8014378:	4654      	mov	r4, sl
 801437a:	2205      	movs	r2, #5
 801437c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014380:	4851      	ldr	r0, [pc, #324]	; (80144c8 <_svfiprintf_r+0x1ec>)
 8014382:	f7eb ff3d 	bl	8000200 <memchr>
 8014386:	9a04      	ldr	r2, [sp, #16]
 8014388:	b9d8      	cbnz	r0, 80143c2 <_svfiprintf_r+0xe6>
 801438a:	06d0      	lsls	r0, r2, #27
 801438c:	bf44      	itt	mi
 801438e:	2320      	movmi	r3, #32
 8014390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014394:	0711      	lsls	r1, r2, #28
 8014396:	bf44      	itt	mi
 8014398:	232b      	movmi	r3, #43	; 0x2b
 801439a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801439e:	f89a 3000 	ldrb.w	r3, [sl]
 80143a2:	2b2a      	cmp	r3, #42	; 0x2a
 80143a4:	d015      	beq.n	80143d2 <_svfiprintf_r+0xf6>
 80143a6:	9a07      	ldr	r2, [sp, #28]
 80143a8:	4654      	mov	r4, sl
 80143aa:	2000      	movs	r0, #0
 80143ac:	f04f 0c0a 	mov.w	ip, #10
 80143b0:	4621      	mov	r1, r4
 80143b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143b6:	3b30      	subs	r3, #48	; 0x30
 80143b8:	2b09      	cmp	r3, #9
 80143ba:	d94e      	bls.n	801445a <_svfiprintf_r+0x17e>
 80143bc:	b1b0      	cbz	r0, 80143ec <_svfiprintf_r+0x110>
 80143be:	9207      	str	r2, [sp, #28]
 80143c0:	e014      	b.n	80143ec <_svfiprintf_r+0x110>
 80143c2:	eba0 0308 	sub.w	r3, r0, r8
 80143c6:	fa09 f303 	lsl.w	r3, r9, r3
 80143ca:	4313      	orrs	r3, r2
 80143cc:	9304      	str	r3, [sp, #16]
 80143ce:	46a2      	mov	sl, r4
 80143d0:	e7d2      	b.n	8014378 <_svfiprintf_r+0x9c>
 80143d2:	9b03      	ldr	r3, [sp, #12]
 80143d4:	1d19      	adds	r1, r3, #4
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	9103      	str	r1, [sp, #12]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	bfbb      	ittet	lt
 80143de:	425b      	neglt	r3, r3
 80143e0:	f042 0202 	orrlt.w	r2, r2, #2
 80143e4:	9307      	strge	r3, [sp, #28]
 80143e6:	9307      	strlt	r3, [sp, #28]
 80143e8:	bfb8      	it	lt
 80143ea:	9204      	strlt	r2, [sp, #16]
 80143ec:	7823      	ldrb	r3, [r4, #0]
 80143ee:	2b2e      	cmp	r3, #46	; 0x2e
 80143f0:	d10c      	bne.n	801440c <_svfiprintf_r+0x130>
 80143f2:	7863      	ldrb	r3, [r4, #1]
 80143f4:	2b2a      	cmp	r3, #42	; 0x2a
 80143f6:	d135      	bne.n	8014464 <_svfiprintf_r+0x188>
 80143f8:	9b03      	ldr	r3, [sp, #12]
 80143fa:	1d1a      	adds	r2, r3, #4
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	9203      	str	r2, [sp, #12]
 8014400:	2b00      	cmp	r3, #0
 8014402:	bfb8      	it	lt
 8014404:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014408:	3402      	adds	r4, #2
 801440a:	9305      	str	r3, [sp, #20]
 801440c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80144d8 <_svfiprintf_r+0x1fc>
 8014410:	7821      	ldrb	r1, [r4, #0]
 8014412:	2203      	movs	r2, #3
 8014414:	4650      	mov	r0, sl
 8014416:	f7eb fef3 	bl	8000200 <memchr>
 801441a:	b140      	cbz	r0, 801442e <_svfiprintf_r+0x152>
 801441c:	2340      	movs	r3, #64	; 0x40
 801441e:	eba0 000a 	sub.w	r0, r0, sl
 8014422:	fa03 f000 	lsl.w	r0, r3, r0
 8014426:	9b04      	ldr	r3, [sp, #16]
 8014428:	4303      	orrs	r3, r0
 801442a:	3401      	adds	r4, #1
 801442c:	9304      	str	r3, [sp, #16]
 801442e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014432:	4826      	ldr	r0, [pc, #152]	; (80144cc <_svfiprintf_r+0x1f0>)
 8014434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014438:	2206      	movs	r2, #6
 801443a:	f7eb fee1 	bl	8000200 <memchr>
 801443e:	2800      	cmp	r0, #0
 8014440:	d038      	beq.n	80144b4 <_svfiprintf_r+0x1d8>
 8014442:	4b23      	ldr	r3, [pc, #140]	; (80144d0 <_svfiprintf_r+0x1f4>)
 8014444:	bb1b      	cbnz	r3, 801448e <_svfiprintf_r+0x1b2>
 8014446:	9b03      	ldr	r3, [sp, #12]
 8014448:	3307      	adds	r3, #7
 801444a:	f023 0307 	bic.w	r3, r3, #7
 801444e:	3308      	adds	r3, #8
 8014450:	9303      	str	r3, [sp, #12]
 8014452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014454:	4433      	add	r3, r6
 8014456:	9309      	str	r3, [sp, #36]	; 0x24
 8014458:	e767      	b.n	801432a <_svfiprintf_r+0x4e>
 801445a:	fb0c 3202 	mla	r2, ip, r2, r3
 801445e:	460c      	mov	r4, r1
 8014460:	2001      	movs	r0, #1
 8014462:	e7a5      	b.n	80143b0 <_svfiprintf_r+0xd4>
 8014464:	2300      	movs	r3, #0
 8014466:	3401      	adds	r4, #1
 8014468:	9305      	str	r3, [sp, #20]
 801446a:	4619      	mov	r1, r3
 801446c:	f04f 0c0a 	mov.w	ip, #10
 8014470:	4620      	mov	r0, r4
 8014472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014476:	3a30      	subs	r2, #48	; 0x30
 8014478:	2a09      	cmp	r2, #9
 801447a:	d903      	bls.n	8014484 <_svfiprintf_r+0x1a8>
 801447c:	2b00      	cmp	r3, #0
 801447e:	d0c5      	beq.n	801440c <_svfiprintf_r+0x130>
 8014480:	9105      	str	r1, [sp, #20]
 8014482:	e7c3      	b.n	801440c <_svfiprintf_r+0x130>
 8014484:	fb0c 2101 	mla	r1, ip, r1, r2
 8014488:	4604      	mov	r4, r0
 801448a:	2301      	movs	r3, #1
 801448c:	e7f0      	b.n	8014470 <_svfiprintf_r+0x194>
 801448e:	ab03      	add	r3, sp, #12
 8014490:	9300      	str	r3, [sp, #0]
 8014492:	462a      	mov	r2, r5
 8014494:	4b0f      	ldr	r3, [pc, #60]	; (80144d4 <_svfiprintf_r+0x1f8>)
 8014496:	a904      	add	r1, sp, #16
 8014498:	4638      	mov	r0, r7
 801449a:	f7fc f807 	bl	80104ac <_printf_float>
 801449e:	1c42      	adds	r2, r0, #1
 80144a0:	4606      	mov	r6, r0
 80144a2:	d1d6      	bne.n	8014452 <_svfiprintf_r+0x176>
 80144a4:	89ab      	ldrh	r3, [r5, #12]
 80144a6:	065b      	lsls	r3, r3, #25
 80144a8:	f53f af2c 	bmi.w	8014304 <_svfiprintf_r+0x28>
 80144ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144ae:	b01d      	add	sp, #116	; 0x74
 80144b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b4:	ab03      	add	r3, sp, #12
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	462a      	mov	r2, r5
 80144ba:	4b06      	ldr	r3, [pc, #24]	; (80144d4 <_svfiprintf_r+0x1f8>)
 80144bc:	a904      	add	r1, sp, #16
 80144be:	4638      	mov	r0, r7
 80144c0:	f7fc fa98 	bl	80109f4 <_printf_i>
 80144c4:	e7eb      	b.n	801449e <_svfiprintf_r+0x1c2>
 80144c6:	bf00      	nop
 80144c8:	0805f384 	.word	0x0805f384
 80144cc:	0805f38e 	.word	0x0805f38e
 80144d0:	080104ad 	.word	0x080104ad
 80144d4:	08014225 	.word	0x08014225
 80144d8:	0805f38a 	.word	0x0805f38a
 80144dc:	00000000 	.word	0x00000000

080144e0 <nan>:
 80144e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80144e8 <nan+0x8>
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop
 80144e8:	00000000 	.word	0x00000000
 80144ec:	7ff80000 	.word	0x7ff80000

080144f0 <_raise_r>:
 80144f0:	291f      	cmp	r1, #31
 80144f2:	b538      	push	{r3, r4, r5, lr}
 80144f4:	4604      	mov	r4, r0
 80144f6:	460d      	mov	r5, r1
 80144f8:	d904      	bls.n	8014504 <_raise_r+0x14>
 80144fa:	2316      	movs	r3, #22
 80144fc:	6003      	str	r3, [r0, #0]
 80144fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014502:	bd38      	pop	{r3, r4, r5, pc}
 8014504:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014506:	b112      	cbz	r2, 801450e <_raise_r+0x1e>
 8014508:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801450c:	b94b      	cbnz	r3, 8014522 <_raise_r+0x32>
 801450e:	4620      	mov	r0, r4
 8014510:	f000 f830 	bl	8014574 <_getpid_r>
 8014514:	462a      	mov	r2, r5
 8014516:	4601      	mov	r1, r0
 8014518:	4620      	mov	r0, r4
 801451a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801451e:	f000 b817 	b.w	8014550 <_kill_r>
 8014522:	2b01      	cmp	r3, #1
 8014524:	d00a      	beq.n	801453c <_raise_r+0x4c>
 8014526:	1c59      	adds	r1, r3, #1
 8014528:	d103      	bne.n	8014532 <_raise_r+0x42>
 801452a:	2316      	movs	r3, #22
 801452c:	6003      	str	r3, [r0, #0]
 801452e:	2001      	movs	r0, #1
 8014530:	e7e7      	b.n	8014502 <_raise_r+0x12>
 8014532:	2400      	movs	r4, #0
 8014534:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014538:	4628      	mov	r0, r5
 801453a:	4798      	blx	r3
 801453c:	2000      	movs	r0, #0
 801453e:	e7e0      	b.n	8014502 <_raise_r+0x12>

08014540 <raise>:
 8014540:	4b02      	ldr	r3, [pc, #8]	; (801454c <raise+0xc>)
 8014542:	4601      	mov	r1, r0
 8014544:	6818      	ldr	r0, [r3, #0]
 8014546:	f7ff bfd3 	b.w	80144f0 <_raise_r>
 801454a:	bf00      	nop
 801454c:	20000ed8 	.word	0x20000ed8

08014550 <_kill_r>:
 8014550:	b538      	push	{r3, r4, r5, lr}
 8014552:	4d07      	ldr	r5, [pc, #28]	; (8014570 <_kill_r+0x20>)
 8014554:	2300      	movs	r3, #0
 8014556:	4604      	mov	r4, r0
 8014558:	4608      	mov	r0, r1
 801455a:	4611      	mov	r1, r2
 801455c:	602b      	str	r3, [r5, #0]
 801455e:	f002 f96d 	bl	801683c <_kill>
 8014562:	1c43      	adds	r3, r0, #1
 8014564:	d102      	bne.n	801456c <_kill_r+0x1c>
 8014566:	682b      	ldr	r3, [r5, #0]
 8014568:	b103      	cbz	r3, 801456c <_kill_r+0x1c>
 801456a:	6023      	str	r3, [r4, #0]
 801456c:	bd38      	pop	{r3, r4, r5, pc}
 801456e:	bf00      	nop
 8014570:	20013cb0 	.word	0x20013cb0

08014574 <_getpid_r>:
 8014574:	f002 b952 	b.w	801681c <_getpid>

08014578 <__sread>:
 8014578:	b510      	push	{r4, lr}
 801457a:	460c      	mov	r4, r1
 801457c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014580:	f000 f8ba 	bl	80146f8 <_read_r>
 8014584:	2800      	cmp	r0, #0
 8014586:	bfab      	itete	ge
 8014588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801458a:	89a3      	ldrhlt	r3, [r4, #12]
 801458c:	181b      	addge	r3, r3, r0
 801458e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014592:	bfac      	ite	ge
 8014594:	6563      	strge	r3, [r4, #84]	; 0x54
 8014596:	81a3      	strhlt	r3, [r4, #12]
 8014598:	bd10      	pop	{r4, pc}

0801459a <__swrite>:
 801459a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801459e:	461f      	mov	r7, r3
 80145a0:	898b      	ldrh	r3, [r1, #12]
 80145a2:	05db      	lsls	r3, r3, #23
 80145a4:	4605      	mov	r5, r0
 80145a6:	460c      	mov	r4, r1
 80145a8:	4616      	mov	r6, r2
 80145aa:	d505      	bpl.n	80145b8 <__swrite+0x1e>
 80145ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145b0:	2302      	movs	r3, #2
 80145b2:	2200      	movs	r2, #0
 80145b4:	f000 f886 	bl	80146c4 <_lseek_r>
 80145b8:	89a3      	ldrh	r3, [r4, #12]
 80145ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80145c2:	81a3      	strh	r3, [r4, #12]
 80145c4:	4632      	mov	r2, r6
 80145c6:	463b      	mov	r3, r7
 80145c8:	4628      	mov	r0, r5
 80145ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145ce:	f000 b835 	b.w	801463c <_write_r>

080145d2 <__sseek>:
 80145d2:	b510      	push	{r4, lr}
 80145d4:	460c      	mov	r4, r1
 80145d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145da:	f000 f873 	bl	80146c4 <_lseek_r>
 80145de:	1c43      	adds	r3, r0, #1
 80145e0:	89a3      	ldrh	r3, [r4, #12]
 80145e2:	bf15      	itete	ne
 80145e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80145e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80145ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80145ee:	81a3      	strheq	r3, [r4, #12]
 80145f0:	bf18      	it	ne
 80145f2:	81a3      	strhne	r3, [r4, #12]
 80145f4:	bd10      	pop	{r4, pc}

080145f6 <__sclose>:
 80145f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145fa:	f000 b831 	b.w	8014660 <_close_r>

080145fe <strncmp>:
 80145fe:	b510      	push	{r4, lr}
 8014600:	b16a      	cbz	r2, 801461e <strncmp+0x20>
 8014602:	3901      	subs	r1, #1
 8014604:	1884      	adds	r4, r0, r2
 8014606:	f810 3b01 	ldrb.w	r3, [r0], #1
 801460a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801460e:	4293      	cmp	r3, r2
 8014610:	d103      	bne.n	801461a <strncmp+0x1c>
 8014612:	42a0      	cmp	r0, r4
 8014614:	d001      	beq.n	801461a <strncmp+0x1c>
 8014616:	2b00      	cmp	r3, #0
 8014618:	d1f5      	bne.n	8014606 <strncmp+0x8>
 801461a:	1a98      	subs	r0, r3, r2
 801461c:	bd10      	pop	{r4, pc}
 801461e:	4610      	mov	r0, r2
 8014620:	e7fc      	b.n	801461c <strncmp+0x1e>

08014622 <__ascii_wctomb>:
 8014622:	b149      	cbz	r1, 8014638 <__ascii_wctomb+0x16>
 8014624:	2aff      	cmp	r2, #255	; 0xff
 8014626:	bf85      	ittet	hi
 8014628:	238a      	movhi	r3, #138	; 0x8a
 801462a:	6003      	strhi	r3, [r0, #0]
 801462c:	700a      	strbls	r2, [r1, #0]
 801462e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014632:	bf98      	it	ls
 8014634:	2001      	movls	r0, #1
 8014636:	4770      	bx	lr
 8014638:	4608      	mov	r0, r1
 801463a:	4770      	bx	lr

0801463c <_write_r>:
 801463c:	b538      	push	{r3, r4, r5, lr}
 801463e:	4d07      	ldr	r5, [pc, #28]	; (801465c <_write_r+0x20>)
 8014640:	4604      	mov	r4, r0
 8014642:	4608      	mov	r0, r1
 8014644:	4611      	mov	r1, r2
 8014646:	2200      	movs	r2, #0
 8014648:	602a      	str	r2, [r5, #0]
 801464a:	461a      	mov	r2, r3
 801464c:	f002 f90e 	bl	801686c <_write>
 8014650:	1c43      	adds	r3, r0, #1
 8014652:	d102      	bne.n	801465a <_write_r+0x1e>
 8014654:	682b      	ldr	r3, [r5, #0]
 8014656:	b103      	cbz	r3, 801465a <_write_r+0x1e>
 8014658:	6023      	str	r3, [r4, #0]
 801465a:	bd38      	pop	{r3, r4, r5, pc}
 801465c:	20013cb0 	.word	0x20013cb0

08014660 <_close_r>:
 8014660:	b538      	push	{r3, r4, r5, lr}
 8014662:	4d06      	ldr	r5, [pc, #24]	; (801467c <_close_r+0x1c>)
 8014664:	2300      	movs	r3, #0
 8014666:	4604      	mov	r4, r0
 8014668:	4608      	mov	r0, r1
 801466a:	602b      	str	r3, [r5, #0]
 801466c:	f002 f8c6 	bl	80167fc <_close>
 8014670:	1c43      	adds	r3, r0, #1
 8014672:	d102      	bne.n	801467a <_close_r+0x1a>
 8014674:	682b      	ldr	r3, [r5, #0]
 8014676:	b103      	cbz	r3, 801467a <_close_r+0x1a>
 8014678:	6023      	str	r3, [r4, #0]
 801467a:	bd38      	pop	{r3, r4, r5, pc}
 801467c:	20013cb0 	.word	0x20013cb0

08014680 <_fstat_r>:
 8014680:	b538      	push	{r3, r4, r5, lr}
 8014682:	4d07      	ldr	r5, [pc, #28]	; (80146a0 <_fstat_r+0x20>)
 8014684:	2300      	movs	r3, #0
 8014686:	4604      	mov	r4, r0
 8014688:	4608      	mov	r0, r1
 801468a:	4611      	mov	r1, r2
 801468c:	602b      	str	r3, [r5, #0]
 801468e:	f002 f8bd 	bl	801680c <_fstat>
 8014692:	1c43      	adds	r3, r0, #1
 8014694:	d102      	bne.n	801469c <_fstat_r+0x1c>
 8014696:	682b      	ldr	r3, [r5, #0]
 8014698:	b103      	cbz	r3, 801469c <_fstat_r+0x1c>
 801469a:	6023      	str	r3, [r4, #0]
 801469c:	bd38      	pop	{r3, r4, r5, pc}
 801469e:	bf00      	nop
 80146a0:	20013cb0 	.word	0x20013cb0

080146a4 <_isatty_r>:
 80146a4:	b538      	push	{r3, r4, r5, lr}
 80146a6:	4d06      	ldr	r5, [pc, #24]	; (80146c0 <_isatty_r+0x1c>)
 80146a8:	2300      	movs	r3, #0
 80146aa:	4604      	mov	r4, r0
 80146ac:	4608      	mov	r0, r1
 80146ae:	602b      	str	r3, [r5, #0]
 80146b0:	f002 f8bc 	bl	801682c <_isatty>
 80146b4:	1c43      	adds	r3, r0, #1
 80146b6:	d102      	bne.n	80146be <_isatty_r+0x1a>
 80146b8:	682b      	ldr	r3, [r5, #0]
 80146ba:	b103      	cbz	r3, 80146be <_isatty_r+0x1a>
 80146bc:	6023      	str	r3, [r4, #0]
 80146be:	bd38      	pop	{r3, r4, r5, pc}
 80146c0:	20013cb0 	.word	0x20013cb0

080146c4 <_lseek_r>:
 80146c4:	b538      	push	{r3, r4, r5, lr}
 80146c6:	4d07      	ldr	r5, [pc, #28]	; (80146e4 <_lseek_r+0x20>)
 80146c8:	4604      	mov	r4, r0
 80146ca:	4608      	mov	r0, r1
 80146cc:	4611      	mov	r1, r2
 80146ce:	2200      	movs	r2, #0
 80146d0:	602a      	str	r2, [r5, #0]
 80146d2:	461a      	mov	r2, r3
 80146d4:	f002 f8ba 	bl	801684c <_lseek>
 80146d8:	1c43      	adds	r3, r0, #1
 80146da:	d102      	bne.n	80146e2 <_lseek_r+0x1e>
 80146dc:	682b      	ldr	r3, [r5, #0]
 80146de:	b103      	cbz	r3, 80146e2 <_lseek_r+0x1e>
 80146e0:	6023      	str	r3, [r4, #0]
 80146e2:	bd38      	pop	{r3, r4, r5, pc}
 80146e4:	20013cb0 	.word	0x20013cb0

080146e8 <_malloc_usable_size_r>:
 80146e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146ec:	1f18      	subs	r0, r3, #4
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	bfbc      	itt	lt
 80146f2:	580b      	ldrlt	r3, [r1, r0]
 80146f4:	18c0      	addlt	r0, r0, r3
 80146f6:	4770      	bx	lr

080146f8 <_read_r>:
 80146f8:	b538      	push	{r3, r4, r5, lr}
 80146fa:	4d07      	ldr	r5, [pc, #28]	; (8014718 <_read_r+0x20>)
 80146fc:	4604      	mov	r4, r0
 80146fe:	4608      	mov	r0, r1
 8014700:	4611      	mov	r1, r2
 8014702:	2200      	movs	r2, #0
 8014704:	602a      	str	r2, [r5, #0]
 8014706:	461a      	mov	r2, r3
 8014708:	f002 f8a8 	bl	801685c <_read>
 801470c:	1c43      	adds	r3, r0, #1
 801470e:	d102      	bne.n	8014716 <_read_r+0x1e>
 8014710:	682b      	ldr	r3, [r5, #0]
 8014712:	b103      	cbz	r3, 8014716 <_read_r+0x1e>
 8014714:	6023      	str	r3, [r4, #0]
 8014716:	bd38      	pop	{r3, r4, r5, pc}
 8014718:	20013cb0 	.word	0x20013cb0
 801471c:	00000000 	.word	0x00000000

08014720 <cos>:
 8014720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014722:	ec53 2b10 	vmov	r2, r3, d0
 8014726:	4824      	ldr	r0, [pc, #144]	; (80147b8 <cos+0x98>)
 8014728:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801472c:	4281      	cmp	r1, r0
 801472e:	dc06      	bgt.n	801473e <cos+0x1e>
 8014730:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80147b0 <cos+0x90>
 8014734:	f001 f9b0 	bl	8015a98 <__kernel_cos>
 8014738:	ec51 0b10 	vmov	r0, r1, d0
 801473c:	e007      	b.n	801474e <cos+0x2e>
 801473e:	481f      	ldr	r0, [pc, #124]	; (80147bc <cos+0x9c>)
 8014740:	4281      	cmp	r1, r0
 8014742:	dd09      	ble.n	8014758 <cos+0x38>
 8014744:	ee10 0a10 	vmov	r0, s0
 8014748:	4619      	mov	r1, r3
 801474a:	f7eb fdad 	bl	80002a8 <__aeabi_dsub>
 801474e:	ec41 0b10 	vmov	d0, r0, r1
 8014752:	b005      	add	sp, #20
 8014754:	f85d fb04 	ldr.w	pc, [sp], #4
 8014758:	4668      	mov	r0, sp
 801475a:	f000 f9fd 	bl	8014b58 <__ieee754_rem_pio2>
 801475e:	f000 0003 	and.w	r0, r0, #3
 8014762:	2801      	cmp	r0, #1
 8014764:	d007      	beq.n	8014776 <cos+0x56>
 8014766:	2802      	cmp	r0, #2
 8014768:	d012      	beq.n	8014790 <cos+0x70>
 801476a:	b9c0      	cbnz	r0, 801479e <cos+0x7e>
 801476c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014770:	ed9d 0b00 	vldr	d0, [sp]
 8014774:	e7de      	b.n	8014734 <cos+0x14>
 8014776:	ed9d 1b02 	vldr	d1, [sp, #8]
 801477a:	ed9d 0b00 	vldr	d0, [sp]
 801477e:	f001 fd93 	bl	80162a8 <__kernel_sin>
 8014782:	ec53 2b10 	vmov	r2, r3, d0
 8014786:	ee10 0a10 	vmov	r0, s0
 801478a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801478e:	e7de      	b.n	801474e <cos+0x2e>
 8014790:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014794:	ed9d 0b00 	vldr	d0, [sp]
 8014798:	f001 f97e 	bl	8015a98 <__kernel_cos>
 801479c:	e7f1      	b.n	8014782 <cos+0x62>
 801479e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80147a2:	ed9d 0b00 	vldr	d0, [sp]
 80147a6:	2001      	movs	r0, #1
 80147a8:	f001 fd7e 	bl	80162a8 <__kernel_sin>
 80147ac:	e7c4      	b.n	8014738 <cos+0x18>
 80147ae:	bf00      	nop
	...
 80147b8:	3fe921fb 	.word	0x3fe921fb
 80147bc:	7fefffff 	.word	0x7fefffff

080147c0 <fabsf>:
 80147c0:	ee10 3a10 	vmov	r3, s0
 80147c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80147c8:	ee00 3a10 	vmov	s0, r3
 80147cc:	4770      	bx	lr
	...

080147d0 <roundf>:
 80147d0:	ee10 0a10 	vmov	r0, s0
 80147d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80147d8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80147dc:	2a16      	cmp	r2, #22
 80147de:	dc15      	bgt.n	801480c <roundf+0x3c>
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	da08      	bge.n	80147f6 <roundf+0x26>
 80147e4:	3201      	adds	r2, #1
 80147e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80147ea:	d101      	bne.n	80147f0 <roundf+0x20>
 80147ec:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80147f0:	ee00 3a10 	vmov	s0, r3
 80147f4:	4770      	bx	lr
 80147f6:	4908      	ldr	r1, [pc, #32]	; (8014818 <roundf+0x48>)
 80147f8:	4111      	asrs	r1, r2
 80147fa:	4208      	tst	r0, r1
 80147fc:	d0fa      	beq.n	80147f4 <roundf+0x24>
 80147fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014802:	4113      	asrs	r3, r2
 8014804:	4403      	add	r3, r0
 8014806:	ea23 0301 	bic.w	r3, r3, r1
 801480a:	e7f1      	b.n	80147f0 <roundf+0x20>
 801480c:	2a80      	cmp	r2, #128	; 0x80
 801480e:	d1f1      	bne.n	80147f4 <roundf+0x24>
 8014810:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014814:	4770      	bx	lr
 8014816:	bf00      	nop
 8014818:	007fffff 	.word	0x007fffff

0801481c <sqrt>:
 801481c:	b538      	push	{r3, r4, r5, lr}
 801481e:	ed2d 8b02 	vpush	{d8}
 8014822:	ec55 4b10 	vmov	r4, r5, d0
 8014826:	f000 fba1 	bl	8014f6c <__ieee754_sqrt>
 801482a:	4b15      	ldr	r3, [pc, #84]	; (8014880 <sqrt+0x64>)
 801482c:	eeb0 8a40 	vmov.f32	s16, s0
 8014830:	eef0 8a60 	vmov.f32	s17, s1
 8014834:	f993 3000 	ldrsb.w	r3, [r3]
 8014838:	3301      	adds	r3, #1
 801483a:	d019      	beq.n	8014870 <sqrt+0x54>
 801483c:	4622      	mov	r2, r4
 801483e:	462b      	mov	r3, r5
 8014840:	4620      	mov	r0, r4
 8014842:	4629      	mov	r1, r5
 8014844:	f7ec f982 	bl	8000b4c <__aeabi_dcmpun>
 8014848:	b990      	cbnz	r0, 8014870 <sqrt+0x54>
 801484a:	2200      	movs	r2, #0
 801484c:	2300      	movs	r3, #0
 801484e:	4620      	mov	r0, r4
 8014850:	4629      	mov	r1, r5
 8014852:	f7ec f953 	bl	8000afc <__aeabi_dcmplt>
 8014856:	b158      	cbz	r0, 8014870 <sqrt+0x54>
 8014858:	f7fb fb2a 	bl	800feb0 <__errno>
 801485c:	2321      	movs	r3, #33	; 0x21
 801485e:	6003      	str	r3, [r0, #0]
 8014860:	2200      	movs	r2, #0
 8014862:	2300      	movs	r3, #0
 8014864:	4610      	mov	r0, r2
 8014866:	4619      	mov	r1, r3
 8014868:	f7ec f800 	bl	800086c <__aeabi_ddiv>
 801486c:	ec41 0b18 	vmov	d8, r0, r1
 8014870:	eeb0 0a48 	vmov.f32	s0, s16
 8014874:	eef0 0a68 	vmov.f32	s1, s17
 8014878:	ecbd 8b02 	vpop	{d8}
 801487c:	bd38      	pop	{r3, r4, r5, pc}
 801487e:	bf00      	nop
 8014880:	200010ac 	.word	0x200010ac

08014884 <expf>:
 8014884:	b508      	push	{r3, lr}
 8014886:	ed2d 8b02 	vpush	{d8}
 801488a:	eef0 8a40 	vmov.f32	s17, s0
 801488e:	f000 fc21 	bl	80150d4 <__ieee754_expf>
 8014892:	4b16      	ldr	r3, [pc, #88]	; (80148ec <expf+0x68>)
 8014894:	f993 3000 	ldrsb.w	r3, [r3]
 8014898:	3301      	adds	r3, #1
 801489a:	eeb0 8a40 	vmov.f32	s16, s0
 801489e:	d011      	beq.n	80148c4 <expf+0x40>
 80148a0:	eeb0 0a68 	vmov.f32	s0, s17
 80148a4:	f001 fece 	bl	8016644 <finitef>
 80148a8:	b160      	cbz	r0, 80148c4 <expf+0x40>
 80148aa:	eddf 7a11 	vldr	s15, [pc, #68]	; 80148f0 <expf+0x6c>
 80148ae:	eef4 8ae7 	vcmpe.f32	s17, s15
 80148b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b6:	dd0a      	ble.n	80148ce <expf+0x4a>
 80148b8:	f7fb fafa 	bl	800feb0 <__errno>
 80148bc:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80148f4 <expf+0x70>
 80148c0:	2322      	movs	r3, #34	; 0x22
 80148c2:	6003      	str	r3, [r0, #0]
 80148c4:	eeb0 0a48 	vmov.f32	s0, s16
 80148c8:	ecbd 8b02 	vpop	{d8}
 80148cc:	bd08      	pop	{r3, pc}
 80148ce:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80148f8 <expf+0x74>
 80148d2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80148d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148da:	d5f3      	bpl.n	80148c4 <expf+0x40>
 80148dc:	f7fb fae8 	bl	800feb0 <__errno>
 80148e0:	2322      	movs	r3, #34	; 0x22
 80148e2:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80148fc <expf+0x78>
 80148e6:	6003      	str	r3, [r0, #0]
 80148e8:	e7ec      	b.n	80148c4 <expf+0x40>
 80148ea:	bf00      	nop
 80148ec:	200010ac 	.word	0x200010ac
 80148f0:	42b17180 	.word	0x42b17180
 80148f4:	7f800000 	.word	0x7f800000
 80148f8:	c2cff1b5 	.word	0xc2cff1b5
 80148fc:	00000000 	.word	0x00000000

08014900 <logf>:
 8014900:	b508      	push	{r3, lr}
 8014902:	ed2d 8b02 	vpush	{d8}
 8014906:	eeb0 8a40 	vmov.f32	s16, s0
 801490a:	f000 fcb7 	bl	801527c <__ieee754_logf>
 801490e:	4b14      	ldr	r3, [pc, #80]	; (8014960 <logf+0x60>)
 8014910:	f993 3000 	ldrsb.w	r3, [r3]
 8014914:	3301      	adds	r3, #1
 8014916:	d014      	beq.n	8014942 <logf+0x42>
 8014918:	eeb4 8a48 	vcmp.f32	s16, s16
 801491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014920:	d60f      	bvs.n	8014942 <logf+0x42>
 8014922:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492a:	dc0a      	bgt.n	8014942 <logf+0x42>
 801492c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014934:	d108      	bne.n	8014948 <logf+0x48>
 8014936:	f7fb fabb 	bl	800feb0 <__errno>
 801493a:	2322      	movs	r3, #34	; 0x22
 801493c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014964 <logf+0x64>
 8014940:	6003      	str	r3, [r0, #0]
 8014942:	ecbd 8b02 	vpop	{d8}
 8014946:	bd08      	pop	{r3, pc}
 8014948:	f7fb fab2 	bl	800feb0 <__errno>
 801494c:	ecbd 8b02 	vpop	{d8}
 8014950:	2321      	movs	r3, #33	; 0x21
 8014952:	6003      	str	r3, [r0, #0]
 8014954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014958:	4803      	ldr	r0, [pc, #12]	; (8014968 <logf+0x68>)
 801495a:	f7fc bb91 	b.w	8011080 <nanf>
 801495e:	bf00      	nop
 8014960:	200010ac 	.word	0x200010ac
 8014964:	ff800000 	.word	0xff800000
 8014968:	0805f37f 	.word	0x0805f37f

0801496c <log10f>:
 801496c:	b508      	push	{r3, lr}
 801496e:	ed2d 8b02 	vpush	{d8}
 8014972:	eeb0 8a40 	vmov.f32	s16, s0
 8014976:	f000 fd71 	bl	801545c <__ieee754_log10f>
 801497a:	4b14      	ldr	r3, [pc, #80]	; (80149cc <log10f+0x60>)
 801497c:	f993 3000 	ldrsb.w	r3, [r3]
 8014980:	3301      	adds	r3, #1
 8014982:	d014      	beq.n	80149ae <log10f+0x42>
 8014984:	eeb4 8a48 	vcmp.f32	s16, s16
 8014988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801498c:	d60f      	bvs.n	80149ae <log10f+0x42>
 801498e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014996:	d80a      	bhi.n	80149ae <log10f+0x42>
 8014998:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801499c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a0:	d108      	bne.n	80149b4 <log10f+0x48>
 80149a2:	f7fb fa85 	bl	800feb0 <__errno>
 80149a6:	2322      	movs	r3, #34	; 0x22
 80149a8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80149d0 <log10f+0x64>
 80149ac:	6003      	str	r3, [r0, #0]
 80149ae:	ecbd 8b02 	vpop	{d8}
 80149b2:	bd08      	pop	{r3, pc}
 80149b4:	f7fb fa7c 	bl	800feb0 <__errno>
 80149b8:	ecbd 8b02 	vpop	{d8}
 80149bc:	2321      	movs	r3, #33	; 0x21
 80149be:	6003      	str	r3, [r0, #0]
 80149c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80149c4:	4803      	ldr	r0, [pc, #12]	; (80149d4 <log10f+0x68>)
 80149c6:	f7fc bb5b 	b.w	8011080 <nanf>
 80149ca:	bf00      	nop
 80149cc:	200010ac 	.word	0x200010ac
 80149d0:	ff800000 	.word	0xff800000
 80149d4:	0805f37f 	.word	0x0805f37f

080149d8 <powf>:
 80149d8:	b508      	push	{r3, lr}
 80149da:	ed2d 8b04 	vpush	{d8-d9}
 80149de:	eeb0 9a40 	vmov.f32	s18, s0
 80149e2:	eef0 8a60 	vmov.f32	s17, s1
 80149e6:	f000 fd91 	bl	801550c <__ieee754_powf>
 80149ea:	4b43      	ldr	r3, [pc, #268]	; (8014af8 <powf+0x120>)
 80149ec:	f993 3000 	ldrsb.w	r3, [r3]
 80149f0:	3301      	adds	r3, #1
 80149f2:	eeb0 8a40 	vmov.f32	s16, s0
 80149f6:	d012      	beq.n	8014a1e <powf+0x46>
 80149f8:	eef4 8a68 	vcmp.f32	s17, s17
 80149fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a00:	d60d      	bvs.n	8014a1e <powf+0x46>
 8014a02:	eeb4 9a49 	vcmp.f32	s18, s18
 8014a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0a:	d70d      	bvc.n	8014a28 <powf+0x50>
 8014a0c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a18:	bf08      	it	eq
 8014a1a:	eeb0 8a67 	vmoveq.f32	s16, s15
 8014a1e:	eeb0 0a48 	vmov.f32	s0, s16
 8014a22:	ecbd 8b04 	vpop	{d8-d9}
 8014a26:	bd08      	pop	{r3, pc}
 8014a28:	eddf 9a34 	vldr	s19, [pc, #208]	; 8014afc <powf+0x124>
 8014a2c:	eeb4 9a69 	vcmp.f32	s18, s19
 8014a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a34:	d116      	bne.n	8014a64 <powf+0x8c>
 8014a36:	eef4 8a69 	vcmp.f32	s17, s19
 8014a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a3e:	d057      	beq.n	8014af0 <powf+0x118>
 8014a40:	eeb0 0a68 	vmov.f32	s0, s17
 8014a44:	f001 fdfe 	bl	8016644 <finitef>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d0e8      	beq.n	8014a1e <powf+0x46>
 8014a4c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8014a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a54:	d5e3      	bpl.n	8014a1e <powf+0x46>
 8014a56:	f7fb fa2b 	bl	800feb0 <__errno>
 8014a5a:	2321      	movs	r3, #33	; 0x21
 8014a5c:	6003      	str	r3, [r0, #0]
 8014a5e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8014b00 <powf+0x128>
 8014a62:	e7dc      	b.n	8014a1e <powf+0x46>
 8014a64:	f001 fdee 	bl	8016644 <finitef>
 8014a68:	bb50      	cbnz	r0, 8014ac0 <powf+0xe8>
 8014a6a:	eeb0 0a49 	vmov.f32	s0, s18
 8014a6e:	f001 fde9 	bl	8016644 <finitef>
 8014a72:	b328      	cbz	r0, 8014ac0 <powf+0xe8>
 8014a74:	eeb0 0a68 	vmov.f32	s0, s17
 8014a78:	f001 fde4 	bl	8016644 <finitef>
 8014a7c:	b300      	cbz	r0, 8014ac0 <powf+0xe8>
 8014a7e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a86:	d706      	bvc.n	8014a96 <powf+0xbe>
 8014a88:	f7fb fa12 	bl	800feb0 <__errno>
 8014a8c:	2321      	movs	r3, #33	; 0x21
 8014a8e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8014a92:	6003      	str	r3, [r0, #0]
 8014a94:	e7c3      	b.n	8014a1e <powf+0x46>
 8014a96:	f7fb fa0b 	bl	800feb0 <__errno>
 8014a9a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8014a9e:	2322      	movs	r3, #34	; 0x22
 8014aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa4:	6003      	str	r3, [r0, #0]
 8014aa6:	d508      	bpl.n	8014aba <powf+0xe2>
 8014aa8:	eeb0 0a68 	vmov.f32	s0, s17
 8014aac:	f001 fdd8 	bl	8016660 <rintf>
 8014ab0:	eeb4 0a68 	vcmp.f32	s0, s17
 8014ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab8:	d1d1      	bne.n	8014a5e <powf+0x86>
 8014aba:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8014b04 <powf+0x12c>
 8014abe:	e7ae      	b.n	8014a1e <powf+0x46>
 8014ac0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac8:	d1a9      	bne.n	8014a1e <powf+0x46>
 8014aca:	eeb0 0a49 	vmov.f32	s0, s18
 8014ace:	f001 fdb9 	bl	8016644 <finitef>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d0a3      	beq.n	8014a1e <powf+0x46>
 8014ad6:	eeb0 0a68 	vmov.f32	s0, s17
 8014ada:	f001 fdb3 	bl	8016644 <finitef>
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	d09d      	beq.n	8014a1e <powf+0x46>
 8014ae2:	f7fb f9e5 	bl	800feb0 <__errno>
 8014ae6:	2322      	movs	r3, #34	; 0x22
 8014ae8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8014afc <powf+0x124>
 8014aec:	6003      	str	r3, [r0, #0]
 8014aee:	e796      	b.n	8014a1e <powf+0x46>
 8014af0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014af4:	e793      	b.n	8014a1e <powf+0x46>
 8014af6:	bf00      	nop
 8014af8:	200010ac 	.word	0x200010ac
 8014afc:	00000000 	.word	0x00000000
 8014b00:	ff800000 	.word	0xff800000
 8014b04:	7f800000 	.word	0x7f800000

08014b08 <sqrtf>:
 8014b08:	b508      	push	{r3, lr}
 8014b0a:	ed2d 8b02 	vpush	{d8}
 8014b0e:	eeb0 8a40 	vmov.f32	s16, s0
 8014b12:	f000 ffbb 	bl	8015a8c <__ieee754_sqrtf>
 8014b16:	4b0d      	ldr	r3, [pc, #52]	; (8014b4c <sqrtf+0x44>)
 8014b18:	f993 3000 	ldrsb.w	r3, [r3]
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	d011      	beq.n	8014b44 <sqrtf+0x3c>
 8014b20:	eeb4 8a48 	vcmp.f32	s16, s16
 8014b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b28:	d60c      	bvs.n	8014b44 <sqrtf+0x3c>
 8014b2a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8014b50 <sqrtf+0x48>
 8014b2e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b36:	d505      	bpl.n	8014b44 <sqrtf+0x3c>
 8014b38:	f7fb f9ba 	bl	800feb0 <__errno>
 8014b3c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014b40:	2321      	movs	r3, #33	; 0x21
 8014b42:	6003      	str	r3, [r0, #0]
 8014b44:	ecbd 8b02 	vpop	{d8}
 8014b48:	bd08      	pop	{r3, pc}
 8014b4a:	bf00      	nop
 8014b4c:	200010ac 	.word	0x200010ac
	...

08014b58 <__ieee754_rem_pio2>:
 8014b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b5c:	ed2d 8b02 	vpush	{d8}
 8014b60:	ec55 4b10 	vmov	r4, r5, d0
 8014b64:	4bca      	ldr	r3, [pc, #808]	; (8014e90 <__ieee754_rem_pio2+0x338>)
 8014b66:	b08b      	sub	sp, #44	; 0x2c
 8014b68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8014b6c:	4598      	cmp	r8, r3
 8014b6e:	4682      	mov	sl, r0
 8014b70:	9502      	str	r5, [sp, #8]
 8014b72:	dc08      	bgt.n	8014b86 <__ieee754_rem_pio2+0x2e>
 8014b74:	2200      	movs	r2, #0
 8014b76:	2300      	movs	r3, #0
 8014b78:	ed80 0b00 	vstr	d0, [r0]
 8014b7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014b80:	f04f 0b00 	mov.w	fp, #0
 8014b84:	e028      	b.n	8014bd8 <__ieee754_rem_pio2+0x80>
 8014b86:	4bc3      	ldr	r3, [pc, #780]	; (8014e94 <__ieee754_rem_pio2+0x33c>)
 8014b88:	4598      	cmp	r8, r3
 8014b8a:	dc78      	bgt.n	8014c7e <__ieee754_rem_pio2+0x126>
 8014b8c:	9b02      	ldr	r3, [sp, #8]
 8014b8e:	4ec2      	ldr	r6, [pc, #776]	; (8014e98 <__ieee754_rem_pio2+0x340>)
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	ee10 0a10 	vmov	r0, s0
 8014b96:	a3b0      	add	r3, pc, #704	; (adr r3, 8014e58 <__ieee754_rem_pio2+0x300>)
 8014b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9c:	4629      	mov	r1, r5
 8014b9e:	dd39      	ble.n	8014c14 <__ieee754_rem_pio2+0xbc>
 8014ba0:	f7eb fb82 	bl	80002a8 <__aeabi_dsub>
 8014ba4:	45b0      	cmp	r8, r6
 8014ba6:	4604      	mov	r4, r0
 8014ba8:	460d      	mov	r5, r1
 8014baa:	d01b      	beq.n	8014be4 <__ieee754_rem_pio2+0x8c>
 8014bac:	a3ac      	add	r3, pc, #688	; (adr r3, 8014e60 <__ieee754_rem_pio2+0x308>)
 8014bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb2:	f7eb fb79 	bl	80002a8 <__aeabi_dsub>
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	460b      	mov	r3, r1
 8014bba:	e9ca 2300 	strd	r2, r3, [sl]
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	4629      	mov	r1, r5
 8014bc2:	f7eb fb71 	bl	80002a8 <__aeabi_dsub>
 8014bc6:	a3a6      	add	r3, pc, #664	; (adr r3, 8014e60 <__ieee754_rem_pio2+0x308>)
 8014bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bcc:	f7eb fb6c 	bl	80002a8 <__aeabi_dsub>
 8014bd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014bd4:	f04f 0b01 	mov.w	fp, #1
 8014bd8:	4658      	mov	r0, fp
 8014bda:	b00b      	add	sp, #44	; 0x2c
 8014bdc:	ecbd 8b02 	vpop	{d8}
 8014be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be4:	a3a0      	add	r3, pc, #640	; (adr r3, 8014e68 <__ieee754_rem_pio2+0x310>)
 8014be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bea:	f7eb fb5d 	bl	80002a8 <__aeabi_dsub>
 8014bee:	a3a0      	add	r3, pc, #640	; (adr r3, 8014e70 <__ieee754_rem_pio2+0x318>)
 8014bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf4:	4604      	mov	r4, r0
 8014bf6:	460d      	mov	r5, r1
 8014bf8:	f7eb fb56 	bl	80002a8 <__aeabi_dsub>
 8014bfc:	4602      	mov	r2, r0
 8014bfe:	460b      	mov	r3, r1
 8014c00:	e9ca 2300 	strd	r2, r3, [sl]
 8014c04:	4620      	mov	r0, r4
 8014c06:	4629      	mov	r1, r5
 8014c08:	f7eb fb4e 	bl	80002a8 <__aeabi_dsub>
 8014c0c:	a398      	add	r3, pc, #608	; (adr r3, 8014e70 <__ieee754_rem_pio2+0x318>)
 8014c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c12:	e7db      	b.n	8014bcc <__ieee754_rem_pio2+0x74>
 8014c14:	f7eb fb4a 	bl	80002ac <__adddf3>
 8014c18:	45b0      	cmp	r8, r6
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	460d      	mov	r5, r1
 8014c1e:	d016      	beq.n	8014c4e <__ieee754_rem_pio2+0xf6>
 8014c20:	a38f      	add	r3, pc, #572	; (adr r3, 8014e60 <__ieee754_rem_pio2+0x308>)
 8014c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c26:	f7eb fb41 	bl	80002ac <__adddf3>
 8014c2a:	4602      	mov	r2, r0
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	e9ca 2300 	strd	r2, r3, [sl]
 8014c32:	4620      	mov	r0, r4
 8014c34:	4629      	mov	r1, r5
 8014c36:	f7eb fb37 	bl	80002a8 <__aeabi_dsub>
 8014c3a:	a389      	add	r3, pc, #548	; (adr r3, 8014e60 <__ieee754_rem_pio2+0x308>)
 8014c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c40:	f7eb fb34 	bl	80002ac <__adddf3>
 8014c44:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014c48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014c4c:	e7c4      	b.n	8014bd8 <__ieee754_rem_pio2+0x80>
 8014c4e:	a386      	add	r3, pc, #536	; (adr r3, 8014e68 <__ieee754_rem_pio2+0x310>)
 8014c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c54:	f7eb fb2a 	bl	80002ac <__adddf3>
 8014c58:	a385      	add	r3, pc, #532	; (adr r3, 8014e70 <__ieee754_rem_pio2+0x318>)
 8014c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c5e:	4604      	mov	r4, r0
 8014c60:	460d      	mov	r5, r1
 8014c62:	f7eb fb23 	bl	80002ac <__adddf3>
 8014c66:	4602      	mov	r2, r0
 8014c68:	460b      	mov	r3, r1
 8014c6a:	e9ca 2300 	strd	r2, r3, [sl]
 8014c6e:	4620      	mov	r0, r4
 8014c70:	4629      	mov	r1, r5
 8014c72:	f7eb fb19 	bl	80002a8 <__aeabi_dsub>
 8014c76:	a37e      	add	r3, pc, #504	; (adr r3, 8014e70 <__ieee754_rem_pio2+0x318>)
 8014c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7c:	e7e0      	b.n	8014c40 <__ieee754_rem_pio2+0xe8>
 8014c7e:	4b87      	ldr	r3, [pc, #540]	; (8014e9c <__ieee754_rem_pio2+0x344>)
 8014c80:	4598      	cmp	r8, r3
 8014c82:	f300 80d9 	bgt.w	8014e38 <__ieee754_rem_pio2+0x2e0>
 8014c86:	f001 fbcd 	bl	8016424 <fabs>
 8014c8a:	ec55 4b10 	vmov	r4, r5, d0
 8014c8e:	ee10 0a10 	vmov	r0, s0
 8014c92:	a379      	add	r3, pc, #484	; (adr r3, 8014e78 <__ieee754_rem_pio2+0x320>)
 8014c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c98:	4629      	mov	r1, r5
 8014c9a:	f7eb fcbd 	bl	8000618 <__aeabi_dmul>
 8014c9e:	4b80      	ldr	r3, [pc, #512]	; (8014ea0 <__ieee754_rem_pio2+0x348>)
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	f7eb fb03 	bl	80002ac <__adddf3>
 8014ca6:	f7eb ff67 	bl	8000b78 <__aeabi_d2iz>
 8014caa:	4683      	mov	fp, r0
 8014cac:	f7eb fc4a 	bl	8000544 <__aeabi_i2d>
 8014cb0:	4602      	mov	r2, r0
 8014cb2:	460b      	mov	r3, r1
 8014cb4:	ec43 2b18 	vmov	d8, r2, r3
 8014cb8:	a367      	add	r3, pc, #412	; (adr r3, 8014e58 <__ieee754_rem_pio2+0x300>)
 8014cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbe:	f7eb fcab 	bl	8000618 <__aeabi_dmul>
 8014cc2:	4602      	mov	r2, r0
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	4629      	mov	r1, r5
 8014cca:	f7eb faed 	bl	80002a8 <__aeabi_dsub>
 8014cce:	a364      	add	r3, pc, #400	; (adr r3, 8014e60 <__ieee754_rem_pio2+0x308>)
 8014cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd4:	4606      	mov	r6, r0
 8014cd6:	460f      	mov	r7, r1
 8014cd8:	ec51 0b18 	vmov	r0, r1, d8
 8014cdc:	f7eb fc9c 	bl	8000618 <__aeabi_dmul>
 8014ce0:	f1bb 0f1f 	cmp.w	fp, #31
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	460d      	mov	r5, r1
 8014ce8:	dc0d      	bgt.n	8014d06 <__ieee754_rem_pio2+0x1ae>
 8014cea:	4b6e      	ldr	r3, [pc, #440]	; (8014ea4 <__ieee754_rem_pio2+0x34c>)
 8014cec:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8014cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cf4:	4543      	cmp	r3, r8
 8014cf6:	d006      	beq.n	8014d06 <__ieee754_rem_pio2+0x1ae>
 8014cf8:	4622      	mov	r2, r4
 8014cfa:	462b      	mov	r3, r5
 8014cfc:	4630      	mov	r0, r6
 8014cfe:	4639      	mov	r1, r7
 8014d00:	f7eb fad2 	bl	80002a8 <__aeabi_dsub>
 8014d04:	e00f      	b.n	8014d26 <__ieee754_rem_pio2+0x1ce>
 8014d06:	462b      	mov	r3, r5
 8014d08:	4622      	mov	r2, r4
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	4639      	mov	r1, r7
 8014d0e:	f7eb facb 	bl	80002a8 <__aeabi_dsub>
 8014d12:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014d16:	9303      	str	r3, [sp, #12]
 8014d18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014d1c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8014d20:	f1b8 0f10 	cmp.w	r8, #16
 8014d24:	dc02      	bgt.n	8014d2c <__ieee754_rem_pio2+0x1d4>
 8014d26:	e9ca 0100 	strd	r0, r1, [sl]
 8014d2a:	e039      	b.n	8014da0 <__ieee754_rem_pio2+0x248>
 8014d2c:	a34e      	add	r3, pc, #312	; (adr r3, 8014e68 <__ieee754_rem_pio2+0x310>)
 8014d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d32:	ec51 0b18 	vmov	r0, r1, d8
 8014d36:	f7eb fc6f 	bl	8000618 <__aeabi_dmul>
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	460d      	mov	r5, r1
 8014d3e:	4602      	mov	r2, r0
 8014d40:	460b      	mov	r3, r1
 8014d42:	4630      	mov	r0, r6
 8014d44:	4639      	mov	r1, r7
 8014d46:	f7eb faaf 	bl	80002a8 <__aeabi_dsub>
 8014d4a:	4602      	mov	r2, r0
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	4680      	mov	r8, r0
 8014d50:	4689      	mov	r9, r1
 8014d52:	4630      	mov	r0, r6
 8014d54:	4639      	mov	r1, r7
 8014d56:	f7eb faa7 	bl	80002a8 <__aeabi_dsub>
 8014d5a:	4622      	mov	r2, r4
 8014d5c:	462b      	mov	r3, r5
 8014d5e:	f7eb faa3 	bl	80002a8 <__aeabi_dsub>
 8014d62:	a343      	add	r3, pc, #268	; (adr r3, 8014e70 <__ieee754_rem_pio2+0x318>)
 8014d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d68:	4604      	mov	r4, r0
 8014d6a:	460d      	mov	r5, r1
 8014d6c:	ec51 0b18 	vmov	r0, r1, d8
 8014d70:	f7eb fc52 	bl	8000618 <__aeabi_dmul>
 8014d74:	4622      	mov	r2, r4
 8014d76:	462b      	mov	r3, r5
 8014d78:	f7eb fa96 	bl	80002a8 <__aeabi_dsub>
 8014d7c:	4602      	mov	r2, r0
 8014d7e:	460b      	mov	r3, r1
 8014d80:	4604      	mov	r4, r0
 8014d82:	460d      	mov	r5, r1
 8014d84:	4640      	mov	r0, r8
 8014d86:	4649      	mov	r1, r9
 8014d88:	f7eb fa8e 	bl	80002a8 <__aeabi_dsub>
 8014d8c:	9a03      	ldr	r2, [sp, #12]
 8014d8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014d92:	1ad3      	subs	r3, r2, r3
 8014d94:	2b31      	cmp	r3, #49	; 0x31
 8014d96:	dc24      	bgt.n	8014de2 <__ieee754_rem_pio2+0x28a>
 8014d98:	e9ca 0100 	strd	r0, r1, [sl]
 8014d9c:	4646      	mov	r6, r8
 8014d9e:	464f      	mov	r7, r9
 8014da0:	e9da 8900 	ldrd	r8, r9, [sl]
 8014da4:	4630      	mov	r0, r6
 8014da6:	4642      	mov	r2, r8
 8014da8:	464b      	mov	r3, r9
 8014daa:	4639      	mov	r1, r7
 8014dac:	f7eb fa7c 	bl	80002a8 <__aeabi_dsub>
 8014db0:	462b      	mov	r3, r5
 8014db2:	4622      	mov	r2, r4
 8014db4:	f7eb fa78 	bl	80002a8 <__aeabi_dsub>
 8014db8:	9b02      	ldr	r3, [sp, #8]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014dc0:	f6bf af0a 	bge.w	8014bd8 <__ieee754_rem_pio2+0x80>
 8014dc4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014dc8:	f8ca 3004 	str.w	r3, [sl, #4]
 8014dcc:	f8ca 8000 	str.w	r8, [sl]
 8014dd0:	f8ca 0008 	str.w	r0, [sl, #8]
 8014dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dd8:	f8ca 300c 	str.w	r3, [sl, #12]
 8014ddc:	f1cb 0b00 	rsb	fp, fp, #0
 8014de0:	e6fa      	b.n	8014bd8 <__ieee754_rem_pio2+0x80>
 8014de2:	a327      	add	r3, pc, #156	; (adr r3, 8014e80 <__ieee754_rem_pio2+0x328>)
 8014de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de8:	ec51 0b18 	vmov	r0, r1, d8
 8014dec:	f7eb fc14 	bl	8000618 <__aeabi_dmul>
 8014df0:	4604      	mov	r4, r0
 8014df2:	460d      	mov	r5, r1
 8014df4:	4602      	mov	r2, r0
 8014df6:	460b      	mov	r3, r1
 8014df8:	4640      	mov	r0, r8
 8014dfa:	4649      	mov	r1, r9
 8014dfc:	f7eb fa54 	bl	80002a8 <__aeabi_dsub>
 8014e00:	4602      	mov	r2, r0
 8014e02:	460b      	mov	r3, r1
 8014e04:	4606      	mov	r6, r0
 8014e06:	460f      	mov	r7, r1
 8014e08:	4640      	mov	r0, r8
 8014e0a:	4649      	mov	r1, r9
 8014e0c:	f7eb fa4c 	bl	80002a8 <__aeabi_dsub>
 8014e10:	4622      	mov	r2, r4
 8014e12:	462b      	mov	r3, r5
 8014e14:	f7eb fa48 	bl	80002a8 <__aeabi_dsub>
 8014e18:	a31b      	add	r3, pc, #108	; (adr r3, 8014e88 <__ieee754_rem_pio2+0x330>)
 8014e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e1e:	4604      	mov	r4, r0
 8014e20:	460d      	mov	r5, r1
 8014e22:	ec51 0b18 	vmov	r0, r1, d8
 8014e26:	f7eb fbf7 	bl	8000618 <__aeabi_dmul>
 8014e2a:	4622      	mov	r2, r4
 8014e2c:	462b      	mov	r3, r5
 8014e2e:	f7eb fa3b 	bl	80002a8 <__aeabi_dsub>
 8014e32:	4604      	mov	r4, r0
 8014e34:	460d      	mov	r5, r1
 8014e36:	e75f      	b.n	8014cf8 <__ieee754_rem_pio2+0x1a0>
 8014e38:	4b1b      	ldr	r3, [pc, #108]	; (8014ea8 <__ieee754_rem_pio2+0x350>)
 8014e3a:	4598      	cmp	r8, r3
 8014e3c:	dd36      	ble.n	8014eac <__ieee754_rem_pio2+0x354>
 8014e3e:	ee10 2a10 	vmov	r2, s0
 8014e42:	462b      	mov	r3, r5
 8014e44:	4620      	mov	r0, r4
 8014e46:	4629      	mov	r1, r5
 8014e48:	f7eb fa2e 	bl	80002a8 <__aeabi_dsub>
 8014e4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014e50:	e9ca 0100 	strd	r0, r1, [sl]
 8014e54:	e694      	b.n	8014b80 <__ieee754_rem_pio2+0x28>
 8014e56:	bf00      	nop
 8014e58:	54400000 	.word	0x54400000
 8014e5c:	3ff921fb 	.word	0x3ff921fb
 8014e60:	1a626331 	.word	0x1a626331
 8014e64:	3dd0b461 	.word	0x3dd0b461
 8014e68:	1a600000 	.word	0x1a600000
 8014e6c:	3dd0b461 	.word	0x3dd0b461
 8014e70:	2e037073 	.word	0x2e037073
 8014e74:	3ba3198a 	.word	0x3ba3198a
 8014e78:	6dc9c883 	.word	0x6dc9c883
 8014e7c:	3fe45f30 	.word	0x3fe45f30
 8014e80:	2e000000 	.word	0x2e000000
 8014e84:	3ba3198a 	.word	0x3ba3198a
 8014e88:	252049c1 	.word	0x252049c1
 8014e8c:	397b839a 	.word	0x397b839a
 8014e90:	3fe921fb 	.word	0x3fe921fb
 8014e94:	4002d97b 	.word	0x4002d97b
 8014e98:	3ff921fb 	.word	0x3ff921fb
 8014e9c:	413921fb 	.word	0x413921fb
 8014ea0:	3fe00000 	.word	0x3fe00000
 8014ea4:	0805f7f4 	.word	0x0805f7f4
 8014ea8:	7fefffff 	.word	0x7fefffff
 8014eac:	ea4f 5428 	mov.w	r4, r8, asr #20
 8014eb0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8014eb4:	ee10 0a10 	vmov	r0, s0
 8014eb8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8014ebc:	ee10 6a10 	vmov	r6, s0
 8014ec0:	460f      	mov	r7, r1
 8014ec2:	f7eb fe59 	bl	8000b78 <__aeabi_d2iz>
 8014ec6:	f7eb fb3d 	bl	8000544 <__aeabi_i2d>
 8014eca:	4602      	mov	r2, r0
 8014ecc:	460b      	mov	r3, r1
 8014ece:	4630      	mov	r0, r6
 8014ed0:	4639      	mov	r1, r7
 8014ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014ed6:	f7eb f9e7 	bl	80002a8 <__aeabi_dsub>
 8014eda:	4b22      	ldr	r3, [pc, #136]	; (8014f64 <__ieee754_rem_pio2+0x40c>)
 8014edc:	2200      	movs	r2, #0
 8014ede:	f7eb fb9b 	bl	8000618 <__aeabi_dmul>
 8014ee2:	460f      	mov	r7, r1
 8014ee4:	4606      	mov	r6, r0
 8014ee6:	f7eb fe47 	bl	8000b78 <__aeabi_d2iz>
 8014eea:	f7eb fb2b 	bl	8000544 <__aeabi_i2d>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	4630      	mov	r0, r6
 8014ef4:	4639      	mov	r1, r7
 8014ef6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014efa:	f7eb f9d5 	bl	80002a8 <__aeabi_dsub>
 8014efe:	4b19      	ldr	r3, [pc, #100]	; (8014f64 <__ieee754_rem_pio2+0x40c>)
 8014f00:	2200      	movs	r2, #0
 8014f02:	f7eb fb89 	bl	8000618 <__aeabi_dmul>
 8014f06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f0a:	ad04      	add	r5, sp, #16
 8014f0c:	f04f 0803 	mov.w	r8, #3
 8014f10:	46a9      	mov	r9, r5
 8014f12:	2600      	movs	r6, #0
 8014f14:	2700      	movs	r7, #0
 8014f16:	4632      	mov	r2, r6
 8014f18:	463b      	mov	r3, r7
 8014f1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8014f1e:	46c3      	mov	fp, r8
 8014f20:	3d08      	subs	r5, #8
 8014f22:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014f26:	f7eb fddf 	bl	8000ae8 <__aeabi_dcmpeq>
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	d1f3      	bne.n	8014f16 <__ieee754_rem_pio2+0x3be>
 8014f2e:	4b0e      	ldr	r3, [pc, #56]	; (8014f68 <__ieee754_rem_pio2+0x410>)
 8014f30:	9301      	str	r3, [sp, #4]
 8014f32:	2302      	movs	r3, #2
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	4622      	mov	r2, r4
 8014f38:	465b      	mov	r3, fp
 8014f3a:	4651      	mov	r1, sl
 8014f3c:	4648      	mov	r0, r9
 8014f3e:	f000 fe73 	bl	8015c28 <__kernel_rem_pio2>
 8014f42:	9b02      	ldr	r3, [sp, #8]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	4683      	mov	fp, r0
 8014f48:	f6bf ae46 	bge.w	8014bd8 <__ieee754_rem_pio2+0x80>
 8014f4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014f50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014f54:	f8ca 3004 	str.w	r3, [sl, #4]
 8014f58:	f8da 300c 	ldr.w	r3, [sl, #12]
 8014f5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014f60:	e73a      	b.n	8014dd8 <__ieee754_rem_pio2+0x280>
 8014f62:	bf00      	nop
 8014f64:	41700000 	.word	0x41700000
 8014f68:	0805f874 	.word	0x0805f874

08014f6c <__ieee754_sqrt>:
 8014f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f70:	ec55 4b10 	vmov	r4, r5, d0
 8014f74:	4e56      	ldr	r6, [pc, #344]	; (80150d0 <__ieee754_sqrt+0x164>)
 8014f76:	43ae      	bics	r6, r5
 8014f78:	ee10 0a10 	vmov	r0, s0
 8014f7c:	ee10 3a10 	vmov	r3, s0
 8014f80:	4629      	mov	r1, r5
 8014f82:	462a      	mov	r2, r5
 8014f84:	d110      	bne.n	8014fa8 <__ieee754_sqrt+0x3c>
 8014f86:	ee10 2a10 	vmov	r2, s0
 8014f8a:	462b      	mov	r3, r5
 8014f8c:	f7eb fb44 	bl	8000618 <__aeabi_dmul>
 8014f90:	4602      	mov	r2, r0
 8014f92:	460b      	mov	r3, r1
 8014f94:	4620      	mov	r0, r4
 8014f96:	4629      	mov	r1, r5
 8014f98:	f7eb f988 	bl	80002ac <__adddf3>
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	460d      	mov	r5, r1
 8014fa0:	ec45 4b10 	vmov	d0, r4, r5
 8014fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fa8:	2d00      	cmp	r5, #0
 8014faa:	dc10      	bgt.n	8014fce <__ieee754_sqrt+0x62>
 8014fac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014fb0:	4330      	orrs	r0, r6
 8014fb2:	d0f5      	beq.n	8014fa0 <__ieee754_sqrt+0x34>
 8014fb4:	b15d      	cbz	r5, 8014fce <__ieee754_sqrt+0x62>
 8014fb6:	ee10 2a10 	vmov	r2, s0
 8014fba:	462b      	mov	r3, r5
 8014fbc:	ee10 0a10 	vmov	r0, s0
 8014fc0:	f7eb f972 	bl	80002a8 <__aeabi_dsub>
 8014fc4:	4602      	mov	r2, r0
 8014fc6:	460b      	mov	r3, r1
 8014fc8:	f7eb fc50 	bl	800086c <__aeabi_ddiv>
 8014fcc:	e7e6      	b.n	8014f9c <__ieee754_sqrt+0x30>
 8014fce:	1509      	asrs	r1, r1, #20
 8014fd0:	d076      	beq.n	80150c0 <__ieee754_sqrt+0x154>
 8014fd2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014fd6:	07ce      	lsls	r6, r1, #31
 8014fd8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8014fdc:	bf5e      	ittt	pl
 8014fde:	0fda      	lsrpl	r2, r3, #31
 8014fe0:	005b      	lslpl	r3, r3, #1
 8014fe2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8014fe6:	0fda      	lsrs	r2, r3, #31
 8014fe8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8014fec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014ff0:	2000      	movs	r0, #0
 8014ff2:	106d      	asrs	r5, r5, #1
 8014ff4:	005b      	lsls	r3, r3, #1
 8014ff6:	f04f 0e16 	mov.w	lr, #22
 8014ffa:	4684      	mov	ip, r0
 8014ffc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015000:	eb0c 0401 	add.w	r4, ip, r1
 8015004:	4294      	cmp	r4, r2
 8015006:	bfde      	ittt	le
 8015008:	1b12      	suble	r2, r2, r4
 801500a:	eb04 0c01 	addle.w	ip, r4, r1
 801500e:	1840      	addle	r0, r0, r1
 8015010:	0052      	lsls	r2, r2, #1
 8015012:	f1be 0e01 	subs.w	lr, lr, #1
 8015016:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801501a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801501e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015022:	d1ed      	bne.n	8015000 <__ieee754_sqrt+0x94>
 8015024:	4671      	mov	r1, lr
 8015026:	2720      	movs	r7, #32
 8015028:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801502c:	4562      	cmp	r2, ip
 801502e:	eb04 060e 	add.w	r6, r4, lr
 8015032:	dc02      	bgt.n	801503a <__ieee754_sqrt+0xce>
 8015034:	d113      	bne.n	801505e <__ieee754_sqrt+0xf2>
 8015036:	429e      	cmp	r6, r3
 8015038:	d811      	bhi.n	801505e <__ieee754_sqrt+0xf2>
 801503a:	2e00      	cmp	r6, #0
 801503c:	eb06 0e04 	add.w	lr, r6, r4
 8015040:	da43      	bge.n	80150ca <__ieee754_sqrt+0x15e>
 8015042:	f1be 0f00 	cmp.w	lr, #0
 8015046:	db40      	blt.n	80150ca <__ieee754_sqrt+0x15e>
 8015048:	f10c 0801 	add.w	r8, ip, #1
 801504c:	eba2 020c 	sub.w	r2, r2, ip
 8015050:	429e      	cmp	r6, r3
 8015052:	bf88      	it	hi
 8015054:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8015058:	1b9b      	subs	r3, r3, r6
 801505a:	4421      	add	r1, r4
 801505c:	46c4      	mov	ip, r8
 801505e:	0052      	lsls	r2, r2, #1
 8015060:	3f01      	subs	r7, #1
 8015062:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015066:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801506a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801506e:	d1dd      	bne.n	801502c <__ieee754_sqrt+0xc0>
 8015070:	4313      	orrs	r3, r2
 8015072:	d006      	beq.n	8015082 <__ieee754_sqrt+0x116>
 8015074:	1c4c      	adds	r4, r1, #1
 8015076:	bf13      	iteet	ne
 8015078:	3101      	addne	r1, #1
 801507a:	3001      	addeq	r0, #1
 801507c:	4639      	moveq	r1, r7
 801507e:	f021 0101 	bicne.w	r1, r1, #1
 8015082:	1043      	asrs	r3, r0, #1
 8015084:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015088:	0849      	lsrs	r1, r1, #1
 801508a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801508e:	07c2      	lsls	r2, r0, #31
 8015090:	bf48      	it	mi
 8015092:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015096:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801509a:	460c      	mov	r4, r1
 801509c:	463d      	mov	r5, r7
 801509e:	e77f      	b.n	8014fa0 <__ieee754_sqrt+0x34>
 80150a0:	0ada      	lsrs	r2, r3, #11
 80150a2:	3815      	subs	r0, #21
 80150a4:	055b      	lsls	r3, r3, #21
 80150a6:	2a00      	cmp	r2, #0
 80150a8:	d0fa      	beq.n	80150a0 <__ieee754_sqrt+0x134>
 80150aa:	02d7      	lsls	r7, r2, #11
 80150ac:	d50a      	bpl.n	80150c4 <__ieee754_sqrt+0x158>
 80150ae:	f1c1 0420 	rsb	r4, r1, #32
 80150b2:	fa23 f404 	lsr.w	r4, r3, r4
 80150b6:	1e4d      	subs	r5, r1, #1
 80150b8:	408b      	lsls	r3, r1
 80150ba:	4322      	orrs	r2, r4
 80150bc:	1b41      	subs	r1, r0, r5
 80150be:	e788      	b.n	8014fd2 <__ieee754_sqrt+0x66>
 80150c0:	4608      	mov	r0, r1
 80150c2:	e7f0      	b.n	80150a6 <__ieee754_sqrt+0x13a>
 80150c4:	0052      	lsls	r2, r2, #1
 80150c6:	3101      	adds	r1, #1
 80150c8:	e7ef      	b.n	80150aa <__ieee754_sqrt+0x13e>
 80150ca:	46e0      	mov	r8, ip
 80150cc:	e7be      	b.n	801504c <__ieee754_sqrt+0xe0>
 80150ce:	bf00      	nop
 80150d0:	7ff00000 	.word	0x7ff00000

080150d4 <__ieee754_expf>:
 80150d4:	ee10 2a10 	vmov	r2, s0
 80150d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80150dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80150e0:	d902      	bls.n	80150e8 <__ieee754_expf+0x14>
 80150e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80150e6:	4770      	bx	lr
 80150e8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80150ec:	d106      	bne.n	80150fc <__ieee754_expf+0x28>
 80150ee:	eddf 7a51 	vldr	s15, [pc, #324]	; 8015234 <__ieee754_expf+0x160>
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	bf18      	it	ne
 80150f6:	eeb0 0a67 	vmovne.f32	s0, s15
 80150fa:	4770      	bx	lr
 80150fc:	484e      	ldr	r0, [pc, #312]	; (8015238 <__ieee754_expf+0x164>)
 80150fe:	4282      	cmp	r2, r0
 8015100:	dd04      	ble.n	801510c <__ieee754_expf+0x38>
 8015102:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 801523c <__ieee754_expf+0x168>
 8015106:	ee20 0a00 	vmul.f32	s0, s0, s0
 801510a:	4770      	bx	lr
 801510c:	2a00      	cmp	r2, #0
 801510e:	da03      	bge.n	8015118 <__ieee754_expf+0x44>
 8015110:	4a4b      	ldr	r2, [pc, #300]	; (8015240 <__ieee754_expf+0x16c>)
 8015112:	4291      	cmp	r1, r2
 8015114:	f200 808a 	bhi.w	801522c <__ieee754_expf+0x158>
 8015118:	4a4a      	ldr	r2, [pc, #296]	; (8015244 <__ieee754_expf+0x170>)
 801511a:	4291      	cmp	r1, r2
 801511c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015120:	d954      	bls.n	80151cc <__ieee754_expf+0xf8>
 8015122:	4a49      	ldr	r2, [pc, #292]	; (8015248 <__ieee754_expf+0x174>)
 8015124:	4291      	cmp	r1, r2
 8015126:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801512a:	d836      	bhi.n	801519a <__ieee754_expf+0xc6>
 801512c:	4947      	ldr	r1, [pc, #284]	; (801524c <__ieee754_expf+0x178>)
 801512e:	4411      	add	r1, r2
 8015130:	ed91 7a00 	vldr	s14, [r1]
 8015134:	4946      	ldr	r1, [pc, #280]	; (8015250 <__ieee754_expf+0x17c>)
 8015136:	440a      	add	r2, r1
 8015138:	edd2 7a00 	vldr	s15, [r2]
 801513c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8015140:	f1c3 0201 	rsb	r2, r3, #1
 8015144:	1ad2      	subs	r2, r2, r3
 8015146:	ee37 0a67 	vsub.f32	s0, s14, s15
 801514a:	ee60 6a00 	vmul.f32	s13, s0, s0
 801514e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015254 <__ieee754_expf+0x180>
 8015152:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8015258 <__ieee754_expf+0x184>
 8015156:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801515a:	eddf 5a40 	vldr	s11, [pc, #256]	; 801525c <__ieee754_expf+0x188>
 801515e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015162:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8015260 <__ieee754_expf+0x18c>
 8015166:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801516a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015264 <__ieee754_expf+0x190>
 801516e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015172:	eeb0 5a40 	vmov.f32	s10, s0
 8015176:	eea5 5ae6 	vfms.f32	s10, s11, s13
 801517a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801517e:	eef0 6a45 	vmov.f32	s13, s10
 8015182:	ee20 5a05 	vmul.f32	s10, s0, s10
 8015186:	bb92      	cbnz	r2, 80151ee <__ieee754_expf+0x11a>
 8015188:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801518c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8015190:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015194:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015198:	4770      	bx	lr
 801519a:	4b33      	ldr	r3, [pc, #204]	; (8015268 <__ieee754_expf+0x194>)
 801519c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801526c <__ieee754_expf+0x198>
 80151a0:	4413      	add	r3, r2
 80151a2:	edd3 7a00 	vldr	s15, [r3]
 80151a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80151aa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015270 <__ieee754_expf+0x19c>
 80151ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151b2:	ee17 2a90 	vmov	r2, s15
 80151b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151ba:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80151be:	eeb0 7a40 	vmov.f32	s14, s0
 80151c2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015274 <__ieee754_expf+0x1a0>
 80151c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80151ca:	e7bc      	b.n	8015146 <__ieee754_expf+0x72>
 80151cc:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80151d0:	d20b      	bcs.n	80151ea <__ieee754_expf+0x116>
 80151d2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 801523c <__ieee754_expf+0x168>
 80151d6:	ee70 6a26 	vadd.f32	s13, s0, s13
 80151da:	eef4 6ac6 	vcmpe.f32	s13, s12
 80151de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e2:	dd02      	ble.n	80151ea <__ieee754_expf+0x116>
 80151e4:	ee30 0a06 	vadd.f32	s0, s0, s12
 80151e8:	4770      	bx	lr
 80151ea:	2200      	movs	r2, #0
 80151ec:	e7ad      	b.n	801514a <__ieee754_expf+0x76>
 80151ee:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80151f2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80151f6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80151fa:	bfb8      	it	lt
 80151fc:	3264      	addlt	r2, #100	; 0x64
 80151fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015202:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015206:	ee76 7a40 	vsub.f32	s15, s12, s0
 801520a:	ee17 3a90 	vmov	r3, s15
 801520e:	bfab      	itete	ge
 8015210:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8015214:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8015218:	ee00 3a10 	vmovge	s0, r3
 801521c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8015278 <__ieee754_expf+0x1a4>
 8015220:	bfbc      	itt	lt
 8015222:	ee00 3a10 	vmovlt	s0, r3
 8015226:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801522a:	4770      	bx	lr
 801522c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015234 <__ieee754_expf+0x160>
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	00000000 	.word	0x00000000
 8015238:	42b17217 	.word	0x42b17217
 801523c:	7149f2ca 	.word	0x7149f2ca
 8015240:	42cff1b5 	.word	0x42cff1b5
 8015244:	3eb17218 	.word	0x3eb17218
 8015248:	3f851591 	.word	0x3f851591
 801524c:	0805f984 	.word	0x0805f984
 8015250:	0805f98c 	.word	0x0805f98c
 8015254:	3331bb4c 	.word	0x3331bb4c
 8015258:	b5ddea0e 	.word	0xb5ddea0e
 801525c:	388ab355 	.word	0x388ab355
 8015260:	bb360b61 	.word	0xbb360b61
 8015264:	3e2aaaab 	.word	0x3e2aaaab
 8015268:	0805f97c 	.word	0x0805f97c
 801526c:	3fb8aa3b 	.word	0x3fb8aa3b
 8015270:	3f317180 	.word	0x3f317180
 8015274:	3717f7d1 	.word	0x3717f7d1
 8015278:	0d800000 	.word	0x0d800000

0801527c <__ieee754_logf>:
 801527c:	ee10 3a10 	vmov	r3, s0
 8015280:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015284:	d106      	bne.n	8015294 <__ieee754_logf+0x18>
 8015286:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801541c <__ieee754_logf+0x1a0>
 801528a:	eddf 7a65 	vldr	s15, [pc, #404]	; 8015420 <__ieee754_logf+0x1a4>
 801528e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015292:	4770      	bx	lr
 8015294:	2b00      	cmp	r3, #0
 8015296:	da02      	bge.n	801529e <__ieee754_logf+0x22>
 8015298:	ee30 7a40 	vsub.f32	s14, s0, s0
 801529c:	e7f5      	b.n	801528a <__ieee754_logf+0xe>
 801529e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80152a2:	db02      	blt.n	80152aa <__ieee754_logf+0x2e>
 80152a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80152a8:	4770      	bx	lr
 80152aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80152ae:	bfb8      	it	lt
 80152b0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8015424 <__ieee754_logf+0x1a8>
 80152b4:	485c      	ldr	r0, [pc, #368]	; (8015428 <__ieee754_logf+0x1ac>)
 80152b6:	bfbe      	ittt	lt
 80152b8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80152bc:	f06f 0118 	mvnlt.w	r1, #24
 80152c0:	ee17 3a90 	vmovlt	r3, s15
 80152c4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80152c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80152cc:	4418      	add	r0, r3
 80152ce:	bfa8      	it	ge
 80152d0:	2100      	movge	r1, #0
 80152d2:	3a7f      	subs	r2, #127	; 0x7f
 80152d4:	440a      	add	r2, r1
 80152d6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80152da:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80152de:	4319      	orrs	r1, r3
 80152e0:	ee00 1a10 	vmov	s0, r1
 80152e4:	4951      	ldr	r1, [pc, #324]	; (801542c <__ieee754_logf+0x1b0>)
 80152e6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80152ea:	f103 000f 	add.w	r0, r3, #15
 80152ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80152f2:	4001      	ands	r1, r0
 80152f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80152f8:	bb89      	cbnz	r1, 801535e <__ieee754_logf+0xe2>
 80152fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80152fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015302:	d10f      	bne.n	8015324 <__ieee754_logf+0xa8>
 8015304:	2a00      	cmp	r2, #0
 8015306:	f000 8085 	beq.w	8015414 <__ieee754_logf+0x198>
 801530a:	ee07 2a90 	vmov	s15, r2
 801530e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015430 <__ieee754_logf+0x1b4>
 8015312:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015434 <__ieee754_logf+0x1b8>
 8015316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801531a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801531e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8015322:	4770      	bx	lr
 8015324:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015438 <__ieee754_logf+0x1bc>
 8015328:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801532c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8015330:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015338:	b912      	cbnz	r2, 8015340 <__ieee754_logf+0xc4>
 801533a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801533e:	4770      	bx	lr
 8015340:	ee07 2a90 	vmov	s15, r2
 8015344:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8015430 <__ieee754_logf+0x1b4>
 8015348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801534c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8015350:	ee37 0a40 	vsub.f32	s0, s14, s0
 8015354:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8015434 <__ieee754_logf+0x1b8>
 8015358:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801535c:	4770      	bx	lr
 801535e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015362:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015366:	eddf 5a35 	vldr	s11, [pc, #212]	; 801543c <__ieee754_logf+0x1c0>
 801536a:	eddf 4a35 	vldr	s9, [pc, #212]	; 8015440 <__ieee754_logf+0x1c4>
 801536e:	4935      	ldr	r1, [pc, #212]	; (8015444 <__ieee754_logf+0x1c8>)
 8015370:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8015374:	4419      	add	r1, r3
 8015376:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801537a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801537e:	430b      	orrs	r3, r1
 8015380:	2b00      	cmp	r3, #0
 8015382:	ee07 2a90 	vmov	s15, r2
 8015386:	ee26 5a06 	vmul.f32	s10, s12, s12
 801538a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801538e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8015392:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8015448 <__ieee754_logf+0x1cc>
 8015396:	eee7 7a25 	vfma.f32	s15, s14, s11
 801539a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801544c <__ieee754_logf+0x1d0>
 801539e:	eee7 5a87 	vfma.f32	s11, s15, s14
 80153a2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015450 <__ieee754_logf+0x1d4>
 80153a6:	eee7 7a24 	vfma.f32	s15, s14, s9
 80153aa:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8015454 <__ieee754_logf+0x1d8>
 80153ae:	eee7 4a87 	vfma.f32	s9, s15, s14
 80153b2:	eddf 7a29 	vldr	s15, [pc, #164]	; 8015458 <__ieee754_logf+0x1dc>
 80153b6:	eee4 7a87 	vfma.f32	s15, s9, s14
 80153ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 80153be:	eee5 7a87 	vfma.f32	s15, s11, s14
 80153c2:	dd1c      	ble.n	80153fe <__ieee754_logf+0x182>
 80153c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80153c8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80153cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80153d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80153d8:	b922      	cbnz	r2, 80153e4 <__ieee754_logf+0x168>
 80153da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80153e2:	4770      	bx	lr
 80153e4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015430 <__ieee754_logf+0x1b4>
 80153e8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80153ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80153f4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015434 <__ieee754_logf+0x1b8>
 80153f8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80153fc:	4770      	bx	lr
 80153fe:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015402:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015406:	2a00      	cmp	r2, #0
 8015408:	d0e9      	beq.n	80153de <__ieee754_logf+0x162>
 801540a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8015430 <__ieee754_logf+0x1b4>
 801540e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8015412:	e7ed      	b.n	80153f0 <__ieee754_logf+0x174>
 8015414:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8015420 <__ieee754_logf+0x1a4>
 8015418:	4770      	bx	lr
 801541a:	bf00      	nop
 801541c:	cc000000 	.word	0xcc000000
 8015420:	00000000 	.word	0x00000000
 8015424:	4c000000 	.word	0x4c000000
 8015428:	004afb20 	.word	0x004afb20
 801542c:	007ffff0 	.word	0x007ffff0
 8015430:	3717f7d1 	.word	0x3717f7d1
 8015434:	3f317180 	.word	0x3f317180
 8015438:	3eaaaaab 	.word	0x3eaaaaab
 801543c:	3e1cd04f 	.word	0x3e1cd04f
 8015440:	3e178897 	.word	0x3e178897
 8015444:	ffcf5c30 	.word	0xffcf5c30
 8015448:	3e638e29 	.word	0x3e638e29
 801544c:	3ecccccd 	.word	0x3ecccccd
 8015450:	3e3a3325 	.word	0x3e3a3325
 8015454:	3e924925 	.word	0x3e924925
 8015458:	3f2aaaab 	.word	0x3f2aaaab

0801545c <__ieee754_log10f>:
 801545c:	b508      	push	{r3, lr}
 801545e:	ee10 2a10 	vmov	r2, s0
 8015462:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8015466:	ed2d 8b02 	vpush	{d8}
 801546a:	d108      	bne.n	801547e <__ieee754_log10f+0x22>
 801546c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80154f4 <__ieee754_log10f+0x98>
 8015470:	eddf 7a21 	vldr	s15, [pc, #132]	; 80154f8 <__ieee754_log10f+0x9c>
 8015474:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015478:	ecbd 8b02 	vpop	{d8}
 801547c:	bd08      	pop	{r3, pc}
 801547e:	2a00      	cmp	r2, #0
 8015480:	da02      	bge.n	8015488 <__ieee754_log10f+0x2c>
 8015482:	ee30 7a40 	vsub.f32	s14, s0, s0
 8015486:	e7f3      	b.n	8015470 <__ieee754_log10f+0x14>
 8015488:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801548c:	db02      	blt.n	8015494 <__ieee754_log10f+0x38>
 801548e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015492:	e7f1      	b.n	8015478 <__ieee754_log10f+0x1c>
 8015494:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8015498:	bfbf      	itttt	lt
 801549a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80154fc <__ieee754_log10f+0xa0>
 801549e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80154a2:	f06f 0118 	mvnlt.w	r1, #24
 80154a6:	ee17 2a90 	vmovlt	r2, s15
 80154aa:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80154ae:	bfa8      	it	ge
 80154b0:	2100      	movge	r1, #0
 80154b2:	3b7f      	subs	r3, #127	; 0x7f
 80154b4:	440b      	add	r3, r1
 80154b6:	0fd9      	lsrs	r1, r3, #31
 80154b8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80154bc:	ee07 3a90 	vmov	s15, r3
 80154c0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80154c4:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80154c8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80154cc:	ee00 3a10 	vmov	s0, r3
 80154d0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80154d4:	f7ff fed2 	bl	801527c <__ieee754_logf>
 80154d8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8015500 <__ieee754_log10f+0xa4>
 80154dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80154e0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015504 <__ieee754_log10f+0xa8>
 80154e4:	eea8 0a27 	vfma.f32	s0, s16, s15
 80154e8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015508 <__ieee754_log10f+0xac>
 80154ec:	eea8 0a27 	vfma.f32	s0, s16, s15
 80154f0:	e7c2      	b.n	8015478 <__ieee754_log10f+0x1c>
 80154f2:	bf00      	nop
 80154f4:	cc000000 	.word	0xcc000000
 80154f8:	00000000 	.word	0x00000000
 80154fc:	4c000000 	.word	0x4c000000
 8015500:	3ede5bd9 	.word	0x3ede5bd9
 8015504:	355427db 	.word	0x355427db
 8015508:	3e9a2080 	.word	0x3e9a2080

0801550c <__ieee754_powf>:
 801550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015510:	ee10 5a90 	vmov	r5, s1
 8015514:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8015518:	ed2d 8b02 	vpush	{d8}
 801551c:	eeb0 8a40 	vmov.f32	s16, s0
 8015520:	eef0 8a60 	vmov.f32	s17, s1
 8015524:	f000 8291 	beq.w	8015a4a <__ieee754_powf+0x53e>
 8015528:	ee10 8a10 	vmov	r8, s0
 801552c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8015530:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015534:	dc06      	bgt.n	8015544 <__ieee754_powf+0x38>
 8015536:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801553a:	dd0a      	ble.n	8015552 <__ieee754_powf+0x46>
 801553c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015540:	f000 8283 	beq.w	8015a4a <__ieee754_powf+0x53e>
 8015544:	ecbd 8b02 	vpop	{d8}
 8015548:	48d8      	ldr	r0, [pc, #864]	; (80158ac <__ieee754_powf+0x3a0>)
 801554a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801554e:	f7fb bd97 	b.w	8011080 <nanf>
 8015552:	f1b8 0f00 	cmp.w	r8, #0
 8015556:	da1f      	bge.n	8015598 <__ieee754_powf+0x8c>
 8015558:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801555c:	da2e      	bge.n	80155bc <__ieee754_powf+0xb0>
 801555e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015562:	f2c0 827b 	blt.w	8015a5c <__ieee754_powf+0x550>
 8015566:	15fb      	asrs	r3, r7, #23
 8015568:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801556c:	fa47 f603 	asr.w	r6, r7, r3
 8015570:	fa06 f303 	lsl.w	r3, r6, r3
 8015574:	42bb      	cmp	r3, r7
 8015576:	f040 8271 	bne.w	8015a5c <__ieee754_powf+0x550>
 801557a:	f006 0601 	and.w	r6, r6, #1
 801557e:	f1c6 0602 	rsb	r6, r6, #2
 8015582:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015586:	d120      	bne.n	80155ca <__ieee754_powf+0xbe>
 8015588:	2d00      	cmp	r5, #0
 801558a:	f280 8264 	bge.w	8015a56 <__ieee754_powf+0x54a>
 801558e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015592:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015596:	e00d      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015598:	2600      	movs	r6, #0
 801559a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801559e:	d1f0      	bne.n	8015582 <__ieee754_powf+0x76>
 80155a0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80155a4:	f000 8251 	beq.w	8015a4a <__ieee754_powf+0x53e>
 80155a8:	dd0a      	ble.n	80155c0 <__ieee754_powf+0xb4>
 80155aa:	2d00      	cmp	r5, #0
 80155ac:	f280 8250 	bge.w	8015a50 <__ieee754_powf+0x544>
 80155b0:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80158b0 <__ieee754_powf+0x3a4>
 80155b4:	ecbd 8b02 	vpop	{d8}
 80155b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155bc:	2602      	movs	r6, #2
 80155be:	e7ec      	b.n	801559a <__ieee754_powf+0x8e>
 80155c0:	2d00      	cmp	r5, #0
 80155c2:	daf5      	bge.n	80155b0 <__ieee754_powf+0xa4>
 80155c4:	eeb1 0a68 	vneg.f32	s0, s17
 80155c8:	e7f4      	b.n	80155b4 <__ieee754_powf+0xa8>
 80155ca:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80155ce:	d102      	bne.n	80155d6 <__ieee754_powf+0xca>
 80155d0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80155d4:	e7ee      	b.n	80155b4 <__ieee754_powf+0xa8>
 80155d6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80155da:	eeb0 0a48 	vmov.f32	s0, s16
 80155de:	d108      	bne.n	80155f2 <__ieee754_powf+0xe6>
 80155e0:	f1b8 0f00 	cmp.w	r8, #0
 80155e4:	db05      	blt.n	80155f2 <__ieee754_powf+0xe6>
 80155e6:	ecbd 8b02 	vpop	{d8}
 80155ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155ee:	f000 ba4d 	b.w	8015a8c <__ieee754_sqrtf>
 80155f2:	f7ff f8e5 	bl	80147c0 <fabsf>
 80155f6:	b124      	cbz	r4, 8015602 <__ieee754_powf+0xf6>
 80155f8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80155fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015600:	d117      	bne.n	8015632 <__ieee754_powf+0x126>
 8015602:	2d00      	cmp	r5, #0
 8015604:	bfbc      	itt	lt
 8015606:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801560a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801560e:	f1b8 0f00 	cmp.w	r8, #0
 8015612:	dacf      	bge.n	80155b4 <__ieee754_powf+0xa8>
 8015614:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8015618:	ea54 0306 	orrs.w	r3, r4, r6
 801561c:	d104      	bne.n	8015628 <__ieee754_powf+0x11c>
 801561e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015622:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015626:	e7c5      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015628:	2e01      	cmp	r6, #1
 801562a:	d1c3      	bne.n	80155b4 <__ieee754_powf+0xa8>
 801562c:	eeb1 0a40 	vneg.f32	s0, s0
 8015630:	e7c0      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015632:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8015636:	3801      	subs	r0, #1
 8015638:	ea56 0300 	orrs.w	r3, r6, r0
 801563c:	d104      	bne.n	8015648 <__ieee754_powf+0x13c>
 801563e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015642:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015646:	e7b5      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015648:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801564c:	dd6b      	ble.n	8015726 <__ieee754_powf+0x21a>
 801564e:	4b99      	ldr	r3, [pc, #612]	; (80158b4 <__ieee754_powf+0x3a8>)
 8015650:	429c      	cmp	r4, r3
 8015652:	dc06      	bgt.n	8015662 <__ieee754_powf+0x156>
 8015654:	2d00      	cmp	r5, #0
 8015656:	daab      	bge.n	80155b0 <__ieee754_powf+0xa4>
 8015658:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80158b8 <__ieee754_powf+0x3ac>
 801565c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015660:	e7a8      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015662:	4b96      	ldr	r3, [pc, #600]	; (80158bc <__ieee754_powf+0x3b0>)
 8015664:	429c      	cmp	r4, r3
 8015666:	dd02      	ble.n	801566e <__ieee754_powf+0x162>
 8015668:	2d00      	cmp	r5, #0
 801566a:	dcf5      	bgt.n	8015658 <__ieee754_powf+0x14c>
 801566c:	e7a0      	b.n	80155b0 <__ieee754_powf+0xa4>
 801566e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015672:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015676:	eddf 6a92 	vldr	s13, [pc, #584]	; 80158c0 <__ieee754_powf+0x3b4>
 801567a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801567e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8015682:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015686:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801568a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015692:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80158c4 <__ieee754_powf+0x3b8>
 8015696:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801569a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80158c8 <__ieee754_powf+0x3bc>
 801569e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80156a2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80158cc <__ieee754_powf+0x3c0>
 80156a6:	eef0 6a67 	vmov.f32	s13, s15
 80156aa:	eee0 6a07 	vfma.f32	s13, s0, s14
 80156ae:	ee16 3a90 	vmov	r3, s13
 80156b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80156b6:	f023 030f 	bic.w	r3, r3, #15
 80156ba:	ee00 3a90 	vmov	s1, r3
 80156be:	eee0 0a47 	vfms.f32	s1, s0, s14
 80156c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80156c6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80156ca:	f025 050f 	bic.w	r5, r5, #15
 80156ce:	ee07 5a10 	vmov	s14, r5
 80156d2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80156d6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80156da:	ee07 3a90 	vmov	s15, r3
 80156de:	eee7 0a27 	vfma.f32	s1, s14, s15
 80156e2:	3e01      	subs	r6, #1
 80156e4:	ea56 0200 	orrs.w	r2, r6, r0
 80156e8:	ee07 5a10 	vmov	s14, r5
 80156ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80156f0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80156f4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80156f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80156fc:	ee17 4a10 	vmov	r4, s14
 8015700:	bf08      	it	eq
 8015702:	eeb0 8a40 	vmoveq.f32	s16, s0
 8015706:	2c00      	cmp	r4, #0
 8015708:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801570c:	f340 8184 	ble.w	8015a18 <__ieee754_powf+0x50c>
 8015710:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015714:	f340 80fc 	ble.w	8015910 <__ieee754_powf+0x404>
 8015718:	eddf 7a67 	vldr	s15, [pc, #412]	; 80158b8 <__ieee754_powf+0x3ac>
 801571c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8015720:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015724:	e746      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015726:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801572a:	bf01      	itttt	eq
 801572c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80158d0 <__ieee754_powf+0x3c4>
 8015730:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8015734:	f06f 0217 	mvneq.w	r2, #23
 8015738:	ee17 4a90 	vmoveq	r4, s15
 801573c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8015740:	bf18      	it	ne
 8015742:	2200      	movne	r2, #0
 8015744:	3b7f      	subs	r3, #127	; 0x7f
 8015746:	4413      	add	r3, r2
 8015748:	4a62      	ldr	r2, [pc, #392]	; (80158d4 <__ieee754_powf+0x3c8>)
 801574a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801574e:	4294      	cmp	r4, r2
 8015750:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8015754:	dd06      	ble.n	8015764 <__ieee754_powf+0x258>
 8015756:	4a60      	ldr	r2, [pc, #384]	; (80158d8 <__ieee754_powf+0x3cc>)
 8015758:	4294      	cmp	r4, r2
 801575a:	f340 80a4 	ble.w	80158a6 <__ieee754_powf+0x39a>
 801575e:	3301      	adds	r3, #1
 8015760:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8015764:	2400      	movs	r4, #0
 8015766:	4a5d      	ldr	r2, [pc, #372]	; (80158dc <__ieee754_powf+0x3d0>)
 8015768:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801576c:	ee07 1a90 	vmov	s15, r1
 8015770:	ed92 7a00 	vldr	s14, [r2]
 8015774:	4a5a      	ldr	r2, [pc, #360]	; (80158e0 <__ieee754_powf+0x3d4>)
 8015776:	ee37 6a27 	vadd.f32	s12, s14, s15
 801577a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801577e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8015782:	1049      	asrs	r1, r1, #1
 8015784:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8015788:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801578c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8015790:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8015794:	ee06 1a10 	vmov	s12, r1
 8015798:	ee65 4a26 	vmul.f32	s9, s10, s13
 801579c:	ee36 7a47 	vsub.f32	s14, s12, s14
 80157a0:	ee14 7a90 	vmov	r7, s9
 80157a4:	4017      	ands	r7, r2
 80157a6:	ee05 7a90 	vmov	s11, r7
 80157aa:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80157ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157b2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80158e4 <__ieee754_powf+0x3d8>
 80157b6:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80157ba:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80157be:	ee25 6a26 	vmul.f32	s12, s10, s13
 80157c2:	eddf 6a49 	vldr	s13, [pc, #292]	; 80158e8 <__ieee754_powf+0x3dc>
 80157c6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80157ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80158ec <__ieee754_powf+0x3e0>
 80157ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 80157d2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80158c0 <__ieee754_powf+0x3b4>
 80157d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80157da:	eddf 6a45 	vldr	s13, [pc, #276]	; 80158f0 <__ieee754_powf+0x3e4>
 80157de:	eee7 6a27 	vfma.f32	s13, s14, s15
 80157e2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80158f4 <__ieee754_powf+0x3e8>
 80157e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80157ea:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80157ee:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80157f2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80157f6:	eee5 6a07 	vfma.f32	s13, s10, s14
 80157fa:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80157fe:	eef0 7a45 	vmov.f32	s15, s10
 8015802:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801580a:	ee17 1a90 	vmov	r1, s15
 801580e:	4011      	ands	r1, r2
 8015810:	ee07 1a90 	vmov	s15, r1
 8015814:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8015818:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801581c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015820:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015824:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015828:	eeb0 6a47 	vmov.f32	s12, s14
 801582c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015830:	ee16 1a10 	vmov	r1, s12
 8015834:	4011      	ands	r1, r2
 8015836:	ee06 1a90 	vmov	s13, r1
 801583a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801583e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80158f8 <__ieee754_powf+0x3ec>
 8015842:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80158fc <__ieee754_powf+0x3f0>
 8015846:	ee37 7a66 	vsub.f32	s14, s14, s13
 801584a:	ee06 1a10 	vmov	s12, r1
 801584e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015852:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015900 <__ieee754_powf+0x3f4>
 8015856:	492b      	ldr	r1, [pc, #172]	; (8015904 <__ieee754_powf+0x3f8>)
 8015858:	eea6 7a27 	vfma.f32	s14, s12, s15
 801585c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015860:	edd1 7a00 	vldr	s15, [r1]
 8015864:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015868:	ee07 3a90 	vmov	s15, r3
 801586c:	4b26      	ldr	r3, [pc, #152]	; (8015908 <__ieee754_powf+0x3fc>)
 801586e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015872:	eef0 7a47 	vmov.f32	s15, s14
 8015876:	eee6 7a25 	vfma.f32	s15, s12, s11
 801587a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801587e:	edd4 0a00 	vldr	s1, [r4]
 8015882:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801588a:	ee17 3a90 	vmov	r3, s15
 801588e:	4013      	ands	r3, r2
 8015890:	ee07 3a90 	vmov	s15, r3
 8015894:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015898:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801589c:	eee6 6a65 	vfms.f32	s13, s12, s11
 80158a0:	ee77 7a66 	vsub.f32	s15, s14, s13
 80158a4:	e70f      	b.n	80156c6 <__ieee754_powf+0x1ba>
 80158a6:	2401      	movs	r4, #1
 80158a8:	e75d      	b.n	8015766 <__ieee754_powf+0x25a>
 80158aa:	bf00      	nop
 80158ac:	0805f37f 	.word	0x0805f37f
 80158b0:	00000000 	.word	0x00000000
 80158b4:	3f7ffff7 	.word	0x3f7ffff7
 80158b8:	7149f2ca 	.word	0x7149f2ca
 80158bc:	3f800007 	.word	0x3f800007
 80158c0:	3eaaaaab 	.word	0x3eaaaaab
 80158c4:	3fb8aa3b 	.word	0x3fb8aa3b
 80158c8:	36eca570 	.word	0x36eca570
 80158cc:	3fb8aa00 	.word	0x3fb8aa00
 80158d0:	4b800000 	.word	0x4b800000
 80158d4:	001cc471 	.word	0x001cc471
 80158d8:	005db3d6 	.word	0x005db3d6
 80158dc:	0805f994 	.word	0x0805f994
 80158e0:	fffff000 	.word	0xfffff000
 80158e4:	3e6c3255 	.word	0x3e6c3255
 80158e8:	3e53f142 	.word	0x3e53f142
 80158ec:	3e8ba305 	.word	0x3e8ba305
 80158f0:	3edb6db7 	.word	0x3edb6db7
 80158f4:	3f19999a 	.word	0x3f19999a
 80158f8:	3f76384f 	.word	0x3f76384f
 80158fc:	3f763800 	.word	0x3f763800
 8015900:	369dc3a0 	.word	0x369dc3a0
 8015904:	0805f9a4 	.word	0x0805f9a4
 8015908:	0805f99c 	.word	0x0805f99c
 801590c:	3338aa3c 	.word	0x3338aa3c
 8015910:	f040 8092 	bne.w	8015a38 <__ieee754_powf+0x52c>
 8015914:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801590c <__ieee754_powf+0x400>
 8015918:	ee37 7a67 	vsub.f32	s14, s14, s15
 801591c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8015920:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015928:	f73f aef6 	bgt.w	8015718 <__ieee754_powf+0x20c>
 801592c:	15db      	asrs	r3, r3, #23
 801592e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8015932:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015936:	4103      	asrs	r3, r0
 8015938:	4423      	add	r3, r4
 801593a:	4949      	ldr	r1, [pc, #292]	; (8015a60 <__ieee754_powf+0x554>)
 801593c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015940:	3a7f      	subs	r2, #127	; 0x7f
 8015942:	4111      	asrs	r1, r2
 8015944:	ea23 0101 	bic.w	r1, r3, r1
 8015948:	ee07 1a10 	vmov	s14, r1
 801594c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015950:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015954:	f1c2 0217 	rsb	r2, r2, #23
 8015958:	4110      	asrs	r0, r2
 801595a:	2c00      	cmp	r4, #0
 801595c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015960:	bfb8      	it	lt
 8015962:	4240      	neglt	r0, r0
 8015964:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8015968:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8015a64 <__ieee754_powf+0x558>
 801596c:	ee17 3a10 	vmov	r3, s14
 8015970:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015974:	f023 030f 	bic.w	r3, r3, #15
 8015978:	ee07 3a10 	vmov	s14, r3
 801597c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015980:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015984:	eddf 7a38 	vldr	s15, [pc, #224]	; 8015a68 <__ieee754_powf+0x55c>
 8015988:	ee67 7a27 	vmul.f32	s15, s14, s15
 801598c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8015990:	eddf 6a36 	vldr	s13, [pc, #216]	; 8015a6c <__ieee754_powf+0x560>
 8015994:	eeb0 0a67 	vmov.f32	s0, s15
 8015998:	eea7 0a26 	vfma.f32	s0, s14, s13
 801599c:	eeb0 6a40 	vmov.f32	s12, s0
 80159a0:	eea7 6a66 	vfms.f32	s12, s14, s13
 80159a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80159a8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80159ac:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015a70 <__ieee754_powf+0x564>
 80159b0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8015a74 <__ieee754_powf+0x568>
 80159b4:	eea7 6a26 	vfma.f32	s12, s14, s13
 80159b8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8015a78 <__ieee754_powf+0x56c>
 80159bc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80159c0:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8015a7c <__ieee754_powf+0x570>
 80159c4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80159c8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8015a80 <__ieee754_powf+0x574>
 80159cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80159d0:	eeb0 6a40 	vmov.f32	s12, s0
 80159d4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80159d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80159dc:	eeb0 7a46 	vmov.f32	s14, s12
 80159e0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80159e4:	ee20 6a06 	vmul.f32	s12, s0, s12
 80159e8:	eee0 7a27 	vfma.f32	s15, s0, s15
 80159ec:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80159f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80159f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80159fc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015a00:	ee10 3a10 	vmov	r3, s0
 8015a04:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015a08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015a0c:	da1a      	bge.n	8015a44 <__ieee754_powf+0x538>
 8015a0e:	f000 fe83 	bl	8016718 <scalbnf>
 8015a12:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015a16:	e5cd      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015a18:	4a1a      	ldr	r2, [pc, #104]	; (8015a84 <__ieee754_powf+0x578>)
 8015a1a:	4293      	cmp	r3, r2
 8015a1c:	dd02      	ble.n	8015a24 <__ieee754_powf+0x518>
 8015a1e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8015a88 <__ieee754_powf+0x57c>
 8015a22:	e67b      	b.n	801571c <__ieee754_powf+0x210>
 8015a24:	d108      	bne.n	8015a38 <__ieee754_powf+0x52c>
 8015a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015a2a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8015a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a32:	f6ff af7b 	blt.w	801592c <__ieee754_powf+0x420>
 8015a36:	e7f2      	b.n	8015a1e <__ieee754_powf+0x512>
 8015a38:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8015a3c:	f73f af76 	bgt.w	801592c <__ieee754_powf+0x420>
 8015a40:	2000      	movs	r0, #0
 8015a42:	e78f      	b.n	8015964 <__ieee754_powf+0x458>
 8015a44:	ee00 3a10 	vmov	s0, r3
 8015a48:	e7e3      	b.n	8015a12 <__ieee754_powf+0x506>
 8015a4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015a4e:	e5b1      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015a50:	eeb0 0a68 	vmov.f32	s0, s17
 8015a54:	e5ae      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015a56:	eeb0 0a48 	vmov.f32	s0, s16
 8015a5a:	e5ab      	b.n	80155b4 <__ieee754_powf+0xa8>
 8015a5c:	2600      	movs	r6, #0
 8015a5e:	e590      	b.n	8015582 <__ieee754_powf+0x76>
 8015a60:	007fffff 	.word	0x007fffff
 8015a64:	3f317218 	.word	0x3f317218
 8015a68:	35bfbe8c 	.word	0x35bfbe8c
 8015a6c:	3f317200 	.word	0x3f317200
 8015a70:	3331bb4c 	.word	0x3331bb4c
 8015a74:	b5ddea0e 	.word	0xb5ddea0e
 8015a78:	388ab355 	.word	0x388ab355
 8015a7c:	bb360b61 	.word	0xbb360b61
 8015a80:	3e2aaaab 	.word	0x3e2aaaab
 8015a84:	43160000 	.word	0x43160000
 8015a88:	0da24260 	.word	0x0da24260

08015a8c <__ieee754_sqrtf>:
 8015a8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015a90:	4770      	bx	lr
 8015a92:	0000      	movs	r0, r0
 8015a94:	0000      	movs	r0, r0
	...

08015a98 <__kernel_cos>:
 8015a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a9c:	ec57 6b10 	vmov	r6, r7, d0
 8015aa0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015aa4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015aa8:	ed8d 1b00 	vstr	d1, [sp]
 8015aac:	da07      	bge.n	8015abe <__kernel_cos+0x26>
 8015aae:	ee10 0a10 	vmov	r0, s0
 8015ab2:	4639      	mov	r1, r7
 8015ab4:	f7eb f860 	bl	8000b78 <__aeabi_d2iz>
 8015ab8:	2800      	cmp	r0, #0
 8015aba:	f000 8088 	beq.w	8015bce <__kernel_cos+0x136>
 8015abe:	4632      	mov	r2, r6
 8015ac0:	463b      	mov	r3, r7
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	4639      	mov	r1, r7
 8015ac6:	f7ea fda7 	bl	8000618 <__aeabi_dmul>
 8015aca:	4b51      	ldr	r3, [pc, #324]	; (8015c10 <__kernel_cos+0x178>)
 8015acc:	2200      	movs	r2, #0
 8015ace:	4604      	mov	r4, r0
 8015ad0:	460d      	mov	r5, r1
 8015ad2:	f7ea fda1 	bl	8000618 <__aeabi_dmul>
 8015ad6:	a340      	add	r3, pc, #256	; (adr r3, 8015bd8 <__kernel_cos+0x140>)
 8015ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015adc:	4682      	mov	sl, r0
 8015ade:	468b      	mov	fp, r1
 8015ae0:	4620      	mov	r0, r4
 8015ae2:	4629      	mov	r1, r5
 8015ae4:	f7ea fd98 	bl	8000618 <__aeabi_dmul>
 8015ae8:	a33d      	add	r3, pc, #244	; (adr r3, 8015be0 <__kernel_cos+0x148>)
 8015aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aee:	f7ea fbdd 	bl	80002ac <__adddf3>
 8015af2:	4622      	mov	r2, r4
 8015af4:	462b      	mov	r3, r5
 8015af6:	f7ea fd8f 	bl	8000618 <__aeabi_dmul>
 8015afa:	a33b      	add	r3, pc, #236	; (adr r3, 8015be8 <__kernel_cos+0x150>)
 8015afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b00:	f7ea fbd2 	bl	80002a8 <__aeabi_dsub>
 8015b04:	4622      	mov	r2, r4
 8015b06:	462b      	mov	r3, r5
 8015b08:	f7ea fd86 	bl	8000618 <__aeabi_dmul>
 8015b0c:	a338      	add	r3, pc, #224	; (adr r3, 8015bf0 <__kernel_cos+0x158>)
 8015b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b12:	f7ea fbcb 	bl	80002ac <__adddf3>
 8015b16:	4622      	mov	r2, r4
 8015b18:	462b      	mov	r3, r5
 8015b1a:	f7ea fd7d 	bl	8000618 <__aeabi_dmul>
 8015b1e:	a336      	add	r3, pc, #216	; (adr r3, 8015bf8 <__kernel_cos+0x160>)
 8015b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b24:	f7ea fbc0 	bl	80002a8 <__aeabi_dsub>
 8015b28:	4622      	mov	r2, r4
 8015b2a:	462b      	mov	r3, r5
 8015b2c:	f7ea fd74 	bl	8000618 <__aeabi_dmul>
 8015b30:	a333      	add	r3, pc, #204	; (adr r3, 8015c00 <__kernel_cos+0x168>)
 8015b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b36:	f7ea fbb9 	bl	80002ac <__adddf3>
 8015b3a:	4622      	mov	r2, r4
 8015b3c:	462b      	mov	r3, r5
 8015b3e:	f7ea fd6b 	bl	8000618 <__aeabi_dmul>
 8015b42:	4622      	mov	r2, r4
 8015b44:	462b      	mov	r3, r5
 8015b46:	f7ea fd67 	bl	8000618 <__aeabi_dmul>
 8015b4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b4e:	4604      	mov	r4, r0
 8015b50:	460d      	mov	r5, r1
 8015b52:	4630      	mov	r0, r6
 8015b54:	4639      	mov	r1, r7
 8015b56:	f7ea fd5f 	bl	8000618 <__aeabi_dmul>
 8015b5a:	460b      	mov	r3, r1
 8015b5c:	4602      	mov	r2, r0
 8015b5e:	4629      	mov	r1, r5
 8015b60:	4620      	mov	r0, r4
 8015b62:	f7ea fba1 	bl	80002a8 <__aeabi_dsub>
 8015b66:	4b2b      	ldr	r3, [pc, #172]	; (8015c14 <__kernel_cos+0x17c>)
 8015b68:	4598      	cmp	r8, r3
 8015b6a:	4606      	mov	r6, r0
 8015b6c:	460f      	mov	r7, r1
 8015b6e:	dc10      	bgt.n	8015b92 <__kernel_cos+0xfa>
 8015b70:	4602      	mov	r2, r0
 8015b72:	460b      	mov	r3, r1
 8015b74:	4650      	mov	r0, sl
 8015b76:	4659      	mov	r1, fp
 8015b78:	f7ea fb96 	bl	80002a8 <__aeabi_dsub>
 8015b7c:	460b      	mov	r3, r1
 8015b7e:	4926      	ldr	r1, [pc, #152]	; (8015c18 <__kernel_cos+0x180>)
 8015b80:	4602      	mov	r2, r0
 8015b82:	2000      	movs	r0, #0
 8015b84:	f7ea fb90 	bl	80002a8 <__aeabi_dsub>
 8015b88:	ec41 0b10 	vmov	d0, r0, r1
 8015b8c:	b003      	add	sp, #12
 8015b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b92:	4b22      	ldr	r3, [pc, #136]	; (8015c1c <__kernel_cos+0x184>)
 8015b94:	4920      	ldr	r1, [pc, #128]	; (8015c18 <__kernel_cos+0x180>)
 8015b96:	4598      	cmp	r8, r3
 8015b98:	bfcc      	ite	gt
 8015b9a:	4d21      	ldrgt	r5, [pc, #132]	; (8015c20 <__kernel_cos+0x188>)
 8015b9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015ba0:	2400      	movs	r4, #0
 8015ba2:	4622      	mov	r2, r4
 8015ba4:	462b      	mov	r3, r5
 8015ba6:	2000      	movs	r0, #0
 8015ba8:	f7ea fb7e 	bl	80002a8 <__aeabi_dsub>
 8015bac:	4622      	mov	r2, r4
 8015bae:	4680      	mov	r8, r0
 8015bb0:	4689      	mov	r9, r1
 8015bb2:	462b      	mov	r3, r5
 8015bb4:	4650      	mov	r0, sl
 8015bb6:	4659      	mov	r1, fp
 8015bb8:	f7ea fb76 	bl	80002a8 <__aeabi_dsub>
 8015bbc:	4632      	mov	r2, r6
 8015bbe:	463b      	mov	r3, r7
 8015bc0:	f7ea fb72 	bl	80002a8 <__aeabi_dsub>
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	460b      	mov	r3, r1
 8015bc8:	4640      	mov	r0, r8
 8015bca:	4649      	mov	r1, r9
 8015bcc:	e7da      	b.n	8015b84 <__kernel_cos+0xec>
 8015bce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015c08 <__kernel_cos+0x170>
 8015bd2:	e7db      	b.n	8015b8c <__kernel_cos+0xf4>
 8015bd4:	f3af 8000 	nop.w
 8015bd8:	be8838d4 	.word	0xbe8838d4
 8015bdc:	bda8fae9 	.word	0xbda8fae9
 8015be0:	bdb4b1c4 	.word	0xbdb4b1c4
 8015be4:	3e21ee9e 	.word	0x3e21ee9e
 8015be8:	809c52ad 	.word	0x809c52ad
 8015bec:	3e927e4f 	.word	0x3e927e4f
 8015bf0:	19cb1590 	.word	0x19cb1590
 8015bf4:	3efa01a0 	.word	0x3efa01a0
 8015bf8:	16c15177 	.word	0x16c15177
 8015bfc:	3f56c16c 	.word	0x3f56c16c
 8015c00:	5555554c 	.word	0x5555554c
 8015c04:	3fa55555 	.word	0x3fa55555
 8015c08:	00000000 	.word	0x00000000
 8015c0c:	3ff00000 	.word	0x3ff00000
 8015c10:	3fe00000 	.word	0x3fe00000
 8015c14:	3fd33332 	.word	0x3fd33332
 8015c18:	3ff00000 	.word	0x3ff00000
 8015c1c:	3fe90000 	.word	0x3fe90000
 8015c20:	3fd20000 	.word	0x3fd20000
 8015c24:	00000000 	.word	0x00000000

08015c28 <__kernel_rem_pio2>:
 8015c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2c:	ed2d 8b02 	vpush	{d8}
 8015c30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8015c34:	f112 0f14 	cmn.w	r2, #20
 8015c38:	9308      	str	r3, [sp, #32]
 8015c3a:	9101      	str	r1, [sp, #4]
 8015c3c:	4bc6      	ldr	r3, [pc, #792]	; (8015f58 <__kernel_rem_pio2+0x330>)
 8015c3e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8015c40:	9009      	str	r0, [sp, #36]	; 0x24
 8015c42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015c46:	9304      	str	r3, [sp, #16]
 8015c48:	9b08      	ldr	r3, [sp, #32]
 8015c4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015c4e:	bfa8      	it	ge
 8015c50:	1ed4      	subge	r4, r2, #3
 8015c52:	9306      	str	r3, [sp, #24]
 8015c54:	bfb2      	itee	lt
 8015c56:	2400      	movlt	r4, #0
 8015c58:	2318      	movge	r3, #24
 8015c5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8015c5e:	f06f 0317 	mvn.w	r3, #23
 8015c62:	fb04 3303 	mla	r3, r4, r3, r3
 8015c66:	eb03 0a02 	add.w	sl, r3, r2
 8015c6a:	9b04      	ldr	r3, [sp, #16]
 8015c6c:	9a06      	ldr	r2, [sp, #24]
 8015c6e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015f48 <__kernel_rem_pio2+0x320>
 8015c72:	eb03 0802 	add.w	r8, r3, r2
 8015c76:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015c78:	1aa7      	subs	r7, r4, r2
 8015c7a:	ae20      	add	r6, sp, #128	; 0x80
 8015c7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8015c80:	2500      	movs	r5, #0
 8015c82:	4545      	cmp	r5, r8
 8015c84:	dd18      	ble.n	8015cb8 <__kernel_rem_pio2+0x90>
 8015c86:	9b08      	ldr	r3, [sp, #32]
 8015c88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015c8c:	aa20      	add	r2, sp, #128	; 0x80
 8015c8e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8015f48 <__kernel_rem_pio2+0x320>
 8015c92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8015c96:	f1c3 0301 	rsb	r3, r3, #1
 8015c9a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8015c9e:	9307      	str	r3, [sp, #28]
 8015ca0:	9b07      	ldr	r3, [sp, #28]
 8015ca2:	9a04      	ldr	r2, [sp, #16]
 8015ca4:	4443      	add	r3, r8
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	db2f      	blt.n	8015d0a <__kernel_rem_pio2+0xe2>
 8015caa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015cae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015cb2:	462f      	mov	r7, r5
 8015cb4:	2600      	movs	r6, #0
 8015cb6:	e01b      	b.n	8015cf0 <__kernel_rem_pio2+0xc8>
 8015cb8:	42ef      	cmn	r7, r5
 8015cba:	d407      	bmi.n	8015ccc <__kernel_rem_pio2+0xa4>
 8015cbc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8015cc0:	f7ea fc40 	bl	8000544 <__aeabi_i2d>
 8015cc4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015cc8:	3501      	adds	r5, #1
 8015cca:	e7da      	b.n	8015c82 <__kernel_rem_pio2+0x5a>
 8015ccc:	ec51 0b18 	vmov	r0, r1, d8
 8015cd0:	e7f8      	b.n	8015cc4 <__kernel_rem_pio2+0x9c>
 8015cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015cd6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015cda:	f7ea fc9d 	bl	8000618 <__aeabi_dmul>
 8015cde:	4602      	mov	r2, r0
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ce6:	f7ea fae1 	bl	80002ac <__adddf3>
 8015cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015cee:	3601      	adds	r6, #1
 8015cf0:	9b06      	ldr	r3, [sp, #24]
 8015cf2:	429e      	cmp	r6, r3
 8015cf4:	f1a7 0708 	sub.w	r7, r7, #8
 8015cf8:	ddeb      	ble.n	8015cd2 <__kernel_rem_pio2+0xaa>
 8015cfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015cfe:	3508      	adds	r5, #8
 8015d00:	ecab 7b02 	vstmia	fp!, {d7}
 8015d04:	f108 0801 	add.w	r8, r8, #1
 8015d08:	e7ca      	b.n	8015ca0 <__kernel_rem_pio2+0x78>
 8015d0a:	9b04      	ldr	r3, [sp, #16]
 8015d0c:	aa0c      	add	r2, sp, #48	; 0x30
 8015d0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d14:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015d16:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015d1a:	9c04      	ldr	r4, [sp, #16]
 8015d1c:	930a      	str	r3, [sp, #40]	; 0x28
 8015d1e:	ab98      	add	r3, sp, #608	; 0x260
 8015d20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015d24:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8015d28:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8015d2c:	f8cd b008 	str.w	fp, [sp, #8]
 8015d30:	4625      	mov	r5, r4
 8015d32:	2d00      	cmp	r5, #0
 8015d34:	dc78      	bgt.n	8015e28 <__kernel_rem_pio2+0x200>
 8015d36:	ec47 6b10 	vmov	d0, r6, r7
 8015d3a:	4650      	mov	r0, sl
 8015d3c:	f000 fbfc 	bl	8016538 <scalbn>
 8015d40:	ec57 6b10 	vmov	r6, r7, d0
 8015d44:	2200      	movs	r2, #0
 8015d46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015d4a:	ee10 0a10 	vmov	r0, s0
 8015d4e:	4639      	mov	r1, r7
 8015d50:	f7ea fc62 	bl	8000618 <__aeabi_dmul>
 8015d54:	ec41 0b10 	vmov	d0, r0, r1
 8015d58:	f000 fb6e 	bl	8016438 <floor>
 8015d5c:	4b7f      	ldr	r3, [pc, #508]	; (8015f5c <__kernel_rem_pio2+0x334>)
 8015d5e:	ec51 0b10 	vmov	r0, r1, d0
 8015d62:	2200      	movs	r2, #0
 8015d64:	f7ea fc58 	bl	8000618 <__aeabi_dmul>
 8015d68:	4602      	mov	r2, r0
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	4639      	mov	r1, r7
 8015d70:	f7ea fa9a 	bl	80002a8 <__aeabi_dsub>
 8015d74:	460f      	mov	r7, r1
 8015d76:	4606      	mov	r6, r0
 8015d78:	f7ea fefe 	bl	8000b78 <__aeabi_d2iz>
 8015d7c:	9007      	str	r0, [sp, #28]
 8015d7e:	f7ea fbe1 	bl	8000544 <__aeabi_i2d>
 8015d82:	4602      	mov	r2, r0
 8015d84:	460b      	mov	r3, r1
 8015d86:	4630      	mov	r0, r6
 8015d88:	4639      	mov	r1, r7
 8015d8a:	f7ea fa8d 	bl	80002a8 <__aeabi_dsub>
 8015d8e:	f1ba 0f00 	cmp.w	sl, #0
 8015d92:	4606      	mov	r6, r0
 8015d94:	460f      	mov	r7, r1
 8015d96:	dd70      	ble.n	8015e7a <__kernel_rem_pio2+0x252>
 8015d98:	1e62      	subs	r2, r4, #1
 8015d9a:	ab0c      	add	r3, sp, #48	; 0x30
 8015d9c:	9d07      	ldr	r5, [sp, #28]
 8015d9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015da2:	f1ca 0118 	rsb	r1, sl, #24
 8015da6:	fa40 f301 	asr.w	r3, r0, r1
 8015daa:	441d      	add	r5, r3
 8015dac:	408b      	lsls	r3, r1
 8015dae:	1ac0      	subs	r0, r0, r3
 8015db0:	ab0c      	add	r3, sp, #48	; 0x30
 8015db2:	9507      	str	r5, [sp, #28]
 8015db4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015db8:	f1ca 0317 	rsb	r3, sl, #23
 8015dbc:	fa40 f303 	asr.w	r3, r0, r3
 8015dc0:	9302      	str	r3, [sp, #8]
 8015dc2:	9b02      	ldr	r3, [sp, #8]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	dd66      	ble.n	8015e96 <__kernel_rem_pio2+0x26e>
 8015dc8:	9b07      	ldr	r3, [sp, #28]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	3301      	adds	r3, #1
 8015dce:	9307      	str	r3, [sp, #28]
 8015dd0:	4615      	mov	r5, r2
 8015dd2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8015dd6:	4294      	cmp	r4, r2
 8015dd8:	f300 8099 	bgt.w	8015f0e <__kernel_rem_pio2+0x2e6>
 8015ddc:	f1ba 0f00 	cmp.w	sl, #0
 8015de0:	dd07      	ble.n	8015df2 <__kernel_rem_pio2+0x1ca>
 8015de2:	f1ba 0f01 	cmp.w	sl, #1
 8015de6:	f000 80a5 	beq.w	8015f34 <__kernel_rem_pio2+0x30c>
 8015dea:	f1ba 0f02 	cmp.w	sl, #2
 8015dee:	f000 80c1 	beq.w	8015f74 <__kernel_rem_pio2+0x34c>
 8015df2:	9b02      	ldr	r3, [sp, #8]
 8015df4:	2b02      	cmp	r3, #2
 8015df6:	d14e      	bne.n	8015e96 <__kernel_rem_pio2+0x26e>
 8015df8:	4632      	mov	r2, r6
 8015dfa:	463b      	mov	r3, r7
 8015dfc:	4958      	ldr	r1, [pc, #352]	; (8015f60 <__kernel_rem_pio2+0x338>)
 8015dfe:	2000      	movs	r0, #0
 8015e00:	f7ea fa52 	bl	80002a8 <__aeabi_dsub>
 8015e04:	4606      	mov	r6, r0
 8015e06:	460f      	mov	r7, r1
 8015e08:	2d00      	cmp	r5, #0
 8015e0a:	d044      	beq.n	8015e96 <__kernel_rem_pio2+0x26e>
 8015e0c:	4650      	mov	r0, sl
 8015e0e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015f50 <__kernel_rem_pio2+0x328>
 8015e12:	f000 fb91 	bl	8016538 <scalbn>
 8015e16:	4630      	mov	r0, r6
 8015e18:	4639      	mov	r1, r7
 8015e1a:	ec53 2b10 	vmov	r2, r3, d0
 8015e1e:	f7ea fa43 	bl	80002a8 <__aeabi_dsub>
 8015e22:	4606      	mov	r6, r0
 8015e24:	460f      	mov	r7, r1
 8015e26:	e036      	b.n	8015e96 <__kernel_rem_pio2+0x26e>
 8015e28:	4b4e      	ldr	r3, [pc, #312]	; (8015f64 <__kernel_rem_pio2+0x33c>)
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	4630      	mov	r0, r6
 8015e2e:	4639      	mov	r1, r7
 8015e30:	f7ea fbf2 	bl	8000618 <__aeabi_dmul>
 8015e34:	f7ea fea0 	bl	8000b78 <__aeabi_d2iz>
 8015e38:	f7ea fb84 	bl	8000544 <__aeabi_i2d>
 8015e3c:	4b4a      	ldr	r3, [pc, #296]	; (8015f68 <__kernel_rem_pio2+0x340>)
 8015e3e:	2200      	movs	r2, #0
 8015e40:	4680      	mov	r8, r0
 8015e42:	4689      	mov	r9, r1
 8015e44:	f7ea fbe8 	bl	8000618 <__aeabi_dmul>
 8015e48:	4602      	mov	r2, r0
 8015e4a:	460b      	mov	r3, r1
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	4639      	mov	r1, r7
 8015e50:	f7ea fa2a 	bl	80002a8 <__aeabi_dsub>
 8015e54:	f7ea fe90 	bl	8000b78 <__aeabi_d2iz>
 8015e58:	9b02      	ldr	r3, [sp, #8]
 8015e5a:	f843 0b04 	str.w	r0, [r3], #4
 8015e5e:	3d01      	subs	r5, #1
 8015e60:	9302      	str	r3, [sp, #8]
 8015e62:	ab70      	add	r3, sp, #448	; 0x1c0
 8015e64:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e6c:	4640      	mov	r0, r8
 8015e6e:	4649      	mov	r1, r9
 8015e70:	f7ea fa1c 	bl	80002ac <__adddf3>
 8015e74:	4606      	mov	r6, r0
 8015e76:	460f      	mov	r7, r1
 8015e78:	e75b      	b.n	8015d32 <__kernel_rem_pio2+0x10a>
 8015e7a:	d105      	bne.n	8015e88 <__kernel_rem_pio2+0x260>
 8015e7c:	1e63      	subs	r3, r4, #1
 8015e7e:	aa0c      	add	r2, sp, #48	; 0x30
 8015e80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015e84:	15c3      	asrs	r3, r0, #23
 8015e86:	e79b      	b.n	8015dc0 <__kernel_rem_pio2+0x198>
 8015e88:	4b38      	ldr	r3, [pc, #224]	; (8015f6c <__kernel_rem_pio2+0x344>)
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f7ea fe4a 	bl	8000b24 <__aeabi_dcmpge>
 8015e90:	2800      	cmp	r0, #0
 8015e92:	d139      	bne.n	8015f08 <__kernel_rem_pio2+0x2e0>
 8015e94:	9002      	str	r0, [sp, #8]
 8015e96:	2200      	movs	r2, #0
 8015e98:	2300      	movs	r3, #0
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	4639      	mov	r1, r7
 8015e9e:	f7ea fe23 	bl	8000ae8 <__aeabi_dcmpeq>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	f000 80b4 	beq.w	8016010 <__kernel_rem_pio2+0x3e8>
 8015ea8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8015eac:	465b      	mov	r3, fp
 8015eae:	2200      	movs	r2, #0
 8015eb0:	9904      	ldr	r1, [sp, #16]
 8015eb2:	428b      	cmp	r3, r1
 8015eb4:	da65      	bge.n	8015f82 <__kernel_rem_pio2+0x35a>
 8015eb6:	2a00      	cmp	r2, #0
 8015eb8:	d07b      	beq.n	8015fb2 <__kernel_rem_pio2+0x38a>
 8015eba:	ab0c      	add	r3, sp, #48	; 0x30
 8015ebc:	f1aa 0a18 	sub.w	sl, sl, #24
 8015ec0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	f000 80a0 	beq.w	801600a <__kernel_rem_pio2+0x3e2>
 8015eca:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8015f50 <__kernel_rem_pio2+0x328>
 8015ece:	4650      	mov	r0, sl
 8015ed0:	f000 fb32 	bl	8016538 <scalbn>
 8015ed4:	4f23      	ldr	r7, [pc, #140]	; (8015f64 <__kernel_rem_pio2+0x33c>)
 8015ed6:	ec55 4b10 	vmov	r4, r5, d0
 8015eda:	46d8      	mov	r8, fp
 8015edc:	2600      	movs	r6, #0
 8015ede:	f1b8 0f00 	cmp.w	r8, #0
 8015ee2:	f280 80cf 	bge.w	8016084 <__kernel_rem_pio2+0x45c>
 8015ee6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8015f48 <__kernel_rem_pio2+0x320>
 8015eea:	465f      	mov	r7, fp
 8015eec:	f04f 0800 	mov.w	r8, #0
 8015ef0:	2f00      	cmp	r7, #0
 8015ef2:	f2c0 80fd 	blt.w	80160f0 <__kernel_rem_pio2+0x4c8>
 8015ef6:	ab70      	add	r3, sp, #448	; 0x1c0
 8015ef8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8015f70 <__kernel_rem_pio2+0x348>
 8015efc:	ec55 4b18 	vmov	r4, r5, d8
 8015f00:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8015f04:	2600      	movs	r6, #0
 8015f06:	e0e5      	b.n	80160d4 <__kernel_rem_pio2+0x4ac>
 8015f08:	2302      	movs	r3, #2
 8015f0a:	9302      	str	r3, [sp, #8]
 8015f0c:	e75c      	b.n	8015dc8 <__kernel_rem_pio2+0x1a0>
 8015f0e:	f8db 3000 	ldr.w	r3, [fp]
 8015f12:	b955      	cbnz	r5, 8015f2a <__kernel_rem_pio2+0x302>
 8015f14:	b123      	cbz	r3, 8015f20 <__kernel_rem_pio2+0x2f8>
 8015f16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015f1a:	f8cb 3000 	str.w	r3, [fp]
 8015f1e:	2301      	movs	r3, #1
 8015f20:	3201      	adds	r2, #1
 8015f22:	f10b 0b04 	add.w	fp, fp, #4
 8015f26:	461d      	mov	r5, r3
 8015f28:	e755      	b.n	8015dd6 <__kernel_rem_pio2+0x1ae>
 8015f2a:	1acb      	subs	r3, r1, r3
 8015f2c:	f8cb 3000 	str.w	r3, [fp]
 8015f30:	462b      	mov	r3, r5
 8015f32:	e7f5      	b.n	8015f20 <__kernel_rem_pio2+0x2f8>
 8015f34:	1e62      	subs	r2, r4, #1
 8015f36:	ab0c      	add	r3, sp, #48	; 0x30
 8015f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015f40:	a90c      	add	r1, sp, #48	; 0x30
 8015f42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015f46:	e754      	b.n	8015df2 <__kernel_rem_pio2+0x1ca>
	...
 8015f54:	3ff00000 	.word	0x3ff00000
 8015f58:	0805f9f0 	.word	0x0805f9f0
 8015f5c:	40200000 	.word	0x40200000
 8015f60:	3ff00000 	.word	0x3ff00000
 8015f64:	3e700000 	.word	0x3e700000
 8015f68:	41700000 	.word	0x41700000
 8015f6c:	3fe00000 	.word	0x3fe00000
 8015f70:	0805f9b0 	.word	0x0805f9b0
 8015f74:	1e62      	subs	r2, r4, #1
 8015f76:	ab0c      	add	r3, sp, #48	; 0x30
 8015f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f7c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015f80:	e7de      	b.n	8015f40 <__kernel_rem_pio2+0x318>
 8015f82:	a90c      	add	r1, sp, #48	; 0x30
 8015f84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015f88:	3b01      	subs	r3, #1
 8015f8a:	430a      	orrs	r2, r1
 8015f8c:	e790      	b.n	8015eb0 <__kernel_rem_pio2+0x288>
 8015f8e:	3301      	adds	r3, #1
 8015f90:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015f94:	2900      	cmp	r1, #0
 8015f96:	d0fa      	beq.n	8015f8e <__kernel_rem_pio2+0x366>
 8015f98:	9a08      	ldr	r2, [sp, #32]
 8015f9a:	18e3      	adds	r3, r4, r3
 8015f9c:	18a6      	adds	r6, r4, r2
 8015f9e:	aa20      	add	r2, sp, #128	; 0x80
 8015fa0:	1c65      	adds	r5, r4, #1
 8015fa2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8015fa6:	9302      	str	r3, [sp, #8]
 8015fa8:	9b02      	ldr	r3, [sp, #8]
 8015faa:	42ab      	cmp	r3, r5
 8015fac:	da04      	bge.n	8015fb8 <__kernel_rem_pio2+0x390>
 8015fae:	461c      	mov	r4, r3
 8015fb0:	e6b5      	b.n	8015d1e <__kernel_rem_pio2+0xf6>
 8015fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	e7eb      	b.n	8015f90 <__kernel_rem_pio2+0x368>
 8015fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015fbe:	f7ea fac1 	bl	8000544 <__aeabi_i2d>
 8015fc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fc8:	46b3      	mov	fp, r6
 8015fca:	461c      	mov	r4, r3
 8015fcc:	2700      	movs	r7, #0
 8015fce:	f04f 0800 	mov.w	r8, #0
 8015fd2:	f04f 0900 	mov.w	r9, #0
 8015fd6:	9b06      	ldr	r3, [sp, #24]
 8015fd8:	429f      	cmp	r7, r3
 8015fda:	dd06      	ble.n	8015fea <__kernel_rem_pio2+0x3c2>
 8015fdc:	ab70      	add	r3, sp, #448	; 0x1c0
 8015fde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015fe2:	e9c3 8900 	strd	r8, r9, [r3]
 8015fe6:	3501      	adds	r5, #1
 8015fe8:	e7de      	b.n	8015fa8 <__kernel_rem_pio2+0x380>
 8015fea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015fee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8015ff2:	f7ea fb11 	bl	8000618 <__aeabi_dmul>
 8015ff6:	4602      	mov	r2, r0
 8015ff8:	460b      	mov	r3, r1
 8015ffa:	4640      	mov	r0, r8
 8015ffc:	4649      	mov	r1, r9
 8015ffe:	f7ea f955 	bl	80002ac <__adddf3>
 8016002:	3701      	adds	r7, #1
 8016004:	4680      	mov	r8, r0
 8016006:	4689      	mov	r9, r1
 8016008:	e7e5      	b.n	8015fd6 <__kernel_rem_pio2+0x3ae>
 801600a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801600e:	e754      	b.n	8015eba <__kernel_rem_pio2+0x292>
 8016010:	ec47 6b10 	vmov	d0, r6, r7
 8016014:	f1ca 0000 	rsb	r0, sl, #0
 8016018:	f000 fa8e 	bl	8016538 <scalbn>
 801601c:	ec57 6b10 	vmov	r6, r7, d0
 8016020:	4b9f      	ldr	r3, [pc, #636]	; (80162a0 <__kernel_rem_pio2+0x678>)
 8016022:	ee10 0a10 	vmov	r0, s0
 8016026:	2200      	movs	r2, #0
 8016028:	4639      	mov	r1, r7
 801602a:	f7ea fd7b 	bl	8000b24 <__aeabi_dcmpge>
 801602e:	b300      	cbz	r0, 8016072 <__kernel_rem_pio2+0x44a>
 8016030:	4b9c      	ldr	r3, [pc, #624]	; (80162a4 <__kernel_rem_pio2+0x67c>)
 8016032:	2200      	movs	r2, #0
 8016034:	4630      	mov	r0, r6
 8016036:	4639      	mov	r1, r7
 8016038:	f7ea faee 	bl	8000618 <__aeabi_dmul>
 801603c:	f7ea fd9c 	bl	8000b78 <__aeabi_d2iz>
 8016040:	4605      	mov	r5, r0
 8016042:	f7ea fa7f 	bl	8000544 <__aeabi_i2d>
 8016046:	4b96      	ldr	r3, [pc, #600]	; (80162a0 <__kernel_rem_pio2+0x678>)
 8016048:	2200      	movs	r2, #0
 801604a:	f7ea fae5 	bl	8000618 <__aeabi_dmul>
 801604e:	460b      	mov	r3, r1
 8016050:	4602      	mov	r2, r0
 8016052:	4639      	mov	r1, r7
 8016054:	4630      	mov	r0, r6
 8016056:	f7ea f927 	bl	80002a8 <__aeabi_dsub>
 801605a:	f7ea fd8d 	bl	8000b78 <__aeabi_d2iz>
 801605e:	f104 0b01 	add.w	fp, r4, #1
 8016062:	ab0c      	add	r3, sp, #48	; 0x30
 8016064:	f10a 0a18 	add.w	sl, sl, #24
 8016068:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801606c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8016070:	e72b      	b.n	8015eca <__kernel_rem_pio2+0x2a2>
 8016072:	4630      	mov	r0, r6
 8016074:	4639      	mov	r1, r7
 8016076:	f7ea fd7f 	bl	8000b78 <__aeabi_d2iz>
 801607a:	ab0c      	add	r3, sp, #48	; 0x30
 801607c:	46a3      	mov	fp, r4
 801607e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016082:	e722      	b.n	8015eca <__kernel_rem_pio2+0x2a2>
 8016084:	ab70      	add	r3, sp, #448	; 0x1c0
 8016086:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801608a:	ab0c      	add	r3, sp, #48	; 0x30
 801608c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016090:	f7ea fa58 	bl	8000544 <__aeabi_i2d>
 8016094:	4622      	mov	r2, r4
 8016096:	462b      	mov	r3, r5
 8016098:	f7ea fabe 	bl	8000618 <__aeabi_dmul>
 801609c:	4632      	mov	r2, r6
 801609e:	e9c9 0100 	strd	r0, r1, [r9]
 80160a2:	463b      	mov	r3, r7
 80160a4:	4620      	mov	r0, r4
 80160a6:	4629      	mov	r1, r5
 80160a8:	f7ea fab6 	bl	8000618 <__aeabi_dmul>
 80160ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80160b0:	4604      	mov	r4, r0
 80160b2:	460d      	mov	r5, r1
 80160b4:	e713      	b.n	8015ede <__kernel_rem_pio2+0x2b6>
 80160b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80160ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80160be:	f7ea faab 	bl	8000618 <__aeabi_dmul>
 80160c2:	4602      	mov	r2, r0
 80160c4:	460b      	mov	r3, r1
 80160c6:	4620      	mov	r0, r4
 80160c8:	4629      	mov	r1, r5
 80160ca:	f7ea f8ef 	bl	80002ac <__adddf3>
 80160ce:	3601      	adds	r6, #1
 80160d0:	4604      	mov	r4, r0
 80160d2:	460d      	mov	r5, r1
 80160d4:	9b04      	ldr	r3, [sp, #16]
 80160d6:	429e      	cmp	r6, r3
 80160d8:	dc01      	bgt.n	80160de <__kernel_rem_pio2+0x4b6>
 80160da:	45b0      	cmp	r8, r6
 80160dc:	daeb      	bge.n	80160b6 <__kernel_rem_pio2+0x48e>
 80160de:	ab48      	add	r3, sp, #288	; 0x120
 80160e0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80160e4:	e9c3 4500 	strd	r4, r5, [r3]
 80160e8:	3f01      	subs	r7, #1
 80160ea:	f108 0801 	add.w	r8, r8, #1
 80160ee:	e6ff      	b.n	8015ef0 <__kernel_rem_pio2+0x2c8>
 80160f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80160f2:	2b02      	cmp	r3, #2
 80160f4:	dc0b      	bgt.n	801610e <__kernel_rem_pio2+0x4e6>
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	dc6e      	bgt.n	80161d8 <__kernel_rem_pio2+0x5b0>
 80160fa:	d045      	beq.n	8016188 <__kernel_rem_pio2+0x560>
 80160fc:	9b07      	ldr	r3, [sp, #28]
 80160fe:	f003 0007 	and.w	r0, r3, #7
 8016102:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8016106:	ecbd 8b02 	vpop	{d8}
 801610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801610e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016110:	2b03      	cmp	r3, #3
 8016112:	d1f3      	bne.n	80160fc <__kernel_rem_pio2+0x4d4>
 8016114:	ab48      	add	r3, sp, #288	; 0x120
 8016116:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801611a:	46d0      	mov	r8, sl
 801611c:	46d9      	mov	r9, fp
 801611e:	f1b9 0f00 	cmp.w	r9, #0
 8016122:	f1a8 0808 	sub.w	r8, r8, #8
 8016126:	dc64      	bgt.n	80161f2 <__kernel_rem_pio2+0x5ca>
 8016128:	465c      	mov	r4, fp
 801612a:	2c01      	cmp	r4, #1
 801612c:	f1aa 0a08 	sub.w	sl, sl, #8
 8016130:	dc7e      	bgt.n	8016230 <__kernel_rem_pio2+0x608>
 8016132:	2000      	movs	r0, #0
 8016134:	2100      	movs	r1, #0
 8016136:	f1bb 0f01 	cmp.w	fp, #1
 801613a:	f300 8097 	bgt.w	801626c <__kernel_rem_pio2+0x644>
 801613e:	9b02      	ldr	r3, [sp, #8]
 8016140:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8016144:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8016148:	2b00      	cmp	r3, #0
 801614a:	f040 8099 	bne.w	8016280 <__kernel_rem_pio2+0x658>
 801614e:	9b01      	ldr	r3, [sp, #4]
 8016150:	e9c3 5600 	strd	r5, r6, [r3]
 8016154:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8016158:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801615c:	e7ce      	b.n	80160fc <__kernel_rem_pio2+0x4d4>
 801615e:	ab48      	add	r3, sp, #288	; 0x120
 8016160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016168:	f7ea f8a0 	bl	80002ac <__adddf3>
 801616c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016170:	f1bb 0f00 	cmp.w	fp, #0
 8016174:	daf3      	bge.n	801615e <__kernel_rem_pio2+0x536>
 8016176:	9b02      	ldr	r3, [sp, #8]
 8016178:	b113      	cbz	r3, 8016180 <__kernel_rem_pio2+0x558>
 801617a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801617e:	4619      	mov	r1, r3
 8016180:	9b01      	ldr	r3, [sp, #4]
 8016182:	e9c3 0100 	strd	r0, r1, [r3]
 8016186:	e7b9      	b.n	80160fc <__kernel_rem_pio2+0x4d4>
 8016188:	2000      	movs	r0, #0
 801618a:	2100      	movs	r1, #0
 801618c:	e7f0      	b.n	8016170 <__kernel_rem_pio2+0x548>
 801618e:	ab48      	add	r3, sp, #288	; 0x120
 8016190:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016198:	f7ea f888 	bl	80002ac <__adddf3>
 801619c:	3c01      	subs	r4, #1
 801619e:	2c00      	cmp	r4, #0
 80161a0:	daf5      	bge.n	801618e <__kernel_rem_pio2+0x566>
 80161a2:	9b02      	ldr	r3, [sp, #8]
 80161a4:	b1e3      	cbz	r3, 80161e0 <__kernel_rem_pio2+0x5b8>
 80161a6:	4602      	mov	r2, r0
 80161a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161ac:	9c01      	ldr	r4, [sp, #4]
 80161ae:	e9c4 2300 	strd	r2, r3, [r4]
 80161b2:	4602      	mov	r2, r0
 80161b4:	460b      	mov	r3, r1
 80161b6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80161ba:	f7ea f875 	bl	80002a8 <__aeabi_dsub>
 80161be:	ad4a      	add	r5, sp, #296	; 0x128
 80161c0:	2401      	movs	r4, #1
 80161c2:	45a3      	cmp	fp, r4
 80161c4:	da0f      	bge.n	80161e6 <__kernel_rem_pio2+0x5be>
 80161c6:	9b02      	ldr	r3, [sp, #8]
 80161c8:	b113      	cbz	r3, 80161d0 <__kernel_rem_pio2+0x5a8>
 80161ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161ce:	4619      	mov	r1, r3
 80161d0:	9b01      	ldr	r3, [sp, #4]
 80161d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80161d6:	e791      	b.n	80160fc <__kernel_rem_pio2+0x4d4>
 80161d8:	465c      	mov	r4, fp
 80161da:	2000      	movs	r0, #0
 80161dc:	2100      	movs	r1, #0
 80161de:	e7de      	b.n	801619e <__kernel_rem_pio2+0x576>
 80161e0:	4602      	mov	r2, r0
 80161e2:	460b      	mov	r3, r1
 80161e4:	e7e2      	b.n	80161ac <__kernel_rem_pio2+0x584>
 80161e6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80161ea:	f7ea f85f 	bl	80002ac <__adddf3>
 80161ee:	3401      	adds	r4, #1
 80161f0:	e7e7      	b.n	80161c2 <__kernel_rem_pio2+0x59a>
 80161f2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80161f6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80161fa:	4620      	mov	r0, r4
 80161fc:	4632      	mov	r2, r6
 80161fe:	463b      	mov	r3, r7
 8016200:	4629      	mov	r1, r5
 8016202:	f7ea f853 	bl	80002ac <__adddf3>
 8016206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801620a:	4602      	mov	r2, r0
 801620c:	460b      	mov	r3, r1
 801620e:	4620      	mov	r0, r4
 8016210:	4629      	mov	r1, r5
 8016212:	f7ea f849 	bl	80002a8 <__aeabi_dsub>
 8016216:	4632      	mov	r2, r6
 8016218:	463b      	mov	r3, r7
 801621a:	f7ea f847 	bl	80002ac <__adddf3>
 801621e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8016222:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8016226:	ed88 7b00 	vstr	d7, [r8]
 801622a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801622e:	e776      	b.n	801611e <__kernel_rem_pio2+0x4f6>
 8016230:	e9da 8900 	ldrd	r8, r9, [sl]
 8016234:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8016238:	4640      	mov	r0, r8
 801623a:	4632      	mov	r2, r6
 801623c:	463b      	mov	r3, r7
 801623e:	4649      	mov	r1, r9
 8016240:	f7ea f834 	bl	80002ac <__adddf3>
 8016244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016248:	4602      	mov	r2, r0
 801624a:	460b      	mov	r3, r1
 801624c:	4640      	mov	r0, r8
 801624e:	4649      	mov	r1, r9
 8016250:	f7ea f82a 	bl	80002a8 <__aeabi_dsub>
 8016254:	4632      	mov	r2, r6
 8016256:	463b      	mov	r3, r7
 8016258:	f7ea f828 	bl	80002ac <__adddf3>
 801625c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8016260:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016264:	ed8a 7b00 	vstr	d7, [sl]
 8016268:	3c01      	subs	r4, #1
 801626a:	e75e      	b.n	801612a <__kernel_rem_pio2+0x502>
 801626c:	ab48      	add	r3, sp, #288	; 0x120
 801626e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016276:	f7ea f819 	bl	80002ac <__adddf3>
 801627a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801627e:	e75a      	b.n	8016136 <__kernel_rem_pio2+0x50e>
 8016280:	9b01      	ldr	r3, [sp, #4]
 8016282:	9a01      	ldr	r2, [sp, #4]
 8016284:	601d      	str	r5, [r3, #0]
 8016286:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801628a:	605c      	str	r4, [r3, #4]
 801628c:	609f      	str	r7, [r3, #8]
 801628e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8016292:	60d3      	str	r3, [r2, #12]
 8016294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016298:	6110      	str	r0, [r2, #16]
 801629a:	6153      	str	r3, [r2, #20]
 801629c:	e72e      	b.n	80160fc <__kernel_rem_pio2+0x4d4>
 801629e:	bf00      	nop
 80162a0:	41700000 	.word	0x41700000
 80162a4:	3e700000 	.word	0x3e700000

080162a8 <__kernel_sin>:
 80162a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ac:	ed2d 8b04 	vpush	{d8-d9}
 80162b0:	eeb0 8a41 	vmov.f32	s16, s2
 80162b4:	eef0 8a61 	vmov.f32	s17, s3
 80162b8:	ec55 4b10 	vmov	r4, r5, d0
 80162bc:	b083      	sub	sp, #12
 80162be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80162c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80162c6:	9001      	str	r0, [sp, #4]
 80162c8:	da06      	bge.n	80162d8 <__kernel_sin+0x30>
 80162ca:	ee10 0a10 	vmov	r0, s0
 80162ce:	4629      	mov	r1, r5
 80162d0:	f7ea fc52 	bl	8000b78 <__aeabi_d2iz>
 80162d4:	2800      	cmp	r0, #0
 80162d6:	d051      	beq.n	801637c <__kernel_sin+0xd4>
 80162d8:	4622      	mov	r2, r4
 80162da:	462b      	mov	r3, r5
 80162dc:	4620      	mov	r0, r4
 80162de:	4629      	mov	r1, r5
 80162e0:	f7ea f99a 	bl	8000618 <__aeabi_dmul>
 80162e4:	4682      	mov	sl, r0
 80162e6:	468b      	mov	fp, r1
 80162e8:	4602      	mov	r2, r0
 80162ea:	460b      	mov	r3, r1
 80162ec:	4620      	mov	r0, r4
 80162ee:	4629      	mov	r1, r5
 80162f0:	f7ea f992 	bl	8000618 <__aeabi_dmul>
 80162f4:	a341      	add	r3, pc, #260	; (adr r3, 80163fc <__kernel_sin+0x154>)
 80162f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fa:	4680      	mov	r8, r0
 80162fc:	4689      	mov	r9, r1
 80162fe:	4650      	mov	r0, sl
 8016300:	4659      	mov	r1, fp
 8016302:	f7ea f989 	bl	8000618 <__aeabi_dmul>
 8016306:	a33f      	add	r3, pc, #252	; (adr r3, 8016404 <__kernel_sin+0x15c>)
 8016308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630c:	f7e9 ffcc 	bl	80002a8 <__aeabi_dsub>
 8016310:	4652      	mov	r2, sl
 8016312:	465b      	mov	r3, fp
 8016314:	f7ea f980 	bl	8000618 <__aeabi_dmul>
 8016318:	a33c      	add	r3, pc, #240	; (adr r3, 801640c <__kernel_sin+0x164>)
 801631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631e:	f7e9 ffc5 	bl	80002ac <__adddf3>
 8016322:	4652      	mov	r2, sl
 8016324:	465b      	mov	r3, fp
 8016326:	f7ea f977 	bl	8000618 <__aeabi_dmul>
 801632a:	a33a      	add	r3, pc, #232	; (adr r3, 8016414 <__kernel_sin+0x16c>)
 801632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016330:	f7e9 ffba 	bl	80002a8 <__aeabi_dsub>
 8016334:	4652      	mov	r2, sl
 8016336:	465b      	mov	r3, fp
 8016338:	f7ea f96e 	bl	8000618 <__aeabi_dmul>
 801633c:	a337      	add	r3, pc, #220	; (adr r3, 801641c <__kernel_sin+0x174>)
 801633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016342:	f7e9 ffb3 	bl	80002ac <__adddf3>
 8016346:	9b01      	ldr	r3, [sp, #4]
 8016348:	4606      	mov	r6, r0
 801634a:	460f      	mov	r7, r1
 801634c:	b9eb      	cbnz	r3, 801638a <__kernel_sin+0xe2>
 801634e:	4602      	mov	r2, r0
 8016350:	460b      	mov	r3, r1
 8016352:	4650      	mov	r0, sl
 8016354:	4659      	mov	r1, fp
 8016356:	f7ea f95f 	bl	8000618 <__aeabi_dmul>
 801635a:	a325      	add	r3, pc, #148	; (adr r3, 80163f0 <__kernel_sin+0x148>)
 801635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016360:	f7e9 ffa2 	bl	80002a8 <__aeabi_dsub>
 8016364:	4642      	mov	r2, r8
 8016366:	464b      	mov	r3, r9
 8016368:	f7ea f956 	bl	8000618 <__aeabi_dmul>
 801636c:	4602      	mov	r2, r0
 801636e:	460b      	mov	r3, r1
 8016370:	4620      	mov	r0, r4
 8016372:	4629      	mov	r1, r5
 8016374:	f7e9 ff9a 	bl	80002ac <__adddf3>
 8016378:	4604      	mov	r4, r0
 801637a:	460d      	mov	r5, r1
 801637c:	ec45 4b10 	vmov	d0, r4, r5
 8016380:	b003      	add	sp, #12
 8016382:	ecbd 8b04 	vpop	{d8-d9}
 8016386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801638a:	4b1b      	ldr	r3, [pc, #108]	; (80163f8 <__kernel_sin+0x150>)
 801638c:	ec51 0b18 	vmov	r0, r1, d8
 8016390:	2200      	movs	r2, #0
 8016392:	f7ea f941 	bl	8000618 <__aeabi_dmul>
 8016396:	4632      	mov	r2, r6
 8016398:	ec41 0b19 	vmov	d9, r0, r1
 801639c:	463b      	mov	r3, r7
 801639e:	4640      	mov	r0, r8
 80163a0:	4649      	mov	r1, r9
 80163a2:	f7ea f939 	bl	8000618 <__aeabi_dmul>
 80163a6:	4602      	mov	r2, r0
 80163a8:	460b      	mov	r3, r1
 80163aa:	ec51 0b19 	vmov	r0, r1, d9
 80163ae:	f7e9 ff7b 	bl	80002a8 <__aeabi_dsub>
 80163b2:	4652      	mov	r2, sl
 80163b4:	465b      	mov	r3, fp
 80163b6:	f7ea f92f 	bl	8000618 <__aeabi_dmul>
 80163ba:	ec53 2b18 	vmov	r2, r3, d8
 80163be:	f7e9 ff73 	bl	80002a8 <__aeabi_dsub>
 80163c2:	a30b      	add	r3, pc, #44	; (adr r3, 80163f0 <__kernel_sin+0x148>)
 80163c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c8:	4606      	mov	r6, r0
 80163ca:	460f      	mov	r7, r1
 80163cc:	4640      	mov	r0, r8
 80163ce:	4649      	mov	r1, r9
 80163d0:	f7ea f922 	bl	8000618 <__aeabi_dmul>
 80163d4:	4602      	mov	r2, r0
 80163d6:	460b      	mov	r3, r1
 80163d8:	4630      	mov	r0, r6
 80163da:	4639      	mov	r1, r7
 80163dc:	f7e9 ff66 	bl	80002ac <__adddf3>
 80163e0:	4602      	mov	r2, r0
 80163e2:	460b      	mov	r3, r1
 80163e4:	4620      	mov	r0, r4
 80163e6:	4629      	mov	r1, r5
 80163e8:	f7e9 ff5e 	bl	80002a8 <__aeabi_dsub>
 80163ec:	e7c4      	b.n	8016378 <__kernel_sin+0xd0>
 80163ee:	bf00      	nop
 80163f0:	55555549 	.word	0x55555549
 80163f4:	3fc55555 	.word	0x3fc55555
 80163f8:	3fe00000 	.word	0x3fe00000
 80163fc:	5acfd57c 	.word	0x5acfd57c
 8016400:	3de5d93a 	.word	0x3de5d93a
 8016404:	8a2b9ceb 	.word	0x8a2b9ceb
 8016408:	3e5ae5e6 	.word	0x3e5ae5e6
 801640c:	57b1fe7d 	.word	0x57b1fe7d
 8016410:	3ec71de3 	.word	0x3ec71de3
 8016414:	19c161d5 	.word	0x19c161d5
 8016418:	3f2a01a0 	.word	0x3f2a01a0
 801641c:	1110f8a6 	.word	0x1110f8a6
 8016420:	3f811111 	.word	0x3f811111

08016424 <fabs>:
 8016424:	ec51 0b10 	vmov	r0, r1, d0
 8016428:	ee10 2a10 	vmov	r2, s0
 801642c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016430:	ec43 2b10 	vmov	d0, r2, r3
 8016434:	4770      	bx	lr
	...

08016438 <floor>:
 8016438:	ec51 0b10 	vmov	r0, r1, d0
 801643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016440:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016444:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016448:	2e13      	cmp	r6, #19
 801644a:	ee10 5a10 	vmov	r5, s0
 801644e:	ee10 8a10 	vmov	r8, s0
 8016452:	460c      	mov	r4, r1
 8016454:	dc32      	bgt.n	80164bc <floor+0x84>
 8016456:	2e00      	cmp	r6, #0
 8016458:	da14      	bge.n	8016484 <floor+0x4c>
 801645a:	a333      	add	r3, pc, #204	; (adr r3, 8016528 <floor+0xf0>)
 801645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016460:	f7e9 ff24 	bl	80002ac <__adddf3>
 8016464:	2200      	movs	r2, #0
 8016466:	2300      	movs	r3, #0
 8016468:	f7ea fb66 	bl	8000b38 <__aeabi_dcmpgt>
 801646c:	b138      	cbz	r0, 801647e <floor+0x46>
 801646e:	2c00      	cmp	r4, #0
 8016470:	da57      	bge.n	8016522 <floor+0xea>
 8016472:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016476:	431d      	orrs	r5, r3
 8016478:	d001      	beq.n	801647e <floor+0x46>
 801647a:	4c2d      	ldr	r4, [pc, #180]	; (8016530 <floor+0xf8>)
 801647c:	2500      	movs	r5, #0
 801647e:	4621      	mov	r1, r4
 8016480:	4628      	mov	r0, r5
 8016482:	e025      	b.n	80164d0 <floor+0x98>
 8016484:	4f2b      	ldr	r7, [pc, #172]	; (8016534 <floor+0xfc>)
 8016486:	4137      	asrs	r7, r6
 8016488:	ea01 0307 	and.w	r3, r1, r7
 801648c:	4303      	orrs	r3, r0
 801648e:	d01f      	beq.n	80164d0 <floor+0x98>
 8016490:	a325      	add	r3, pc, #148	; (adr r3, 8016528 <floor+0xf0>)
 8016492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016496:	f7e9 ff09 	bl	80002ac <__adddf3>
 801649a:	2200      	movs	r2, #0
 801649c:	2300      	movs	r3, #0
 801649e:	f7ea fb4b 	bl	8000b38 <__aeabi_dcmpgt>
 80164a2:	2800      	cmp	r0, #0
 80164a4:	d0eb      	beq.n	801647e <floor+0x46>
 80164a6:	2c00      	cmp	r4, #0
 80164a8:	bfbe      	ittt	lt
 80164aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80164ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80164b2:	19a4      	addlt	r4, r4, r6
 80164b4:	ea24 0407 	bic.w	r4, r4, r7
 80164b8:	2500      	movs	r5, #0
 80164ba:	e7e0      	b.n	801647e <floor+0x46>
 80164bc:	2e33      	cmp	r6, #51	; 0x33
 80164be:	dd0b      	ble.n	80164d8 <floor+0xa0>
 80164c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80164c4:	d104      	bne.n	80164d0 <floor+0x98>
 80164c6:	ee10 2a10 	vmov	r2, s0
 80164ca:	460b      	mov	r3, r1
 80164cc:	f7e9 feee 	bl	80002ac <__adddf3>
 80164d0:	ec41 0b10 	vmov	d0, r0, r1
 80164d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80164dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164e0:	fa23 f707 	lsr.w	r7, r3, r7
 80164e4:	4207      	tst	r7, r0
 80164e6:	d0f3      	beq.n	80164d0 <floor+0x98>
 80164e8:	a30f      	add	r3, pc, #60	; (adr r3, 8016528 <floor+0xf0>)
 80164ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ee:	f7e9 fedd 	bl	80002ac <__adddf3>
 80164f2:	2200      	movs	r2, #0
 80164f4:	2300      	movs	r3, #0
 80164f6:	f7ea fb1f 	bl	8000b38 <__aeabi_dcmpgt>
 80164fa:	2800      	cmp	r0, #0
 80164fc:	d0bf      	beq.n	801647e <floor+0x46>
 80164fe:	2c00      	cmp	r4, #0
 8016500:	da02      	bge.n	8016508 <floor+0xd0>
 8016502:	2e14      	cmp	r6, #20
 8016504:	d103      	bne.n	801650e <floor+0xd6>
 8016506:	3401      	adds	r4, #1
 8016508:	ea25 0507 	bic.w	r5, r5, r7
 801650c:	e7b7      	b.n	801647e <floor+0x46>
 801650e:	2301      	movs	r3, #1
 8016510:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016514:	fa03 f606 	lsl.w	r6, r3, r6
 8016518:	4435      	add	r5, r6
 801651a:	4545      	cmp	r5, r8
 801651c:	bf38      	it	cc
 801651e:	18e4      	addcc	r4, r4, r3
 8016520:	e7f2      	b.n	8016508 <floor+0xd0>
 8016522:	2500      	movs	r5, #0
 8016524:	462c      	mov	r4, r5
 8016526:	e7aa      	b.n	801647e <floor+0x46>
 8016528:	8800759c 	.word	0x8800759c
 801652c:	7e37e43c 	.word	0x7e37e43c
 8016530:	bff00000 	.word	0xbff00000
 8016534:	000fffff 	.word	0x000fffff

08016538 <scalbn>:
 8016538:	b570      	push	{r4, r5, r6, lr}
 801653a:	ec55 4b10 	vmov	r4, r5, d0
 801653e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016542:	4606      	mov	r6, r0
 8016544:	462b      	mov	r3, r5
 8016546:	b99a      	cbnz	r2, 8016570 <scalbn+0x38>
 8016548:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801654c:	4323      	orrs	r3, r4
 801654e:	d036      	beq.n	80165be <scalbn+0x86>
 8016550:	4b39      	ldr	r3, [pc, #228]	; (8016638 <scalbn+0x100>)
 8016552:	4629      	mov	r1, r5
 8016554:	ee10 0a10 	vmov	r0, s0
 8016558:	2200      	movs	r2, #0
 801655a:	f7ea f85d 	bl	8000618 <__aeabi_dmul>
 801655e:	4b37      	ldr	r3, [pc, #220]	; (801663c <scalbn+0x104>)
 8016560:	429e      	cmp	r6, r3
 8016562:	4604      	mov	r4, r0
 8016564:	460d      	mov	r5, r1
 8016566:	da10      	bge.n	801658a <scalbn+0x52>
 8016568:	a32b      	add	r3, pc, #172	; (adr r3, 8016618 <scalbn+0xe0>)
 801656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656e:	e03a      	b.n	80165e6 <scalbn+0xae>
 8016570:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016574:	428a      	cmp	r2, r1
 8016576:	d10c      	bne.n	8016592 <scalbn+0x5a>
 8016578:	ee10 2a10 	vmov	r2, s0
 801657c:	4620      	mov	r0, r4
 801657e:	4629      	mov	r1, r5
 8016580:	f7e9 fe94 	bl	80002ac <__adddf3>
 8016584:	4604      	mov	r4, r0
 8016586:	460d      	mov	r5, r1
 8016588:	e019      	b.n	80165be <scalbn+0x86>
 801658a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801658e:	460b      	mov	r3, r1
 8016590:	3a36      	subs	r2, #54	; 0x36
 8016592:	4432      	add	r2, r6
 8016594:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016598:	428a      	cmp	r2, r1
 801659a:	dd08      	ble.n	80165ae <scalbn+0x76>
 801659c:	2d00      	cmp	r5, #0
 801659e:	a120      	add	r1, pc, #128	; (adr r1, 8016620 <scalbn+0xe8>)
 80165a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165a4:	da1c      	bge.n	80165e0 <scalbn+0xa8>
 80165a6:	a120      	add	r1, pc, #128	; (adr r1, 8016628 <scalbn+0xf0>)
 80165a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165ac:	e018      	b.n	80165e0 <scalbn+0xa8>
 80165ae:	2a00      	cmp	r2, #0
 80165b0:	dd08      	ble.n	80165c4 <scalbn+0x8c>
 80165b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80165b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80165ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80165be:	ec45 4b10 	vmov	d0, r4, r5
 80165c2:	bd70      	pop	{r4, r5, r6, pc}
 80165c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80165c8:	da19      	bge.n	80165fe <scalbn+0xc6>
 80165ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80165ce:	429e      	cmp	r6, r3
 80165d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80165d4:	dd0a      	ble.n	80165ec <scalbn+0xb4>
 80165d6:	a112      	add	r1, pc, #72	; (adr r1, 8016620 <scalbn+0xe8>)
 80165d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d1e2      	bne.n	80165a6 <scalbn+0x6e>
 80165e0:	a30f      	add	r3, pc, #60	; (adr r3, 8016620 <scalbn+0xe8>)
 80165e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165e6:	f7ea f817 	bl	8000618 <__aeabi_dmul>
 80165ea:	e7cb      	b.n	8016584 <scalbn+0x4c>
 80165ec:	a10a      	add	r1, pc, #40	; (adr r1, 8016618 <scalbn+0xe0>)
 80165ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d0b8      	beq.n	8016568 <scalbn+0x30>
 80165f6:	a10e      	add	r1, pc, #56	; (adr r1, 8016630 <scalbn+0xf8>)
 80165f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165fc:	e7b4      	b.n	8016568 <scalbn+0x30>
 80165fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016602:	3236      	adds	r2, #54	; 0x36
 8016604:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016608:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801660c:	4620      	mov	r0, r4
 801660e:	4b0c      	ldr	r3, [pc, #48]	; (8016640 <scalbn+0x108>)
 8016610:	2200      	movs	r2, #0
 8016612:	e7e8      	b.n	80165e6 <scalbn+0xae>
 8016614:	f3af 8000 	nop.w
 8016618:	c2f8f359 	.word	0xc2f8f359
 801661c:	01a56e1f 	.word	0x01a56e1f
 8016620:	8800759c 	.word	0x8800759c
 8016624:	7e37e43c 	.word	0x7e37e43c
 8016628:	8800759c 	.word	0x8800759c
 801662c:	fe37e43c 	.word	0xfe37e43c
 8016630:	c2f8f359 	.word	0xc2f8f359
 8016634:	81a56e1f 	.word	0x81a56e1f
 8016638:	43500000 	.word	0x43500000
 801663c:	ffff3cb0 	.word	0xffff3cb0
 8016640:	3c900000 	.word	0x3c900000

08016644 <finitef>:
 8016644:	b082      	sub	sp, #8
 8016646:	ed8d 0a01 	vstr	s0, [sp, #4]
 801664a:	9801      	ldr	r0, [sp, #4]
 801664c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016650:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016654:	bfac      	ite	ge
 8016656:	2000      	movge	r0, #0
 8016658:	2001      	movlt	r0, #1
 801665a:	b002      	add	sp, #8
 801665c:	4770      	bx	lr
	...

08016660 <rintf>:
 8016660:	ee10 2a10 	vmov	r2, s0
 8016664:	b513      	push	{r0, r1, r4, lr}
 8016666:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801666a:	397f      	subs	r1, #127	; 0x7f
 801666c:	2916      	cmp	r1, #22
 801666e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016672:	dc47      	bgt.n	8016704 <rintf+0xa4>
 8016674:	b32b      	cbz	r3, 80166c2 <rintf+0x62>
 8016676:	2900      	cmp	r1, #0
 8016678:	ee10 3a10 	vmov	r3, s0
 801667c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8016680:	da21      	bge.n	80166c6 <rintf+0x66>
 8016682:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8016686:	425b      	negs	r3, r3
 8016688:	4921      	ldr	r1, [pc, #132]	; (8016710 <rintf+0xb0>)
 801668a:	0a5b      	lsrs	r3, r3, #9
 801668c:	0d12      	lsrs	r2, r2, #20
 801668e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016692:	0512      	lsls	r2, r2, #20
 8016694:	4313      	orrs	r3, r2
 8016696:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801669a:	ee07 3a90 	vmov	s15, r3
 801669e:	edd1 6a00 	vldr	s13, [r1]
 80166a2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80166a6:	ed8d 7a01 	vstr	s14, [sp, #4]
 80166aa:	eddd 7a01 	vldr	s15, [sp, #4]
 80166ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80166b2:	ee17 3a90 	vmov	r3, s15
 80166b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80166ba:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80166be:	ee00 3a10 	vmov	s0, r3
 80166c2:	b002      	add	sp, #8
 80166c4:	bd10      	pop	{r4, pc}
 80166c6:	4a13      	ldr	r2, [pc, #76]	; (8016714 <rintf+0xb4>)
 80166c8:	410a      	asrs	r2, r1
 80166ca:	4213      	tst	r3, r2
 80166cc:	d0f9      	beq.n	80166c2 <rintf+0x62>
 80166ce:	0854      	lsrs	r4, r2, #1
 80166d0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80166d4:	d006      	beq.n	80166e4 <rintf+0x84>
 80166d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80166da:	ea23 0304 	bic.w	r3, r3, r4
 80166de:	fa42 f101 	asr.w	r1, r2, r1
 80166e2:	430b      	orrs	r3, r1
 80166e4:	4a0a      	ldr	r2, [pc, #40]	; (8016710 <rintf+0xb0>)
 80166e6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80166ea:	ed90 7a00 	vldr	s14, [r0]
 80166ee:	ee07 3a90 	vmov	s15, r3
 80166f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80166f6:	edcd 7a01 	vstr	s15, [sp, #4]
 80166fa:	ed9d 0a01 	vldr	s0, [sp, #4]
 80166fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016702:	e7de      	b.n	80166c2 <rintf+0x62>
 8016704:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016708:	d3db      	bcc.n	80166c2 <rintf+0x62>
 801670a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801670e:	e7d8      	b.n	80166c2 <rintf+0x62>
 8016710:	0805fa00 	.word	0x0805fa00
 8016714:	007fffff 	.word	0x007fffff

08016718 <scalbnf>:
 8016718:	ee10 3a10 	vmov	r3, s0
 801671c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016720:	d025      	beq.n	801676e <scalbnf+0x56>
 8016722:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016726:	d302      	bcc.n	801672e <scalbnf+0x16>
 8016728:	ee30 0a00 	vadd.f32	s0, s0, s0
 801672c:	4770      	bx	lr
 801672e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016732:	d122      	bne.n	801677a <scalbnf+0x62>
 8016734:	4b2a      	ldr	r3, [pc, #168]	; (80167e0 <scalbnf+0xc8>)
 8016736:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80167e4 <scalbnf+0xcc>
 801673a:	4298      	cmp	r0, r3
 801673c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016740:	db16      	blt.n	8016770 <scalbnf+0x58>
 8016742:	ee10 3a10 	vmov	r3, s0
 8016746:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801674a:	3a19      	subs	r2, #25
 801674c:	4402      	add	r2, r0
 801674e:	2afe      	cmp	r2, #254	; 0xfe
 8016750:	dd15      	ble.n	801677e <scalbnf+0x66>
 8016752:	ee10 3a10 	vmov	r3, s0
 8016756:	eddf 7a24 	vldr	s15, [pc, #144]	; 80167e8 <scalbnf+0xd0>
 801675a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80167ec <scalbnf+0xd4>
 801675e:	2b00      	cmp	r3, #0
 8016760:	eeb0 7a67 	vmov.f32	s14, s15
 8016764:	bfb8      	it	lt
 8016766:	eef0 7a66 	vmovlt.f32	s15, s13
 801676a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801676e:	4770      	bx	lr
 8016770:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80167f0 <scalbnf+0xd8>
 8016774:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016778:	4770      	bx	lr
 801677a:	0dd2      	lsrs	r2, r2, #23
 801677c:	e7e6      	b.n	801674c <scalbnf+0x34>
 801677e:	2a00      	cmp	r2, #0
 8016780:	dd06      	ble.n	8016790 <scalbnf+0x78>
 8016782:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016786:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801678a:	ee00 3a10 	vmov	s0, r3
 801678e:	4770      	bx	lr
 8016790:	f112 0f16 	cmn.w	r2, #22
 8016794:	da1a      	bge.n	80167cc <scalbnf+0xb4>
 8016796:	f24c 3350 	movw	r3, #50000	; 0xc350
 801679a:	4298      	cmp	r0, r3
 801679c:	ee10 3a10 	vmov	r3, s0
 80167a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80167a4:	dd0a      	ble.n	80167bc <scalbnf+0xa4>
 80167a6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80167e8 <scalbnf+0xd0>
 80167aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80167ec <scalbnf+0xd4>
 80167ae:	eef0 7a40 	vmov.f32	s15, s0
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	bf18      	it	ne
 80167b6:	eeb0 0a47 	vmovne.f32	s0, s14
 80167ba:	e7db      	b.n	8016774 <scalbnf+0x5c>
 80167bc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80167f0 <scalbnf+0xd8>
 80167c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80167f4 <scalbnf+0xdc>
 80167c4:	eef0 7a40 	vmov.f32	s15, s0
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	e7f3      	b.n	80167b4 <scalbnf+0x9c>
 80167cc:	3219      	adds	r2, #25
 80167ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80167d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80167d6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80167f8 <scalbnf+0xe0>
 80167da:	ee07 3a10 	vmov	s14, r3
 80167de:	e7c4      	b.n	801676a <scalbnf+0x52>
 80167e0:	ffff3cb0 	.word	0xffff3cb0
 80167e4:	4c000000 	.word	0x4c000000
 80167e8:	7149f2ca 	.word	0x7149f2ca
 80167ec:	f149f2ca 	.word	0xf149f2ca
 80167f0:	0da24260 	.word	0x0da24260
 80167f4:	8da24260 	.word	0x8da24260
 80167f8:	33000000 	.word	0x33000000

080167fc <_close>:
 80167fc:	4b02      	ldr	r3, [pc, #8]	; (8016808 <_close+0xc>)
 80167fe:	2258      	movs	r2, #88	; 0x58
 8016800:	601a      	str	r2, [r3, #0]
 8016802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016806:	4770      	bx	lr
 8016808:	20013cb0 	.word	0x20013cb0

0801680c <_fstat>:
 801680c:	4b02      	ldr	r3, [pc, #8]	; (8016818 <_fstat+0xc>)
 801680e:	2258      	movs	r2, #88	; 0x58
 8016810:	601a      	str	r2, [r3, #0]
 8016812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016816:	4770      	bx	lr
 8016818:	20013cb0 	.word	0x20013cb0

0801681c <_getpid>:
 801681c:	4b02      	ldr	r3, [pc, #8]	; (8016828 <_getpid+0xc>)
 801681e:	2258      	movs	r2, #88	; 0x58
 8016820:	601a      	str	r2, [r3, #0]
 8016822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016826:	4770      	bx	lr
 8016828:	20013cb0 	.word	0x20013cb0

0801682c <_isatty>:
 801682c:	4b02      	ldr	r3, [pc, #8]	; (8016838 <_isatty+0xc>)
 801682e:	2258      	movs	r2, #88	; 0x58
 8016830:	601a      	str	r2, [r3, #0]
 8016832:	2000      	movs	r0, #0
 8016834:	4770      	bx	lr
 8016836:	bf00      	nop
 8016838:	20013cb0 	.word	0x20013cb0

0801683c <_kill>:
 801683c:	4b02      	ldr	r3, [pc, #8]	; (8016848 <_kill+0xc>)
 801683e:	2258      	movs	r2, #88	; 0x58
 8016840:	601a      	str	r2, [r3, #0]
 8016842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016846:	4770      	bx	lr
 8016848:	20013cb0 	.word	0x20013cb0

0801684c <_lseek>:
 801684c:	4b02      	ldr	r3, [pc, #8]	; (8016858 <_lseek+0xc>)
 801684e:	2258      	movs	r2, #88	; 0x58
 8016850:	601a      	str	r2, [r3, #0]
 8016852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016856:	4770      	bx	lr
 8016858:	20013cb0 	.word	0x20013cb0

0801685c <_read>:
 801685c:	4b02      	ldr	r3, [pc, #8]	; (8016868 <_read+0xc>)
 801685e:	2258      	movs	r2, #88	; 0x58
 8016860:	601a      	str	r2, [r3, #0]
 8016862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016866:	4770      	bx	lr
 8016868:	20013cb0 	.word	0x20013cb0

0801686c <_write>:
 801686c:	4b02      	ldr	r3, [pc, #8]	; (8016878 <_write+0xc>)
 801686e:	2258      	movs	r2, #88	; 0x58
 8016870:	601a      	str	r2, [r3, #0]
 8016872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016876:	4770      	bx	lr
 8016878:	20013cb0 	.word	0x20013cb0

0801687c <_exit>:
 801687c:	e7fe      	b.n	801687c <_exit>
	...

08016880 <_init>:
 8016880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016882:	bf00      	nop
 8016884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016886:	bc08      	pop	{r3}
 8016888:	469e      	mov	lr, r3
 801688a:	4770      	bx	lr

0801688c <_fini>:
 801688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801688e:	bf00      	nop
 8016890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016892:	bc08      	pop	{r3}
 8016894:	469e      	mov	lr, r3
 8016896:	4770      	bx	lr
