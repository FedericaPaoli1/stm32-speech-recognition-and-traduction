
stm32-speech-recognition-and-traduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e918  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019bdc  0800eac0  0800eac0  0001eac0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802869c  0802869c  00040fdc  2**0
                  CONTENTS
  4 .ARM          00000008  0802869c  0802869c  0003869c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080286a4  080286a4  00040fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080286a4  080286a4  000386a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080286a8  080286a8  000386a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fdc  20000000  080286ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c3b4  20000fe0  08029688  00040fe0  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  2000d394  08029688  0004d394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040fdc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012000  00000000  00000000  0004100c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a95  00000000  00000000  0005300c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00055aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  00056570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235be  00000000  00000000  00056f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3ec  00000000  00000000  0007a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1bc1  00000000  00000000  000898da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000014d  00000000  00000000  0015b49b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a8  00000000  00000000  0015b5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0015f890  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0015f95c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000fe0 	.word	0x20000fe0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea90 	.word	0x0800ea90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000fe4 	.word	0x20000fe4
 80001cc:	0800ea90 	.word	0x0800ea90

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <argmax>:
const char LEFT[] = "left";
const char ON[] = "on";

static const char * dictionary[DICTIONARY_SIZE] = { UP, YES, NO, OFF, RIGHT, DOWN, LEFT, ON };

uint8_t argmax(const ai_float arr[], uint8_t size) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	assert(size > 0 && size <= DICTIONARY_SIZE);
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <argmax+0x18>
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b08      	cmp	r3, #8
 8001022:	d905      	bls.n	8001030 <argmax+0x24>
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <argmax+0x74>)
 8001026:	4a17      	ldr	r2, [pc, #92]	; (8001084 <argmax+0x78>)
 8001028:	211b      	movs	r1, #27
 800102a:	4817      	ldr	r0, [pc, #92]	; (8001088 <argmax+0x7c>)
 800102c:	f008 fc38 	bl	80098a0 <__assert_func>
	uint8_t idx = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	75fb      	strb	r3, [r7, #23]
	ai_float max = arr[0];
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	613b      	str	r3, [r7, #16]
	ai_float tmp;

	for (uint8_t i = 1; i < size; i++) {
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e015      	b.n	800106c <argmax+0x60>
		tmp = arr[i];
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60bb      	str	r3, [r7, #8]
		if (tmp > max) {
 800104c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001050:	edd7 7a04 	vldr	s15, [r7, #16]
 8001054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	dd03      	ble.n	8001066 <argmax+0x5a>
			max = tmp;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	613b      	str	r3, [r7, #16]
			idx = i;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 1; i < size; i++) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	3301      	adds	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3e5      	bcc.n	8001040 <argmax+0x34>
		}
	}

	return idx;
 8001074:	7dfb      	ldrb	r3, [r7, #23]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0800eac0 	.word	0x0800eac0
 8001084:	0800f424 	.word	0x0800f424
 8001088:	0800eae4 	.word	0x0800eae4

0800108c <get_word>:

char* get_word(uint8_t idx) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	assert(idx < DICTIONARY_SIZE);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d905      	bls.n	80010a8 <get_word+0x1c>
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <get_word+0x2c>)
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <get_word+0x30>)
 80010a0:	212c      	movs	r1, #44	; 0x2c
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <get_word+0x34>)
 80010a4:	f008 fbfc 	bl	80098a0 <__assert_func>
	return dictionary[idx];
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <get_word+0x38>)
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	0800eafc 	.word	0x0800eafc
 80010bc:	0800f42c 	.word	0x0800f42c
 80010c0:	0800eae4 	.word	0x0800eae4
 80010c4:	20000400 	.word	0x20000400

080010c8 <recognize_commands>:
	HAL_UART_Transmit(&huart2, (uint8_t*) c, strlen(c),
	HAL_MAX_DELAY);
}

// TODO cambiare puntatori a parole ONE, TWO, THREE, FOUR
void recognize_commands(const char *word) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	// ONE
	if (strcmp(word, UP) == 0) {
 80010d0:	4986      	ldr	r1, [pc, #536]	; (80012ec <recognize_commands+0x224>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff f87c 	bl	80001d0 <strcmp>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d12a      	bne.n	8001134 <recognize_commands+0x6c>
		if (led_status != Green) {
 80010de:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <recognize_commands+0x228>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	f000 80fe 	beq.w	80012e4 <recognize_commands+0x21c>
			if (led_status == Blue) {
 80010e8:	4b81      	ldr	r3, [pc, #516]	; (80012f0 <recognize_commands+0x228>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d105      	bne.n	80010fc <recognize_commands+0x34>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80010f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f4:	487f      	ldr	r0, [pc, #508]	; (80012f4 <recognize_commands+0x22c>)
 80010f6:	f001 fdce 	bl	8002c96 <HAL_GPIO_TogglePin>
 80010fa:	e012      	b.n	8001122 <recognize_commands+0x5a>
			} else if (led_status == Red) {
 80010fc:	4b7c      	ldr	r3, [pc, #496]	; (80012f0 <recognize_commands+0x228>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d105      	bne.n	8001110 <recognize_commands+0x48>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001108:	487a      	ldr	r0, [pc, #488]	; (80012f4 <recognize_commands+0x22c>)
 800110a:	f001 fdc4 	bl	8002c96 <HAL_GPIO_TogglePin>
 800110e:	e008      	b.n	8001122 <recognize_commands+0x5a>
			} else if (led_status == Orange) {
 8001110:	4b77      	ldr	r3, [pc, #476]	; (80012f0 <recognize_commands+0x228>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b04      	cmp	r3, #4
 8001116:	d104      	bne.n	8001122 <recognize_commands+0x5a>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111c:	4875      	ldr	r0, [pc, #468]	; (80012f4 <recognize_commands+0x22c>)
 800111e:	f001 fdba 	bl	8002c96 <HAL_GPIO_TogglePin>
			}
			// GREEN LED
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	4873      	ldr	r0, [pc, #460]	; (80012f4 <recognize_commands+0x22c>)
 8001128:	f001 fdb5 	bl	8002c96 <HAL_GPIO_TogglePin>
			led_status = Green;
 800112c:	4b70      	ldr	r3, [pc, #448]	; (80012f0 <recognize_commands+0x228>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
			// disable the display of the words
			if (display_words_enabled)
				display_words_enabled = 0;
		}
	}
}
 8001132:	e0d7      	b.n	80012e4 <recognize_commands+0x21c>
	else if (strcmp(word, RIGHT) == 0) {
 8001134:	4970      	ldr	r1, [pc, #448]	; (80012f8 <recognize_commands+0x230>)
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f84a 	bl	80001d0 <strcmp>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d12a      	bne.n	8001198 <recognize_commands+0xd0>
		if (led_status != Blue) {
 8001142:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <recognize_commands+0x228>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b02      	cmp	r3, #2
 8001148:	f000 80cc 	beq.w	80012e4 <recognize_commands+0x21c>
			if (led_status == Green) {
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <recognize_commands+0x228>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <recognize_commands+0x98>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001158:	4866      	ldr	r0, [pc, #408]	; (80012f4 <recognize_commands+0x22c>)
 800115a:	f001 fd9c 	bl	8002c96 <HAL_GPIO_TogglePin>
 800115e:	e012      	b.n	8001186 <recognize_commands+0xbe>
			} else if (led_status == Red) {
 8001160:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <recognize_commands+0x228>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d105      	bne.n	8001174 <recognize_commands+0xac>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001168:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116c:	4861      	ldr	r0, [pc, #388]	; (80012f4 <recognize_commands+0x22c>)
 800116e:	f001 fd92 	bl	8002c96 <HAL_GPIO_TogglePin>
 8001172:	e008      	b.n	8001186 <recognize_commands+0xbe>
			} else if (led_status == Orange) {
 8001174:	4b5e      	ldr	r3, [pc, #376]	; (80012f0 <recognize_commands+0x228>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b04      	cmp	r3, #4
 800117a:	d104      	bne.n	8001186 <recognize_commands+0xbe>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 800117c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001180:	485c      	ldr	r0, [pc, #368]	; (80012f4 <recognize_commands+0x22c>)
 8001182:	f001 fd88 	bl	8002c96 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	485a      	ldr	r0, [pc, #360]	; (80012f4 <recognize_commands+0x22c>)
 800118c:	f001 fd83 	bl	8002c96 <HAL_GPIO_TogglePin>
			led_status = Blue;
 8001190:	4b57      	ldr	r3, [pc, #348]	; (80012f0 <recognize_commands+0x228>)
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
}
 8001196:	e0a5      	b.n	80012e4 <recognize_commands+0x21c>
	else if (strcmp(word, LEFT) == 0) {
 8001198:	4958      	ldr	r1, [pc, #352]	; (80012fc <recognize_commands+0x234>)
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff f818 	bl	80001d0 <strcmp>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d12a      	bne.n	80011fc <recognize_commands+0x134>
		if (led_status != Red) {
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <recognize_commands+0x228>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	f000 809a 	beq.w	80012e4 <recognize_commands+0x21c>
			if (led_status == Green) {
 80011b0:	4b4f      	ldr	r3, [pc, #316]	; (80012f0 <recognize_commands+0x228>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <recognize_commands+0xfc>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	484d      	ldr	r0, [pc, #308]	; (80012f4 <recognize_commands+0x22c>)
 80011be:	f001 fd6a 	bl	8002c96 <HAL_GPIO_TogglePin>
 80011c2:	e012      	b.n	80011ea <recognize_commands+0x122>
			} else if (led_status == Blue) {
 80011c4:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <recognize_commands+0x228>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d105      	bne.n	80011d8 <recognize_commands+0x110>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80011cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d0:	4848      	ldr	r0, [pc, #288]	; (80012f4 <recognize_commands+0x22c>)
 80011d2:	f001 fd60 	bl	8002c96 <HAL_GPIO_TogglePin>
 80011d6:	e008      	b.n	80011ea <recognize_commands+0x122>
			} else if (led_status == Orange) {
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <recognize_commands+0x228>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d104      	bne.n	80011ea <recognize_commands+0x122>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80011e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e4:	4843      	ldr	r0, [pc, #268]	; (80012f4 <recognize_commands+0x22c>)
 80011e6:	f001 fd56 	bl	8002c96 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80011ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ee:	4841      	ldr	r0, [pc, #260]	; (80012f4 <recognize_commands+0x22c>)
 80011f0:	f001 fd51 	bl	8002c96 <HAL_GPIO_TogglePin>
			led_status = Red;
 80011f4:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <recognize_commands+0x228>)
 80011f6:	2203      	movs	r2, #3
 80011f8:	701a      	strb	r2, [r3, #0]
}
 80011fa:	e073      	b.n	80012e4 <recognize_commands+0x21c>
	else if (strcmp(word, DOWN) == 0) {
 80011fc:	4940      	ldr	r1, [pc, #256]	; (8001300 <recognize_commands+0x238>)
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7fe ffe6 	bl	80001d0 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d129      	bne.n	800125e <recognize_commands+0x196>
		if (led_status != Orange) {
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <recognize_commands+0x228>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b04      	cmp	r3, #4
 8001210:	d068      	beq.n	80012e4 <recognize_commands+0x21c>
			if (led_status == Green) {
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <recognize_commands+0x228>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d105      	bne.n	8001226 <recognize_commands+0x15e>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	4835      	ldr	r0, [pc, #212]	; (80012f4 <recognize_commands+0x22c>)
 8001220:	f001 fd39 	bl	8002c96 <HAL_GPIO_TogglePin>
 8001224:	e012      	b.n	800124c <recognize_commands+0x184>
			} else if (led_status == Blue) {
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <recognize_commands+0x228>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d105      	bne.n	800123a <recognize_commands+0x172>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 800122e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001232:	4830      	ldr	r0, [pc, #192]	; (80012f4 <recognize_commands+0x22c>)
 8001234:	f001 fd2f 	bl	8002c96 <HAL_GPIO_TogglePin>
 8001238:	e008      	b.n	800124c <recognize_commands+0x184>
			} else if (led_status == Red) {
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <recognize_commands+0x228>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d104      	bne.n	800124c <recognize_commands+0x184>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001246:	482b      	ldr	r0, [pc, #172]	; (80012f4 <recognize_commands+0x22c>)
 8001248:	f001 fd25 	bl	8002c96 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 800124c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001250:	4828      	ldr	r0, [pc, #160]	; (80012f4 <recognize_commands+0x22c>)
 8001252:	f001 fd20 	bl	8002c96 <HAL_GPIO_TogglePin>
			led_status = Orange;
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <recognize_commands+0x228>)
 8001258:	2204      	movs	r2, #4
 800125a:	701a      	strb	r2, [r3, #0]
}
 800125c:	e042      	b.n	80012e4 <recognize_commands+0x21c>
		if (led_status == Green) {
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <recognize_commands+0x228>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d105      	bne.n	8001272 <recognize_commands+0x1aa>
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126a:	4822      	ldr	r0, [pc, #136]	; (80012f4 <recognize_commands+0x22c>)
 800126c:	f001 fd13 	bl	8002c96 <HAL_GPIO_TogglePin>
 8001270:	e01c      	b.n	80012ac <recognize_commands+0x1e4>
		} else if (led_status == Blue) {
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <recognize_commands+0x228>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d105      	bne.n	8001286 <recognize_commands+0x1be>
			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 800127a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127e:	481d      	ldr	r0, [pc, #116]	; (80012f4 <recognize_commands+0x22c>)
 8001280:	f001 fd09 	bl	8002c96 <HAL_GPIO_TogglePin>
 8001284:	e012      	b.n	80012ac <recognize_commands+0x1e4>
		} else if (led_status == Red) {
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <recognize_commands+0x228>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d105      	bne.n	800129a <recognize_commands+0x1d2>
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	4818      	ldr	r0, [pc, #96]	; (80012f4 <recognize_commands+0x22c>)
 8001294:	f001 fcff 	bl	8002c96 <HAL_GPIO_TogglePin>
 8001298:	e008      	b.n	80012ac <recognize_commands+0x1e4>
		} else if (led_status == Orange) {
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <recognize_commands+0x228>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d104      	bne.n	80012ac <recognize_commands+0x1e4>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <recognize_commands+0x22c>)
 80012a8:	f001 fcf5 	bl	8002c96 <HAL_GPIO_TogglePin>
		led_status = Off;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <recognize_commands+0x228>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
		if (strcmp(word, ON) == 0) {
 80012b2:	4914      	ldr	r1, [pc, #80]	; (8001304 <recognize_commands+0x23c>)
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7fe ff8b 	bl	80001d0 <strcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d103      	bne.n	80012c8 <recognize_commands+0x200>
			display_words_enabled = 1;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <recognize_commands+0x240>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
}
 80012c6:	e00d      	b.n	80012e4 <recognize_commands+0x21c>
		} else if (strcmp(word, OFF) == 0) {
 80012c8:	4910      	ldr	r1, [pc, #64]	; (800130c <recognize_commands+0x244>)
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7fe ff80 	bl	80001d0 <strcmp>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d106      	bne.n	80012e4 <recognize_commands+0x21c>
			if (display_words_enabled)
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <recognize_commands+0x240>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <recognize_commands+0x21c>
				display_words_enabled = 0;
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <recognize_commands+0x240>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	0800f3f8 	.word	0x0800f3f8
 80012f0:	20001001 	.word	0x20001001
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	0800f408 	.word	0x0800f408
 80012fc:	0800f418 	.word	0x0800f418
 8001300:	0800f410 	.word	0x0800f410
 8001304:	0800f420 	.word	0x0800f420
 8001308:	20001000 	.word	0x20001000
 800130c:	0800f404 	.word	0x0800f404

08001310 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	f5ad 4df9 	sub.w	sp, sp, #31872	; 0x7c80
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	char buf[50];
	int buf_len = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f507 42f9 	add.w	r2, r7, #31872	; 0x7c80
 8001320:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001324:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_float in_data[AI_SMALL_WORDS_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_float out_data[AI_SMALL_WORDS_MODEL_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle small_words_model = AI_HANDLE_NULL;
 8001326:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800132a:	3b58      	subs	r3, #88	; 0x58
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_SMALL_WORDS_MODEL_IN_NUM] = AI_SMALL_WORDS_MODEL_IN;
 8001330:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8001334:	3b70      	subs	r3, #112	; 0x70
 8001336:	4a7f      	ldr	r2, [pc, #508]	; (8001534 <main+0x224>)
 8001338:	461c      	mov	r4, r3
 800133a:	4615      	mov	r5, r2
 800133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001340:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001344:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_SMALL_WORDS_MODEL_OUT_NUM] = AI_SMALL_WORDS_MODEL_OUT;
 8001348:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800134c:	3b08      	subs	r3, #8
 800134e:	4a7a      	ldr	r2, [pc, #488]	; (8001538 <main+0x228>)
 8001350:	461c      	mov	r4, r3
 8001352:	4615      	mov	r5, r2
 8001354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001358:	e895 0003 	ldmia.w	r5, {r0, r1}
 800135c:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params =
 8001360:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8001364:	3b38      	subs	r3, #56	; 0x38
 8001366:	4a75      	ldr	r2, [pc, #468]	; (800153c <main+0x22c>)
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800136e:	3b38      	subs	r3, #56	; 0x38
 8001370:	2201      	movs	r2, #1
 8001372:	809a      	strh	r2, [r3, #4]
 8001374:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8001378:	3b38      	subs	r3, #56	; 0x38
 800137a:	2201      	movs	r2, #1
 800137c:	80da      	strh	r2, [r3, #6]
 800137e:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8001382:	3b38      	subs	r3, #56	; 0x38
 8001384:	2201      	movs	r2, #1
 8001386:	811a      	strh	r2, [r3, #8]
 8001388:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800138c:	3b38      	subs	r3, #56	; 0x38
 800138e:	4a6c      	ldr	r2, [pc, #432]	; (8001540 <main+0x230>)
 8001390:	60da      	str	r2, [r3, #12]
					AI_NETWORK_PARAMS_INIT(AI_SMALL_WORDS_MODEL_DATA_WEIGHTS(ai_small_words_model_data_weights_get()), AI_SMALL_WORDS_MODEL_DATA_ACTIVATIONS(activations));
 8001392:	f003 fce1 	bl	8004d58 <ai_small_words_model_data_weights_get>
 8001396:	4602      	mov	r2, r0
	ai_network_params ai_params =
 8001398:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800139c:	3b38      	subs	r3, #56	; 0x38
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80013a4:	3b38      	subs	r3, #56	; 0x38
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80013ae:	3b38      	subs	r3, #56	; 0x38
 80013b0:	4a64      	ldr	r2, [pc, #400]	; (8001544 <main+0x234>)
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80013b8:	3b38      	subs	r3, #56	; 0x38
 80013ba:	2201      	movs	r2, #1
 80013bc:	839a      	strh	r2, [r3, #28]
 80013be:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80013c2:	3b38      	subs	r3, #56	; 0x38
 80013c4:	2201      	movs	r2, #1
 80013c6:	83da      	strh	r2, [r3, #30]
 80013c8:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80013cc:	3b38      	subs	r3, #56	; 0x38
 80013ce:	2201      	movs	r2, #1
 80013d0:	841a      	strh	r2, [r3, #32]
 80013d2:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80013d6:	3b38      	subs	r3, #56	; 0x38
 80013d8:	f44f 42a7 	mov.w	r2, #21376	; 0x5380
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
 80013de:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80013e2:	3b38      	subs	r3, #56	; 0x38
 80013e4:	f507 5224 	add.w	r2, r7, #10496	; 0x2900
 80013e8:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80013ec:	3a54      	subs	r2, #84	; 0x54
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
 80013f0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80013f4:	3b38      	subs	r3, #56	; 0x38
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 80013fa:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80013fe:	3b70      	subs	r3, #112	; 0x70
 8001400:	2201      	movs	r2, #1
 8001402:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001404:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8001408:	3b70      	subs	r3, #112	; 0x70
 800140a:	f607 1238 	addw	r2, r7, #2360	; 0x938
 800140e:	3a54      	subs	r2, #84	; 0x54
 8001410:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8001412:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8001416:	3b08      	subs	r3, #8
 8001418:	2201      	movs	r2, #1
 800141a:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800141c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8001420:	3b08      	subs	r3, #8
 8001422:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8001426:	3a54      	subs	r2, #84	; 0x54
 8001428:	611a      	str	r2, [r3, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800142a:	f000 fd4b 	bl	8001ec4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800142e:	f000 f9d3 	bl	80017d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001432:	f000 fad3 	bl	80019dc <MX_GPIO_Init>
	MX_DMA_Init();
 8001436:	f000 fab1 	bl	800199c <MX_DMA_Init>
	MX_I2S2_Init();
 800143a:	f000 fa57 	bl	80018ec <MX_I2S2_Init>
	MX_CRC_Init();
 800143e:	f000 fa39 	bl	80018b4 <MX_CRC_Init>
	MX_PDM2PCM_Init();
 8001442:	f003 fab3 	bl	80049ac <MX_PDM2PCM_Init>
	MX_USART2_UART_Init();
 8001446:	f000 fa7f 	bl	8001948 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0], 64);
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	493e      	ldr	r1, [pc, #248]	; (8001548 <main+0x238>)
 800144e:	483f      	ldr	r0, [pc, #252]	; (800154c <main+0x23c>)
 8001450:	f001 fd7c 	bl	8002f4c <HAL_I2S_Receive_DMA>

	// Create instance of neural network
	ai_err = ai_small_words_model_create(&small_words_model,
 8001454:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8001458:	3b58      	subs	r3, #88	; 0x58
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fc19 	bl	8004c94 <ai_small_words_model_create>
 8001462:	4603      	mov	r3, r0
 8001464:	f507 42f8 	add.w	r2, r7, #31744	; 0x7c00
 8001468:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800146c:	6013      	str	r3, [r2, #0]
	AI_SMALL_WORDS_MODEL_DATA_CONFIG);
	if (ai_err.type != AI_ERROR_NONE) {
 800146e:	f507 43f8 	add.w	r3, r7, #31744	; 0x7c00
 8001472:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01b      	beq.n	80014b4 <main+0x1a4>
		buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800147c:	f507 43f8 	add.w	r3, r7, #31744	; 0x7c00
 8001480:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001484:	4932      	ldr	r1, [pc, #200]	; (8001550 <main+0x240>)
 8001486:	4618      	mov	r0, r3
 8001488:	f009 fb16 	bl	800aab8 <siprintf>
 800148c:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001490:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001494:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 8001496:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 800149a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f507 41f8 	add.w	r1, r7, #31744	; 0x7c00
 80014a6:	f101 0168 	add.w	r1, r1, #104	; 0x68
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	4829      	ldr	r0, [pc, #164]	; (8001554 <main+0x244>)
 80014ae:	f002 ffb4 	bl	800441a <HAL_UART_Transmit>
		while (1)
 80014b2:	e7fe      	b.n	80014b2 <main+0x1a2>
			;
	}

	// Initialize neural network
	if (!ai_small_words_model_init(small_words_model, &ai_params)) {
 80014b4:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80014b8:	3b58      	subs	r3, #88	; 0x58
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80014c0:	3b38      	subs	r3, #56	; 0x38
 80014c2:	4619      	mov	r1, r3
 80014c4:	4610      	mov	r0, r2
 80014c6:	f003 fbfb 	bl	8004cc0 <ai_small_words_model_init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f083 0301 	eor.w	r3, r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d01b      	beq.n	800150e <main+0x1fe>
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80014d6:	f507 43f8 	add.w	r3, r7, #31744	; 0x7c00
 80014da:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80014de:	491e      	ldr	r1, [pc, #120]	; (8001558 <main+0x248>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f009 fae9 	bl	800aab8 <siprintf>
 80014e6:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 80014ea:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80014ee:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 80014f0:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 80014f4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f507 41f8 	add.w	r1, r7, #31744	; 0x7c00
 8001500:	f101 0168 	add.w	r1, r1, #104	; 0x68
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	4813      	ldr	r0, [pc, #76]	; (8001554 <main+0x244>)
 8001508:	f002 ff87 	bl	800441a <HAL_UART_Transmit>
		while (1)
 800150c:	e7fe      	b.n	800150c <main+0x1fc>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		float in_array[512] = { -462.5489807128906, -460.6819152832031,
 800150e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001512:	3b38      	subs	r3, #56	; 0x38
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <main+0x24c>)
 8001516:	4618      	mov	r0, r3
 8001518:	4611      	mov	r1, r2
 800151a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800151e:	461a      	mov	r2, r3
 8001520:	f008 fa20 	bl	8009964 <memcpy>
				4.869168281555176, 10.858297348022461, 8.825749397277832,
				7.653464317321777, 8.393640518188477, 9.717666625976562,
				4.587841033935547, -1.5723075866699219, -2.0356557369232178 };

// Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_SMALL_WORDS_MODEL_IN_1_SIZE; i++) {
 8001524:	2300      	movs	r3, #0
 8001526:	f507 42f9 	add.w	r2, r7, #31872	; 0x7c80
 800152a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e037      	b.n	80015a2 <main+0x292>
 8001532:	bf00      	nop
 8001534:	0800eb8c 	.word	0x0800eb8c
 8001538:	0800eba4 	.word	0x0800eba4
 800153c:	40040440 	.word	0x40040440
 8001540:	00018d20 	.word	0x00018d20
 8001544:	00040440 	.word	0x00040440
 8001548:	2000b1a0 	.word	0x2000b1a0
 800154c:	2000b2e4 	.word	0x2000b2e4
 8001550:	0800eb14 	.word	0x0800eb14
 8001554:	2000b2a0 	.word	0x2000b2a0
 8001558:	0800eb3c 	.word	0x0800eb3c
 800155c:	0800ebbc 	.word	0x0800ebbc
			((ai_float*) in_data)[i] = (ai_float) in_array[i];
 8001560:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001564:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	009a      	lsls	r2, r3, #2
 800156c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8001570:	3b54      	subs	r3, #84	; 0x54
 8001572:	441a      	add	r2, r3
 8001574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001578:	3b38      	subs	r3, #56	; 0x38
 800157a:	f507 41f9 	add.w	r1, r7, #31872	; 0x7c80
 800157e:	f101 0134 	add.w	r1, r1, #52	; 0x34
 8001582:	6809      	ldr	r1, [r1, #0]
 8001584:	0089      	lsls	r1, r1, #2
 8001586:	440b      	add	r3, r1
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < AI_SMALL_WORDS_MODEL_IN_1_SIZE; i++) {
 800158c:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001590:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	f507 42f9 	add.w	r2, r7, #31872	; 0x7c80
 800159c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 80015a6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b0:	d3d6      	bcc.n	8001560 <main+0x250>
		}

// Perform inference
		nbatch = ai_small_words_model_run(small_words_model, &ai_input[0],
 80015b2:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80015b6:	3b58      	subs	r3, #88	; 0x58
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	f607 0238 	addw	r2, r7, #2104	; 0x838
 80015be:	3a08      	subs	r2, #8
 80015c0:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80015c4:	3b70      	subs	r3, #112	; 0x70
 80015c6:	4619      	mov	r1, r3
 80015c8:	f003 fbb6 	bl	8004d38 <ai_small_words_model_run>
 80015cc:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 80015d0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80015d4:	6018      	str	r0, [r3, #0]
				&ai_output[0]);
		if (nbatch != 1) {
 80015d6:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 80015da:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d01a      	beq.n	800161a <main+0x30a>
			buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80015e4:	f507 43f8 	add.w	r3, r7, #31744	; 0x7c00
 80015e8:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80015ec:	496f      	ldr	r1, [pc, #444]	; (80017ac <main+0x49c>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f009 fa62 	bl	800aab8 <siprintf>
 80015f4:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 80015f8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80015fc:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 80015fe:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001602:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29a      	uxth	r2, r3
 800160a:	f507 41f8 	add.w	r1, r7, #31744	; 0x7c00
 800160e:	f101 0168 	add.w	r1, r1, #104	; 0x68
 8001612:	2364      	movs	r3, #100	; 0x64
 8001614:	4866      	ldr	r0, [pc, #408]	; (80017b0 <main+0x4a0>)
 8001616:	f002 ff00 	bl	800441a <HAL_UART_Transmit>
		}

		uint8_t idx = argmax(out_data, AI_SMALL_WORDS_MODEL_OUT_1_SIZE);
 800161a:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800161e:	3b54      	subs	r3, #84	; 0x54
 8001620:	2108      	movs	r1, #8
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fcf2 	bl	800100c <argmax>
 8001628:	4603      	mov	r3, r0
 800162a:	f507 42f9 	add.w	r2, r7, #31872	; 0x7c80
 800162e:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8001632:	7013      	strb	r3, [r2, #0]

		char *word = get_word(idx);
 8001634:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001638:	f103 0323 	add.w	r3, r3, #35	; 0x23
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd24 	bl	800108c <get_word>
 8001644:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001648:	f103 031c 	add.w	r3, r3, #28
 800164c:	6018      	str	r0, [r3, #0]

		recognize_commands(word);
 800164e:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001652:	f103 031c 	add.w	r3, r3, #28
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	f7ff fd36 	bl	80010c8 <recognize_commands>

		if (display_words_enabled) {
 800165c:	4b55      	ldr	r3, [pc, #340]	; (80017b4 <main+0x4a4>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d027      	beq.n	80016b4 <main+0x3a4>

			// Print output of neural network along with inference time (microseconds)
			buf_len = sprintf(buf, "%d %s\r\n", idx, word);
 8001664:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001668:	f103 0323 	add.w	r3, r3, #35	; 0x23
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	f507 40f8 	add.w	r0, r7, #31744	; 0x7c00
 8001672:	f100 0068 	add.w	r0, r0, #104	; 0x68
 8001676:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 800167a:	f103 031c 	add.w	r3, r3, #28
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	494d      	ldr	r1, [pc, #308]	; (80017b8 <main+0x4a8>)
 8001682:	f009 fa19 	bl	800aab8 <siprintf>
 8001686:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 800168a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800168e:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 8001690:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001694:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f507 41f8 	add.w	r1, r7, #31744	; 0x7c00
 80016a0:	f101 0168 	add.w	r1, r1, #104	; 0x68
 80016a4:	2364      	movs	r3, #100	; 0x64
 80016a6:	4842      	ldr	r0, [pc, #264]	; (80017b0 <main+0x4a0>)
 80016a8:	f002 feb7 	bl	800441a <HAL_UART_Transmit>

			// Wait before doing it again
			HAL_Delay(500);
 80016ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b0:	f000 fc7a 	bl	8001fa8 <HAL_Delay>
		}

		if (rxstate == 1) {
 80016b4:	4b41      	ldr	r3, [pc, #260]	; (80017bc <main+0x4ac>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d134      	bne.n	8001726 <main+0x416>
			// Filter the input values and store the results in an intermediate buffer
			PDM_Filter(&pdmRxBuf[0], &MidBuffer[0], &PDM1_filter_handler);
 80016bc:	4a40      	ldr	r2, [pc, #256]	; (80017c0 <main+0x4b0>)
 80016be:	4941      	ldr	r1, [pc, #260]	; (80017c4 <main+0x4b4>)
 80016c0:	4841      	ldr	r0, [pc, #260]	; (80017c8 <main+0x4b8>)
 80016c2:	f005 fa1f 	bl	8006b04 <PDM_Filter>

			// The mid buffer has length 16 because the PDM is configured to produce 16 samples
			// of PCM each time it is called
			for (int i = 0; i < 16; i++) {
 80016c6:	2300      	movs	r3, #0
 80016c8:	f507 42f9 	add.w	r2, r7, #31872	; 0x7c80
 80016cc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e01e      	b.n	8001712 <main+0x402>
				fifobuf[fifo_w_ptr] = MidBuffer[i];
 80016d4:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <main+0x4bc>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4a3a      	ldr	r2, [pc, #232]	; (80017c4 <main+0x4b4>)
 80016dc:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 80016e0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <main+0x4c0>)
 80016ec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				fifo_w_ptr++;
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <main+0x4bc>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <main+0x4bc>)
 80016fa:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 16; i++) {
 80016fc:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001700:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	f507 42f9 	add.w	r2, r7, #31872	; 0x7c80
 800170c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001716:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	ddd9      	ble.n	80016d4 <main+0x3c4>
			}

			// Reset rx state
			rxstate = 0;
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <main+0x4ac>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]

		}

		if (rxstate == 2) {
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <main+0x4ac>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d134      	bne.n	8001798 <main+0x488>
			// Filter the input values and store the results in an intermediate buffer
			PDM_Filter(&pdmRxBuf[64], &MidBuffer[0], &PDM1_filter_handler);
 800172e:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <main+0x4b0>)
 8001730:	4924      	ldr	r1, [pc, #144]	; (80017c4 <main+0x4b4>)
 8001732:	4828      	ldr	r0, [pc, #160]	; (80017d4 <main+0x4c4>)
 8001734:	f005 f9e6 	bl	8006b04 <PDM_Filter>
			for (int i = 0; i < 16; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	f507 42f9 	add.w	r2, r7, #31872	; 0x7c80
 800173e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e01e      	b.n	8001784 <main+0x474>
				fifobuf[fifo_w_ptr] = MidBuffer[i];
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <main+0x4bc>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <main+0x4b4>)
 800174e:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001752:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <main+0x4c0>)
 800175e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				fifo_w_ptr++;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <main+0x4bc>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <main+0x4bc>)
 800176c:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 16; i++) {
 800176e:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001772:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	f507 42f9 	add.w	r2, r7, #31872	; 0x7c80
 800177e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	f507 43f9 	add.w	r3, r7, #31872	; 0x7c80
 8001788:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	ddd9      	ble.n	8001746 <main+0x436>
			 fifo_read_enabled = 1;
			 debug("fifo_read_enabled\r\n");
			 }*/

			// Reset rx state
			rxstate = 0;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <main+0x4ac>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
		}

		if (fifo_w_ptr == 4096) {
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <main+0x4bc>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a0:	f47f aeb5 	bne.w	800150e <main+0x1fe>
			//Stop the DMA
			//HAL_I2S_DMAPause(&hi2s2);

			// Send to UART or Store Data
			fifo_w_ptr = 0;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <main+0x4bc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	801a      	strh	r2, [r3, #0]
	while (1) {
 80017aa:	e6b0      	b.n	800150e <main+0x1fe>
 80017ac:	0800eb60 	.word	0x0800eb60
 80017b0:	2000b2a0 	.word	0x2000b2a0
 80017b4:	20001000 	.word	0x20001000
 80017b8:	0800eb84 	.word	0x0800eb84
 80017bc:	20000ffd 	.word	0x20000ffd
 80017c0:	2000d338 	.word	0x2000d338
 80017c4:	2000b180 	.word	0x2000b180
 80017c8:	2000b1a0 	.word	0x2000b1a0
 80017cc:	20000ffe 	.word	0x20000ffe
 80017d0:	2000b32c 	.word	0x2000b32c
 80017d4:	2000b220 	.word	0x2000b220

080017d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b094      	sub	sp, #80	; 0x50
 80017dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	2230      	movs	r2, #48	; 0x30
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f008 f8ca 	bl	8009980 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(10);
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <SystemClock_Config+0xd4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001804:	4a29      	ldr	r2, [pc, #164]	; (80018ac <SystemClock_Config+0xd4>)
 8001806:	f043 030a 	orr.w	r3, r3, #10
 800180a:	6053      	str	r3, [r2, #4]
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <SystemClock_Config+0xd4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <SystemClock_Config+0xd4>)
 8001812:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001816:	6053      	str	r3, [r2, #4]
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <SystemClock_Config+0xd4>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a22      	ldr	r2, [pc, #136]	; (80018ac <SystemClock_Config+0xd4>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <SystemClock_Config+0xd4>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <SystemClock_Config+0xd8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <SystemClock_Config+0xd8>)
 800183e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <SystemClock_Config+0xd8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001850:	2302      	movs	r3, #2
 8001852:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001854:	2301      	movs	r3, #1
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001858:	2310      	movs	r3, #16
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800185c:	2300      	movs	r3, #0
 800185e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001860:	2300      	movs	r3, #0
 8001862:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001864:	f107 0320 	add.w	r3, r7, #32
 8001868:	4618      	mov	r0, r3
 800186a:	f001 ffd5 	bl	8003818 <HAL_RCC_OscConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0xa0>
		Error_Handler();
 8001874:	f000 f932 	bl	8001adc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001878:	230f      	movs	r3, #15
 800187a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fa38 	bl	8003d08 <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0xca>
		Error_Handler();
 800189e:	f000 f91d 	bl	8001adc <Error_Handler>
	}
}
 80018a2:	bf00      	nop
 80018a4:	3750      	adds	r7, #80	; 0x50
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000

080018b4 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_CRC_Init+0x30>)
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <MX_CRC_Init+0x34>)
 80018bc:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <MX_CRC_Init+0x30>)
 80018c0:	f000 fca7 	bl	8002212 <HAL_CRC_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_CRC_Init+0x1a>
		Error_Handler();
 80018ca:	f000 f907 	bl	8001adc <Error_Handler>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <MX_CRC_Init+0x30>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <MX_CRC_Init+0x30>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0201 	orr.w	r2, r2, #1
 80018dc:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20009114 	.word	0x20009114
 80018e8:	40023000 	.word	0x40023000

080018ec <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_I2S2_Init+0x54>)
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <MX_I2S2_Init+0x58>)
 80018f4:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_I2S2_Init+0x54>)
 80018f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018fc:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_I2S2_Init+0x54>)
 8001900:	2210      	movs	r2, #16
 8001902:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_I2S2_Init+0x54>)
 8001906:	2203      	movs	r2, #3
 8001908:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <MX_I2S2_Init+0x54>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_I2S2_Init+0x54>)
 8001912:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001916:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_I2S2_Init+0x54>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_I2S2_Init+0x54>)
 8001920:	2200      	movs	r2, #0
 8001922:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_I2S2_Init+0x54>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_I2S2_Init+0x54>)
 800192c:	f001 f9ce 	bl	8002ccc <HAL_I2S_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_I2S2_Init+0x4e>
		Error_Handler();
 8001936:	f000 f8d1 	bl	8001adc <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000b2e4 	.word	0x2000b2e4
 8001944:	40003800 	.word	0x40003800

08001948 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_USART2_UART_Init+0x50>)
 8001950:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001980:	f002 fcfe 	bl	8004380 <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800198a:	f000 f8a7 	bl	8001adc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000b2a0 	.word	0x2000b2a0
 8001998:	40004400 	.word	0x40004400

0800199c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_DMA_Init+0x3c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <MX_DMA_Init+0x3c>)
 80019ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_DMA_Init+0x3c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	200e      	movs	r0, #14
 80019c4:	f000 fbef 	bl	80021a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019c8:	200e      	movs	r0, #14
 80019ca:	f000 fc08 	bl	80021de <HAL_NVIC_EnableIRQ>

}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <MX_GPIO_Init+0xb8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <MX_GPIO_Init+0xb8>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001a68:	480b      	ldr	r0, [pc, #44]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a6a:	f001 f8fb 	bl	8002c64 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 8001a6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a88:	f000 ff50 	bl	800292c <HAL_GPIO_Init>

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020c00 	.word	0x40020c00

08001a9c <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	rxstate = 1;
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000ffd 	.word	0x20000ffd

08001abc <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	rxstate = 2;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_I2S_RxCpltCallback+0x1c>)
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	701a      	strb	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000ffd 	.word	0x20000ffd

08001adc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ae4:	e7fe      	b.n	8001ae4 <Error_Handler+0x8>
	...

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <HAL_MspInit+0x4c>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10d      	bne.n	8001b66 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023000 	.word	0x40023000
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	; 0x38
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_I2S_MspInit+0x154>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	f040 808c 	bne.w	8001cc6 <HAL_I2S_MspInit+0x14a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001bb2:	23c0      	movs	r3, #192	; 0xc0
 8001bb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fa9e 	bl	8004100 <HAL_RCCEx_PeriphCLKConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001bca:	f7ff ff87 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a3f      	ldr	r2, [pc, #252]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a38      	ldr	r2, [pc, #224]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_I2S_MspInit+0x158>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c22:	2308      	movs	r3, #8
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c32:	2305      	movs	r3, #5
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4826      	ldr	r0, [pc, #152]	; (8001cd8 <HAL_I2S_MspInit+0x15c>)
 8001c3e:	f000 fe75 	bl	800292c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001c42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c54:	2305      	movs	r3, #5
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481f      	ldr	r0, [pc, #124]	; (8001cdc <HAL_I2S_MspInit+0x160>)
 8001c60:	f000 fe64 	bl	800292c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <HAL_I2S_MspInit+0x168>)
 8001c68:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c82:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c8a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c92:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001c9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001cac:	f000 face 	bl	800224c <HAL_DMA_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001cb6:	f7ff ff11 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001cbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_I2S_MspInit+0x164>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3738      	adds	r7, #56	; 0x38
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40003800 	.word	0x40003800
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	2000911c 	.word	0x2000911c
 8001ce4:	40026058 	.word	0x40026058

08001ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12b      	bne.n	8001d62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d42:	230c      	movs	r3, #12
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d52:	2307      	movs	r3, #7
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_UART_MspInit+0x8c>)
 8001d5e:	f000 fde5 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>

08001d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f8d0 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA1_Stream3_IRQHandler+0x10>)
 8001dd2:	f000 fb41 	bl	8002458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000911c 	.word	0x2000911c

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f007 fd64 	bl	80098dc <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20020000 	.word	0x20020000
 8001e40:	00000800 	.word	0x00000800
 8001e44:	20001004 	.word	0x20001004
 8001e48:	2000d398 	.word	0x2000d398

08001e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <SystemInit+0x20>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <SystemInit+0x20>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e76:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e8c:	4c0b      	ldr	r4, [pc, #44]	; (8001ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e9a:	f7ff ffd7 	bl	8001e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f007 fd35 	bl	800990c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea2:	f7ff fa35 	bl	8001310 <main>
  bx  lr    
 8001ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	20000fdc 	.word	0x20000fdc
  ldr r2, =_sidata
 8001eb4:	080286ac 	.word	0x080286ac
  ldr r2, =_sbss
 8001eb8:	20000fe0 	.word	0x20000fe0
  ldr r4, =_ebss
 8001ebc:	2000d394 	.word	0x2000d394

08001ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC_IRQHandler>
	...

08001ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_Init+0x40>)
 8001ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_Init+0x40>)
 8001eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_Init+0x40>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f94f 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fdf6 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f967 	bl	80021fa <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f44:	f000 f92f 	bl	80021a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000420 	.word	0x20000420
 8001f60:	20000428 	.word	0x20000428
 8001f64:	20000424 	.word	0x20000424

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000428 	.word	0x20000428
 8001f8c:	2000d32c 	.word	0x2000d32c

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	2000d32c 	.word	0x2000d32c

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000428 	.word	0x20000428

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e00e      	b.n	8002242 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	795b      	ldrb	r3, [r3, #5]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff fc7f 	bl	8001b38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff fe9a 	bl	8001f90 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e099      	b.n	800239c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002288:	e00f      	b.n	80022aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800228a:	f7ff fe81 	bl	8001f90 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b05      	cmp	r3, #5
 8002296:	d908      	bls.n	80022aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2203      	movs	r2, #3
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e078      	b.n	800239c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e8      	bne.n	800228a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_DMA_Init+0x158>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2b04      	cmp	r3, #4
 8002302:	d107      	bne.n	8002314 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4313      	orrs	r3, r2
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f023 0307 	bic.w	r3, r3, #7
 800232a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2b04      	cmp	r3, #4
 800233c:	d117      	bne.n	800236e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fa6f 	bl	8002834 <DMA_CheckFifoParam>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800236a:	2301      	movs	r3, #1
 800236c:	e016      	b.n	800239c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa26 	bl	80027c8 <DMA_CalcBaseAndBitshift>
 800237c:	4603      	mov	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	223f      	movs	r2, #63	; 0x3f
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	f010803f 	.word	0xf010803f

080023a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_DMA_Start_IT+0x26>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e040      	b.n	8002450 <HAL_DMA_Start_IT+0xa8>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d12f      	bne.n	8002442 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f9b8 	bl	800276c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	223f      	movs	r2, #63	; 0x3f
 8002402:	409a      	lsls	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0216 	orr.w	r2, r2, #22
 8002416:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e005      	b.n	800244e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002464:	4b92      	ldr	r3, [pc, #584]	; (80026b0 <HAL_DMA_IRQHandler+0x258>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a92      	ldr	r2, [pc, #584]	; (80026b4 <HAL_DMA_IRQHandler+0x25c>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0a9b      	lsrs	r3, r3, #10
 8002470:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	2208      	movs	r2, #8
 8002484:	409a      	lsls	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01a      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0204 	bic.w	r2, r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	2208      	movs	r2, #8
 80024b2:	409a      	lsls	r2, r3
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2201      	movs	r2, #1
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	2201      	movs	r2, #1
 80024e8:	409a      	lsls	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f043 0202 	orr.w	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	2204      	movs	r2, #4
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d012      	beq.n	8002530 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00b      	beq.n	8002530 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	2204      	movs	r2, #4
 800251e:	409a      	lsls	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	f043 0204 	orr.w	r2, r3, #4
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2210      	movs	r2, #16
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d043      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d03c      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	2210      	movs	r2, #16
 8002554:	409a      	lsls	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d018      	beq.n	800259a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d108      	bne.n	8002588 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d024      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
 8002586:	e01f      	b.n	80025c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e016      	b.n	80025c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0208 	bic.w	r2, r2, #8
 80025b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	2220      	movs	r2, #32
 80025ce:	409a      	lsls	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 808e 	beq.w	80026f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8086 	beq.w	80026f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2220      	movs	r2, #32
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d136      	bne.n	8002670 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0216 	bic.w	r2, r2, #22
 8002610:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002620:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	d103      	bne.n	8002632 <HAL_DMA_IRQHandler+0x1da>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0208 	bic.w	r2, r2, #8
 8002640:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	223f      	movs	r2, #63	; 0x3f
 8002648:	409a      	lsls	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002662:	2b00      	cmp	r3, #0
 8002664:	d07d      	beq.n	8002762 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
        }
        return;
 800266e:	e078      	b.n	8002762 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01c      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	2b00      	cmp	r3, #0
 8002692:	d030      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e02b      	b.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d027      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e022      	b.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
 80026b0:	20000420 	.word	0x20000420
 80026b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0210 	bic.w	r2, r2, #16
 80026d4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d032      	beq.n	8002764 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d022      	beq.n	8002750 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2205      	movs	r2, #5
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	429a      	cmp	r2, r3
 800272c:	d307      	bcc.n	800273e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f2      	bne.n	8002722 <HAL_DMA_IRQHandler+0x2ca>
 800273c:	e000      	b.n	8002740 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800273e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
 8002760:	e000      	b.n	8002764 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002762:	bf00      	nop
    }
  }
}
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop

0800276c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002788:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d108      	bne.n	80027ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027aa:	e007      	b.n	80027bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	60da      	str	r2, [r3, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	3b10      	subs	r3, #16
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <DMA_CalcBaseAndBitshift+0x64>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027e2:	4a13      	ldr	r2, [pc, #76]	; (8002830 <DMA_CalcBaseAndBitshift+0x68>)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d909      	bls.n	800280a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	1d1a      	adds	r2, r3, #4
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	659a      	str	r2, [r3, #88]	; 0x58
 8002808:	e007      	b.n	800281a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	aaaaaaab 	.word	0xaaaaaaab
 8002830:	0800f450 	.word	0x0800f450

08002834 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11f      	bne.n	800288e <DMA_CheckFifoParam+0x5a>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d856      	bhi.n	8002902 <DMA_CheckFifoParam+0xce>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <DMA_CheckFifoParam+0x28>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	0800286d 	.word	0x0800286d
 8002860:	0800287f 	.word	0x0800287f
 8002864:	0800286d 	.word	0x0800286d
 8002868:	08002903 	.word	0x08002903
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d046      	beq.n	8002906 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800287c:	e043      	b.n	8002906 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002886:	d140      	bne.n	800290a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800288c:	e03d      	b.n	800290a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002896:	d121      	bne.n	80028dc <DMA_CheckFifoParam+0xa8>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d837      	bhi.n	800290e <DMA_CheckFifoParam+0xda>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <DMA_CheckFifoParam+0x70>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	080028b5 	.word	0x080028b5
 80028a8:	080028bb 	.word	0x080028bb
 80028ac:	080028b5 	.word	0x080028b5
 80028b0:	080028cd 	.word	0x080028cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      break;
 80028b8:	e030      	b.n	800291c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d025      	beq.n	8002912 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ca:	e022      	b.n	8002912 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d4:	d11f      	bne.n	8002916 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028da:	e01c      	b.n	8002916 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d903      	bls.n	80028ea <DMA_CheckFifoParam+0xb6>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d003      	beq.n	80028f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028e8:	e018      	b.n	800291c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      break;
 80028ee:	e015      	b.n	800291c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002900:	e00b      	b.n	800291a <DMA_CheckFifoParam+0xe6>
      break;
 8002902:	bf00      	nop
 8002904:	e00a      	b.n	800291c <DMA_CheckFifoParam+0xe8>
      break;
 8002906:	bf00      	nop
 8002908:	e008      	b.n	800291c <DMA_CheckFifoParam+0xe8>
      break;
 800290a:	bf00      	nop
 800290c:	e006      	b.n	800291c <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
 8002910:	e004      	b.n	800291c <DMA_CheckFifoParam+0xe8>
      break;
 8002912:	bf00      	nop
 8002914:	e002      	b.n	800291c <DMA_CheckFifoParam+0xe8>
      break;   
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <DMA_CheckFifoParam+0xe8>
      break;
 800291a:	bf00      	nop
    }
  } 
  
  return status; 
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	e16b      	b.n	8002c20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002948:	2201      	movs	r2, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	f040 815a 	bne.w	8002c1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d005      	beq.n	800297e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	2b02      	cmp	r3, #2
 800297c:	d130      	bne.n	80029e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2203      	movs	r2, #3
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b4:	2201      	movs	r2, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 0201 	and.w	r2, r3, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d017      	beq.n	8002a1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d123      	bne.n	8002a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3208      	adds	r2, #8
 8002a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	220f      	movs	r2, #15
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	08da      	lsrs	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3208      	adds	r2, #8
 8002a6a:	69b9      	ldr	r1, [r7, #24]
 8002a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0203 	and.w	r2, r3, #3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80b4 	beq.w	8002c1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b60      	ldr	r3, [pc, #384]	; (8002c38 <HAL_GPIO_Init+0x30c>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	4a5f      	ldr	r2, [pc, #380]	; (8002c38 <HAL_GPIO_Init+0x30c>)
 8002abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_GPIO_Init+0x30c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ace:	4a5b      	ldr	r2, [pc, #364]	; (8002c3c <HAL_GPIO_Init+0x310>)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_GPIO_Init+0x314>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02b      	beq.n	8002b52 <HAL_GPIO_Init+0x226>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a51      	ldr	r2, [pc, #324]	; (8002c44 <HAL_GPIO_Init+0x318>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d025      	beq.n	8002b4e <HAL_GPIO_Init+0x222>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_GPIO_Init+0x31c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01f      	beq.n	8002b4a <HAL_GPIO_Init+0x21e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4f      	ldr	r2, [pc, #316]	; (8002c4c <HAL_GPIO_Init+0x320>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d019      	beq.n	8002b46 <HAL_GPIO_Init+0x21a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4e      	ldr	r2, [pc, #312]	; (8002c50 <HAL_GPIO_Init+0x324>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0x216>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4d      	ldr	r2, [pc, #308]	; (8002c54 <HAL_GPIO_Init+0x328>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00d      	beq.n	8002b3e <HAL_GPIO_Init+0x212>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_GPIO_Init+0x32c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_GPIO_Init+0x20e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_GPIO_Init+0x330>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_GPIO_Init+0x20a>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e00e      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b36:	2308      	movs	r3, #8
 8002b38:	e00c      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	e00a      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b3e:	2305      	movs	r3, #5
 8002b40:	e008      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b42:	2304      	movs	r3, #4
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b46:	2303      	movs	r3, #3
 8002b48:	e004      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b52:	2300      	movs	r3, #0
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	f002 0203 	and.w	r2, r2, #3
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	4093      	lsls	r3, r2
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b64:	4935      	ldr	r1, [pc, #212]	; (8002c3c <HAL_GPIO_Init+0x310>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b72:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b96:	4a32      	ldr	r2, [pc, #200]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bc0:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c14:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	f67f ae90 	bls.w	8002948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40020000 	.word	0x40020000
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40021400 	.word	0x40021400
 8002c58:	40021800 	.word	0x40021800
 8002c5c:	40021c00 	.word	0x40021c00
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	041a      	lsls	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca8:	887a      	ldrh	r2, [r7, #2]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	041a      	lsls	r2, r3, #16
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	43d9      	mvns	r1, r3
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	619a      	str	r2, [r3, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e128      	b.n	8002f30 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a90      	ldr	r2, [pc, #576]	; (8002f38 <HAL_I2S_Init+0x26c>)
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fe ff3f 	bl	8001b7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d14:	f023 030f 	bic.w	r3, r3, #15
 8002d18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d060      	beq.n	8002dec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d32:	2310      	movs	r3, #16
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e001      	b.n	8002d3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d802      	bhi.n	8002d4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f001 faba 	bl	80042c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d50:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5a:	d125      	bne.n	8002da8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	461a      	mov	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	3305      	adds	r3, #5
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	e01f      	b.n	8002dc6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	461a      	mov	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	3305      	adds	r3, #5
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	e00e      	b.n	8002dc6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	461a      	mov	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	3305      	adds	r3, #5
 8002dc4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4a5c      	ldr	r2, [pc, #368]	; (8002f3c <HAL_I2S_Init+0x270>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	08db      	lsrs	r3, r3, #3
 8002dd0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	e003      	b.n	8002df4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002dec:	2302      	movs	r3, #2
 8002dee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d902      	bls.n	8002e00 <HAL_I2S_Init+0x134>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2bff      	cmp	r3, #255	; 0xff
 8002dfe:	d907      	bls.n	8002e10 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f043 0210 	orr.w	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e08f      	b.n	8002f30 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	ea42 0103 	orr.w	r1, r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e2e:	f023 030f 	bic.w	r3, r3, #15
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6851      	ldr	r1, [r2, #4]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6892      	ldr	r2, [r2, #8]
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68d2      	ldr	r2, [r2, #12]
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6992      	ldr	r2, [r2, #24]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e52:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d161      	bne.n	8002f20 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <HAL_I2S_Init+0x274>)
 8002e60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a37      	ldr	r2, [pc, #220]	; (8002f44 <HAL_I2S_Init+0x278>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2S_Init+0x1a4>
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_I2S_Init+0x27c>)
 8002e6e:	e001      	b.n	8002e74 <HAL_I2S_Init+0x1a8>
 8002e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	4932      	ldr	r1, [pc, #200]	; (8002f44 <HAL_I2S_Init+0x278>)
 8002e7c:	428a      	cmp	r2, r1
 8002e7e:	d101      	bne.n	8002e84 <HAL_I2S_Init+0x1b8>
 8002e80:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <HAL_I2S_Init+0x27c>)
 8002e82:	e001      	b.n	8002e88 <HAL_I2S_Init+0x1bc>
 8002e84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e8c:	f023 030f 	bic.w	r3, r3, #15
 8002e90:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a2b      	ldr	r2, [pc, #172]	; (8002f44 <HAL_I2S_Init+0x278>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_I2S_Init+0x1d4>
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_I2S_Init+0x27c>)
 8002e9e:	e001      	b.n	8002ea4 <HAL_I2S_Init+0x1d8>
 8002ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_I2S_Init+0x278>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2S_Init+0x1ea>
 8002eb2:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <HAL_I2S_Init+0x27c>)
 8002eb4:	e001      	b.n	8002eba <HAL_I2S_Init+0x1ee>
 8002eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec6:	d003      	beq.n	8002ed0 <HAL_I2S_Init+0x204>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e001      	b.n	8002edc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002efa:	4313      	orrs	r3, r2
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	897b      	ldrh	r3, [r7, #10]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f08:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_I2S_Init+0x278>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_I2S_Init+0x24c>
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_I2S_Init+0x27c>)
 8002f16:	e001      	b.n	8002f1c <HAL_I2S_Init+0x250>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1c:	897a      	ldrh	r2, [r7, #10]
 8002f1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	08003251 	.word	0x08003251
 8002f3c:	cccccccd 	.word	0xcccccccd
 8002f40:	08003365 	.word	0x08003365
 8002f44:	40003800 	.word	0x40003800
 8002f48:	40003400 	.word	0x40003400

08002f4c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_I2S_Receive_DMA+0x1a>
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0a1      	b.n	80030ae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_I2S_Receive_DMA+0x2e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e099      	b.n	80030ae <HAL_I2S_Receive_DMA+0x162>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d005      	beq.n	8002f9a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
 8002f98:	e089      	b.n	80030ae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d002      	beq.n	8002fc6 <HAL_I2S_Receive_DMA+0x7a>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d10a      	bne.n	8002fdc <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	865a      	strh	r2, [r3, #50]	; 0x32
 8002fda:	e005      	b.n	8002fe8 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	88fa      	ldrh	r2, [r7, #6]
 8002fe6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <HAL_I2S_Receive_DMA+0x16c>)
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	4a31      	ldr	r2, [pc, #196]	; (80030bc <HAL_I2S_Receive_DMA+0x170>)
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	4a30      	ldr	r2, [pc, #192]	; (80030c0 <HAL_I2S_Receive_DMA+0x174>)
 8002ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300e:	d10a      	bne.n	8003026 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	4619      	mov	r1, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800303c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800303e:	f7ff f9b3 	bl	80023a8 <HAL_DMA_Start_IT>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00f      	beq.n	8003068 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f043 0208 	orr.w	r2, r3, #8
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e022      	b.n	80030ae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003084:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	0800312f 	.word	0x0800312f
 80030bc:	080030ed 	.word	0x080030ed
 80030c0:	0800314b 	.word	0x0800314b

080030c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10e      	bne.n	8003120 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7fe fccb 	bl	8001abc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7fe fcad 	bl	8001a9c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0203 	bic.w	r2, r2, #3
 8003166:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f043 0208 	orr.w	r2, r3, #8
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff ffa5 	bl	80030d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	881a      	ldrh	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	1c9a      	adds	r2, r3, #2
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10e      	bne.n	80031ea <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff6d 	bl	80030c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	b292      	uxth	r2, r2
 8003206:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	1c9a      	adds	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003238:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe fc3a 	bl	8001abc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b04      	cmp	r3, #4
 800326a:	d13a      	bne.n	80032e2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d109      	bne.n	800328a <I2S_IRQHandler+0x3a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d102      	bne.n	800328a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff ffb4 	bl	80031f2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d126      	bne.n	80032e2 <I2S_IRQHandler+0x92>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d11f      	bne.n	80032e2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032b0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	f043 0202 	orr.w	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff fefb 	bl	80030d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d136      	bne.n	800335c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d109      	bne.n	800330c <I2S_IRQHandler+0xbc>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	2b80      	cmp	r3, #128	; 0x80
 8003304:	d102      	bne.n	800330c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff45 	bl	8003196 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b08      	cmp	r3, #8
 8003314:	d122      	bne.n	800335c <I2S_IRQHandler+0x10c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b20      	cmp	r3, #32
 8003322:	d11b      	bne.n	800335c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003332:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff febe 	bl	80030d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800335c:	bf00      	nop
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4aa2      	ldr	r2, [pc, #648]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800337e:	4ba2      	ldr	r3, [pc, #648]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003380:	e001      	b.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a9b      	ldr	r2, [pc, #620]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800339c:	4b9a      	ldr	r3, [pc, #616]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800339e:	e001      	b.n	80033a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b0:	d004      	beq.n	80033bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 8099 	bne.w	80034ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d107      	bne.n	80033d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f925 	bl	8003620 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f9c8 	bl	8003780 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d13a      	bne.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d035      	beq.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7e      	ldr	r2, [pc, #504]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800340e:	4b7e      	ldr	r3, [pc, #504]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003410:	e001      	b.n	8003416 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4979      	ldr	r1, [pc, #484]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800341e:	428b      	cmp	r3, r1
 8003420:	d101      	bne.n	8003426 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003422:	4b79      	ldr	r3, [pc, #484]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003424:	e001      	b.n	800342a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800342e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800343e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fe34 	bl	80030d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	f040 80be 	bne.w	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80b8 	beq.w	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003496:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a59      	ldr	r2, [pc, #356]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034a2:	4b59      	ldr	r3, [pc, #356]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034a4:	e001      	b.n	80034aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80034a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4954      	ldr	r1, [pc, #336]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034b2:	428b      	cmp	r3, r1
 80034b4:	d101      	bne.n	80034ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034b6:	4b54      	ldr	r3, [pc, #336]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034b8:	e001      	b.n	80034be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034c4:	2300      	movs	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fdf6 	bl	80030d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034ec:	e084      	b.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d107      	bne.n	8003508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8be 	bl	8003684 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8fd 	bl	800371c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d12f      	bne.n	800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02a      	beq.n	800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003544:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003552:	e001      	b.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4929      	ldr	r1, [pc, #164]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003560:	428b      	cmp	r3, r1
 8003562:	d101      	bne.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003566:	e001      	b.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003570:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff fda6 	bl	80030d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d131      	bne.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02c      	beq.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a17      	ldr	r2, [pc, #92]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80035aa:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035ac:	e001      	b.n	80035b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4912      	ldr	r1, [pc, #72]	; (8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ba:	428b      	cmp	r3, r1
 80035bc:	d101      	bne.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035c0:	e001      	b.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80035c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f043 0204 	orr.w	r2, r3, #4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fd71 	bl	80030d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035f6:	e000      	b.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035f8:	bf00      	nop
}
 80035fa:	bf00      	nop
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40003800 	.word	0x40003800
 8003608:	40003400 	.word	0x40003400

0800360c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c99      	adds	r1, r3, #2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6251      	str	r1, [r2, #36]	; 0x24
 8003632:	881a      	ldrh	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d113      	bne.n	800367a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003660:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ffc9 	bl	800360c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c99      	adds	r1, r3, #2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6251      	str	r1, [r2, #36]	; 0x24
 8003696:	8819      	ldrh	r1, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <I2SEx_TxISR_I2SExt+0x90>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <I2SEx_TxISR_I2SExt+0x22>
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <I2SEx_TxISR_I2SExt+0x94>)
 80036a4:	e001      	b.n	80036aa <I2SEx_TxISR_I2SExt+0x26>
 80036a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036aa:	460a      	mov	r2, r1
 80036ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d121      	bne.n	800370a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <I2SEx_TxISR_I2SExt+0x90>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <I2SEx_TxISR_I2SExt+0x50>
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <I2SEx_TxISR_I2SExt+0x94>)
 80036d2:	e001      	b.n	80036d8 <I2SEx_TxISR_I2SExt+0x54>
 80036d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	490d      	ldr	r1, [pc, #52]	; (8003714 <I2SEx_TxISR_I2SExt+0x90>)
 80036e0:	428b      	cmp	r3, r1
 80036e2:	d101      	bne.n	80036e8 <I2SEx_TxISR_I2SExt+0x64>
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <I2SEx_TxISR_I2SExt+0x94>)
 80036e6:	e001      	b.n	80036ec <I2SEx_TxISR_I2SExt+0x68>
 80036e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff81 	bl	800360c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40003800 	.word	0x40003800
 8003718:	40003400 	.word	0x40003400

0800371c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68d8      	ldr	r0, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	1c99      	adds	r1, r3, #2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003734:	b282      	uxth	r2, r0
 8003736:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d113      	bne.n	8003778 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800375e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff4a 	bl	800360c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a20      	ldr	r2, [pc, #128]	; (8003810 <I2SEx_RxISR_I2SExt+0x90>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <I2SEx_RxISR_I2SExt+0x16>
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <I2SEx_RxISR_I2SExt+0x94>)
 8003794:	e001      	b.n	800379a <I2SEx_RxISR_I2SExt+0x1a>
 8003796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800379a:	68d8      	ldr	r0, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	1c99      	adds	r1, r3, #2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037a6:	b282      	uxth	r2, r0
 80037a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d121      	bne.n	8003806 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <I2SEx_RxISR_I2SExt+0x90>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <I2SEx_RxISR_I2SExt+0x50>
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <I2SEx_RxISR_I2SExt+0x94>)
 80037ce:	e001      	b.n	80037d4 <I2SEx_RxISR_I2SExt+0x54>
 80037d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	490d      	ldr	r1, [pc, #52]	; (8003810 <I2SEx_RxISR_I2SExt+0x90>)
 80037dc:	428b      	cmp	r3, r1
 80037de:	d101      	bne.n	80037e4 <I2SEx_RxISR_I2SExt+0x64>
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <I2SEx_RxISR_I2SExt+0x94>)
 80037e2:	e001      	b.n	80037e8 <I2SEx_RxISR_I2SExt+0x68>
 80037e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff03 	bl	800360c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40003800 	.word	0x40003800
 8003814:	40003400 	.word	0x40003400

08003818 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e264      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d075      	beq.n	8003922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003836:	4ba3      	ldr	r3, [pc, #652]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b04      	cmp	r3, #4
 8003840:	d00c      	beq.n	800385c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003842:	4ba0      	ldr	r3, [pc, #640]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800384a:	2b08      	cmp	r3, #8
 800384c:	d112      	bne.n	8003874 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384e:	4b9d      	ldr	r3, [pc, #628]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385a:	d10b      	bne.n	8003874 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	4b99      	ldr	r3, [pc, #612]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d05b      	beq.n	8003920 <HAL_RCC_OscConfig+0x108>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d157      	bne.n	8003920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e23f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d106      	bne.n	800388c <HAL_RCC_OscConfig+0x74>
 800387e:	4b91      	ldr	r3, [pc, #580]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a90      	ldr	r2, [pc, #576]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e01d      	b.n	80038c8 <HAL_RCC_OscConfig+0xb0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003894:	d10c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x98>
 8003896:	4b8b      	ldr	r3, [pc, #556]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a8a      	ldr	r2, [pc, #552]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a87      	ldr	r2, [pc, #540]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e00b      	b.n	80038c8 <HAL_RCC_OscConfig+0xb0>
 80038b0:	4b84      	ldr	r3, [pc, #528]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a83      	ldr	r2, [pc, #524]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a80      	ldr	r2, [pc, #512]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80038c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d013      	beq.n	80038f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fe fb5e 	bl	8001f90 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fe fb5a 	bl	8001f90 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e204      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0xc0>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fb4a 	bl	8001f90 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003900:	f7fe fb46 	bl	8001f90 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e1f0      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0xe8>
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d063      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800392e:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393a:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003942:	2b08      	cmp	r3, #8
 8003944:	d11c      	bne.n	8003980 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003946:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d116      	bne.n	8003980 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003952:	4b5c      	ldr	r3, [pc, #368]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_RCC_OscConfig+0x152>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d001      	beq.n	800396a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e1c4      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396a:	4b56      	ldr	r3, [pc, #344]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4952      	ldr	r1, [pc, #328]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	e03a      	b.n	80039f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d020      	beq.n	80039ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003988:	4b4f      	ldr	r3, [pc, #316]	; (8003ac8 <HAL_RCC_OscConfig+0x2b0>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fe faff 	bl	8001f90 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003996:	f7fe fafb 	bl	8001f90 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e1a5      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a8:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4940      	ldr	r1, [pc, #256]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
 80039c8:	e015      	b.n	80039f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <HAL_RCC_OscConfig+0x2b0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe fade 	bl	8001f90 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d8:	f7fe fada 	bl	8001f90 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e184      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d030      	beq.n	8003a64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d016      	beq.n	8003a38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_RCC_OscConfig+0x2b4>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fe fabe 	bl	8001f90 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a18:	f7fe faba 	bl	8001f90 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e164      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x200>
 8003a36:	e015      	b.n	8003a64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCC_OscConfig+0x2b4>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe faa7 	bl	8001f90 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a46:	f7fe faa3 	bl	8001f90 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e14d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a0 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_OscConfig+0x2b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d121      	bne.n	8003af2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_RCC_OscConfig+0x2b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <HAL_RCC_OscConfig+0x2b8>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fa69 	bl	8001f90 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e011      	b.n	8003ae6 <HAL_RCC_OscConfig+0x2ce>
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	42470000 	.word	0x42470000
 8003acc:	42470e80 	.word	0x42470e80
 8003ad0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fe fa5c 	bl	8001f90 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e106      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCC_OscConfig+0x4e4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d106      	bne.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
 8003afa:	4b81      	ldr	r3, [pc, #516]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a80      	ldr	r2, [pc, #512]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6713      	str	r3, [r2, #112]	; 0x70
 8003b06:	e01c      	b.n	8003b42 <HAL_RCC_OscConfig+0x32a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d10c      	bne.n	8003b2a <HAL_RCC_OscConfig+0x312>
 8003b10:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b16:	f043 0304 	orr.w	r3, r3, #4
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	4a77      	ldr	r2, [pc, #476]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
 8003b28:	e00b      	b.n	8003b42 <HAL_RCC_OscConfig+0x32a>
 8003b2a:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a74      	ldr	r2, [pc, #464]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a71      	ldr	r2, [pc, #452]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d015      	beq.n	8003b76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fa21 	bl	8001f90 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe fa1d 	bl	8001f90 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0c5      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b68:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ee      	beq.n	8003b52 <HAL_RCC_OscConfig+0x33a>
 8003b74:	e014      	b.n	8003ba0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b76:	f7fe fa0b 	bl	8001f90 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fe fa07 	bl	8001f90 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0af      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b94:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1ee      	bne.n	8003b7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d105      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a55      	ldr	r2, [pc, #340]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 809b 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d05c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d141      	bne.n	8003c54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd0:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_RCC_OscConfig+0x4ec>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe f9db 	bl	8001f90 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fe f9d7 	bl	8001f90 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e081      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf0:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	019b      	lsls	r3, r3, #6
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	3b01      	subs	r3, #1
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	4937      	ldr	r1, [pc, #220]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c26:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <HAL_RCC_OscConfig+0x4ec>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f9b0 	bl	8001f90 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fe f9ac 	bl	8001f90 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e056      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b2e      	ldr	r3, [pc, #184]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x41c>
 8003c52:	e04e      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c54:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_RCC_OscConfig+0x4ec>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5a:	f7fe f999 	bl	8001f90 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c62:	f7fe f995 	bl	8001f90 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e03f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c74:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x44a>
 8003c80:	e037      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e032      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <HAL_RCC_OscConfig+0x4e8>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d028      	beq.n	8003cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d121      	bne.n	8003cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d11a      	bne.n	8003cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d111      	bne.n	8003cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	40023800 	.word	0x40023800
 8003d04:	42470060 	.word	0x42470060

08003d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0cc      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b68      	ldr	r3, [pc, #416]	; (8003ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d90c      	bls.n	8003d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b63      	ldr	r3, [pc, #396]	; (8003ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0b8      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d020      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d5c:	4b59      	ldr	r3, [pc, #356]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a58      	ldr	r2, [pc, #352]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d74:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a52      	ldr	r2, [pc, #328]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d80:	4b50      	ldr	r3, [pc, #320]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	494d      	ldr	r1, [pc, #308]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d044      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d119      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e07f      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d003      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc6:	4b3f      	ldr	r3, [pc, #252]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e06f      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e067      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de6:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f023 0203 	bic.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4934      	ldr	r1, [pc, #208]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df8:	f7fe f8ca 	bl	8001f90 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e00:	f7fe f8c6 	bl	8001f90 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e04f      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 020c 	and.w	r2, r3, #12
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d1eb      	bne.n	8003e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d20c      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e032      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5c:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4916      	ldr	r1, [pc, #88]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	490e      	ldr	r1, [pc, #56]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e8e:	f000 f821 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003e92:	4602      	mov	r2, r0
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	490a      	ldr	r1, [pc, #40]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea0:	5ccb      	ldrb	r3, [r1, r3]
 8003ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe f82a 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023c00 	.word	0x40023c00
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	0800f438 	.word	0x0800f438
 8003ecc:	20000420 	.word	0x20000420
 8003ed0:	20000424 	.word	0x20000424

08003ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eec:	4b67      	ldr	r3, [pc, #412]	; (800408c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d00d      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x40>
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	f200 80bd 	bhi.w	8004078 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x34>
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f06:	e0b7      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f08:	4b61      	ldr	r3, [pc, #388]	; (8004090 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f0a:	60bb      	str	r3, [r7, #8]
       break;
 8003f0c:	e0b7      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f0e:	4b61      	ldr	r3, [pc, #388]	; (8004094 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f10:	60bb      	str	r3, [r7, #8]
      break;
 8003f12:	e0b4      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f14:	4b5d      	ldr	r3, [pc, #372]	; (800408c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	; (800408c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d04d      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2a:	4b58      	ldr	r3, [pc, #352]	; (800408c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	099b      	lsrs	r3, r3, #6
 8003f30:	461a      	mov	r2, r3
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	ea02 0800 	and.w	r8, r2, r0
 8003f42:	ea03 0901 	and.w	r9, r3, r1
 8003f46:	4640      	mov	r0, r8
 8003f48:	4649      	mov	r1, r9
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	014b      	lsls	r3, r1, #5
 8003f54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f58:	0142      	lsls	r2, r0, #5
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	ebb0 0008 	subs.w	r0, r0, r8
 8003f62:	eb61 0109 	sbc.w	r1, r1, r9
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	018b      	lsls	r3, r1, #6
 8003f70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f74:	0182      	lsls	r2, r0, #6
 8003f76:	1a12      	subs	r2, r2, r0
 8003f78:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7c:	f04f 0000 	mov.w	r0, #0
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	00d9      	lsls	r1, r3, #3
 8003f86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f8a:	00d0      	lsls	r0, r2, #3
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	eb12 0208 	adds.w	r2, r2, r8
 8003f94:	eb43 0309 	adc.w	r3, r3, r9
 8003f98:	f04f 0000 	mov.w	r0, #0
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	0259      	lsls	r1, r3, #9
 8003fa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fa6:	0250      	lsls	r0, r2, #9
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	f7fc fe76 	bl	8000ca8 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e04a      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b31      	ldr	r3, [pc, #196]	; (800408c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	ea02 0400 	and.w	r4, r2, r0
 8003fde:	ea03 0501 	and.w	r5, r3, r1
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	014b      	lsls	r3, r1, #5
 8003ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ff4:	0142      	lsls	r2, r0, #5
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	1b00      	subs	r0, r0, r4
 8003ffc:	eb61 0105 	sbc.w	r1, r1, r5
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	018b      	lsls	r3, r1, #6
 800400a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800400e:	0182      	lsls	r2, r0, #6
 8004010:	1a12      	subs	r2, r2, r0
 8004012:	eb63 0301 	sbc.w	r3, r3, r1
 8004016:	f04f 0000 	mov.w	r0, #0
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	00d9      	lsls	r1, r3, #3
 8004020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004024:	00d0      	lsls	r0, r2, #3
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	1912      	adds	r2, r2, r4
 800402c:	eb45 0303 	adc.w	r3, r5, r3
 8004030:	f04f 0000 	mov.w	r0, #0
 8004034:	f04f 0100 	mov.w	r1, #0
 8004038:	0299      	lsls	r1, r3, #10
 800403a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800403e:	0290      	lsls	r0, r2, #10
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4610      	mov	r0, r2
 8004046:	4619      	mov	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	461a      	mov	r2, r3
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	f7fc fe2a 	bl	8000ca8 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4613      	mov	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	3301      	adds	r3, #1
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	60bb      	str	r3, [r7, #8]
      break;
 8004076:	e002      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800407a:	60bb      	str	r3, [r7, #8]
      break;
 800407c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800407e:	68bb      	ldr	r3, [r7, #8]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800
 8004090:	00f42400 	.word	0x00f42400
 8004094:	007a1200 	.word	0x007a1200

08004098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_RCC_GetHCLKFreq+0x14>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000420 	.word	0x20000420

080040b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040b4:	f7ff fff0 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	0a9b      	lsrs	r3, r3, #10
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4903      	ldr	r1, [pc, #12]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40023800 	.word	0x40023800
 80040d4:	0800f448 	.word	0x0800f448

080040d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040dc:	f7ff ffdc 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	0b5b      	lsrs	r3, r3, #13
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40023800 	.word	0x40023800
 80040fc:	0800f448 	.word	0x0800f448

08004100 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004124:	2b00      	cmp	r3, #0
 8004126:	d035      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004128:	4b62      	ldr	r3, [pc, #392]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800412e:	f7fd ff2f 	bl	8001f90 <HAL_GetTick>
 8004132:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004136:	f7fd ff2b 	bl	8001f90 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0b0      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004148:	4b5b      	ldr	r3, [pc, #364]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	019a      	lsls	r2, r3, #6
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	071b      	lsls	r3, r3, #28
 8004160:	4955      	ldr	r1, [pc, #340]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004168:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800416e:	f7fd ff0f 	bl	8001f90 <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004176:	f7fd ff0b 	bl	8001f90 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e090      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004188:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8083 	beq.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4a43      	ldr	r2, [pc, #268]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b0:	6413      	str	r3, [r2, #64]	; 0x40
 80041b2:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3e      	ldr	r2, [pc, #248]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041ca:	f7fd fee1 	bl	8001f90 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fd fedd 	bl	8001f90 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e062      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041e4:	4b35      	ldr	r3, [pc, #212]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02f      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d028      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800420e:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004216:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004218:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800421e:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004224:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d114      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004236:	f7fd feab 	bl	8001f90 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	e00a      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423e:	f7fd fea7 	bl	8001f90 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	; 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e02a      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ee      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426c:	d10d      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800426e:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	490d      	ldr	r1, [pc, #52]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]
 8004288:	e005      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004290:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004294:	6093      	str	r3, [r2, #8]
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a2:	4905      	ldr	r1, [pc, #20]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	42470068 	.word	0x42470068
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40007000 	.word	0x40007000
 80042c0:	42470e40 	.word	0x42470e40

080042c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d13e      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d12f      	bne.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042fa:	617b      	str	r3, [r7, #20]
          break;
 80042fc:	e02f      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430a:	d108      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004314:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	e007      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800431e:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004326:	4a15      	ldr	r2, [pc, #84]	; (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004348:	0f1b      	lsrs	r3, r3, #28
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
          break;
 8004356:	e002      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
          break;
 800435c:	bf00      	nop
        }
      }
      break;
 800435e:	bf00      	nop
    }
  }
  return frequency;
 8004360:	697b      	ldr	r3, [r7, #20]
}
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	00bb8000 	.word	0x00bb8000
 8004378:	007a1200 	.word	0x007a1200
 800437c:	00f42400 	.word	0x00f42400

08004380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e03f      	b.n	8004412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fc9e 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	; 0x24
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f929 	bl	800461c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08a      	sub	sp, #40	; 0x28
 800441e:	af02      	add	r7, sp, #8
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b20      	cmp	r3, #32
 8004438:	d17c      	bne.n	8004534 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_UART_Transmit+0x2c>
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e075      	b.n	8004536 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_UART_Transmit+0x3e>
 8004454:	2302      	movs	r3, #2
 8004456:	e06e      	b.n	8004536 <HAL_UART_Transmit+0x11c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2221      	movs	r2, #33	; 0x21
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800446e:	f7fd fd8f 	bl	8001f90 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d108      	bne.n	800449c <HAL_UART_Transmit+0x82>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e003      	b.n	80044a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044ac:	e02a      	b.n	8004504 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f840 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e036      	b.n	8004536 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	3302      	adds	r3, #2
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	e007      	b.n	80044f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3301      	adds	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1cf      	bne.n	80044ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	2140      	movs	r1, #64	; 0x40
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f810 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e006      	b.n	8004536 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b090      	sub	sp, #64	; 0x40
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454e:	e050      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004556:	d04c      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0x30>
 800455e:	f7fd fd17 	bl	8001f90 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800456a:	429a      	cmp	r2, r3
 800456c:	d241      	bcs.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800458e:	637a      	str	r2, [r7, #52]	; 0x34
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	613b      	str	r3, [r7, #16]
   return(result);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c2:	623a      	str	r2, [r7, #32]
 80045c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	69f9      	ldr	r1, [r7, #28]
 80045c8:	6a3a      	ldr	r2, [r7, #32]
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e5      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e00f      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4013      	ands	r3, r2
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	429a      	cmp	r2, r3
 800460e:	d09f      	beq.n	8004550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3740      	adds	r7, #64	; 0x40
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004620:	b09f      	sub	sp, #124	; 0x7c
 8004622:	af00      	add	r7, sp, #0
 8004624:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004632:	68d9      	ldr	r1, [r3, #12]
 8004634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	ea40 0301 	orr.w	r3, r0, r1
 800463c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800463e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	431a      	orrs	r2, r3
 8004648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	431a      	orrs	r2, r3
 800464e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4313      	orrs	r3, r2
 8004654:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004660:	f021 010c 	bic.w	r1, r1, #12
 8004664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800466a:	430b      	orrs	r3, r1
 800466c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467a:	6999      	ldr	r1, [r3, #24]
 800467c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	ea40 0301 	orr.w	r3, r0, r1
 8004684:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4bc5      	ldr	r3, [pc, #788]	; (80049a0 <UART_SetConfig+0x384>)
 800468c:	429a      	cmp	r2, r3
 800468e:	d004      	beq.n	800469a <UART_SetConfig+0x7e>
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4bc3      	ldr	r3, [pc, #780]	; (80049a4 <UART_SetConfig+0x388>)
 8004696:	429a      	cmp	r2, r3
 8004698:	d103      	bne.n	80046a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800469a:	f7ff fd1d 	bl	80040d8 <HAL_RCC_GetPCLK2Freq>
 800469e:	6778      	str	r0, [r7, #116]	; 0x74
 80046a0:	e002      	b.n	80046a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046a2:	f7ff fd05 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 80046a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b0:	f040 80b6 	bne.w	8004820 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b6:	461c      	mov	r4, r3
 80046b8:	f04f 0500 	mov.w	r5, #0
 80046bc:	4622      	mov	r2, r4
 80046be:	462b      	mov	r3, r5
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	6439      	str	r1, [r7, #64]	; 0x40
 80046c4:	415b      	adcs	r3, r3
 80046c6:	647b      	str	r3, [r7, #68]	; 0x44
 80046c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046cc:	1912      	adds	r2, r2, r4
 80046ce:	eb45 0303 	adc.w	r3, r5, r3
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	00d9      	lsls	r1, r3, #3
 80046dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046e0:	00d0      	lsls	r0, r2, #3
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	1911      	adds	r1, r2, r4
 80046e8:	6639      	str	r1, [r7, #96]	; 0x60
 80046ea:	416b      	adcs	r3, r5
 80046ec:	667b      	str	r3, [r7, #100]	; 0x64
 80046ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80046fc:	415b      	adcs	r3, r3
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004704:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004708:	f7fc face 	bl	8000ca8 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4ba5      	ldr	r3, [pc, #660]	; (80049a8 <UART_SetConfig+0x38c>)
 8004712:	fba3 2302 	umull	r2, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	011e      	lsls	r6, r3, #4
 800471a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800471c:	461c      	mov	r4, r3
 800471e:	f04f 0500 	mov.w	r5, #0
 8004722:	4622      	mov	r2, r4
 8004724:	462b      	mov	r3, r5
 8004726:	1891      	adds	r1, r2, r2
 8004728:	6339      	str	r1, [r7, #48]	; 0x30
 800472a:	415b      	adcs	r3, r3
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
 800472e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004732:	1912      	adds	r2, r2, r4
 8004734:	eb45 0303 	adc.w	r3, r5, r3
 8004738:	f04f 0000 	mov.w	r0, #0
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	00d9      	lsls	r1, r3, #3
 8004742:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004746:	00d0      	lsls	r0, r2, #3
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	1911      	adds	r1, r2, r4
 800474e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004750:	416b      	adcs	r3, r5
 8004752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	461a      	mov	r2, r3
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	1891      	adds	r1, r2, r2
 8004760:	62b9      	str	r1, [r7, #40]	; 0x28
 8004762:	415b      	adcs	r3, r3
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800476a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800476e:	f7fc fa9b 	bl	8000ca8 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4b8c      	ldr	r3, [pc, #560]	; (80049a8 <UART_SetConfig+0x38c>)
 8004778:	fba3 1302 	umull	r1, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	2164      	movs	r1, #100	; 0x64
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	3332      	adds	r3, #50	; 0x32
 800478a:	4a87      	ldr	r2, [pc, #540]	; (80049a8 <UART_SetConfig+0x38c>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004798:	441e      	add	r6, r3
 800479a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800479c:	4618      	mov	r0, r3
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	1894      	adds	r4, r2, r2
 80047a8:	623c      	str	r4, [r7, #32]
 80047aa:	415b      	adcs	r3, r3
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
 80047ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047b2:	1812      	adds	r2, r2, r0
 80047b4:	eb41 0303 	adc.w	r3, r1, r3
 80047b8:	f04f 0400 	mov.w	r4, #0
 80047bc:	f04f 0500 	mov.w	r5, #0
 80047c0:	00dd      	lsls	r5, r3, #3
 80047c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047c6:	00d4      	lsls	r4, r2, #3
 80047c8:	4622      	mov	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	1814      	adds	r4, r2, r0
 80047ce:	653c      	str	r4, [r7, #80]	; 0x50
 80047d0:	414b      	adcs	r3, r1
 80047d2:	657b      	str	r3, [r7, #84]	; 0x54
 80047d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	461a      	mov	r2, r3
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	1891      	adds	r1, r2, r2
 80047e0:	61b9      	str	r1, [r7, #24]
 80047e2:	415b      	adcs	r3, r3
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80047ee:	f7fc fa5b 	bl	8000ca8 <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4b6c      	ldr	r3, [pc, #432]	; (80049a8 <UART_SetConfig+0x38c>)
 80047f8:	fba3 1302 	umull	r1, r3, r3, r2
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	2164      	movs	r1, #100	; 0x64
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	3332      	adds	r3, #50	; 0x32
 800480a:	4a67      	ldr	r2, [pc, #412]	; (80049a8 <UART_SetConfig+0x38c>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	f003 0207 	and.w	r2, r3, #7
 8004816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4432      	add	r2, r6
 800481c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800481e:	e0b9      	b.n	8004994 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004822:	461c      	mov	r4, r3
 8004824:	f04f 0500 	mov.w	r5, #0
 8004828:	4622      	mov	r2, r4
 800482a:	462b      	mov	r3, r5
 800482c:	1891      	adds	r1, r2, r2
 800482e:	6139      	str	r1, [r7, #16]
 8004830:	415b      	adcs	r3, r3
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004838:	1912      	adds	r2, r2, r4
 800483a:	eb45 0303 	adc.w	r3, r5, r3
 800483e:	f04f 0000 	mov.w	r0, #0
 8004842:	f04f 0100 	mov.w	r1, #0
 8004846:	00d9      	lsls	r1, r3, #3
 8004848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800484c:	00d0      	lsls	r0, r2, #3
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	eb12 0804 	adds.w	r8, r2, r4
 8004856:	eb43 0905 	adc.w	r9, r3, r5
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f04f 0100 	mov.w	r1, #0
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	008b      	lsls	r3, r1, #2
 800486e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004872:	0082      	lsls	r2, r0, #2
 8004874:	4640      	mov	r0, r8
 8004876:	4649      	mov	r1, r9
 8004878:	f7fc fa16 	bl	8000ca8 <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <UART_SetConfig+0x38c>)
 8004882:	fba3 2302 	umull	r2, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	011e      	lsls	r6, r3, #4
 800488a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488c:	4618      	mov	r0, r3
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	1894      	adds	r4, r2, r2
 8004898:	60bc      	str	r4, [r7, #8]
 800489a:	415b      	adcs	r3, r3
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a2:	1812      	adds	r2, r2, r0
 80048a4:	eb41 0303 	adc.w	r3, r1, r3
 80048a8:	f04f 0400 	mov.w	r4, #0
 80048ac:	f04f 0500 	mov.w	r5, #0
 80048b0:	00dd      	lsls	r5, r3, #3
 80048b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048b6:	00d4      	lsls	r4, r2, #3
 80048b8:	4622      	mov	r2, r4
 80048ba:	462b      	mov	r3, r5
 80048bc:	1814      	adds	r4, r2, r0
 80048be:	64bc      	str	r4, [r7, #72]	; 0x48
 80048c0:	414b      	adcs	r3, r1
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	008b      	lsls	r3, r1, #2
 80048d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048dc:	0082      	lsls	r2, r0, #2
 80048de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048e2:	f7fc f9e1 	bl	8000ca8 <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4b2f      	ldr	r3, [pc, #188]	; (80049a8 <UART_SetConfig+0x38c>)
 80048ec:	fba3 1302 	umull	r1, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	2164      	movs	r1, #100	; 0x64
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	3332      	adds	r3, #50	; 0x32
 80048fe:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <UART_SetConfig+0x38c>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800490a:	441e      	add	r6, r3
 800490c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490e:	4618      	mov	r0, r3
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	1894      	adds	r4, r2, r2
 800491a:	603c      	str	r4, [r7, #0]
 800491c:	415b      	adcs	r3, r3
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004924:	1812      	adds	r2, r2, r0
 8004926:	eb41 0303 	adc.w	r3, r1, r3
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	f04f 0500 	mov.w	r5, #0
 8004932:	00dd      	lsls	r5, r3, #3
 8004934:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004938:	00d4      	lsls	r4, r2, #3
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	eb12 0a00 	adds.w	sl, r2, r0
 8004942:	eb43 0b01 	adc.w	fp, r3, r1
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	008b      	lsls	r3, r1, #2
 800495a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800495e:	0082      	lsls	r2, r0, #2
 8004960:	4650      	mov	r0, sl
 8004962:	4659      	mov	r1, fp
 8004964:	f7fc f9a0 	bl	8000ca8 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <UART_SetConfig+0x38c>)
 800496e:	fba3 1302 	umull	r1, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2164      	movs	r1, #100	; 0x64
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	3332      	adds	r3, #50	; 0x32
 8004980:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <UART_SetConfig+0x38c>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4432      	add	r2, r6
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	377c      	adds	r7, #124	; 0x7c
 8004998:	46bd      	mov	sp, r7
 800499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499e:	bf00      	nop
 80049a0:	40011000 	.word	0x40011000
 80049a4:	40011400 	.word	0x40011400
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <MX_PDM2PCM_Init+0x48>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <MX_PDM2PCM_Init+0x48>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <MX_PDM2PCM_Init+0x48>)
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <MX_PDM2PCM_Init+0x4c>)
 80049c0:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80049c2:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <MX_PDM2PCM_Init+0x48>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <MX_PDM2PCM_Init+0x48>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80049ce:	4809      	ldr	r0, [pc, #36]	; (80049f4 <MX_PDM2PCM_Init+0x48>)
 80049d0:	f001 ff1c 	bl	800680c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <MX_PDM2PCM_Init+0x50>)
 80049d6:	2202      	movs	r2, #2
 80049d8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <MX_PDM2PCM_Init+0x50>)
 80049dc:	2210      	movs	r2, #16
 80049de:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <MX_PDM2PCM_Init+0x50>)
 80049e2:	2218      	movs	r2, #24
 80049e4:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80049e6:	4905      	ldr	r1, [pc, #20]	; (80049fc <MX_PDM2PCM_Init+0x50>)
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <MX_PDM2PCM_Init+0x48>)
 80049ea:	f001 ff99 	bl	8006920 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	2000d338 	.word	0x2000d338
 80049f8:	7d70a3d6 	.word	0x7d70a3d6
 80049fc:	2000d330 	.word	0x2000d330

08004a00 <small_words_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool small_words_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8004a0e:	f107 030c 	add.w	r3, r7, #12
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	2101      	movs	r1, #1
 8004a16:	4618      	mov	r0, r3
 8004a18:	f002 f906 	bl	8006c28 <ai_platform_get_activations_map>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04d      	beq.n	8004abe <small_words_model_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    serving_default_conv2d_input0_output_array.data = AI_PTR(NULL);
 8004a22:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <small_words_model_configure_activations+0xc8>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	609a      	str	r2, [r3, #8]
    serving_default_conv2d_input0_output_array.data_start = AI_PTR(NULL);
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <small_words_model_configure_activations+0xc8>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60da      	str	r2, [r3, #12]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 7936);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004a34:	4a25      	ldr	r2, [pc, #148]	; (8004acc <small_words_model_configure_activations+0xcc>)
 8004a36:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 7936);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004a3e:	4a23      	ldr	r2, [pc, #140]	; (8004acc <small_words_model_configure_activations+0xcc>)
 8004a40:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 3584);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a48:	4a21      	ldr	r2, [pc, #132]	; (8004ad0 <small_words_model_configure_activations+0xd0>)
 8004a4a:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations_map[0] + 3584);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <small_words_model_configure_activations+0xd0>)
 8004a54:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 6272);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <small_words_model_configure_activations+0xd4>)
 8004a5e:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations_map[0] + 6272);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 8004a66:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <small_words_model_configure_activations+0xd4>)
 8004a68:	60d3      	str	r3, [r2, #12]
    dense_7_output_array.data = AI_PTR(activations_map[0] + 0);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <small_words_model_configure_activations+0xd8>)
 8004a6e:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <small_words_model_configure_activations+0xd8>)
 8004a74:	60d3      	str	r3, [r2, #12]
    nl_7_nl_output_array.data = AI_PTR(activations_map[0] + 256);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a7c:	4a17      	ldr	r2, [pc, #92]	; (8004adc <small_words_model_configure_activations+0xdc>)
 8004a7e:	6093      	str	r3, [r2, #8]
    nl_7_nl_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a86:	4a15      	ldr	r2, [pc, #84]	; (8004adc <small_words_model_configure_activations+0xdc>)
 8004a88:	60d3      	str	r3, [r2, #12]
    dense_8_output_array.data = AI_PTR(NULL);
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <small_words_model_configure_activations+0xe0>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
    dense_8_output_array.data_start = AI_PTR(NULL);
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <small_words_model_configure_activations+0xe0>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
    conv2d_0_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <small_words_model_configure_activations+0xe4>)
 8004a9a:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <small_words_model_configure_activations+0xe4>)
 8004aa0:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <small_words_model_configure_activations+0xe8>)
 8004aa6:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a0f      	ldr	r2, [pc, #60]	; (8004ae8 <small_words_model_configure_activations+0xe8>)
 8004aac:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <small_words_model_configure_activations+0xec>)
 8004ab2:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <small_words_model_configure_activations+0xec>)
 8004ab8:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <small_words_model_configure_activations+0xc0>
  }
  return false;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	2000042c 	.word	0x2000042c
 8004acc:	2000043c 	.word	0x2000043c
 8004ad0:	2000044c 	.word	0x2000044c
 8004ad4:	2000045c 	.word	0x2000045c
 8004ad8:	2000046c 	.word	0x2000046c
 8004adc:	2000047c 	.word	0x2000047c
 8004ae0:	2000048c 	.word	0x2000048c
 8004ae4:	2000053c 	.word	0x2000053c
 8004ae8:	2000054c 	.word	0x2000054c
 8004aec:	2000055c 	.word	0x2000055c

08004af0 <small_words_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool small_words_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004afe:	f107 030c 	add.w	r3, r7, #12
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 f85a 	bl	8006bc0 <ai_platform_get_weights_map>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80a6 	beq.w	8004c60 <small_words_model_configure_weights+0x170>
    /* Updating weights with array addresses */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b14:	4b55      	ldr	r3, [pc, #340]	; (8004c6c <small_words_model_configure_weights+0x17c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b1c:	4a53      	ldr	r2, [pc, #332]	; (8004c6c <small_words_model_configure_weights+0x17c>)
 8004b1e:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <small_words_model_configure_weights+0x17c>)
 8004b24:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a50      	ldr	r2, [pc, #320]	; (8004c6c <small_words_model_configure_weights+0x17c>)
 8004b2a:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b2c:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <small_words_model_configure_weights+0x180>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b34:	4a4e      	ldr	r2, [pc, #312]	; (8004c70 <small_words_model_configure_weights+0x180>)
 8004b36:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 512);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004b3e:	4a4c      	ldr	r2, [pc, #304]	; (8004c70 <small_words_model_configure_weights+0x180>)
 8004b40:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 512);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004b48:	4a49      	ldr	r2, [pc, #292]	; (8004c70 <small_words_model_configure_weights+0x180>)
 8004b4a:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b4c:	4b49      	ldr	r3, [pc, #292]	; (8004c74 <small_words_model_configure_weights+0x184>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b54:	4a47      	ldr	r2, [pc, #284]	; (8004c74 <small_words_model_configure_weights+0x184>)
 8004b56:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 640);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b5e:	4a45      	ldr	r2, [pc, #276]	; (8004c74 <small_words_model_configure_weights+0x184>)
 8004b60:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights_map[0] + 640);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b68:	4a42      	ldr	r2, [pc, #264]	; (8004c74 <small_words_model_configure_weights+0x184>)
 8004b6a:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b6c:	4b42      	ldr	r3, [pc, #264]	; (8004c78 <small_words_model_configure_weights+0x188>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b74:	4a40      	ldr	r2, [pc, #256]	; (8004c78 <small_words_model_configure_weights+0x188>)
 8004b76:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 17024);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8004b7e:	4a3e      	ldr	r2, [pc, #248]	; (8004c78 <small_words_model_configure_weights+0x188>)
 8004b80:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights_map[0] + 17024);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8004b88:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <small_words_model_configure_weights+0x188>)
 8004b8a:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	; (8004c7c <small_words_model_configure_weights+0x18c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b94:	4a39      	ldr	r2, [pc, #228]	; (8004c7c <small_words_model_configure_weights+0x18c>)
 8004b96:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 17152);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8004b9e:	4a37      	ldr	r2, [pc, #220]	; (8004c7c <small_words_model_configure_weights+0x18c>)
 8004ba0:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights_map[0] + 17152);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8004ba8:	4a34      	ldr	r2, [pc, #208]	; (8004c7c <small_words_model_configure_weights+0x18c>)
 8004baa:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bac:	4b34      	ldr	r3, [pc, #208]	; (8004c80 <small_words_model_configure_weights+0x190>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb4:	4a32      	ldr	r2, [pc, #200]	; (8004c80 <small_words_model_configure_weights+0x190>)
 8004bb6:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 49920);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8004bbe:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <small_words_model_configure_weights+0x190>)
 8004bc0:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights_map[0] + 49920);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8004bc8:	4a2d      	ldr	r2, [pc, #180]	; (8004c80 <small_words_model_configure_weights+0x190>)
 8004bca:	60d3      	str	r3, [r2, #12]
    dense_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004bcc:	4b2d      	ldr	r3, [pc, #180]	; (8004c84 <small_words_model_configure_weights+0x194>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	; (8004c84 <small_words_model_configure_weights+0x194>)
 8004bd6:	6013      	str	r3, [r2, #0]
    dense_7_weights_array.data = AI_PTR(weights_map[0] + 50176);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8004bde:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <small_words_model_configure_weights+0x194>)
 8004be0:	6093      	str	r3, [r2, #8]
    dense_7_weights_array.data_start = AI_PTR(weights_map[0] + 50176);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8004be8:	4a26      	ldr	r2, [pc, #152]	; (8004c84 <small_words_model_configure_weights+0x194>)
 8004bea:	60d3      	str	r3, [r2, #12]
    dense_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bec:	4b26      	ldr	r3, [pc, #152]	; (8004c88 <small_words_model_configure_weights+0x198>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bf4:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <small_words_model_configure_weights+0x198>)
 8004bf6:	6013      	str	r3, [r2, #0]
    dense_7_bias_array.data = AI_PTR(weights_map[0] + 99328);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8004bfe:	4a22      	ldr	r2, [pc, #136]	; (8004c88 <small_words_model_configure_weights+0x198>)
 8004c00:	6093      	str	r3, [r2, #8]
    dense_7_bias_array.data_start = AI_PTR(weights_map[0] + 99328);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8004c08:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <small_words_model_configure_weights+0x198>)
 8004c0a:	60d3      	str	r3, [r2, #12]
    dense_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <small_words_model_configure_weights+0x19c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <small_words_model_configure_weights+0x19c>)
 8004c16:	6013      	str	r3, [r2, #0]
    dense_8_weights_array.data = AI_PTR(weights_map[0] + 99584);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8004c1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c22:	4a1a      	ldr	r2, [pc, #104]	; (8004c8c <small_words_model_configure_weights+0x19c>)
 8004c24:	6093      	str	r3, [r2, #8]
    dense_8_weights_array.data_start = AI_PTR(weights_map[0] + 99584);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8004c2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c30:	4a16      	ldr	r2, [pc, #88]	; (8004c8c <small_words_model_configure_weights+0x19c>)
 8004c32:	60d3      	str	r3, [r2, #12]
    dense_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c34:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <small_words_model_configure_weights+0x1a0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <small_words_model_configure_weights+0x1a0>)
 8004c3e:	6013      	str	r3, [r2, #0]
    dense_8_bias_array.data = AI_PTR(weights_map[0] + 101632);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 33c6 	add.w	r3, r3, #101376	; 0x18c00
 8004c46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c4a:	4a11      	ldr	r2, [pc, #68]	; (8004c90 <small_words_model_configure_weights+0x1a0>)
 8004c4c:	6093      	str	r3, [r2, #8]
    dense_8_bias_array.data_start = AI_PTR(weights_map[0] + 101632);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 33c6 	add.w	r3, r3, #101376	; 0x18c00
 8004c54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c58:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <small_words_model_configure_weights+0x1a0>)
 8004c5a:	60d3      	str	r3, [r2, #12]
    return true;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <small_words_model_configure_weights+0x172>
  }
  return false;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	2000049c 	.word	0x2000049c
 8004c70:	200004ac 	.word	0x200004ac
 8004c74:	200004bc 	.word	0x200004bc
 8004c78:	200004cc 	.word	0x200004cc
 8004c7c:	200004dc 	.word	0x200004dc
 8004c80:	200004ec 	.word	0x200004ec
 8004c84:	200004fc 	.word	0x200004fc
 8004c88:	2000050c 	.word	0x2000050c
 8004c8c:	2000051c 	.word	0x2000051c
 8004c90:	2000052c 	.word	0x2000052c

08004c94 <ai_small_words_model_create>:
}

AI_API_ENTRY
ai_error ai_small_words_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	2304      	movs	r3, #4
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <ai_small_words_model_create+0x28>)
 8004caa:	6839      	ldr	r1, [r7, #0]
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f001 ffef 	bl	8006c90 <ai_platform_network_create>
 8004cb2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000dbc 	.word	0x20000dbc

08004cc0 <ai_small_words_model_init>:
}

AI_API_ENTRY
ai_bool ai_small_words_model_init(
  ai_handle network, const ai_network_params* params)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f002 f8b5 	bl	8006e3c <ai_platform_network_init>
 8004cd2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <ai_small_words_model_init+0x1e>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e028      	b.n	8004d30 <ai_small_words_model_init+0x70>

  ai_bool ok = true;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	72fb      	strb	r3, [r7, #11]
  ok &= small_words_model_configure_weights(net_ctx, params);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7ff ff03 	bl	8004af0 <small_words_model_configure_weights>
 8004cea:	4603      	mov	r3, r0
 8004cec:	461a      	mov	r2, r3
 8004cee:	7afb      	ldrb	r3, [r7, #11]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	72fb      	strb	r3, [r7, #11]
  ok &= small_words_model_configure_activations(net_ctx, params);
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff fe7e 	bl	8004a00 <small_words_model_configure_activations>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	7afb      	ldrb	r3, [r7, #11]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f002 f9a2 	bl	8007060 <ai_platform_network_post_init>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	461a      	mov	r2, r3
 8004d20:	7afb      	ldrb	r3, [r7, #11]
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <ai_small_words_model_run>:


AI_API_ENTRY
ai_i32 ai_small_words_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f002 fa1d 	bl	8007188 <ai_platform_network_process>
 8004d4e:	4603      	mov	r3, r0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <ai_small_words_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_small_words_model_data_weights_get(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_small_words_model_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_small_words_model_weights_map);
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <ai_small_words_model_data_weights_get+0x10>)

}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	080281c0 	.word	0x080281c0

08004d6c <D16_GENERIC>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	b089      	sub	sp, #36	; 0x24
 8004d72:	68d4      	ldr	r4, [r2, #12]
 8004d74:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004d76:	6993      	ldr	r3, [r2, #24]
 8004d78:	9407      	str	r4, [sp, #28]
 8004d7a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004d7c:	9306      	str	r3, [sp, #24]
 8004d7e:	9402      	str	r4, [sp, #8]
 8004d80:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004d84:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8004d88:	69d3      	ldr	r3, [r2, #28]
 8004d8a:	6896      	ldr	r6, [r2, #8]
 8004d8c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004d8e:	9103      	str	r1, [sp, #12]
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	d066      	beq.n	8004e62 <D16_GENERIC+0xf6>
 8004d94:	f004 0510 	and.w	r5, r4, #16
 8004d98:	f004 0420 	and.w	r4, r4, #32
 8004d9c:	9504      	str	r5, [sp, #16]
 8004d9e:	4938      	ldr	r1, [pc, #224]	; (8004e80 <D16_GENERIC+0x114>)
 8004da0:	9405      	str	r4, [sp, #20]
 8004da2:	f04f 0e00 	mov.w	lr, #0
 8004da6:	4635      	mov	r5, r6
 8004da8:	e04f      	b.n	8004e4a <D16_GENERIC+0xde>
 8004daa:	5d87      	ldrb	r7, [r0, r6]
 8004dac:	7804      	ldrb	r4, [r0, #0]
 8004dae:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004db2:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004db6:	b2e6      	uxtb	r6, r4
 8004db8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004dbc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004dc0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004dc4:	4433      	add	r3, r6
 8004dc6:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004dca:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8004dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004dd6:	0aa3      	lsrs	r3, r4, #10
 8004dd8:	4c2a      	ldr	r4, [pc, #168]	; (8004e84 <D16_GENERIC+0x118>)
 8004dda:	fb26 5404 	smlad	r4, r6, r4, r5
 8004dde:	4d2a      	ldr	r5, [pc, #168]	; (8004e88 <D16_GENERIC+0x11c>)
 8004de0:	fb26 f505 	smuad	r5, r6, r5
 8004de4:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8004de8:	eb04 080a 	add.w	r8, r4, sl
 8004dec:	eba8 080b 	sub.w	r8, r8, fp
 8004df0:	4646      	mov	r6, r8
 8004df2:	17f7      	asrs	r7, r6, #31
 8004df4:	e9cd 6700 	strd	r6, r7, [sp]
 8004df8:	9e04      	ldr	r6, [sp, #16]
 8004dfa:	f10e 0c01 	add.w	ip, lr, #1
 8004dfe:	b16e      	cbz	r6, 8004e1c <D16_GENERIC+0xb0>
 8004e00:	6a16      	ldr	r6, [r2, #32]
 8004e02:	9f01      	ldr	r7, [sp, #4]
 8004e04:	fba8 8906 	umull	r8, r9, r8, r6
 8004e08:	fb06 9907 	mla	r9, r6, r7, r9
 8004e0c:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004e10:	f149 0900 	adc.w	r9, r9, #0
 8004e14:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004e18:	46a3      	mov	fp, r4
 8004e1a:	4654      	mov	r4, sl
 8004e1c:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004e1e:	9f02      	ldr	r7, [sp, #8]
 8004e20:	0424      	lsls	r4, r4, #16
 8004e22:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004e26:	f04f 0900 	mov.w	r9, #0
 8004e2a:	fb0e fe06 	mul.w	lr, lr, r6
 8004e2e:	fbc7 8904 	smlal	r8, r9, r7, r4
 8004e32:	9e03      	ldr	r6, [sp, #12]
 8004e34:	464f      	mov	r7, r9
 8004e36:	10bc      	asrs	r4, r7, #2
 8004e38:	f304 040f 	ssat	r4, #16, r4
 8004e3c:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8004e40:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004e42:	fa1f fe8c 	uxth.w	lr, ip
 8004e46:	4574      	cmp	r4, lr
 8004e48:	d90a      	bls.n	8004e60 <D16_GENERIC+0xf4>
 8004e4a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8004e4c:	2c01      	cmp	r4, #1
 8004e4e:	b2e6      	uxtb	r6, r4
 8004e50:	d1ab      	bne.n	8004daa <D16_GENERIC+0x3e>
 8004e52:	9e05      	ldr	r6, [sp, #20]
 8004e54:	f850 4b02 	ldr.w	r4, [r0], #2
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	d0ac      	beq.n	8004db6 <D16_GENERIC+0x4a>
 8004e5c:	ba64      	rev16	r4, r4
 8004e5e:	e7aa      	b.n	8004db6 <D16_GENERIC+0x4a>
 8004e60:	462e      	mov	r6, r5
 8004e62:	9907      	ldr	r1, [sp, #28]
 8004e64:	61d3      	str	r3, [r2, #28]
 8004e66:	9b06      	ldr	r3, [sp, #24]
 8004e68:	6096      	str	r6, [r2, #8]
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	60d1      	str	r1, [r2, #12]
 8004e6e:	f8c2 a010 	str.w	sl, [r2, #16]
 8004e72:	f8c2 b014 	str.w	fp, [r2, #20]
 8004e76:	6193      	str	r3, [r2, #24]
 8004e78:	b009      	add	sp, #36	; 0x24
 8004e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000000 	.word	0x20000000
 8004e84:	00030001 	.word	0x00030001
 8004e88:	00010003 	.word	0x00010003

08004e8c <D24_GENERIC>:
 8004e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e90:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8004e92:	6993      	ldr	r3, [r2, #24]
 8004e94:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8004e96:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004e9a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8004e9e:	6894      	ldr	r4, [r2, #8]
 8004ea0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004ea4:	b089      	sub	sp, #36	; 0x24
 8004ea6:	9307      	str	r3, [sp, #28]
 8004ea8:	9503      	str	r5, [sp, #12]
 8004eaa:	69d3      	ldr	r3, [r2, #28]
 8004eac:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004eae:	9104      	str	r1, [sp, #16]
 8004eb0:	2e00      	cmp	r6, #0
 8004eb2:	f000 8096 	beq.w	8004fe2 <D24_GENERIC+0x156>
 8004eb6:	f005 0610 	and.w	r6, r5, #16
 8004eba:	f005 0520 	and.w	r5, r5, #32
 8004ebe:	4954      	ldr	r1, [pc, #336]	; (8005010 <D24_GENERIC+0x184>)
 8004ec0:	9605      	str	r6, [sp, #20]
 8004ec2:	9506      	str	r5, [sp, #24]
 8004ec4:	f04f 0e00 	mov.w	lr, #0
 8004ec8:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ecc:	e06a      	b.n	8004fa4 <D24_GENERIC+0x118>
 8004ece:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8004ed2:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004ed6:	f890 c000 	ldrb.w	ip, [r0]
 8004eda:	042d      	lsls	r5, r5, #16
 8004edc:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004ee0:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004ee4:	44ac      	add	ip, r5
 8004ee6:	4438      	add	r0, r7
 8004ee8:	fa5f f68c 	uxtb.w	r6, ip
 8004eec:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8004ef0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004ef4:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004ef8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004efc:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8004f00:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004f04:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8004f08:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004f0c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004f10:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004f14:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004f18:	4d3e      	ldr	r5, [pc, #248]	; (8005014 <D24_GENERIC+0x188>)
 8004f1a:	fb26 b705 	smlad	r7, r6, r5, fp
 8004f1e:	4d3e      	ldr	r5, [pc, #248]	; (8005018 <D24_GENERIC+0x18c>)
 8004f20:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004f24:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004f28:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004f2c:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8004f30:	2401      	movs	r4, #1
 8004f32:	fb26 f604 	smuad	r6, r6, r4
 8004f36:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8004f3a:	9f02      	ldr	r7, [sp, #8]
 8004f3c:	eb0e 0c04 	add.w	ip, lr, r4
 8004f40:	eb08 0406 	add.w	r4, r8, r6
 8004f44:	eb05 060a 	add.w	r6, r5, sl
 8004f48:	1bf6      	subs	r6, r6, r7
 8004f4a:	4637      	mov	r7, r6
 8004f4c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004f50:	e9cd 7800 	strd	r7, r8, [sp]
 8004f54:	9f05      	ldr	r7, [sp, #20]
 8004f56:	b177      	cbz	r7, 8004f76 <D24_GENERIC+0xea>
 8004f58:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004f5c:	9502      	str	r5, [sp, #8]
 8004f5e:	fba6 9a08 	umull	r9, sl, r6, r8
 8004f62:	9e01      	ldr	r6, [sp, #4]
 8004f64:	fb08 aa06 	mla	sl, r8, r6, sl
 8004f68:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8004f6c:	f14a 0700 	adc.w	r7, sl, #0
 8004f70:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004f74:	4655      	mov	r5, sl
 8004f76:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004f78:	9f03      	ldr	r7, [sp, #12]
 8004f7a:	03ad      	lsls	r5, r5, #14
 8004f7c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004f80:	f04f 0900 	mov.w	r9, #0
 8004f84:	fb0e fe06 	mul.w	lr, lr, r6
 8004f88:	fbc7 8905 	smlal	r8, r9, r7, r5
 8004f8c:	9e04      	ldr	r6, [sp, #16]
 8004f8e:	464f      	mov	r7, r9
 8004f90:	10bd      	asrs	r5, r7, #2
 8004f92:	f305 050f 	ssat	r5, #16, r5
 8004f96:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8004f9a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004f9c:	fa1f fe8c 	uxth.w	lr, ip
 8004fa0:	4575      	cmp	r5, lr
 8004fa2:	d91c      	bls.n	8004fde <D24_GENERIC+0x152>
 8004fa4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8004fa6:	b2ef      	uxtb	r7, r5
 8004fa8:	2d01      	cmp	r5, #1
 8004faa:	b23e      	sxth	r6, r7
 8004fac:	d18f      	bne.n	8004ece <D24_GENERIC+0x42>
 8004fae:	9d06      	ldr	r5, [sp, #24]
 8004fb0:	b15d      	cbz	r5, 8004fca <D24_GENERIC+0x13e>
 8004fb2:	f01e 0f01 	tst.w	lr, #1
 8004fb6:	d122      	bne.n	8004ffe <D24_GENERIC+0x172>
 8004fb8:	7805      	ldrb	r5, [r0, #0]
 8004fba:	78c7      	ldrb	r7, [r0, #3]
 8004fbc:	7846      	ldrb	r6, [r0, #1]
 8004fbe:	022d      	lsls	r5, r5, #8
 8004fc0:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004fc4:	44b4      	add	ip, r6
 8004fc6:	3002      	adds	r0, #2
 8004fc8:	e78e      	b.n	8004ee8 <D24_GENERIC+0x5c>
 8004fca:	7846      	ldrb	r6, [r0, #1]
 8004fcc:	f890 c002 	ldrb.w	ip, [r0, #2]
 8004fd0:	f810 5b03 	ldrb.w	r5, [r0], #3
 8004fd4:	0236      	lsls	r6, r6, #8
 8004fd6:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8004fda:	44ac      	add	ip, r5
 8004fdc:	e784      	b.n	8004ee8 <D24_GENERIC+0x5c>
 8004fde:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004fe2:	61d3      	str	r3, [r2, #28]
 8004fe4:	9b07      	ldr	r3, [sp, #28]
 8004fe6:	6094      	str	r4, [r2, #8]
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f8c2 b00c 	str.w	fp, [r2, #12]
 8004fee:	f8c2 a010 	str.w	sl, [r2, #16]
 8004ff2:	f8c2 9014 	str.w	r9, [r2, #20]
 8004ff6:	6193      	str	r3, [r2, #24]
 8004ff8:	b009      	add	sp, #36	; 0x24
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffe:	78c5      	ldrb	r5, [r0, #3]
 8005000:	7887      	ldrb	r7, [r0, #2]
 8005002:	f810 6b04 	ldrb.w	r6, [r0], #4
 8005006:	022d      	lsls	r5, r5, #8
 8005008:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800500c:	44b4      	add	ip, r6
 800500e:	e76b      	b.n	8004ee8 <D24_GENERIC+0x5c>
 8005010:	20000000 	.word	0x20000000
 8005014:	00030001 	.word	0x00030001
 8005018:	00060007 	.word	0x00060007

0800501c <D32_GENERIC>:
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005022:	6993      	ldr	r3, [r2, #24]
 8005024:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005026:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800502a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800502e:	69d6      	ldr	r6, [r2, #28]
 8005030:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005034:	b089      	sub	sp, #36	; 0x24
 8005036:	9307      	str	r3, [sp, #28]
 8005038:	9403      	str	r4, [sp, #12]
 800503a:	6893      	ldr	r3, [r2, #8]
 800503c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800503e:	9104      	str	r1, [sp, #16]
 8005040:	2d00      	cmp	r5, #0
 8005042:	f000 809f 	beq.w	8005184 <D32_GENERIC+0x168>
 8005046:	f004 0510 	and.w	r5, r4, #16
 800504a:	f004 0420 	and.w	r4, r4, #32
 800504e:	9505      	str	r5, [sp, #20]
 8005050:	4953      	ldr	r1, [pc, #332]	; (80051a0 <D32_GENERIC+0x184>)
 8005052:	9406      	str	r4, [sp, #24]
 8005054:	f04f 0c00 	mov.w	ip, #0
 8005058:	f8cd 9008 	str.w	r9, [sp, #8]
 800505c:	461d      	mov	r5, r3
 800505e:	4617      	mov	r7, r2
 8005060:	e077      	b.n	8005152 <D32_GENERIC+0x136>
 8005062:	f818 3003 	ldrb.w	r3, [r8, r3]
 8005066:	f810 800e 	ldrb.w	r8, [r0, lr]
 800506a:	f810 e002 	ldrb.w	lr, [r0, r2]
 800506e:	7800      	ldrb	r0, [r0, #0]
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005076:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800507a:	4403      	add	r3, r0
 800507c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8005080:	b2dc      	uxtb	r4, r3
 8005082:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005086:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800508a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800508e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005092:	0e1b      	lsrs	r3, r3, #24
 8005094:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8005098:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800509c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050a0:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80050a4:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80050a8:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80050ac:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80050b0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80050b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80050b8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80050bc:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80050c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80050c4:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <D32_GENERIC+0x188>)
 80050c6:	fb22 b403 	smlad	r4, r2, r3, fp
 80050ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ce:	fb2e 4803 	smlad	r8, lr, r3, r4
 80050d2:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <D32_GENERIC+0x18c>)
 80050d4:	fb22 5503 	smlad	r5, r2, r3, r5
 80050d8:	4b34      	ldr	r3, [pc, #208]	; (80051ac <D32_GENERIC+0x190>)
 80050da:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80050de:	2301      	movs	r3, #1
 80050e0:	fb22 f203 	smuad	r2, r2, r3
 80050e4:	4b32      	ldr	r3, [pc, #200]	; (80051b0 <D32_GENERIC+0x194>)
 80050e6:	fb2e 2503 	smlad	r5, lr, r3, r2
 80050ea:	9b02      	ldr	r3, [sp, #8]
 80050ec:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80050f0:	eb04 080a 	add.w	r8, r4, sl
 80050f4:	eba8 0803 	sub.w	r8, r8, r3
 80050f8:	4642      	mov	r2, r8
 80050fa:	17d3      	asrs	r3, r2, #31
 80050fc:	e9cd 2300 	strd	r2, r3, [sp]
 8005100:	9b05      	ldr	r3, [sp, #20]
 8005102:	f10c 0e01 	add.w	lr, ip, #1
 8005106:	b16b      	cbz	r3, 8005124 <D32_GENERIC+0x108>
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	9402      	str	r4, [sp, #8]
 800510e:	fba8 8902 	umull	r8, r9, r8, r2
 8005112:	fb02 9903 	mla	r9, r2, r3, r9
 8005116:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800511a:	f149 0900 	adc.w	r9, r9, #0
 800511e:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005122:	4654      	mov	r4, sl
 8005124:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005126:	9a04      	ldr	r2, [sp, #16]
 8005128:	fb0c fc03 	mul.w	ip, ip, r3
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	0364      	lsls	r4, r4, #13
 8005130:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005134:	f04f 0900 	mov.w	r9, #0
 8005138:	fbc3 8904 	smlal	r8, r9, r3, r4
 800513c:	464b      	mov	r3, r9
 800513e:	109b      	asrs	r3, r3, #2
 8005140:	f303 030f 	ssat	r3, #16, r3
 8005144:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8005148:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800514a:	fa1f fc8e 	uxth.w	ip, lr
 800514e:	4563      	cmp	r3, ip
 8005150:	d914      	bls.n	800517c <D32_GENERIC+0x160>
 8005152:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005154:	b2e2      	uxtb	r2, r4
 8005156:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800515a:	eb00 080e 	add.w	r8, r0, lr
 800515e:	4253      	negs	r3, r2
 8005160:	2c01      	cmp	r4, #1
 8005162:	eb08 0403 	add.w	r4, r8, r3
 8005166:	f47f af7c 	bne.w	8005062 <D32_GENERIC+0x46>
 800516a:	1d02      	adds	r2, r0, #4
 800516c:	6803      	ldr	r3, [r0, #0]
 800516e:	9806      	ldr	r0, [sp, #24]
 8005170:	b110      	cbz	r0, 8005178 <D32_GENERIC+0x15c>
 8005172:	ba5b      	rev16	r3, r3
 8005174:	4610      	mov	r0, r2
 8005176:	e783      	b.n	8005080 <D32_GENERIC+0x64>
 8005178:	4610      	mov	r0, r2
 800517a:	e781      	b.n	8005080 <D32_GENERIC+0x64>
 800517c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005180:	462b      	mov	r3, r5
 8005182:	463a      	mov	r2, r7
 8005184:	6093      	str	r3, [r2, #8]
 8005186:	9b07      	ldr	r3, [sp, #28]
 8005188:	f8c2 b00c 	str.w	fp, [r2, #12]
 800518c:	2000      	movs	r0, #0
 800518e:	61d6      	str	r6, [r2, #28]
 8005190:	f8c2 a010 	str.w	sl, [r2, #16]
 8005194:	f8c2 9014 	str.w	r9, [r2, #20]
 8005198:	6193      	str	r3, [r2, #24]
 800519a:	b009      	add	sp, #36	; 0x24
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a0:	20000000 	.word	0x20000000
 80051a4:	00060003 	.word	0x00060003
 80051a8:	000a000c 	.word	0x000a000c
 80051ac:	000c000a 	.word	0x000c000a
 80051b0:	00030006 	.word	0x00030006

080051b4 <D48_GENERIC>:
 80051b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b8:	b089      	sub	sp, #36	; 0x24
 80051ba:	6953      	ldr	r3, [r2, #20]
 80051bc:	68d4      	ldr	r4, [r2, #12]
 80051be:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	9400      	str	r4, [sp, #0]
 80051c4:	6993      	ldr	r3, [r2, #24]
 80051c6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80051c8:	9307      	str	r3, [sp, #28]
 80051ca:	9403      	str	r4, [sp, #12]
 80051cc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80051d0:	69d6      	ldr	r6, [r2, #28]
 80051d2:	6893      	ldr	r3, [r2, #8]
 80051d4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80051d6:	9104      	str	r1, [sp, #16]
 80051d8:	2d00      	cmp	r5, #0
 80051da:	f000 80c5 	beq.w	8005368 <D48_GENERIC+0x1b4>
 80051de:	f004 0510 	and.w	r5, r4, #16
 80051e2:	f004 0420 	and.w	r4, r4, #32
 80051e6:	4967      	ldr	r1, [pc, #412]	; (8005384 <D48_GENERIC+0x1d0>)
 80051e8:	9505      	str	r5, [sp, #20]
 80051ea:	9406      	str	r4, [sp, #24]
 80051ec:	f04f 0c00 	mov.w	ip, #0
 80051f0:	4657      	mov	r7, sl
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	e09c      	b.n	8005330 <D48_GENERIC+0x17c>
 80051f6:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80051fa:	f810 b009 	ldrb.w	fp, [r0, r9]
 80051fe:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8005202:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8005206:	7800      	ldrb	r0, [r0, #0]
 8005208:	0424      	lsls	r4, r4, #16
 800520a:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800520e:	f818 4005 	ldrb.w	r4, [r8, r5]
 8005212:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8005216:	44a8      	add	r8, r5
 8005218:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800521c:	eb0b 0500 	add.w	r5, fp, r0
 8005220:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8005224:	fa5f f885 	uxtb.w	r8, r5
 8005228:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800522c:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8005230:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8005234:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8005238:	0e2d      	lsrs	r5, r5, #24
 800523a:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800523e:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8005242:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8005246:	b2e6      	uxtb	r6, r4
 8005248:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800524c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005250:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8005254:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005258:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800525c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8005260:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005264:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8005268:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800526c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005270:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8005274:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005278:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800527c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005280:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8005284:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8005288:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800528c:	4c3e      	ldr	r4, [pc, #248]	; (8005388 <D48_GENERIC+0x1d4>)
 800528e:	9d00      	ldr	r5, [sp, #0]
 8005290:	fb2a 5404 	smlad	r4, sl, r4, r5
 8005294:	4d3d      	ldr	r5, [pc, #244]	; (800538c <D48_GENERIC+0x1d8>)
 8005296:	fb28 4405 	smlad	r4, r8, r5, r4
 800529a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800529e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 80052a2:	4c3b      	ldr	r4, [pc, #236]	; (8005390 <D48_GENERIC+0x1dc>)
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	fb2a 3304 	smlad	r3, sl, r4, r3
 80052aa:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80052ae:	fb28 3304 	smlad	r3, r8, r4, r3
 80052b2:	4c38      	ldr	r4, [pc, #224]	; (8005394 <D48_GENERIC+0x1e0>)
 80052b4:	fb2e 3304 	smlad	r3, lr, r4, r3
 80052b8:	2501      	movs	r5, #1
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	fb2a fa05 	smuad	sl, sl, r5
 80052c0:	4b35      	ldr	r3, [pc, #212]	; (8005398 <D48_GENERIC+0x1e4>)
 80052c2:	fb28 a803 	smlad	r8, r8, r3, sl
 80052c6:	4b35      	ldr	r3, [pc, #212]	; (800539c <D48_GENERIC+0x1e8>)
 80052c8:	fb2e 8303 	smlad	r3, lr, r3, r8
 80052cc:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	9b02      	ldr	r3, [sp, #8]
 80052d4:	eb04 0807 	add.w	r8, r4, r7
 80052d8:	eba8 0803 	sub.w	r8, r8, r3
 80052dc:	9b05      	ldr	r3, [sp, #20]
 80052de:	4465      	add	r5, ip
 80052e0:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80052e4:	b163      	cbz	r3, 8005300 <D48_GENERIC+0x14c>
 80052e6:	6a17      	ldr	r7, [r2, #32]
 80052e8:	9402      	str	r4, [sp, #8]
 80052ea:	fba8 8907 	umull	r8, r9, r8, r7
 80052ee:	fb07 990b 	mla	r9, r7, fp, r9
 80052f2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80052f6:	f149 0900 	adc.w	r9, r9, #0
 80052fa:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80052fe:	463c      	mov	r4, r7
 8005300:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	02e4      	lsls	r4, r4, #11
 8005308:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800530c:	f04f 0900 	mov.w	r9, #0
 8005310:	fb0c fc0e 	mul.w	ip, ip, lr
 8005314:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005318:	9b04      	ldr	r3, [sp, #16]
 800531a:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800531e:	f304 040f 	ssat	r4, #16, r4
 8005322:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8005326:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005328:	fa1f fc85 	uxth.w	ip, r5
 800532c:	4564      	cmp	r4, ip
 800532e:	d919      	bls.n	8005364 <D48_GENERIC+0x1b0>
 8005330:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8005332:	fa5f fe84 	uxtb.w	lr, r4
 8005336:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800533a:	f1ce 0500 	rsb	r5, lr, #0
 800533e:	eb00 0b09 	add.w	fp, r0, r9
 8005342:	eb0b 0a05 	add.w	sl, fp, r5
 8005346:	2c01      	cmp	r4, #1
 8005348:	eb0a 0809 	add.w	r8, sl, r9
 800534c:	f47f af53 	bne.w	80051f6 <D48_GENERIC+0x42>
 8005350:	9b06      	ldr	r3, [sp, #24]
 8005352:	6805      	ldr	r5, [r0, #0]
 8005354:	6844      	ldr	r4, [r0, #4]
 8005356:	3006      	adds	r0, #6
 8005358:	2b00      	cmp	r3, #0
 800535a:	f43f af63 	beq.w	8005224 <D48_GENERIC+0x70>
 800535e:	ba6d      	rev16	r5, r5
 8005360:	ba64      	rev16	r4, r4
 8005362:	e75f      	b.n	8005224 <D48_GENERIC+0x70>
 8005364:	9b01      	ldr	r3, [sp, #4]
 8005366:	46ba      	mov	sl, r7
 8005368:	6093      	str	r3, [r2, #8]
 800536a:	9b00      	ldr	r3, [sp, #0]
 800536c:	60d3      	str	r3, [r2, #12]
 800536e:	9b02      	ldr	r3, [sp, #8]
 8005370:	6153      	str	r3, [r2, #20]
 8005372:	9b07      	ldr	r3, [sp, #28]
 8005374:	61d6      	str	r6, [r2, #28]
 8005376:	2000      	movs	r0, #0
 8005378:	f8c2 a010 	str.w	sl, [r2, #16]
 800537c:	6193      	str	r3, [r2, #24]
 800537e:	b009      	add	sp, #36	; 0x24
 8005380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	20000000 	.word	0x20000000
 8005388:	000f000a 	.word	0x000f000a
 800538c:	00060003 	.word	0x00060003
 8005390:	00150019 	.word	0x00150019
 8005394:	00190015 	.word	0x00190015
 8005398:	00030006 	.word	0x00030006
 800539c:	000a000f 	.word	0x000a000f

080053a0 <D64_GENERIC>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	b089      	sub	sp, #36	; 0x24
 80053a6:	6913      	ldr	r3, [r2, #16]
 80053a8:	6895      	ldr	r5, [r2, #8]
 80053aa:	9303      	str	r3, [sp, #12]
 80053ac:	9501      	str	r5, [sp, #4]
 80053ae:	6953      	ldr	r3, [r2, #20]
 80053b0:	68d5      	ldr	r5, [r2, #12]
 80053b2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	9500      	str	r5, [sp, #0]
 80053b8:	6993      	ldr	r3, [r2, #24]
 80053ba:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80053bc:	9307      	str	r3, [sp, #28]
 80053be:	9505      	str	r5, [sp, #20]
 80053c0:	69d3      	ldr	r3, [r2, #28]
 80053c2:	9106      	str	r1, [sp, #24]
 80053c4:	2c00      	cmp	r4, #0
 80053c6:	f000 80d9 	beq.w	800557c <D64_GENERIC+0x1dc>
 80053ca:	6a11      	ldr	r1, [r2, #32]
 80053cc:	9102      	str	r1, [sp, #8]
 80053ce:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80055bc <D64_GENERIC+0x21c>
 80053d2:	f04f 0c00 	mov.w	ip, #0
 80053d6:	4681      	mov	r9, r0
 80053d8:	e0c1      	b.n	800555e <D64_GENERIC+0x1be>
 80053da:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80053de:	4274      	negs	r4, r6
 80053e0:	eb09 0708 	add.w	r7, r9, r8
 80053e4:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80053e8:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80053ec:	5d38      	ldrb	r0, [r7, r4]
 80053ee:	5d29      	ldrb	r1, [r5, r4]
 80053f0:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80053f4:	f819 a008 	ldrb.w	sl, [r9, r8]
 80053f8:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80053fc:	f899 7000 	ldrb.w	r7, [r9]
 8005400:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8005404:	4425      	add	r5, r4
 8005406:	0409      	lsls	r1, r1, #16
 8005408:	0400      	lsls	r0, r0, #16
 800540a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800540e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8005412:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8005416:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800541a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800541e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005422:	4459      	add	r1, fp
 8005424:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8005428:	4438      	add	r0, r7
 800542a:	b2c5      	uxtb	r5, r0
 800542c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005430:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8005434:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8005438:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800543c:	0e00      	lsrs	r0, r0, #24
 800543e:	eb03 0806 	add.w	r8, r3, r6
 8005442:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8005446:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800544a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800544e:	b2c8      	uxtb	r0, r1
 8005450:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005454:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005458:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800545c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8005460:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005464:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005468:	0e09      	lsrs	r1, r1, #24
 800546a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800546e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8005472:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8005476:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800547a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800547e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8005482:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8005486:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800548a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800548e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005492:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8005496:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800549a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800549e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80054a2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80054a6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80054aa:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80054ae:	0a8b      	lsrs	r3, r1, #10
 80054b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80054b4:	4939      	ldr	r1, [pc, #228]	; (800559c <D64_GENERIC+0x1fc>)
 80054b6:	9c00      	ldr	r4, [sp, #0]
 80054b8:	fb28 4101 	smlad	r1, r8, r1, r4
 80054bc:	4c38      	ldr	r4, [pc, #224]	; (80055a0 <D64_GENERIC+0x200>)
 80054be:	fb27 1104 	smlad	r1, r7, r4, r1
 80054c2:	4c38      	ldr	r4, [pc, #224]	; (80055a4 <D64_GENERIC+0x204>)
 80054c4:	fb20 1104 	smlad	r1, r0, r4, r1
 80054c8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80054cc:	fb2a 1106 	smlad	r1, sl, r6, r1
 80054d0:	4c35      	ldr	r4, [pc, #212]	; (80055a8 <D64_GENERIC+0x208>)
 80054d2:	9d01      	ldr	r5, [sp, #4]
 80054d4:	fb28 5404 	smlad	r4, r8, r4, r5
 80054d8:	4d33      	ldr	r5, [pc, #204]	; (80055a8 <D64_GENERIC+0x208>)
 80054da:	fb2a 4415 	smladx	r4, sl, r5, r4
 80054de:	4d33      	ldr	r5, [pc, #204]	; (80055ac <D64_GENERIC+0x20c>)
 80054e0:	fb27 4405 	smlad	r4, r7, r5, r4
 80054e4:	fb20 4415 	smladx	r4, r0, r5, r4
 80054e8:	2501      	movs	r5, #1
 80054ea:	9400      	str	r4, [sp, #0]
 80054ec:	fb28 f805 	smuad	r8, r8, r5
 80054f0:	4c2f      	ldr	r4, [pc, #188]	; (80055b0 <D64_GENERIC+0x210>)
 80054f2:	fb27 8704 	smlad	r7, r7, r4, r8
 80054f6:	4c2f      	ldr	r4, [pc, #188]	; (80055b4 <D64_GENERIC+0x214>)
 80054f8:	fb20 7004 	smlad	r0, r0, r4, r7
 80054fc:	4c2e      	ldr	r4, [pc, #184]	; (80055b8 <D64_GENERIC+0x218>)
 80054fe:	fb2a 0004 	smlad	r0, sl, r4, r0
 8005502:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8005506:	9902      	ldr	r1, [sp, #8]
 8005508:	9001      	str	r0, [sp, #4]
 800550a:	b189      	cbz	r1, 8005530 <D64_GENERIC+0x190>
 800550c:	9803      	ldr	r0, [sp, #12]
 800550e:	9c04      	ldr	r4, [sp, #16]
 8005510:	9604      	str	r6, [sp, #16]
 8005512:	4430      	add	r0, r6
 8005514:	1b00      	subs	r0, r0, r4
 8005516:	17c5      	asrs	r5, r0, #31
 8005518:	460f      	mov	r7, r1
 800551a:	fba0 0101 	umull	r0, r1, r0, r1
 800551e:	fb07 1105 	mla	r1, r7, r5, r1
 8005522:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005526:	f141 0100 	adc.w	r1, r1, #0
 800552a:	0049      	lsls	r1, r1, #1
 800552c:	9103      	str	r1, [sp, #12]
 800552e:	460e      	mov	r6, r1
 8005530:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8005532:	9905      	ldr	r1, [sp, #20]
 8005534:	9806      	ldr	r0, [sp, #24]
 8005536:	02b6      	lsls	r6, r6, #10
 8005538:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800553c:	f04f 0800 	mov.w	r8, #0
 8005540:	fb0c f404 	mul.w	r4, ip, r4
 8005544:	fbc1 7806 	smlal	r7, r8, r1, r6
 8005548:	4641      	mov	r1, r8
 800554a:	1089      	asrs	r1, r1, #2
 800554c:	f301 010f 	ssat	r1, #16, r1
 8005550:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005554:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8005556:	f10c 0c01 	add.w	ip, ip, #1
 800555a:	4561      	cmp	r1, ip
 800555c:	dd0e      	ble.n	800557c <D64_GENERIC+0x1dc>
 800555e:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8005560:	2e01      	cmp	r6, #1
 8005562:	f47f af3a 	bne.w	80053da <D64_GENERIC+0x3a>
 8005566:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005568:	06b4      	lsls	r4, r6, #26
 800556a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800556e:	f109 0908 	add.w	r9, r9, #8
 8005572:	f57f af5a 	bpl.w	800542a <D64_GENERIC+0x8a>
 8005576:	ba40      	rev16	r0, r0
 8005578:	ba49      	rev16	r1, r1
 800557a:	e756      	b.n	800542a <D64_GENERIC+0x8a>
 800557c:	61d3      	str	r3, [r2, #28]
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	9901      	ldr	r1, [sp, #4]
 8005582:	6113      	str	r3, [r2, #16]
 8005584:	9b04      	ldr	r3, [sp, #16]
 8005586:	6091      	str	r1, [r2, #8]
 8005588:	6153      	str	r3, [r2, #20]
 800558a:	9900      	ldr	r1, [sp, #0]
 800558c:	9b07      	ldr	r3, [sp, #28]
 800558e:	60d1      	str	r1, [r2, #12]
 8005590:	2000      	movs	r0, #0
 8005592:	6193      	str	r3, [r2, #24]
 8005594:	b009      	add	sp, #36	; 0x24
 8005596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559a:	bf00      	nop
 800559c:	001c0015 	.word	0x001c0015
 80055a0:	000f000a 	.word	0x000f000a
 80055a4:	00060003 	.word	0x00060003
 80055a8:	0024002a 	.word	0x0024002a
 80055ac:	002e0030 	.word	0x002e0030
 80055b0:	00030006 	.word	0x00030006
 80055b4:	000a000f 	.word	0x000a000f
 80055b8:	0015001c 	.word	0x0015001c
 80055bc:	20000000 	.word	0x20000000

080055c0 <D80_GENERIC>:
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	b08b      	sub	sp, #44	; 0x2c
 80055c6:	6914      	ldr	r4, [r2, #16]
 80055c8:	9404      	str	r4, [sp, #16]
 80055ca:	6954      	ldr	r4, [r2, #20]
 80055cc:	9405      	str	r4, [sp, #20]
 80055ce:	6994      	ldr	r4, [r2, #24]
 80055d0:	9409      	str	r4, [sp, #36]	; 0x24
 80055d2:	6894      	ldr	r4, [r2, #8]
 80055d4:	9402      	str	r4, [sp, #8]
 80055d6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80055d8:	68d4      	ldr	r4, [r2, #12]
 80055da:	9401      	str	r4, [sp, #4]
 80055dc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80055de:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80055e2:	9406      	str	r4, [sp, #24]
 80055e4:	9107      	str	r1, [sp, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 810f 	beq.w	800580a <D80_GENERIC+0x24a>
 80055ec:	6a13      	ldr	r3, [r2, #32]
 80055ee:	9308      	str	r3, [sp, #32]
 80055f0:	2300      	movs	r3, #0
 80055f2:	9200      	str	r2, [sp, #0]
 80055f4:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800585c <D80_GENERIC+0x29c>
 80055f8:	f8cd b00c 	str.w	fp, [sp, #12]
 80055fc:	461a      	mov	r2, r3
 80055fe:	e0ed      	b.n	80057dc <D80_GENERIC+0x21c>
 8005600:	fa5f fc8c 	uxtb.w	ip, ip
 8005604:	fa0f f48c 	sxth.w	r4, ip
 8005608:	0066      	lsls	r6, r4, #1
 800560a:	eb06 0804 	add.w	r8, r6, r4
 800560e:	f1cc 0500 	rsb	r5, ip, #0
 8005612:	eb00 0108 	add.w	r1, r0, r8
 8005616:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800561a:	194b      	adds	r3, r1, r5
 800561c:	5d49      	ldrb	r1, [r1, r5]
 800561e:	f810 a008 	ldrb.w	sl, [r0, r8]
 8005622:	f813 b004 	ldrb.w	fp, [r3, r4]
 8005626:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800562a:	f890 8000 	ldrb.w	r8, [r0]
 800562e:	eb03 0e04 	add.w	lr, r3, r4
 8005632:	eb0e 0705 	add.w	r7, lr, r5
 8005636:	0409      	lsls	r1, r1, #16
 8005638:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800563c:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8005640:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8005644:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8005648:	eb0a 0004 	add.w	r0, sl, r4
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	f81a a004 	ldrb.w	sl, [sl, r4]
 8005652:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8005656:	5d44      	ldrb	r4, [r0, r5]
 8005658:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800565c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005660:	4428      	add	r0, r5
 8005662:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8005666:	4441      	add	r1, r8
 8005668:	4430      	add	r0, r6
 800566a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800566e:	441f      	add	r7, r3
 8005670:	b2cd      	uxtb	r5, r1
 8005672:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005676:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800567a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8005684:	0e09      	lsrs	r1, r1, #24
 8005686:	4433      	add	r3, r6
 8005688:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800568c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8005690:	b2fd      	uxtb	r5, r7
 8005692:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8005696:	469b      	mov	fp, r3
 8005698:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800569c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80056a0:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 80056a4:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80056a8:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80056ac:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80056b0:	0e3b      	lsrs	r3, r7, #24
 80056b2:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80056b6:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80056ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80056be:	fa5f fe84 	uxtb.w	lr, r4
 80056c2:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80056c6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80056ca:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80056ce:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80056d2:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80056d6:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80056da:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80056de:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80056e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80056e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ea:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80056ee:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80056f2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80056f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80056fa:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80056fe:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8005702:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8005706:	0aa3      	lsrs	r3, r4, #10
 8005708:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800570c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005710:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005714:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8005718:	9303      	str	r3, [sp, #12]
 800571a:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800571e:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8005722:	4b42      	ldr	r3, [pc, #264]	; (800582c <D80_GENERIC+0x26c>)
 8005724:	9901      	ldr	r1, [sp, #4]
 8005726:	fb2b 1303 	smlad	r3, fp, r3, r1
 800572a:	4941      	ldr	r1, [pc, #260]	; (8005830 <D80_GENERIC+0x270>)
 800572c:	fb28 3301 	smlad	r3, r8, r1, r3
 8005730:	4940      	ldr	r1, [pc, #256]	; (8005834 <D80_GENERIC+0x274>)
 8005732:	fb2c 3301 	smlad	r3, ip, r1, r3
 8005736:	4940      	ldr	r1, [pc, #256]	; (8005838 <D80_GENERIC+0x278>)
 8005738:	fb27 3301 	smlad	r3, r7, r1, r3
 800573c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005740:	fb2e 3301 	smlad	r3, lr, r1, r3
 8005744:	493d      	ldr	r1, [pc, #244]	; (800583c <D80_GENERIC+0x27c>)
 8005746:	9c02      	ldr	r4, [sp, #8]
 8005748:	fb2b 4401 	smlad	r4, fp, r1, r4
 800574c:	493c      	ldr	r1, [pc, #240]	; (8005840 <D80_GENERIC+0x280>)
 800574e:	fb28 4401 	smlad	r4, r8, r1, r4
 8005752:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8005756:	fb2c 4101 	smlad	r1, ip, r1, r4
 800575a:	4c3a      	ldr	r4, [pc, #232]	; (8005844 <D80_GENERIC+0x284>)
 800575c:	fb27 1104 	smlad	r1, r7, r4, r1
 8005760:	4c39      	ldr	r4, [pc, #228]	; (8005848 <D80_GENERIC+0x288>)
 8005762:	fb2e 1104 	smlad	r1, lr, r4, r1
 8005766:	9101      	str	r1, [sp, #4]
 8005768:	2101      	movs	r1, #1
 800576a:	fb2b fb01 	smuad	fp, fp, r1
 800576e:	4937      	ldr	r1, [pc, #220]	; (800584c <D80_GENERIC+0x28c>)
 8005770:	fb28 b801 	smlad	r8, r8, r1, fp
 8005774:	4d36      	ldr	r5, [pc, #216]	; (8005850 <D80_GENERIC+0x290>)
 8005776:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800577a:	4d36      	ldr	r5, [pc, #216]	; (8005854 <D80_GENERIC+0x294>)
 800577c:	fb27 c705 	smlad	r7, r7, r5, ip
 8005780:	4d35      	ldr	r5, [pc, #212]	; (8005858 <D80_GENERIC+0x298>)
 8005782:	fb2e 7105 	smlad	r1, lr, r5, r7
 8005786:	9102      	str	r1, [sp, #8]
 8005788:	9908      	ldr	r1, [sp, #32]
 800578a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800578e:	b181      	cbz	r1, 80057b2 <D80_GENERIC+0x1f2>
 8005790:	9c04      	ldr	r4, [sp, #16]
 8005792:	9d05      	ldr	r5, [sp, #20]
 8005794:	9305      	str	r3, [sp, #20]
 8005796:	441c      	add	r4, r3
 8005798:	1b64      	subs	r4, r4, r5
 800579a:	17e7      	asrs	r7, r4, #31
 800579c:	fba4 4501 	umull	r4, r5, r4, r1
 80057a0:	fb01 5507 	mla	r5, r1, r7, r5
 80057a4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80057a8:	f145 0500 	adc.w	r5, r5, #0
 80057ac:	0069      	lsls	r1, r5, #1
 80057ae:	9104      	str	r1, [sp, #16]
 80057b0:	460b      	mov	r3, r1
 80057b2:	9e00      	ldr	r6, [sp, #0]
 80057b4:	9f06      	ldr	r7, [sp, #24]
 80057b6:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80057b8:	025b      	lsls	r3, r3, #9
 80057ba:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80057be:	2500      	movs	r5, #0
 80057c0:	fb02 f101 	mul.w	r1, r2, r1
 80057c4:	fbc7 4503 	smlal	r4, r5, r7, r3
 80057c8:	9c07      	ldr	r4, [sp, #28]
 80057ca:	10ab      	asrs	r3, r5, #2
 80057cc:	f303 030f 	ssat	r3, #16, r3
 80057d0:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80057d4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80057d6:	3201      	adds	r2, #1
 80057d8:	4293      	cmp	r3, r2
 80057da:	dd13      	ble.n	8005804 <D80_GENERIC+0x244>
 80057dc:	9b00      	ldr	r3, [sp, #0]
 80057de:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80057e2:	f1bc 0f01 	cmp.w	ip, #1
 80057e6:	f47f af0b 	bne.w	8005600 <D80_GENERIC+0x40>
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	6884      	ldr	r4, [r0, #8]
 80057ee:	069b      	lsls	r3, r3, #26
 80057f0:	e890 0082 	ldmia.w	r0, {r1, r7}
 80057f4:	f100 000a 	add.w	r0, r0, #10
 80057f8:	f57f af3a 	bpl.w	8005670 <D80_GENERIC+0xb0>
 80057fc:	ba49      	rev16	r1, r1
 80057fe:	ba7f      	rev16	r7, r7
 8005800:	ba64      	rev16	r4, r4
 8005802:	e735      	b.n	8005670 <D80_GENERIC+0xb0>
 8005804:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005808:	4632      	mov	r2, r6
 800580a:	9b02      	ldr	r3, [sp, #8]
 800580c:	6093      	str	r3, [r2, #8]
 800580e:	9b01      	ldr	r3, [sp, #4]
 8005810:	60d3      	str	r3, [r2, #12]
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	6113      	str	r3, [r2, #16]
 8005816:	9b05      	ldr	r3, [sp, #20]
 8005818:	6153      	str	r3, [r2, #20]
 800581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581c:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005820:	2000      	movs	r0, #0
 8005822:	6193      	str	r3, [r2, #24]
 8005824:	b00b      	add	sp, #44	; 0x2c
 8005826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582a:	bf00      	nop
 800582c:	002d0024 	.word	0x002d0024
 8005830:	001c0015 	.word	0x001c0015
 8005834:	000f000a 	.word	0x000f000a
 8005838:	00060003 	.word	0x00060003
 800583c:	0037003f 	.word	0x0037003f
 8005840:	00450049 	.word	0x00450049
 8005844:	00490045 	.word	0x00490045
 8005848:	003f0037 	.word	0x003f0037
 800584c:	00030006 	.word	0x00030006
 8005850:	000a000f 	.word	0x000a000f
 8005854:	0015001c 	.word	0x0015001c
 8005858:	0024002d 	.word	0x0024002d
 800585c:	20000000 	.word	0x20000000

08005860 <D128_GENERIC>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	b093      	sub	sp, #76	; 0x4c
 8005866:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005868:	9005      	str	r0, [sp, #20]
 800586a:	4610      	mov	r0, r2
 800586c:	9201      	str	r2, [sp, #4]
 800586e:	6912      	ldr	r2, [r2, #16]
 8005870:	920c      	str	r2, [sp, #48]	; 0x30
 8005872:	4602      	mov	r2, r0
 8005874:	6940      	ldr	r0, [r0, #20]
 8005876:	900d      	str	r0, [sp, #52]	; 0x34
 8005878:	4610      	mov	r0, r2
 800587a:	4614      	mov	r4, r2
 800587c:	6992      	ldr	r2, [r2, #24]
 800587e:	9211      	str	r2, [sp, #68]	; 0x44
 8005880:	69c2      	ldr	r2, [r0, #28]
 8005882:	9202      	str	r2, [sp, #8]
 8005884:	68e2      	ldr	r2, [r4, #12]
 8005886:	6880      	ldr	r0, [r0, #8]
 8005888:	9203      	str	r2, [sp, #12]
 800588a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800588c:	9004      	str	r0, [sp, #16]
 800588e:	920e      	str	r2, [sp, #56]	; 0x38
 8005890:	910f      	str	r1, [sp, #60]	; 0x3c
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 819b 	beq.w	8005bce <D128_GENERIC+0x36e>
 8005898:	6a23      	ldr	r3, [r4, #32]
 800589a:	9310      	str	r3, [sp, #64]	; 0x40
 800589c:	2300      	movs	r3, #0
 800589e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8005c48 <D128_GENERIC+0x3e8>
 80058a2:	9306      	str	r3, [sp, #24]
 80058a4:	e17a      	b.n	8005b9c <D128_GENERIC+0x33c>
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	9d05      	ldr	r5, [sp, #20]
 80058aa:	b214      	sxth	r4, r2
 80058ac:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80058b0:	4250      	negs	r0, r2
 80058b2:	eb05 010a 	add.w	r1, r5, sl
 80058b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058ba:	eb01 0800 	add.w	r8, r1, r0
 80058be:	eb0b 0c04 	add.w	ip, fp, r4
 80058c2:	eb08 070c 	add.w	r7, r8, ip
 80058c6:	183b      	adds	r3, r7, r0
 80058c8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80058cc:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 80058d0:	eb0e 0604 	add.w	r6, lr, r4
 80058d4:	9307      	str	r3, [sp, #28]
 80058d6:	1833      	adds	r3, r6, r0
 80058d8:	9305      	str	r3, [sp, #20]
 80058da:	462b      	mov	r3, r5
 80058dc:	f815 a00a 	ldrb.w	sl, [r5, sl]
 80058e0:	f8cd a020 	str.w	sl, [sp, #32]
 80058e4:	f818 a00c 	ldrb.w	sl, [r8, ip]
 80058e8:	f813 c002 	ldrb.w	ip, [r3, r2]
 80058ec:	f81e 8004 	ldrb.w	r8, [lr, r4]
 80058f0:	5c3a      	ldrb	r2, [r7, r0]
 80058f2:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 80058f6:	781f      	ldrb	r7, [r3, #0]
 80058f8:	9b07      	ldr	r3, [sp, #28]
 80058fa:	9d05      	ldr	r5, [sp, #20]
 80058fc:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8005900:	5c09      	ldrb	r1, [r1, r0]
 8005902:	9709      	str	r7, [sp, #36]	; 0x24
 8005904:	9307      	str	r3, [sp, #28]
 8005906:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800590a:	5c33      	ldrb	r3, [r6, r0]
 800590c:	0412      	lsls	r2, r2, #16
 800590e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005912:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005916:	9d08      	ldr	r5, [sp, #32]
 8005918:	eb06 0a04 	add.w	sl, r6, r4
 800591c:	0409      	lsls	r1, r1, #16
 800591e:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8005922:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8005926:	5d36      	ldrb	r6, [r6, r4]
 8005928:	9c05      	ldr	r4, [sp, #20]
 800592a:	042d      	lsls	r5, r5, #16
 800592c:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8005930:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005934:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8005938:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800593c:	eb0a 0c00 	add.w	ip, sl, r0
 8005940:	041b      	lsls	r3, r3, #16
 8005942:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005946:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800594a:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800594e:	9d07      	ldr	r5, [sp, #28]
 8005950:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005954:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8005958:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800595a:	4458      	add	r0, fp
 800595c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8005960:	9005      	str	r0, [sp, #20]
 8005962:	4439      	add	r1, r7
 8005964:	442a      	add	r2, r5
 8005966:	44b2      	add	sl, r6
 8005968:	1918      	adds	r0, r3, r4
 800596a:	b2cb      	uxtb	r3, r1
 800596c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8005970:	9e02      	ldr	r6, [sp, #8]
 8005972:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005976:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800597a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800597e:	441e      	add	r6, r3
 8005980:	0e09      	lsrs	r1, r1, #24
 8005982:	4633      	mov	r3, r6
 8005984:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005988:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800598c:	b2d4      	uxtb	r4, r2
 800598e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005992:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005996:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800599a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800599e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80059a2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80059a6:	0e12      	lsrs	r2, r2, #24
 80059a8:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80059ac:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80059b0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80059b4:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80059b8:	9702      	str	r7, [sp, #8]
 80059ba:	b2c2      	uxtb	r2, r0
 80059bc:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80059c0:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80059c4:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80059c8:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80059cc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80059d0:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80059d4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80059d8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80059dc:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80059e0:	0e00      	lsrs	r0, r0, #24
 80059e2:	fa5f f68a 	uxtb.w	r6, sl
 80059e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ea:	9309      	str	r3, [sp, #36]	; 0x24
 80059ec:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80059f0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80059f4:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80059f8:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80059fc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005a00:	950a      	str	r5, [sp, #40]	; 0x28
 8005a02:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005a06:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005a0a:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005a0e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005a12:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005a16:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a1c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a22:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005a26:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005a2a:	9307      	str	r3, [sp, #28]
 8005a2c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005a30:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005a34:	9b02      	ldr	r3, [sp, #8]
 8005a36:	f8cd c008 	str.w	ip, [sp, #8]
 8005a3a:	4694      	mov	ip, r2
 8005a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a3e:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8005a42:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8005a46:	9a02      	ldr	r2, [sp, #8]
 8005a48:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005a4c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005a50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005a54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a56:	f8cd a020 	str.w	sl, [sp, #32]
 8005a5a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005a5e:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005a62:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005a66:	9b07      	ldr	r3, [sp, #28]
 8005a68:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005a6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8005a70:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8005a74:	9a08      	ldr	r2, [sp, #32]
 8005a76:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a7e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005a82:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005a86:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8005a8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005a8e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005a92:	0a96      	lsrs	r6, r2, #10
 8005a94:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005a98:	9602      	str	r6, [sp, #8]
 8005a9a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005a9e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005aa2:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8005aa6:	4e53      	ldr	r6, [pc, #332]	; (8005bf4 <D128_GENERIC+0x394>)
 8005aa8:	9f03      	ldr	r7, [sp, #12]
 8005aaa:	fb2c 7606 	smlad	r6, ip, r6, r7
 8005aae:	4f52      	ldr	r7, [pc, #328]	; (8005bf8 <D128_GENERIC+0x398>)
 8005ab0:	fb2a 6607 	smlad	r6, sl, r7, r6
 8005ab4:	4f51      	ldr	r7, [pc, #324]	; (8005bfc <D128_GENERIC+0x39c>)
 8005ab6:	fb21 6607 	smlad	r6, r1, r7, r6
 8005aba:	4f51      	ldr	r7, [pc, #324]	; (8005c00 <D128_GENERIC+0x3a0>)
 8005abc:	fb24 6607 	smlad	r6, r4, r7, r6
 8005ac0:	4f50      	ldr	r7, [pc, #320]	; (8005c04 <D128_GENERIC+0x3a4>)
 8005ac2:	fb28 6607 	smlad	r6, r8, r7, r6
 8005ac6:	4f50      	ldr	r7, [pc, #320]	; (8005c08 <D128_GENERIC+0x3a8>)
 8005ac8:	fb20 6607 	smlad	r6, r0, r7, r6
 8005acc:	4f4f      	ldr	r7, [pc, #316]	; (8005c0c <D128_GENERIC+0x3ac>)
 8005ace:	fb23 6607 	smlad	r6, r3, r7, r6
 8005ad2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8005ad6:	fb25 6607 	smlad	r6, r5, r7, r6
 8005ada:	4f4d      	ldr	r7, [pc, #308]	; (8005c10 <D128_GENERIC+0x3b0>)
 8005adc:	9a04      	ldr	r2, [sp, #16]
 8005ade:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8005ae2:	4a4c      	ldr	r2, [pc, #304]	; (8005c14 <D128_GENERIC+0x3b4>)
 8005ae4:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005ae8:	4f4b      	ldr	r7, [pc, #300]	; (8005c18 <D128_GENERIC+0x3b8>)
 8005aea:	fb21 ee07 	smlad	lr, r1, r7, lr
 8005aee:	4f4b      	ldr	r7, [pc, #300]	; (8005c1c <D128_GENERIC+0x3bc>)
 8005af0:	fb24 ee07 	smlad	lr, r4, r7, lr
 8005af4:	4f4a      	ldr	r7, [pc, #296]	; (8005c20 <D128_GENERIC+0x3c0>)
 8005af6:	fb28 ee07 	smlad	lr, r8, r7, lr
 8005afa:	4f4a      	ldr	r7, [pc, #296]	; (8005c24 <D128_GENERIC+0x3c4>)
 8005afc:	fb20 ee07 	smlad	lr, r0, r7, lr
 8005b00:	4f49      	ldr	r7, [pc, #292]	; (8005c28 <D128_GENERIC+0x3c8>)
 8005b02:	fb23 e707 	smlad	r7, r3, r7, lr
 8005b06:	f8df e144 	ldr.w	lr, [pc, #324]	; 8005c4c <D128_GENERIC+0x3ec>
 8005b0a:	fb25 720e 	smlad	r2, r5, lr, r7
 8005b0e:	f04f 0b01 	mov.w	fp, #1
 8005b12:	9203      	str	r2, [sp, #12]
 8005b14:	fb2c fb0b 	smuad	fp, ip, fp
 8005b18:	4f44      	ldr	r7, [pc, #272]	; (8005c2c <D128_GENERIC+0x3cc>)
 8005b1a:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005b1e:	4f44      	ldr	r7, [pc, #272]	; (8005c30 <D128_GENERIC+0x3d0>)
 8005b20:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005b24:	4f43      	ldr	r7, [pc, #268]	; (8005c34 <D128_GENERIC+0x3d4>)
 8005b26:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005b2a:	4f43      	ldr	r7, [pc, #268]	; (8005c38 <D128_GENERIC+0x3d8>)
 8005b2c:	fb28 a707 	smlad	r7, r8, r7, sl
 8005b30:	4a42      	ldr	r2, [pc, #264]	; (8005c3c <D128_GENERIC+0x3dc>)
 8005b32:	fb20 7702 	smlad	r7, r0, r2, r7
 8005b36:	4a42      	ldr	r2, [pc, #264]	; (8005c40 <D128_GENERIC+0x3e0>)
 8005b38:	fb23 7702 	smlad	r7, r3, r2, r7
 8005b3c:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <D128_GENERIC+0x3e4>)
 8005b3e:	fb25 7303 	smlad	r3, r5, r3, r7
 8005b42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8005b4a:	b185      	cbz	r5, 8005b6e <D128_GENERIC+0x30e>
 8005b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b50:	960d      	str	r6, [sp, #52]	; 0x34
 8005b52:	4432      	add	r2, r6
 8005b54:	1a52      	subs	r2, r2, r1
 8005b56:	17d1      	asrs	r1, r2, #31
 8005b58:	fba2 2305 	umull	r2, r3, r2, r5
 8005b5c:	fb05 3301 	mla	r3, r5, r1, r3
 8005b60:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005b64:	f143 0300 	adc.w	r3, r3, #0
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b6c:	461e      	mov	r6, r3
 8005b6e:	9801      	ldr	r0, [sp, #4]
 8005b70:	9c06      	ldr	r4, [sp, #24]
 8005b72:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8005b74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005b76:	01f6      	lsls	r6, r6, #7
 8005b78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	fbc5 2306 	smlal	r2, r3, r5, r6
 8005b82:	fb04 f101 	mul.w	r1, r4, r1
 8005b86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b88:	109b      	asrs	r3, r3, #2
 8005b8a:	f303 030f 	ssat	r3, #16, r3
 8005b8e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8005b92:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005b94:	1c62      	adds	r2, r4, #1
 8005b96:	4293      	cmp	r3, r2
 8005b98:	9206      	str	r2, [sp, #24]
 8005b9a:	dd18      	ble.n	8005bce <D128_GENERIC+0x36e>
 8005b9c:	9b01      	ldr	r3, [sp, #4]
 8005b9e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005ba0:	2a01      	cmp	r2, #1
 8005ba2:	f47f ae80 	bne.w	80058a6 <D128_GENERIC+0x46>
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	9d05      	ldr	r5, [sp, #20]
 8005baa:	069b      	lsls	r3, r3, #26
 8005bac:	6829      	ldr	r1, [r5, #0]
 8005bae:	686a      	ldr	r2, [r5, #4]
 8005bb0:	68a8      	ldr	r0, [r5, #8]
 8005bb2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8005bb6:	f105 0410 	add.w	r4, r5, #16
 8005bba:	d506      	bpl.n	8005bca <D128_GENERIC+0x36a>
 8005bbc:	ba49      	rev16	r1, r1
 8005bbe:	ba52      	rev16	r2, r2
 8005bc0:	ba40      	rev16	r0, r0
 8005bc2:	fa9a fa9a 	rev16.w	sl, sl
 8005bc6:	9405      	str	r4, [sp, #20]
 8005bc8:	e6cf      	b.n	800596a <D128_GENERIC+0x10a>
 8005bca:	9405      	str	r4, [sp, #20]
 8005bcc:	e6cd      	b.n	800596a <D128_GENERIC+0x10a>
 8005bce:	9a01      	ldr	r2, [sp, #4]
 8005bd0:	9904      	ldr	r1, [sp, #16]
 8005bd2:	6091      	str	r1, [r2, #8]
 8005bd4:	9903      	ldr	r1, [sp, #12]
 8005bd6:	60d1      	str	r1, [r2, #12]
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	61d3      	str	r3, [r2, #28]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4613      	mov	r3, r2
 8005be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005be2:	610a      	str	r2, [r1, #16]
 8005be4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005be6:	6159      	str	r1, [r3, #20]
 8005be8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005bea:	6199      	str	r1, [r3, #24]
 8005bec:	2000      	movs	r0, #0
 8005bee:	b013      	add	sp, #76	; 0x4c
 8005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	00780069 	.word	0x00780069
 8005bf8:	005b004e 	.word	0x005b004e
 8005bfc:	00420037 	.word	0x00420037
 8005c00:	002d0024 	.word	0x002d0024
 8005c04:	001c0015 	.word	0x001c0015
 8005c08:	000f000a 	.word	0x000f000a
 8005c0c:	00060003 	.word	0x00060003
 8005c10:	00880096 	.word	0x00880096
 8005c14:	00a200ac 	.word	0x00a200ac
 8005c18:	00b400ba 	.word	0x00b400ba
 8005c1c:	00be00c0 	.word	0x00be00c0
 8005c20:	00c000be 	.word	0x00c000be
 8005c24:	00ba00b4 	.word	0x00ba00b4
 8005c28:	00ac00a2 	.word	0x00ac00a2
 8005c2c:	00030006 	.word	0x00030006
 8005c30:	000a000f 	.word	0x000a000f
 8005c34:	0015001c 	.word	0x0015001c
 8005c38:	0024002d 	.word	0x0024002d
 8005c3c:	00370042 	.word	0x00370042
 8005c40:	004e005b 	.word	0x004e005b
 8005c44:	00690078 	.word	0x00690078
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	00960088 	.word	0x00960088

08005c50 <D16_1CH_HTONS_VOL_HP>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	4691      	mov	r9, r2
 8005c56:	b083      	sub	sp, #12
 8005c58:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005c5a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8005c5e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	4680      	mov	r8, r0
 8005c66:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8005c6a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8005c6e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c72:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005c76:	9401      	str	r4, [sp, #4]
 8005c78:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8005c7c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8005c80:	2a00      	cmp	r2, #0
 8005c82:	d04e      	beq.n	8005d22 <D16_1CH_HTONS_VOL_HP+0xd2>
 8005c84:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8005d30 <D16_1CH_HTONS_VOL_HP+0xe0>
 8005c88:	1e8c      	subs	r4, r1, #2
 8005c8a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8005c8e:	f858 2b02 	ldr.w	r2, [r8], #2
 8005c92:	ba52      	rev16	r2, r2
 8005c94:	b2d6      	uxtb	r6, r2
 8005c96:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005c9a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8005c9e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8005ca8:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8005cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005cb4:	0a93      	lsrs	r3, r2, #10
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8005cb8:	fb21 5202 	smlad	r2, r1, r2, r5
 8005cbc:	4d1b      	ldr	r5, [pc, #108]	; (8005d2c <D16_1CH_HTONS_VOL_HP+0xdc>)
 8005cbe:	fb21 f505 	smuad	r5, r1, r5
 8005cc2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005cc6:	4410      	add	r0, r2
 8005cc8:	1bc0      	subs	r0, r0, r7
 8005cca:	17c7      	asrs	r7, r0, #31
 8005ccc:	fba0 010e 	umull	r0, r1, r0, lr
 8005cd0:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005cd4:	fb0e 1107 	mla	r1, lr, r7, r1
 8005cd8:	f141 0100 	adc.w	r1, r1, #0
 8005cdc:	0448      	lsls	r0, r1, #17
 8005cde:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005ce2:	2700      	movs	r7, #0
 8005ce4:	fbc0 670a 	smlal	r6, r7, r0, sl
 8005ce8:	45d8      	cmp	r8, fp
 8005cea:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8005cee:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8005cf2:	4617      	mov	r7, r2
 8005cf4:	f301 010f 	ssat	r1, #16, r1
 8005cf8:	f824 1f02 	strh.w	r1, [r4, #2]!
 8005cfc:	d1c7      	bne.n	8005c8e <D16_1CH_HTONS_VOL_HP+0x3e>
 8005cfe:	9901      	ldr	r1, [sp, #4]
 8005d00:	f8c9 301c 	str.w	r3, [r9, #28]
 8005d04:	9b00      	ldr	r3, [sp, #0]
 8005d06:	f8c9 0010 	str.w	r0, [r9, #16]
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f8c9 5008 	str.w	r5, [r9, #8]
 8005d10:	f8c9 100c 	str.w	r1, [r9, #12]
 8005d14:	f8c9 2014 	str.w	r2, [r9, #20]
 8005d18:	f8c9 3018 	str.w	r3, [r9, #24]
 8005d1c:	b003      	add	sp, #12
 8005d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d22:	463a      	mov	r2, r7
 8005d24:	4621      	mov	r1, r4
 8005d26:	e7eb      	b.n	8005d00 <D16_1CH_HTONS_VOL_HP+0xb0>
 8005d28:	00030001 	.word	0x00030001
 8005d2c:	00010003 	.word	0x00010003
 8005d30:	20000000 	.word	0x20000000

08005d34 <D24_1CH_HTONS_VOL_HP>:
 8005d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	b089      	sub	sp, #36	; 0x24
 8005d3a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005d3c:	6996      	ldr	r6, [r2, #24]
 8005d3e:	9304      	str	r3, [sp, #16]
 8005d40:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005d42:	9207      	str	r2, [sp, #28]
 8005d44:	6915      	ldr	r5, [r2, #16]
 8005d46:	6954      	ldr	r4, [r2, #20]
 8005d48:	9606      	str	r6, [sp, #24]
 8005d4a:	6893      	ldr	r3, [r2, #8]
 8005d4c:	69d6      	ldr	r6, [r2, #28]
 8005d4e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8005d52:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8005d56:	9a04      	ldr	r2, [sp, #16]
 8005d58:	9705      	str	r7, [sp, #20]
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	d07e      	beq.n	8005e5c <D24_1CH_HTONS_VOL_HP+0x128>
 8005d5e:	f1a1 0b02 	sub.w	fp, r1, #2
 8005d62:	2700      	movs	r7, #0
 8005d64:	46a8      	mov	r8, r5
 8005d66:	f8cd b004 	str.w	fp, [sp, #4]
 8005d6a:	4655      	mov	r5, sl
 8005d6c:	46e3      	mov	fp, ip
 8005d6e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8005e68 <D24_1CH_HTONS_VOL_HP+0x134>
 8005d72:	46ba      	mov	sl, r7
 8005d74:	469c      	mov	ip, r3
 8005d76:	e055      	b.n	8005e24 <D24_1CH_HTONS_VOL_HP+0xf0>
 8005d78:	7802      	ldrb	r2, [r0, #0]
 8005d7a:	78c3      	ldrb	r3, [r0, #3]
 8005d7c:	7841      	ldrb	r1, [r0, #1]
 8005d7e:	0212      	lsls	r2, r2, #8
 8005d80:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005d84:	440b      	add	r3, r1
 8005d86:	3002      	adds	r0, #2
 8005d88:	b2d9      	uxtb	r1, r3
 8005d8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005d8e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8005d92:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005d9c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005da0:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8005da4:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8005da8:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005dac:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005db0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005db4:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8005db6:	fb23 b102 	smlad	r1, r3, r2, fp
 8005dba:	4a2a      	ldr	r2, [pc, #168]	; (8005e64 <D24_1CH_HTONS_VOL_HP+0x130>)
 8005dbc:	fb23 cb02 	smlad	fp, r3, r2, ip
 8005dc0:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8005dc4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005dc8:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8005dcc:	2201      	movs	r2, #1
 8005dce:	fb23 f702 	smuad	r7, r3, r2
 8005dd2:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8005dd6:	eb01 0208 	add.w	r2, r1, r8
 8005dda:	1b12      	subs	r2, r2, r4
 8005ddc:	17d4      	asrs	r4, r2, #31
 8005dde:	fba2 2305 	umull	r2, r3, r2, r5
 8005de2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005de6:	fb05 3304 	mla	r3, r5, r4, r3
 8005dea:	f143 0300 	adc.w	r3, r3, #0
 8005dee:	9c05      	ldr	r4, [sp, #20]
 8005df0:	03da      	lsls	r2, r3, #15
 8005df2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005df6:	f04f 0900 	mov.w	r9, #0
 8005dfa:	fbc4 8902 	smlal	r8, r9, r4, r2
 8005dfe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005e02:	9a01      	ldr	r2, [sp, #4]
 8005e04:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	109b      	asrs	r3, r3, #2
 8005e0c:	f303 030f 	ssat	r3, #16, r3
 8005e10:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	9201      	str	r2, [sp, #4]
 8005e18:	f10a 0a01 	add.w	sl, sl, #1
 8005e1c:	459a      	cmp	sl, r3
 8005e1e:	44bc      	add	ip, r7
 8005e20:	460c      	mov	r4, r1
 8005e22:	d00b      	beq.n	8005e3c <D24_1CH_HTONS_VOL_HP+0x108>
 8005e24:	f01a 0f01 	tst.w	sl, #1
 8005e28:	d0a6      	beq.n	8005d78 <D24_1CH_HTONS_VOL_HP+0x44>
 8005e2a:	78c2      	ldrb	r2, [r0, #3]
 8005e2c:	7883      	ldrb	r3, [r0, #2]
 8005e2e:	f810 1b04 	ldrb.w	r1, [r0], #4
 8005e32:	0212      	lsls	r2, r2, #8
 8005e34:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005e38:	440b      	add	r3, r1
 8005e3a:	e7a5      	b.n	8005d88 <D24_1CH_HTONS_VOL_HP+0x54>
 8005e3c:	4663      	mov	r3, ip
 8005e3e:	4645      	mov	r5, r8
 8005e40:	46dc      	mov	ip, fp
 8005e42:	9807      	ldr	r0, [sp, #28]
 8005e44:	6141      	str	r1, [r0, #20]
 8005e46:	9906      	ldr	r1, [sp, #24]
 8005e48:	6083      	str	r3, [r0, #8]
 8005e4a:	f8c0 c00c 	str.w	ip, [r0, #12]
 8005e4e:	61c6      	str	r6, [r0, #28]
 8005e50:	6105      	str	r5, [r0, #16]
 8005e52:	6181      	str	r1, [r0, #24]
 8005e54:	2000      	movs	r0, #0
 8005e56:	b009      	add	sp, #36	; 0x24
 8005e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	e7f0      	b.n	8005e42 <D24_1CH_HTONS_VOL_HP+0x10e>
 8005e60:	00030001 	.word	0x00030001
 8005e64:	00060007 	.word	0x00060007
 8005e68:	20000000 	.word	0x20000000

08005e6c <D32_1CH_HTONS_VOL_HP>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	4692      	mov	sl, r2
 8005e72:	b087      	sub	sp, #28
 8005e74:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005e76:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005e7a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8005e7e:	9304      	str	r3, [sp, #16]
 8005e80:	f8da 4010 	ldr.w	r4, [sl, #16]
 8005e84:	f8da 8014 	ldr.w	r8, [sl, #20]
 8005e88:	f8da 601c 	ldr.w	r6, [sl, #28]
 8005e8c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005e90:	f8da e00c 	ldr.w	lr, [sl, #12]
 8005e94:	9501      	str	r5, [sp, #4]
 8005e96:	f8da c020 	ldr.w	ip, [sl, #32]
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	d07b      	beq.n	8005f96 <D32_1CH_HTONS_VOL_HP+0x12a>
 8005e9e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005ea2:	4f3e      	ldr	r7, [pc, #248]	; (8005f9c <D32_1CH_HTONS_VOL_HP+0x130>)
 8005ea4:	f8cd c00c 	str.w	ip, [sp, #12]
 8005ea8:	9202      	str	r2, [sp, #8]
 8005eaa:	460d      	mov	r5, r1
 8005eac:	46a1      	mov	r9, r4
 8005eae:	4684      	mov	ip, r0
 8005eb0:	f8cd a014 	str.w	sl, [sp, #20]
 8005eb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005eb8:	ba49      	rev16	r1, r1
 8005eba:	b2c8      	uxtb	r0, r1
 8005ebc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005ec0:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8005ec4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005ec8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005ecc:	0e09      	lsrs	r1, r1, #24
 8005ece:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005ed2:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8005ed6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005eda:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8005ede:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8005ee2:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8005ee6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005eea:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8005eee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005ef2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005ef6:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005efa:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8005efe:	4a28      	ldr	r2, [pc, #160]	; (8005fa0 <D32_1CH_HTONS_VOL_HP+0x134>)
 8005f00:	fb20 e202 	smlad	r2, r0, r2, lr
 8005f04:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005f08:	fb2a 2101 	smlad	r1, sl, r1, r2
 8005f0c:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <D32_1CH_HTONS_VOL_HP+0x138>)
 8005f0e:	fb20 3302 	smlad	r3, r0, r2, r3
 8005f12:	4a25      	ldr	r2, [pc, #148]	; (8005fa8 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8005f14:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8005f18:	2301      	movs	r3, #1
 8005f1a:	fb20 f003 	smuad	r0, r0, r3
 8005f1e:	4b23      	ldr	r3, [pc, #140]	; (8005fac <D32_1CH_HTONS_VOL_HP+0x140>)
 8005f20:	fb2a 0303 	smlad	r3, sl, r3, r0
 8005f24:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8005f28:	9c03      	ldr	r4, [sp, #12]
 8005f2a:	eb02 0009 	add.w	r0, r2, r9
 8005f2e:	eba0 0008 	sub.w	r0, r0, r8
 8005f32:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8005f36:	fba0 0104 	umull	r0, r1, r0, r4
 8005f3a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005f3e:	fb04 110b 	mla	r1, r4, fp, r1
 8005f42:	f141 0100 	adc.w	r1, r1, #0
 8005f46:	9c01      	ldr	r4, [sp, #4]
 8005f48:	0388      	lsls	r0, r1, #14
 8005f4a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005f4e:	f04f 0900 	mov.w	r9, #0
 8005f52:	fbc0 8904 	smlal	r8, r9, r0, r4
 8005f56:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8005f5a:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8005f5e:	f300 000f 	ssat	r0, #16, r0
 8005f62:	9902      	ldr	r1, [sp, #8]
 8005f64:	f825 0b02 	strh.w	r0, [r5], #2
 8005f68:	428d      	cmp	r5, r1
 8005f6a:	4690      	mov	r8, r2
 8005f6c:	d1a2      	bne.n	8005eb4 <D32_1CH_HTONS_VOL_HP+0x48>
 8005f6e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005f72:	464c      	mov	r4, r9
 8005f74:	f8ca 3008 	str.w	r3, [sl, #8]
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	f8ca e00c 	str.w	lr, [sl, #12]
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f8ca 601c 	str.w	r6, [sl, #28]
 8005f84:	f8ca 4010 	str.w	r4, [sl, #16]
 8005f88:	f8ca 2014 	str.w	r2, [sl, #20]
 8005f8c:	f8ca 3018 	str.w	r3, [sl, #24]
 8005f90:	b007      	add	sp, #28
 8005f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f96:	4642      	mov	r2, r8
 8005f98:	e7ec      	b.n	8005f74 <D32_1CH_HTONS_VOL_HP+0x108>
 8005f9a:	bf00      	nop
 8005f9c:	20000000 	.word	0x20000000
 8005fa0:	00060003 	.word	0x00060003
 8005fa4:	000a000c 	.word	0x000a000c
 8005fa8:	000c000a 	.word	0x000c000a
 8005fac:	00030006 	.word	0x00030006

08005fb0 <D48_1CH_HTONS_VOL_HP>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	461c      	mov	r4, r3
 8005fb8:	b087      	sub	sp, #28
 8005fba:	4625      	mov	r5, r4
 8005fbc:	4626      	mov	r6, r4
 8005fbe:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8005fc0:	9205      	str	r2, [sp, #20]
 8005fc2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005fc4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005fc8:	9501      	str	r5, [sp, #4]
 8005fca:	4680      	mov	r8, r0
 8005fcc:	6a35      	ldr	r5, [r6, #32]
 8005fce:	6918      	ldr	r0, [r3, #16]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	9304      	str	r3, [sp, #16]
 8005fd4:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8005fd8:	68a3      	ldr	r3, [r4, #8]
 8005fda:	9502      	str	r5, [sp, #8]
 8005fdc:	68e4      	ldr	r4, [r4, #12]
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	f000 808c 	beq.w	80060fc <D48_1CH_HTONS_VOL_HP+0x14c>
 8005fe4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005fe8:	4d45      	ldr	r5, [pc, #276]	; (8006100 <D48_1CH_HTONS_VOL_HP+0x150>)
 8005fea:	9203      	str	r2, [sp, #12]
 8005fec:	468c      	mov	ip, r1
 8005fee:	e898 0044 	ldmia.w	r8, {r2, r6}
 8005ff2:	f108 0806 	add.w	r8, r8, #6
 8005ff6:	ba52      	rev16	r2, r2
 8005ff8:	ba76      	rev16	r6, r6
 8005ffa:	b2d7      	uxtb	r7, r2
 8005ffc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006000:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8006004:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8006008:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800600c:	0e12      	lsrs	r2, r2, #24
 800600e:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8006012:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8006016:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800601a:	fa5f fb86 	uxtb.w	fp, r6
 800601e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8006022:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8006026:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800602a:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800602e:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8006032:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006036:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800603a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800603e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006042:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006046:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800604a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800604e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006052:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006056:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800605a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800605e:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8006062:	4a28      	ldr	r2, [pc, #160]	; (8006104 <D48_1CH_HTONS_VOL_HP+0x154>)
 8006064:	fb2a 4202 	smlad	r2, sl, r2, r4
 8006068:	4927      	ldr	r1, [pc, #156]	; (8006108 <D48_1CH_HTONS_VOL_HP+0x158>)
 800606a:	fb27 2201 	smlad	r2, r7, r1, r2
 800606e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006072:	fb26 2201 	smlad	r2, r6, r1, r2
 8006076:	4925      	ldr	r1, [pc, #148]	; (800610c <D48_1CH_HTONS_VOL_HP+0x15c>)
 8006078:	fb2a 3401 	smlad	r4, sl, r1, r3
 800607c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8006080:	fb27 4403 	smlad	r4, r7, r3, r4
 8006084:	4b22      	ldr	r3, [pc, #136]	; (8006110 <D48_1CH_HTONS_VOL_HP+0x160>)
 8006086:	fb26 4403 	smlad	r4, r6, r3, r4
 800608a:	2101      	movs	r1, #1
 800608c:	fb2a fa01 	smuad	sl, sl, r1
 8006090:	4b20      	ldr	r3, [pc, #128]	; (8006114 <D48_1CH_HTONS_VOL_HP+0x164>)
 8006092:	fb27 a703 	smlad	r7, r7, r3, sl
 8006096:	4b20      	ldr	r3, [pc, #128]	; (8006118 <D48_1CH_HTONS_VOL_HP+0x168>)
 8006098:	fb26 7303 	smlad	r3, r6, r3, r7
 800609c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 80060a0:	9e02      	ldr	r6, [sp, #8]
 80060a2:	9f01      	ldr	r7, [sp, #4]
 80060a4:	4410      	add	r0, r2
 80060a6:	eba0 0009 	sub.w	r0, r0, r9
 80060aa:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80060ae:	fba0 0106 	umull	r0, r1, r0, r6
 80060b2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80060b6:	fb06 110a 	mla	r1, r6, sl, r1
 80060ba:	f141 0100 	adc.w	r1, r1, #0
 80060be:	0308      	lsls	r0, r1, #12
 80060c0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80060c4:	f04f 0a00 	mov.w	sl, #0
 80060c8:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80060cc:	4657      	mov	r7, sl
 80060ce:	10b8      	asrs	r0, r7, #2
 80060d0:	f300 000f 	ssat	r0, #16, r0
 80060d4:	f82c 0b02 	strh.w	r0, [ip], #2
 80060d8:	0048      	lsls	r0, r1, #1
 80060da:	9903      	ldr	r1, [sp, #12]
 80060dc:	458c      	cmp	ip, r1
 80060de:	4691      	mov	r9, r2
 80060e0:	d185      	bne.n	8005fee <D48_1CH_HTONS_VOL_HP+0x3e>
 80060e2:	9d05      	ldr	r5, [sp, #20]
 80060e4:	616a      	str	r2, [r5, #20]
 80060e6:	9a04      	ldr	r2, [sp, #16]
 80060e8:	6128      	str	r0, [r5, #16]
 80060ea:	2000      	movs	r0, #0
 80060ec:	60ab      	str	r3, [r5, #8]
 80060ee:	60ec      	str	r4, [r5, #12]
 80060f0:	f8c5 e01c 	str.w	lr, [r5, #28]
 80060f4:	61aa      	str	r2, [r5, #24]
 80060f6:	b007      	add	sp, #28
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	464a      	mov	r2, r9
 80060fe:	e7f0      	b.n	80060e2 <D48_1CH_HTONS_VOL_HP+0x132>
 8006100:	20000000 	.word	0x20000000
 8006104:	000f000a 	.word	0x000f000a
 8006108:	00060003 	.word	0x00060003
 800610c:	00150019 	.word	0x00150019
 8006110:	00190015 	.word	0x00190015
 8006114:	00030006 	.word	0x00030006
 8006118:	000a000f 	.word	0x000a000f

0800611c <D64_1CH_HTONS_VOL_HP>:
 800611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	b089      	sub	sp, #36	; 0x24
 8006122:	4614      	mov	r4, r2
 8006124:	9207      	str	r2, [sp, #28]
 8006126:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006128:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800612c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8006130:	6992      	ldr	r2, [r2, #24]
 8006132:	9206      	str	r2, [sp, #24]
 8006134:	68e2      	ldr	r2, [r4, #12]
 8006136:	9201      	str	r2, [sp, #4]
 8006138:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800613a:	9203      	str	r2, [sp, #12]
 800613c:	6a22      	ldr	r2, [r4, #32]
 800613e:	69e5      	ldr	r5, [r4, #28]
 8006140:	68a6      	ldr	r6, [r4, #8]
 8006142:	9204      	str	r2, [sp, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80b0 	beq.w	80062aa <D64_1CH_HTONS_VOL_HP+0x18e>
 800614a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800614e:	4f58      	ldr	r7, [pc, #352]	; (80062b0 <D64_1CH_HTONS_VOL_HP+0x194>)
 8006150:	9305      	str	r3, [sp, #20]
 8006152:	9102      	str	r1, [sp, #8]
 8006154:	f850 2b08 	ldr.w	r2, [r0], #8
 8006158:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800615c:	ba52      	rev16	r2, r2
 800615e:	fa93 f993 	rev16.w	r9, r3
 8006162:	b2d4      	uxtb	r4, r2
 8006164:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006168:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800616c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006170:	9901      	ldr	r1, [sp, #4]
 8006172:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006176:	0e12      	lsrs	r2, r2, #24
 8006178:	44ab      	add	fp, r5
 800617a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800617e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8006182:	fa5f f289 	uxtb.w	r2, r9
 8006186:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800618a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800618e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8006192:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006196:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800619a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800619e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 80061a2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80061a6:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80061aa:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80061ae:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80061b2:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80061b6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80061ba:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80061be:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80061c2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80061c6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80061ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80061d2:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80061d6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80061da:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80061de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80061e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80061e6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80061ea:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80061ee:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80061f2:	4b30      	ldr	r3, [pc, #192]	; (80062b4 <D64_1CH_HTONS_VOL_HP+0x198>)
 80061f4:	fb2b 1303 	smlad	r3, fp, r3, r1
 80061f8:	492f      	ldr	r1, [pc, #188]	; (80062b8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80061fa:	fb24 3301 	smlad	r3, r4, r1, r3
 80061fe:	492f      	ldr	r1, [pc, #188]	; (80062bc <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8006200:	fb22 3301 	smlad	r3, r2, r1, r3
 8006204:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8006208:	fb2e 390a 	smlad	r9, lr, sl, r3
 800620c:	4b2c      	ldr	r3, [pc, #176]	; (80062c0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800620e:	fb2b 6603 	smlad	r6, fp, r3, r6
 8006212:	fb2e 6613 	smladx	r6, lr, r3, r6
 8006216:	4b2b      	ldr	r3, [pc, #172]	; (80062c4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8006218:	fb24 6603 	smlad	r6, r4, r3, r6
 800621c:	fb22 6313 	smladx	r3, r2, r3, r6
 8006220:	f04f 0a01 	mov.w	sl, #1
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	fb2b fb0a 	smuad	fp, fp, sl
 800622a:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800622c:	fb24 ba03 	smlad	sl, r4, r3, fp
 8006230:	4b26      	ldr	r3, [pc, #152]	; (80062cc <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8006232:	fb22 a203 	smlad	r2, r2, r3, sl
 8006236:	4b26      	ldr	r3, [pc, #152]	; (80062d0 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8006238:	fb2e 2603 	smlad	r6, lr, r3, r2
 800623c:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8006240:	eb0a 020c 	add.w	r2, sl, ip
 8006244:	9c04      	ldr	r4, [sp, #16]
 8006246:	9903      	ldr	r1, [sp, #12]
 8006248:	eba2 0208 	sub.w	r2, r2, r8
 800624c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8006250:	fba2 2304 	umull	r2, r3, r2, r4
 8006254:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006258:	fb04 3309 	mla	r3, r4, r9, r3
 800625c:	f143 0300 	adc.w	r3, r3, #0
 8006260:	02da      	lsls	r2, r3, #11
 8006262:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006266:	f04f 0900 	mov.w	r9, #0
 800626a:	fbc1 8902 	smlal	r8, r9, r1, r2
 800626e:	9902      	ldr	r1, [sp, #8]
 8006270:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8006274:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006278:	f302 020f 	ssat	r2, #16, r2
 800627c:	9b05      	ldr	r3, [sp, #20]
 800627e:	f821 2b02 	strh.w	r2, [r1], #2
 8006282:	4299      	cmp	r1, r3
 8006284:	9102      	str	r1, [sp, #8]
 8006286:	46d0      	mov	r8, sl
 8006288:	f47f af64 	bne.w	8006154 <D64_1CH_HTONS_VOL_HP+0x38>
 800628c:	9a07      	ldr	r2, [sp, #28]
 800628e:	9901      	ldr	r1, [sp, #4]
 8006290:	60d1      	str	r1, [r2, #12]
 8006292:	9906      	ldr	r1, [sp, #24]
 8006294:	6096      	str	r6, [r2, #8]
 8006296:	2000      	movs	r0, #0
 8006298:	61d5      	str	r5, [r2, #28]
 800629a:	f8c2 c010 	str.w	ip, [r2, #16]
 800629e:	f8c2 a014 	str.w	sl, [r2, #20]
 80062a2:	6191      	str	r1, [r2, #24]
 80062a4:	b009      	add	sp, #36	; 0x24
 80062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062aa:	46c2      	mov	sl, r8
 80062ac:	4622      	mov	r2, r4
 80062ae:	e7ee      	b.n	800628e <D64_1CH_HTONS_VOL_HP+0x172>
 80062b0:	20000000 	.word	0x20000000
 80062b4:	001c0015 	.word	0x001c0015
 80062b8:	000f000a 	.word	0x000f000a
 80062bc:	00060003 	.word	0x00060003
 80062c0:	0024002a 	.word	0x0024002a
 80062c4:	002e0030 	.word	0x002e0030
 80062c8:	00030006 	.word	0x00030006
 80062cc:	000a000f 	.word	0x000a000f
 80062d0:	0015001c 	.word	0x0015001c

080062d4 <D80_1CH_HTONS_VOL_HP>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	4613      	mov	r3, r2
 80062da:	b089      	sub	sp, #36	; 0x24
 80062dc:	4686      	mov	lr, r0
 80062de:	6918      	ldr	r0, [r3, #16]
 80062e0:	9000      	str	r0, [sp, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	461c      	mov	r4, r3
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	9302      	str	r3, [sp, #8]
 80062ea:	6983      	ldr	r3, [r0, #24]
 80062ec:	9306      	str	r3, [sp, #24]
 80062ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80062f2:	69c3      	ldr	r3, [r0, #28]
 80062f4:	68c0      	ldr	r0, [r0, #12]
 80062f6:	9207      	str	r2, [sp, #28]
 80062f8:	9001      	str	r0, [sp, #4]
 80062fa:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80062fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80062fe:	9003      	str	r0, [sp, #12]
 8006300:	6a20      	ldr	r0, [r4, #32]
 8006302:	9004      	str	r0, [sp, #16]
 8006304:	2a00      	cmp	r2, #0
 8006306:	f000 80d2 	beq.w	80064ae <D80_1CH_HTONS_VOL_HP+0x1da>
 800630a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800630e:	4869      	ldr	r0, [pc, #420]	; (80064b4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8006310:	9205      	str	r2, [sp, #20]
 8006312:	461c      	mov	r4, r3
 8006314:	f8de 5000 	ldr.w	r5, [lr]
 8006318:	f8de 2004 	ldr.w	r2, [lr, #4]
 800631c:	f8de 3008 	ldr.w	r3, [lr, #8]
 8006320:	f10e 0e0a 	add.w	lr, lr, #10
 8006324:	ba6d      	rev16	r5, r5
 8006326:	ba52      	rev16	r2, r2
 8006328:	fa93 fb93 	rev16.w	fp, r3
 800632c:	b2ee      	uxtb	r6, r5
 800632e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8006332:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8006336:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800633a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800633e:	eb04 0a07 	add.w	sl, r4, r7
 8006342:	0e2d      	lsrs	r5, r5, #24
 8006344:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8006348:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800634c:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8006350:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8006354:	b2d5      	uxtb	r5, r2
 8006356:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800635a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800635e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8006362:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006366:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800636a:	0e12      	lsrs	r2, r2, #24
 800636c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8006370:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8006374:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006378:	fa5f f48b 	uxtb.w	r4, fp
 800637c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8006380:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8006384:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8006388:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800638c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8006390:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006394:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8006398:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800639c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80063a0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80063a4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80063a8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80063ac:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80063b0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80063b4:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80063b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063bc:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80063c0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80063c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80063c8:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80063cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80063d0:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80063d4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80063d8:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80063dc:	4d36      	ldr	r5, [pc, #216]	; (80064b8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80063de:	9f01      	ldr	r7, [sp, #4]
 80063e0:	fb23 7505 	smlad	r5, r3, r5, r7
 80063e4:	4f35      	ldr	r7, [pc, #212]	; (80064bc <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80063e6:	fb29 5507 	smlad	r5, r9, r7, r5
 80063ea:	4f35      	ldr	r7, [pc, #212]	; (80064c0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80063ec:	fb28 5507 	smlad	r5, r8, r7, r5
 80063f0:	4f34      	ldr	r7, [pc, #208]	; (80064c4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80063f2:	fb22 5507 	smlad	r5, r2, r7, r5
 80063f6:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80063fa:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80063fe:	4d32      	ldr	r5, [pc, #200]	; (80064c8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8006400:	fb23 cc05 	smlad	ip, r3, r5, ip
 8006404:	4d31      	ldr	r5, [pc, #196]	; (80064cc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8006406:	fb29 cc05 	smlad	ip, r9, r5, ip
 800640a:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800640e:	fb28 c505 	smlad	r5, r8, r5, ip
 8006412:	4f2f      	ldr	r7, [pc, #188]	; (80064d0 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8006414:	fb22 5507 	smlad	r5, r2, r7, r5
 8006418:	4f2e      	ldr	r7, [pc, #184]	; (80064d4 <D80_1CH_HTONS_VOL_HP+0x200>)
 800641a:	fb26 5507 	smlad	r5, r6, r7, r5
 800641e:	f04f 0a01 	mov.w	sl, #1
 8006422:	9501      	str	r5, [sp, #4]
 8006424:	fb23 fa0a 	smuad	sl, r3, sl
 8006428:	4b2b      	ldr	r3, [pc, #172]	; (80064d8 <D80_1CH_HTONS_VOL_HP+0x204>)
 800642a:	fb29 a903 	smlad	r9, r9, r3, sl
 800642e:	4d2b      	ldr	r5, [pc, #172]	; (80064dc <D80_1CH_HTONS_VOL_HP+0x208>)
 8006430:	fb28 9805 	smlad	r8, r8, r5, r9
 8006434:	4d2a      	ldr	r5, [pc, #168]	; (80064e0 <D80_1CH_HTONS_VOL_HP+0x20c>)
 8006436:	fb22 8205 	smlad	r2, r2, r5, r8
 800643a:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <D80_1CH_HTONS_VOL_HP+0x210>)
 800643c:	fb26 2c03 	smlad	ip, r6, r3, r2
 8006440:	9b00      	ldr	r3, [sp, #0]
 8006442:	9d04      	ldr	r5, [sp, #16]
 8006444:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8006448:	4453      	add	r3, sl
 800644a:	461a      	mov	r2, r3
 800644c:	9b02      	ldr	r3, [sp, #8]
 800644e:	f8cd a008 	str.w	sl, [sp, #8]
 8006452:	1ad2      	subs	r2, r2, r3
 8006454:	17d7      	asrs	r7, r2, #31
 8006456:	fba2 2305 	umull	r2, r3, r2, r5
 800645a:	fb05 3307 	mla	r3, r5, r7, r3
 800645e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006462:	f143 0300 	adc.w	r3, r3, #0
 8006466:	9d03      	ldr	r5, [sp, #12]
 8006468:	029a      	lsls	r2, r3, #10
 800646a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800646e:	2700      	movs	r7, #0
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	fbc5 6702 	smlal	r6, r7, r5, r2
 8006476:	10ba      	asrs	r2, r7, #2
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	f302 020f 	ssat	r2, #16, r2
 800647e:	9b05      	ldr	r3, [sp, #20]
 8006480:	f821 2b02 	strh.w	r2, [r1], #2
 8006484:	4299      	cmp	r1, r3
 8006486:	f47f af45 	bne.w	8006314 <D80_1CH_HTONS_VOL_HP+0x40>
 800648a:	4623      	mov	r3, r4
 800648c:	9907      	ldr	r1, [sp, #28]
 800648e:	9801      	ldr	r0, [sp, #4]
 8006490:	60c8      	str	r0, [r1, #12]
 8006492:	9a00      	ldr	r2, [sp, #0]
 8006494:	f8c1 c008 	str.w	ip, [r1, #8]
 8006498:	4608      	mov	r0, r1
 800649a:	61cb      	str	r3, [r1, #28]
 800649c:	610a      	str	r2, [r1, #16]
 800649e:	f8c1 a014 	str.w	sl, [r1, #20]
 80064a2:	9906      	ldr	r1, [sp, #24]
 80064a4:	6181      	str	r1, [r0, #24]
 80064a6:	2000      	movs	r0, #0
 80064a8:	b009      	add	sp, #36	; 0x24
 80064aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ae:	f8dd a008 	ldr.w	sl, [sp, #8]
 80064b2:	e7eb      	b.n	800648c <D80_1CH_HTONS_VOL_HP+0x1b8>
 80064b4:	20000000 	.word	0x20000000
 80064b8:	002d0024 	.word	0x002d0024
 80064bc:	001c0015 	.word	0x001c0015
 80064c0:	000f000a 	.word	0x000f000a
 80064c4:	00060003 	.word	0x00060003
 80064c8:	0037003f 	.word	0x0037003f
 80064cc:	00450049 	.word	0x00450049
 80064d0:	00490045 	.word	0x00490045
 80064d4:	003f0037 	.word	0x003f0037
 80064d8:	00030006 	.word	0x00030006
 80064dc:	000a000f 	.word	0x000a000f
 80064e0:	0015001c 	.word	0x0015001c
 80064e4:	0024002d 	.word	0x0024002d

080064e8 <D128_1CH_HTONS_VOL_HP>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	b093      	sub	sp, #76	; 0x4c
 80064ee:	4614      	mov	r4, r2
 80064f0:	9211      	str	r2, [sp, #68]	; 0x44
 80064f2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80064f4:	6912      	ldr	r2, [r2, #16]
 80064f6:	9203      	str	r2, [sp, #12]
 80064f8:	4622      	mov	r2, r4
 80064fa:	4615      	mov	r5, r2
 80064fc:	6964      	ldr	r4, [r4, #20]
 80064fe:	9406      	str	r4, [sp, #24]
 8006500:	4614      	mov	r4, r2
 8006502:	6992      	ldr	r2, [r2, #24]
 8006504:	9210      	str	r2, [sp, #64]	; 0x40
 8006506:	68ea      	ldr	r2, [r5, #12]
 8006508:	9204      	str	r2, [sp, #16]
 800650a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800650c:	69e6      	ldr	r6, [r4, #28]
 800650e:	920d      	str	r2, [sp, #52]	; 0x34
 8006510:	68a4      	ldr	r4, [r4, #8]
 8006512:	6a2a      	ldr	r2, [r5, #32]
 8006514:	9405      	str	r4, [sp, #20]
 8006516:	920e      	str	r2, [sp, #56]	; 0x38
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8145 	beq.w	80067a8 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800651e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006522:	930f      	str	r3, [sp, #60]	; 0x3c
 8006524:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8006804 <D128_1CH_HTONS_VOL_HP+0x31c>
 8006528:	9107      	str	r1, [sp, #28]
 800652a:	f100 0310 	add.w	r3, r0, #16
 800652e:	4699      	mov	r9, r3
 8006530:	f1a9 0110 	sub.w	r1, r9, #16
 8006534:	c90e      	ldmia	r1, {r1, r2, r3}
 8006536:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800653a:	ba49      	rev16	r1, r1
 800653c:	ba52      	rev16	r2, r2
 800653e:	ba5b      	rev16	r3, r3
 8006540:	fa90 fa90 	rev16.w	sl, r0
 8006544:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006548:	b2cc      	uxtb	r4, r1
 800654a:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800654e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8006552:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8006556:	0e09      	lsrs	r1, r1, #24
 8006558:	4426      	add	r6, r4
 800655a:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800655e:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8006562:	b2d0      	uxtb	r0, r2
 8006564:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8006568:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800656c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006570:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006574:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8006578:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800657c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006580:	0e12      	lsrs	r2, r2, #24
 8006582:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8006586:	9701      	str	r7, [sp, #4]
 8006588:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800658c:	4627      	mov	r7, r4
 800658e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8006592:	9702      	str	r7, [sp, #8]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800659a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800659e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 80065a2:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80065a6:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80065aa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80065ae:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80065b2:	0e1b      	lsrs	r3, r3, #24
 80065b4:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80065b8:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80065bc:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80065c0:	fa5f f38a 	uxtb.w	r3, sl
 80065c4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80065c8:	960a      	str	r6, [sp, #40]	; 0x28
 80065ca:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80065ce:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80065d2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80065d6:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80065da:	950b      	str	r5, [sp, #44]	; 0x2c
 80065dc:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80065e0:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80065e4:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80065e8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80065ec:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80065f0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80065f4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80065f8:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80065fc:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800660c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006610:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006614:	9b02      	ldr	r3, [sp, #8]
 8006616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800661a:	9302      	str	r3, [sp, #8]
 800661c:	9b08      	ldr	r3, [sp, #32]
 800661e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006622:	9308      	str	r3, [sp, #32]
 8006624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006626:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800662a:	950c      	str	r5, [sp, #48]	; 0x30
 800662c:	461d      	mov	r5, r3
 800662e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006630:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006634:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006638:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800663c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	9202      	str	r2, [sp, #8]
 8006646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006648:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800664a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800664e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006652:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006656:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800665a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800665e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006662:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8006666:	9b08      	ldr	r3, [sp, #32]
 8006668:	9f01      	ldr	r7, [sp, #4]
 800666a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800666e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006672:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006676:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800667a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800667e:	46be      	mov	lr, r7
 8006680:	0a96      	lsrs	r6, r2, #10
 8006682:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8006686:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800668a:	4f49      	ldr	r7, [pc, #292]	; (80067b0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800668c:	9a04      	ldr	r2, [sp, #16]
 800668e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8006692:	4a48      	ldr	r2, [pc, #288]	; (80067b4 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8006694:	fb2a ee02 	smlad	lr, sl, r2, lr
 8006698:	4a47      	ldr	r2, [pc, #284]	; (80067b8 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800669a:	fb21 ee02 	smlad	lr, r1, r2, lr
 800669e:	4a47      	ldr	r2, [pc, #284]	; (80067bc <D128_1CH_HTONS_VOL_HP+0x2d4>)
 80066a0:	fb24 ee02 	smlad	lr, r4, r2, lr
 80066a4:	4a46      	ldr	r2, [pc, #280]	; (80067c0 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80066a6:	9f02      	ldr	r7, [sp, #8]
 80066a8:	fb27 ee02 	smlad	lr, r7, r2, lr
 80066ac:	4a45      	ldr	r2, [pc, #276]	; (80067c4 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80066ae:	fb20 ee02 	smlad	lr, r0, r2, lr
 80066b2:	4a45      	ldr	r2, [pc, #276]	; (80067c8 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80066b4:	fb23 e702 	smlad	r7, r3, r2, lr
 80066b8:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80066bc:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80066c0:	9f01      	ldr	r7, [sp, #4]
 80066c2:	4a42      	ldr	r2, [pc, #264]	; (80067cc <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80066c4:	46bc      	mov	ip, r7
 80066c6:	9f05      	ldr	r7, [sp, #20]
 80066c8:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80066cc:	4a40      	ldr	r2, [pc, #256]	; (80067d0 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80066ce:	fb2a cc02 	smlad	ip, sl, r2, ip
 80066d2:	4f40      	ldr	r7, [pc, #256]	; (80067d4 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80066d4:	fb21 cc07 	smlad	ip, r1, r7, ip
 80066d8:	4f3f      	ldr	r7, [pc, #252]	; (80067d8 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80066da:	fb24 cc07 	smlad	ip, r4, r7, ip
 80066de:	4f3f      	ldr	r7, [pc, #252]	; (80067dc <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80066e0:	9a02      	ldr	r2, [sp, #8]
 80066e2:	fb22 cc07 	smlad	ip, r2, r7, ip
 80066e6:	4f3e      	ldr	r7, [pc, #248]	; (80067e0 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80066e8:	fb20 cc07 	smlad	ip, r0, r7, ip
 80066ec:	4f3d      	ldr	r7, [pc, #244]	; (80067e4 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80066ee:	fb23 c707 	smlad	r7, r3, r7, ip
 80066f2:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006808 <D128_1CH_HTONS_VOL_HP+0x320>
 80066f6:	fb25 720c 	smlad	r2, r5, ip, r7
 80066fa:	f04f 0b01 	mov.w	fp, #1
 80066fe:	9204      	str	r2, [sp, #16]
 8006700:	9f01      	ldr	r7, [sp, #4]
 8006702:	fb27 fb0b 	smuad	fp, r7, fp
 8006706:	4f38      	ldr	r7, [pc, #224]	; (80067e8 <D128_1CH_HTONS_VOL_HP+0x300>)
 8006708:	fb2a ba07 	smlad	sl, sl, r7, fp
 800670c:	4f37      	ldr	r7, [pc, #220]	; (80067ec <D128_1CH_HTONS_VOL_HP+0x304>)
 800670e:	fb21 aa07 	smlad	sl, r1, r7, sl
 8006712:	4f37      	ldr	r7, [pc, #220]	; (80067f0 <D128_1CH_HTONS_VOL_HP+0x308>)
 8006714:	fb24 aa07 	smlad	sl, r4, r7, sl
 8006718:	4f36      	ldr	r7, [pc, #216]	; (80067f4 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800671a:	9a02      	ldr	r2, [sp, #8]
 800671c:	fb22 a707 	smlad	r7, r2, r7, sl
 8006720:	4a35      	ldr	r2, [pc, #212]	; (80067f8 <D128_1CH_HTONS_VOL_HP+0x310>)
 8006722:	fb20 7702 	smlad	r7, r0, r2, r7
 8006726:	4a35      	ldr	r2, [pc, #212]	; (80067fc <D128_1CH_HTONS_VOL_HP+0x314>)
 8006728:	fb23 7702 	smlad	r7, r3, r2, r7
 800672c:	4b34      	ldr	r3, [pc, #208]	; (8006800 <D128_1CH_HTONS_VOL_HP+0x318>)
 800672e:	fb25 7303 	smlad	r3, r5, r3, r7
 8006732:	9305      	str	r3, [sp, #20]
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006738:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800673c:	4473      	add	r3, lr
 800673e:	461a      	mov	r2, r3
 8006740:	9b06      	ldr	r3, [sp, #24]
 8006742:	f8cd e018 	str.w	lr, [sp, #24]
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	17d1      	asrs	r1, r2, #31
 800674a:	fba2 2304 	umull	r2, r3, r2, r4
 800674e:	fb04 3301 	mla	r3, r4, r1, r3
 8006752:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006756:	f143 0300 	adc.w	r3, r3, #0
 800675a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800675c:	021a      	lsls	r2, r3, #8
 800675e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006762:	2100      	movs	r1, #0
 8006764:	fbc4 0102 	smlal	r0, r1, r4, r2
 8006768:	108a      	asrs	r2, r1, #2
 800676a:	9907      	ldr	r1, [sp, #28]
 800676c:	f302 020f 	ssat	r2, #16, r2
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	f821 2b02 	strh.w	r2, [r1], #2
 8006776:	9303      	str	r3, [sp, #12]
 8006778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800677a:	9107      	str	r1, [sp, #28]
 800677c:	4299      	cmp	r1, r3
 800677e:	f109 0910 	add.w	r9, r9, #16
 8006782:	f47f aed5 	bne.w	8006530 <D128_1CH_HTONS_VOL_HP+0x48>
 8006786:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006788:	9905      	ldr	r1, [sp, #20]
 800678a:	6091      	str	r1, [r2, #8]
 800678c:	9904      	ldr	r1, [sp, #16]
 800678e:	60d1      	str	r1, [r2, #12]
 8006790:	4613      	mov	r3, r2
 8006792:	61d6      	str	r6, [r2, #28]
 8006794:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006796:	9a03      	ldr	r2, [sp, #12]
 8006798:	611a      	str	r2, [r3, #16]
 800679a:	2000      	movs	r0, #0
 800679c:	f8c3 e014 	str.w	lr, [r3, #20]
 80067a0:	6199      	str	r1, [r3, #24]
 80067a2:	b013      	add	sp, #76	; 0x4c
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	f8dd e018 	ldr.w	lr, [sp, #24]
 80067ac:	e7eb      	b.n	8006786 <D128_1CH_HTONS_VOL_HP+0x29e>
 80067ae:	bf00      	nop
 80067b0:	00780069 	.word	0x00780069
 80067b4:	005b004e 	.word	0x005b004e
 80067b8:	00420037 	.word	0x00420037
 80067bc:	002d0024 	.word	0x002d0024
 80067c0:	001c0015 	.word	0x001c0015
 80067c4:	000f000a 	.word	0x000f000a
 80067c8:	00060003 	.word	0x00060003
 80067cc:	00880096 	.word	0x00880096
 80067d0:	00a200ac 	.word	0x00a200ac
 80067d4:	00b400ba 	.word	0x00b400ba
 80067d8:	00be00c0 	.word	0x00be00c0
 80067dc:	00c000be 	.word	0x00c000be
 80067e0:	00ba00b4 	.word	0x00ba00b4
 80067e4:	00ac00a2 	.word	0x00ac00a2
 80067e8:	00030006 	.word	0x00030006
 80067ec:	000a000f 	.word	0x000a000f
 80067f0:	0015001c 	.word	0x0015001c
 80067f4:	0024002d 	.word	0x0024002d
 80067f8:	00370042 	.word	0x00370042
 80067fc:	004e005b 	.word	0x004e005b
 8006800:	00690078 	.word	0x00690078
 8006804:	20000000 	.word	0x20000000
 8006808:	00960088 	.word	0x00960088

0800680c <PDM_Filter_Init>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	2240      	movs	r2, #64	; 0x40
 8006810:	4604      	mov	r4, r0
 8006812:	2100      	movs	r1, #0
 8006814:	300c      	adds	r0, #12
 8006816:	f003 f8b3 	bl	8009980 <memset>
 800681a:	493b      	ldr	r1, [pc, #236]	; (8006908 <PDM_Filter_Init+0xfc>)
 800681c:	483b      	ldr	r0, [pc, #236]	; (800690c <PDM_Filter_Init+0x100>)
 800681e:	f000 f98d 	bl	8006b3c <CRC_Lock>
 8006822:	8822      	ldrh	r2, [r4, #0]
 8006824:	8963      	ldrh	r3, [r4, #10]
 8006826:	4938      	ldr	r1, [pc, #224]	; (8006908 <PDM_Filter_Init+0xfc>)
 8006828:	8925      	ldrh	r5, [r4, #8]
 800682a:	86a3      	strh	r3, [r4, #52]	; 0x34
 800682c:	2801      	cmp	r0, #1
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	bf18      	it	ne
 8006834:	2100      	movne	r1, #0
 8006836:	2a01      	cmp	r2, #1
 8006838:	6461      	str	r1, [r4, #68]	; 0x44
 800683a:	86e5      	strh	r5, [r4, #54]	; 0x36
 800683c:	61a3      	str	r3, [r4, #24]
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	6163      	str	r3, [r4, #20]
 8006842:	60e3      	str	r3, [r4, #12]
 8006844:	6263      	str	r3, [r4, #36]	; 0x24
 8006846:	61e3      	str	r3, [r4, #28]
 8006848:	6223      	str	r3, [r4, #32]
 800684a:	6423      	str	r3, [r4, #64]	; 0x40
 800684c:	d918      	bls.n	8006880 <PDM_Filter_Init+0x74>
 800684e:	2003      	movs	r0, #3
 8006850:	2302      	movs	r3, #2
 8006852:	8862      	ldrh	r2, [r4, #2]
 8006854:	2a01      	cmp	r2, #1
 8006856:	d91d      	bls.n	8006894 <PDM_Filter_Init+0x88>
 8006858:	2140      	movs	r1, #64	; 0x40
 800685a:	2300      	movs	r3, #0
 800685c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800685e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8006862:	6862      	ldr	r2, [r4, #4]
 8006864:	bf04      	itt	eq
 8006866:	6421      	streq	r1, [r4, #64]	; 0x40
 8006868:	460b      	moveq	r3, r1
 800686a:	b11a      	cbz	r2, 8006874 <PDM_Filter_Init+0x68>
 800686c:	f043 0310 	orr.w	r3, r3, #16
 8006870:	6423      	str	r3, [r4, #64]	; 0x40
 8006872:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006874:	2200      	movs	r2, #0
 8006876:	8722      	strh	r2, [r4, #56]	; 0x38
 8006878:	b908      	cbnz	r0, 800687e <PDM_Filter_Init+0x72>
 800687a:	3380      	adds	r3, #128	; 0x80
 800687c:	6423      	str	r3, [r4, #64]	; 0x40
 800687e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006880:	4d23      	ldr	r5, [pc, #140]	; (8006910 <PDM_Filter_Init+0x104>)
 8006882:	d010      	beq.n	80068a6 <PDM_Filter_Init+0x9a>
 8006884:	782a      	ldrb	r2, [r5, #0]
 8006886:	2a01      	cmp	r2, #1
 8006888:	d027      	beq.n	80068da <PDM_Filter_Init+0xce>
 800688a:	8862      	ldrh	r2, [r4, #2]
 800688c:	2a01      	cmp	r2, #1
 800688e:	f04f 0001 	mov.w	r0, #1
 8006892:	d8e1      	bhi.n	8006858 <PDM_Filter_Init+0x4c>
 8006894:	d001      	beq.n	800689a <PDM_Filter_Init+0x8e>
 8006896:	4618      	mov	r0, r3
 8006898:	e7de      	b.n	8006858 <PDM_Filter_Init+0x4c>
 800689a:	2220      	movs	r2, #32
 800689c:	4618      	mov	r0, r3
 800689e:	6422      	str	r2, [r4, #64]	; 0x40
 80068a0:	4613      	mov	r3, r2
 80068a2:	2160      	movs	r1, #96	; 0x60
 80068a4:	e7da      	b.n	800685c <PDM_Filter_Init+0x50>
 80068a6:	7829      	ldrb	r1, [r5, #0]
 80068a8:	2900      	cmp	r1, #0
 80068aa:	d1ee      	bne.n	800688a <PDM_Filter_Init+0x7e>
 80068ac:	4919      	ldr	r1, [pc, #100]	; (8006914 <PDM_Filter_Init+0x108>)
 80068ae:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800691c <PDM_Filter_Init+0x110>
 80068b2:	4f19      	ldr	r7, [pc, #100]	; (8006918 <PDM_Filter_Init+0x10c>)
 80068b4:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80068b8:	684a      	ldr	r2, [r1, #4]
 80068ba:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80068be:	ea02 0007 	and.w	r0, r2, r7
 80068c2:	4303      	orrs	r3, r0
 80068c4:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80068c8:	4413      	add	r3, r2
 80068ca:	f841 3f04 	str.w	r3, [r1, #4]!
 80068ce:	428e      	cmp	r6, r1
 80068d0:	d1f2      	bne.n	80068b8 <PDM_Filter_Init+0xac>
 80068d2:	2001      	movs	r0, #1
 80068d4:	7028      	strb	r0, [r5, #0]
 80068d6:	2300      	movs	r3, #0
 80068d8:	e7bb      	b.n	8006852 <PDM_Filter_Init+0x46>
 80068da:	490e      	ldr	r1, [pc, #56]	; (8006914 <PDM_Filter_Init+0x108>)
 80068dc:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800691c <PDM_Filter_Init+0x110>
 80068e0:	4f0d      	ldr	r7, [pc, #52]	; (8006918 <PDM_Filter_Init+0x10c>)
 80068e2:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80068e6:	684a      	ldr	r2, [r1, #4]
 80068e8:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80068ec:	ea02 0007 	and.w	r0, r2, r7
 80068f0:	4303      	orrs	r3, r0
 80068f2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80068f6:	4413      	add	r3, r2
 80068f8:	f841 3f04 	str.w	r3, [r1, #4]!
 80068fc:	428e      	cmp	r6, r1
 80068fe:	d1f2      	bne.n	80068e6 <PDM_Filter_Init+0xda>
 8006900:	2300      	movs	r3, #0
 8006902:	702b      	strb	r3, [r5, #0]
 8006904:	e7c1      	b.n	800688a <PDM_Filter_Init+0x7e>
 8006906:	bf00      	nop
 8006908:	b5e8b5cd 	.word	0xb5e8b5cd
 800690c:	f407a5c2 	.word	0xf407a5c2
 8006910:	20000ffc 	.word	0x20000ffc
 8006914:	1ffffffc 	.word	0x1ffffffc
 8006918:	000ffc00 	.word	0x000ffc00
 800691c:	3ff00000 	.word	0x3ff00000

08006920 <PDM_Filter_setConfig>:
 8006920:	4b66      	ldr	r3, [pc, #408]	; (8006abc <PDM_Filter_setConfig+0x19c>)
 8006922:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <PDM_Filter_setConfig+0xc>
 8006928:	2004      	movs	r0, #4
 800692a:	4770      	bx	lr
 800692c:	b530      	push	{r4, r5, lr}
 800692e:	880a      	ldrh	r2, [r1, #0]
 8006930:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006932:	ed2d 8b04 	vpush	{d8-d9}
 8006936:	4604      	mov	r4, r0
 8006938:	460d      	mov	r5, r1
 800693a:	1e51      	subs	r1, r2, #1
 800693c:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8006940:	2906      	cmp	r1, #6
 8006942:	b083      	sub	sp, #12
 8006944:	6420      	str	r0, [r4, #64]	; 0x40
 8006946:	d91a      	bls.n	800697e <PDM_Filter_setConfig+0x5e>
 8006948:	2008      	movs	r0, #8
 800694a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800694e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006952:	4299      	cmp	r1, r3
 8006954:	d07e      	beq.n	8006a54 <PDM_Filter_setConfig+0x134>
 8006956:	f113 0f0c 	cmn.w	r3, #12
 800695a:	da2a      	bge.n	80069b2 <PDM_Filter_setConfig+0x92>
 800695c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8006960:	3040      	adds	r0, #64	; 0x40
 8006962:	80ab      	strh	r3, [r5, #4]
 8006964:	8622      	strh	r2, [r4, #48]	; 0x30
 8006966:	886b      	ldrh	r3, [r5, #2]
 8006968:	8663      	strh	r3, [r4, #50]	; 0x32
 800696a:	b920      	cbnz	r0, 8006976 <PDM_Filter_setConfig+0x56>
 800696c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800696e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006972:	6423      	str	r3, [r4, #64]	; 0x40
 8006974:	2000      	movs	r0, #0
 8006976:	b003      	add	sp, #12
 8006978:	ecbd 8b04 	vpop	{d8-d9}
 800697c:	bd30      	pop	{r4, r5, pc}
 800697e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006980:	4291      	cmp	r1, r2
 8006982:	d06c      	beq.n	8006a5e <PDM_Filter_setConfig+0x13e>
 8006984:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	4313      	orrs	r3, r2
 800698e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8006992:	6423      	str	r3, [r4, #64]	; 0x40
 8006994:	2970      	cmp	r1, #112	; 0x70
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800699e:	d066      	beq.n	8006a6e <PDM_Filter_setConfig+0x14e>
 80069a0:	2b06      	cmp	r3, #6
 80069a2:	f200 8089 	bhi.w	8006ab8 <PDM_Filter_setConfig+0x198>
 80069a6:	e8df f003 	tbb	[pc, r3]
 80069aa:	4f52      	.short	0x4f52
 80069ac:	3d43494c 	.word	0x3d43494c
 80069b0:	46          	.byte	0x46
 80069b1:	00          	.byte	0x00
 80069b2:	2b33      	cmp	r3, #51	; 0x33
 80069b4:	dc32      	bgt.n	8006a1c <PDM_Filter_setConfig+0xfc>
 80069b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80069b8:	f002 020f 	and.w	r2, r2, #15
 80069bc:	3a01      	subs	r2, #1
 80069be:	2a06      	cmp	r2, #6
 80069c0:	d872      	bhi.n	8006aa8 <PDM_Filter_setConfig+0x188>
 80069c2:	493f      	ldr	r1, [pc, #252]	; (8006ac0 <PDM_Filter_setConfig+0x1a0>)
 80069c4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80069c8:	ed92 9a00 	vldr	s18, [r2]
 80069cc:	ed92 8a07 	vldr	s16, [r2, #28]
 80069d0:	9001      	str	r0, [sp, #4]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069da:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80069de:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 80069e2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80069e6:	f007 fbdb 	bl	800e1a0 <powf>
 80069ea:	eddf 0a36 	vldr	s1, [pc, #216]	; 8006ac4 <PDM_Filter_setConfig+0x1a4>
 80069ee:	eef0 8a40 	vmov.f32	s17, s0
 80069f2:	ee70 0ac9 	vsub.f32	s1, s1, s18
 80069f6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80069fa:	f007 fbd1 	bl	800e1a0 <powf>
 80069fe:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006a02:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006a06:	f007 fba5 	bl	800e154 <roundf>
 8006a0a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006a0e:	88ab      	ldrh	r3, [r5, #4]
 8006a10:	882a      	ldrh	r2, [r5, #0]
 8006a12:	9801      	ldr	r0, [sp, #4]
 8006a14:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8006a18:	8723      	strh	r3, [r4, #56]	; 0x38
 8006a1a:	e7a3      	b.n	8006964 <PDM_Filter_setConfig+0x44>
 8006a1c:	2333      	movs	r3, #51	; 0x33
 8006a1e:	3040      	adds	r0, #64	; 0x40
 8006a20:	80ab      	strh	r3, [r5, #4]
 8006a22:	e79f      	b.n	8006964 <PDM_Filter_setConfig+0x44>
 8006a24:	4b28      	ldr	r3, [pc, #160]	; (8006ac8 <PDM_Filter_setConfig+0x1a8>)
 8006a26:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a28:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e792      	b.n	8006956 <PDM_Filter_setConfig+0x36>
 8006a30:	4b26      	ldr	r3, [pc, #152]	; (8006acc <PDM_Filter_setConfig+0x1ac>)
 8006a32:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a34:	e7f8      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a36:	4b26      	ldr	r3, [pc, #152]	; (8006ad0 <PDM_Filter_setConfig+0x1b0>)
 8006a38:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a3a:	e7f5      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a3c:	4b25      	ldr	r3, [pc, #148]	; (8006ad4 <PDM_Filter_setConfig+0x1b4>)
 8006a3e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a40:	e7f2      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a42:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <PDM_Filter_setConfig+0x1b8>)
 8006a44:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a46:	e7ef      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a48:	4b24      	ldr	r3, [pc, #144]	; (8006adc <PDM_Filter_setConfig+0x1bc>)
 8006a4a:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a4c:	e7ec      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a4e:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <PDM_Filter_setConfig+0x1c0>)
 8006a50:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a52:	e7e9      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a54:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006a56:	4291      	cmp	r1, r2
 8006a58:	f47f af7d 	bne.w	8006956 <PDM_Filter_setConfig+0x36>
 8006a5c:	e783      	b.n	8006966 <PDM_Filter_setConfig+0x46>
 8006a5e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006a62:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8006a66:	4299      	cmp	r1, r3
 8006a68:	d023      	beq.n	8006ab2 <PDM_Filter_setConfig+0x192>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e773      	b.n	8006956 <PDM_Filter_setConfig+0x36>
 8006a6e:	2b06      	cmp	r3, #6
 8006a70:	d822      	bhi.n	8006ab8 <PDM_Filter_setConfig+0x198>
 8006a72:	e8df f003 	tbb	[pc, r3]
 8006a76:	1316      	.short	0x1316
 8006a78:	070a0d10 	.word	0x070a0d10
 8006a7c:	04          	.byte	0x04
 8006a7d:	00          	.byte	0x00
 8006a7e:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <PDM_Filter_setConfig+0x1c4>)
 8006a80:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a82:	e7d1      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a84:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <PDM_Filter_setConfig+0x1c8>)
 8006a86:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a88:	e7ce      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a8a:	4b18      	ldr	r3, [pc, #96]	; (8006aec <PDM_Filter_setConfig+0x1cc>)
 8006a8c:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a8e:	e7cb      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <PDM_Filter_setConfig+0x1d0>)
 8006a92:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a94:	e7c8      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a96:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <PDM_Filter_setConfig+0x1d4>)
 8006a98:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a9a:	e7c5      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006a9c:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <PDM_Filter_setConfig+0x1d8>)
 8006a9e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006aa0:	e7c2      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006aa2:	4b16      	ldr	r3, [pc, #88]	; (8006afc <PDM_Filter_setConfig+0x1dc>)
 8006aa4:	64a3      	str	r3, [r4, #72]	; 0x48
 8006aa6:	e7bf      	b.n	8006a28 <PDM_Filter_setConfig+0x108>
 8006aa8:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8006b00 <PDM_Filter_setConfig+0x1e0>
 8006aac:	eeb0 9a48 	vmov.f32	s18, s16
 8006ab0:	e78e      	b.n	80069d0 <PDM_Filter_setConfig+0xb0>
 8006ab2:	886b      	ldrh	r3, [r5, #2]
 8006ab4:	8663      	strh	r3, [r4, #50]	; 0x32
 8006ab6:	e759      	b.n	800696c <PDM_Filter_setConfig+0x4c>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e746      	b.n	800694a <PDM_Filter_setConfig+0x2a>
 8006abc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ac0:	0800f3bc 	.word	0x0800f3bc
 8006ac4:	42000000 	.word	0x42000000
 8006ac8:	08004e8d 	.word	0x08004e8d
 8006acc:	08004d6d 	.word	0x08004d6d
 8006ad0:	0800501d 	.word	0x0800501d
 8006ad4:	08005861 	.word	0x08005861
 8006ad8:	080055c1 	.word	0x080055c1
 8006adc:	080053a1 	.word	0x080053a1
 8006ae0:	080051b5 	.word	0x080051b5
 8006ae4:	08005e6d 	.word	0x08005e6d
 8006ae8:	08005d35 	.word	0x08005d35
 8006aec:	08005c51 	.word	0x08005c51
 8006af0:	080064e9 	.word	0x080064e9
 8006af4:	080062d5 	.word	0x080062d5
 8006af8:	0800611d 	.word	0x0800611d
 8006afc:	08005fb1 	.word	0x08005fb1
 8006b00:	00000000 	.word	0x00000000

08006b04 <PDM_Filter>:
 8006b04:	b410      	push	{r4}
 8006b06:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <PDM_Filter+0x34>)
 8006b08:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	d003      	beq.n	8006b16 <PDM_Filter+0x12>
 8006b0e:	2004      	movs	r0, #4
 8006b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006b18:	05dc      	lsls	r4, r3, #23
 8006b1a:	d407      	bmi.n	8006b2c <PDM_Filter+0x28>
 8006b1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b20:	bf14      	ite	ne
 8006b22:	2020      	movne	r0, #32
 8006b24:	2030      	moveq	r0, #48	; 0x30
 8006b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b32:	320c      	adds	r2, #12
 8006b34:	4718      	bx	r3
 8006b36:	bf00      	nop
 8006b38:	b5e8b5cd 	.word	0xb5e8b5cd

08006b3c <CRC_Lock>:
 8006b3c:	4a17      	ldr	r2, [pc, #92]	; (8006b9c <CRC_Lock+0x60>)
 8006b3e:	6813      	ldr	r3, [r2, #0]
 8006b40:	b410      	push	{r4}
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	4c16      	ldr	r4, [pc, #88]	; (8006ba0 <CRC_Lock+0x64>)
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	b933      	cbnz	r3, 8006b5c <CRC_Lock+0x20>
 8006b4e:	4b15      	ldr	r3, [pc, #84]	; (8006ba4 <CRC_Lock+0x68>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b56:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006b5a:	d00f      	beq.n	8006b7c <CRC_Lock+0x40>
 8006b5c:	4a12      	ldr	r2, [pc, #72]	; (8006ba8 <CRC_Lock+0x6c>)
 8006b5e:	2301      	movs	r3, #1
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	6813      	ldr	r3, [r2, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1fc      	bne.n	8006b62 <CRC_Lock+0x26>
 8006b68:	4b10      	ldr	r3, [pc, #64]	; (8006bac <CRC_Lock+0x70>)
 8006b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b6e:	6018      	str	r0, [r3, #0]
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	1a08      	subs	r0, r1, r0
 8006b74:	fab0 f080 	clz	r0, r0
 8006b78:	0940      	lsrs	r0, r0, #5
 8006b7a:	4770      	bx	lr
 8006b7c:	4a0c      	ldr	r2, [pc, #48]	; (8006bb0 <CRC_Lock+0x74>)
 8006b7e:	2301      	movs	r3, #1
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1fc      	bne.n	8006b82 <CRC_Lock+0x46>
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <CRC_Lock+0x78>)
 8006b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b8e:	6018      	str	r0, [r3, #0]
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	1a40      	subs	r0, r0, r1
 8006b94:	fab0 f080 	clz	r0, r0
 8006b98:	0940      	lsrs	r0, r0, #5
 8006b9a:	4770      	bx	lr
 8006b9c:	e0002000 	.word	0xe0002000
 8006ba0:	e0042000 	.word	0xe0042000
 8006ba4:	5c001000 	.word	0x5c001000
 8006ba8:	40023008 	.word	0x40023008
 8006bac:	40023000 	.word	0x40023000
 8006bb0:	58024c08 	.word	0x58024c08
 8006bb4:	58024c00 	.word	0x58024c00

08006bb8 <_ai_platform_acquire_crc>:
 8006bb8:	2001      	movs	r0, #1
 8006bba:	4770      	bx	lr

08006bbc <_ai_platform_release_crc>:
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop

08006bc0 <ai_platform_get_weights_map>:
 8006bc0:	b132      	cbz	r2, 8006bd0 <ai_platform_get_weights_map+0x10>
 8006bc2:	6912      	ldr	r2, [r2, #16]
 8006bc4:	b122      	cbz	r2, 8006bd0 <ai_platform_get_weights_map+0x10>
 8006bc6:	b110      	cbz	r0, 8006bce <ai_platform_get_weights_map+0xe>
 8006bc8:	b921      	cbnz	r1, 8006bd4 <ai_platform_get_weights_map+0x14>
 8006bca:	4608      	mov	r0, r1
 8006bcc:	4770      	bx	lr
 8006bce:	4770      	bx	lr
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4770      	bx	lr
 8006bd4:	b470      	push	{r4, r5, r6}
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <ai_platform_get_weights_map+0x64>)
 8006bd8:	6815      	ldr	r5, [r2, #0]
 8006bda:	429d      	cmp	r5, r3
 8006bdc:	d007      	beq.n	8006bee <ai_platform_get_weights_map+0x2e>
 8006bde:	6002      	str	r2, [r0, #0]
 8006be0:	f1a1 0001 	sub.w	r0, r1, #1
 8006be4:	fab0 f080 	clz	r0, r0
 8006be8:	0940      	lsrs	r0, r0, #5
 8006bea:	bc70      	pop	{r4, r5, r6}
 8006bec:	4770      	bx	lr
 8006bee:	6854      	ldr	r4, [r2, #4]
 8006bf0:	42ac      	cmp	r4, r5
 8006bf2:	f102 0204 	add.w	r2, r2, #4
 8006bf6:	d011      	beq.n	8006c1c <ai_platform_get_weights_map+0x5c>
 8006bf8:	1f03      	subs	r3, r0, #4
 8006bfa:	4616      	mov	r6, r2
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	e003      	b.n	8006c08 <ai_platform_get_weights_map+0x48>
 8006c00:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8006c04:	42ac      	cmp	r4, r5
 8006c06:	d009      	beq.n	8006c1c <ai_platform_get_weights_map+0x5c>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	4281      	cmp	r1, r0
 8006c0c:	f843 4f04 	str.w	r4, [r3, #4]!
 8006c10:	d1f6      	bne.n	8006c00 <ai_platform_get_weights_map+0x40>
 8006c12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006c16:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <ai_platform_get_weights_map+0x64>)
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d001      	beq.n	8006c20 <ai_platform_get_weights_map+0x60>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e7e4      	b.n	8006bea <ai_platform_get_weights_map+0x2a>
 8006c20:	2001      	movs	r0, #1
 8006c22:	e7e2      	b.n	8006bea <ai_platform_get_weights_map+0x2a>
 8006c24:	a1facade 	.word	0xa1facade

08006c28 <ai_platform_get_activations_map>:
 8006c28:	b132      	cbz	r2, 8006c38 <ai_platform_get_activations_map+0x10>
 8006c2a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006c2c:	b122      	cbz	r2, 8006c38 <ai_platform_get_activations_map+0x10>
 8006c2e:	b110      	cbz	r0, 8006c36 <ai_platform_get_activations_map+0xe>
 8006c30:	b921      	cbnz	r1, 8006c3c <ai_platform_get_activations_map+0x14>
 8006c32:	4608      	mov	r0, r1
 8006c34:	4770      	bx	lr
 8006c36:	4770      	bx	lr
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4770      	bx	lr
 8006c3c:	b470      	push	{r4, r5, r6}
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <ai_platform_get_activations_map+0x64>)
 8006c40:	6815      	ldr	r5, [r2, #0]
 8006c42:	429d      	cmp	r5, r3
 8006c44:	d007      	beq.n	8006c56 <ai_platform_get_activations_map+0x2e>
 8006c46:	6002      	str	r2, [r0, #0]
 8006c48:	f1a1 0001 	sub.w	r0, r1, #1
 8006c4c:	fab0 f080 	clz	r0, r0
 8006c50:	0940      	lsrs	r0, r0, #5
 8006c52:	bc70      	pop	{r4, r5, r6}
 8006c54:	4770      	bx	lr
 8006c56:	6854      	ldr	r4, [r2, #4]
 8006c58:	42ac      	cmp	r4, r5
 8006c5a:	f102 0204 	add.w	r2, r2, #4
 8006c5e:	d011      	beq.n	8006c84 <ai_platform_get_activations_map+0x5c>
 8006c60:	1f03      	subs	r3, r0, #4
 8006c62:	4616      	mov	r6, r2
 8006c64:	2000      	movs	r0, #0
 8006c66:	e003      	b.n	8006c70 <ai_platform_get_activations_map+0x48>
 8006c68:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8006c6c:	42ac      	cmp	r4, r5
 8006c6e:	d009      	beq.n	8006c84 <ai_platform_get_activations_map+0x5c>
 8006c70:	3001      	adds	r0, #1
 8006c72:	4281      	cmp	r1, r0
 8006c74:	f843 4f04 	str.w	r4, [r3, #4]!
 8006c78:	d1f6      	bne.n	8006c68 <ai_platform_get_activations_map+0x40>
 8006c7a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006c7e:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <ai_platform_get_activations_map+0x64>)
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d001      	beq.n	8006c88 <ai_platform_get_activations_map+0x60>
 8006c84:	2000      	movs	r0, #0
 8006c86:	e7e4      	b.n	8006c52 <ai_platform_get_activations_map+0x2a>
 8006c88:	2001      	movs	r0, #1
 8006c8a:	e7e2      	b.n	8006c52 <ai_platform_get_activations_map+0x2a>
 8006c8c:	a1facade 	.word	0xa1facade

08006c90 <ai_platform_network_create>:
 8006c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	4607      	mov	r7, r0
 8006c98:	4616      	mov	r6, r2
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8006ca0:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8006ca4:	f7ff ff88 	bl	8006bb8 <_ai_platform_acquire_crc>
 8006ca8:	b178      	cbz	r0, 8006cca <ai_platform_network_create+0x3a>
 8006caa:	4b5a      	ldr	r3, [pc, #360]	; (8006e14 <ai_platform_network_create+0x184>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	d00c      	beq.n	8006cd4 <ai_platform_network_create+0x44>
 8006cba:	4b57      	ldr	r3, [pc, #348]	; (8006e18 <ai_platform_network_create+0x188>)
 8006cbc:	2118      	movs	r1, #24
 8006cbe:	6019      	str	r1, [r3, #0]
 8006cc0:	6819      	ldr	r1, [r3, #0]
 8006cc2:	2918      	cmp	r1, #24
 8006cc4:	d034      	beq.n	8006d30 <ai_platform_network_create+0xa0>
 8006cc6:	f7ff ff79 	bl	8006bbc <_ai_platform_release_crc>
 8006cca:	f241 0033 	movw	r0, #4147	; 0x1033
 8006cce:	b002      	add	sp, #8
 8006cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd4:	4b51      	ldr	r3, [pc, #324]	; (8006e1c <ai_platform_network_create+0x18c>)
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	6019      	str	r1, [r3, #0]
 8006cda:	2114      	movs	r1, #20
 8006cdc:	e001      	b.n	8006ce2 <ai_platform_network_create+0x52>
 8006cde:	3901      	subs	r1, #1
 8006ce0:	d002      	beq.n	8006ce8 <ai_platform_network_create+0x58>
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d1fa      	bne.n	8006cde <ai_platform_network_create+0x4e>
 8006ce8:	4b4c      	ldr	r3, [pc, #304]	; (8006e1c <ai_platform_network_create+0x18c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	b9f3      	cbnz	r3, 8006d2c <ai_platform_network_create+0x9c>
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f7ff ff64 	bl	8006bbc <_ai_platform_release_crc>
 8006cf4:	4a4a      	ldr	r2, [pc, #296]	; (8006e20 <ai_platform_network_create+0x190>)
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	f7ff ff5b 	bl	8006bb8 <_ai_platform_acquire_crc>
 8006d02:	4b44      	ldr	r3, [pc, #272]	; (8006e14 <ai_platform_network_create+0x184>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0e:	d015      	beq.n	8006d3c <ai_platform_network_create+0xac>
 8006d10:	4b41      	ldr	r3, [pc, #260]	; (8006e18 <ai_platform_network_create+0x188>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	d1fc      	bne.n	8006d16 <ai_platform_network_create+0x86>
 8006d1c:	4b41      	ldr	r3, [pc, #260]	; (8006e24 <ai_platform_network_create+0x194>)
 8006d1e:	4a42      	ldr	r2, [pc, #264]	; (8006e28 <ai_platform_network_create+0x198>)
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	4b41      	ldr	r3, [pc, #260]	; (8006e2c <ai_platform_network_create+0x19c>)
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d016      	beq.n	8006d58 <ai_platform_network_create+0xc8>
 8006d2a:	e7fe      	b.n	8006d2a <ai_platform_network_create+0x9a>
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	e7ca      	b.n	8006cc6 <ai_platform_network_create+0x36>
 8006d30:	2101      	movs	r1, #1
 8006d32:	6019      	str	r1, [r3, #0]
 8006d34:	6819      	ldr	r1, [r3, #0]
 8006d36:	2900      	cmp	r1, #0
 8006d38:	d1fc      	bne.n	8006d34 <ai_platform_network_create+0xa4>
 8006d3a:	e7d8      	b.n	8006cee <ai_platform_network_create+0x5e>
 8006d3c:	4b37      	ldr	r3, [pc, #220]	; (8006e1c <ai_platform_network_create+0x18c>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	d1fc      	bne.n	8006d42 <ai_platform_network_create+0xb2>
 8006d48:	4b39      	ldr	r3, [pc, #228]	; (8006e30 <ai_platform_network_create+0x1a0>)
 8006d4a:	4a37      	ldr	r2, [pc, #220]	; (8006e28 <ai_platform_network_create+0x198>)
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b36      	ldr	r3, [pc, #216]	; (8006e2c <ai_platform_network_create+0x19c>)
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d000      	beq.n	8006d58 <ai_platform_network_create+0xc8>
 8006d56:	e7fe      	b.n	8006d56 <ai_platform_network_create+0xc6>
 8006d58:	f7ff ff30 	bl	8006bbc <_ai_platform_release_crc>
 8006d5c:	b1af      	cbz	r7, 8006d8a <ai_platform_network_create+0xfa>
 8006d5e:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <ai_platform_network_create+0x1a4>)
 8006d60:	6033      	str	r3, [r6, #0]
 8006d62:	603e      	str	r6, [r7, #0]
 8006d64:	f000 fc8e 	bl	8007684 <core_init>
 8006d68:	b990      	cbnz	r0, 8006d90 <ai_platform_network_create+0x100>
 8006d6a:	062d      	lsls	r5, r5, #24
 8006d6c:	0424      	lsls	r4, r4, #16
 8006d6e:	2230      	movs	r2, #48	; 0x30
 8006d70:	2300      	movs	r3, #0
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	2110      	movs	r1, #16
 8006d76:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	432b      	orrs	r3, r5
 8006d7e:	f362 0007 	bfi	r0, r2, #0, #8
 8006d82:	6473      	str	r3, [r6, #68]	; 0x44
 8006d84:	f361 201f 	bfi	r0, r1, #8, #24
 8006d88:	e7a1      	b.n	8006cce <ai_platform_network_create+0x3e>
 8006d8a:	f241 0010 	movw	r0, #4112	; 0x1010
 8006d8e:	e79e      	b.n	8006cce <ai_platform_network_create+0x3e>
 8006d90:	4a23      	ldr	r2, [pc, #140]	; (8006e20 <ai_platform_network_create+0x190>)
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	f7ff ff0d 	bl	8006bb8 <_ai_platform_acquire_crc>
 8006d9e:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <ai_platform_network_create+0x184>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006daa:	d00d      	beq.n	8006dc8 <ai_platform_network_create+0x138>
 8006dac:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <ai_platform_network_create+0x188>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	2a00      	cmp	r2, #0
 8006db6:	d1fc      	bne.n	8006db2 <ai_platform_network_create+0x122>
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <ai_platform_network_create+0x194>)
 8006dba:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <ai_platform_network_create+0x198>)
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <ai_platform_network_create+0x19c>)
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d00e      	beq.n	8006de4 <ai_platform_network_create+0x154>
 8006dc6:	e7fe      	b.n	8006dc6 <ai_platform_network_create+0x136>
 8006dc8:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <ai_platform_network_create+0x18c>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	d1fc      	bne.n	8006dce <ai_platform_network_create+0x13e>
 8006dd4:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <ai_platform_network_create+0x1a0>)
 8006dd6:	4a14      	ldr	r2, [pc, #80]	; (8006e28 <ai_platform_network_create+0x198>)
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <ai_platform_network_create+0x19c>)
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d000      	beq.n	8006de4 <ai_platform_network_create+0x154>
 8006de2:	e7fe      	b.n	8006de2 <ai_platform_network_create+0x152>
 8006de4:	062d      	lsls	r5, r5, #24
 8006de6:	0424      	lsls	r4, r4, #16
 8006de8:	f7ff fee8 	bl	8006bbc <_ai_platform_release_crc>
 8006dec:	ea45 0304 	orr.w	r3, r5, r4
 8006df0:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006df4:	d001      	beq.n	8006dfa <ai_platform_network_create+0x16a>
 8006df6:	2201      	movs	r2, #1
 8006df8:	e7ba      	b.n	8006d70 <ai_platform_network_create+0xe0>
 8006dfa:	a802      	add	r0, sp, #8
 8006dfc:	4b0e      	ldr	r3, [pc, #56]	; (8006e38 <ai_platform_network_create+0x1a8>)
 8006dfe:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006e02:	f002 fc2f 	bl	8009664 <ai_check_custom_types>
 8006e06:	b110      	cbz	r0, 8006e0e <ai_platform_network_create+0x17e>
 8006e08:	2100      	movs	r1, #0
 8006e0a:	460a      	mov	r2, r1
 8006e0c:	e7b3      	b.n	8006d76 <ai_platform_network_create+0xe6>
 8006e0e:	2202      	movs	r2, #2
 8006e10:	e7ae      	b.n	8006d70 <ai_platform_network_create+0xe0>
 8006e12:	bf00      	nop
 8006e14:	e0042000 	.word	0xe0042000
 8006e18:	58024c08 	.word	0x58024c08
 8006e1c:	40023008 	.word	0x40023008
 8006e20:	e0002000 	.word	0xe0002000
 8006e24:	58024c00 	.word	0x58024c00
 8006e28:	f407a5c2 	.word	0xf407a5c2
 8006e2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e30:	40023000 	.word	0x40023000
 8006e34:	a1c00100 	.word	0xa1c00100
 8006e38:	84048403 	.word	0x84048403

08006e3c <ai_platform_network_init>:
 8006e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d04d      	beq.n	8006ee0 <ai_platform_network_init+0xa4>
 8006e44:	4b7c      	ldr	r3, [pc, #496]	; (8007038 <ai_platform_network_init+0x1fc>)
 8006e46:	6802      	ldr	r2, [r0, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	d148      	bne.n	8006ee0 <ai_platform_network_init+0xa4>
 8006e4e:	4a7b      	ldr	r2, [pc, #492]	; (800703c <ai_platform_network_init+0x200>)
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	f023 0301 	bic.w	r3, r3, #1
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	460d      	mov	r5, r1
 8006e5a:	f7ff fead 	bl	8006bb8 <_ai_platform_acquire_crc>
 8006e5e:	4b78      	ldr	r3, [pc, #480]	; (8007040 <ai_platform_network_init+0x204>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d00d      	beq.n	8006e88 <ai_platform_network_init+0x4c>
 8006e6c:	4b75      	ldr	r3, [pc, #468]	; (8007044 <ai_platform_network_init+0x208>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	d1fc      	bne.n	8006e72 <ai_platform_network_init+0x36>
 8006e78:	4b73      	ldr	r3, [pc, #460]	; (8007048 <ai_platform_network_init+0x20c>)
 8006e7a:	4a74      	ldr	r2, [pc, #464]	; (800704c <ai_platform_network_init+0x210>)
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	4b73      	ldr	r3, [pc, #460]	; (8007050 <ai_platform_network_init+0x214>)
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d00d      	beq.n	8006ea2 <ai_platform_network_init+0x66>
 8006e86:	e7fe      	b.n	8006e86 <ai_platform_network_init+0x4a>
 8006e88:	4b72      	ldr	r3, [pc, #456]	; (8007054 <ai_platform_network_init+0x218>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	2a00      	cmp	r2, #0
 8006e92:	d1fc      	bne.n	8006e8e <ai_platform_network_init+0x52>
 8006e94:	4b70      	ldr	r3, [pc, #448]	; (8007058 <ai_platform_network_init+0x21c>)
 8006e96:	4a6d      	ldr	r2, [pc, #436]	; (800704c <ai_platform_network_init+0x210>)
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	4b6c      	ldr	r3, [pc, #432]	; (8007050 <ai_platform_network_init+0x214>)
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d11d      	bne.n	8006ede <ai_platform_network_init+0xa2>
 8006ea2:	f7ff fe8b 	bl	8006bbc <_ai_platform_release_crc>
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	d076      	beq.n	8006f98 <ai_platform_network_init+0x15c>
 8006eaa:	4b6c      	ldr	r3, [pc, #432]	; (800705c <ai_platform_network_init+0x220>)
 8006eac:	682a      	ldr	r2, [r5, #0]
 8006eae:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d030      	beq.n	8006f18 <ai_platform_network_init+0xdc>
 8006eb6:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8006eb8:	46a9      	mov	r9, r5
 8006eba:	f105 0118 	add.w	r1, r5, #24
 8006ebe:	2e00      	cmp	r6, #0
 8006ec0:	f000 8095 	beq.w	8006fee <ai_platform_network_init+0x1b2>
 8006ec4:	f1bc 0f00 	cmp.w	ip, #0
 8006ec8:	f000 80a4 	beq.w	8007014 <ai_platform_network_init+0x1d8>
 8006ecc:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8006ed0:	f1b8 0f01 	cmp.w	r8, #1
 8006ed4:	d16a      	bne.n	8006fac <ai_platform_network_init+0x170>
 8006ed6:	2700      	movs	r7, #0
 8006ed8:	468c      	mov	ip, r1
 8006eda:	83a7      	strh	r7, [r4, #28]
 8006edc:	e028      	b.n	8006f30 <ai_platform_network_init+0xf4>
 8006ede:	e7fe      	b.n	8006ede <ai_platform_network_init+0xa2>
 8006ee0:	4a56      	ldr	r2, [pc, #344]	; (800703c <ai_platform_network_init+0x200>)
 8006ee2:	6813      	ldr	r3, [r2, #0]
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	f7ff fe65 	bl	8006bb8 <_ai_platform_acquire_crc>
 8006eee:	4b54      	ldr	r3, [pc, #336]	; (8007040 <ai_platform_network_init+0x204>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efa:	d067      	beq.n	8006fcc <ai_platform_network_init+0x190>
 8006efc:	4b51      	ldr	r3, [pc, #324]	; (8007044 <ai_platform_network_init+0x208>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	d1fc      	bne.n	8006f02 <ai_platform_network_init+0xc6>
 8006f08:	4b4f      	ldr	r3, [pc, #316]	; (8007048 <ai_platform_network_init+0x20c>)
 8006f0a:	4a50      	ldr	r2, [pc, #320]	; (800704c <ai_platform_network_init+0x210>)
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	4b4f      	ldr	r3, [pc, #316]	; (8007050 <ai_platform_network_init+0x214>)
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d067      	beq.n	8006fe6 <ai_platform_network_init+0x1aa>
 8006f16:	e7fe      	b.n	8006f16 <ai_platform_network_init+0xda>
 8006f18:	8be1      	ldrh	r1, [r4, #30]
 8006f1a:	88eb      	ldrh	r3, [r5, #6]
 8006f1c:	89af      	ldrh	r7, [r5, #12]
 8006f1e:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8006f22:	88aa      	ldrh	r2, [r5, #4]
 8006f24:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8006f28:	428b      	cmp	r3, r1
 8006f2a:	d13f      	bne.n	8006fac <ai_platform_network_init+0x170>
 8006f2c:	83a2      	strh	r2, [r4, #28]
 8006f2e:	b19b      	cbz	r3, 8006f58 <ai_platform_network_init+0x11c>
 8006f30:	f04f 0e00 	mov.w	lr, #0
 8006f34:	46f2      	mov	sl, lr
 8006f36:	eb09 060e 	add.w	r6, r9, lr
 8006f3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f3c:	6a25      	ldr	r5, [r4, #32]
 8006f3e:	4475      	add	r5, lr
 8006f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f42:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006f46:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f4a:	8be3      	ldrh	r3, [r4, #30]
 8006f4c:	f10a 0a01 	add.w	sl, sl, #1
 8006f50:	459a      	cmp	sl, r3
 8006f52:	f10e 0e18 	add.w	lr, lr, #24
 8006f56:	d3ee      	bcc.n	8006f36 <ai_platform_network_init+0xfa>
 8006f58:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006f5a:	4598      	cmp	r8, r3
 8006f5c:	d12e      	bne.n	8006fbc <ai_platform_network_init+0x180>
 8006f5e:	84a7      	strh	r7, [r4, #36]	; 0x24
 8006f60:	f1b8 0f00 	cmp.w	r8, #0
 8006f64:	d012      	beq.n	8006f8c <ai_platform_network_init+0x150>
 8006f66:	2700      	movs	r7, #0
 8006f68:	46be      	mov	lr, r7
 8006f6a:	eb0c 0607 	add.w	r6, ip, r7
 8006f6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f70:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006f72:	443d      	add	r5, r7
 8006f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f76:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006f7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f7e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006f80:	f10e 0e01 	add.w	lr, lr, #1
 8006f84:	459e      	cmp	lr, r3
 8006f86:	f107 0718 	add.w	r7, r7, #24
 8006f8a:	d3ee      	bcc.n	8006f6a <ai_platform_network_init+0x12e>
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	60e3      	str	r3, [r4, #12]
 8006f90:	4620      	mov	r0, r4
 8006f92:	f002 fb91 	bl	80096b8 <ai_layers_init_all>
 8006f96:	e006      	b.n	8006fa6 <ai_platform_network_init+0x16a>
 8006f98:	f104 0010 	add.w	r0, r4, #16
 8006f9c:	2211      	movs	r2, #17
 8006f9e:	2110      	movs	r1, #16
 8006fa0:	462c      	mov	r4, r5
 8006fa2:	f000 fb71 	bl	8007688 <core_set_error>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	f104 0010 	add.w	r0, r4, #16
 8006fb0:	2212      	movs	r2, #18
 8006fb2:	2116      	movs	r1, #22
 8006fb4:	f000 fb68 	bl	8007688 <core_set_error>
 8006fb8:	2400      	movs	r4, #0
 8006fba:	e7f4      	b.n	8006fa6 <ai_platform_network_init+0x16a>
 8006fbc:	f104 0010 	add.w	r0, r4, #16
 8006fc0:	2213      	movs	r2, #19
 8006fc2:	2116      	movs	r1, #22
 8006fc4:	f000 fb60 	bl	8007688 <core_set_error>
 8006fc8:	2400      	movs	r4, #0
 8006fca:	e7ec      	b.n	8006fa6 <ai_platform_network_init+0x16a>
 8006fcc:	4b21      	ldr	r3, [pc, #132]	; (8007054 <ai_platform_network_init+0x218>)
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	2a00      	cmp	r2, #0
 8006fd6:	d1fc      	bne.n	8006fd2 <ai_platform_network_init+0x196>
 8006fd8:	4b1f      	ldr	r3, [pc, #124]	; (8007058 <ai_platform_network_init+0x21c>)
 8006fda:	4a1c      	ldr	r2, [pc, #112]	; (800704c <ai_platform_network_init+0x210>)
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <ai_platform_network_init+0x214>)
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d115      	bne.n	8007012 <ai_platform_network_init+0x1d6>
 8006fe6:	f7ff fde9 	bl	8006bbc <_ai_platform_release_crc>
 8006fea:	2400      	movs	r4, #0
 8006fec:	e7db      	b.n	8006fa6 <ai_platform_network_init+0x16a>
 8006fee:	8c28      	ldrh	r0, [r5, #32]
 8006ff0:	8bea      	ldrh	r2, [r5, #30]
 8006ff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ff4:	fb02 f200 	mul.w	r2, r2, r0
 8006ff8:	fb03 f302 	mul.w	r3, r3, r2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f43f af61 	beq.w	8006ec4 <ai_platform_network_init+0x88>
 8007002:	f104 0010 	add.w	r0, r4, #16
 8007006:	2213      	movs	r2, #19
 8007008:	2110      	movs	r1, #16
 800700a:	4634      	mov	r4, r6
 800700c:	f000 fb3c 	bl	8007688 <core_set_error>
 8007010:	e7c9      	b.n	8006fa6 <ai_platform_network_init+0x16a>
 8007012:	e7fe      	b.n	8007012 <ai_platform_network_init+0x1d6>
 8007014:	8928      	ldrh	r0, [r5, #8]
 8007016:	88ea      	ldrh	r2, [r5, #6]
 8007018:	68eb      	ldr	r3, [r5, #12]
 800701a:	fb02 f200 	mul.w	r2, r2, r0
 800701e:	fb03 f302 	mul.w	r3, r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	f43f af52 	beq.w	8006ecc <ai_platform_network_init+0x90>
 8007028:	f104 0010 	add.w	r0, r4, #16
 800702c:	2212      	movs	r2, #18
 800702e:	2110      	movs	r1, #16
 8007030:	4664      	mov	r4, ip
 8007032:	f000 fb29 	bl	8007688 <core_set_error>
 8007036:	e7b6      	b.n	8006fa6 <ai_platform_network_init+0x16a>
 8007038:	a1c00100 	.word	0xa1c00100
 800703c:	e0002000 	.word	0xe0002000
 8007040:	e0042000 	.word	0xe0042000
 8007044:	58024c08 	.word	0x58024c08
 8007048:	58024c00 	.word	0x58024c00
 800704c:	f407a5c2 	.word	0xf407a5c2
 8007050:	b5e8b5cd 	.word	0xb5e8b5cd
 8007054:	40023008 	.word	0x40023008
 8007058:	40023000 	.word	0x40023000
 800705c:	a1facade 	.word	0xa1facade

08007060 <ai_platform_network_post_init>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	b120      	cbz	r0, 800706e <ai_platform_network_post_init+0xe>
 8007064:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <ai_platform_network_post_init+0x104>)
 8007066:	6802      	ldr	r2, [r0, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	4604      	mov	r4, r0
 800706c:	d02d      	beq.n	80070ca <ai_platform_network_post_init+0x6a>
 800706e:	4a3e      	ldr	r2, [pc, #248]	; (8007168 <ai_platform_network_post_init+0x108>)
 8007070:	6813      	ldr	r3, [r2, #0]
 8007072:	f023 0301 	bic.w	r3, r3, #1
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	f7ff fd9e 	bl	8006bb8 <_ai_platform_acquire_crc>
 800707c:	4b3b      	ldr	r3, [pc, #236]	; (800716c <ai_platform_network_post_init+0x10c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007088:	d00d      	beq.n	80070a6 <ai_platform_network_post_init+0x46>
 800708a:	4b39      	ldr	r3, [pc, #228]	; (8007170 <ai_platform_network_post_init+0x110>)
 800708c:	2201      	movs	r2, #1
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	2a00      	cmp	r2, #0
 8007094:	d1fc      	bne.n	8007090 <ai_platform_network_post_init+0x30>
 8007096:	4b37      	ldr	r3, [pc, #220]	; (8007174 <ai_platform_network_post_init+0x114>)
 8007098:	4a37      	ldr	r2, [pc, #220]	; (8007178 <ai_platform_network_post_init+0x118>)
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4b37      	ldr	r3, [pc, #220]	; (800717c <ai_platform_network_post_init+0x11c>)
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d00d      	beq.n	80070c0 <ai_platform_network_post_init+0x60>
 80070a4:	e7fe      	b.n	80070a4 <ai_platform_network_post_init+0x44>
 80070a6:	4b36      	ldr	r3, [pc, #216]	; (8007180 <ai_platform_network_post_init+0x120>)
 80070a8:	2201      	movs	r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	d1fc      	bne.n	80070ac <ai_platform_network_post_init+0x4c>
 80070b2:	4b34      	ldr	r3, [pc, #208]	; (8007184 <ai_platform_network_post_init+0x124>)
 80070b4:	4a30      	ldr	r2, [pc, #192]	; (8007178 <ai_platform_network_post_init+0x118>)
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b30      	ldr	r3, [pc, #192]	; (800717c <ai_platform_network_post_init+0x11c>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d103      	bne.n	80070c8 <ai_platform_network_post_init+0x68>
 80070c0:	f7ff fd7c 	bl	8006bbc <_ai_platform_release_crc>
 80070c4:	2000      	movs	r0, #0
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	e7fe      	b.n	80070c8 <ai_platform_network_post_init+0x68>
 80070ca:	4a27      	ldr	r2, [pc, #156]	; (8007168 <ai_platform_network_post_init+0x108>)
 80070cc:	6813      	ldr	r3, [r2, #0]
 80070ce:	f023 0301 	bic.w	r3, r3, #1
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	f7ff fd70 	bl	8006bb8 <_ai_platform_acquire_crc>
 80070d8:	4b24      	ldr	r3, [pc, #144]	; (800716c <ai_platform_network_post_init+0x10c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e4:	d00d      	beq.n	8007102 <ai_platform_network_post_init+0xa2>
 80070e6:	4b22      	ldr	r3, [pc, #136]	; (8007170 <ai_platform_network_post_init+0x110>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	2a00      	cmp	r2, #0
 80070f0:	d1fc      	bne.n	80070ec <ai_platform_network_post_init+0x8c>
 80070f2:	4b20      	ldr	r3, [pc, #128]	; (8007174 <ai_platform_network_post_init+0x114>)
 80070f4:	4a20      	ldr	r2, [pc, #128]	; (8007178 <ai_platform_network_post_init+0x118>)
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <ai_platform_network_post_init+0x11c>)
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d00e      	beq.n	800711e <ai_platform_network_post_init+0xbe>
 8007100:	e7fe      	b.n	8007100 <ai_platform_network_post_init+0xa0>
 8007102:	4b1f      	ldr	r3, [pc, #124]	; (8007180 <ai_platform_network_post_init+0x120>)
 8007104:	2201      	movs	r2, #1
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	2a00      	cmp	r2, #0
 800710c:	d1fc      	bne.n	8007108 <ai_platform_network_post_init+0xa8>
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <ai_platform_network_post_init+0x124>)
 8007110:	4a19      	ldr	r2, [pc, #100]	; (8007178 <ai_platform_network_post_init+0x118>)
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b19      	ldr	r3, [pc, #100]	; (800717c <ai_platform_network_post_init+0x11c>)
 8007118:	429a      	cmp	r2, r3
 800711a:	d000      	beq.n	800711e <ai_platform_network_post_init+0xbe>
 800711c:	e7fe      	b.n	800711c <ai_platform_network_post_init+0xbc>
 800711e:	f7ff fd4d 	bl	8006bbc <_ai_platform_release_crc>
 8007122:	68e3      	ldr	r3, [r4, #12]
 8007124:	f013 0502 	ands.w	r5, r3, #2
 8007128:	d011      	beq.n	800714e <ai_platform_network_post_init+0xee>
 800712a:	4620      	mov	r0, r4
 800712c:	f002 fad8 	bl	80096e0 <ai_layers_post_init_all>
 8007130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007132:	b1a3      	cbz	r3, 800715e <ai_platform_network_post_init+0xfe>
 8007134:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007136:	b195      	cbz	r5, 800715e <ai_platform_network_post_init+0xfe>
 8007138:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800713a:	4629      	mov	r1, r5
 800713c:	2000      	movs	r0, #0
 800713e:	4798      	blx	r3
 8007140:	692b      	ldr	r3, [r5, #16]
 8007142:	42ab      	cmp	r3, r5
 8007144:	d00b      	beq.n	800715e <ai_platform_network_post_init+0xfe>
 8007146:	461d      	mov	r5, r3
 8007148:	b14b      	cbz	r3, 800715e <ai_platform_network_post_init+0xfe>
 800714a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800714c:	e7f4      	b.n	8007138 <ai_platform_network_post_init+0xd8>
 800714e:	f104 0010 	add.w	r0, r4, #16
 8007152:	2210      	movs	r2, #16
 8007154:	2111      	movs	r1, #17
 8007156:	f000 fa97 	bl	8007688 <core_set_error>
 800715a:	4628      	mov	r0, r5
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	2001      	movs	r0, #1
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	bf00      	nop
 8007164:	a1c00100 	.word	0xa1c00100
 8007168:	e0002000 	.word	0xe0002000
 800716c:	e0042000 	.word	0xe0042000
 8007170:	58024c08 	.word	0x58024c08
 8007174:	58024c00 	.word	0x58024c00
 8007178:	f407a5c2 	.word	0xf407a5c2
 800717c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007180:	40023008 	.word	0x40023008
 8007184:	40023000 	.word	0x40023000

08007188 <ai_platform_network_process>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	b085      	sub	sp, #20
 800718e:	460d      	mov	r5, r1
 8007190:	9202      	str	r2, [sp, #8]
 8007192:	4604      	mov	r4, r0
 8007194:	b120      	cbz	r0, 80071a0 <ai_platform_network_process+0x18>
 8007196:	4b7b      	ldr	r3, [pc, #492]	; (8007384 <ai_platform_network_process+0x1fc>)
 8007198:	6802      	ldr	r2, [r0, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	bf18      	it	ne
 800719e:	2400      	movne	r4, #0
 80071a0:	4a79      	ldr	r2, [pc, #484]	; (8007388 <ai_platform_network_process+0x200>)
 80071a2:	6813      	ldr	r3, [r2, #0]
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	f7ff fd05 	bl	8006bb8 <_ai_platform_acquire_crc>
 80071ae:	4b77      	ldr	r3, [pc, #476]	; (800738c <ai_platform_network_process+0x204>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ba:	d00d      	beq.n	80071d8 <ai_platform_network_process+0x50>
 80071bc:	4b74      	ldr	r3, [pc, #464]	; (8007390 <ai_platform_network_process+0x208>)
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	2a00      	cmp	r2, #0
 80071c6:	d1fc      	bne.n	80071c2 <ai_platform_network_process+0x3a>
 80071c8:	4b72      	ldr	r3, [pc, #456]	; (8007394 <ai_platform_network_process+0x20c>)
 80071ca:	4a73      	ldr	r2, [pc, #460]	; (8007398 <ai_platform_network_process+0x210>)
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4b72      	ldr	r3, [pc, #456]	; (800739c <ai_platform_network_process+0x214>)
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d00e      	beq.n	80071f4 <ai_platform_network_process+0x6c>
 80071d6:	e7fe      	b.n	80071d6 <ai_platform_network_process+0x4e>
 80071d8:	4b71      	ldr	r3, [pc, #452]	; (80073a0 <ai_platform_network_process+0x218>)
 80071da:	2201      	movs	r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	d1fc      	bne.n	80071de <ai_platform_network_process+0x56>
 80071e4:	4b6f      	ldr	r3, [pc, #444]	; (80073a4 <ai_platform_network_process+0x21c>)
 80071e6:	4a6c      	ldr	r2, [pc, #432]	; (8007398 <ai_platform_network_process+0x210>)
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	4b6b      	ldr	r3, [pc, #428]	; (800739c <ai_platform_network_process+0x214>)
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d000      	beq.n	80071f4 <ai_platform_network_process+0x6c>
 80071f2:	e7fe      	b.n	80071f2 <ai_platform_network_process+0x6a>
 80071f4:	f7ff fce2 	bl	8006bbc <_ai_platform_release_crc>
 80071f8:	2c00      	cmp	r4, #0
 80071fa:	f000 808e 	beq.w	800731a <ai_platform_network_process+0x192>
 80071fe:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8007200:	2f00      	cmp	r7, #0
 8007202:	f040 823c 	bne.w	800767e <ai_platform_network_process+0x4f6>
 8007206:	68e3      	ldr	r3, [r4, #12]
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	f04f 0b00 	mov.w	fp, #0
 8007210:	2b03      	cmp	r3, #3
 8007212:	f8c4 b014 	str.w	fp, [r4, #20]
 8007216:	f040 822b 	bne.w	8007670 <ai_platform_network_process+0x4e8>
 800721a:	2d00      	cmp	r5, #0
 800721c:	f000 80a8 	beq.w	8007370 <ai_platform_network_process+0x1e8>
 8007220:	2f00      	cmp	r7, #0
 8007222:	f000 80a5 	beq.w	8007370 <ai_platform_network_process+0x1e8>
 8007226:	883b      	ldrh	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80a1 	beq.w	8007370 <ai_platform_network_process+0x1e8>
 800722e:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8007232:	9401      	str	r4, [sp, #4]
 8007234:	46d8      	mov	r8, fp
 8007236:	4598      	cmp	r8, r3
 8007238:	f080 80b6 	bcs.w	80073a8 <ai_platform_network_process+0x220>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80b2 	beq.w	80073a8 <ai_platform_network_process+0x220>
 8007244:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8007248:	2e00      	cmp	r6, #0
 800724a:	f000 80ad 	beq.w	80073a8 <ai_platform_network_process+0x220>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	9303      	str	r3, [sp, #12]
 8007254:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8007258:	eb13 0a04 	adds.w	sl, r3, r4
 800725c:	f000 8087 	beq.w	800736e <ai_platform_network_process+0x1e6>
 8007260:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8007264:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8007268:	69b0      	ldr	r0, [r6, #24]
 800726a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800726e:	6841      	ldr	r1, [r0, #4]
 8007270:	fb0b f30e 	mul.w	r3, fp, lr
 8007274:	fb0c f303 	mul.w	r3, ip, r3
 8007278:	4299      	cmp	r1, r3
 800727a:	d36e      	bcc.n	800735a <ai_platform_network_process+0x1d2>
 800727c:	68f3      	ldr	r3, [r6, #12]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	455a      	cmp	r2, fp
 8007282:	d16a      	bne.n	800735a <ai_platform_network_process+0x1d2>
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	4572      	cmp	r2, lr
 8007288:	d167      	bne.n	800735a <ai_platform_network_process+0x1d2>
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	459c      	cmp	ip, r3
 800728e:	d164      	bne.n	800735a <ai_platform_network_process+0x1d2>
 8007290:	6800      	ldr	r0, [r0, #0]
 8007292:	f002 fae3 	bl	800985c <ai_array_get_byte_size>
 8007296:	68f2      	ldr	r2, [r6, #12]
 8007298:	6973      	ldr	r3, [r6, #20]
 800729a:	68d2      	ldr	r2, [r2, #12]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	fb03 f302 	mul.w	r3, r3, r2
 80072a2:	4298      	cmp	r0, r3
 80072a4:	d359      	bcc.n	800735a <ai_platform_network_process+0x1d2>
 80072a6:	69b3      	ldr	r3, [r6, #24]
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	f002 fa7f 	bl	80097ac <ai_array_to_buffer_fmt>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	4043      	eors	r3, r0
 80072b2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80072b6:	d146      	bne.n	8007346 <ai_platform_network_process+0x1be>
 80072b8:	692b      	ldr	r3, [r5, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d03a      	beq.n	8007334 <ai_platform_network_process+0x1ac>
 80072be:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 80072c2:	f1bb 0f00 	cmp.w	fp, #0
 80072c6:	d02d      	beq.n	8007324 <ai_platform_network_process+0x19c>
 80072c8:	68f2      	ldr	r2, [r6, #12]
 80072ca:	6973      	ldr	r3, [r6, #20]
 80072cc:	68d1      	ldr	r1, [r2, #12]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	fb02 f201 	mul.w	r2, r2, r1
 80072d4:	f8ca 2008 	str.w	r2, [sl, #8]
 80072d8:	88ab      	ldrh	r3, [r5, #4]
 80072da:	fb02 f203 	mul.w	r2, r2, r3
 80072de:	f8ca 200c 	str.w	r2, [sl, #12]
 80072e2:	6929      	ldr	r1, [r5, #16]
 80072e4:	f8ca 1004 	str.w	r1, [sl, #4]
 80072e8:	692b      	ldr	r3, [r5, #16]
 80072ea:	4413      	add	r3, r2
 80072ec:	9a03      	ldr	r2, [sp, #12]
 80072ee:	5113      	str	r3, [r2, r4]
 80072f0:	69b0      	ldr	r0, [r6, #24]
 80072f2:	6803      	ldr	r3, [r0, #0]
 80072f4:	45d9      	cmp	r9, fp
 80072f6:	bf38      	it	cc
 80072f8:	46d9      	movcc	r9, fp
 80072fa:	009a      	lsls	r2, r3, #2
 80072fc:	d408      	bmi.n	8007310 <ai_platform_network_process+0x188>
 80072fe:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	4419      	add	r1, r3
 8007306:	6081      	str	r1, [r0, #8]
 8007308:	69b3      	ldr	r3, [r6, #24]
 800730a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800730e:	60da      	str	r2, [r3, #12]
 8007310:	883b      	ldrh	r3, [r7, #0]
 8007312:	f108 0801 	add.w	r8, r8, #1
 8007316:	3518      	adds	r5, #24
 8007318:	e78d      	b.n	8007236 <ai_platform_network_process+0xae>
 800731a:	46a3      	mov	fp, r4
 800731c:	4658      	mov	r0, fp
 800731e:	b005      	add	sp, #20
 8007320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007324:	9c01      	ldr	r4, [sp, #4]
 8007326:	2221      	movs	r2, #33	; 0x21
 8007328:	f104 0010 	add.w	r0, r4, #16
 800732c:	2112      	movs	r1, #18
 800732e:	f000 f9ab 	bl	8007688 <core_set_error>
 8007332:	e7f3      	b.n	800731c <ai_platform_network_process+0x194>
 8007334:	9c01      	ldr	r4, [sp, #4]
 8007336:	2217      	movs	r2, #23
 8007338:	f104 0010 	add.w	r0, r4, #16
 800733c:	2112      	movs	r1, #18
 800733e:	469b      	mov	fp, r3
 8007340:	f000 f9a2 	bl	8007688 <core_set_error>
 8007344:	e7ea      	b.n	800731c <ai_platform_network_process+0x194>
 8007346:	9c01      	ldr	r4, [sp, #4]
 8007348:	2219      	movs	r2, #25
 800734a:	f104 0010 	add.w	r0, r4, #16
 800734e:	2112      	movs	r1, #18
 8007350:	f000 f99a 	bl	8007688 <core_set_error>
 8007354:	f04f 0b00 	mov.w	fp, #0
 8007358:	e7e0      	b.n	800731c <ai_platform_network_process+0x194>
 800735a:	9c01      	ldr	r4, [sp, #4]
 800735c:	2218      	movs	r2, #24
 800735e:	f104 0010 	add.w	r0, r4, #16
 8007362:	2112      	movs	r1, #18
 8007364:	f000 f990 	bl	8007688 <core_set_error>
 8007368:	f04f 0b00 	mov.w	fp, #0
 800736c:	e7d6      	b.n	800731c <ai_platform_network_process+0x194>
 800736e:	9c01      	ldr	r4, [sp, #4]
 8007370:	f104 0010 	add.w	r0, r4, #16
 8007374:	2217      	movs	r2, #23
 8007376:	2112      	movs	r1, #18
 8007378:	f000 f986 	bl	8007688 <core_set_error>
 800737c:	f04f 0b00 	mov.w	fp, #0
 8007380:	e7cc      	b.n	800731c <ai_platform_network_process+0x194>
 8007382:	bf00      	nop
 8007384:	a1c00100 	.word	0xa1c00100
 8007388:	e0002000 	.word	0xe0002000
 800738c:	e0042000 	.word	0xe0042000
 8007390:	58024c08 	.word	0x58024c08
 8007394:	58024c00 	.word	0x58024c00
 8007398:	f407a5c2 	.word	0xf407a5c2
 800739c:	b5e8b5cd 	.word	0xb5e8b5cd
 80073a0:	40023008 	.word	0x40023008
 80073a4:	40023000 	.word	0x40023000
 80073a8:	9c01      	ldr	r4, [sp, #4]
 80073aa:	9a02      	ldr	r2, [sp, #8]
 80073ac:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	f000 80a9 	beq.w	8007506 <ai_platform_network_process+0x37e>
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	f240 809b 	bls.w	80074f0 <ai_platform_network_process+0x368>
 80073ba:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80073be:	f11a 0f0c 	cmn.w	sl, #12
 80073c2:	f000 8095 	beq.w	80074f0 <ai_platform_network_process+0x368>
 80073c6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8090 	beq.w	80074f0 <ai_platform_network_process+0x368>
 80073d0:	9d02      	ldr	r5, [sp, #8]
 80073d2:	9401      	str	r4, [sp, #4]
 80073d4:	f04f 0800 	mov.w	r8, #0
 80073d8:	4598      	cmp	r8, r3
 80073da:	f080 8092 	bcs.w	8007502 <ai_platform_network_process+0x37a>
 80073de:	f8da 3010 	ldr.w	r3, [sl, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 808d 	beq.w	8007502 <ai_platform_network_process+0x37a>
 80073e8:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	f000 8088 	beq.w	8007502 <ai_platform_network_process+0x37a>
 80073f2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	9302      	str	r3, [sp, #8]
 80073fa:	ea4f 1408 	mov.w	r4, r8, lsl #4
 80073fe:	191f      	adds	r7, r3, r4
 8007400:	f000 812d 	beq.w	800765e <ai_platform_network_process+0x4d6>
 8007404:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8007408:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800740c:	69b0      	ldr	r0, [r6, #24]
 800740e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8007412:	6841      	ldr	r1, [r0, #4]
 8007414:	fb0b f30e 	mul.w	r3, fp, lr
 8007418:	fb0c f303 	mul.w	r3, ip, r3
 800741c:	4299      	cmp	r1, r3
 800741e:	d366      	bcc.n	80074ee <ai_platform_network_process+0x366>
 8007420:	68f3      	ldr	r3, [r6, #12]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	455a      	cmp	r2, fp
 8007426:	d162      	bne.n	80074ee <ai_platform_network_process+0x366>
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	4572      	cmp	r2, lr
 800742c:	d15f      	bne.n	80074ee <ai_platform_network_process+0x366>
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	459c      	cmp	ip, r3
 8007432:	d15c      	bne.n	80074ee <ai_platform_network_process+0x366>
 8007434:	6800      	ldr	r0, [r0, #0]
 8007436:	f002 fa11 	bl	800985c <ai_array_get_byte_size>
 800743a:	68f2      	ldr	r2, [r6, #12]
 800743c:	6973      	ldr	r3, [r6, #20]
 800743e:	68d2      	ldr	r2, [r2, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	fb03 f302 	mul.w	r3, r3, r2
 8007446:	4298      	cmp	r0, r3
 8007448:	d351      	bcc.n	80074ee <ai_platform_network_process+0x366>
 800744a:	69b3      	ldr	r3, [r6, #24]
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	f002 f9ad 	bl	80097ac <ai_array_to_buffer_fmt>
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	4043      	eors	r3, r0
 8007456:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800745a:	d13e      	bne.n	80074da <ai_platform_network_process+0x352>
 800745c:	692b      	ldr	r3, [r5, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d032      	beq.n	80074c8 <ai_platform_network_process+0x340>
 8007462:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8007466:	f1bb 0f00 	cmp.w	fp, #0
 800746a:	d025      	beq.n	80074b8 <ai_platform_network_process+0x330>
 800746c:	68f2      	ldr	r2, [r6, #12]
 800746e:	6973      	ldr	r3, [r6, #20]
 8007470:	68d1      	ldr	r1, [r2, #12]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	fb02 f201 	mul.w	r2, r2, r1
 8007478:	60ba      	str	r2, [r7, #8]
 800747a:	88ab      	ldrh	r3, [r5, #4]
 800747c:	fb02 f203 	mul.w	r2, r2, r3
 8007480:	60fa      	str	r2, [r7, #12]
 8007482:	6929      	ldr	r1, [r5, #16]
 8007484:	6079      	str	r1, [r7, #4]
 8007486:	692b      	ldr	r3, [r5, #16]
 8007488:	4413      	add	r3, r2
 800748a:	9a02      	ldr	r2, [sp, #8]
 800748c:	5113      	str	r3, [r2, r4]
 800748e:	69b0      	ldr	r0, [r6, #24]
 8007490:	6803      	ldr	r3, [r0, #0]
 8007492:	45d9      	cmp	r9, fp
 8007494:	bf38      	it	cc
 8007496:	46d9      	movcc	r9, fp
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	d407      	bmi.n	80074ac <ai_platform_network_process+0x324>
 800749c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	4419      	add	r1, r3
 80074a4:	6081      	str	r1, [r0, #8]
 80074a6:	69b3      	ldr	r3, [r6, #24]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]
 80074ac:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80074b0:	f108 0801 	add.w	r8, r8, #1
 80074b4:	3518      	adds	r5, #24
 80074b6:	e78f      	b.n	80073d8 <ai_platform_network_process+0x250>
 80074b8:	9c01      	ldr	r4, [sp, #4]
 80074ba:	2221      	movs	r2, #33	; 0x21
 80074bc:	f104 0010 	add.w	r0, r4, #16
 80074c0:	2113      	movs	r1, #19
 80074c2:	f000 f8e1 	bl	8007688 <core_set_error>
 80074c6:	e729      	b.n	800731c <ai_platform_network_process+0x194>
 80074c8:	9c01      	ldr	r4, [sp, #4]
 80074ca:	2217      	movs	r2, #23
 80074cc:	f104 0010 	add.w	r0, r4, #16
 80074d0:	2113      	movs	r1, #19
 80074d2:	469b      	mov	fp, r3
 80074d4:	f000 f8d8 	bl	8007688 <core_set_error>
 80074d8:	e720      	b.n	800731c <ai_platform_network_process+0x194>
 80074da:	9c01      	ldr	r4, [sp, #4]
 80074dc:	2219      	movs	r2, #25
 80074de:	f104 0010 	add.w	r0, r4, #16
 80074e2:	2113      	movs	r1, #19
 80074e4:	f000 f8d0 	bl	8007688 <core_set_error>
 80074e8:	f04f 0b00 	mov.w	fp, #0
 80074ec:	e716      	b.n	800731c <ai_platform_network_process+0x194>
 80074ee:	9c01      	ldr	r4, [sp, #4]
 80074f0:	f104 0010 	add.w	r0, r4, #16
 80074f4:	2218      	movs	r2, #24
 80074f6:	2113      	movs	r1, #19
 80074f8:	f000 f8c6 	bl	8007688 <core_set_error>
 80074fc:	f04f 0b00 	mov.w	fp, #0
 8007500:	e70c      	b.n	800731c <ai_platform_network_process+0x194>
 8007502:	9c01      	ldr	r4, [sp, #4]
 8007504:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007506:	f8a4 9014 	strh.w	r9, [r4, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 80a4 	beq.w	8007658 <ai_platform_network_process+0x4d0>
 8007510:	2b01      	cmp	r3, #1
 8007512:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007514:	f240 809e 	bls.w	8007654 <ai_platform_network_process+0x4cc>
 8007518:	f105 070c 	add.w	r7, r5, #12
 800751c:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8007520:	8aa3      	ldrh	r3, [r4, #20]
 8007522:	455b      	cmp	r3, fp
 8007524:	f67f aefa 	bls.w	800731c <ai_platform_network_process+0x194>
 8007528:	9401      	str	r4, [sp, #4]
 800752a:	2d00      	cmp	r5, #0
 800752c:	d036      	beq.n	800759c <ai_platform_network_process+0x414>
 800752e:	882b      	ldrh	r3, [r5, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d033      	beq.n	800759c <ai_platform_network_process+0x414>
 8007534:	686b      	ldr	r3, [r5, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d030      	beq.n	800759c <ai_platform_network_process+0x414>
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f04f 0800 	mov.w	r8, #0
 8007540:	b9db      	cbnz	r3, 800757a <ai_platform_network_process+0x3f2>
 8007542:	e02b      	b.n	800759c <ai_platform_network_process+0x414>
 8007544:	68d4      	ldr	r4, [r2, #12]
 8007546:	1b00      	subs	r0, r0, r4
 8007548:	4401      	add	r1, r0
 800754a:	6091      	str	r1, [r2, #8]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	6872      	ldr	r2, [r6, #4]
 8007550:	60da      	str	r2, [r3, #12]
 8007552:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007556:	f85a 2009 	ldr.w	r2, [sl, r9]
 800755a:	440b      	add	r3, r1
 800755c:	4293      	cmp	r3, r2
 800755e:	bf24      	itt	cs
 8007560:	68f3      	ldrcs	r3, [r6, #12]
 8007562:	1ad3      	subcs	r3, r2, r3
 8007564:	6073      	str	r3, [r6, #4]
 8007566:	882b      	ldrh	r3, [r5, #0]
 8007568:	f108 0801 	add.w	r8, r8, #1
 800756c:	4598      	cmp	r8, r3
 800756e:	d215      	bcs.n	800759c <ai_platform_network_process+0x414>
 8007570:	686b      	ldr	r3, [r5, #4]
 8007572:	b19b      	cbz	r3, 800759c <ai_platform_network_process+0x414>
 8007574:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007578:	b183      	cbz	r3, 800759c <ai_platform_network_process+0x414>
 800757a:	68a9      	ldr	r1, [r5, #8]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	f8d1 a000 	ldr.w	sl, [r1]
 8007582:	6814      	ldr	r4, [r2, #0]
 8007584:	6890      	ldr	r0, [r2, #8]
 8007586:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800758a:	eb0a 0609 	add.w	r6, sl, r9
 800758e:	00a4      	lsls	r4, r4, #2
 8007590:	6871      	ldr	r1, [r6, #4]
 8007592:	d5d7      	bpl.n	8007544 <ai_platform_network_process+0x3bc>
 8007594:	68b2      	ldr	r2, [r6, #8]
 8007596:	f002 f9e5 	bl	8009964 <memcpy>
 800759a:	e7da      	b.n	8007552 <ai_platform_network_process+0x3ca>
 800759c:	9801      	ldr	r0, [sp, #4]
 800759e:	f002 f8b7 	bl	8009710 <ai_layers_forward_all>
 80075a2:	2f00      	cmp	r7, #0
 80075a4:	d047      	beq.n	8007636 <ai_platform_network_process+0x4ae>
 80075a6:	883b      	ldrh	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d044      	beq.n	8007636 <ai_platform_network_process+0x4ae>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d041      	beq.n	8007636 <ai_platform_network_process+0x4ae>
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d03e      	beq.n	8007636 <ai_platform_network_process+0x4ae>
 80075b8:	f04f 0800 	mov.w	r8, #0
 80075bc:	e019      	b.n	80075f2 <ai_platform_network_process+0x46a>
 80075be:	f85a 2009 	ldr.w	r2, [sl, r9]
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bf24      	itt	cs
 80075c6:	68f3      	ldrcs	r3, [r6, #12]
 80075c8:	1ad3      	subcs	r3, r2, r3
 80075ca:	6073      	str	r3, [r6, #4]
 80075cc:	6981      	ldr	r1, [r0, #24]
 80075ce:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80075d2:	1b12      	subs	r2, r2, r4
 80075d4:	4413      	add	r3, r2
 80075d6:	608b      	str	r3, [r1, #8]
 80075d8:	6983      	ldr	r3, [r0, #24]
 80075da:	6872      	ldr	r2, [r6, #4]
 80075dc:	60da      	str	r2, [r3, #12]
 80075de:	883b      	ldrh	r3, [r7, #0]
 80075e0:	f108 0801 	add.w	r8, r8, #1
 80075e4:	4598      	cmp	r8, r3
 80075e6:	d226      	bcs.n	8007636 <ai_platform_network_process+0x4ae>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	b323      	cbz	r3, 8007636 <ai_platform_network_process+0x4ae>
 80075ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80075f0:	b308      	cbz	r0, 8007636 <ai_platform_network_process+0x4ae>
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6981      	ldr	r1, [r0, #24]
 80075f6:	f8d3 a000 	ldr.w	sl, [r3]
 80075fa:	680c      	ldr	r4, [r1, #0]
 80075fc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007600:	eb0a 0609 	add.w	r6, sl, r9
 8007604:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007608:	00a4      	lsls	r4, r4, #2
 800760a:	eb0c 0302 	add.w	r3, ip, r2
 800760e:	d5d6      	bpl.n	80075be <ai_platform_network_process+0x436>
 8007610:	6889      	ldr	r1, [r1, #8]
 8007612:	4660      	mov	r0, ip
 8007614:	f002 f9a6 	bl	8009964 <memcpy>
 8007618:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800761c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007620:	440b      	add	r3, r1
 8007622:	4293      	cmp	r3, r2
 8007624:	bf24      	itt	cs
 8007626:	68f3      	ldrcs	r3, [r6, #12]
 8007628:	1ad3      	subcs	r3, r2, r3
 800762a:	6073      	str	r3, [r6, #4]
 800762c:	883b      	ldrh	r3, [r7, #0]
 800762e:	f108 0801 	add.w	r8, r8, #1
 8007632:	4598      	cmp	r8, r3
 8007634:	d3d8      	bcc.n	80075e8 <ai_platform_network_process+0x460>
 8007636:	9b01      	ldr	r3, [sp, #4]
 8007638:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800763c:	461a      	mov	r2, r3
 800763e:	f10b 0b01 	add.w	fp, fp, #1
 8007642:	8a9b      	ldrh	r3, [r3, #20]
 8007644:	fa1f fb8b 	uxth.w	fp, fp
 8007648:	455b      	cmp	r3, fp
 800764a:	f8a2 b016 	strh.w	fp, [r2, #22]
 800764e:	f63f af6c 	bhi.w	800752a <ai_platform_network_process+0x3a2>
 8007652:	e663      	b.n	800731c <ai_platform_network_process+0x194>
 8007654:	2700      	movs	r7, #0
 8007656:	e761      	b.n	800751c <ai_platform_network_process+0x394>
 8007658:	461d      	mov	r5, r3
 800765a:	461f      	mov	r7, r3
 800765c:	e75e      	b.n	800751c <ai_platform_network_process+0x394>
 800765e:	9c01      	ldr	r4, [sp, #4]
 8007660:	2217      	movs	r2, #23
 8007662:	f104 0010 	add.w	r0, r4, #16
 8007666:	2113      	movs	r1, #19
 8007668:	f000 f80e 	bl	8007688 <core_set_error>
 800766c:	46bb      	mov	fp, r7
 800766e:	e655      	b.n	800731c <ai_platform_network_process+0x194>
 8007670:	f104 0010 	add.w	r0, r4, #16
 8007674:	2230      	movs	r2, #48	; 0x30
 8007676:	2111      	movs	r1, #17
 8007678:	f000 f806 	bl	8007688 <core_set_error>
 800767c:	e64e      	b.n	800731c <ai_platform_network_process+0x194>
 800767e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007680:	e5c1      	b.n	8007206 <ai_platform_network_process+0x7e>
 8007682:	bf00      	nop

08007684 <core_init>:
 8007684:	2001      	movs	r0, #1
 8007686:	4770      	bx	lr

08007688 <core_set_error>:
 8007688:	7803      	ldrb	r3, [r0, #0]
 800768a:	b933      	cbnz	r3, 800769a <core_set_error+0x12>
 800768c:	7001      	strb	r1, [r0, #0]
 800768e:	6803      	ldr	r3, [r0, #0]
 8007690:	f362 231f 	bfi	r3, r2, #8, #24
 8007694:	6003      	str	r3, [r0, #0]
 8007696:	2001      	movs	r0, #1
 8007698:	4770      	bx	lr
 800769a:	2000      	movs	r0, #0
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop

080076a0 <func_dummy>:
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop

080076a4 <ai_dict8_dot_array_f32>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80076ac:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80076b0:	f000 80c0 	beq.w	8007834 <ai_dict8_dot_array_f32+0x190>
 80076b4:	f101 0408 	add.w	r4, r1, #8
 80076b8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80076bc:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800783c <ai_dict8_dot_array_f32+0x198>
 80076c0:	eb04 0e09 	add.w	lr, r4, r9
 80076c4:	f103 0520 	add.w	r5, r3, #32
 80076c8:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80076cc:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80076d0:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80076d4:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80076d8:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80076dc:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80076e0:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80076e4:	ed55 3a04 	vldr	s7, [r5, #-16]
 80076e8:	ed55 4a03 	vldr	s9, [r5, #-12]
 80076ec:	ed55 5a02 	vldr	s11, [r5, #-8]
 80076f0:	ed55 6a01 	vldr	s13, [r5, #-4]
 80076f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80076f8:	edd6 7a00 	vldr	s15, [r6]
 80076fc:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8007700:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007704:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007708:	ed9a 3a00 	vldr	s6, [sl]
 800770c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8007710:	eee3 7a05 	vfma.f32	s15, s6, s10
 8007714:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007718:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800771c:	ed97 3a00 	vldr	s6, [r7]
 8007720:	ed96 5a00 	vldr	s10, [r6]
 8007724:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8007728:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800772c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007730:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007734:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007738:	ed9a 3a00 	vldr	s6, [sl]
 800773c:	ed96 4a00 	vldr	s8, [r6]
 8007740:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8007744:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007748:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800774c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007750:	ed97 5a00 	vldr	s10, [r7]
 8007754:	ed96 6a00 	vldr	s12, [r6]
 8007758:	eee3 7a23 	vfma.f32	s15, s6, s7
 800775c:	3408      	adds	r4, #8
 800775e:	45a6      	cmp	lr, r4
 8007760:	f105 0520 	add.w	r5, r5, #32
 8007764:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007768:	eee5 7a25 	vfma.f32	s15, s10, s11
 800776c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007774:	d1a8      	bne.n	80076c8 <ai_dict8_dot_array_f32+0x24>
 8007776:	4449      	add	r1, r9
 8007778:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800777c:	f01c 0c07 	ands.w	ip, ip, #7
 8007780:	d050      	beq.n	8007824 <ai_dict8_dot_array_f32+0x180>
 8007782:	780c      	ldrb	r4, [r1, #0]
 8007784:	edd3 6a00 	vldr	s13, [r3]
 8007788:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800778c:	edd4 7a00 	vldr	s15, [r4]
 8007790:	f1bc 0f01 	cmp.w	ip, #1
 8007794:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007798:	d044      	beq.n	8007824 <ai_dict8_dot_array_f32+0x180>
 800779a:	784c      	ldrb	r4, [r1, #1]
 800779c:	edd3 6a01 	vldr	s13, [r3, #4]
 80077a0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80077a4:	edd4 7a00 	vldr	s15, [r4]
 80077a8:	f1bc 0f02 	cmp.w	ip, #2
 80077ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077b0:	d038      	beq.n	8007824 <ai_dict8_dot_array_f32+0x180>
 80077b2:	788c      	ldrb	r4, [r1, #2]
 80077b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80077b8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80077bc:	edd4 7a00 	vldr	s15, [r4]
 80077c0:	f1bc 0f03 	cmp.w	ip, #3
 80077c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077c8:	d02c      	beq.n	8007824 <ai_dict8_dot_array_f32+0x180>
 80077ca:	78cc      	ldrb	r4, [r1, #3]
 80077cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80077d0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80077d4:	edd4 7a00 	vldr	s15, [r4]
 80077d8:	f1bc 0f04 	cmp.w	ip, #4
 80077dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077e0:	d020      	beq.n	8007824 <ai_dict8_dot_array_f32+0x180>
 80077e2:	790c      	ldrb	r4, [r1, #4]
 80077e4:	edd3 6a04 	vldr	s13, [r3, #16]
 80077e8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80077ec:	edd4 7a00 	vldr	s15, [r4]
 80077f0:	f1bc 0f05 	cmp.w	ip, #5
 80077f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077f8:	d014      	beq.n	8007824 <ai_dict8_dot_array_f32+0x180>
 80077fa:	794c      	ldrb	r4, [r1, #5]
 80077fc:	edd3 6a05 	vldr	s13, [r3, #20]
 8007800:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007804:	edd4 7a00 	vldr	s15, [r4]
 8007808:	f1bc 0f06 	cmp.w	ip, #6
 800780c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007810:	d008      	beq.n	8007824 <ai_dict8_dot_array_f32+0x180>
 8007812:	7989      	ldrb	r1, [r1, #6]
 8007814:	edd3 7a06 	vldr	s15, [r3, #24]
 8007818:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800781c:	edd2 6a00 	vldr	s13, [r2]
 8007820:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007824:	edd0 7a00 	vldr	s15, [r0]
 8007828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800782c:	ed80 7a00 	vstr	s14, [r0]
 8007830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007834:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800783c <ai_dict8_dot_array_f32+0x198>
 8007838:	e7a0      	b.n	800777c <ai_dict8_dot_array_f32+0xd8>
 800783a:	bf00      	nop
 800783c:	00000000 	.word	0x00000000

08007840 <ai_dict4_dot_array_f32>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007846:	f027 0c01 	bic.w	ip, r7, #1
 800784a:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800784e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007852:	f000 80ae 	beq.w	80079b2 <ai_dict4_dot_array_f32+0x172>
 8007856:	1d0d      	adds	r5, r1, #4
 8007858:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800785c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80079b8 <ai_dict4_dot_array_f32+0x178>
 8007860:	eb05 0e09 	add.w	lr, r5, r9
 8007864:	f103 0420 	add.w	r4, r3, #32
 8007868:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800786c:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8007870:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8007874:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8007878:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800787c:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8007880:	ed14 5a04 	vldr	s10, [r4, #-16]
 8007884:	ed54 5a03 	vldr	s11, [r4, #-12]
 8007888:	ed14 6a02 	vldr	s12, [r4, #-8]
 800788c:	ed54 6a01 	vldr	s13, [r4, #-4]
 8007890:	f006 0a0f 	and.w	sl, r6, #15
 8007894:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007898:	edda 7a00 	vldr	s15, [sl]
 800789c:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80078a0:	0936      	lsrs	r6, r6, #4
 80078a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078a6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80078aa:	ed96 3a00 	vldr	s6, [r6]
 80078ae:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80078b2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80078b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078ba:	f00b 0b0f 	and.w	fp, fp, #15
 80078be:	edd6 3a00 	vldr	s7, [r6]
 80078c2:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80078c6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80078ca:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80078ce:	3504      	adds	r5, #4
 80078d0:	ed9b 4a00 	vldr	s8, [fp]
 80078d4:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80078d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80078dc:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80078e0:	f00a 0a0f 	and.w	sl, sl, #15
 80078e4:	eddb 4a00 	vldr	s9, [fp]
 80078e8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80078ec:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80078f0:	45ae      	cmp	lr, r5
 80078f2:	ed9a 5a00 	vldr	s10, [sl]
 80078f6:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80078fa:	eee5 7a25 	vfma.f32	s15, s10, s11
 80078fe:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007902:	f006 060f 	and.w	r6, r6, #15
 8007906:	edda 5a00 	vldr	s11, [sl]
 800790a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800790e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007912:	f104 0420 	add.w	r4, r4, #32
 8007916:	ed96 6a00 	vldr	s12, [r6]
 800791a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800791e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007922:	d1a1      	bne.n	8007868 <ai_dict4_dot_array_f32+0x28>
 8007924:	4449      	add	r1, r9
 8007926:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800792a:	459c      	cmp	ip, r3
 800792c:	d92d      	bls.n	800798a <ai_dict4_dot_array_f32+0x14a>
 800792e:	f10c 0c07 	add.w	ip, ip, #7
 8007932:	f103 0508 	add.w	r5, r3, #8
 8007936:	ebac 0c05 	sub.w	ip, ip, r5
 800793a:	f02c 0407 	bic.w	r4, ip, #7
 800793e:	f103 0810 	add.w	r8, r3, #16
 8007942:	44a0      	add	r8, r4
 8007944:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8007948:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800794c:	ed15 6a01 	vldr	s12, [r5, #-4]
 8007950:	ed55 6a02 	vldr	s13, [r5, #-8]
 8007954:	f004 060f 	and.w	r6, r4, #15
 8007958:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800795c:	0924      	lsrs	r4, r4, #4
 800795e:	edd6 7a00 	vldr	s15, [r6]
 8007962:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007966:	ee67 7a86 	vmul.f32	s15, s15, s12
 800796a:	ed94 6a00 	vldr	s12, [r4]
 800796e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007972:	3508      	adds	r5, #8
 8007974:	45a8      	cmp	r8, r5
 8007976:	ee37 7a27 	vadd.f32	s14, s14, s15
 800797a:	d1e5      	bne.n	8007948 <ai_dict4_dot_array_f32+0x108>
 800797c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007980:	f10c 0c01 	add.w	ip, ip, #1
 8007984:	4461      	add	r1, ip
 8007986:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800798a:	07fc      	lsls	r4, r7, #31
 800798c:	d509      	bpl.n	80079a2 <ai_dict4_dot_array_f32+0x162>
 800798e:	7809      	ldrb	r1, [r1, #0]
 8007990:	edd3 7a00 	vldr	s15, [r3]
 8007994:	090b      	lsrs	r3, r1, #4
 8007996:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800799a:	edd2 6a00 	vldr	s13, [r2]
 800799e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079a2:	edd0 7a00 	vldr	s15, [r0]
 80079a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079aa:	ed80 7a00 	vstr	s14, [r0]
 80079ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b2:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80079b8 <ai_dict4_dot_array_f32+0x178>
 80079b6:	e7b8      	b.n	800792a <ai_dict4_dot_array_f32+0xea>
 80079b8:	00000000 	.word	0x00000000

080079bc <ai_dict_decompress_f32>:
 80079bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079c0:	9f08      	ldr	r7, [sp, #32]
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80079c8:	d00e      	beq.n	80079e8 <ai_dict_decompress_f32+0x2c>
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d10a      	bne.n	80079e4 <ai_dict_decompress_f32+0x28>
 80079ce:	42b8      	cmp	r0, r7
 80079d0:	d208      	bcs.n	80079e4 <ai_dict_decompress_f32+0x28>
 80079d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f840 3b04 	str.w	r3, [r0], #4
 80079e0:	4287      	cmp	r7, r0
 80079e2:	d8f6      	bhi.n	80079d2 <ai_dict_decompress_f32+0x16>
 80079e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079e8:	9b07      	ldr	r3, [sp, #28]
 80079ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80079ee:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80079f2:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 80079f6:	f003 0e01 	and.w	lr, r3, #1
 80079fa:	42b8      	cmp	r0, r7
 80079fc:	d2f2      	bcs.n	80079e4 <ai_dict_decompress_f32+0x28>
 80079fe:	f1bc 0f00 	cmp.w	ip, #0
 8007a02:	d01a      	beq.n	8007a3a <ai_dict_decompress_f32+0x7e>
 8007a04:	f100 0508 	add.w	r5, r0, #8
 8007a08:	1e4c      	subs	r4, r1, #1
 8007a0a:	eb01 0608 	add.w	r6, r1, r8
 8007a0e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a12:	091b      	lsrs	r3, r3, #4
 8007a14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a18:	42a6      	cmp	r6, r4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f845 3c08 	str.w	r3, [r5, #-8]
 8007a20:	7823      	ldrb	r3, [r4, #0]
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a2a:	f105 0508 	add.w	r5, r5, #8
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007a34:	d1eb      	bne.n	8007a0e <ai_dict_decompress_f32+0x52>
 8007a36:	4461      	add	r1, ip
 8007a38:	4448      	add	r0, r9
 8007a3a:	f1be 0f00 	cmp.w	lr, #0
 8007a3e:	d103      	bne.n	8007a48 <ai_dict_decompress_f32+0x8c>
 8007a40:	4287      	cmp	r7, r0
 8007a42:	d8dc      	bhi.n	80079fe <ai_dict_decompress_f32+0x42>
 8007a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a48:	780b      	ldrb	r3, [r1, #0]
 8007a4a:	091b      	lsrs	r3, r3, #4
 8007a4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a50:	3101      	adds	r1, #1
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6003      	str	r3, [r0, #0]
 8007a56:	3004      	adds	r0, #4
 8007a58:	e7cf      	b.n	80079fa <ai_dict_decompress_f32+0x3e>
 8007a5a:	bf00      	nop

08007a5c <forward_conv2d_nl_pool>:
 8007a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	ed2d 8b10 	vpush	{d8-d15}
 8007a64:	b0e1      	sub	sp, #388	; 0x184
 8007a66:	6983      	ldr	r3, [r0, #24]
 8007a68:	881e      	ldrh	r6, [r3, #0]
 8007a6a:	af0a      	add	r7, sp, #40	; 0x28
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	f000 859b 	beq.w	80085a8 <forward_conv2d_nl_pool+0xb4c>
 8007a72:	6859      	ldr	r1, [r3, #4]
 8007a74:	684a      	ldr	r2, [r1, #4]
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	f000 8593 	beq.w	80085a2 <forward_conv2d_nl_pool+0xb46>
 8007a7c:	f8d2 c000 	ldr.w	ip, [r2]
 8007a80:	2e01      	cmp	r6, #1
 8007a82:	f240 858b 	bls.w	800859c <forward_conv2d_nl_pool+0xb40>
 8007a86:	690a      	ldr	r2, [r1, #16]
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	f000 8582 	beq.w	8008592 <forward_conv2d_nl_pool+0xb36>
 8007a8e:	f8d2 9000 	ldr.w	r9, [r2]
 8007a92:	2e02      	cmp	r6, #2
 8007a94:	f000 8582 	beq.w	800859c <forward_conv2d_nl_pool+0xb40>
 8007a98:	69cd      	ldr	r5, [r1, #28]
 8007a9a:	2d00      	cmp	r5, #0
 8007a9c:	f000 8571 	beq.w	8008582 <forward_conv2d_nl_pool+0xb26>
 8007aa0:	682a      	ldr	r2, [r5, #0]
 8007aa2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8007aa6:	f111 0218 	adds.w	r2, r1, #24
 8007aaa:	d004      	beq.n	8007ab6 <forward_conv2d_nl_pool+0x5a>
 8007aac:	8b0a      	ldrh	r2, [r1, #24]
 8007aae:	2a01      	cmp	r2, #1
 8007ab0:	f240 857c 	bls.w	80085ac <forward_conv2d_nl_pool+0xb50>
 8007ab4:	686a      	ldr	r2, [r5, #4]
 8007ab6:	68a9      	ldr	r1, [r5, #8]
 8007ab8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007aba:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8007abe:	f8dc b018 	ldr.w	fp, [ip, #24]
 8007ac2:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8007ac6:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8007aca:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8007ace:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007ad2:	f8db 4008 	ldr.w	r4, [fp, #8]
 8007ad6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8007ada:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007ade:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8007ae2:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8007ae6:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8007aea:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007aee:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007af2:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8007af6:	f8de 4004 	ldr.w	r4, [lr, #4]
 8007afa:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8007afe:	f8de 400c 	ldr.w	r4, [lr, #12]
 8007b02:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8007b06:	f8de 4008 	ldr.w	r4, [lr, #8]
 8007b0a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8007b0e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8007b12:	6824      	ldr	r4, [r4, #0]
 8007b14:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8007b18:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8007b1c:	6864      	ldr	r4, [r4, #4]
 8007b1e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8007b22:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8007b26:	68a5      	ldr	r5, [r4, #8]
 8007b28:	f8da 4004 	ldr.w	r4, [sl, #4]
 8007b2c:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8007b30:	f8da 4008 	ldr.w	r4, [sl, #8]
 8007b34:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8007b38:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8007b3a:	6824      	ldr	r4, [r4, #0]
 8007b3c:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8007b40:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8007b42:	6864      	ldr	r4, [r4, #4]
 8007b44:	643c      	str	r4, [r7, #64]	; 0x40
 8007b46:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8007b4a:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8007b4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007b50:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8007b54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007b56:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8007b5a:	69c4      	ldr	r4, [r0, #28]
 8007b5c:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8007b60:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007b62:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b64:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007b66:	647c      	str	r4, [r7, #68]	; 0x44
 8007b68:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8007b6a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8007b6e:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	f000 84f8 	beq.w	8008568 <forward_conv2d_nl_pool+0xb0c>
 8007b78:	6992      	ldr	r2, [r2, #24]
 8007b7a:	6892      	ldr	r2, [r2, #8]
 8007b7c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8007b80:	4680      	mov	r8, r0
 8007b82:	6a00      	ldr	r0, [r0, #32]
 8007b84:	2900      	cmp	r1, #0
 8007b86:	f000 84e4 	beq.w	8008552 <forward_conv2d_nl_pool+0xaf6>
 8007b8a:	698a      	ldr	r2, [r1, #24]
 8007b8c:	2a00      	cmp	r2, #0
 8007b8e:	f000 8533 	beq.w	80085f8 <forward_conv2d_nl_pool+0xb9c>
 8007b92:	694b      	ldr	r3, [r1, #20]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b9a:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007b9e:	6893      	ldr	r3, [r2, #8]
 8007ba0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ba4:	f001 fe5a 	bl	800985c <ai_array_get_byte_size>
 8007ba8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007bac:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007bb0:	881e      	ldrh	r6, [r3, #0]
 8007bb2:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8007bb6:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8007bba:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 8007bbe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007bc0:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8007bc4:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8007bc8:	fa11 f585 	uxtah	r5, r1, r5
 8007bcc:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8007bd0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007bd4:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8007bd8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8007bdc:	3901      	subs	r1, #1
 8007bde:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8007be2:	eb05 0e00 	add.w	lr, r5, r0
 8007be6:	fa1f f28a 	uxth.w	r2, sl
 8007bea:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8007bee:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8007bf2:	f8dc 4000 	ldr.w	r4, [ip]
 8007bf6:	f8dc 1000 	ldr.w	r1, [ip]
 8007bfa:	3a01      	subs	r2, #1
 8007bfc:	fb00 5002 	mla	r0, r0, r2, r5
 8007c00:	fa1f f28b 	uxth.w	r2, fp
 8007c04:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8007c08:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8007c0c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8007c10:	1e50      	subs	r0, r2, #1
 8007c12:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8007c16:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007c1a:	fa44 f101 	asr.w	r1, r4, r1
 8007c1e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8007c22:	f8dc 4000 	ldr.w	r4, [ip]
 8007c26:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8007c2a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007c2e:	f3c4 4543 	ubfx	r5, r4, #17, #4
 8007c32:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8007c36:	ebae 0202 	sub.w	r2, lr, r2
 8007c3a:	fa1f fe81 	uxth.w	lr, r1
 8007c3e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007c42:	fbb2 f2f1 	udiv	r2, r2, r1
 8007c46:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8007c4a:	3c01      	subs	r4, #1
 8007c4c:	fb04 1100 	mla	r1, r4, r0, r1
 8007c50:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007c54:	1c51      	adds	r1, r2, #1
 8007c56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c5a:	487c      	ldr	r0, [pc, #496]	; (8007e4c <forward_conv2d_nl_pool+0x3f0>)
 8007c5c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8007c60:	4611      	mov	r1, r2
 8007c62:	2a00      	cmp	r2, #0
 8007c64:	bf08      	it	eq
 8007c66:	4601      	moveq	r1, r0
 8007c68:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8007c6c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8007c70:	2d04      	cmp	r5, #4
 8007c72:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8007c76:	f000 849e 	beq.w	80085b6 <forward_conv2d_nl_pool+0xb5a>
 8007c7a:	2d08      	cmp	r5, #8
 8007c7c:	f000 849b 	beq.w	80085b6 <forward_conv2d_nl_pool+0xb5a>
 8007c80:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8007c84:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8007c88:	2e03      	cmp	r6, #3
 8007c8a:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8007c8e:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8007c92:	f240 8483 	bls.w	800859c <forward_conv2d_nl_pool+0xb40>
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8489 	beq.w	80085b2 <forward_conv2d_nl_pool+0xb56>
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8007cae:	6899      	ldr	r1, [r3, #8]
 8007cb0:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8007cb4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007cb8:	6896      	ldr	r6, [r2, #8]
 8007cba:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8007cbe:	4249      	negs	r1, r1
 8007cc0:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f000 82dd 	beq.w	8008284 <forward_conv2d_nl_pool+0x828>
 8007cca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007cce:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007cd2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007cd6:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8007cda:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8007e50 <forward_conv2d_nl_pool+0x3f4>
 8007cde:	fb03 f200 	mul.w	r2, r3, r0
 8007ce2:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007ce6:	008c      	lsls	r4, r1, #2
 8007ce8:	fb04 f000 	mul.w	r0, r4, r0
 8007cec:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8007cf0:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8007cf4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8007cf8:	fb01 fc02 	mul.w	ip, r1, r2
 8007cfc:	00a2      	lsls	r2, r4, #2
 8007cfe:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8007d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d06:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8007d0a:	00ab      	lsls	r3, r5, #2
 8007d0c:	4694      	mov	ip, r2
 8007d0e:	fb0c f204 	mul.w	r2, ip, r4
 8007d12:	fb04 f303 	mul.w	r3, r4, r3
 8007d16:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8007d1a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8007d1e:	00a4      	lsls	r4, r4, #2
 8007d20:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8007d24:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8007d28:	f04f 0c00 	mov.w	ip, #0
 8007d2c:	fa0f f58b 	sxth.w	r5, fp
 8007d30:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8007d34:	46a4      	mov	ip, r4
 8007d36:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8007d3a:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8007d3e:	fa0f f58a 	sxth.w	r5, sl
 8007d42:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 8007d46:	fb0c fc04 	mul.w	ip, ip, r4
 8007d4a:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8007d4e:	fb06 fc03 	mul.w	ip, r6, r3
 8007d52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d56:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8007d5a:	4240      	negs	r0, r0
 8007d5c:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8007d60:	469c      	mov	ip, r3
 8007d62:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8007d66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d6a:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8007d6e:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8007d72:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8007d76:	fb00 f303 	mul.w	r3, r0, r3
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	fb0c fc04 	mul.w	ip, ip, r4
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
 8007d82:	fb04 f305 	mul.w	r3, r4, r5
 8007d86:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8007d8a:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8007d8e:	623b      	str	r3, [r7, #32]
 8007d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d94:	46a6      	mov	lr, r4
 8007d96:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8007d9a:	fb05 f503 	mul.w	r5, r5, r3
 8007d9e:	667d      	str	r5, [r7, #100]	; 0x64
 8007da0:	4625      	mov	r5, r4
 8007da2:	fb05 f503 	mul.w	r5, r5, r3
 8007da6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007daa:	66bd      	str	r5, [r7, #104]	; 0x68
 8007dac:	fb00 f101 	mul.w	r1, r0, r1
 8007db0:	fb03 f306 	mul.w	r3, r3, r6
 8007db4:	657b      	str	r3, [r7, #84]	; 0x54
 8007db6:	008b      	lsls	r3, r1, #2
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30
 8007dba:	0093      	lsls	r3, r2, #2
 8007dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dbe:	0083      	lsls	r3, r0, #2
 8007dc0:	61bb      	str	r3, [r7, #24]
 8007dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dc6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007dca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007dce:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8007dd2:	2400      	movs	r4, #0
 8007dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	fb03 f301 	mul.w	r3, r3, r1
 8007ddc:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8007de0:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8007de4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007de8:	00d1      	lsls	r1, r2, #3
 8007dea:	0113      	lsls	r3, r2, #4
 8007dec:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8007df0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007df4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007df8:	fb00 f004 	mul.w	r0, r0, r4
 8007dfc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007e00:	66f8      	str	r0, [r7, #108]	; 0x6c
 8007e02:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8007e06:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8007e0a:	469a      	mov	sl, r3
 8007e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f340 81d0 	ble.w	80081b6 <forward_conv2d_nl_pool+0x75a>
 8007e16:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007e1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e1e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007e22:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007e26:	2900      	cmp	r1, #0
 8007e28:	441a      	add	r2, r3
 8007e2a:	bfb4      	ite	lt
 8007e2c:	2100      	movlt	r1, #0
 8007e2e:	2300      	movge	r3, #0
 8007e30:	4282      	cmp	r2, r0
 8007e32:	bf28      	it	cs
 8007e34:	4602      	movcs	r2, r0
 8007e36:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8007e3a:	2801      	cmp	r0, #1
 8007e3c:	f000 83f6 	beq.w	800862c <forward_conv2d_nl_pool+0xbd0>
 8007e40:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007e44:	4281      	cmp	r1, r0
 8007e46:	f000 822a 	beq.w	800829e <forward_conv2d_nl_pool+0x842>
 8007e4a:	e003      	b.n	8007e54 <forward_conv2d_nl_pool+0x3f8>
 8007e4c:	080076a1 	.word	0x080076a1
 8007e50:	00000000 	.word	0x00000000
 8007e54:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	f000 819f 	beq.w	800819c <forward_conv2d_nl_pool+0x740>
 8007e5e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8007e62:	fb93 f1f0 	sdiv	r1, r3, r0
 8007e66:	fb00 3111 	mls	r1, r0, r1, r3
 8007e6a:	1a41      	subs	r1, r0, r1
 8007e6c:	1ad2      	subs	r2, r2, r3
 8007e6e:	fb91 f5f0 	sdiv	r5, r1, r0
 8007e72:	fb00 1515 	mls	r5, r0, r5, r1
 8007e76:	1b52      	subs	r2, r2, r5
 8007e78:	4601      	mov	r1, r0
 8007e7a:	4402      	add	r2, r0
 8007e7c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8007e80:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8007e84:	4604      	mov	r4, r0
 8007e86:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8007e8a:	fbb4 f4f0 	udiv	r4, r4, r0
 8007e8e:	6a38      	ldr	r0, [r7, #32]
 8007e90:	3a01      	subs	r2, #1
 8007e92:	fb92 f8f1 	sdiv	r8, r2, r1
 8007e96:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8007e9a:	eba0 0c04 	sub.w	ip, r0, r4
 8007e9e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007ea2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007eac:	fbb4 f2f2 	udiv	r2, r4, r2
 8007eb0:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8007eb4:	663a      	str	r2, [r7, #96]	; 0x60
 8007eb6:	441d      	add	r5, r3
 8007eb8:	fb0e f000 	mul.w	r0, lr, r0
 8007ebc:	440b      	add	r3, r1
 8007ebe:	eba6 0608 	sub.w	r6, r6, r8
 8007ec2:	fb04 f505 	mul.w	r5, r4, r5
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8007ecc:	fb93 f3f4 	sdiv	r3, r3, r4
 8007ed0:	fb00 f406 	mul.w	r4, r0, r6
 8007ed4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007ed8:	677d      	str	r5, [r7, #116]	; 0x74
 8007eda:	0091      	lsls	r1, r2, #2
 8007edc:	fb00 f003 	mul.w	r0, r0, r3
 8007ee0:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8007ee4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eea:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8007eee:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8007ef2:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8007ef6:	1ac3      	subs	r3, r0, r3
 8007ef8:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8007efc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f00:	008b      	lsls	r3, r1, #2
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f04:	00d3      	lsls	r3, r2, #3
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8007f1e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8007f22:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f24:	46c2      	mov	sl, r8
 8007f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f2a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007f2e:	eb03 0c02 	add.w	ip, r3, r2
 8007f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f2c0 811c 	blt.w	8008174 <forward_conv2d_nl_pool+0x718>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8007f40:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8007f44:	4605      	mov	r5, r0
 8007f46:	4606      	mov	r6, r0
 8007f48:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007f50:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8007f54:	4413      	add	r3, r2
 8007f56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007f60:	428b      	cmp	r3, r1
 8007f62:	bf94      	ite	ls
 8007f64:	ebc6 0303 	rsbls	r3, r6, r3
 8007f68:	ebc6 0301 	rsbhi	r3, r6, r1
 8007f6c:	4415      	add	r5, r2
 8007f6e:	1a1b      	subs	r3, r3, r0
 8007f70:	00a4      	lsls	r4, r4, #2
 8007f72:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8007f76:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8007f7a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8007f7e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8007f80:	4602      	mov	r2, r0
 8007f82:	2800      	cmp	r0, #0
 8007f84:	bf08      	it	eq
 8007f86:	4662      	moveq	r2, ip
 8007f88:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8007f8c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8007f90:	fb91 f1f0 	sdiv	r1, r1, r0
 8007f94:	4429      	add	r1, r5
 8007f96:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8007f9a:	fb0e 5501 	mla	r5, lr, r1, r5
 8007f9e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007fa2:	4403      	add	r3, r0
 8007fa4:	fb01 6104 	mla	r1, r1, r4, r6
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	fb93 f6f0 	sdiv	r6, r3, r0
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8007fb4:	fb06 3110 	mls	r1, r6, r0, r3
 8007fb8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007fbc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8007fc0:	4562      	cmp	r2, ip
 8007fc2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007fc6:	bf08      	it	eq
 8007fc8:	eeb0 6a48 	vmoveq.f32	s12, s16
 8007fcc:	1b9b      	subs	r3, r3, r6
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d070      	beq.n	80080b4 <forward_conv2d_nl_pool+0x658>
 8007fd2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007fd6:	fb0e f803 	mul.w	r8, lr, r3
 8007fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fdc:	fb00 fb01 	mul.w	fp, r0, r1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d067      	beq.n	80080b4 <forward_conv2d_nl_pool+0x658>
 8007fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fe8:	18d3      	adds	r3, r2, r3
 8007fea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	673b      	str	r3, [r7, #112]	; 0x70
 8007ffa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	4413      	add	r3, r2
 8008002:	65bb      	str	r3, [r7, #88]	; 0x58
 8008004:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	4413      	add	r3, r2
 800800c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008010:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008014:	ecf3 7a01 	vldmia	r3!, {s15}
 8008018:	f1ba 0f00 	cmp.w	sl, #0
 800801c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008020:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008024:	f340 80a4 	ble.w	8008170 <forward_conv2d_nl_pool+0x714>
 8008028:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800802c:	f04f 0c00 	mov.w	ip, #0
 8008030:	2e00      	cmp	r6, #0
 8008032:	dd19      	ble.n	8008068 <forward_conv2d_nl_pool+0x60c>
 8008034:	2100      	movs	r1, #0
 8008036:	eb00 040e 	add.w	r4, r0, lr
 800803a:	4284      	cmp	r4, r0
 800803c:	d910      	bls.n	8008060 <forward_conv2d_nl_pool+0x604>
 800803e:	4603      	mov	r3, r0
 8008040:	462a      	mov	r2, r5
 8008042:	ecb3 7a01 	vldmia	r3!, {s14}
 8008046:	ecf2 6a01 	vldmia	r2!, {s13}
 800804a:	429c      	cmp	r4, r3
 800804c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008050:	d8f7      	bhi.n	8008042 <forward_conv2d_nl_pool+0x5e6>
 8008052:	43c3      	mvns	r3, r0
 8008054:	441c      	add	r4, r3
 8008056:	f024 0403 	bic.w	r4, r4, #3
 800805a:	3404      	adds	r4, #4
 800805c:	4425      	add	r5, r4
 800805e:	4420      	add	r0, r4
 8008060:	3101      	adds	r1, #1
 8008062:	428e      	cmp	r6, r1
 8008064:	4448      	add	r0, r9
 8008066:	d1e6      	bne.n	8008036 <forward_conv2d_nl_pool+0x5da>
 8008068:	f10c 0c01 	add.w	ip, ip, #1
 800806c:	45e2      	cmp	sl, ip
 800806e:	4458      	add	r0, fp
 8008070:	4445      	add	r5, r8
 8008072:	d1dd      	bne.n	8008030 <forward_conv2d_nl_pool+0x5d4>
 8008074:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800807c:	441d      	add	r5, r3
 800807e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008082:	ece3 7a01 	vstmia	r3!, {s15}
 8008086:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800808a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800808e:	4293      	cmp	r3, r2
 8008090:	d1be      	bne.n	8008010 <forward_conv2d_nl_pool+0x5b4>
 8008092:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008096:	69f9      	ldr	r1, [r7, #28]
 8008098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800809a:	4472      	add	r2, lr
 800809c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80080a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080a2:	1a52      	subs	r2, r2, r1
 80080a4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80080a8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80080ac:	3301      	adds	r3, #1
 80080ae:	429a      	cmp	r2, r3
 80080b0:	673b      	str	r3, [r7, #112]	; 0x70
 80080b2:	d1a2      	bne.n	8007ffa <forward_conv2d_nl_pool+0x59e>
 80080b4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80080b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80080bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080be:	4608      	mov	r0, r1
 80080c0:	4410      	add	r0, r2
 80080c2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80080c6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80080ca:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80080ce:	4401      	add	r1, r0
 80080d0:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80080d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80080d8:	1a8a      	subs	r2, r1, r2
 80080da:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80080de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80080e2:	3301      	adds	r3, #1
 80080e4:	429a      	cmp	r2, r3
 80080e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80080e8:	f47f af1d 	bne.w	8007f26 <forward_conv2d_nl_pool+0x4ca>
 80080ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80080f4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	f000 8210 	beq.w	8008520 <forward_conv2d_nl_pool+0xac4>
 8008100:	2400      	movs	r4, #0
 8008102:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8008106:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800810a:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800810e:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 8008112:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8008116:	609e      	str	r6, [r3, #8]
 8008118:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800811c:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8008120:	462b      	mov	r3, r5
 8008122:	4641      	mov	r1, r8
 8008124:	4640      	mov	r0, r8
 8008126:	47a0      	blx	r4
 8008128:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800812c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8008130:	6859      	ldr	r1, [r3, #4]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8008138:	4405      	add	r5, r0
 800813a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800813e:	0089      	lsls	r1, r1, #2
 8008140:	4406      	add	r6, r0
 8008142:	eba5 0c09 	sub.w	ip, r5, r9
 8008146:	1850      	adds	r0, r2, r1
 8008148:	45a4      	cmp	ip, r4
 800814a:	bfa8      	it	ge
 800814c:	464d      	movge	r5, r9
 800814e:	4286      	cmp	r6, r0
 8008150:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8008154:	bf28      	it	cs
 8008156:	1a76      	subcs	r6, r6, r1
 8008158:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800815c:	3001      	adds	r0, #1
 800815e:	4281      	cmp	r1, r0
 8008160:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8008164:	d1d7      	bne.n	8008116 <forward_conv2d_nl_pool+0x6ba>
 8008166:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800816a:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800816e:	e019      	b.n	80081a4 <forward_conv2d_nl_pool+0x748>
 8008170:	461a      	mov	r2, r3
 8008172:	e781      	b.n	8008078 <forward_conv2d_nl_pool+0x61c>
 8008174:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008178:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800817c:	fb90 f3f2 	sdiv	r3, r0, r2
 8008180:	fb02 0313 	mls	r3, r2, r3, r0
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	4605      	mov	r5, r0
 8008188:	fb93 f0f2 	sdiv	r0, r3, r2
 800818c:	fb02 3010 	mls	r0, r2, r0, r3
 8008190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008192:	462e      	mov	r6, r5
 8008194:	18c4      	adds	r4, r0, r3
 8008196:	eb02 0805 	add.w	r8, r2, r5
 800819a:	e6d5      	b.n	8007f48 <forward_conv2d_nl_pool+0x4ec>
 800819c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	609a      	str	r2, [r3, #8]
 80081a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80081aa:	3301      	adds	r3, #1
 80081ac:	b21b      	sxth	r3, r3
 80081ae:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80081b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081b6:	3b01      	subs	r3, #1
 80081b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081bc:	f100 83bf 	bmi.w	800893e <forward_conv2d_nl_pool+0xee2>
 80081c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081c4:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	f200 839d 	bhi.w	8008908 <forward_conv2d_nl_pool+0xeac>
 80081ce:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	6990      	ldr	r0, [r2, #24]
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081dc:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 80081e0:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	fa1f f188 	uxth.w	r1, r8
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081f0:	9308      	str	r3, [sp, #32]
 80081f2:	9105      	str	r1, [sp, #20]
 80081f4:	2601      	movs	r6, #1
 80081f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80081fa:	9607      	str	r6, [sp, #28]
 80081fc:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8008200:	9506      	str	r5, [sp, #24]
 8008202:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	1a64      	subs	r4, r4, r1
 800820a:	b2b1      	uxth	r1, r6
 800820c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8008216:	b224      	sxth	r4, r4
 8008218:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800821c:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8008220:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8008224:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008226:	47a0      	blx	r4
 8008228:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800822c:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8008230:	688a      	ldr	r2, [r1, #8]
 8008232:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8008234:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8008238:	fa0f f388 	sxth.w	r3, r8
 800823c:	1af3      	subs	r3, r6, r3
 800823e:	4422      	add	r2, r4
 8008240:	462e      	mov	r6, r5
 8008242:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008246:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800824a:	608a      	str	r2, [r1, #8]
 800824c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008250:	4426      	add	r6, r4
 8008252:	b21b      	sxth	r3, r3
 8008254:	1b2c      	subs	r4, r5, r4
 8008256:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800825a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800825c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008268:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800826c:	3001      	adds	r0, #1
 800826e:	442c      	add	r4, r5
 8008270:	4283      	cmp	r3, r0
 8008272:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8008276:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800827a:	f63f adc7 	bhi.w	8007e0c <forward_conv2d_nl_pool+0x3b0>
 800827e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	609a      	str	r2, [r3, #8]
 8008288:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800828c:	68d3      	ldr	r3, [r2, #12]
 800828e:	6093      	str	r3, [r2, #8]
 8008290:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008294:	46bd      	mov	sp, r7
 8008296:	ecbd 8b10 	vpop	{d8-d15}
 800829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082a0:	2901      	cmp	r1, #1
 80082a2:	f47f add7 	bne.w	8007e54 <forward_conv2d_nl_pool+0x3f8>
 80082a6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80082aa:	2900      	cmp	r1, #0
 80082ac:	f43f af76 	beq.w	800819c <forward_conv2d_nl_pool+0x740>
 80082b0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80082b4:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 80082b8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80082bc:	1ad2      	subs	r2, r2, r3
 80082be:	1a8c      	subs	r4, r1, r2
 80082c0:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80082c4:	00b2      	lsls	r2, r6, #2
 80082c6:	fb02 f204 	mul.w	r2, r2, r4
 80082ca:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80082ce:	fbb1 f1f0 	udiv	r1, r1, r0
 80082d2:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 80082d6:	460d      	mov	r5, r1
 80082d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082da:	62ba      	str	r2, [r7, #40]	; 0x28
 80082dc:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 80082e0:	0082      	lsls	r2, r0, #2
 80082e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80082e4:	00ca      	lsls	r2, r1, #3
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	00aa      	lsls	r2, r5, #2
 80082ea:	60ba      	str	r2, [r7, #8]
 80082ec:	fb03 f206 	mul.w	r2, r3, r6
 80082f0:	67ba      	str	r2, [r7, #120]	; 0x78
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	fb02 f303 	mul.w	r3, r2, r3
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008306:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800830a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800830e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008312:	2300      	movs	r3, #0
 8008314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f2c0 8112 	blt.w	8008546 <forward_conv2d_nl_pool+0xaea>
 8008322:	2100      	movs	r1, #0
 8008324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008326:	460a      	mov	r2, r1
 8008328:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800832c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008330:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8008334:	4420      	add	r0, r4
 8008336:	4408      	add	r0, r1
 8008338:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800833c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8008340:	190c      	adds	r4, r1, r4
 8008342:	42ac      	cmp	r4, r5
 8008344:	bf28      	it	cs
 8008346:	462c      	movcs	r4, r5
 8008348:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800834c:	0080      	lsls	r0, r0, #2
 800834e:	1aa4      	subs	r4, r4, r2
 8008350:	2d00      	cmp	r5, #0
 8008352:	f000 80e9 	beq.w	8008528 <forward_conv2d_nl_pool+0xacc>
 8008356:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800835a:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800835e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008362:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008366:	42b5      	cmp	r5, r6
 8008368:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800836c:	eba3 0204 	sub.w	r2, r3, r4
 8008370:	eba1 0104 	sub.w	r1, r1, r4
 8008374:	bf08      	it	eq
 8008376:	eef0 3a48 	vmoveq.f32	s7, s16
 800837a:	462b      	mov	r3, r5
 800837c:	697d      	ldr	r5, [r7, #20]
 800837e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8008382:	4428      	add	r0, r5
 8008384:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8008388:	fb05 6e00 	mla	lr, r5, r0, r6
 800838c:	eb0e 000b 	add.w	r0, lr, fp
 8008390:	4586      	cmp	lr, r0
 8008392:	61f8      	str	r0, [r7, #28]
 8008394:	f080 80a5 	bcs.w	80084e2 <forward_conv2d_nl_pool+0xa86>
 8008398:	0092      	lsls	r2, r2, #2
 800839a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800839e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a0:	fb01 f10b 	mul.w	r1, r1, fp
 80083a4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80083a8:	f024 0803 	bic.w	r8, r4, #3
 80083ac:	2a00      	cmp	r2, #0
 80083ae:	f000 8098 	beq.w	80084e2 <forward_conv2d_nl_pool+0xa86>
 80083b2:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80083b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80083b8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80083bc:	0892      	lsrs	r2, r2, #2
 80083be:	3201      	adds	r2, #1
 80083c0:	4401      	add	r1, r0
 80083c2:	fb02 f00a 	mul.w	r0, r2, sl
 80083c6:	6638      	str	r0, [r7, #96]	; 0x60
 80083c8:	0110      	lsls	r0, r2, #4
 80083ca:	0092      	lsls	r2, r2, #2
 80083cc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80083ce:	1aca      	subs	r2, r1, r3
 80083d0:	613a      	str	r2, [r7, #16]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	6738      	str	r0, [r7, #112]	; 0x70
 80083d6:	4413      	add	r3, r2
 80083d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083dc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083e2:	4413      	add	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	4413      	add	r3, r2
 80083ee:	677b      	str	r3, [r7, #116]	; 0x74
 80083f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083f4:	ecf3 6a01 	vldmia	r3!, {s13}
 80083f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008400:	2b00      	cmp	r3, #0
 8008402:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008406:	dd57      	ble.n	80084b8 <forward_conv2d_nl_pool+0xa5c>
 8008408:	4676      	mov	r6, lr
 800840a:	f04f 0c00 	mov.w	ip, #0
 800840e:	f1b8 0f00 	cmp.w	r8, #0
 8008412:	f340 8087 	ble.w	8008524 <forward_conv2d_nl_pool+0xac8>
 8008416:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800841a:	f109 0310 	add.w	r3, r9, #16
 800841e:	18b1      	adds	r1, r6, r2
 8008420:	2000      	movs	r0, #0
 8008422:	4632      	mov	r2, r6
 8008424:	eb02 050b 	add.w	r5, r2, fp
 8008428:	ed95 7a00 	vldr	s14, [r5]
 800842c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8008430:	ed92 4a00 	vldr	s8, [r2]
 8008434:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008438:	ed91 5a00 	vldr	s10, [r1]
 800843c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008440:	ed13 6a01 	vldr	s12, [r3, #-4]
 8008444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008448:	eb01 050b 	add.w	r5, r1, fp
 800844c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008450:	3004      	adds	r0, #4
 8008452:	4540      	cmp	r0, r8
 8008454:	ed95 7a00 	vldr	s14, [r5]
 8008458:	eee5 7a25 	vfma.f32	s15, s10, s11
 800845c:	4452      	add	r2, sl
 800845e:	4451      	add	r1, sl
 8008460:	f103 0310 	add.w	r3, r3, #16
 8008464:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008468:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800846c:	dbda      	blt.n	8008424 <forward_conv2d_nl_pool+0x9c8>
 800846e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008470:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008472:	441e      	add	r6, r3
 8008474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008476:	4499      	add	r9, r3
 8008478:	42a0      	cmp	r0, r4
 800847a:	da11      	bge.n	80084a0 <forward_conv2d_nl_pool+0xa44>
 800847c:	4602      	mov	r2, r0
 800847e:	4633      	mov	r3, r6
 8008480:	4649      	mov	r1, r9
 8008482:	edd3 7a00 	vldr	s15, [r3]
 8008486:	ecb1 7a01 	vldmia	r1!, {s14}
 800848a:	3201      	adds	r2, #1
 800848c:	42a2      	cmp	r2, r4
 800848e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008492:	445b      	add	r3, fp
 8008494:	d1f5      	bne.n	8008482 <forward_conv2d_nl_pool+0xa26>
 8008496:	1a20      	subs	r0, r4, r0
 8008498:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800849c:	fb00 660b 	mla	r6, r0, fp, r6
 80084a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084a4:	441e      	add	r6, r3
 80084a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084aa:	4499      	add	r9, r3
 80084ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084b0:	f10c 0c01 	add.w	ip, ip, #1
 80084b4:	4563      	cmp	r3, ip
 80084b6:	d1aa      	bne.n	800840e <forward_conv2d_nl_pool+0x9b2>
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	4499      	add	r9, r3
 80084bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084be:	ece3 6a01 	vstmia	r3!, {s13}
 80084c2:	677b      	str	r3, [r7, #116]	; 0x74
 80084c4:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d191      	bne.n	80083f0 <forward_conv2d_nl_pool+0x994>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	f10e 0e04 	add.w	lr, lr, #4
 80084dc:	459e      	cmp	lr, r3
 80084de:	f4ff af7d 	bcc.w	80083dc <forward_conv2d_nl_pool+0x980>
 80084e2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80084e6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80084ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084ee:	440a      	add	r2, r1
 80084f0:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80084f4:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80084f8:	4608      	mov	r0, r1
 80084fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80084fe:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8008502:	4410      	add	r0, r2
 8008504:	1a8a      	subs	r2, r1, r2
 8008506:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800850a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800850e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8008512:	3301      	adds	r3, #1
 8008514:	429a      	cmp	r2, r3
 8008516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800851a:	f47f aefd 	bne.w	8008318 <forward_conv2d_nl_pool+0x8bc>
 800851e:	e5e7      	b.n	80080f0 <forward_conv2d_nl_pool+0x694>
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	e63f      	b.n	80081a4 <forward_conv2d_nl_pool+0x748>
 8008524:	2000      	movs	r0, #0
 8008526:	e7a7      	b.n	8008478 <forward_conv2d_nl_pool+0xa1c>
 8008528:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800852c:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008530:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008534:	1b19      	subs	r1, r3, r4
 8008536:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800853a:	eef0 3a48 	vmov.f32	s7, s16
 800853e:	1b1a      	subs	r2, r3, r4
 8008540:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008544:	e71a      	b.n	800837c <forward_conv2d_nl_pool+0x920>
 8008546:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800854a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800854c:	460a      	mov	r2, r1
 800854e:	440b      	add	r3, r1
 8008550:	e6ea      	b.n	8008328 <forward_conv2d_nl_pool+0x8cc>
 8008552:	b168      	cbz	r0, 8008570 <forward_conv2d_nl_pool+0xb14>
 8008554:	6882      	ldr	r2, [r0, #8]
 8008556:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800855a:	2201      	movs	r2, #1
 800855c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008560:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008564:	f7ff bb29 	b.w	8007bba <forward_conv2d_nl_pool+0x15e>
 8008568:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800856c:	f7ff bb08 	b.w	8007b80 <forward_conv2d_nl_pool+0x124>
 8008570:	2201      	movs	r2, #1
 8008572:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008576:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800857a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800857e:	f7ff bb1c 	b.w	8007bba <forward_conv2d_nl_pool+0x15e>
 8008582:	3118      	adds	r1, #24
 8008584:	d008      	beq.n	8008598 <forward_conv2d_nl_pool+0xb3c>
 8008586:	462a      	mov	r2, r5
 8008588:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 800858c:	4629      	mov	r1, r5
 800858e:	f7ff ba93 	b.w	8007ab8 <forward_conv2d_nl_pool+0x5c>
 8008592:	4691      	mov	r9, r2
 8008594:	f7ff ba7d 	b.w	8007a92 <forward_conv2d_nl_pool+0x36>
 8008598:	68cb      	ldr	r3, [r1, #12]
 800859a:	deff      	udf	#255	; 0xff
 800859c:	2300      	movs	r3, #0
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	deff      	udf	#255	; 0xff
 80085a2:	4694      	mov	ip, r2
 80085a4:	f7ff ba6c 	b.w	8007a80 <forward_conv2d_nl_pool+0x24>
 80085a8:	6873      	ldr	r3, [r6, #4]
 80085aa:	deff      	udf	#255	; 0xff
 80085ac:	2200      	movs	r2, #0
 80085ae:	f7ff ba82 	b.w	8007ab6 <forward_conv2d_nl_pool+0x5a>
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	deff      	udf	#255	; 0xff
 80085b6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	f43f ab60 	beq.w	8007c80 <forward_conv2d_nl_pool+0x224>
 80085c0:	2e03      	cmp	r6, #3
 80085c2:	d9eb      	bls.n	800859c <forward_conv2d_nl_pool+0xb40>
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	b323      	cbz	r3, 8008614 <forward_conv2d_nl_pool+0xbb8>
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	b313      	cbz	r3, 8008614 <forward_conv2d_nl_pool+0xbb8>
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80085d4:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80085de:	9000      	str	r0, [sp, #0]
 80085e0:	4673      	mov	r3, lr
 80085e2:	4620      	mov	r0, r4
 80085e4:	f7ff f9ea 	bl	80079bc <ai_dict_decompress_f32>
 80085e8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80085ec:	b17c      	cbz	r4, 800860e <forward_conv2d_nl_pool+0xbb2>
 80085ee:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80085f2:	881e      	ldrh	r6, [r3, #0]
 80085f4:	f7ff bb44 	b.w	8007c80 <forward_conv2d_nl_pool+0x224>
 80085f8:	b178      	cbz	r0, 800861a <forward_conv2d_nl_pool+0xbbe>
 80085fa:	6881      	ldr	r1, [r0, #8]
 80085fc:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008600:	2201      	movs	r2, #1
 8008602:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008606:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800860a:	f7ff bad6 	b.w	8007bba <forward_conv2d_nl_pool+0x15e>
 800860e:	881e      	ldrh	r6, [r3, #0]
 8008610:	f7ff bb36 	b.w	8007c80 <forward_conv2d_nl_pool+0x224>
 8008614:	2300      	movs	r3, #0
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	deff      	udf	#255	; 0xff
 800861a:	2201      	movs	r2, #1
 800861c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8008620:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8008624:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008628:	f7ff bac7 	b.w	8007bba <forward_conv2d_nl_pool+0x15e>
 800862c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800862e:	2801      	cmp	r0, #1
 8008630:	f47f ac10 	bne.w	8007e54 <forward_conv2d_nl_pool+0x3f8>
 8008634:	1ad2      	subs	r2, r2, r3
 8008636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008638:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800863c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008642:	fb00 4101 	mla	r1, r0, r1, r4
 8008646:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800864a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800864e:	f080 81c4 	bcs.w	80089da <forward_conv2d_nl_pool+0xf7e>
 8008652:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008656:	2a00      	cmp	r2, #0
 8008658:	f43f ad4a 	beq.w	80080f0 <forward_conv2d_nl_pool+0x694>
 800865c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008660:	fb02 f303 	mul.w	r3, r2, r3
 8008664:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008666:	677b      	str	r3, [r7, #116]	; 0x74
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	663b      	str	r3, [r7, #96]	; 0x60
 800866c:	188b      	adds	r3, r1, r2
 800866e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008670:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008674:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008678:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800867c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008680:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8008684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800868c:	2300      	movs	r3, #0
 800868e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 8133 	beq.w	8008902 <forward_conv2d_nl_pool+0xea6>
 800869c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086a0:	ed93 6a00 	vldr	s12, [r3]
 80086a4:	3304      	adds	r3, #4
 80086a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 8101 	beq.w	80088b6 <forward_conv2d_nl_pool+0xe5a>
 80086b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80086bc:	eb03 0802 	add.w	r8, r3, r2
 80086c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80086d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086da:	f04f 0b00 	mov.w	fp, #0
 80086de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f2c0 8104 	blt.w	80088f0 <forward_conv2d_nl_pool+0xe94>
 80086e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80086ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80086ee:	2300      	movs	r3, #0
 80086f0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80086f4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80086f8:	eb02 0c04 	add.w	ip, r2, r4
 80086fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008700:	4540      	cmp	r0, r8
 8008702:	bf94      	ite	ls
 8008704:	ebc3 0300 	rsbls	r3, r3, r0
 8008708:	ebc3 0308 	rsbhi	r3, r3, r8
 800870c:	eba2 0903 	sub.w	r9, r2, r3
 8008710:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008714:	1ac4      	subs	r4, r0, r3
 8008716:	fb03 f302 	mul.w	r3, r3, r2
 800871a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800871e:	2a00      	cmp	r2, #0
 8008720:	f340 80e3 	ble.w	80088ea <forward_conv2d_nl_pool+0xe8e>
 8008724:	f023 050f 	bic.w	r5, r3, #15
 8008728:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800872c:	1e68      	subs	r0, r5, #1
 800872e:	0900      	lsrs	r0, r0, #4
 8008730:	3001      	adds	r0, #1
 8008732:	fb06 f204 	mul.w	r2, r6, r4
 8008736:	673a      	str	r2, [r7, #112]	; 0x70
 8008738:	0102      	lsls	r2, r0, #4
 800873a:	65ba      	str	r2, [r7, #88]	; 0x58
 800873c:	fb06 f909 	mul.w	r9, r6, r9
 8008740:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008744:	eef0 6a46 	vmov.f32	s13, s12
 8008748:	f04f 0e00 	mov.w	lr, #0
 800874c:	4662      	mov	r2, ip
 800874e:	2d00      	cmp	r5, #0
 8008750:	f340 80c9 	ble.w	80088e6 <forward_conv2d_nl_pool+0xe8a>
 8008754:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008758:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800875c:	2600      	movs	r6, #0
 800875e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8008762:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008766:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800876a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800876e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8008772:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8008776:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800877a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800877e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8008782:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8008786:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800878a:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800878e:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8008792:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8008796:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800879a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800879e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 80087a2:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 80087a6:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 80087aa:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80087ae:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80087b2:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80087b6:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 80087ba:	ed50 3a04 	vldr	s7, [r0, #-16]
 80087be:	ed14 4a04 	vldr	s8, [r4, #-16]
 80087c2:	ed50 4a03 	vldr	s9, [r0, #-12]
 80087c6:	ed14 5a03 	vldr	s10, [r4, #-12]
 80087ca:	ed50 5a02 	vldr	s11, [r0, #-8]
 80087ce:	ed14 7a02 	vldr	s14, [r4, #-8]
 80087d2:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80087d6:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80087da:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80087de:	3610      	adds	r6, #16
 80087e0:	42ae      	cmp	r6, r5
 80087e2:	ed14 fa01 	vldr	s30, [r4, #-4]
 80087e6:	ed50 ea01 	vldr	s29, [r0, #-4]
 80087ea:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80087ee:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80087f2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80087f6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80087fa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80087fe:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008802:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008806:	eee9 7a89 	vfma.f32	s15, s19, s18
 800880a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800880e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008812:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008816:	eee2 7a83 	vfma.f32	s15, s5, s6
 800881a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800881e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008822:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008826:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800882a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800882e:	db96      	blt.n	800875e <forward_conv2d_nl_pool+0xd02>
 8008830:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008832:	4451      	add	r1, sl
 8008834:	4452      	add	r2, sl
 8008836:	4283      	cmp	r3, r0
 8008838:	dd0f      	ble.n	800885a <forward_conv2d_nl_pool+0xdfe>
 800883a:	4604      	mov	r4, r0
 800883c:	468c      	mov	ip, r1
 800883e:	4616      	mov	r6, r2
 8008840:	ecb6 7a01 	vldmia	r6!, {s14}
 8008844:	ecfc 7a01 	vldmia	ip!, {s15}
 8008848:	3401      	adds	r4, #1
 800884a:	42a3      	cmp	r3, r4
 800884c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008850:	d1f6      	bne.n	8008840 <forward_conv2d_nl_pool+0xde4>
 8008852:	1a18      	subs	r0, r3, r0
 8008854:	0080      	lsls	r0, r0, #2
 8008856:	4402      	add	r2, r0
 8008858:	4401      	add	r1, r0
 800885a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800885c:	4402      	add	r2, r0
 800885e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8008862:	f10e 0e01 	add.w	lr, lr, #1
 8008866:	4570      	cmp	r0, lr
 8008868:	4449      	add	r1, r9
 800886a:	f47f af70 	bne.w	800874e <forward_conv2d_nl_pool+0xcf2>
 800886e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008874:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008878:	edc3 6a00 	vstr	s13, [r3]
 800887c:	4608      	mov	r0, r1
 800887e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008882:	440b      	add	r3, r1
 8008884:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008888:	67bb      	str	r3, [r7, #120]	; 0x78
 800888a:	4410      	add	r0, r2
 800888c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800888e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8008892:	4608      	mov	r0, r1
 8008894:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008898:	4418      	add	r0, r3
 800889a:	1acb      	subs	r3, r1, r3
 800889c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80088a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80088a8:	f10b 0b01 	add.w	fp, fp, #1
 80088ac:	455b      	cmp	r3, fp
 80088ae:	eba8 0802 	sub.w	r8, r8, r2
 80088b2:	f47f af14 	bne.w	80086de <forward_conv2d_nl_pool+0xc82>
 80088b6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80088ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80088c0:	440a      	add	r2, r1
 80088c2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80088c6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80088ca:	3204      	adds	r2, #4
 80088cc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80088d0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80088d4:	3301      	adds	r3, #1
 80088d6:	429a      	cmp	r2, r3
 80088d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088dc:	f47f aed9 	bne.w	8008692 <forward_conv2d_nl_pool+0xc36>
 80088e0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80088e4:	e404      	b.n	80080f0 <forward_conv2d_nl_pool+0x694>
 80088e6:	2000      	movs	r0, #0
 80088e8:	e7a5      	b.n	8008836 <forward_conv2d_nl_pool+0xdda>
 80088ea:	eef0 6a46 	vmov.f32	s13, s12
 80088ee:	e7be      	b.n	800886e <forward_conv2d_nl_pool+0xe12>
 80088f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80088f4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80088f8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80088fc:	eba8 0303 	sub.w	r3, r8, r3
 8008900:	e6f6      	b.n	80086f0 <forward_conv2d_nl_pool+0xc94>
 8008902:	eeb0 6a48 	vmov.f32	s12, s16
 8008906:	e6d0      	b.n	80086aa <forward_conv2d_nl_pool+0xc4e>
 8008908:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008910:	4611      	mov	r1, r2
 8008912:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008916:	4419      	add	r1, r3
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800891e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008924:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008928:	4413      	add	r3, r2
 800892a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800892e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008936:	4293      	cmp	r3, r2
 8008938:	f63f aa68 	bhi.w	8007e0c <forward_conv2d_nl_pool+0x3b0>
 800893c:	e49f      	b.n	800827e <forward_conv2d_nl_pool+0x822>
 800893e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008942:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800894c:	68d1      	ldr	r1, [r2, #12]
 800894e:	6853      	ldr	r3, [r2, #4]
 8008950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008952:	fb00 4012 	mls	r0, r0, r2, r4
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4281      	cmp	r1, r0
 800895a:	bf88      	it	hi
 800895c:	18c0      	addhi	r0, r0, r3
 800895e:	4281      	cmp	r1, r0
 8008960:	eb01 0203 	add.w	r2, r1, r3
 8008964:	d216      	bcs.n	8008994 <forward_conv2d_nl_pool+0xf38>
 8008966:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800896a:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800896e:	42a1      	cmp	r1, r4
 8008970:	d010      	beq.n	8008994 <forward_conv2d_nl_pool+0xf38>
 8008972:	4290      	cmp	r0, r2
 8008974:	d20e      	bcs.n	8008994 <forward_conv2d_nl_pool+0xf38>
 8008976:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800897a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800897e:	f850 3b04 	ldr.w	r3, [r0], #4
 8008982:	f841 3b04 	str.w	r3, [r1], #4
 8008986:	69a2      	ldr	r2, [r4, #24]
 8008988:	6853      	ldr	r3, [r2, #4]
 800898a:	68d2      	ldr	r2, [r2, #12]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	441a      	add	r2, r3
 8008990:	4282      	cmp	r2, r0
 8008992:	d8f4      	bhi.n	800897e <forward_conv2d_nl_pool+0xf22>
 8008994:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8008998:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800899c:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 80089a0:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80089a2:	4420      	add	r0, r4
 80089a4:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80089a8:	1a40      	subs	r0, r0, r1
 80089aa:	4421      	add	r1, r4
 80089ac:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80089b0:	442c      	add	r4, r5
 80089b2:	b209      	sxth	r1, r1
 80089b4:	b200      	sxth	r0, r0
 80089b6:	4294      	cmp	r4, r2
 80089b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80089bc:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80089c0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80089c4:	4621      	mov	r1, r4
 80089c6:	f4ff abfb 	bcc.w	80081c0 <forward_conv2d_nl_pool+0x764>
 80089ca:	425b      	negs	r3, r3
 80089cc:	4419      	add	r1, r3
 80089ce:	4291      	cmp	r1, r2
 80089d0:	d2fc      	bcs.n	80089cc <forward_conv2d_nl_pool+0xf70>
 80089d2:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80089d6:	f7ff bbf3 	b.w	80081c0 <forward_conv2d_nl_pool+0x764>
 80089da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089de:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 80089e2:	320a      	adds	r2, #10
 80089e4:	f022 0207 	bic.w	r2, r2, #7
 80089e8:	ebad 0d02 	sub.w	sp, sp, r2
 80089ec:	aa0a      	add	r2, sp, #40	; 0x28
 80089ee:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80089f2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80089f6:	2a00      	cmp	r2, #0
 80089f8:	f000 8153 	beq.w	8008ca2 <forward_conv2d_nl_pool+0x1246>
 80089fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008a00:	f8c7 b01c 	str.w	fp, [r7, #28]
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a0a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a14:	f8c7 a014 	str.w	sl, [r7, #20]
 8008a18:	4413      	add	r3, r2
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008a32:	2300      	movs	r3, #0
 8008a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a3c:	b13b      	cbz	r3, 8008a4e <forward_conv2d_nl_pool+0xff2>
 8008a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a42:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008a46:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008a4a:	f000 ff8b 	bl	8009964 <memcpy>
 8008a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 8137 	beq.w	8008cc6 <forward_conv2d_nl_pool+0x126a>
 8008a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a5a:	ed93 6a00 	vldr	s12, [r3]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a62:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 8101 	beq.w	8008c6e <forward_conv2d_nl_pool+0x1212>
 8008a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008a74:	eb03 0802 	add.w	r8, r3, r2
 8008a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a88:	677b      	str	r3, [r7, #116]	; 0x74
 8008a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a92:	f04f 0b00 	mov.w	fp, #0
 8008a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f2c0 810a 	blt.w	8008cb4 <forward_conv2d_nl_pool+0x1258>
 8008aa0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8008aac:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008ab0:	eb02 0c04 	add.w	ip, r2, r4
 8008ab4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008ab8:	4540      	cmp	r0, r8
 8008aba:	bf94      	ite	ls
 8008abc:	ebc3 0300 	rsbls	r3, r3, r0
 8008ac0:	ebc3 0308 	rsbhi	r3, r3, r8
 8008ac4:	eba2 0903 	sub.w	r9, r2, r3
 8008ac8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008acc:	1ac4      	subs	r4, r0, r3
 8008ace:	fb03 f302 	mul.w	r3, r3, r2
 8008ad2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008ad6:	2a00      	cmp	r2, #0
 8008ad8:	f340 80e9 	ble.w	8008cae <forward_conv2d_nl_pool+0x1252>
 8008adc:	f023 050f 	bic.w	r5, r3, #15
 8008ae0:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8008ae4:	1e68      	subs	r0, r5, #1
 8008ae6:	0900      	lsrs	r0, r0, #4
 8008ae8:	3001      	adds	r0, #1
 8008aea:	fb06 f204 	mul.w	r2, r6, r4
 8008aee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008af0:	0102      	lsls	r2, r0, #4
 8008af2:	62ba      	str	r2, [r7, #40]	; 0x28
 8008af4:	fb06 f909 	mul.w	r9, r6, r9
 8008af8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008afc:	eef0 6a46 	vmov.f32	s13, s12
 8008b00:	f04f 0e00 	mov.w	lr, #0
 8008b04:	4662      	mov	r2, ip
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	f340 80cf 	ble.w	8008caa <forward_conv2d_nl_pool+0x124e>
 8008b0c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008b10:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008b14:	2600      	movs	r6, #0
 8008b16:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8008b1a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008b1e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8008b22:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8008b26:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8008b2a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8008b2e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8008b32:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008b36:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8008b3a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8008b3e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008b42:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8008b46:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8008b4a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8008b4e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8008b52:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8008b56:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8008b5a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8008b5e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8008b62:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8008b66:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8008b6a:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8008b6e:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8008b72:	ed50 3a04 	vldr	s7, [r0, #-16]
 8008b76:	ed14 4a04 	vldr	s8, [r4, #-16]
 8008b7a:	ed54 4a03 	vldr	s9, [r4, #-12]
 8008b7e:	ed10 5a03 	vldr	s10, [r0, #-12]
 8008b82:	ed50 5a02 	vldr	s11, [r0, #-8]
 8008b86:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008b8a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8008b8e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8008b92:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008b96:	3610      	adds	r6, #16
 8008b98:	42ae      	cmp	r6, r5
 8008b9a:	ed14 fa01 	vldr	s30, [r4, #-4]
 8008b9e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8008ba2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008ba6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008baa:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008bae:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008bb2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008bb6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008bba:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008bbe:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008bc2:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008bc6:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008bca:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008bce:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008bd2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008bd6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008bda:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008bde:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008be2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008be6:	db96      	blt.n	8008b16 <forward_conv2d_nl_pool+0x10ba>
 8008be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bea:	4451      	add	r1, sl
 8008bec:	4452      	add	r2, sl
 8008bee:	4283      	cmp	r3, r0
 8008bf0:	dd0f      	ble.n	8008c12 <forward_conv2d_nl_pool+0x11b6>
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	468c      	mov	ip, r1
 8008bf6:	4616      	mov	r6, r2
 8008bf8:	ecb6 7a01 	vldmia	r6!, {s14}
 8008bfc:	ecfc 7a01 	vldmia	ip!, {s15}
 8008c00:	3401      	adds	r4, #1
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c08:	d1f6      	bne.n	8008bf8 <forward_conv2d_nl_pool+0x119c>
 8008c0a:	1a18      	subs	r0, r3, r0
 8008c0c:	0080      	lsls	r0, r0, #2
 8008c0e:	4402      	add	r2, r0
 8008c10:	4401      	add	r1, r0
 8008c12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008c14:	4402      	add	r2, r0
 8008c16:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8008c1a:	f10e 0e01 	add.w	lr, lr, #1
 8008c1e:	4570      	cmp	r0, lr
 8008c20:	4449      	add	r1, r9
 8008c22:	f47f af70 	bne.w	8008b06 <forward_conv2d_nl_pool+0x10aa>
 8008c26:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c2c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008c30:	edc3 6a00 	vstr	s13, [r3]
 8008c34:	4608      	mov	r0, r1
 8008c36:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008c3a:	440b      	add	r3, r1
 8008c3c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008c40:	677b      	str	r3, [r7, #116]	; 0x74
 8008c42:	4410      	add	r0, r2
 8008c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c46:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008c50:	4418      	add	r0, r3
 8008c52:	1acb      	subs	r3, r1, r3
 8008c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c58:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008c5c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8008c60:	f10b 0b01 	add.w	fp, fp, #1
 8008c64:	455b      	cmp	r3, fp
 8008c66:	eba8 0802 	sub.w	r8, r8, r2
 8008c6a:	f47f af14 	bne.w	8008a96 <forward_conv2d_nl_pool+0x103a>
 8008c6e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008c72:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008c80:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008c84:	3204      	adds	r2, #4
 8008c86:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008c8a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008c8e:	3301      	adds	r3, #1
 8008c90:	429a      	cmp	r2, r3
 8008c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c96:	f47f aecf 	bne.w	8008a38 <forward_conv2d_nl_pool+0xfdc>
 8008c9a:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8008c9e:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8008ca2:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8008ca6:	f7ff ba23 	b.w	80080f0 <forward_conv2d_nl_pool+0x694>
 8008caa:	2000      	movs	r0, #0
 8008cac:	e79f      	b.n	8008bee <forward_conv2d_nl_pool+0x1192>
 8008cae:	eef0 6a46 	vmov.f32	s13, s12
 8008cb2:	e7b8      	b.n	8008c26 <forward_conv2d_nl_pool+0x11ca>
 8008cb4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008cb8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008cbc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008cc0:	eba8 0303 	sub.w	r3, r8, r3
 8008cc4:	e6f0      	b.n	8008aa8 <forward_conv2d_nl_pool+0x104c>
 8008cc6:	eeb0 6a48 	vmov.f32	s12, s16
 8008cca:	e6ca      	b.n	8008a62 <forward_conv2d_nl_pool+0x1006>

08008ccc <forward_dense>:
 8008ccc:	6983      	ldr	r3, [r0, #24]
 8008cce:	881a      	ldrh	r2, [r3, #0]
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	f000 80b5 	beq.w	8008e40 <forward_dense+0x174>
 8008cd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cda:	ed2d 8b10 	vpush	{d8-d15}
 8008cde:	685f      	ldr	r7, [r3, #4]
 8008ce0:	687e      	ldr	r6, [r7, #4]
 8008ce2:	b091      	sub	sp, #68	; 0x44
 8008ce4:	b106      	cbz	r6, 8008ce8 <forward_dense+0x1c>
 8008ce6:	6836      	ldr	r6, [r6, #0]
 8008ce8:	2a01      	cmp	r2, #1
 8008cea:	f240 80a6 	bls.w	8008e3a <forward_dense+0x16e>
 8008cee:	693d      	ldr	r5, [r7, #16]
 8008cf0:	b105      	cbz	r5, 8008cf4 <forward_dense+0x28>
 8008cf2:	682d      	ldr	r5, [r5, #0]
 8008cf4:	2a02      	cmp	r2, #2
 8008cf6:	f000 80a5 	beq.w	8008e44 <forward_dense+0x178>
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 821b 	beq.w	8009138 <forward_dense+0x46c>
 8008d02:	6819      	ldr	r1, [r3, #0]
 8008d04:	9106      	str	r1, [sp, #24]
 8008d06:	f117 0118 	adds.w	r1, r7, #24
 8008d0a:	f000 80c9 	beq.w	8008ea0 <forward_dense+0x1d4>
 8008d0e:	8b39      	ldrh	r1, [r7, #24]
 8008d10:	2901      	cmp	r1, #1
 8008d12:	f240 820e 	bls.w	8009132 <forward_dense+0x466>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 80c4 	beq.w	8008ea4 <forward_dense+0x1d8>
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	9307      	str	r3, [sp, #28]
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	68ec      	ldr	r4, [r5, #12]
 8008d24:	6998      	ldr	r0, [r3, #24]
 8008d26:	68f1      	ldr	r1, [r6, #12]
 8008d28:	6803      	ldr	r3, [r0, #0]
 8008d2a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8008d2e:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8008d32:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8008d36:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8008d3a:	fa49 f101 	asr.w	r1, r9, r1
 8008d3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d40:	2a03      	cmp	r2, #3
 8008d42:	fb0e f10c 	mul.w	r1, lr, ip
 8008d46:	6864      	ldr	r4, [r4, #4]
 8008d48:	9108      	str	r1, [sp, #32]
 8008d4a:	f000 81de 	beq.w	800910a <forward_dense+0x43e>
 8008d4e:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8008d50:	b117      	cbz	r7, 8008d58 <forward_dense+0x8c>
 8008d52:	683f      	ldr	r7, [r7, #0]
 8008d54:	b107      	cbz	r7, 8008d58 <forward_dense+0x8c>
 8008d56:	69bf      	ldr	r7, [r7, #24]
 8008d58:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	f000 81d7 	beq.w	8009110 <forward_dense+0x444>
 8008d62:	2b08      	cmp	r3, #8
 8008d64:	f000 81d4 	beq.w	8009110 <forward_dense+0x444>
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	69ab      	ldr	r3, [r5, #24]
 8008d6e:	69b2      	ldr	r2, [r6, #24]
 8008d70:	6899      	ldr	r1, [r3, #8]
 8008d72:	9b06      	ldr	r3, [sp, #24]
 8008d74:	9104      	str	r1, [sp, #16]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	6897      	ldr	r7, [r2, #8]
 8008d7a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8008d7e:	00a3      	lsls	r3, r4, #2
 8008d80:	9309      	str	r3, [sp, #36]	; 0x24
 8008d82:	18ce      	adds	r6, r1, r3
 8008d84:	9b08      	ldr	r3, [sp, #32]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d052      	beq.n	8008e30 <forward_dense+0x164>
 8008d8a:	f1a8 0310 	sub.w	r3, r8, #16
 8008d8e:	091b      	lsrs	r3, r3, #4
 8008d90:	3301      	adds	r3, #1
 8008d92:	019b      	lsls	r3, r3, #6
 8008d94:	930c      	str	r3, [sp, #48]	; 0x30
 8008d96:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8008d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9305      	str	r3, [sp, #20]
 8008da0:	eddf aace 	vldr	s21, [pc, #824]	; 80090dc <forward_dense+0x410>
 8008da4:	f008 030f 	and.w	r3, r8, #15
 8008da8:	930d      	str	r3, [sp, #52]	; 0x34
 8008daa:	9b06      	ldr	r3, [sp, #24]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	689d      	ldr	r5, [r3, #8]
 8008db0:	9b07      	ldr	r3, [sp, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 818f 	beq.w	80090d6 <forward_dense+0x40a>
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	689c      	ldr	r4, [r3, #8]
 8008dbc:	9b04      	ldr	r3, [sp, #16]
 8008dbe:	f1ba 0f00 	cmp.w	sl, #0
 8008dc2:	d071      	beq.n	8008ea8 <forward_dense+0x1dc>
 8008dc4:	42b3      	cmp	r3, r6
 8008dc6:	d229      	bcs.n	8008e1c <forward_dense+0x150>
 8008dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dca:	469b      	mov	fp, r3
 8008dcc:	ab0f      	add	r3, sp, #60	; 0x3c
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	2a04      	cmp	r2, #4
 8008dd2:	4633      	mov	r3, r6
 8008dd4:	4646      	mov	r6, r8
 8008dd6:	4698      	mov	r8, r3
 8008dd8:	d037      	beq.n	8008e4a <forward_dense+0x17e>
 8008dda:	2c00      	cmp	r4, #0
 8008ddc:	f000 8180 	beq.w	80090e0 <forward_dense+0x414>
 8008de0:	f8d4 c000 	ldr.w	ip, [r4]
 8008de4:	9803      	ldr	r0, [sp, #12]
 8008de6:	9600      	str	r6, [sp, #0]
 8008de8:	463b      	mov	r3, r7
 8008dea:	4629      	mov	r1, r5
 8008dec:	4652      	mov	r2, sl
 8008dee:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8008df2:	f7fe fc57 	bl	80076a4 <ai_dict8_dot_array_f32>
 8008df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008df8:	f84b 3b04 	str.w	r3, [fp], #4
 8008dfc:	45c3      	cmp	fp, r8
 8008dfe:	f104 0404 	add.w	r4, r4, #4
 8008e02:	444d      	add	r5, r9
 8008e04:	d3e9      	bcc.n	8008dda <forward_dense+0x10e>
 8008e06:	4643      	mov	r3, r8
 8008e08:	46b0      	mov	r8, r6
 8008e0a:	461e      	mov	r6, r3
 8008e0c:	9a04      	ldr	r2, [sp, #16]
 8008e0e:	43d3      	mvns	r3, r2
 8008e10:	4433      	add	r3, r6
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	3304      	adds	r3, #4
 8008e18:	18d3      	adds	r3, r2, r3
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e1e:	9b05      	ldr	r3, [sp, #20]
 8008e20:	4417      	add	r7, r2
 8008e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e24:	4416      	add	r6, r2
 8008e26:	9a08      	ldr	r2, [sp, #32]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	9305      	str	r3, [sp, #20]
 8008e2e:	d1bc      	bne.n	8008daa <forward_dense+0xde>
 8008e30:	b011      	add	sp, #68	; 0x44
 8008e32:	ecbd 8b10 	vpop	{d8-d15}
 8008e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	deff      	udf	#255	; 0xff
 8008e40:	6853      	ldr	r3, [r2, #4]
 8008e42:	deff      	udf	#255	; 0xff
 8008e44:	2300      	movs	r3, #0
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	deff      	udf	#255	; 0xff
 8008e4a:	b1a4      	cbz	r4, 8008e76 <forward_dense+0x1aa>
 8008e4c:	f8d4 c000 	ldr.w	ip, [r4]
 8008e50:	9803      	ldr	r0, [sp, #12]
 8008e52:	9600      	str	r6, [sp, #0]
 8008e54:	463b      	mov	r3, r7
 8008e56:	4629      	mov	r1, r5
 8008e58:	4652      	mov	r2, sl
 8008e5a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8008e5e:	f7fe fcef 	bl	8007840 <ai_dict4_dot_array_f32>
 8008e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e64:	f84b 3b04 	str.w	r3, [fp], #4
 8008e68:	45c3      	cmp	fp, r8
 8008e6a:	f104 0404 	add.w	r4, r4, #4
 8008e6e:	444d      	add	r5, r9
 8008e70:	d2c9      	bcs.n	8008e06 <forward_dense+0x13a>
 8008e72:	2c00      	cmp	r4, #0
 8008e74:	d1ea      	bne.n	8008e4c <forward_dense+0x180>
 8008e76:	4634      	mov	r4, r6
 8008e78:	4646      	mov	r6, r8
 8008e7a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e7e:	9400      	str	r4, [sp, #0]
 8008e80:	463b      	mov	r3, r7
 8008e82:	4629      	mov	r1, r5
 8008e84:	4652      	mov	r2, sl
 8008e86:	4640      	mov	r0, r8
 8008e88:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008e8c:	f7fe fcd8 	bl	8007840 <ai_dict4_dot_array_f32>
 8008e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e92:	f84b 3b04 	str.w	r3, [fp], #4
 8008e96:	45b3      	cmp	fp, r6
 8008e98:	444d      	add	r5, r9
 8008e9a:	d3f0      	bcc.n	8008e7e <forward_dense+0x1b2>
 8008e9c:	46a0      	mov	r8, r4
 8008e9e:	e7b5      	b.n	8008e0c <forward_dense+0x140>
 8008ea0:	9107      	str	r1, [sp, #28]
 8008ea2:	e73d      	b.n	8008d20 <forward_dense+0x54>
 8008ea4:	9307      	str	r3, [sp, #28]
 8008ea6:	e73b      	b.n	8008d20 <forward_dense+0x54>
 8008ea8:	42b3      	cmp	r3, r6
 8008eaa:	d2b7      	bcs.n	8008e1c <forward_dense+0x150>
 8008eac:	4618      	mov	r0, r3
 8008eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8008eb4:	eb07 0c03 	add.w	ip, r7, r3
 8008eb8:	469e      	mov	lr, r3
 8008eba:	2c00      	cmp	r4, #0
 8008ebc:	f000 80ff 	beq.w	80090be <forward_dense+0x3f2>
 8008ec0:	f1b8 0f0f 	cmp.w	r8, #15
 8008ec4:	edd4 fa00 	vldr	s31, [r4]
 8008ec8:	eddf 6a84 	vldr	s13, [pc, #528]	; 80090dc <forward_dense+0x410>
 8008ecc:	f104 0404 	add.w	r4, r4, #4
 8008ed0:	f240 80fd 	bls.w	80090ce <forward_dense+0x402>
 8008ed4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008ed8:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008edc:	4641      	mov	r1, r8
 8008ede:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8008ee2:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008ee6:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8008eea:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8008eee:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8008ef2:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8008ef6:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8008efa:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8008efe:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8008f02:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8008f06:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8008f0a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8008f0e:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8008f12:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8008f16:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8008f1a:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8008f1e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8008f22:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8008f26:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8008f2a:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8008f2e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8008f32:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8008f36:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8008f3a:	ed12 4a04 	vldr	s8, [r2, #-16]
 8008f3e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008f42:	ed13 5a03 	vldr	s10, [r3, #-12]
 8008f46:	ed52 5a03 	vldr	s11, [r2, #-12]
 8008f4a:	ed13 6a02 	vldr	s12, [r3, #-8]
 8008f4e:	ed12 7a02 	vldr	s14, [r2, #-8]
 8008f52:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8008f56:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8008f5a:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008f5e:	3910      	subs	r1, #16
 8008f60:	290f      	cmp	r1, #15
 8008f62:	ed52 ea01 	vldr	s29, [r2, #-4]
 8008f66:	ed13 ea01 	vldr	s28, [r3, #-4]
 8008f6a:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8008f6e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008f72:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008f76:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8008f7a:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8008f7e:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8008f82:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008f86:	eee8 7a88 	vfma.f32	s15, s17, s16
 8008f8a:	eee0 7a20 	vfma.f32	s15, s0, s1
 8008f8e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008f92:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008f96:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008f9a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008f9e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008fa2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008fa6:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008faa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008fae:	d896      	bhi.n	8008ede <forward_dense+0x212>
 8008fb0:	eb05 010e 	add.w	r1, r5, lr
 8008fb4:	465b      	mov	r3, fp
 8008fb6:	4662      	mov	r2, ip
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d075      	beq.n	80090a8 <forward_dense+0x3dc>
 8008fbc:	ed91 7a00 	vldr	s14, [r1]
 8008fc0:	edd2 7a00 	vldr	s15, [r2]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008fca:	d06d      	beq.n	80090a8 <forward_dense+0x3dc>
 8008fcc:	ed91 7a01 	vldr	s14, [r1, #4]
 8008fd0:	edd2 7a01 	vldr	s15, [r2, #4]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008fda:	d065      	beq.n	80090a8 <forward_dense+0x3dc>
 8008fdc:	ed91 7a02 	vldr	s14, [r1, #8]
 8008fe0:	edd2 7a02 	vldr	s15, [r2, #8]
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008fea:	d05d      	beq.n	80090a8 <forward_dense+0x3dc>
 8008fec:	ed91 7a03 	vldr	s14, [r1, #12]
 8008ff0:	edd2 7a03 	vldr	s15, [r2, #12]
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008ffa:	d055      	beq.n	80090a8 <forward_dense+0x3dc>
 8008ffc:	ed91 7a04 	vldr	s14, [r1, #16]
 8009000:	edd2 7a04 	vldr	s15, [r2, #16]
 8009004:	2b05      	cmp	r3, #5
 8009006:	eee7 6a27 	vfma.f32	s13, s14, s15
 800900a:	d04d      	beq.n	80090a8 <forward_dense+0x3dc>
 800900c:	ed91 7a05 	vldr	s14, [r1, #20]
 8009010:	edd2 7a05 	vldr	s15, [r2, #20]
 8009014:	2b06      	cmp	r3, #6
 8009016:	eee7 6a27 	vfma.f32	s13, s14, s15
 800901a:	d045      	beq.n	80090a8 <forward_dense+0x3dc>
 800901c:	ed91 7a06 	vldr	s14, [r1, #24]
 8009020:	edd2 7a06 	vldr	s15, [r2, #24]
 8009024:	2b07      	cmp	r3, #7
 8009026:	eee7 6a27 	vfma.f32	s13, s14, s15
 800902a:	d03d      	beq.n	80090a8 <forward_dense+0x3dc>
 800902c:	ed91 7a07 	vldr	s14, [r1, #28]
 8009030:	edd2 7a07 	vldr	s15, [r2, #28]
 8009034:	2b08      	cmp	r3, #8
 8009036:	eee7 6a27 	vfma.f32	s13, s14, s15
 800903a:	d035      	beq.n	80090a8 <forward_dense+0x3dc>
 800903c:	ed91 7a08 	vldr	s14, [r1, #32]
 8009040:	edd2 7a08 	vldr	s15, [r2, #32]
 8009044:	2b09      	cmp	r3, #9
 8009046:	eee7 6a27 	vfma.f32	s13, s14, s15
 800904a:	d02d      	beq.n	80090a8 <forward_dense+0x3dc>
 800904c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8009050:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009054:	2b0a      	cmp	r3, #10
 8009056:	eee7 6a27 	vfma.f32	s13, s14, s15
 800905a:	d025      	beq.n	80090a8 <forward_dense+0x3dc>
 800905c:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8009060:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8009064:	2b0b      	cmp	r3, #11
 8009066:	eee7 6a27 	vfma.f32	s13, s14, s15
 800906a:	d01d      	beq.n	80090a8 <forward_dense+0x3dc>
 800906c:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8009070:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8009074:	2b0c      	cmp	r3, #12
 8009076:	eee7 6a27 	vfma.f32	s13, s14, s15
 800907a:	d015      	beq.n	80090a8 <forward_dense+0x3dc>
 800907c:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8009080:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8009084:	2b0d      	cmp	r3, #13
 8009086:	eee7 6a27 	vfma.f32	s13, s14, s15
 800908a:	d00d      	beq.n	80090a8 <forward_dense+0x3dc>
 800908c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8009090:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8009094:	2b0e      	cmp	r3, #14
 8009096:	eee7 6a27 	vfma.f32	s13, s14, s15
 800909a:	d005      	beq.n	80090a8 <forward_dense+0x3dc>
 800909c:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80090a0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80090a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80090a8:	444d      	add	r5, r9
 80090aa:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80090ae:	ece0 6a01 	vstmia	r0!, {s13}
 80090b2:	42b0      	cmp	r0, r6
 80090b4:	f4bf aeaa 	bcs.w	8008e0c <forward_dense+0x140>
 80090b8:	2c00      	cmp	r4, #0
 80090ba:	f47f af01 	bne.w	8008ec0 <forward_dense+0x1f4>
 80090be:	f1b8 0f0f 	cmp.w	r8, #15
 80090c2:	eef0 fa6a 	vmov.f32	s31, s21
 80090c6:	eddf 6a05 	vldr	s13, [pc, #20]	; 80090dc <forward_dense+0x410>
 80090ca:	f63f af03 	bhi.w	8008ed4 <forward_dense+0x208>
 80090ce:	4643      	mov	r3, r8
 80090d0:	4629      	mov	r1, r5
 80090d2:	463a      	mov	r2, r7
 80090d4:	e770      	b.n	8008fb8 <forward_dense+0x2ec>
 80090d6:	461c      	mov	r4, r3
 80090d8:	e670      	b.n	8008dbc <forward_dense+0xf0>
 80090da:	bf00      	nop
 80090dc:	00000000 	.word	0x00000000
 80090e0:	4634      	mov	r4, r6
 80090e2:	4646      	mov	r6, r8
 80090e4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80090e8:	9400      	str	r4, [sp, #0]
 80090ea:	463b      	mov	r3, r7
 80090ec:	4629      	mov	r1, r5
 80090ee:	4652      	mov	r2, sl
 80090f0:	4640      	mov	r0, r8
 80090f2:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80090f6:	f7fe fad5 	bl	80076a4 <ai_dict8_dot_array_f32>
 80090fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090fc:	f84b 3b04 	str.w	r3, [fp], #4
 8009100:	455e      	cmp	r6, fp
 8009102:	444d      	add	r5, r9
 8009104:	d8f0      	bhi.n	80090e8 <forward_dense+0x41c>
 8009106:	46a0      	mov	r8, r4
 8009108:	e680      	b.n	8008e0c <forward_dense+0x140>
 800910a:	2300      	movs	r3, #0
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	deff      	udf	#255	; 0xff
 8009110:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009114:	2f00      	cmp	r7, #0
 8009116:	f43f ae29 	beq.w	8008d6c <forward_dense+0xa0>
 800911a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800911e:	f000 fb9d 	bl	800985c <ai_array_get_byte_size>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4602      	mov	r2, r0
 8009126:	4651      	mov	r1, sl
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fc1b 	bl	8009964 <memcpy>
 800912e:	4682      	mov	sl, r0
 8009130:	e61c      	b.n	8008d6c <forward_dense+0xa0>
 8009132:	2300      	movs	r3, #0
 8009134:	9307      	str	r3, [sp, #28]
 8009136:	e5f3      	b.n	8008d20 <forward_dense+0x54>
 8009138:	9306      	str	r3, [sp, #24]
 800913a:	e5e4      	b.n	8008d06 <forward_dense+0x3a>

0800913c <nl_func_relu_array_f32>:
 800913c:	b410      	push	{r4}
 800913e:	698c      	ldr	r4, [r1, #24]
 8009140:	6981      	ldr	r1, [r0, #24]
 8009142:	68a3      	ldr	r3, [r4, #8]
 8009144:	6889      	ldr	r1, [r1, #8]
 8009146:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800914a:	3a01      	subs	r2, #1
 800914c:	0092      	lsls	r2, r2, #2
 800914e:	189b      	adds	r3, r3, r2
 8009150:	d216      	bcs.n	8009180 <nl_func_relu_array_f32+0x44>
 8009152:	3204      	adds	r2, #4
 8009154:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009188 <nl_func_relu_array_f32+0x4c>
 8009158:	4411      	add	r1, r2
 800915a:	3304      	adds	r3, #4
 800915c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009160:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009168:	bfb8      	it	lt
 800916a:	eef0 7a47 	vmovlt.f32	s15, s14
 800916e:	ed61 7a01 	vstmdb	r1!, {s15}
 8009172:	68a0      	ldr	r0, [r4, #8]
 8009174:	f1a3 0208 	sub.w	r2, r3, #8
 8009178:	4290      	cmp	r0, r2
 800917a:	f1a3 0304 	sub.w	r3, r3, #4
 800917e:	d9ed      	bls.n	800915c <nl_func_relu_array_f32+0x20>
 8009180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	00000000 	.word	0x00000000

0800918c <nl_func_relu_generic_array_f32>:
 800918c:	b430      	push	{r4, r5}
 800918e:	6989      	ldr	r1, [r1, #24]
 8009190:	6980      	ldr	r0, [r0, #24]
 8009192:	edd3 6a02 	vldr	s13, [r3, #8]
 8009196:	688c      	ldr	r4, [r1, #8]
 8009198:	6880      	ldr	r0, [r0, #8]
 800919a:	ed93 7a00 	vldr	s14, [r3]
 800919e:	ed93 6a01 	vldr	s12, [r3, #4]
 80091a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80091a6:	3a01      	subs	r2, #1
 80091a8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80091ac:	0092      	lsls	r2, r2, #2
 80091ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b2:	4410      	add	r0, r2
 80091b4:	4422      	add	r2, r4
 80091b6:	d421      	bmi.n	80091fc <nl_func_relu_generic_array_f32+0x70>
 80091b8:	4294      	cmp	r4, r2
 80091ba:	d83d      	bhi.n	8009238 <nl_func_relu_generic_array_f32+0xac>
 80091bc:	1d13      	adds	r3, r2, #4
 80091be:	1d02      	adds	r2, r0, #4
 80091c0:	e010      	b.n	80091e4 <nl_func_relu_generic_array_f32+0x58>
 80091c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ca:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80091ce:	d501      	bpl.n	80091d4 <nl_func_relu_generic_array_f32+0x48>
 80091d0:	ee65 7a86 	vmul.f32	s15, s11, s12
 80091d4:	ed62 7a01 	vstmdb	r2!, {s15}
 80091d8:	6888      	ldr	r0, [r1, #8]
 80091da:	f1a3 0408 	sub.w	r4, r3, #8
 80091de:	4284      	cmp	r4, r0
 80091e0:	462b      	mov	r3, r5
 80091e2:	d329      	bcc.n	8009238 <nl_func_relu_generic_array_f32+0xac>
 80091e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80091e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80091ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f0:	f1a3 0504 	sub.w	r5, r3, #4
 80091f4:	d4e5      	bmi.n	80091c2 <nl_func_relu_generic_array_f32+0x36>
 80091f6:	eef0 7a66 	vmov.f32	s15, s13
 80091fa:	e7eb      	b.n	80091d4 <nl_func_relu_generic_array_f32+0x48>
 80091fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8009200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009204:	d01a      	beq.n	800923c <nl_func_relu_generic_array_f32+0xb0>
 8009206:	4294      	cmp	r4, r2
 8009208:	d816      	bhi.n	8009238 <nl_func_relu_generic_array_f32+0xac>
 800920a:	1d13      	adds	r3, r2, #4
 800920c:	1d02      	adds	r2, r0, #4
 800920e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009212:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800921a:	f1a3 0408 	sub.w	r4, r3, #8
 800921e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009222:	f1a3 0004 	sub.w	r0, r3, #4
 8009226:	ee66 6a86 	vmul.f32	s13, s13, s12
 800922a:	4623      	mov	r3, r4
 800922c:	d51e      	bpl.n	800926c <nl_func_relu_generic_array_f32+0xe0>
 800922e:	ed62 6a01 	vstmdb	r2!, {s13}
 8009232:	688b      	ldr	r3, [r1, #8]
 8009234:	42a3      	cmp	r3, r4
 8009236:	d91e      	bls.n	8009276 <nl_func_relu_generic_array_f32+0xea>
 8009238:	bc30      	pop	{r4, r5}
 800923a:	4770      	bx	lr
 800923c:	4294      	cmp	r4, r2
 800923e:	d8fb      	bhi.n	8009238 <nl_func_relu_generic_array_f32+0xac>
 8009240:	1d13      	adds	r3, r2, #4
 8009242:	2500      	movs	r5, #0
 8009244:	1d02      	adds	r2, r0, #4
 8009246:	ed53 7a01 	vldr	s15, [r3, #-4]
 800924a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800924e:	f1a3 0408 	sub.w	r4, r3, #8
 8009252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009256:	f1a3 0004 	sub.w	r0, r3, #4
 800925a:	4623      	mov	r3, r4
 800925c:	db0d      	blt.n	800927a <nl_func_relu_generic_array_f32+0xee>
 800925e:	ed62 7a01 	vstmdb	r2!, {s15}
 8009262:	688b      	ldr	r3, [r1, #8]
 8009264:	42a3      	cmp	r3, r4
 8009266:	d8e7      	bhi.n	8009238 <nl_func_relu_generic_array_f32+0xac>
 8009268:	4603      	mov	r3, r0
 800926a:	e7ec      	b.n	8009246 <nl_func_relu_generic_array_f32+0xba>
 800926c:	ed62 7a01 	vstmdb	r2!, {s15}
 8009270:	688c      	ldr	r4, [r1, #8]
 8009272:	429c      	cmp	r4, r3
 8009274:	d8e0      	bhi.n	8009238 <nl_func_relu_generic_array_f32+0xac>
 8009276:	4603      	mov	r3, r0
 8009278:	e7c9      	b.n	800920e <nl_func_relu_generic_array_f32+0x82>
 800927a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800927e:	688c      	ldr	r4, [r1, #8]
 8009280:	429c      	cmp	r4, r3
 8009282:	d8d9      	bhi.n	8009238 <nl_func_relu_generic_array_f32+0xac>
 8009284:	4603      	mov	r3, r0
 8009286:	e7de      	b.n	8009246 <nl_func_relu_generic_array_f32+0xba>

08009288 <forward_relu>:
 8009288:	6982      	ldr	r2, [r0, #24]
 800928a:	8813      	ldrh	r3, [r2, #0]
 800928c:	b333      	cbz	r3, 80092dc <forward_relu+0x54>
 800928e:	6852      	ldr	r2, [r2, #4]
 8009290:	6851      	ldr	r1, [r2, #4]
 8009292:	b101      	cbz	r1, 8009296 <forward_relu+0xe>
 8009294:	6809      	ldr	r1, [r1, #0]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d91d      	bls.n	80092d6 <forward_relu+0x4e>
 800929a:	b4f0      	push	{r4, r5, r6, r7}
 800929c:	6917      	ldr	r7, [r2, #16]
 800929e:	b107      	cbz	r7, 80092a2 <forward_relu+0x1a>
 80092a0:	683f      	ldr	r7, [r7, #0]
 80092a2:	688c      	ldr	r4, [r1, #8]
 80092a4:	69c3      	ldr	r3, [r0, #28]
 80092a6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d044      	beq.n	8009338 <forward_relu+0xb0>
 80092ae:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80092b2:	2d01      	cmp	r5, #1
 80092b4:	d014      	beq.n	80092e0 <forward_relu+0x58>
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d074      	beq.n	80093a4 <forward_relu+0x11c>
 80092ba:	68ce      	ldr	r6, [r1, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80092c2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	fb05 f202 	mul.w	r2, r5, r2
 80092cc:	d1f9      	bne.n	80092c2 <forward_relu+0x3a>
 80092ce:	4638      	mov	r0, r7
 80092d0:	bcf0      	pop	{r4, r5, r6, r7}
 80092d2:	f7ff bf5b 	b.w	800918c <nl_func_relu_generic_array_f32>
 80092d6:	2300      	movs	r3, #0
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	deff      	udf	#255	; 0xff
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	deff      	udf	#255	; 0xff
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	6988      	ldr	r0, [r1, #24]
 80092e4:	6896      	ldr	r6, [r2, #8]
 80092e6:	ed93 7a00 	vldr	s14, [r3]
 80092ea:	6882      	ldr	r2, [r0, #8]
 80092ec:	b184      	cbz	r4, 8009310 <forward_relu+0x88>
 80092ee:	68cf      	ldr	r7, [r1, #12]
 80092f0:	462b      	mov	r3, r5
 80092f2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80092f6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80092fa:	42a7      	cmp	r7, r4
 80092fc:	fb01 f303 	mul.w	r3, r1, r3
 8009300:	d1f9      	bne.n	80092f6 <forward_relu+0x6e>
 8009302:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009306:	3b01      	subs	r3, #1
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	18d2      	adds	r2, r2, r3
 800930c:	441e      	add	r6, r3
 800930e:	d23f      	bcs.n	8009390 <forward_relu+0x108>
 8009310:	1d13      	adds	r3, r2, #4
 8009312:	2500      	movs	r5, #0
 8009314:	1d32      	adds	r2, r6, #4
 8009316:	ed53 7a01 	vldr	s15, [r3, #-4]
 800931a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800931e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009322:	f1a3 0104 	sub.w	r1, r3, #4
 8009326:	d835      	bhi.n	8009394 <forward_relu+0x10c>
 8009328:	ed62 7a01 	vstmdb	r2!, {s15}
 800932c:	6884      	ldr	r4, [r0, #8]
 800932e:	3b08      	subs	r3, #8
 8009330:	429c      	cmp	r4, r3
 8009332:	d82d      	bhi.n	8009390 <forward_relu+0x108>
 8009334:	460b      	mov	r3, r1
 8009336:	e7ee      	b.n	8009316 <forward_relu+0x8e>
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	698d      	ldr	r5, [r1, #24]
 800933c:	6898      	ldr	r0, [r3, #8]
 800933e:	68ab      	ldr	r3, [r5, #8]
 8009340:	b184      	cbz	r4, 8009364 <forward_relu+0xdc>
 8009342:	68ce      	ldr	r6, [r1, #12]
 8009344:	2201      	movs	r2, #1
 8009346:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800934a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800934e:	42a6      	cmp	r6, r4
 8009350:	fb01 f202 	mul.w	r2, r1, r2
 8009354:	d1f9      	bne.n	800934a <forward_relu+0xc2>
 8009356:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800935a:	3a01      	subs	r2, #1
 800935c:	0092      	lsls	r2, r2, #2
 800935e:	189b      	adds	r3, r3, r2
 8009360:	4410      	add	r0, r2
 8009362:	d215      	bcs.n	8009390 <forward_relu+0x108>
 8009364:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80093a8 <forward_relu+0x120>
 8009368:	3304      	adds	r3, #4
 800936a:	1d01      	adds	r1, r0, #4
 800936c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009378:	bfb8      	it	lt
 800937a:	eef0 7a47 	vmovlt.f32	s15, s14
 800937e:	ed61 7a01 	vstmdb	r1!, {s15}
 8009382:	68a8      	ldr	r0, [r5, #8]
 8009384:	f1a3 0208 	sub.w	r2, r3, #8
 8009388:	4290      	cmp	r0, r2
 800938a:	f1a3 0304 	sub.w	r3, r3, #4
 800938e:	d9ed      	bls.n	800936c <forward_relu+0xe4>
 8009390:	bcf0      	pop	{r4, r5, r6, r7}
 8009392:	4770      	bx	lr
 8009394:	f842 5d04 	str.w	r5, [r2, #-4]!
 8009398:	6884      	ldr	r4, [r0, #8]
 800939a:	3b08      	subs	r3, #8
 800939c:	429c      	cmp	r4, r3
 800939e:	d8f7      	bhi.n	8009390 <forward_relu+0x108>
 80093a0:	460b      	mov	r3, r1
 80093a2:	e7b8      	b.n	8009316 <forward_relu+0x8e>
 80093a4:	2201      	movs	r2, #1
 80093a6:	e792      	b.n	80092ce <forward_relu+0x46>
 80093a8:	00000000 	.word	0x00000000

080093ac <pool_func_mp_array_f32>:
 80093ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	b093      	sub	sp, #76	; 0x4c
 80093b2:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80093b6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80093b8:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 80093bc:	68a8      	ldr	r0, [r5, #8]
 80093be:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 80093c2:	9508      	str	r5, [sp, #32]
 80093c4:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 80093c8:	9002      	str	r0, [sp, #8]
 80093ca:	950d      	str	r5, [sp, #52]	; 0x34
 80093cc:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 80093d0:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 80093d4:	9004      	str	r0, [sp, #16]
 80093d6:	9506      	str	r5, [sp, #24]
 80093d8:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 80093dc:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 80093e0:	9009      	str	r0, [sp, #36]	; 0x24
 80093e2:	950b      	str	r5, [sp, #44]	; 0x2c
 80093e4:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 80093e8:	9200      	str	r2, [sp, #0]
 80093ea:	468a      	mov	sl, r1
 80093ec:	4699      	mov	r9, r3
 80093ee:	b95c      	cbnz	r4, 8009408 <pool_func_mp_array_f32+0x5c>
 80093f0:	b950      	cbnz	r0, 8009408 <pool_func_mp_array_f32+0x5c>
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	1a5a      	subs	r2, r3, r1
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	9908      	ldr	r1, [sp, #32]
 80093fa:	3a01      	subs	r2, #1
 80093fc:	3b01      	subs	r3, #1
 80093fe:	fb13 2301 	smlabb	r3, r3, r1, r2
 8009402:	041a      	lsls	r2, r3, #16
 8009404:	f100 809b 	bmi.w	800953e <pool_func_mp_array_f32+0x192>
 8009408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 808b 	beq.w	8009526 <pool_func_mp_array_f32+0x17a>
 8009410:	9b06      	ldr	r3, [sp, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 8087 	beq.w	8009526 <pool_func_mp_array_f32+0x17a>
 8009418:	f1b9 0f00 	cmp.w	r9, #0
 800941c:	f000 8083 	beq.w	8009526 <pool_func_mp_array_f32+0x17a>
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	1b1c      	subs	r4, r3, r4
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	1a1b      	subs	r3, r3, r0
 8009428:	b29b      	uxth	r3, r3
 800942a:	4240      	negs	r0, r0
 800942c:	2200      	movs	r2, #0
 800942e:	b2a1      	uxth	r1, r4
 8009430:	930f      	str	r3, [sp, #60]	; 0x3c
 8009432:	b283      	uxth	r3, r0
 8009434:	920e      	str	r2, [sp, #56]	; 0x38
 8009436:	910c      	str	r1, [sp, #48]	; 0x30
 8009438:	9310      	str	r3, [sp, #64]	; 0x40
 800943a:	9c06      	ldr	r4, [sp, #24]
 800943c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800943e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009440:	fb02 f204 	mul.w	r2, r2, r4
 8009444:	1acb      	subs	r3, r1, r3
 8009446:	920a      	str	r2, [sp, #40]	; 0x28
 8009448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800944a:	9205      	str	r2, [sp, #20]
 800944c:	2000      	movs	r0, #0
 800944e:	b21b      	sxth	r3, r3
 8009450:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009452:	9303      	str	r3, [sp, #12]
 8009454:	9007      	str	r0, [sp, #28]
 8009456:	4603      	mov	r3, r0
 8009458:	fa0f f881 	sxth.w	r8, r1
 800945c:	9204      	str	r2, [sp, #16]
 800945e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009460:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8009464:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8009468:	4413      	add	r3, r2
 800946a:	f04f 0e00 	mov.w	lr, #0
 800946e:	fb09 f303 	mul.w	r3, r9, r3
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8009478:	4675      	mov	r5, lr
 800947a:	9903      	ldr	r1, [sp, #12]
 800947c:	eddf 7a78 	vldr	s15, [pc, #480]	; 8009660 <pool_func_mp_array_f32+0x2b4>
 8009480:	4588      	cmp	r8, r1
 8009482:	dd24      	ble.n	80094ce <pool_func_mp_array_f32+0x122>
 8009484:	4564      	cmp	r4, ip
 8009486:	dd1e      	ble.n	80094c6 <pool_func_mp_array_f32+0x11a>
 8009488:	2900      	cmp	r1, #0
 800948a:	fb0a f601 	mul.w	r6, sl, r1
 800948e:	db1a      	blt.n	80094c6 <pool_func_mp_array_f32+0x11a>
 8009490:	9b00      	ldr	r3, [sp, #0]
 8009492:	4299      	cmp	r1, r3
 8009494:	da17      	bge.n	80094c6 <pool_func_mp_array_f32+0x11a>
 8009496:	f1bc 0f00 	cmp.w	ip, #0
 800949a:	4663      	mov	r3, ip
 800949c:	db46      	blt.n	800952c <pool_func_mp_array_f32+0x180>
 800949e:	18f2      	adds	r2, r6, r3
 80094a0:	fb09 5202 	mla	r2, r9, r2, r5
 80094a4:	1c58      	adds	r0, r3, #1
 80094a6:	459a      	cmp	sl, r3
 80094a8:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 80094ac:	b203      	sxth	r3, r0
 80094ae:	dd08      	ble.n	80094c2 <pool_func_mp_array_f32+0x116>
 80094b0:	ed92 7a00 	vldr	s14, [r2]
 80094b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094bc:	bfb8      	it	lt
 80094be:	eef0 7a47 	vmovlt.f32	s15, s14
 80094c2:	429c      	cmp	r4, r3
 80094c4:	dceb      	bgt.n	800949e <pool_func_mp_array_f32+0xf2>
 80094c6:	3101      	adds	r1, #1
 80094c8:	b209      	sxth	r1, r1
 80094ca:	4588      	cmp	r8, r1
 80094cc:	dcda      	bgt.n	8009484 <pool_func_mp_array_f32+0xd8>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	f10e 0e01 	add.w	lr, lr, #1
 80094d4:	441d      	add	r5, r3
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	fa0f fe8e 	sxth.w	lr, lr
 80094dc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80094e0:	45ce      	cmp	lr, r9
 80094e2:	edc5 7a00 	vstr	s15, [r5]
 80094e6:	4675      	mov	r5, lr
 80094e8:	dbc7      	blt.n	800947a <pool_func_mp_array_f32+0xce>
 80094ea:	9b07      	ldr	r3, [sp, #28]
 80094ec:	9808      	ldr	r0, [sp, #32]
 80094ee:	3301      	adds	r3, #1
 80094f0:	b219      	sxth	r1, r3
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	9107      	str	r1, [sp, #28]
 80094f6:	461a      	mov	r2, r3
 80094f8:	4402      	add	r2, r0
 80094fa:	9b04      	ldr	r3, [sp, #16]
 80094fc:	b292      	uxth	r2, r2
 80094fe:	9205      	str	r2, [sp, #20]
 8009500:	9a06      	ldr	r2, [sp, #24]
 8009502:	4403      	add	r3, r0
 8009504:	b29b      	uxth	r3, r3
 8009506:	428a      	cmp	r2, r1
 8009508:	9304      	str	r3, [sp, #16]
 800950a:	460b      	mov	r3, r1
 800950c:	dca7      	bgt.n	800945e <pool_func_mp_array_f32+0xb2>
 800950e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009510:	3301      	adds	r3, #1
 8009512:	b21a      	sxth	r2, r3
 8009514:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8009518:	440b      	add	r3, r1
 800951a:	b29b      	uxth	r3, r3
 800951c:	930c      	str	r3, [sp, #48]	; 0x30
 800951e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009520:	920e      	str	r2, [sp, #56]	; 0x38
 8009522:	4293      	cmp	r3, r2
 8009524:	dc89      	bgt.n	800943a <pool_func_mp_array_f32+0x8e>
 8009526:	b013      	add	sp, #76	; 0x4c
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	3301      	adds	r3, #1
 800952e:	b21b      	sxth	r3, r3
 8009530:	42bb      	cmp	r3, r7
 8009532:	dac6      	bge.n	80094c2 <pool_func_mp_array_f32+0x116>
 8009534:	3301      	adds	r3, #1
 8009536:	b21b      	sxth	r3, r3
 8009538:	42bb      	cmp	r3, r7
 800953a:	dbf7      	blt.n	800952c <pool_func_mp_array_f32+0x180>
 800953c:	e7c1      	b.n	80094c2 <pool_func_mp_array_f32+0x116>
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	9a00      	ldr	r2, [sp, #0]
 8009542:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009544:	1a9a      	subs	r2, r3, r2
 8009546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009548:	3a01      	subs	r2, #1
 800954a:	3b01      	subs	r3, #1
 800954c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8009550:	041b      	lsls	r3, r3, #16
 8009552:	f57f af59 	bpl.w	8009408 <pool_func_mp_array_f32+0x5c>
 8009556:	fb0a f309 	mul.w	r3, sl, r9
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8009560:	930e      	str	r3, [sp, #56]	; 0x38
 8009562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009564:	9001      	str	r0, [sp, #4]
 8009566:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8009570:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009572:	429a      	cmp	r2, r3
 8009574:	ddd7      	ble.n	8009526 <pool_func_mp_array_f32+0x17a>
 8009576:	9a00      	ldr	r2, [sp, #0]
 8009578:	9906      	ldr	r1, [sp, #24]
 800957a:	fa0f f882 	sxth.w	r8, r2
 800957e:	2900      	cmp	r1, #0
 8009580:	d062      	beq.n	8009648 <pool_func_mp_array_f32+0x29c>
 8009582:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009584:	fb01 f303 	mul.w	r3, r1, r3
 8009588:	1a12      	subs	r2, r2, r0
 800958a:	9305      	str	r3, [sp, #20]
 800958c:	b213      	sxth	r3, r2
 800958e:	9307      	str	r3, [sp, #28]
 8009590:	f1b9 0f00 	cmp.w	r9, #0
 8009594:	d058      	beq.n	8009648 <pool_func_mp_array_f32+0x29c>
 8009596:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009598:	fb02 f303 	mul.w	r3, r2, r3
 800959c:	2600      	movs	r6, #0
 800959e:	930c      	str	r3, [sp, #48]	; 0x30
 80095a0:	9b04      	ldr	r3, [sp, #16]
 80095a2:	9303      	str	r3, [sp, #12]
 80095a4:	4637      	mov	r7, r6
 80095a6:	46b2      	mov	sl, r6
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	9611      	str	r6, [sp, #68]	; 0x44
 80095ac:	eb0a 0b03 	add.w	fp, sl, r3
 80095b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095b2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80095b6:	b235      	sxth	r5, r6
 80095b8:	18eb      	adds	r3, r5, r3
 80095ba:	f04f 0a00 	mov.w	sl, #0
 80095be:	fb09 f303 	mul.w	r3, r9, r3
 80095c2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80095c4:	930a      	str	r3, [sp, #40]	; 0x28
 80095c6:	fb09 fb0b 	mul.w	fp, r9, fp
 80095ca:	46d6      	mov	lr, sl
 80095cc:	9807      	ldr	r0, [sp, #28]
 80095ce:	4580      	cmp	r8, r0
 80095d0:	dd43      	ble.n	800965a <pool_func_mp_array_f32+0x2ae>
 80095d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d4:	eddf 7a22 	vldr	s15, [pc, #136]	; 8009660 <pool_func_mp_array_f32+0x2b4>
 80095d8:	eb0e 0403 	add.w	r4, lr, r3
 80095dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80095e2:	42a9      	cmp	r1, r5
 80095e4:	dd0f      	ble.n	8009606 <pool_func_mp_array_f32+0x25a>
 80095e6:	4622      	mov	r2, r4
 80095e8:	462b      	mov	r3, r5
 80095ea:	ed92 7a00 	vldr	s14, [r2]
 80095ee:	3301      	adds	r3, #1
 80095f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f8:	b21b      	sxth	r3, r3
 80095fa:	bfb8      	it	lt
 80095fc:	eef0 7a47 	vmovlt.f32	s15, s14
 8009600:	4299      	cmp	r1, r3
 8009602:	4462      	add	r2, ip
 8009604:	d1f1      	bne.n	80095ea <pool_func_mp_array_f32+0x23e>
 8009606:	3001      	adds	r0, #1
 8009608:	b200      	sxth	r0, r0
 800960a:	4580      	cmp	r8, r0
 800960c:	4434      	add	r4, r6
 800960e:	d1e8      	bne.n	80095e2 <pool_func_mp_array_f32+0x236>
 8009610:	f10a 0a01 	add.w	sl, sl, #1
 8009614:	9a02      	ldr	r2, [sp, #8]
 8009616:	eb0b 030e 	add.w	r3, fp, lr
 800961a:	fa0f fa8a 	sxth.w	sl, sl
 800961e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009622:	45ca      	cmp	sl, r9
 8009624:	edc3 7a00 	vstr	s15, [r3]
 8009628:	46d6      	mov	lr, sl
 800962a:	dbcf      	blt.n	80095cc <pool_func_mp_array_f32+0x220>
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	9a08      	ldr	r2, [sp, #32]
 8009630:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009632:	4413      	add	r3, r2
 8009634:	b29b      	uxth	r3, r3
 8009636:	3701      	adds	r7, #1
 8009638:	9303      	str	r3, [sp, #12]
 800963a:	9b06      	ldr	r3, [sp, #24]
 800963c:	b23f      	sxth	r7, r7
 800963e:	4416      	add	r6, r2
 8009640:	42bb      	cmp	r3, r7
 8009642:	b2b6      	uxth	r6, r6
 8009644:	46ba      	mov	sl, r7
 8009646:	dcaf      	bgt.n	80095a8 <pool_func_mp_array_f32+0x1fc>
 8009648:	9b00      	ldr	r3, [sp, #0]
 800964a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800964c:	4413      	add	r3, r2
 800964e:	b29b      	uxth	r3, r3
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	9b01      	ldr	r3, [sp, #4]
 8009654:	3301      	adds	r3, #1
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	e788      	b.n	800956c <pool_func_mp_array_f32+0x1c0>
 800965a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8009660 <pool_func_mp_array_f32+0x2b4>
 800965e:	e7d7      	b.n	8009610 <pool_func_mp_array_f32+0x264>
 8009660:	cf000000 	.word	0xcf000000

08009664 <ai_check_custom_types>:
 8009664:	4b13      	ldr	r3, [pc, #76]	; (80096b4 <ai_check_custom_types+0x50>)
 8009666:	b082      	sub	sp, #8
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	b118      	cbz	r0, 8009676 <ai_check_custom_types+0x12>
 800966e:	7803      	ldrb	r3, [r0, #0]
 8009670:	2b03      	cmp	r3, #3
 8009672:	d002      	beq.n	800967a <ai_check_custom_types+0x16>
 8009674:	2000      	movs	r0, #0
 8009676:	b002      	add	sp, #8
 8009678:	4770      	bx	lr
 800967a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <ai_check_custom_types+0x28>
 8009682:	2001      	movs	r0, #1
 8009684:	f080 0001 	eor.w	r0, r0, #1
 8009688:	b002      	add	sp, #8
 800968a:	4770      	bx	lr
 800968c:	7842      	ldrb	r2, [r0, #1]
 800968e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009692:	429a      	cmp	r2, r3
 8009694:	f100 0001 	add.w	r0, r0, #1
 8009698:	d1f3      	bne.n	8009682 <ai_check_custom_types+0x1e>
 800969a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800969e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d1ed      	bne.n	8009682 <ai_check_custom_types+0x1e>
 80096a6:	7842      	ldrb	r2, [r0, #1]
 80096a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d1e8      	bne.n	8009682 <ai_check_custom_types+0x1e>
 80096b0:	2000      	movs	r0, #0
 80096b2:	e7e7      	b.n	8009684 <ai_check_custom_types+0x20>
 80096b4:	0800f3f4 	.word	0x0800f3f4

080096b8 <ai_layers_init_all>:
 80096b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80096ba:	b17a      	cbz	r2, 80096dc <ai_layers_init_all+0x24>
 80096bc:	6913      	ldr	r3, [r2, #16]
 80096be:	60d0      	str	r0, [r2, #12]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	f04f 0201 	mov.w	r2, #1
 80096c6:	d009      	beq.n	80096dc <ai_layers_init_all+0x24>
 80096c8:	b143      	cbz	r3, 80096dc <ai_layers_init_all+0x24>
 80096ca:	6919      	ldr	r1, [r3, #16]
 80096cc:	60d8      	str	r0, [r3, #12]
 80096ce:	4299      	cmp	r1, r3
 80096d0:	f102 0201 	add.w	r2, r2, #1
 80096d4:	d002      	beq.n	80096dc <ai_layers_init_all+0x24>
 80096d6:	460b      	mov	r3, r1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1f6      	bne.n	80096ca <ai_layers_init_all+0x12>
 80096dc:	4610      	mov	r0, r2
 80096de:	4770      	bx	lr

080096e0 <ai_layers_post_init_all>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80096e4:	b18c      	cbz	r4, 800970a <ai_layers_post_init_all+0x2a>
 80096e6:	2500      	movs	r5, #0
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	f013 0f01 	tst.w	r3, #1
 80096ee:	4620      	mov	r0, r4
 80096f0:	d003      	beq.n	80096fa <ai_layers_post_init_all+0x1a>
 80096f2:	6a23      	ldr	r3, [r4, #32]
 80096f4:	b10b      	cbz	r3, 80096fa <ai_layers_post_init_all+0x1a>
 80096f6:	4798      	blx	r3
 80096f8:	3501      	adds	r5, #1
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	d002      	beq.n	8009706 <ai_layers_post_init_all+0x26>
 8009700:	461c      	mov	r4, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1f0      	bne.n	80096e8 <ai_layers_post_init_all+0x8>
 8009706:	4628      	mov	r0, r5
 8009708:	bd38      	pop	{r3, r4, r5, pc}
 800970a:	4625      	mov	r5, r4
 800970c:	e7fb      	b.n	8009706 <ai_layers_post_init_all+0x26>
 800970e:	bf00      	nop

08009710 <ai_layers_forward_all>:
 8009710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009714:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8009716:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8009718:	4604      	mov	r4, r0
 800971a:	2f00      	cmp	r7, #0
 800971c:	d02c      	beq.n	8009778 <ai_layers_forward_all+0x68>
 800971e:	2d00      	cmp	r5, #0
 8009720:	d03f      	beq.n	80097a2 <ai_layers_forward_all+0x92>
 8009722:	6385      	str	r5, [r0, #56]	; 0x38
 8009724:	4629      	mov	r1, r5
 8009726:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009728:	2001      	movs	r0, #1
 800972a:	47b8      	blx	r7
 800972c:	2600      	movs	r6, #0
 800972e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009730:	46b0      	mov	r8, r6
 8009732:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009734:	2002      	movs	r0, #2
 8009736:	47b8      	blx	r7
 8009738:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800973a:	696b      	ldr	r3, [r5, #20]
 800973c:	4628      	mov	r0, r5
 800973e:	4798      	blx	r3
 8009740:	692b      	ldr	r3, [r5, #16]
 8009742:	429d      	cmp	r5, r3
 8009744:	f04f 0003 	mov.w	r0, #3
 8009748:	4619      	mov	r1, r3
 800974a:	d009      	beq.n	8009760 <ai_layers_forward_all+0x50>
 800974c:	63a3      	str	r3, [r4, #56]	; 0x38
 800974e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009750:	47b8      	blx	r7
 8009752:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009754:	3601      	adds	r6, #1
 8009756:	2900      	cmp	r1, #0
 8009758:	d1eb      	bne.n	8009732 <ai_layers_forward_all+0x22>
 800975a:	4630      	mov	r0, r6
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	2100      	movs	r1, #0
 8009762:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8009766:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009768:	47b8      	blx	r7
 800976a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800976c:	3601      	adds	r6, #1
 800976e:	2900      	cmp	r1, #0
 8009770:	d1df      	bne.n	8009732 <ai_layers_forward_all+0x22>
 8009772:	4630      	mov	r0, r6
 8009774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009778:	b19d      	cbz	r5, 80097a2 <ai_layers_forward_all+0x92>
 800977a:	6385      	str	r5, [r0, #56]	; 0x38
 800977c:	463e      	mov	r6, r7
 800977e:	696b      	ldr	r3, [r5, #20]
 8009780:	4628      	mov	r0, r5
 8009782:	4798      	blx	r3
 8009784:	692b      	ldr	r3, [r5, #16]
 8009786:	42ab      	cmp	r3, r5
 8009788:	f106 0601 	add.w	r6, r6, #1
 800978c:	d004      	beq.n	8009798 <ai_layers_forward_all+0x88>
 800978e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009790:	461d      	mov	r5, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1f3      	bne.n	800977e <ai_layers_forward_all+0x6e>
 8009796:	e7e0      	b.n	800975a <ai_layers_forward_all+0x4a>
 8009798:	2300      	movs	r3, #0
 800979a:	63a3      	str	r3, [r4, #56]	; 0x38
 800979c:	4630      	mov	r0, r6
 800979e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a2:	462e      	mov	r6, r5
 80097a4:	4630      	mov	r0, r6
 80097a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097aa:	bf00      	nop

080097ac <ai_array_to_buffer_fmt>:
 80097ac:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d029      	beq.n	8009808 <ai_array_to_buffer_fmt+0x5c>
 80097b4:	4a22      	ldr	r2, [pc, #136]	; (8009840 <ai_array_to_buffer_fmt+0x94>)
 80097b6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d010      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 80097be:	dd13      	ble.n	80097e8 <ai_array_to_buffer_fmt+0x3c>
 80097c0:	4a20      	ldr	r2, [pc, #128]	; (8009844 <ai_array_to_buffer_fmt+0x98>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d00c      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 80097c6:	dc27      	bgt.n	8009818 <ai_array_to_buffer_fmt+0x6c>
 80097c8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d007      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 80097d0:	3207      	adds	r2, #7
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d004      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 80097d6:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80097da:	4293      	cmp	r3, r2
 80097dc:	d000      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 80097de:	2340      	movs	r3, #64	; 0x40
 80097e0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80097e4:	4318      	orrs	r0, r3
 80097e6:	4770      	bx	lr
 80097e8:	4a17      	ldr	r2, [pc, #92]	; (8009848 <ai_array_to_buffer_fmt+0x9c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d0f8      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 80097ee:	dd1e      	ble.n	800982e <ai_array_to_buffer_fmt+0x82>
 80097f0:	4a16      	ldr	r2, [pc, #88]	; (800984c <ai_array_to_buffer_fmt+0xa0>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d0f4      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 80097f6:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d0f0      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 80097fe:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8009802:	4293      	cmp	r3, r2
 8009804:	d1eb      	bne.n	80097de <ai_array_to_buffer_fmt+0x32>
 8009806:	e7eb      	b.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 8009808:	4b11      	ldr	r3, [pc, #68]	; (8009850 <ai_array_to_buffer_fmt+0xa4>)
 800980a:	4003      	ands	r3, r0
 800980c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009810:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009814:	4318      	orrs	r0, r3
 8009816:	4770      	bx	lr
 8009818:	4a0e      	ldr	r2, [pc, #56]	; (8009854 <ai_array_to_buffer_fmt+0xa8>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d0e0      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 800981e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8009822:	4293      	cmp	r3, r2
 8009824:	d0dc      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 8009826:	4a0c      	ldr	r2, [pc, #48]	; (8009858 <ai_array_to_buffer_fmt+0xac>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d1d8      	bne.n	80097de <ai_array_to_buffer_fmt+0x32>
 800982c:	e7d8      	b.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 800982e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8009832:	4293      	cmp	r3, r2
 8009834:	d0d4      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 8009836:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800983a:	4293      	cmp	r3, r2
 800983c:	d0d0      	beq.n	80097e0 <ai_array_to_buffer_fmt+0x34>
 800983e:	e7ce      	b.n	80097de <ai_array_to_buffer_fmt+0x32>
 8009840:	00060440 	.word	0x00060440
 8009844:	00840840 	.word	0x00840840
 8009848:	00040447 	.word	0x00040447
 800984c:	0004084f 	.word	0x0004084f
 8009850:	00803fff 	.word	0x00803fff
 8009854:	00841040 	.word	0x00841040
 8009858:	0084084f 	.word	0x0084084f

0800985c <ai_array_get_byte_size>:
 800985c:	b1c1      	cbz	r1, 8009890 <ai_array_get_byte_size+0x34>
 800985e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8009862:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009866:	4413      	add	r3, r2
 8009868:	fb01 f103 	mul.w	r1, r1, r3
 800986c:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009870:	3107      	adds	r1, #7
 8009872:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8009876:	f021 0107 	bic.w	r1, r1, #7
 800987a:	2804      	cmp	r0, #4
 800987c:	fa21 f102 	lsr.w	r1, r1, r2
 8009880:	d008      	beq.n	8009894 <ai_array_get_byte_size+0x38>
 8009882:	2808      	cmp	r0, #8
 8009884:	d101      	bne.n	800988a <ai_array_get_byte_size+0x2e>
 8009886:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800988a:	3107      	adds	r1, #7
 800988c:	08c8      	lsrs	r0, r1, #3
 800988e:	4770      	bx	lr
 8009890:	4608      	mov	r0, r1
 8009892:	4770      	bx	lr
 8009894:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009898:	3107      	adds	r1, #7
 800989a:	08c8      	lsrs	r0, r1, #3
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop

080098a0 <__assert_func>:
 80098a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098a2:	4614      	mov	r4, r2
 80098a4:	461a      	mov	r2, r3
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <__assert_func+0x2c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4605      	mov	r5, r0
 80098ac:	68d8      	ldr	r0, [r3, #12]
 80098ae:	b14c      	cbz	r4, 80098c4 <__assert_func+0x24>
 80098b0:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <__assert_func+0x30>)
 80098b2:	9100      	str	r1, [sp, #0]
 80098b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098b8:	4906      	ldr	r1, [pc, #24]	; (80098d4 <__assert_func+0x34>)
 80098ba:	462b      	mov	r3, r5
 80098bc:	f000 f814 	bl	80098e8 <fiprintf>
 80098c0:	f002 f88c 	bl	800b9dc <abort>
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <__assert_func+0x38>)
 80098c6:	461c      	mov	r4, r3
 80098c8:	e7f3      	b.n	80098b2 <__assert_func+0x12>
 80098ca:	bf00      	nop
 80098cc:	20000e04 	.word	0x20000e04
 80098d0:	080281cc 	.word	0x080281cc
 80098d4:	080281d9 	.word	0x080281d9
 80098d8:	08028207 	.word	0x08028207

080098dc <__errno>:
 80098dc:	4b01      	ldr	r3, [pc, #4]	; (80098e4 <__errno+0x8>)
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	20000e04 	.word	0x20000e04

080098e8 <fiprintf>:
 80098e8:	b40e      	push	{r1, r2, r3}
 80098ea:	b503      	push	{r0, r1, lr}
 80098ec:	4601      	mov	r1, r0
 80098ee:	ab03      	add	r3, sp, #12
 80098f0:	4805      	ldr	r0, [pc, #20]	; (8009908 <fiprintf+0x20>)
 80098f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f6:	6800      	ldr	r0, [r0, #0]
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	f000 f91d 	bl	8009b38 <_vfiprintf_r>
 80098fe:	b002      	add	sp, #8
 8009900:	f85d eb04 	ldr.w	lr, [sp], #4
 8009904:	b003      	add	sp, #12
 8009906:	4770      	bx	lr
 8009908:	20000e04 	.word	0x20000e04

0800990c <__libc_init_array>:
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	4d0d      	ldr	r5, [pc, #52]	; (8009944 <__libc_init_array+0x38>)
 8009910:	4c0d      	ldr	r4, [pc, #52]	; (8009948 <__libc_init_array+0x3c>)
 8009912:	1b64      	subs	r4, r4, r5
 8009914:	10a4      	asrs	r4, r4, #2
 8009916:	2600      	movs	r6, #0
 8009918:	42a6      	cmp	r6, r4
 800991a:	d109      	bne.n	8009930 <__libc_init_array+0x24>
 800991c:	4d0b      	ldr	r5, [pc, #44]	; (800994c <__libc_init_array+0x40>)
 800991e:	4c0c      	ldr	r4, [pc, #48]	; (8009950 <__libc_init_array+0x44>)
 8009920:	f005 f8b6 	bl	800ea90 <_init>
 8009924:	1b64      	subs	r4, r4, r5
 8009926:	10a4      	asrs	r4, r4, #2
 8009928:	2600      	movs	r6, #0
 800992a:	42a6      	cmp	r6, r4
 800992c:	d105      	bne.n	800993a <__libc_init_array+0x2e>
 800992e:	bd70      	pop	{r4, r5, r6, pc}
 8009930:	f855 3b04 	ldr.w	r3, [r5], #4
 8009934:	4798      	blx	r3
 8009936:	3601      	adds	r6, #1
 8009938:	e7ee      	b.n	8009918 <__libc_init_array+0xc>
 800993a:	f855 3b04 	ldr.w	r3, [r5], #4
 800993e:	4798      	blx	r3
 8009940:	3601      	adds	r6, #1
 8009942:	e7f2      	b.n	800992a <__libc_init_array+0x1e>
 8009944:	080286a4 	.word	0x080286a4
 8009948:	080286a4 	.word	0x080286a4
 800994c:	080286a4 	.word	0x080286a4
 8009950:	080286a8 	.word	0x080286a8

08009954 <malloc>:
 8009954:	4b02      	ldr	r3, [pc, #8]	; (8009960 <malloc+0xc>)
 8009956:	4601      	mov	r1, r0
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f000 b869 	b.w	8009a30 <_malloc_r>
 800995e:	bf00      	nop
 8009960:	20000e04 	.word	0x20000e04

08009964 <memcpy>:
 8009964:	440a      	add	r2, r1
 8009966:	4291      	cmp	r1, r2
 8009968:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800996c:	d100      	bne.n	8009970 <memcpy+0xc>
 800996e:	4770      	bx	lr
 8009970:	b510      	push	{r4, lr}
 8009972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800997a:	4291      	cmp	r1, r2
 800997c:	d1f9      	bne.n	8009972 <memcpy+0xe>
 800997e:	bd10      	pop	{r4, pc}

08009980 <memset>:
 8009980:	4402      	add	r2, r0
 8009982:	4603      	mov	r3, r0
 8009984:	4293      	cmp	r3, r2
 8009986:	d100      	bne.n	800998a <memset+0xa>
 8009988:	4770      	bx	lr
 800998a:	f803 1b01 	strb.w	r1, [r3], #1
 800998e:	e7f9      	b.n	8009984 <memset+0x4>

08009990 <_free_r>:
 8009990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009992:	2900      	cmp	r1, #0
 8009994:	d048      	beq.n	8009a28 <_free_r+0x98>
 8009996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800999a:	9001      	str	r0, [sp, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f1a1 0404 	sub.w	r4, r1, #4
 80099a2:	bfb8      	it	lt
 80099a4:	18e4      	addlt	r4, r4, r3
 80099a6:	f003 fc55 	bl	800d254 <__malloc_lock>
 80099aa:	4a20      	ldr	r2, [pc, #128]	; (8009a2c <_free_r+0x9c>)
 80099ac:	9801      	ldr	r0, [sp, #4]
 80099ae:	6813      	ldr	r3, [r2, #0]
 80099b0:	4615      	mov	r5, r2
 80099b2:	b933      	cbnz	r3, 80099c2 <_free_r+0x32>
 80099b4:	6063      	str	r3, [r4, #4]
 80099b6:	6014      	str	r4, [r2, #0]
 80099b8:	b003      	add	sp, #12
 80099ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099be:	f003 bc4f 	b.w	800d260 <__malloc_unlock>
 80099c2:	42a3      	cmp	r3, r4
 80099c4:	d90b      	bls.n	80099de <_free_r+0x4e>
 80099c6:	6821      	ldr	r1, [r4, #0]
 80099c8:	1862      	adds	r2, r4, r1
 80099ca:	4293      	cmp	r3, r2
 80099cc:	bf04      	itt	eq
 80099ce:	681a      	ldreq	r2, [r3, #0]
 80099d0:	685b      	ldreq	r3, [r3, #4]
 80099d2:	6063      	str	r3, [r4, #4]
 80099d4:	bf04      	itt	eq
 80099d6:	1852      	addeq	r2, r2, r1
 80099d8:	6022      	streq	r2, [r4, #0]
 80099da:	602c      	str	r4, [r5, #0]
 80099dc:	e7ec      	b.n	80099b8 <_free_r+0x28>
 80099de:	461a      	mov	r2, r3
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	b10b      	cbz	r3, 80099e8 <_free_r+0x58>
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	d9fa      	bls.n	80099de <_free_r+0x4e>
 80099e8:	6811      	ldr	r1, [r2, #0]
 80099ea:	1855      	adds	r5, r2, r1
 80099ec:	42a5      	cmp	r5, r4
 80099ee:	d10b      	bne.n	8009a08 <_free_r+0x78>
 80099f0:	6824      	ldr	r4, [r4, #0]
 80099f2:	4421      	add	r1, r4
 80099f4:	1854      	adds	r4, r2, r1
 80099f6:	42a3      	cmp	r3, r4
 80099f8:	6011      	str	r1, [r2, #0]
 80099fa:	d1dd      	bne.n	80099b8 <_free_r+0x28>
 80099fc:	681c      	ldr	r4, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	6053      	str	r3, [r2, #4]
 8009a02:	4421      	add	r1, r4
 8009a04:	6011      	str	r1, [r2, #0]
 8009a06:	e7d7      	b.n	80099b8 <_free_r+0x28>
 8009a08:	d902      	bls.n	8009a10 <_free_r+0x80>
 8009a0a:	230c      	movs	r3, #12
 8009a0c:	6003      	str	r3, [r0, #0]
 8009a0e:	e7d3      	b.n	80099b8 <_free_r+0x28>
 8009a10:	6825      	ldr	r5, [r4, #0]
 8009a12:	1961      	adds	r1, r4, r5
 8009a14:	428b      	cmp	r3, r1
 8009a16:	bf04      	itt	eq
 8009a18:	6819      	ldreq	r1, [r3, #0]
 8009a1a:	685b      	ldreq	r3, [r3, #4]
 8009a1c:	6063      	str	r3, [r4, #4]
 8009a1e:	bf04      	itt	eq
 8009a20:	1949      	addeq	r1, r1, r5
 8009a22:	6021      	streq	r1, [r4, #0]
 8009a24:	6054      	str	r4, [r2, #4]
 8009a26:	e7c7      	b.n	80099b8 <_free_r+0x28>
 8009a28:	b003      	add	sp, #12
 8009a2a:	bd30      	pop	{r4, r5, pc}
 8009a2c:	200010d8 	.word	0x200010d8

08009a30 <_malloc_r>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	1ccd      	adds	r5, r1, #3
 8009a34:	f025 0503 	bic.w	r5, r5, #3
 8009a38:	3508      	adds	r5, #8
 8009a3a:	2d0c      	cmp	r5, #12
 8009a3c:	bf38      	it	cc
 8009a3e:	250c      	movcc	r5, #12
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	4606      	mov	r6, r0
 8009a44:	db01      	blt.n	8009a4a <_malloc_r+0x1a>
 8009a46:	42a9      	cmp	r1, r5
 8009a48:	d903      	bls.n	8009a52 <_malloc_r+0x22>
 8009a4a:	230c      	movs	r3, #12
 8009a4c:	6033      	str	r3, [r6, #0]
 8009a4e:	2000      	movs	r0, #0
 8009a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a52:	f003 fbff 	bl	800d254 <__malloc_lock>
 8009a56:	4921      	ldr	r1, [pc, #132]	; (8009adc <_malloc_r+0xac>)
 8009a58:	680a      	ldr	r2, [r1, #0]
 8009a5a:	4614      	mov	r4, r2
 8009a5c:	b99c      	cbnz	r4, 8009a86 <_malloc_r+0x56>
 8009a5e:	4f20      	ldr	r7, [pc, #128]	; (8009ae0 <_malloc_r+0xb0>)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	b923      	cbnz	r3, 8009a6e <_malloc_r+0x3e>
 8009a64:	4621      	mov	r1, r4
 8009a66:	4630      	mov	r0, r6
 8009a68:	f001 f810 	bl	800aa8c <_sbrk_r>
 8009a6c:	6038      	str	r0, [r7, #0]
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4630      	mov	r0, r6
 8009a72:	f001 f80b 	bl	800aa8c <_sbrk_r>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	d123      	bne.n	8009ac2 <_malloc_r+0x92>
 8009a7a:	230c      	movs	r3, #12
 8009a7c:	6033      	str	r3, [r6, #0]
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f003 fbee 	bl	800d260 <__malloc_unlock>
 8009a84:	e7e3      	b.n	8009a4e <_malloc_r+0x1e>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	1b5b      	subs	r3, r3, r5
 8009a8a:	d417      	bmi.n	8009abc <_malloc_r+0x8c>
 8009a8c:	2b0b      	cmp	r3, #11
 8009a8e:	d903      	bls.n	8009a98 <_malloc_r+0x68>
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	441c      	add	r4, r3
 8009a94:	6025      	str	r5, [r4, #0]
 8009a96:	e004      	b.n	8009aa2 <_malloc_r+0x72>
 8009a98:	6863      	ldr	r3, [r4, #4]
 8009a9a:	42a2      	cmp	r2, r4
 8009a9c:	bf0c      	ite	eq
 8009a9e:	600b      	streq	r3, [r1, #0]
 8009aa0:	6053      	strne	r3, [r2, #4]
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f003 fbdc 	bl	800d260 <__malloc_unlock>
 8009aa8:	f104 000b 	add.w	r0, r4, #11
 8009aac:	1d23      	adds	r3, r4, #4
 8009aae:	f020 0007 	bic.w	r0, r0, #7
 8009ab2:	1ac2      	subs	r2, r0, r3
 8009ab4:	d0cc      	beq.n	8009a50 <_malloc_r+0x20>
 8009ab6:	1a1b      	subs	r3, r3, r0
 8009ab8:	50a3      	str	r3, [r4, r2]
 8009aba:	e7c9      	b.n	8009a50 <_malloc_r+0x20>
 8009abc:	4622      	mov	r2, r4
 8009abe:	6864      	ldr	r4, [r4, #4]
 8009ac0:	e7cc      	b.n	8009a5c <_malloc_r+0x2c>
 8009ac2:	1cc4      	adds	r4, r0, #3
 8009ac4:	f024 0403 	bic.w	r4, r4, #3
 8009ac8:	42a0      	cmp	r0, r4
 8009aca:	d0e3      	beq.n	8009a94 <_malloc_r+0x64>
 8009acc:	1a21      	subs	r1, r4, r0
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f000 ffdc 	bl	800aa8c <_sbrk_r>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d1dd      	bne.n	8009a94 <_malloc_r+0x64>
 8009ad8:	e7cf      	b.n	8009a7a <_malloc_r+0x4a>
 8009ada:	bf00      	nop
 8009adc:	200010d8 	.word	0x200010d8
 8009ae0:	200010dc 	.word	0x200010dc

08009ae4 <__sfputc_r>:
 8009ae4:	6893      	ldr	r3, [r2, #8]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	b410      	push	{r4}
 8009aec:	6093      	str	r3, [r2, #8]
 8009aee:	da08      	bge.n	8009b02 <__sfputc_r+0x1e>
 8009af0:	6994      	ldr	r4, [r2, #24]
 8009af2:	42a3      	cmp	r3, r4
 8009af4:	db01      	blt.n	8009afa <__sfputc_r+0x16>
 8009af6:	290a      	cmp	r1, #10
 8009af8:	d103      	bne.n	8009b02 <__sfputc_r+0x1e>
 8009afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009afe:	f001 bead 	b.w	800b85c <__swbuf_r>
 8009b02:	6813      	ldr	r3, [r2, #0]
 8009b04:	1c58      	adds	r0, r3, #1
 8009b06:	6010      	str	r0, [r2, #0]
 8009b08:	7019      	strb	r1, [r3, #0]
 8009b0a:	4608      	mov	r0, r1
 8009b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <__sfputs_r>:
 8009b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b14:	4606      	mov	r6, r0
 8009b16:	460f      	mov	r7, r1
 8009b18:	4614      	mov	r4, r2
 8009b1a:	18d5      	adds	r5, r2, r3
 8009b1c:	42ac      	cmp	r4, r5
 8009b1e:	d101      	bne.n	8009b24 <__sfputs_r+0x12>
 8009b20:	2000      	movs	r0, #0
 8009b22:	e007      	b.n	8009b34 <__sfputs_r+0x22>
 8009b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b28:	463a      	mov	r2, r7
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7ff ffda 	bl	8009ae4 <__sfputc_r>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d1f3      	bne.n	8009b1c <__sfputs_r+0xa>
 8009b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b38 <_vfiprintf_r>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	460d      	mov	r5, r1
 8009b3e:	b09d      	sub	sp, #116	; 0x74
 8009b40:	4614      	mov	r4, r2
 8009b42:	4698      	mov	r8, r3
 8009b44:	4606      	mov	r6, r0
 8009b46:	b118      	cbz	r0, 8009b50 <_vfiprintf_r+0x18>
 8009b48:	6983      	ldr	r3, [r0, #24]
 8009b4a:	b90b      	cbnz	r3, 8009b50 <_vfiprintf_r+0x18>
 8009b4c:	f002 fede 	bl	800c90c <__sinit>
 8009b50:	4b89      	ldr	r3, [pc, #548]	; (8009d78 <_vfiprintf_r+0x240>)
 8009b52:	429d      	cmp	r5, r3
 8009b54:	d11b      	bne.n	8009b8e <_vfiprintf_r+0x56>
 8009b56:	6875      	ldr	r5, [r6, #4]
 8009b58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b5a:	07d9      	lsls	r1, r3, #31
 8009b5c:	d405      	bmi.n	8009b6a <_vfiprintf_r+0x32>
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	059a      	lsls	r2, r3, #22
 8009b62:	d402      	bmi.n	8009b6a <_vfiprintf_r+0x32>
 8009b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b66:	f003 fae2 	bl	800d12e <__retarget_lock_acquire_recursive>
 8009b6a:	89ab      	ldrh	r3, [r5, #12]
 8009b6c:	071b      	lsls	r3, r3, #28
 8009b6e:	d501      	bpl.n	8009b74 <_vfiprintf_r+0x3c>
 8009b70:	692b      	ldr	r3, [r5, #16]
 8009b72:	b9eb      	cbnz	r3, 8009bb0 <_vfiprintf_r+0x78>
 8009b74:	4629      	mov	r1, r5
 8009b76:	4630      	mov	r0, r6
 8009b78:	f001 fec2 	bl	800b900 <__swsetup_r>
 8009b7c:	b1c0      	cbz	r0, 8009bb0 <_vfiprintf_r+0x78>
 8009b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b80:	07dc      	lsls	r4, r3, #31
 8009b82:	d50e      	bpl.n	8009ba2 <_vfiprintf_r+0x6a>
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b88:	b01d      	add	sp, #116	; 0x74
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8e:	4b7b      	ldr	r3, [pc, #492]	; (8009d7c <_vfiprintf_r+0x244>)
 8009b90:	429d      	cmp	r5, r3
 8009b92:	d101      	bne.n	8009b98 <_vfiprintf_r+0x60>
 8009b94:	68b5      	ldr	r5, [r6, #8]
 8009b96:	e7df      	b.n	8009b58 <_vfiprintf_r+0x20>
 8009b98:	4b79      	ldr	r3, [pc, #484]	; (8009d80 <_vfiprintf_r+0x248>)
 8009b9a:	429d      	cmp	r5, r3
 8009b9c:	bf08      	it	eq
 8009b9e:	68f5      	ldreq	r5, [r6, #12]
 8009ba0:	e7da      	b.n	8009b58 <_vfiprintf_r+0x20>
 8009ba2:	89ab      	ldrh	r3, [r5, #12]
 8009ba4:	0598      	lsls	r0, r3, #22
 8009ba6:	d4ed      	bmi.n	8009b84 <_vfiprintf_r+0x4c>
 8009ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009baa:	f003 fac1 	bl	800d130 <__retarget_lock_release_recursive>
 8009bae:	e7e9      	b.n	8009b84 <_vfiprintf_r+0x4c>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb4:	2320      	movs	r3, #32
 8009bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bbe:	2330      	movs	r3, #48	; 0x30
 8009bc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d84 <_vfiprintf_r+0x24c>
 8009bc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bc8:	f04f 0901 	mov.w	r9, #1
 8009bcc:	4623      	mov	r3, r4
 8009bce:	469a      	mov	sl, r3
 8009bd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd4:	b10a      	cbz	r2, 8009bda <_vfiprintf_r+0xa2>
 8009bd6:	2a25      	cmp	r2, #37	; 0x25
 8009bd8:	d1f9      	bne.n	8009bce <_vfiprintf_r+0x96>
 8009bda:	ebba 0b04 	subs.w	fp, sl, r4
 8009bde:	d00b      	beq.n	8009bf8 <_vfiprintf_r+0xc0>
 8009be0:	465b      	mov	r3, fp
 8009be2:	4622      	mov	r2, r4
 8009be4:	4629      	mov	r1, r5
 8009be6:	4630      	mov	r0, r6
 8009be8:	f7ff ff93 	bl	8009b12 <__sfputs_r>
 8009bec:	3001      	adds	r0, #1
 8009bee:	f000 80aa 	beq.w	8009d46 <_vfiprintf_r+0x20e>
 8009bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bf4:	445a      	add	r2, fp
 8009bf6:	9209      	str	r2, [sp, #36]	; 0x24
 8009bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 80a2 	beq.w	8009d46 <_vfiprintf_r+0x20e>
 8009c02:	2300      	movs	r3, #0
 8009c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c0c:	f10a 0a01 	add.w	sl, sl, #1
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	9307      	str	r3, [sp, #28]
 8009c14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c18:	931a      	str	r3, [sp, #104]	; 0x68
 8009c1a:	4654      	mov	r4, sl
 8009c1c:	2205      	movs	r2, #5
 8009c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c22:	4858      	ldr	r0, [pc, #352]	; (8009d84 <_vfiprintf_r+0x24c>)
 8009c24:	f7f6 faec 	bl	8000200 <memchr>
 8009c28:	9a04      	ldr	r2, [sp, #16]
 8009c2a:	b9d8      	cbnz	r0, 8009c64 <_vfiprintf_r+0x12c>
 8009c2c:	06d1      	lsls	r1, r2, #27
 8009c2e:	bf44      	itt	mi
 8009c30:	2320      	movmi	r3, #32
 8009c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c36:	0713      	lsls	r3, r2, #28
 8009c38:	bf44      	itt	mi
 8009c3a:	232b      	movmi	r3, #43	; 0x2b
 8009c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c40:	f89a 3000 	ldrb.w	r3, [sl]
 8009c44:	2b2a      	cmp	r3, #42	; 0x2a
 8009c46:	d015      	beq.n	8009c74 <_vfiprintf_r+0x13c>
 8009c48:	9a07      	ldr	r2, [sp, #28]
 8009c4a:	4654      	mov	r4, sl
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f04f 0c0a 	mov.w	ip, #10
 8009c52:	4621      	mov	r1, r4
 8009c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c58:	3b30      	subs	r3, #48	; 0x30
 8009c5a:	2b09      	cmp	r3, #9
 8009c5c:	d94e      	bls.n	8009cfc <_vfiprintf_r+0x1c4>
 8009c5e:	b1b0      	cbz	r0, 8009c8e <_vfiprintf_r+0x156>
 8009c60:	9207      	str	r2, [sp, #28]
 8009c62:	e014      	b.n	8009c8e <_vfiprintf_r+0x156>
 8009c64:	eba0 0308 	sub.w	r3, r0, r8
 8009c68:	fa09 f303 	lsl.w	r3, r9, r3
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	9304      	str	r3, [sp, #16]
 8009c70:	46a2      	mov	sl, r4
 8009c72:	e7d2      	b.n	8009c1a <_vfiprintf_r+0xe2>
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	1d19      	adds	r1, r3, #4
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	9103      	str	r1, [sp, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	bfbb      	ittet	lt
 8009c80:	425b      	neglt	r3, r3
 8009c82:	f042 0202 	orrlt.w	r2, r2, #2
 8009c86:	9307      	strge	r3, [sp, #28]
 8009c88:	9307      	strlt	r3, [sp, #28]
 8009c8a:	bfb8      	it	lt
 8009c8c:	9204      	strlt	r2, [sp, #16]
 8009c8e:	7823      	ldrb	r3, [r4, #0]
 8009c90:	2b2e      	cmp	r3, #46	; 0x2e
 8009c92:	d10c      	bne.n	8009cae <_vfiprintf_r+0x176>
 8009c94:	7863      	ldrb	r3, [r4, #1]
 8009c96:	2b2a      	cmp	r3, #42	; 0x2a
 8009c98:	d135      	bne.n	8009d06 <_vfiprintf_r+0x1ce>
 8009c9a:	9b03      	ldr	r3, [sp, #12]
 8009c9c:	1d1a      	adds	r2, r3, #4
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	9203      	str	r2, [sp, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	bfb8      	it	lt
 8009ca6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009caa:	3402      	adds	r4, #2
 8009cac:	9305      	str	r3, [sp, #20]
 8009cae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d94 <_vfiprintf_r+0x25c>
 8009cb2:	7821      	ldrb	r1, [r4, #0]
 8009cb4:	2203      	movs	r2, #3
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	f7f6 faa2 	bl	8000200 <memchr>
 8009cbc:	b140      	cbz	r0, 8009cd0 <_vfiprintf_r+0x198>
 8009cbe:	2340      	movs	r3, #64	; 0x40
 8009cc0:	eba0 000a 	sub.w	r0, r0, sl
 8009cc4:	fa03 f000 	lsl.w	r0, r3, r0
 8009cc8:	9b04      	ldr	r3, [sp, #16]
 8009cca:	4303      	orrs	r3, r0
 8009ccc:	3401      	adds	r4, #1
 8009cce:	9304      	str	r3, [sp, #16]
 8009cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd4:	482c      	ldr	r0, [pc, #176]	; (8009d88 <_vfiprintf_r+0x250>)
 8009cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cda:	2206      	movs	r2, #6
 8009cdc:	f7f6 fa90 	bl	8000200 <memchr>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d03f      	beq.n	8009d64 <_vfiprintf_r+0x22c>
 8009ce4:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <_vfiprintf_r+0x254>)
 8009ce6:	bb1b      	cbnz	r3, 8009d30 <_vfiprintf_r+0x1f8>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	3307      	adds	r3, #7
 8009cec:	f023 0307 	bic.w	r3, r3, #7
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	9303      	str	r3, [sp, #12]
 8009cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf6:	443b      	add	r3, r7
 8009cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfa:	e767      	b.n	8009bcc <_vfiprintf_r+0x94>
 8009cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d00:	460c      	mov	r4, r1
 8009d02:	2001      	movs	r0, #1
 8009d04:	e7a5      	b.n	8009c52 <_vfiprintf_r+0x11a>
 8009d06:	2300      	movs	r3, #0
 8009d08:	3401      	adds	r4, #1
 8009d0a:	9305      	str	r3, [sp, #20]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f04f 0c0a 	mov.w	ip, #10
 8009d12:	4620      	mov	r0, r4
 8009d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d18:	3a30      	subs	r2, #48	; 0x30
 8009d1a:	2a09      	cmp	r2, #9
 8009d1c:	d903      	bls.n	8009d26 <_vfiprintf_r+0x1ee>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0c5      	beq.n	8009cae <_vfiprintf_r+0x176>
 8009d22:	9105      	str	r1, [sp, #20]
 8009d24:	e7c3      	b.n	8009cae <_vfiprintf_r+0x176>
 8009d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e7f0      	b.n	8009d12 <_vfiprintf_r+0x1da>
 8009d30:	ab03      	add	r3, sp, #12
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	462a      	mov	r2, r5
 8009d36:	4b16      	ldr	r3, [pc, #88]	; (8009d90 <_vfiprintf_r+0x258>)
 8009d38:	a904      	add	r1, sp, #16
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f000 f8cc 	bl	8009ed8 <_printf_float>
 8009d40:	4607      	mov	r7, r0
 8009d42:	1c78      	adds	r0, r7, #1
 8009d44:	d1d6      	bne.n	8009cf4 <_vfiprintf_r+0x1bc>
 8009d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d48:	07d9      	lsls	r1, r3, #31
 8009d4a:	d405      	bmi.n	8009d58 <_vfiprintf_r+0x220>
 8009d4c:	89ab      	ldrh	r3, [r5, #12]
 8009d4e:	059a      	lsls	r2, r3, #22
 8009d50:	d402      	bmi.n	8009d58 <_vfiprintf_r+0x220>
 8009d52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d54:	f003 f9ec 	bl	800d130 <__retarget_lock_release_recursive>
 8009d58:	89ab      	ldrh	r3, [r5, #12]
 8009d5a:	065b      	lsls	r3, r3, #25
 8009d5c:	f53f af12 	bmi.w	8009b84 <_vfiprintf_r+0x4c>
 8009d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d62:	e711      	b.n	8009b88 <_vfiprintf_r+0x50>
 8009d64:	ab03      	add	r3, sp, #12
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	462a      	mov	r2, r5
 8009d6a:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <_vfiprintf_r+0x258>)
 8009d6c:	a904      	add	r1, sp, #16
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f000 fb56 	bl	800a420 <_printf_i>
 8009d74:	e7e4      	b.n	8009d40 <_vfiprintf_r+0x208>
 8009d76:	bf00      	nop
 8009d78:	08028460 	.word	0x08028460
 8009d7c:	08028480 	.word	0x08028480
 8009d80:	08028440 	.word	0x08028440
 8009d84:	0802820c 	.word	0x0802820c
 8009d88:	08028216 	.word	0x08028216
 8009d8c:	08009ed9 	.word	0x08009ed9
 8009d90:	08009b13 	.word	0x08009b13
 8009d94:	08028212 	.word	0x08028212

08009d98 <__cvt>:
 8009d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	ec55 4b10 	vmov	r4, r5, d0
 8009da0:	2d00      	cmp	r5, #0
 8009da2:	460e      	mov	r6, r1
 8009da4:	4619      	mov	r1, r3
 8009da6:	462b      	mov	r3, r5
 8009da8:	bfbb      	ittet	lt
 8009daa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009dae:	461d      	movlt	r5, r3
 8009db0:	2300      	movge	r3, #0
 8009db2:	232d      	movlt	r3, #45	; 0x2d
 8009db4:	700b      	strb	r3, [r1, #0]
 8009db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009db8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009dbc:	4691      	mov	r9, r2
 8009dbe:	f023 0820 	bic.w	r8, r3, #32
 8009dc2:	bfbc      	itt	lt
 8009dc4:	4622      	movlt	r2, r4
 8009dc6:	4614      	movlt	r4, r2
 8009dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dcc:	d005      	beq.n	8009dda <__cvt+0x42>
 8009dce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009dd2:	d100      	bne.n	8009dd6 <__cvt+0x3e>
 8009dd4:	3601      	adds	r6, #1
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	e000      	b.n	8009ddc <__cvt+0x44>
 8009dda:	2103      	movs	r1, #3
 8009ddc:	ab03      	add	r3, sp, #12
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	ab02      	add	r3, sp, #8
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	ec45 4b10 	vmov	d0, r4, r5
 8009de8:	4653      	mov	r3, sl
 8009dea:	4632      	mov	r2, r6
 8009dec:	f001 fe88 	bl	800bb00 <_dtoa_r>
 8009df0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009df4:	4607      	mov	r7, r0
 8009df6:	d102      	bne.n	8009dfe <__cvt+0x66>
 8009df8:	f019 0f01 	tst.w	r9, #1
 8009dfc:	d022      	beq.n	8009e44 <__cvt+0xac>
 8009dfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e02:	eb07 0906 	add.w	r9, r7, r6
 8009e06:	d110      	bne.n	8009e2a <__cvt+0x92>
 8009e08:	783b      	ldrb	r3, [r7, #0]
 8009e0a:	2b30      	cmp	r3, #48	; 0x30
 8009e0c:	d10a      	bne.n	8009e24 <__cvt+0x8c>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2300      	movs	r3, #0
 8009e12:	4620      	mov	r0, r4
 8009e14:	4629      	mov	r1, r5
 8009e16:	f7f6 fe67 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e1a:	b918      	cbnz	r0, 8009e24 <__cvt+0x8c>
 8009e1c:	f1c6 0601 	rsb	r6, r6, #1
 8009e20:	f8ca 6000 	str.w	r6, [sl]
 8009e24:	f8da 3000 	ldr.w	r3, [sl]
 8009e28:	4499      	add	r9, r3
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fe59 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e36:	b108      	cbz	r0, 8009e3c <__cvt+0xa4>
 8009e38:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e3c:	2230      	movs	r2, #48	; 0x30
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	454b      	cmp	r3, r9
 8009e42:	d307      	bcc.n	8009e54 <__cvt+0xbc>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e48:	1bdb      	subs	r3, r3, r7
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	b004      	add	sp, #16
 8009e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e54:	1c59      	adds	r1, r3, #1
 8009e56:	9103      	str	r1, [sp, #12]
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	e7f0      	b.n	8009e3e <__cvt+0xa6>

08009e5c <__exponent>:
 8009e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2900      	cmp	r1, #0
 8009e62:	bfb8      	it	lt
 8009e64:	4249      	neglt	r1, r1
 8009e66:	f803 2b02 	strb.w	r2, [r3], #2
 8009e6a:	bfb4      	ite	lt
 8009e6c:	222d      	movlt	r2, #45	; 0x2d
 8009e6e:	222b      	movge	r2, #43	; 0x2b
 8009e70:	2909      	cmp	r1, #9
 8009e72:	7042      	strb	r2, [r0, #1]
 8009e74:	dd2a      	ble.n	8009ecc <__exponent+0x70>
 8009e76:	f10d 0407 	add.w	r4, sp, #7
 8009e7a:	46a4      	mov	ip, r4
 8009e7c:	270a      	movs	r7, #10
 8009e7e:	46a6      	mov	lr, r4
 8009e80:	460a      	mov	r2, r1
 8009e82:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e86:	fb07 1516 	mls	r5, r7, r6, r1
 8009e8a:	3530      	adds	r5, #48	; 0x30
 8009e8c:	2a63      	cmp	r2, #99	; 0x63
 8009e8e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009e92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e96:	4631      	mov	r1, r6
 8009e98:	dcf1      	bgt.n	8009e7e <__exponent+0x22>
 8009e9a:	3130      	adds	r1, #48	; 0x30
 8009e9c:	f1ae 0502 	sub.w	r5, lr, #2
 8009ea0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ea4:	1c44      	adds	r4, r0, #1
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	4561      	cmp	r1, ip
 8009eaa:	d30a      	bcc.n	8009ec2 <__exponent+0x66>
 8009eac:	f10d 0209 	add.w	r2, sp, #9
 8009eb0:	eba2 020e 	sub.w	r2, r2, lr
 8009eb4:	4565      	cmp	r5, ip
 8009eb6:	bf88      	it	hi
 8009eb8:	2200      	movhi	r2, #0
 8009eba:	4413      	add	r3, r2
 8009ebc:	1a18      	subs	r0, r3, r0
 8009ebe:	b003      	add	sp, #12
 8009ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ec6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009eca:	e7ed      	b.n	8009ea8 <__exponent+0x4c>
 8009ecc:	2330      	movs	r3, #48	; 0x30
 8009ece:	3130      	adds	r1, #48	; 0x30
 8009ed0:	7083      	strb	r3, [r0, #2]
 8009ed2:	70c1      	strb	r1, [r0, #3]
 8009ed4:	1d03      	adds	r3, r0, #4
 8009ed6:	e7f1      	b.n	8009ebc <__exponent+0x60>

08009ed8 <_printf_float>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	ed2d 8b02 	vpush	{d8}
 8009ee0:	b08d      	sub	sp, #52	; 0x34
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ee8:	4616      	mov	r6, r2
 8009eea:	461f      	mov	r7, r3
 8009eec:	4605      	mov	r5, r0
 8009eee:	f003 f919 	bl	800d124 <_localeconv_r>
 8009ef2:	f8d0 a000 	ldr.w	sl, [r0]
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	f7f6 f974 	bl	80001e4 <strlen>
 8009efc:	2300      	movs	r3, #0
 8009efe:	930a      	str	r3, [sp, #40]	; 0x28
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	f8d8 3000 	ldr.w	r3, [r8]
 8009f08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f0c:	3307      	adds	r3, #7
 8009f0e:	f023 0307 	bic.w	r3, r3, #7
 8009f12:	f103 0208 	add.w	r2, r3, #8
 8009f16:	f8c8 2000 	str.w	r2, [r8]
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f2a:	9307      	str	r3, [sp, #28]
 8009f2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f30:	ee08 0a10 	vmov	s16, r0
 8009f34:	4b9f      	ldr	r3, [pc, #636]	; (800a1b4 <_printf_float+0x2dc>)
 8009f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f3e:	f7f6 fe05 	bl	8000b4c <__aeabi_dcmpun>
 8009f42:	bb88      	cbnz	r0, 8009fa8 <_printf_float+0xd0>
 8009f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f48:	4b9a      	ldr	r3, [pc, #616]	; (800a1b4 <_printf_float+0x2dc>)
 8009f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f4e:	f7f6 fddf 	bl	8000b10 <__aeabi_dcmple>
 8009f52:	bb48      	cbnz	r0, 8009fa8 <_printf_float+0xd0>
 8009f54:	2200      	movs	r2, #0
 8009f56:	2300      	movs	r3, #0
 8009f58:	4640      	mov	r0, r8
 8009f5a:	4649      	mov	r1, r9
 8009f5c:	f7f6 fdce 	bl	8000afc <__aeabi_dcmplt>
 8009f60:	b110      	cbz	r0, 8009f68 <_printf_float+0x90>
 8009f62:	232d      	movs	r3, #45	; 0x2d
 8009f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f68:	4b93      	ldr	r3, [pc, #588]	; (800a1b8 <_printf_float+0x2e0>)
 8009f6a:	4894      	ldr	r0, [pc, #592]	; (800a1bc <_printf_float+0x2e4>)
 8009f6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f70:	bf94      	ite	ls
 8009f72:	4698      	movls	r8, r3
 8009f74:	4680      	movhi	r8, r0
 8009f76:	2303      	movs	r3, #3
 8009f78:	6123      	str	r3, [r4, #16]
 8009f7a:	9b05      	ldr	r3, [sp, #20]
 8009f7c:	f023 0204 	bic.w	r2, r3, #4
 8009f80:	6022      	str	r2, [r4, #0]
 8009f82:	f04f 0900 	mov.w	r9, #0
 8009f86:	9700      	str	r7, [sp, #0]
 8009f88:	4633      	mov	r3, r6
 8009f8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 f9d8 	bl	800a344 <_printf_common>
 8009f94:	3001      	adds	r0, #1
 8009f96:	f040 8090 	bne.w	800a0ba <_printf_float+0x1e2>
 8009f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f9e:	b00d      	add	sp, #52	; 0x34
 8009fa0:	ecbd 8b02 	vpop	{d8}
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	4642      	mov	r2, r8
 8009faa:	464b      	mov	r3, r9
 8009fac:	4640      	mov	r0, r8
 8009fae:	4649      	mov	r1, r9
 8009fb0:	f7f6 fdcc 	bl	8000b4c <__aeabi_dcmpun>
 8009fb4:	b140      	cbz	r0, 8009fc8 <_printf_float+0xf0>
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	bfbc      	itt	lt
 8009fbc:	232d      	movlt	r3, #45	; 0x2d
 8009fbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fc2:	487f      	ldr	r0, [pc, #508]	; (800a1c0 <_printf_float+0x2e8>)
 8009fc4:	4b7f      	ldr	r3, [pc, #508]	; (800a1c4 <_printf_float+0x2ec>)
 8009fc6:	e7d1      	b.n	8009f6c <_printf_float+0x94>
 8009fc8:	6863      	ldr	r3, [r4, #4]
 8009fca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009fce:	9206      	str	r2, [sp, #24]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	d13f      	bne.n	800a054 <_printf_float+0x17c>
 8009fd4:	2306      	movs	r3, #6
 8009fd6:	6063      	str	r3, [r4, #4]
 8009fd8:	9b05      	ldr	r3, [sp, #20]
 8009fda:	6861      	ldr	r1, [r4, #4]
 8009fdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9303      	str	r3, [sp, #12]
 8009fe4:	ab0a      	add	r3, sp, #40	; 0x28
 8009fe6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009fea:	ab09      	add	r3, sp, #36	; 0x24
 8009fec:	ec49 8b10 	vmov	d0, r8, r9
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	6022      	str	r2, [r4, #0]
 8009ff4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f7ff fecd 	bl	8009d98 <__cvt>
 8009ffe:	9b06      	ldr	r3, [sp, #24]
 800a000:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a002:	2b47      	cmp	r3, #71	; 0x47
 800a004:	4680      	mov	r8, r0
 800a006:	d108      	bne.n	800a01a <_printf_float+0x142>
 800a008:	1cc8      	adds	r0, r1, #3
 800a00a:	db02      	blt.n	800a012 <_printf_float+0x13a>
 800a00c:	6863      	ldr	r3, [r4, #4]
 800a00e:	4299      	cmp	r1, r3
 800a010:	dd41      	ble.n	800a096 <_printf_float+0x1be>
 800a012:	f1ab 0b02 	sub.w	fp, fp, #2
 800a016:	fa5f fb8b 	uxtb.w	fp, fp
 800a01a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a01e:	d820      	bhi.n	800a062 <_printf_float+0x18a>
 800a020:	3901      	subs	r1, #1
 800a022:	465a      	mov	r2, fp
 800a024:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a028:	9109      	str	r1, [sp, #36]	; 0x24
 800a02a:	f7ff ff17 	bl	8009e5c <__exponent>
 800a02e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a030:	1813      	adds	r3, r2, r0
 800a032:	2a01      	cmp	r2, #1
 800a034:	4681      	mov	r9, r0
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	dc02      	bgt.n	800a040 <_printf_float+0x168>
 800a03a:	6822      	ldr	r2, [r4, #0]
 800a03c:	07d2      	lsls	r2, r2, #31
 800a03e:	d501      	bpl.n	800a044 <_printf_float+0x16c>
 800a040:	3301      	adds	r3, #1
 800a042:	6123      	str	r3, [r4, #16]
 800a044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d09c      	beq.n	8009f86 <_printf_float+0xae>
 800a04c:	232d      	movs	r3, #45	; 0x2d
 800a04e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a052:	e798      	b.n	8009f86 <_printf_float+0xae>
 800a054:	9a06      	ldr	r2, [sp, #24]
 800a056:	2a47      	cmp	r2, #71	; 0x47
 800a058:	d1be      	bne.n	8009fd8 <_printf_float+0x100>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1bc      	bne.n	8009fd8 <_printf_float+0x100>
 800a05e:	2301      	movs	r3, #1
 800a060:	e7b9      	b.n	8009fd6 <_printf_float+0xfe>
 800a062:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a066:	d118      	bne.n	800a09a <_printf_float+0x1c2>
 800a068:	2900      	cmp	r1, #0
 800a06a:	6863      	ldr	r3, [r4, #4]
 800a06c:	dd0b      	ble.n	800a086 <_printf_float+0x1ae>
 800a06e:	6121      	str	r1, [r4, #16]
 800a070:	b913      	cbnz	r3, 800a078 <_printf_float+0x1a0>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	07d0      	lsls	r0, r2, #31
 800a076:	d502      	bpl.n	800a07e <_printf_float+0x1a6>
 800a078:	3301      	adds	r3, #1
 800a07a:	440b      	add	r3, r1
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a080:	f04f 0900 	mov.w	r9, #0
 800a084:	e7de      	b.n	800a044 <_printf_float+0x16c>
 800a086:	b913      	cbnz	r3, 800a08e <_printf_float+0x1b6>
 800a088:	6822      	ldr	r2, [r4, #0]
 800a08a:	07d2      	lsls	r2, r2, #31
 800a08c:	d501      	bpl.n	800a092 <_printf_float+0x1ba>
 800a08e:	3302      	adds	r3, #2
 800a090:	e7f4      	b.n	800a07c <_printf_float+0x1a4>
 800a092:	2301      	movs	r3, #1
 800a094:	e7f2      	b.n	800a07c <_printf_float+0x1a4>
 800a096:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09c:	4299      	cmp	r1, r3
 800a09e:	db05      	blt.n	800a0ac <_printf_float+0x1d4>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	6121      	str	r1, [r4, #16]
 800a0a4:	07d8      	lsls	r0, r3, #31
 800a0a6:	d5ea      	bpl.n	800a07e <_printf_float+0x1a6>
 800a0a8:	1c4b      	adds	r3, r1, #1
 800a0aa:	e7e7      	b.n	800a07c <_printf_float+0x1a4>
 800a0ac:	2900      	cmp	r1, #0
 800a0ae:	bfd4      	ite	le
 800a0b0:	f1c1 0202 	rsble	r2, r1, #2
 800a0b4:	2201      	movgt	r2, #1
 800a0b6:	4413      	add	r3, r2
 800a0b8:	e7e0      	b.n	800a07c <_printf_float+0x1a4>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	055a      	lsls	r2, r3, #21
 800a0be:	d407      	bmi.n	800a0d0 <_printf_float+0x1f8>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	4642      	mov	r2, r8
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b8      	blx	r7
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d12c      	bne.n	800a128 <_printf_float+0x250>
 800a0ce:	e764      	b.n	8009f9a <_printf_float+0xc2>
 800a0d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0d4:	f240 80e0 	bls.w	800a298 <_printf_float+0x3c0>
 800a0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f7f6 fd02 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d034      	beq.n	800a152 <_printf_float+0x27a>
 800a0e8:	4a37      	ldr	r2, [pc, #220]	; (800a1c8 <_printf_float+0x2f0>)
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	47b8      	blx	r7
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f43f af51 	beq.w	8009f9a <_printf_float+0xc2>
 800a0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	db02      	blt.n	800a106 <_printf_float+0x22e>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	07d8      	lsls	r0, r3, #31
 800a104:	d510      	bpl.n	800a128 <_printf_float+0x250>
 800a106:	ee18 3a10 	vmov	r3, s16
 800a10a:	4652      	mov	r2, sl
 800a10c:	4631      	mov	r1, r6
 800a10e:	4628      	mov	r0, r5
 800a110:	47b8      	blx	r7
 800a112:	3001      	adds	r0, #1
 800a114:	f43f af41 	beq.w	8009f9a <_printf_float+0xc2>
 800a118:	f04f 0800 	mov.w	r8, #0
 800a11c:	f104 091a 	add.w	r9, r4, #26
 800a120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a122:	3b01      	subs	r3, #1
 800a124:	4543      	cmp	r3, r8
 800a126:	dc09      	bgt.n	800a13c <_printf_float+0x264>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	079b      	lsls	r3, r3, #30
 800a12c:	f100 8105 	bmi.w	800a33a <_printf_float+0x462>
 800a130:	68e0      	ldr	r0, [r4, #12]
 800a132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a134:	4298      	cmp	r0, r3
 800a136:	bfb8      	it	lt
 800a138:	4618      	movlt	r0, r3
 800a13a:	e730      	b.n	8009f9e <_printf_float+0xc6>
 800a13c:	2301      	movs	r3, #1
 800a13e:	464a      	mov	r2, r9
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	f43f af27 	beq.w	8009f9a <_printf_float+0xc2>
 800a14c:	f108 0801 	add.w	r8, r8, #1
 800a150:	e7e6      	b.n	800a120 <_printf_float+0x248>
 800a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	dc39      	bgt.n	800a1cc <_printf_float+0x2f4>
 800a158:	4a1b      	ldr	r2, [pc, #108]	; (800a1c8 <_printf_float+0x2f0>)
 800a15a:	2301      	movs	r3, #1
 800a15c:	4631      	mov	r1, r6
 800a15e:	4628      	mov	r0, r5
 800a160:	47b8      	blx	r7
 800a162:	3001      	adds	r0, #1
 800a164:	f43f af19 	beq.w	8009f9a <_printf_float+0xc2>
 800a168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a16c:	4313      	orrs	r3, r2
 800a16e:	d102      	bne.n	800a176 <_printf_float+0x29e>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	07d9      	lsls	r1, r3, #31
 800a174:	d5d8      	bpl.n	800a128 <_printf_float+0x250>
 800a176:	ee18 3a10 	vmov	r3, s16
 800a17a:	4652      	mov	r2, sl
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f af09 	beq.w	8009f9a <_printf_float+0xc2>
 800a188:	f04f 0900 	mov.w	r9, #0
 800a18c:	f104 0a1a 	add.w	sl, r4, #26
 800a190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a192:	425b      	negs	r3, r3
 800a194:	454b      	cmp	r3, r9
 800a196:	dc01      	bgt.n	800a19c <_printf_float+0x2c4>
 800a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a19a:	e792      	b.n	800a0c2 <_printf_float+0x1ea>
 800a19c:	2301      	movs	r3, #1
 800a19e:	4652      	mov	r2, sl
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b8      	blx	r7
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f43f aef7 	beq.w	8009f9a <_printf_float+0xc2>
 800a1ac:	f109 0901 	add.w	r9, r9, #1
 800a1b0:	e7ee      	b.n	800a190 <_printf_float+0x2b8>
 800a1b2:	bf00      	nop
 800a1b4:	7fefffff 	.word	0x7fefffff
 800a1b8:	0802821d 	.word	0x0802821d
 800a1bc:	08028221 	.word	0x08028221
 800a1c0:	08028229 	.word	0x08028229
 800a1c4:	08028225 	.word	0x08028225
 800a1c8:	0802822d 	.word	0x0802822d
 800a1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	bfa8      	it	ge
 800a1d4:	461a      	movge	r2, r3
 800a1d6:	2a00      	cmp	r2, #0
 800a1d8:	4691      	mov	r9, r2
 800a1da:	dc37      	bgt.n	800a24c <_printf_float+0x374>
 800a1dc:	f04f 0b00 	mov.w	fp, #0
 800a1e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e4:	f104 021a 	add.w	r2, r4, #26
 800a1e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	eba3 0309 	sub.w	r3, r3, r9
 800a1f0:	455b      	cmp	r3, fp
 800a1f2:	dc33      	bgt.n	800a25c <_printf_float+0x384>
 800a1f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	db3b      	blt.n	800a274 <_printf_float+0x39c>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	07da      	lsls	r2, r3, #31
 800a200:	d438      	bmi.n	800a274 <_printf_float+0x39c>
 800a202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a204:	9b05      	ldr	r3, [sp, #20]
 800a206:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	eba2 0901 	sub.w	r9, r2, r1
 800a20e:	4599      	cmp	r9, r3
 800a210:	bfa8      	it	ge
 800a212:	4699      	movge	r9, r3
 800a214:	f1b9 0f00 	cmp.w	r9, #0
 800a218:	dc35      	bgt.n	800a286 <_printf_float+0x3ae>
 800a21a:	f04f 0800 	mov.w	r8, #0
 800a21e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a222:	f104 0a1a 	add.w	sl, r4, #26
 800a226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a22a:	1a9b      	subs	r3, r3, r2
 800a22c:	eba3 0309 	sub.w	r3, r3, r9
 800a230:	4543      	cmp	r3, r8
 800a232:	f77f af79 	ble.w	800a128 <_printf_float+0x250>
 800a236:	2301      	movs	r3, #1
 800a238:	4652      	mov	r2, sl
 800a23a:	4631      	mov	r1, r6
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b8      	blx	r7
 800a240:	3001      	adds	r0, #1
 800a242:	f43f aeaa 	beq.w	8009f9a <_printf_float+0xc2>
 800a246:	f108 0801 	add.w	r8, r8, #1
 800a24a:	e7ec      	b.n	800a226 <_printf_float+0x34e>
 800a24c:	4613      	mov	r3, r2
 800a24e:	4631      	mov	r1, r6
 800a250:	4642      	mov	r2, r8
 800a252:	4628      	mov	r0, r5
 800a254:	47b8      	blx	r7
 800a256:	3001      	adds	r0, #1
 800a258:	d1c0      	bne.n	800a1dc <_printf_float+0x304>
 800a25a:	e69e      	b.n	8009f9a <_printf_float+0xc2>
 800a25c:	2301      	movs	r3, #1
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	9205      	str	r2, [sp, #20]
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f ae97 	beq.w	8009f9a <_printf_float+0xc2>
 800a26c:	9a05      	ldr	r2, [sp, #20]
 800a26e:	f10b 0b01 	add.w	fp, fp, #1
 800a272:	e7b9      	b.n	800a1e8 <_printf_float+0x310>
 800a274:	ee18 3a10 	vmov	r3, s16
 800a278:	4652      	mov	r2, sl
 800a27a:	4631      	mov	r1, r6
 800a27c:	4628      	mov	r0, r5
 800a27e:	47b8      	blx	r7
 800a280:	3001      	adds	r0, #1
 800a282:	d1be      	bne.n	800a202 <_printf_float+0x32a>
 800a284:	e689      	b.n	8009f9a <_printf_float+0xc2>
 800a286:	9a05      	ldr	r2, [sp, #20]
 800a288:	464b      	mov	r3, r9
 800a28a:	4442      	add	r2, r8
 800a28c:	4631      	mov	r1, r6
 800a28e:	4628      	mov	r0, r5
 800a290:	47b8      	blx	r7
 800a292:	3001      	adds	r0, #1
 800a294:	d1c1      	bne.n	800a21a <_printf_float+0x342>
 800a296:	e680      	b.n	8009f9a <_printf_float+0xc2>
 800a298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a29a:	2a01      	cmp	r2, #1
 800a29c:	dc01      	bgt.n	800a2a2 <_printf_float+0x3ca>
 800a29e:	07db      	lsls	r3, r3, #31
 800a2a0:	d538      	bpl.n	800a314 <_printf_float+0x43c>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f ae74 	beq.w	8009f9a <_printf_float+0xc2>
 800a2b2:	ee18 3a10 	vmov	r3, s16
 800a2b6:	4652      	mov	r2, sl
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f ae6b 	beq.w	8009f9a <_printf_float+0xc2>
 800a2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f7f6 fc0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2d0:	b9d8      	cbnz	r0, 800a30a <_printf_float+0x432>
 800a2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d4:	f108 0201 	add.w	r2, r8, #1
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b8      	blx	r7
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d10e      	bne.n	800a302 <_printf_float+0x42a>
 800a2e4:	e659      	b.n	8009f9a <_printf_float+0xc2>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	4652      	mov	r2, sl
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b8      	blx	r7
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	f43f ae52 	beq.w	8009f9a <_printf_float+0xc2>
 800a2f6:	f108 0801 	add.w	r8, r8, #1
 800a2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	4543      	cmp	r3, r8
 800a300:	dcf1      	bgt.n	800a2e6 <_printf_float+0x40e>
 800a302:	464b      	mov	r3, r9
 800a304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a308:	e6dc      	b.n	800a0c4 <_printf_float+0x1ec>
 800a30a:	f04f 0800 	mov.w	r8, #0
 800a30e:	f104 0a1a 	add.w	sl, r4, #26
 800a312:	e7f2      	b.n	800a2fa <_printf_float+0x422>
 800a314:	2301      	movs	r3, #1
 800a316:	4642      	mov	r2, r8
 800a318:	e7df      	b.n	800a2da <_printf_float+0x402>
 800a31a:	2301      	movs	r3, #1
 800a31c:	464a      	mov	r2, r9
 800a31e:	4631      	mov	r1, r6
 800a320:	4628      	mov	r0, r5
 800a322:	47b8      	blx	r7
 800a324:	3001      	adds	r0, #1
 800a326:	f43f ae38 	beq.w	8009f9a <_printf_float+0xc2>
 800a32a:	f108 0801 	add.w	r8, r8, #1
 800a32e:	68e3      	ldr	r3, [r4, #12]
 800a330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a332:	1a5b      	subs	r3, r3, r1
 800a334:	4543      	cmp	r3, r8
 800a336:	dcf0      	bgt.n	800a31a <_printf_float+0x442>
 800a338:	e6fa      	b.n	800a130 <_printf_float+0x258>
 800a33a:	f04f 0800 	mov.w	r8, #0
 800a33e:	f104 0919 	add.w	r9, r4, #25
 800a342:	e7f4      	b.n	800a32e <_printf_float+0x456>

0800a344 <_printf_common>:
 800a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	4616      	mov	r6, r2
 800a34a:	4699      	mov	r9, r3
 800a34c:	688a      	ldr	r2, [r1, #8]
 800a34e:	690b      	ldr	r3, [r1, #16]
 800a350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a354:	4293      	cmp	r3, r2
 800a356:	bfb8      	it	lt
 800a358:	4613      	movlt	r3, r2
 800a35a:	6033      	str	r3, [r6, #0]
 800a35c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a360:	4607      	mov	r7, r0
 800a362:	460c      	mov	r4, r1
 800a364:	b10a      	cbz	r2, 800a36a <_printf_common+0x26>
 800a366:	3301      	adds	r3, #1
 800a368:	6033      	str	r3, [r6, #0]
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	0699      	lsls	r1, r3, #26
 800a36e:	bf42      	ittt	mi
 800a370:	6833      	ldrmi	r3, [r6, #0]
 800a372:	3302      	addmi	r3, #2
 800a374:	6033      	strmi	r3, [r6, #0]
 800a376:	6825      	ldr	r5, [r4, #0]
 800a378:	f015 0506 	ands.w	r5, r5, #6
 800a37c:	d106      	bne.n	800a38c <_printf_common+0x48>
 800a37e:	f104 0a19 	add.w	sl, r4, #25
 800a382:	68e3      	ldr	r3, [r4, #12]
 800a384:	6832      	ldr	r2, [r6, #0]
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	42ab      	cmp	r3, r5
 800a38a:	dc26      	bgt.n	800a3da <_printf_common+0x96>
 800a38c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a390:	1e13      	subs	r3, r2, #0
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	bf18      	it	ne
 800a396:	2301      	movne	r3, #1
 800a398:	0692      	lsls	r2, r2, #26
 800a39a:	d42b      	bmi.n	800a3f4 <_printf_common+0xb0>
 800a39c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	47c0      	blx	r8
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d01e      	beq.n	800a3e8 <_printf_common+0xa4>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	68e5      	ldr	r5, [r4, #12]
 800a3ae:	6832      	ldr	r2, [r6, #0]
 800a3b0:	f003 0306 	and.w	r3, r3, #6
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	bf08      	it	eq
 800a3b8:	1aad      	subeq	r5, r5, r2
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	6922      	ldr	r2, [r4, #16]
 800a3be:	bf0c      	ite	eq
 800a3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3c4:	2500      	movne	r5, #0
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	bfc4      	itt	gt
 800a3ca:	1a9b      	subgt	r3, r3, r2
 800a3cc:	18ed      	addgt	r5, r5, r3
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	341a      	adds	r4, #26
 800a3d2:	42b5      	cmp	r5, r6
 800a3d4:	d11a      	bne.n	800a40c <_printf_common+0xc8>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e008      	b.n	800a3ec <_printf_common+0xa8>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4652      	mov	r2, sl
 800a3de:	4649      	mov	r1, r9
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	47c0      	blx	r8
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d103      	bne.n	800a3f0 <_printf_common+0xac>
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f0:	3501      	adds	r5, #1
 800a3f2:	e7c6      	b.n	800a382 <_printf_common+0x3e>
 800a3f4:	18e1      	adds	r1, r4, r3
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	2030      	movs	r0, #48	; 0x30
 800a3fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3fe:	4422      	add	r2, r4
 800a400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a408:	3302      	adds	r3, #2
 800a40a:	e7c7      	b.n	800a39c <_printf_common+0x58>
 800a40c:	2301      	movs	r3, #1
 800a40e:	4622      	mov	r2, r4
 800a410:	4649      	mov	r1, r9
 800a412:	4638      	mov	r0, r7
 800a414:	47c0      	blx	r8
 800a416:	3001      	adds	r0, #1
 800a418:	d0e6      	beq.n	800a3e8 <_printf_common+0xa4>
 800a41a:	3601      	adds	r6, #1
 800a41c:	e7d9      	b.n	800a3d2 <_printf_common+0x8e>
	...

0800a420 <_printf_i>:
 800a420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	4691      	mov	r9, r2
 800a428:	7e27      	ldrb	r7, [r4, #24]
 800a42a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a42c:	2f78      	cmp	r7, #120	; 0x78
 800a42e:	4680      	mov	r8, r0
 800a430:	469a      	mov	sl, r3
 800a432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a436:	d807      	bhi.n	800a448 <_printf_i+0x28>
 800a438:	2f62      	cmp	r7, #98	; 0x62
 800a43a:	d80a      	bhi.n	800a452 <_printf_i+0x32>
 800a43c:	2f00      	cmp	r7, #0
 800a43e:	f000 80d8 	beq.w	800a5f2 <_printf_i+0x1d2>
 800a442:	2f58      	cmp	r7, #88	; 0x58
 800a444:	f000 80a3 	beq.w	800a58e <_printf_i+0x16e>
 800a448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a44c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a450:	e03a      	b.n	800a4c8 <_printf_i+0xa8>
 800a452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a456:	2b15      	cmp	r3, #21
 800a458:	d8f6      	bhi.n	800a448 <_printf_i+0x28>
 800a45a:	a001      	add	r0, pc, #4	; (adr r0, 800a460 <_printf_i+0x40>)
 800a45c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a460:	0800a4b9 	.word	0x0800a4b9
 800a464:	0800a4cd 	.word	0x0800a4cd
 800a468:	0800a449 	.word	0x0800a449
 800a46c:	0800a449 	.word	0x0800a449
 800a470:	0800a449 	.word	0x0800a449
 800a474:	0800a449 	.word	0x0800a449
 800a478:	0800a4cd 	.word	0x0800a4cd
 800a47c:	0800a449 	.word	0x0800a449
 800a480:	0800a449 	.word	0x0800a449
 800a484:	0800a449 	.word	0x0800a449
 800a488:	0800a449 	.word	0x0800a449
 800a48c:	0800a5d9 	.word	0x0800a5d9
 800a490:	0800a4fd 	.word	0x0800a4fd
 800a494:	0800a5bb 	.word	0x0800a5bb
 800a498:	0800a449 	.word	0x0800a449
 800a49c:	0800a449 	.word	0x0800a449
 800a4a0:	0800a5fb 	.word	0x0800a5fb
 800a4a4:	0800a449 	.word	0x0800a449
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a449 	.word	0x0800a449
 800a4b0:	0800a449 	.word	0x0800a449
 800a4b4:	0800a5c3 	.word	0x0800a5c3
 800a4b8:	680b      	ldr	r3, [r1, #0]
 800a4ba:	1d1a      	adds	r2, r3, #4
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	600a      	str	r2, [r1, #0]
 800a4c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e0a3      	b.n	800a614 <_printf_i+0x1f4>
 800a4cc:	6825      	ldr	r5, [r4, #0]
 800a4ce:	6808      	ldr	r0, [r1, #0]
 800a4d0:	062e      	lsls	r6, r5, #24
 800a4d2:	f100 0304 	add.w	r3, r0, #4
 800a4d6:	d50a      	bpl.n	800a4ee <_printf_i+0xce>
 800a4d8:	6805      	ldr	r5, [r0, #0]
 800a4da:	600b      	str	r3, [r1, #0]
 800a4dc:	2d00      	cmp	r5, #0
 800a4de:	da03      	bge.n	800a4e8 <_printf_i+0xc8>
 800a4e0:	232d      	movs	r3, #45	; 0x2d
 800a4e2:	426d      	negs	r5, r5
 800a4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e8:	485e      	ldr	r0, [pc, #376]	; (800a664 <_printf_i+0x244>)
 800a4ea:	230a      	movs	r3, #10
 800a4ec:	e019      	b.n	800a522 <_printf_i+0x102>
 800a4ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4f2:	6805      	ldr	r5, [r0, #0]
 800a4f4:	600b      	str	r3, [r1, #0]
 800a4f6:	bf18      	it	ne
 800a4f8:	b22d      	sxthne	r5, r5
 800a4fa:	e7ef      	b.n	800a4dc <_printf_i+0xbc>
 800a4fc:	680b      	ldr	r3, [r1, #0]
 800a4fe:	6825      	ldr	r5, [r4, #0]
 800a500:	1d18      	adds	r0, r3, #4
 800a502:	6008      	str	r0, [r1, #0]
 800a504:	0628      	lsls	r0, r5, #24
 800a506:	d501      	bpl.n	800a50c <_printf_i+0xec>
 800a508:	681d      	ldr	r5, [r3, #0]
 800a50a:	e002      	b.n	800a512 <_printf_i+0xf2>
 800a50c:	0669      	lsls	r1, r5, #25
 800a50e:	d5fb      	bpl.n	800a508 <_printf_i+0xe8>
 800a510:	881d      	ldrh	r5, [r3, #0]
 800a512:	4854      	ldr	r0, [pc, #336]	; (800a664 <_printf_i+0x244>)
 800a514:	2f6f      	cmp	r7, #111	; 0x6f
 800a516:	bf0c      	ite	eq
 800a518:	2308      	moveq	r3, #8
 800a51a:	230a      	movne	r3, #10
 800a51c:	2100      	movs	r1, #0
 800a51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a522:	6866      	ldr	r6, [r4, #4]
 800a524:	60a6      	str	r6, [r4, #8]
 800a526:	2e00      	cmp	r6, #0
 800a528:	bfa2      	ittt	ge
 800a52a:	6821      	ldrge	r1, [r4, #0]
 800a52c:	f021 0104 	bicge.w	r1, r1, #4
 800a530:	6021      	strge	r1, [r4, #0]
 800a532:	b90d      	cbnz	r5, 800a538 <_printf_i+0x118>
 800a534:	2e00      	cmp	r6, #0
 800a536:	d04d      	beq.n	800a5d4 <_printf_i+0x1b4>
 800a538:	4616      	mov	r6, r2
 800a53a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a53e:	fb03 5711 	mls	r7, r3, r1, r5
 800a542:	5dc7      	ldrb	r7, [r0, r7]
 800a544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a548:	462f      	mov	r7, r5
 800a54a:	42bb      	cmp	r3, r7
 800a54c:	460d      	mov	r5, r1
 800a54e:	d9f4      	bls.n	800a53a <_printf_i+0x11a>
 800a550:	2b08      	cmp	r3, #8
 800a552:	d10b      	bne.n	800a56c <_printf_i+0x14c>
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	07df      	lsls	r7, r3, #31
 800a558:	d508      	bpl.n	800a56c <_printf_i+0x14c>
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	6861      	ldr	r1, [r4, #4]
 800a55e:	4299      	cmp	r1, r3
 800a560:	bfde      	ittt	le
 800a562:	2330      	movle	r3, #48	; 0x30
 800a564:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a568:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a56c:	1b92      	subs	r2, r2, r6
 800a56e:	6122      	str	r2, [r4, #16]
 800a570:	f8cd a000 	str.w	sl, [sp]
 800a574:	464b      	mov	r3, r9
 800a576:	aa03      	add	r2, sp, #12
 800a578:	4621      	mov	r1, r4
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7ff fee2 	bl	800a344 <_printf_common>
 800a580:	3001      	adds	r0, #1
 800a582:	d14c      	bne.n	800a61e <_printf_i+0x1fe>
 800a584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a588:	b004      	add	sp, #16
 800a58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58e:	4835      	ldr	r0, [pc, #212]	; (800a664 <_printf_i+0x244>)
 800a590:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	680e      	ldr	r6, [r1, #0]
 800a598:	061f      	lsls	r7, r3, #24
 800a59a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a59e:	600e      	str	r6, [r1, #0]
 800a5a0:	d514      	bpl.n	800a5cc <_printf_i+0x1ac>
 800a5a2:	07d9      	lsls	r1, r3, #31
 800a5a4:	bf44      	itt	mi
 800a5a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5aa:	6023      	strmi	r3, [r4, #0]
 800a5ac:	b91d      	cbnz	r5, 800a5b6 <_printf_i+0x196>
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	f023 0320 	bic.w	r3, r3, #32
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	2310      	movs	r3, #16
 800a5b8:	e7b0      	b.n	800a51c <_printf_i+0xfc>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	f043 0320 	orr.w	r3, r3, #32
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	2378      	movs	r3, #120	; 0x78
 800a5c4:	4828      	ldr	r0, [pc, #160]	; (800a668 <_printf_i+0x248>)
 800a5c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5ca:	e7e3      	b.n	800a594 <_printf_i+0x174>
 800a5cc:	065e      	lsls	r6, r3, #25
 800a5ce:	bf48      	it	mi
 800a5d0:	b2ad      	uxthmi	r5, r5
 800a5d2:	e7e6      	b.n	800a5a2 <_printf_i+0x182>
 800a5d4:	4616      	mov	r6, r2
 800a5d6:	e7bb      	b.n	800a550 <_printf_i+0x130>
 800a5d8:	680b      	ldr	r3, [r1, #0]
 800a5da:	6826      	ldr	r6, [r4, #0]
 800a5dc:	6960      	ldr	r0, [r4, #20]
 800a5de:	1d1d      	adds	r5, r3, #4
 800a5e0:	600d      	str	r5, [r1, #0]
 800a5e2:	0635      	lsls	r5, r6, #24
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	d501      	bpl.n	800a5ec <_printf_i+0x1cc>
 800a5e8:	6018      	str	r0, [r3, #0]
 800a5ea:	e002      	b.n	800a5f2 <_printf_i+0x1d2>
 800a5ec:	0671      	lsls	r1, r6, #25
 800a5ee:	d5fb      	bpl.n	800a5e8 <_printf_i+0x1c8>
 800a5f0:	8018      	strh	r0, [r3, #0]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6123      	str	r3, [r4, #16]
 800a5f6:	4616      	mov	r6, r2
 800a5f8:	e7ba      	b.n	800a570 <_printf_i+0x150>
 800a5fa:	680b      	ldr	r3, [r1, #0]
 800a5fc:	1d1a      	adds	r2, r3, #4
 800a5fe:	600a      	str	r2, [r1, #0]
 800a600:	681e      	ldr	r6, [r3, #0]
 800a602:	6862      	ldr	r2, [r4, #4]
 800a604:	2100      	movs	r1, #0
 800a606:	4630      	mov	r0, r6
 800a608:	f7f5 fdfa 	bl	8000200 <memchr>
 800a60c:	b108      	cbz	r0, 800a612 <_printf_i+0x1f2>
 800a60e:	1b80      	subs	r0, r0, r6
 800a610:	6060      	str	r0, [r4, #4]
 800a612:	6863      	ldr	r3, [r4, #4]
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	2300      	movs	r3, #0
 800a618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61c:	e7a8      	b.n	800a570 <_printf_i+0x150>
 800a61e:	6923      	ldr	r3, [r4, #16]
 800a620:	4632      	mov	r2, r6
 800a622:	4649      	mov	r1, r9
 800a624:	4640      	mov	r0, r8
 800a626:	47d0      	blx	sl
 800a628:	3001      	adds	r0, #1
 800a62a:	d0ab      	beq.n	800a584 <_printf_i+0x164>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	079b      	lsls	r3, r3, #30
 800a630:	d413      	bmi.n	800a65a <_printf_i+0x23a>
 800a632:	68e0      	ldr	r0, [r4, #12]
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	4298      	cmp	r0, r3
 800a638:	bfb8      	it	lt
 800a63a:	4618      	movlt	r0, r3
 800a63c:	e7a4      	b.n	800a588 <_printf_i+0x168>
 800a63e:	2301      	movs	r3, #1
 800a640:	4632      	mov	r2, r6
 800a642:	4649      	mov	r1, r9
 800a644:	4640      	mov	r0, r8
 800a646:	47d0      	blx	sl
 800a648:	3001      	adds	r0, #1
 800a64a:	d09b      	beq.n	800a584 <_printf_i+0x164>
 800a64c:	3501      	adds	r5, #1
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	9903      	ldr	r1, [sp, #12]
 800a652:	1a5b      	subs	r3, r3, r1
 800a654:	42ab      	cmp	r3, r5
 800a656:	dcf2      	bgt.n	800a63e <_printf_i+0x21e>
 800a658:	e7eb      	b.n	800a632 <_printf_i+0x212>
 800a65a:	2500      	movs	r5, #0
 800a65c:	f104 0619 	add.w	r6, r4, #25
 800a660:	e7f5      	b.n	800a64e <_printf_i+0x22e>
 800a662:	bf00      	nop
 800a664:	0802822f 	.word	0x0802822f
 800a668:	08028240 	.word	0x08028240

0800a66c <_scanf_float>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	b087      	sub	sp, #28
 800a672:	4617      	mov	r7, r2
 800a674:	9303      	str	r3, [sp, #12]
 800a676:	688b      	ldr	r3, [r1, #8]
 800a678:	1e5a      	subs	r2, r3, #1
 800a67a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a67e:	bf83      	ittte	hi
 800a680:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a684:	195b      	addhi	r3, r3, r5
 800a686:	9302      	strhi	r3, [sp, #8]
 800a688:	2300      	movls	r3, #0
 800a68a:	bf86      	itte	hi
 800a68c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a690:	608b      	strhi	r3, [r1, #8]
 800a692:	9302      	strls	r3, [sp, #8]
 800a694:	680b      	ldr	r3, [r1, #0]
 800a696:	468b      	mov	fp, r1
 800a698:	2500      	movs	r5, #0
 800a69a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a69e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a6a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a6a6:	4680      	mov	r8, r0
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	465e      	mov	r6, fp
 800a6ac:	46aa      	mov	sl, r5
 800a6ae:	46a9      	mov	r9, r5
 800a6b0:	9501      	str	r5, [sp, #4]
 800a6b2:	68a2      	ldr	r2, [r4, #8]
 800a6b4:	b152      	cbz	r2, 800a6cc <_scanf_float+0x60>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b4e      	cmp	r3, #78	; 0x4e
 800a6bc:	d864      	bhi.n	800a788 <_scanf_float+0x11c>
 800a6be:	2b40      	cmp	r3, #64	; 0x40
 800a6c0:	d83c      	bhi.n	800a73c <_scanf_float+0xd0>
 800a6c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a6c6:	b2c8      	uxtb	r0, r1
 800a6c8:	280e      	cmp	r0, #14
 800a6ca:	d93a      	bls.n	800a742 <_scanf_float+0xd6>
 800a6cc:	f1b9 0f00 	cmp.w	r9, #0
 800a6d0:	d003      	beq.n	800a6da <_scanf_float+0x6e>
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a6de:	f1ba 0f01 	cmp.w	sl, #1
 800a6e2:	f200 8113 	bhi.w	800a90c <_scanf_float+0x2a0>
 800a6e6:	455e      	cmp	r6, fp
 800a6e8:	f200 8105 	bhi.w	800a8f6 <_scanf_float+0x28a>
 800a6ec:	2501      	movs	r5, #1
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	b007      	add	sp, #28
 800a6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a6fa:	2a0d      	cmp	r2, #13
 800a6fc:	d8e6      	bhi.n	800a6cc <_scanf_float+0x60>
 800a6fe:	a101      	add	r1, pc, #4	; (adr r1, 800a704 <_scanf_float+0x98>)
 800a700:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a704:	0800a843 	.word	0x0800a843
 800a708:	0800a6cd 	.word	0x0800a6cd
 800a70c:	0800a6cd 	.word	0x0800a6cd
 800a710:	0800a6cd 	.word	0x0800a6cd
 800a714:	0800a8a3 	.word	0x0800a8a3
 800a718:	0800a87b 	.word	0x0800a87b
 800a71c:	0800a6cd 	.word	0x0800a6cd
 800a720:	0800a6cd 	.word	0x0800a6cd
 800a724:	0800a851 	.word	0x0800a851
 800a728:	0800a6cd 	.word	0x0800a6cd
 800a72c:	0800a6cd 	.word	0x0800a6cd
 800a730:	0800a6cd 	.word	0x0800a6cd
 800a734:	0800a6cd 	.word	0x0800a6cd
 800a738:	0800a809 	.word	0x0800a809
 800a73c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a740:	e7db      	b.n	800a6fa <_scanf_float+0x8e>
 800a742:	290e      	cmp	r1, #14
 800a744:	d8c2      	bhi.n	800a6cc <_scanf_float+0x60>
 800a746:	a001      	add	r0, pc, #4	; (adr r0, 800a74c <_scanf_float+0xe0>)
 800a748:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a74c:	0800a7fb 	.word	0x0800a7fb
 800a750:	0800a6cd 	.word	0x0800a6cd
 800a754:	0800a7fb 	.word	0x0800a7fb
 800a758:	0800a88f 	.word	0x0800a88f
 800a75c:	0800a6cd 	.word	0x0800a6cd
 800a760:	0800a7a9 	.word	0x0800a7a9
 800a764:	0800a7e5 	.word	0x0800a7e5
 800a768:	0800a7e5 	.word	0x0800a7e5
 800a76c:	0800a7e5 	.word	0x0800a7e5
 800a770:	0800a7e5 	.word	0x0800a7e5
 800a774:	0800a7e5 	.word	0x0800a7e5
 800a778:	0800a7e5 	.word	0x0800a7e5
 800a77c:	0800a7e5 	.word	0x0800a7e5
 800a780:	0800a7e5 	.word	0x0800a7e5
 800a784:	0800a7e5 	.word	0x0800a7e5
 800a788:	2b6e      	cmp	r3, #110	; 0x6e
 800a78a:	d809      	bhi.n	800a7a0 <_scanf_float+0x134>
 800a78c:	2b60      	cmp	r3, #96	; 0x60
 800a78e:	d8b2      	bhi.n	800a6f6 <_scanf_float+0x8a>
 800a790:	2b54      	cmp	r3, #84	; 0x54
 800a792:	d077      	beq.n	800a884 <_scanf_float+0x218>
 800a794:	2b59      	cmp	r3, #89	; 0x59
 800a796:	d199      	bne.n	800a6cc <_scanf_float+0x60>
 800a798:	2d07      	cmp	r5, #7
 800a79a:	d197      	bne.n	800a6cc <_scanf_float+0x60>
 800a79c:	2508      	movs	r5, #8
 800a79e:	e029      	b.n	800a7f4 <_scanf_float+0x188>
 800a7a0:	2b74      	cmp	r3, #116	; 0x74
 800a7a2:	d06f      	beq.n	800a884 <_scanf_float+0x218>
 800a7a4:	2b79      	cmp	r3, #121	; 0x79
 800a7a6:	e7f6      	b.n	800a796 <_scanf_float+0x12a>
 800a7a8:	6821      	ldr	r1, [r4, #0]
 800a7aa:	05c8      	lsls	r0, r1, #23
 800a7ac:	d51a      	bpl.n	800a7e4 <_scanf_float+0x178>
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a7b4:	6021      	str	r1, [r4, #0]
 800a7b6:	f109 0901 	add.w	r9, r9, #1
 800a7ba:	b11b      	cbz	r3, 800a7c4 <_scanf_float+0x158>
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	3201      	adds	r2, #1
 800a7c0:	9302      	str	r3, [sp, #8]
 800a7c2:	60a2      	str	r2, [r4, #8]
 800a7c4:	68a3      	ldr	r3, [r4, #8]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	60a3      	str	r3, [r4, #8]
 800a7ca:	6923      	ldr	r3, [r4, #16]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	6123      	str	r3, [r4, #16]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	607b      	str	r3, [r7, #4]
 800a7d8:	f340 8084 	ble.w	800a8e4 <_scanf_float+0x278>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	603b      	str	r3, [r7, #0]
 800a7e2:	e766      	b.n	800a6b2 <_scanf_float+0x46>
 800a7e4:	eb1a 0f05 	cmn.w	sl, r5
 800a7e8:	f47f af70 	bne.w	800a6cc <_scanf_float+0x60>
 800a7ec:	6822      	ldr	r2, [r4, #0]
 800a7ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a7f2:	6022      	str	r2, [r4, #0]
 800a7f4:	f806 3b01 	strb.w	r3, [r6], #1
 800a7f8:	e7e4      	b.n	800a7c4 <_scanf_float+0x158>
 800a7fa:	6822      	ldr	r2, [r4, #0]
 800a7fc:	0610      	lsls	r0, r2, #24
 800a7fe:	f57f af65 	bpl.w	800a6cc <_scanf_float+0x60>
 800a802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a806:	e7f4      	b.n	800a7f2 <_scanf_float+0x186>
 800a808:	f1ba 0f00 	cmp.w	sl, #0
 800a80c:	d10e      	bne.n	800a82c <_scanf_float+0x1c0>
 800a80e:	f1b9 0f00 	cmp.w	r9, #0
 800a812:	d10e      	bne.n	800a832 <_scanf_float+0x1c6>
 800a814:	6822      	ldr	r2, [r4, #0]
 800a816:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a81a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a81e:	d108      	bne.n	800a832 <_scanf_float+0x1c6>
 800a820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a824:	6022      	str	r2, [r4, #0]
 800a826:	f04f 0a01 	mov.w	sl, #1
 800a82a:	e7e3      	b.n	800a7f4 <_scanf_float+0x188>
 800a82c:	f1ba 0f02 	cmp.w	sl, #2
 800a830:	d055      	beq.n	800a8de <_scanf_float+0x272>
 800a832:	2d01      	cmp	r5, #1
 800a834:	d002      	beq.n	800a83c <_scanf_float+0x1d0>
 800a836:	2d04      	cmp	r5, #4
 800a838:	f47f af48 	bne.w	800a6cc <_scanf_float+0x60>
 800a83c:	3501      	adds	r5, #1
 800a83e:	b2ed      	uxtb	r5, r5
 800a840:	e7d8      	b.n	800a7f4 <_scanf_float+0x188>
 800a842:	f1ba 0f01 	cmp.w	sl, #1
 800a846:	f47f af41 	bne.w	800a6cc <_scanf_float+0x60>
 800a84a:	f04f 0a02 	mov.w	sl, #2
 800a84e:	e7d1      	b.n	800a7f4 <_scanf_float+0x188>
 800a850:	b97d      	cbnz	r5, 800a872 <_scanf_float+0x206>
 800a852:	f1b9 0f00 	cmp.w	r9, #0
 800a856:	f47f af3c 	bne.w	800a6d2 <_scanf_float+0x66>
 800a85a:	6822      	ldr	r2, [r4, #0]
 800a85c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a860:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a864:	f47f af39 	bne.w	800a6da <_scanf_float+0x6e>
 800a868:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a86c:	6022      	str	r2, [r4, #0]
 800a86e:	2501      	movs	r5, #1
 800a870:	e7c0      	b.n	800a7f4 <_scanf_float+0x188>
 800a872:	2d03      	cmp	r5, #3
 800a874:	d0e2      	beq.n	800a83c <_scanf_float+0x1d0>
 800a876:	2d05      	cmp	r5, #5
 800a878:	e7de      	b.n	800a838 <_scanf_float+0x1cc>
 800a87a:	2d02      	cmp	r5, #2
 800a87c:	f47f af26 	bne.w	800a6cc <_scanf_float+0x60>
 800a880:	2503      	movs	r5, #3
 800a882:	e7b7      	b.n	800a7f4 <_scanf_float+0x188>
 800a884:	2d06      	cmp	r5, #6
 800a886:	f47f af21 	bne.w	800a6cc <_scanf_float+0x60>
 800a88a:	2507      	movs	r5, #7
 800a88c:	e7b2      	b.n	800a7f4 <_scanf_float+0x188>
 800a88e:	6822      	ldr	r2, [r4, #0]
 800a890:	0591      	lsls	r1, r2, #22
 800a892:	f57f af1b 	bpl.w	800a6cc <_scanf_float+0x60>
 800a896:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a89a:	6022      	str	r2, [r4, #0]
 800a89c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8a0:	e7a8      	b.n	800a7f4 <_scanf_float+0x188>
 800a8a2:	6822      	ldr	r2, [r4, #0]
 800a8a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a8a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a8ac:	d006      	beq.n	800a8bc <_scanf_float+0x250>
 800a8ae:	0550      	lsls	r0, r2, #21
 800a8b0:	f57f af0c 	bpl.w	800a6cc <_scanf_float+0x60>
 800a8b4:	f1b9 0f00 	cmp.w	r9, #0
 800a8b8:	f43f af0f 	beq.w	800a6da <_scanf_float+0x6e>
 800a8bc:	0591      	lsls	r1, r2, #22
 800a8be:	bf58      	it	pl
 800a8c0:	9901      	ldrpl	r1, [sp, #4]
 800a8c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8c6:	bf58      	it	pl
 800a8c8:	eba9 0101 	subpl.w	r1, r9, r1
 800a8cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a8d0:	bf58      	it	pl
 800a8d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a8d6:	6022      	str	r2, [r4, #0]
 800a8d8:	f04f 0900 	mov.w	r9, #0
 800a8dc:	e78a      	b.n	800a7f4 <_scanf_float+0x188>
 800a8de:	f04f 0a03 	mov.w	sl, #3
 800a8e2:	e787      	b.n	800a7f4 <_scanf_float+0x188>
 800a8e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	4798      	blx	r3
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f43f aedf 	beq.w	800a6b2 <_scanf_float+0x46>
 800a8f4:	e6ea      	b.n	800a6cc <_scanf_float+0x60>
 800a8f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8fe:	463a      	mov	r2, r7
 800a900:	4640      	mov	r0, r8
 800a902:	4798      	blx	r3
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	3b01      	subs	r3, #1
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	e6ec      	b.n	800a6e6 <_scanf_float+0x7a>
 800a90c:	1e6b      	subs	r3, r5, #1
 800a90e:	2b06      	cmp	r3, #6
 800a910:	d825      	bhi.n	800a95e <_scanf_float+0x2f2>
 800a912:	2d02      	cmp	r5, #2
 800a914:	d836      	bhi.n	800a984 <_scanf_float+0x318>
 800a916:	455e      	cmp	r6, fp
 800a918:	f67f aee8 	bls.w	800a6ec <_scanf_float+0x80>
 800a91c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a920:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a924:	463a      	mov	r2, r7
 800a926:	4640      	mov	r0, r8
 800a928:	4798      	blx	r3
 800a92a:	6923      	ldr	r3, [r4, #16]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	6123      	str	r3, [r4, #16]
 800a930:	e7f1      	b.n	800a916 <_scanf_float+0x2aa>
 800a932:	9802      	ldr	r0, [sp, #8]
 800a934:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a938:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a93c:	9002      	str	r0, [sp, #8]
 800a93e:	463a      	mov	r2, r7
 800a940:	4640      	mov	r0, r8
 800a942:	4798      	blx	r3
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	3b01      	subs	r3, #1
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a94e:	fa5f fa8a 	uxtb.w	sl, sl
 800a952:	f1ba 0f02 	cmp.w	sl, #2
 800a956:	d1ec      	bne.n	800a932 <_scanf_float+0x2c6>
 800a958:	3d03      	subs	r5, #3
 800a95a:	b2ed      	uxtb	r5, r5
 800a95c:	1b76      	subs	r6, r6, r5
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	05da      	lsls	r2, r3, #23
 800a962:	d52f      	bpl.n	800a9c4 <_scanf_float+0x358>
 800a964:	055b      	lsls	r3, r3, #21
 800a966:	d510      	bpl.n	800a98a <_scanf_float+0x31e>
 800a968:	455e      	cmp	r6, fp
 800a96a:	f67f aebf 	bls.w	800a6ec <_scanf_float+0x80>
 800a96e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a976:	463a      	mov	r2, r7
 800a978:	4640      	mov	r0, r8
 800a97a:	4798      	blx	r3
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	3b01      	subs	r3, #1
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	e7f1      	b.n	800a968 <_scanf_float+0x2fc>
 800a984:	46aa      	mov	sl, r5
 800a986:	9602      	str	r6, [sp, #8]
 800a988:	e7df      	b.n	800a94a <_scanf_float+0x2de>
 800a98a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a98e:	6923      	ldr	r3, [r4, #16]
 800a990:	2965      	cmp	r1, #101	; 0x65
 800a992:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a996:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a99a:	6123      	str	r3, [r4, #16]
 800a99c:	d00c      	beq.n	800a9b8 <_scanf_float+0x34c>
 800a99e:	2945      	cmp	r1, #69	; 0x45
 800a9a0:	d00a      	beq.n	800a9b8 <_scanf_float+0x34c>
 800a9a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9a6:	463a      	mov	r2, r7
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4798      	blx	r3
 800a9ac:	6923      	ldr	r3, [r4, #16]
 800a9ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	1eb5      	subs	r5, r6, #2
 800a9b6:	6123      	str	r3, [r4, #16]
 800a9b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9bc:	463a      	mov	r2, r7
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4798      	blx	r3
 800a9c2:	462e      	mov	r6, r5
 800a9c4:	6825      	ldr	r5, [r4, #0]
 800a9c6:	f015 0510 	ands.w	r5, r5, #16
 800a9ca:	d158      	bne.n	800aa7e <_scanf_float+0x412>
 800a9cc:	7035      	strb	r5, [r6, #0]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a9d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d8:	d11c      	bne.n	800aa14 <_scanf_float+0x3a8>
 800a9da:	9b01      	ldr	r3, [sp, #4]
 800a9dc:	454b      	cmp	r3, r9
 800a9de:	eba3 0209 	sub.w	r2, r3, r9
 800a9e2:	d124      	bne.n	800aa2e <_scanf_float+0x3c2>
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	4659      	mov	r1, fp
 800a9e8:	4640      	mov	r0, r8
 800a9ea:	f000 feab 	bl	800b744 <_strtod_r>
 800a9ee:	9b03      	ldr	r3, [sp, #12]
 800a9f0:	6821      	ldr	r1, [r4, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f011 0f02 	tst.w	r1, #2
 800a9f8:	ec57 6b10 	vmov	r6, r7, d0
 800a9fc:	f103 0204 	add.w	r2, r3, #4
 800aa00:	d020      	beq.n	800aa44 <_scanf_float+0x3d8>
 800aa02:	9903      	ldr	r1, [sp, #12]
 800aa04:	600a      	str	r2, [r1, #0]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	e9c3 6700 	strd	r6, r7, [r3]
 800aa0c:	68e3      	ldr	r3, [r4, #12]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	60e3      	str	r3, [r4, #12]
 800aa12:	e66c      	b.n	800a6ee <_scanf_float+0x82>
 800aa14:	9b04      	ldr	r3, [sp, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0e4      	beq.n	800a9e4 <_scanf_float+0x378>
 800aa1a:	9905      	ldr	r1, [sp, #20]
 800aa1c:	230a      	movs	r3, #10
 800aa1e:	462a      	mov	r2, r5
 800aa20:	3101      	adds	r1, #1
 800aa22:	4640      	mov	r0, r8
 800aa24:	f000 ff18 	bl	800b858 <_strtol_r>
 800aa28:	9b04      	ldr	r3, [sp, #16]
 800aa2a:	9e05      	ldr	r6, [sp, #20]
 800aa2c:	1ac2      	subs	r2, r0, r3
 800aa2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aa32:	429e      	cmp	r6, r3
 800aa34:	bf28      	it	cs
 800aa36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aa3a:	4912      	ldr	r1, [pc, #72]	; (800aa84 <_scanf_float+0x418>)
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f000 f83b 	bl	800aab8 <siprintf>
 800aa42:	e7cf      	b.n	800a9e4 <_scanf_float+0x378>
 800aa44:	f011 0f04 	tst.w	r1, #4
 800aa48:	9903      	ldr	r1, [sp, #12]
 800aa4a:	600a      	str	r2, [r1, #0]
 800aa4c:	d1db      	bne.n	800aa06 <_scanf_float+0x39a>
 800aa4e:	f8d3 8000 	ldr.w	r8, [r3]
 800aa52:	ee10 2a10 	vmov	r2, s0
 800aa56:	ee10 0a10 	vmov	r0, s0
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	4639      	mov	r1, r7
 800aa5e:	f7f6 f875 	bl	8000b4c <__aeabi_dcmpun>
 800aa62:	b128      	cbz	r0, 800aa70 <_scanf_float+0x404>
 800aa64:	4808      	ldr	r0, [pc, #32]	; (800aa88 <_scanf_float+0x41c>)
 800aa66:	f000 f821 	bl	800aaac <nanf>
 800aa6a:	ed88 0a00 	vstr	s0, [r8]
 800aa6e:	e7cd      	b.n	800aa0c <_scanf_float+0x3a0>
 800aa70:	4630      	mov	r0, r6
 800aa72:	4639      	mov	r1, r7
 800aa74:	f7f6 f8c8 	bl	8000c08 <__aeabi_d2f>
 800aa78:	f8c8 0000 	str.w	r0, [r8]
 800aa7c:	e7c6      	b.n	800aa0c <_scanf_float+0x3a0>
 800aa7e:	2500      	movs	r5, #0
 800aa80:	e635      	b.n	800a6ee <_scanf_float+0x82>
 800aa82:	bf00      	nop
 800aa84:	08028251 	.word	0x08028251
 800aa88:	08028207 	.word	0x08028207

0800aa8c <_sbrk_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d06      	ldr	r5, [pc, #24]	; (800aaa8 <_sbrk_r+0x1c>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	f7f7 f9a2 	bl	8001de0 <_sbrk>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_sbrk_r+0x1a>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_sbrk_r+0x1a>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	2000d390 	.word	0x2000d390

0800aaac <nanf>:
 800aaac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aab4 <nanf+0x8>
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	7fc00000 	.word	0x7fc00000

0800aab8 <siprintf>:
 800aab8:	b40e      	push	{r1, r2, r3}
 800aaba:	b500      	push	{lr}
 800aabc:	b09c      	sub	sp, #112	; 0x70
 800aabe:	ab1d      	add	r3, sp, #116	; 0x74
 800aac0:	9002      	str	r0, [sp, #8]
 800aac2:	9006      	str	r0, [sp, #24]
 800aac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aac8:	4809      	ldr	r0, [pc, #36]	; (800aaf0 <siprintf+0x38>)
 800aaca:	9107      	str	r1, [sp, #28]
 800aacc:	9104      	str	r1, [sp, #16]
 800aace:	4909      	ldr	r1, [pc, #36]	; (800aaf4 <siprintf+0x3c>)
 800aad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad4:	9105      	str	r1, [sp, #20]
 800aad6:	6800      	ldr	r0, [r0, #0]
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	a902      	add	r1, sp, #8
 800aadc:	f003 f912 	bl	800dd04 <_svfiprintf_r>
 800aae0:	9b02      	ldr	r3, [sp, #8]
 800aae2:	2200      	movs	r2, #0
 800aae4:	701a      	strb	r2, [r3, #0]
 800aae6:	b01c      	add	sp, #112	; 0x70
 800aae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaec:	b003      	add	sp, #12
 800aaee:	4770      	bx	lr
 800aaf0:	20000e04 	.word	0x20000e04
 800aaf4:	ffff0208 	.word	0xffff0208

0800aaf8 <sulp>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	4604      	mov	r4, r0
 800aafc:	460d      	mov	r5, r1
 800aafe:	ec45 4b10 	vmov	d0, r4, r5
 800ab02:	4616      	mov	r6, r2
 800ab04:	f002 ff1e 	bl	800d944 <__ulp>
 800ab08:	ec51 0b10 	vmov	r0, r1, d0
 800ab0c:	b17e      	cbz	r6, 800ab2e <sulp+0x36>
 800ab0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dd09      	ble.n	800ab2e <sulp+0x36>
 800ab1a:	051b      	lsls	r3, r3, #20
 800ab1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab20:	2400      	movs	r4, #0
 800ab22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab26:	4622      	mov	r2, r4
 800ab28:	462b      	mov	r3, r5
 800ab2a:	f7f5 fd75 	bl	8000618 <__aeabi_dmul>
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}

0800ab30 <_strtod_l>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	b0a3      	sub	sp, #140	; 0x8c
 800ab36:	461f      	mov	r7, r3
 800ab38:	2300      	movs	r3, #0
 800ab3a:	931e      	str	r3, [sp, #120]	; 0x78
 800ab3c:	4ba4      	ldr	r3, [pc, #656]	; (800add0 <_strtod_l+0x2a0>)
 800ab3e:	9219      	str	r2, [sp, #100]	; 0x64
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	9307      	str	r3, [sp, #28]
 800ab44:	4604      	mov	r4, r0
 800ab46:	4618      	mov	r0, r3
 800ab48:	4688      	mov	r8, r1
 800ab4a:	f7f5 fb4b 	bl	80001e4 <strlen>
 800ab4e:	f04f 0a00 	mov.w	sl, #0
 800ab52:	4605      	mov	r5, r0
 800ab54:	f04f 0b00 	mov.w	fp, #0
 800ab58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ab5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab5e:	781a      	ldrb	r2, [r3, #0]
 800ab60:	2a2b      	cmp	r2, #43	; 0x2b
 800ab62:	d04c      	beq.n	800abfe <_strtod_l+0xce>
 800ab64:	d839      	bhi.n	800abda <_strtod_l+0xaa>
 800ab66:	2a0d      	cmp	r2, #13
 800ab68:	d832      	bhi.n	800abd0 <_strtod_l+0xa0>
 800ab6a:	2a08      	cmp	r2, #8
 800ab6c:	d832      	bhi.n	800abd4 <_strtod_l+0xa4>
 800ab6e:	2a00      	cmp	r2, #0
 800ab70:	d03c      	beq.n	800abec <_strtod_l+0xbc>
 800ab72:	2300      	movs	r3, #0
 800ab74:	930e      	str	r3, [sp, #56]	; 0x38
 800ab76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ab78:	7833      	ldrb	r3, [r6, #0]
 800ab7a:	2b30      	cmp	r3, #48	; 0x30
 800ab7c:	f040 80b4 	bne.w	800ace8 <_strtod_l+0x1b8>
 800ab80:	7873      	ldrb	r3, [r6, #1]
 800ab82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab86:	2b58      	cmp	r3, #88	; 0x58
 800ab88:	d16c      	bne.n	800ac64 <_strtod_l+0x134>
 800ab8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab8c:	9301      	str	r3, [sp, #4]
 800ab8e:	ab1e      	add	r3, sp, #120	; 0x78
 800ab90:	9702      	str	r7, [sp, #8]
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	4a8f      	ldr	r2, [pc, #572]	; (800add4 <_strtod_l+0x2a4>)
 800ab96:	ab1f      	add	r3, sp, #124	; 0x7c
 800ab98:	a91d      	add	r1, sp, #116	; 0x74
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f001 ffba 	bl	800cb14 <__gethex>
 800aba0:	f010 0707 	ands.w	r7, r0, #7
 800aba4:	4605      	mov	r5, r0
 800aba6:	d005      	beq.n	800abb4 <_strtod_l+0x84>
 800aba8:	2f06      	cmp	r7, #6
 800abaa:	d12a      	bne.n	800ac02 <_strtod_l+0xd2>
 800abac:	3601      	adds	r6, #1
 800abae:	2300      	movs	r3, #0
 800abb0:	961d      	str	r6, [sp, #116]	; 0x74
 800abb2:	930e      	str	r3, [sp, #56]	; 0x38
 800abb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f040 8596 	bne.w	800b6e8 <_strtod_l+0xbb8>
 800abbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abbe:	b1db      	cbz	r3, 800abf8 <_strtod_l+0xc8>
 800abc0:	4652      	mov	r2, sl
 800abc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800abc6:	ec43 2b10 	vmov	d0, r2, r3
 800abca:	b023      	add	sp, #140	; 0x8c
 800abcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd0:	2a20      	cmp	r2, #32
 800abd2:	d1ce      	bne.n	800ab72 <_strtod_l+0x42>
 800abd4:	3301      	adds	r3, #1
 800abd6:	931d      	str	r3, [sp, #116]	; 0x74
 800abd8:	e7c0      	b.n	800ab5c <_strtod_l+0x2c>
 800abda:	2a2d      	cmp	r2, #45	; 0x2d
 800abdc:	d1c9      	bne.n	800ab72 <_strtod_l+0x42>
 800abde:	2201      	movs	r2, #1
 800abe0:	920e      	str	r2, [sp, #56]	; 0x38
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	921d      	str	r2, [sp, #116]	; 0x74
 800abe6:	785b      	ldrb	r3, [r3, #1]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1c4      	bne.n	800ab76 <_strtod_l+0x46>
 800abec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f040 8576 	bne.w	800b6e4 <_strtod_l+0xbb4>
 800abf8:	4652      	mov	r2, sl
 800abfa:	465b      	mov	r3, fp
 800abfc:	e7e3      	b.n	800abc6 <_strtod_l+0x96>
 800abfe:	2200      	movs	r2, #0
 800ac00:	e7ee      	b.n	800abe0 <_strtod_l+0xb0>
 800ac02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ac04:	b13a      	cbz	r2, 800ac16 <_strtod_l+0xe6>
 800ac06:	2135      	movs	r1, #53	; 0x35
 800ac08:	a820      	add	r0, sp, #128	; 0x80
 800ac0a:	f002 ffa6 	bl	800db5a <__copybits>
 800ac0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ac10:	4620      	mov	r0, r4
 800ac12:	f002 fb6b 	bl	800d2ec <_Bfree>
 800ac16:	3f01      	subs	r7, #1
 800ac18:	2f05      	cmp	r7, #5
 800ac1a:	d807      	bhi.n	800ac2c <_strtod_l+0xfc>
 800ac1c:	e8df f007 	tbb	[pc, r7]
 800ac20:	1d180b0e 	.word	0x1d180b0e
 800ac24:	030e      	.short	0x030e
 800ac26:	f04f 0b00 	mov.w	fp, #0
 800ac2a:	46da      	mov	sl, fp
 800ac2c:	0728      	lsls	r0, r5, #28
 800ac2e:	d5c1      	bpl.n	800abb4 <_strtod_l+0x84>
 800ac30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ac34:	e7be      	b.n	800abb4 <_strtod_l+0x84>
 800ac36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800ac3a:	e7f7      	b.n	800ac2c <_strtod_l+0xfc>
 800ac3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ac40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ac42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac4e:	e7ed      	b.n	800ac2c <_strtod_l+0xfc>
 800ac50:	f8df b184 	ldr.w	fp, [pc, #388]	; 800add8 <_strtod_l+0x2a8>
 800ac54:	f04f 0a00 	mov.w	sl, #0
 800ac58:	e7e8      	b.n	800ac2c <_strtod_l+0xfc>
 800ac5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ac5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ac62:	e7e3      	b.n	800ac2c <_strtod_l+0xfc>
 800ac64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	921d      	str	r2, [sp, #116]	; 0x74
 800ac6a:	785b      	ldrb	r3, [r3, #1]
 800ac6c:	2b30      	cmp	r3, #48	; 0x30
 800ac6e:	d0f9      	beq.n	800ac64 <_strtod_l+0x134>
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d09f      	beq.n	800abb4 <_strtod_l+0x84>
 800ac74:	2301      	movs	r3, #1
 800ac76:	f04f 0900 	mov.w	r9, #0
 800ac7a:	9304      	str	r3, [sp, #16]
 800ac7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ac84:	464f      	mov	r7, r9
 800ac86:	220a      	movs	r2, #10
 800ac88:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ac8a:	7806      	ldrb	r6, [r0, #0]
 800ac8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ac90:	b2d9      	uxtb	r1, r3
 800ac92:	2909      	cmp	r1, #9
 800ac94:	d92a      	bls.n	800acec <_strtod_l+0x1bc>
 800ac96:	9907      	ldr	r1, [sp, #28]
 800ac98:	462a      	mov	r2, r5
 800ac9a:	f003 f9c4 	bl	800e026 <strncmp>
 800ac9e:	b398      	cbz	r0, 800ad08 <_strtod_l+0x1d8>
 800aca0:	2000      	movs	r0, #0
 800aca2:	4633      	mov	r3, r6
 800aca4:	463d      	mov	r5, r7
 800aca6:	9007      	str	r0, [sp, #28]
 800aca8:	4602      	mov	r2, r0
 800acaa:	2b65      	cmp	r3, #101	; 0x65
 800acac:	d001      	beq.n	800acb2 <_strtod_l+0x182>
 800acae:	2b45      	cmp	r3, #69	; 0x45
 800acb0:	d118      	bne.n	800ace4 <_strtod_l+0x1b4>
 800acb2:	b91d      	cbnz	r5, 800acbc <_strtod_l+0x18c>
 800acb4:	9b04      	ldr	r3, [sp, #16]
 800acb6:	4303      	orrs	r3, r0
 800acb8:	d098      	beq.n	800abec <_strtod_l+0xbc>
 800acba:	2500      	movs	r5, #0
 800acbc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800acc0:	f108 0301 	add.w	r3, r8, #1
 800acc4:	931d      	str	r3, [sp, #116]	; 0x74
 800acc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800acca:	2b2b      	cmp	r3, #43	; 0x2b
 800accc:	d075      	beq.n	800adba <_strtod_l+0x28a>
 800acce:	2b2d      	cmp	r3, #45	; 0x2d
 800acd0:	d07b      	beq.n	800adca <_strtod_l+0x29a>
 800acd2:	f04f 0c00 	mov.w	ip, #0
 800acd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800acda:	2909      	cmp	r1, #9
 800acdc:	f240 8082 	bls.w	800ade4 <_strtod_l+0x2b4>
 800ace0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ace4:	2600      	movs	r6, #0
 800ace6:	e09d      	b.n	800ae24 <_strtod_l+0x2f4>
 800ace8:	2300      	movs	r3, #0
 800acea:	e7c4      	b.n	800ac76 <_strtod_l+0x146>
 800acec:	2f08      	cmp	r7, #8
 800acee:	bfd8      	it	le
 800acf0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800acf2:	f100 0001 	add.w	r0, r0, #1
 800acf6:	bfda      	itte	le
 800acf8:	fb02 3301 	mlale	r3, r2, r1, r3
 800acfc:	9309      	strle	r3, [sp, #36]	; 0x24
 800acfe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ad02:	3701      	adds	r7, #1
 800ad04:	901d      	str	r0, [sp, #116]	; 0x74
 800ad06:	e7bf      	b.n	800ac88 <_strtod_l+0x158>
 800ad08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad0a:	195a      	adds	r2, r3, r5
 800ad0c:	921d      	str	r2, [sp, #116]	; 0x74
 800ad0e:	5d5b      	ldrb	r3, [r3, r5]
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	d037      	beq.n	800ad84 <_strtod_l+0x254>
 800ad14:	9007      	str	r0, [sp, #28]
 800ad16:	463d      	mov	r5, r7
 800ad18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ad1c:	2a09      	cmp	r2, #9
 800ad1e:	d912      	bls.n	800ad46 <_strtod_l+0x216>
 800ad20:	2201      	movs	r2, #1
 800ad22:	e7c2      	b.n	800acaa <_strtod_l+0x17a>
 800ad24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	921d      	str	r2, [sp, #116]	; 0x74
 800ad2a:	785b      	ldrb	r3, [r3, #1]
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	2b30      	cmp	r3, #48	; 0x30
 800ad30:	d0f8      	beq.n	800ad24 <_strtod_l+0x1f4>
 800ad32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ad36:	2a08      	cmp	r2, #8
 800ad38:	f200 84db 	bhi.w	800b6f2 <_strtod_l+0xbc2>
 800ad3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ad3e:	9007      	str	r0, [sp, #28]
 800ad40:	2000      	movs	r0, #0
 800ad42:	920a      	str	r2, [sp, #40]	; 0x28
 800ad44:	4605      	mov	r5, r0
 800ad46:	3b30      	subs	r3, #48	; 0x30
 800ad48:	f100 0201 	add.w	r2, r0, #1
 800ad4c:	d014      	beq.n	800ad78 <_strtod_l+0x248>
 800ad4e:	9907      	ldr	r1, [sp, #28]
 800ad50:	4411      	add	r1, r2
 800ad52:	9107      	str	r1, [sp, #28]
 800ad54:	462a      	mov	r2, r5
 800ad56:	eb00 0e05 	add.w	lr, r0, r5
 800ad5a:	210a      	movs	r1, #10
 800ad5c:	4572      	cmp	r2, lr
 800ad5e:	d113      	bne.n	800ad88 <_strtod_l+0x258>
 800ad60:	182a      	adds	r2, r5, r0
 800ad62:	2a08      	cmp	r2, #8
 800ad64:	f105 0501 	add.w	r5, r5, #1
 800ad68:	4405      	add	r5, r0
 800ad6a:	dc1c      	bgt.n	800ada6 <_strtod_l+0x276>
 800ad6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad6e:	220a      	movs	r2, #10
 800ad70:	fb02 3301 	mla	r3, r2, r1, r3
 800ad74:	9309      	str	r3, [sp, #36]	; 0x24
 800ad76:	2200      	movs	r2, #0
 800ad78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad7a:	1c59      	adds	r1, r3, #1
 800ad7c:	911d      	str	r1, [sp, #116]	; 0x74
 800ad7e:	785b      	ldrb	r3, [r3, #1]
 800ad80:	4610      	mov	r0, r2
 800ad82:	e7c9      	b.n	800ad18 <_strtod_l+0x1e8>
 800ad84:	4638      	mov	r0, r7
 800ad86:	e7d2      	b.n	800ad2e <_strtod_l+0x1fe>
 800ad88:	2a08      	cmp	r2, #8
 800ad8a:	dc04      	bgt.n	800ad96 <_strtod_l+0x266>
 800ad8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ad8e:	434e      	muls	r6, r1
 800ad90:	9609      	str	r6, [sp, #36]	; 0x24
 800ad92:	3201      	adds	r2, #1
 800ad94:	e7e2      	b.n	800ad5c <_strtod_l+0x22c>
 800ad96:	f102 0c01 	add.w	ip, r2, #1
 800ad9a:	f1bc 0f10 	cmp.w	ip, #16
 800ad9e:	bfd8      	it	le
 800ada0:	fb01 f909 	mulle.w	r9, r1, r9
 800ada4:	e7f5      	b.n	800ad92 <_strtod_l+0x262>
 800ada6:	2d10      	cmp	r5, #16
 800ada8:	bfdc      	itt	le
 800adaa:	220a      	movle	r2, #10
 800adac:	fb02 3909 	mlale	r9, r2, r9, r3
 800adb0:	e7e1      	b.n	800ad76 <_strtod_l+0x246>
 800adb2:	2300      	movs	r3, #0
 800adb4:	9307      	str	r3, [sp, #28]
 800adb6:	2201      	movs	r2, #1
 800adb8:	e77c      	b.n	800acb4 <_strtod_l+0x184>
 800adba:	f04f 0c00 	mov.w	ip, #0
 800adbe:	f108 0302 	add.w	r3, r8, #2
 800adc2:	931d      	str	r3, [sp, #116]	; 0x74
 800adc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800adc8:	e785      	b.n	800acd6 <_strtod_l+0x1a6>
 800adca:	f04f 0c01 	mov.w	ip, #1
 800adce:	e7f6      	b.n	800adbe <_strtod_l+0x28e>
 800add0:	0802850c 	.word	0x0802850c
 800add4:	08028258 	.word	0x08028258
 800add8:	7ff00000 	.word	0x7ff00000
 800addc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adde:	1c59      	adds	r1, r3, #1
 800ade0:	911d      	str	r1, [sp, #116]	; 0x74
 800ade2:	785b      	ldrb	r3, [r3, #1]
 800ade4:	2b30      	cmp	r3, #48	; 0x30
 800ade6:	d0f9      	beq.n	800addc <_strtod_l+0x2ac>
 800ade8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800adec:	2908      	cmp	r1, #8
 800adee:	f63f af79 	bhi.w	800ace4 <_strtod_l+0x1b4>
 800adf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800adf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adf8:	9308      	str	r3, [sp, #32]
 800adfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adfc:	1c59      	adds	r1, r3, #1
 800adfe:	911d      	str	r1, [sp, #116]	; 0x74
 800ae00:	785b      	ldrb	r3, [r3, #1]
 800ae02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ae06:	2e09      	cmp	r6, #9
 800ae08:	d937      	bls.n	800ae7a <_strtod_l+0x34a>
 800ae0a:	9e08      	ldr	r6, [sp, #32]
 800ae0c:	1b89      	subs	r1, r1, r6
 800ae0e:	2908      	cmp	r1, #8
 800ae10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ae14:	dc02      	bgt.n	800ae1c <_strtod_l+0x2ec>
 800ae16:	4576      	cmp	r6, lr
 800ae18:	bfa8      	it	ge
 800ae1a:	4676      	movge	r6, lr
 800ae1c:	f1bc 0f00 	cmp.w	ip, #0
 800ae20:	d000      	beq.n	800ae24 <_strtod_l+0x2f4>
 800ae22:	4276      	negs	r6, r6
 800ae24:	2d00      	cmp	r5, #0
 800ae26:	d14f      	bne.n	800aec8 <_strtod_l+0x398>
 800ae28:	9904      	ldr	r1, [sp, #16]
 800ae2a:	4301      	orrs	r1, r0
 800ae2c:	f47f aec2 	bne.w	800abb4 <_strtod_l+0x84>
 800ae30:	2a00      	cmp	r2, #0
 800ae32:	f47f aedb 	bne.w	800abec <_strtod_l+0xbc>
 800ae36:	2b69      	cmp	r3, #105	; 0x69
 800ae38:	d027      	beq.n	800ae8a <_strtod_l+0x35a>
 800ae3a:	dc24      	bgt.n	800ae86 <_strtod_l+0x356>
 800ae3c:	2b49      	cmp	r3, #73	; 0x49
 800ae3e:	d024      	beq.n	800ae8a <_strtod_l+0x35a>
 800ae40:	2b4e      	cmp	r3, #78	; 0x4e
 800ae42:	f47f aed3 	bne.w	800abec <_strtod_l+0xbc>
 800ae46:	499e      	ldr	r1, [pc, #632]	; (800b0c0 <_strtod_l+0x590>)
 800ae48:	a81d      	add	r0, sp, #116	; 0x74
 800ae4a:	f002 f8bb 	bl	800cfc4 <__match>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f aecc 	beq.w	800abec <_strtod_l+0xbc>
 800ae54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2b28      	cmp	r3, #40	; 0x28
 800ae5a:	d12d      	bne.n	800aeb8 <_strtod_l+0x388>
 800ae5c:	4999      	ldr	r1, [pc, #612]	; (800b0c4 <_strtod_l+0x594>)
 800ae5e:	aa20      	add	r2, sp, #128	; 0x80
 800ae60:	a81d      	add	r0, sp, #116	; 0x74
 800ae62:	f002 f8c3 	bl	800cfec <__hexnan>
 800ae66:	2805      	cmp	r0, #5
 800ae68:	d126      	bne.n	800aeb8 <_strtod_l+0x388>
 800ae6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ae70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ae74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ae78:	e69c      	b.n	800abb4 <_strtod_l+0x84>
 800ae7a:	210a      	movs	r1, #10
 800ae7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ae80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ae84:	e7b9      	b.n	800adfa <_strtod_l+0x2ca>
 800ae86:	2b6e      	cmp	r3, #110	; 0x6e
 800ae88:	e7db      	b.n	800ae42 <_strtod_l+0x312>
 800ae8a:	498f      	ldr	r1, [pc, #572]	; (800b0c8 <_strtod_l+0x598>)
 800ae8c:	a81d      	add	r0, sp, #116	; 0x74
 800ae8e:	f002 f899 	bl	800cfc4 <__match>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	f43f aeaa 	beq.w	800abec <_strtod_l+0xbc>
 800ae98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae9a:	498c      	ldr	r1, [pc, #560]	; (800b0cc <_strtod_l+0x59c>)
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	a81d      	add	r0, sp, #116	; 0x74
 800aea0:	931d      	str	r3, [sp, #116]	; 0x74
 800aea2:	f002 f88f 	bl	800cfc4 <__match>
 800aea6:	b910      	cbnz	r0, 800aeae <_strtod_l+0x37e>
 800aea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aeaa:	3301      	adds	r3, #1
 800aeac:	931d      	str	r3, [sp, #116]	; 0x74
 800aeae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b0dc <_strtod_l+0x5ac>
 800aeb2:	f04f 0a00 	mov.w	sl, #0
 800aeb6:	e67d      	b.n	800abb4 <_strtod_l+0x84>
 800aeb8:	4885      	ldr	r0, [pc, #532]	; (800b0d0 <_strtod_l+0x5a0>)
 800aeba:	f003 f825 	bl	800df08 <nan>
 800aebe:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aec2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aec6:	e675      	b.n	800abb4 <_strtod_l+0x84>
 800aec8:	9b07      	ldr	r3, [sp, #28]
 800aeca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aecc:	1af3      	subs	r3, r6, r3
 800aece:	2f00      	cmp	r7, #0
 800aed0:	bf08      	it	eq
 800aed2:	462f      	moveq	r7, r5
 800aed4:	2d10      	cmp	r5, #16
 800aed6:	9308      	str	r3, [sp, #32]
 800aed8:	46a8      	mov	r8, r5
 800aeda:	bfa8      	it	ge
 800aedc:	f04f 0810 	movge.w	r8, #16
 800aee0:	f7f5 fb20 	bl	8000524 <__aeabi_ui2d>
 800aee4:	2d09      	cmp	r5, #9
 800aee6:	4682      	mov	sl, r0
 800aee8:	468b      	mov	fp, r1
 800aeea:	dd13      	ble.n	800af14 <_strtod_l+0x3e4>
 800aeec:	4b79      	ldr	r3, [pc, #484]	; (800b0d4 <_strtod_l+0x5a4>)
 800aeee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aef2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aef6:	f7f5 fb8f 	bl	8000618 <__aeabi_dmul>
 800aefa:	4682      	mov	sl, r0
 800aefc:	4648      	mov	r0, r9
 800aefe:	468b      	mov	fp, r1
 800af00:	f7f5 fb10 	bl	8000524 <__aeabi_ui2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4650      	mov	r0, sl
 800af0a:	4659      	mov	r1, fp
 800af0c:	f7f5 f9ce 	bl	80002ac <__adddf3>
 800af10:	4682      	mov	sl, r0
 800af12:	468b      	mov	fp, r1
 800af14:	2d0f      	cmp	r5, #15
 800af16:	dc38      	bgt.n	800af8a <_strtod_l+0x45a>
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f43f ae4a 	beq.w	800abb4 <_strtod_l+0x84>
 800af20:	dd24      	ble.n	800af6c <_strtod_l+0x43c>
 800af22:	2b16      	cmp	r3, #22
 800af24:	dc0b      	bgt.n	800af3e <_strtod_l+0x40e>
 800af26:	4d6b      	ldr	r5, [pc, #428]	; (800b0d4 <_strtod_l+0x5a4>)
 800af28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800af2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800af30:	4652      	mov	r2, sl
 800af32:	465b      	mov	r3, fp
 800af34:	f7f5 fb70 	bl	8000618 <__aeabi_dmul>
 800af38:	4682      	mov	sl, r0
 800af3a:	468b      	mov	fp, r1
 800af3c:	e63a      	b.n	800abb4 <_strtod_l+0x84>
 800af3e:	9a08      	ldr	r2, [sp, #32]
 800af40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800af44:	4293      	cmp	r3, r2
 800af46:	db20      	blt.n	800af8a <_strtod_l+0x45a>
 800af48:	4c62      	ldr	r4, [pc, #392]	; (800b0d4 <_strtod_l+0x5a4>)
 800af4a:	f1c5 050f 	rsb	r5, r5, #15
 800af4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af52:	4652      	mov	r2, sl
 800af54:	465b      	mov	r3, fp
 800af56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af5a:	f7f5 fb5d 	bl	8000618 <__aeabi_dmul>
 800af5e:	9b08      	ldr	r3, [sp, #32]
 800af60:	1b5d      	subs	r5, r3, r5
 800af62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af6a:	e7e3      	b.n	800af34 <_strtod_l+0x404>
 800af6c:	9b08      	ldr	r3, [sp, #32]
 800af6e:	3316      	adds	r3, #22
 800af70:	db0b      	blt.n	800af8a <_strtod_l+0x45a>
 800af72:	9b07      	ldr	r3, [sp, #28]
 800af74:	4a57      	ldr	r2, [pc, #348]	; (800b0d4 <_strtod_l+0x5a4>)
 800af76:	1b9e      	subs	r6, r3, r6
 800af78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800af7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af80:	4650      	mov	r0, sl
 800af82:	4659      	mov	r1, fp
 800af84:	f7f5 fc72 	bl	800086c <__aeabi_ddiv>
 800af88:	e7d6      	b.n	800af38 <_strtod_l+0x408>
 800af8a:	9b08      	ldr	r3, [sp, #32]
 800af8c:	eba5 0808 	sub.w	r8, r5, r8
 800af90:	4498      	add	r8, r3
 800af92:	f1b8 0f00 	cmp.w	r8, #0
 800af96:	dd71      	ble.n	800b07c <_strtod_l+0x54c>
 800af98:	f018 030f 	ands.w	r3, r8, #15
 800af9c:	d00a      	beq.n	800afb4 <_strtod_l+0x484>
 800af9e:	494d      	ldr	r1, [pc, #308]	; (800b0d4 <_strtod_l+0x5a4>)
 800afa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afa4:	4652      	mov	r2, sl
 800afa6:	465b      	mov	r3, fp
 800afa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afac:	f7f5 fb34 	bl	8000618 <__aeabi_dmul>
 800afb0:	4682      	mov	sl, r0
 800afb2:	468b      	mov	fp, r1
 800afb4:	f038 080f 	bics.w	r8, r8, #15
 800afb8:	d04d      	beq.n	800b056 <_strtod_l+0x526>
 800afba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800afbe:	dd22      	ble.n	800b006 <_strtod_l+0x4d6>
 800afc0:	2500      	movs	r5, #0
 800afc2:	462e      	mov	r6, r5
 800afc4:	9509      	str	r5, [sp, #36]	; 0x24
 800afc6:	9507      	str	r5, [sp, #28]
 800afc8:	2322      	movs	r3, #34	; 0x22
 800afca:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b0dc <_strtod_l+0x5ac>
 800afce:	6023      	str	r3, [r4, #0]
 800afd0:	f04f 0a00 	mov.w	sl, #0
 800afd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f43f adec 	beq.w	800abb4 <_strtod_l+0x84>
 800afdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800afde:	4620      	mov	r0, r4
 800afe0:	f002 f984 	bl	800d2ec <_Bfree>
 800afe4:	9907      	ldr	r1, [sp, #28]
 800afe6:	4620      	mov	r0, r4
 800afe8:	f002 f980 	bl	800d2ec <_Bfree>
 800afec:	4631      	mov	r1, r6
 800afee:	4620      	mov	r0, r4
 800aff0:	f002 f97c 	bl	800d2ec <_Bfree>
 800aff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aff6:	4620      	mov	r0, r4
 800aff8:	f002 f978 	bl	800d2ec <_Bfree>
 800affc:	4629      	mov	r1, r5
 800affe:	4620      	mov	r0, r4
 800b000:	f002 f974 	bl	800d2ec <_Bfree>
 800b004:	e5d6      	b.n	800abb4 <_strtod_l+0x84>
 800b006:	2300      	movs	r3, #0
 800b008:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b00c:	4650      	mov	r0, sl
 800b00e:	4659      	mov	r1, fp
 800b010:	4699      	mov	r9, r3
 800b012:	f1b8 0f01 	cmp.w	r8, #1
 800b016:	dc21      	bgt.n	800b05c <_strtod_l+0x52c>
 800b018:	b10b      	cbz	r3, 800b01e <_strtod_l+0x4ee>
 800b01a:	4682      	mov	sl, r0
 800b01c:	468b      	mov	fp, r1
 800b01e:	4b2e      	ldr	r3, [pc, #184]	; (800b0d8 <_strtod_l+0x5a8>)
 800b020:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b024:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b028:	4652      	mov	r2, sl
 800b02a:	465b      	mov	r3, fp
 800b02c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b030:	f7f5 faf2 	bl	8000618 <__aeabi_dmul>
 800b034:	4b29      	ldr	r3, [pc, #164]	; (800b0dc <_strtod_l+0x5ac>)
 800b036:	460a      	mov	r2, r1
 800b038:	400b      	ands	r3, r1
 800b03a:	4929      	ldr	r1, [pc, #164]	; (800b0e0 <_strtod_l+0x5b0>)
 800b03c:	428b      	cmp	r3, r1
 800b03e:	4682      	mov	sl, r0
 800b040:	d8be      	bhi.n	800afc0 <_strtod_l+0x490>
 800b042:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b046:	428b      	cmp	r3, r1
 800b048:	bf86      	itte	hi
 800b04a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b0e4 <_strtod_l+0x5b4>
 800b04e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b052:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b056:	2300      	movs	r3, #0
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	e081      	b.n	800b160 <_strtod_l+0x630>
 800b05c:	f018 0f01 	tst.w	r8, #1
 800b060:	d007      	beq.n	800b072 <_strtod_l+0x542>
 800b062:	4b1d      	ldr	r3, [pc, #116]	; (800b0d8 <_strtod_l+0x5a8>)
 800b064:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f7f5 fad4 	bl	8000618 <__aeabi_dmul>
 800b070:	2301      	movs	r3, #1
 800b072:	f109 0901 	add.w	r9, r9, #1
 800b076:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b07a:	e7ca      	b.n	800b012 <_strtod_l+0x4e2>
 800b07c:	d0eb      	beq.n	800b056 <_strtod_l+0x526>
 800b07e:	f1c8 0800 	rsb	r8, r8, #0
 800b082:	f018 020f 	ands.w	r2, r8, #15
 800b086:	d00a      	beq.n	800b09e <_strtod_l+0x56e>
 800b088:	4b12      	ldr	r3, [pc, #72]	; (800b0d4 <_strtod_l+0x5a4>)
 800b08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b08e:	4650      	mov	r0, sl
 800b090:	4659      	mov	r1, fp
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	f7f5 fbe9 	bl	800086c <__aeabi_ddiv>
 800b09a:	4682      	mov	sl, r0
 800b09c:	468b      	mov	fp, r1
 800b09e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b0a2:	d0d8      	beq.n	800b056 <_strtod_l+0x526>
 800b0a4:	f1b8 0f1f 	cmp.w	r8, #31
 800b0a8:	dd1e      	ble.n	800b0e8 <_strtod_l+0x5b8>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	462e      	mov	r6, r5
 800b0ae:	9509      	str	r5, [sp, #36]	; 0x24
 800b0b0:	9507      	str	r5, [sp, #28]
 800b0b2:	2322      	movs	r3, #34	; 0x22
 800b0b4:	f04f 0a00 	mov.w	sl, #0
 800b0b8:	f04f 0b00 	mov.w	fp, #0
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	e789      	b.n	800afd4 <_strtod_l+0x4a4>
 800b0c0:	0802822a 	.word	0x0802822a
 800b0c4:	0802826c 	.word	0x0802826c
 800b0c8:	08028222 	.word	0x08028222
 800b0cc:	080283ac 	.word	0x080283ac
 800b0d0:	08028207 	.word	0x08028207
 800b0d4:	080285a8 	.word	0x080285a8
 800b0d8:	08028580 	.word	0x08028580
 800b0dc:	7ff00000 	.word	0x7ff00000
 800b0e0:	7ca00000 	.word	0x7ca00000
 800b0e4:	7fefffff 	.word	0x7fefffff
 800b0e8:	f018 0310 	ands.w	r3, r8, #16
 800b0ec:	bf18      	it	ne
 800b0ee:	236a      	movne	r3, #106	; 0x6a
 800b0f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b4a8 <_strtod_l+0x978>
 800b0f4:	9304      	str	r3, [sp, #16]
 800b0f6:	4650      	mov	r0, sl
 800b0f8:	4659      	mov	r1, fp
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f018 0f01 	tst.w	r8, #1
 800b100:	d004      	beq.n	800b10c <_strtod_l+0x5dc>
 800b102:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b106:	f7f5 fa87 	bl	8000618 <__aeabi_dmul>
 800b10a:	2301      	movs	r3, #1
 800b10c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b110:	f109 0908 	add.w	r9, r9, #8
 800b114:	d1f2      	bne.n	800b0fc <_strtod_l+0x5cc>
 800b116:	b10b      	cbz	r3, 800b11c <_strtod_l+0x5ec>
 800b118:	4682      	mov	sl, r0
 800b11a:	468b      	mov	fp, r1
 800b11c:	9b04      	ldr	r3, [sp, #16]
 800b11e:	b1bb      	cbz	r3, 800b150 <_strtod_l+0x620>
 800b120:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b124:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b128:	2b00      	cmp	r3, #0
 800b12a:	4659      	mov	r1, fp
 800b12c:	dd10      	ble.n	800b150 <_strtod_l+0x620>
 800b12e:	2b1f      	cmp	r3, #31
 800b130:	f340 8128 	ble.w	800b384 <_strtod_l+0x854>
 800b134:	2b34      	cmp	r3, #52	; 0x34
 800b136:	bfde      	ittt	le
 800b138:	3b20      	suble	r3, #32
 800b13a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b13e:	fa02 f303 	lslle.w	r3, r2, r3
 800b142:	f04f 0a00 	mov.w	sl, #0
 800b146:	bfcc      	ite	gt
 800b148:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b14c:	ea03 0b01 	andle.w	fp, r3, r1
 800b150:	2200      	movs	r2, #0
 800b152:	2300      	movs	r3, #0
 800b154:	4650      	mov	r0, sl
 800b156:	4659      	mov	r1, fp
 800b158:	f7f5 fcc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d1a4      	bne.n	800b0aa <_strtod_l+0x57a>
 800b160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b166:	462b      	mov	r3, r5
 800b168:	463a      	mov	r2, r7
 800b16a:	4620      	mov	r0, r4
 800b16c:	f002 f92a 	bl	800d3c4 <__s2b>
 800b170:	9009      	str	r0, [sp, #36]	; 0x24
 800b172:	2800      	cmp	r0, #0
 800b174:	f43f af24 	beq.w	800afc0 <_strtod_l+0x490>
 800b178:	9b07      	ldr	r3, [sp, #28]
 800b17a:	1b9e      	subs	r6, r3, r6
 800b17c:	9b08      	ldr	r3, [sp, #32]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	bfb4      	ite	lt
 800b182:	4633      	movlt	r3, r6
 800b184:	2300      	movge	r3, #0
 800b186:	9310      	str	r3, [sp, #64]	; 0x40
 800b188:	9b08      	ldr	r3, [sp, #32]
 800b18a:	2500      	movs	r5, #0
 800b18c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b190:	9318      	str	r3, [sp, #96]	; 0x60
 800b192:	462e      	mov	r6, r5
 800b194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b196:	4620      	mov	r0, r4
 800b198:	6859      	ldr	r1, [r3, #4]
 800b19a:	f002 f867 	bl	800d26c <_Balloc>
 800b19e:	9007      	str	r0, [sp, #28]
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	f43f af11 	beq.w	800afc8 <_strtod_l+0x498>
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	691a      	ldr	r2, [r3, #16]
 800b1aa:	3202      	adds	r2, #2
 800b1ac:	f103 010c 	add.w	r1, r3, #12
 800b1b0:	0092      	lsls	r2, r2, #2
 800b1b2:	300c      	adds	r0, #12
 800b1b4:	f7fe fbd6 	bl	8009964 <memcpy>
 800b1b8:	ec4b ab10 	vmov	d0, sl, fp
 800b1bc:	aa20      	add	r2, sp, #128	; 0x80
 800b1be:	a91f      	add	r1, sp, #124	; 0x7c
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b1c6:	f002 fc39 	bl	800da3c <__d2b>
 800b1ca:	901e      	str	r0, [sp, #120]	; 0x78
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f43f aefb 	beq.w	800afc8 <_strtod_l+0x498>
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f002 f98f 	bl	800d4f8 <__i2b>
 800b1da:	4606      	mov	r6, r0
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	f43f aef3 	beq.w	800afc8 <_strtod_l+0x498>
 800b1e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1e4:	9904      	ldr	r1, [sp, #16]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	bfab      	itete	ge
 800b1ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b1ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b1ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b1f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b1f4:	bfac      	ite	ge
 800b1f6:	eb03 0902 	addge.w	r9, r3, r2
 800b1fa:	1ad7      	sublt	r7, r2, r3
 800b1fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b1fe:	eba3 0801 	sub.w	r8, r3, r1
 800b202:	4490      	add	r8, r2
 800b204:	4ba3      	ldr	r3, [pc, #652]	; (800b494 <_strtod_l+0x964>)
 800b206:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b20a:	4598      	cmp	r8, r3
 800b20c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b210:	f280 80cc 	bge.w	800b3ac <_strtod_l+0x87c>
 800b214:	eba3 0308 	sub.w	r3, r3, r8
 800b218:	2b1f      	cmp	r3, #31
 800b21a:	eba2 0203 	sub.w	r2, r2, r3
 800b21e:	f04f 0101 	mov.w	r1, #1
 800b222:	f300 80b6 	bgt.w	800b392 <_strtod_l+0x862>
 800b226:	fa01 f303 	lsl.w	r3, r1, r3
 800b22a:	9311      	str	r3, [sp, #68]	; 0x44
 800b22c:	2300      	movs	r3, #0
 800b22e:	930c      	str	r3, [sp, #48]	; 0x30
 800b230:	eb09 0802 	add.w	r8, r9, r2
 800b234:	9b04      	ldr	r3, [sp, #16]
 800b236:	45c1      	cmp	r9, r8
 800b238:	4417      	add	r7, r2
 800b23a:	441f      	add	r7, r3
 800b23c:	464b      	mov	r3, r9
 800b23e:	bfa8      	it	ge
 800b240:	4643      	movge	r3, r8
 800b242:	42bb      	cmp	r3, r7
 800b244:	bfa8      	it	ge
 800b246:	463b      	movge	r3, r7
 800b248:	2b00      	cmp	r3, #0
 800b24a:	bfc2      	ittt	gt
 800b24c:	eba8 0803 	subgt.w	r8, r8, r3
 800b250:	1aff      	subgt	r7, r7, r3
 800b252:	eba9 0903 	subgt.w	r9, r9, r3
 800b256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b258:	2b00      	cmp	r3, #0
 800b25a:	dd17      	ble.n	800b28c <_strtod_l+0x75c>
 800b25c:	4631      	mov	r1, r6
 800b25e:	461a      	mov	r2, r3
 800b260:	4620      	mov	r0, r4
 800b262:	f002 fa05 	bl	800d670 <__pow5mult>
 800b266:	4606      	mov	r6, r0
 800b268:	2800      	cmp	r0, #0
 800b26a:	f43f aead 	beq.w	800afc8 <_strtod_l+0x498>
 800b26e:	4601      	mov	r1, r0
 800b270:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b272:	4620      	mov	r0, r4
 800b274:	f002 f956 	bl	800d524 <__multiply>
 800b278:	900f      	str	r0, [sp, #60]	; 0x3c
 800b27a:	2800      	cmp	r0, #0
 800b27c:	f43f aea4 	beq.w	800afc8 <_strtod_l+0x498>
 800b280:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b282:	4620      	mov	r0, r4
 800b284:	f002 f832 	bl	800d2ec <_Bfree>
 800b288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b28a:	931e      	str	r3, [sp, #120]	; 0x78
 800b28c:	f1b8 0f00 	cmp.w	r8, #0
 800b290:	f300 8091 	bgt.w	800b3b6 <_strtod_l+0x886>
 800b294:	9b08      	ldr	r3, [sp, #32]
 800b296:	2b00      	cmp	r3, #0
 800b298:	dd08      	ble.n	800b2ac <_strtod_l+0x77c>
 800b29a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b29c:	9907      	ldr	r1, [sp, #28]
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f002 f9e6 	bl	800d670 <__pow5mult>
 800b2a4:	9007      	str	r0, [sp, #28]
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	f43f ae8e 	beq.w	800afc8 <_strtod_l+0x498>
 800b2ac:	2f00      	cmp	r7, #0
 800b2ae:	dd08      	ble.n	800b2c2 <_strtod_l+0x792>
 800b2b0:	9907      	ldr	r1, [sp, #28]
 800b2b2:	463a      	mov	r2, r7
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f002 fa35 	bl	800d724 <__lshift>
 800b2ba:	9007      	str	r0, [sp, #28]
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f43f ae83 	beq.w	800afc8 <_strtod_l+0x498>
 800b2c2:	f1b9 0f00 	cmp.w	r9, #0
 800b2c6:	dd08      	ble.n	800b2da <_strtod_l+0x7aa>
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	464a      	mov	r2, r9
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f002 fa29 	bl	800d724 <__lshift>
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f43f ae77 	beq.w	800afc8 <_strtod_l+0x498>
 800b2da:	9a07      	ldr	r2, [sp, #28]
 800b2dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f002 faa8 	bl	800d834 <__mdiff>
 800b2e4:	4605      	mov	r5, r0
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f43f ae6e 	beq.w	800afc8 <_strtod_l+0x498>
 800b2ec:	68c3      	ldr	r3, [r0, #12]
 800b2ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	60c3      	str	r3, [r0, #12]
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	f002 fa81 	bl	800d7fc <__mcmp>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	da65      	bge.n	800b3ca <_strtod_l+0x89a>
 800b2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b300:	ea53 030a 	orrs.w	r3, r3, sl
 800b304:	f040 8087 	bne.w	800b416 <_strtod_l+0x8e6>
 800b308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 8082 	bne.w	800b416 <_strtod_l+0x8e6>
 800b312:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b316:	0d1b      	lsrs	r3, r3, #20
 800b318:	051b      	lsls	r3, r3, #20
 800b31a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b31e:	d97a      	bls.n	800b416 <_strtod_l+0x8e6>
 800b320:	696b      	ldr	r3, [r5, #20]
 800b322:	b913      	cbnz	r3, 800b32a <_strtod_l+0x7fa>
 800b324:	692b      	ldr	r3, [r5, #16]
 800b326:	2b01      	cmp	r3, #1
 800b328:	dd75      	ble.n	800b416 <_strtod_l+0x8e6>
 800b32a:	4629      	mov	r1, r5
 800b32c:	2201      	movs	r2, #1
 800b32e:	4620      	mov	r0, r4
 800b330:	f002 f9f8 	bl	800d724 <__lshift>
 800b334:	4631      	mov	r1, r6
 800b336:	4605      	mov	r5, r0
 800b338:	f002 fa60 	bl	800d7fc <__mcmp>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dd6a      	ble.n	800b416 <_strtod_l+0x8e6>
 800b340:	9904      	ldr	r1, [sp, #16]
 800b342:	4a55      	ldr	r2, [pc, #340]	; (800b498 <_strtod_l+0x968>)
 800b344:	465b      	mov	r3, fp
 800b346:	2900      	cmp	r1, #0
 800b348:	f000 8085 	beq.w	800b456 <_strtod_l+0x926>
 800b34c:	ea02 010b 	and.w	r1, r2, fp
 800b350:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b354:	dc7f      	bgt.n	800b456 <_strtod_l+0x926>
 800b356:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b35a:	f77f aeaa 	ble.w	800b0b2 <_strtod_l+0x582>
 800b35e:	4a4f      	ldr	r2, [pc, #316]	; (800b49c <_strtod_l+0x96c>)
 800b360:	2300      	movs	r3, #0
 800b362:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b366:	4650      	mov	r0, sl
 800b368:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b36c:	4659      	mov	r1, fp
 800b36e:	f7f5 f953 	bl	8000618 <__aeabi_dmul>
 800b372:	460b      	mov	r3, r1
 800b374:	4303      	orrs	r3, r0
 800b376:	bf08      	it	eq
 800b378:	2322      	moveq	r3, #34	; 0x22
 800b37a:	4682      	mov	sl, r0
 800b37c:	468b      	mov	fp, r1
 800b37e:	bf08      	it	eq
 800b380:	6023      	streq	r3, [r4, #0]
 800b382:	e62b      	b.n	800afdc <_strtod_l+0x4ac>
 800b384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b388:	fa02 f303 	lsl.w	r3, r2, r3
 800b38c:	ea03 0a0a 	and.w	sl, r3, sl
 800b390:	e6de      	b.n	800b150 <_strtod_l+0x620>
 800b392:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b396:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b39a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b39e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b3a2:	fa01 f308 	lsl.w	r3, r1, r8
 800b3a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b3a8:	9111      	str	r1, [sp, #68]	; 0x44
 800b3aa:	e741      	b.n	800b230 <_strtod_l+0x700>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	9311      	str	r3, [sp, #68]	; 0x44
 800b3b4:	e73c      	b.n	800b230 <_strtod_l+0x700>
 800b3b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b3b8:	4642      	mov	r2, r8
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f002 f9b2 	bl	800d724 <__lshift>
 800b3c0:	901e      	str	r0, [sp, #120]	; 0x78
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	f47f af66 	bne.w	800b294 <_strtod_l+0x764>
 800b3c8:	e5fe      	b.n	800afc8 <_strtod_l+0x498>
 800b3ca:	465f      	mov	r7, fp
 800b3cc:	d16e      	bne.n	800b4ac <_strtod_l+0x97c>
 800b3ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3d4:	b342      	cbz	r2, 800b428 <_strtod_l+0x8f8>
 800b3d6:	4a32      	ldr	r2, [pc, #200]	; (800b4a0 <_strtod_l+0x970>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d128      	bne.n	800b42e <_strtod_l+0x8fe>
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	4650      	mov	r0, sl
 800b3e0:	b1eb      	cbz	r3, 800b41e <_strtod_l+0x8ee>
 800b3e2:	4a2d      	ldr	r2, [pc, #180]	; (800b498 <_strtod_l+0x968>)
 800b3e4:	403a      	ands	r2, r7
 800b3e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b3ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b3ee:	d819      	bhi.n	800b424 <_strtod_l+0x8f4>
 800b3f0:	0d12      	lsrs	r2, r2, #20
 800b3f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	d117      	bne.n	800b42e <_strtod_l+0x8fe>
 800b3fe:	4b29      	ldr	r3, [pc, #164]	; (800b4a4 <_strtod_l+0x974>)
 800b400:	429f      	cmp	r7, r3
 800b402:	d102      	bne.n	800b40a <_strtod_l+0x8da>
 800b404:	3001      	adds	r0, #1
 800b406:	f43f addf 	beq.w	800afc8 <_strtod_l+0x498>
 800b40a:	4b23      	ldr	r3, [pc, #140]	; (800b498 <_strtod_l+0x968>)
 800b40c:	403b      	ands	r3, r7
 800b40e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b412:	f04f 0a00 	mov.w	sl, #0
 800b416:	9b04      	ldr	r3, [sp, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1a0      	bne.n	800b35e <_strtod_l+0x82e>
 800b41c:	e5de      	b.n	800afdc <_strtod_l+0x4ac>
 800b41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b422:	e7ea      	b.n	800b3fa <_strtod_l+0x8ca>
 800b424:	460b      	mov	r3, r1
 800b426:	e7e8      	b.n	800b3fa <_strtod_l+0x8ca>
 800b428:	ea53 030a 	orrs.w	r3, r3, sl
 800b42c:	d088      	beq.n	800b340 <_strtod_l+0x810>
 800b42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b430:	b1db      	cbz	r3, 800b46a <_strtod_l+0x93a>
 800b432:	423b      	tst	r3, r7
 800b434:	d0ef      	beq.n	800b416 <_strtod_l+0x8e6>
 800b436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b438:	9a04      	ldr	r2, [sp, #16]
 800b43a:	4650      	mov	r0, sl
 800b43c:	4659      	mov	r1, fp
 800b43e:	b1c3      	cbz	r3, 800b472 <_strtod_l+0x942>
 800b440:	f7ff fb5a 	bl	800aaf8 <sulp>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b44c:	f7f4 ff2e 	bl	80002ac <__adddf3>
 800b450:	4682      	mov	sl, r0
 800b452:	468b      	mov	fp, r1
 800b454:	e7df      	b.n	800b416 <_strtod_l+0x8e6>
 800b456:	4013      	ands	r3, r2
 800b458:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b45c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b460:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b464:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b468:	e7d5      	b.n	800b416 <_strtod_l+0x8e6>
 800b46a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b46c:	ea13 0f0a 	tst.w	r3, sl
 800b470:	e7e0      	b.n	800b434 <_strtod_l+0x904>
 800b472:	f7ff fb41 	bl	800aaf8 <sulp>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b47e:	f7f4 ff13 	bl	80002a8 <__aeabi_dsub>
 800b482:	2200      	movs	r2, #0
 800b484:	2300      	movs	r3, #0
 800b486:	4682      	mov	sl, r0
 800b488:	468b      	mov	fp, r1
 800b48a:	f7f5 fb2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d0c1      	beq.n	800b416 <_strtod_l+0x8e6>
 800b492:	e60e      	b.n	800b0b2 <_strtod_l+0x582>
 800b494:	fffffc02 	.word	0xfffffc02
 800b498:	7ff00000 	.word	0x7ff00000
 800b49c:	39500000 	.word	0x39500000
 800b4a0:	000fffff 	.word	0x000fffff
 800b4a4:	7fefffff 	.word	0x7fefffff
 800b4a8:	08028280 	.word	0x08028280
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f002 fb20 	bl	800daf4 <__ratio>
 800b4b4:	ec59 8b10 	vmov	r8, r9, d0
 800b4b8:	ee10 0a10 	vmov	r0, s0
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	f7f5 fb24 	bl	8000b10 <__aeabi_dcmple>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d07c      	beq.n	800b5c6 <_strtod_l+0xa96>
 800b4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d04c      	beq.n	800b56c <_strtod_l+0xa3c>
 800b4d2:	4b95      	ldr	r3, [pc, #596]	; (800b728 <_strtod_l+0xbf8>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b4da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b728 <_strtod_l+0xbf8>
 800b4de:	f04f 0800 	mov.w	r8, #0
 800b4e2:	4b92      	ldr	r3, [pc, #584]	; (800b72c <_strtod_l+0xbfc>)
 800b4e4:	403b      	ands	r3, r7
 800b4e6:	9311      	str	r3, [sp, #68]	; 0x44
 800b4e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4ea:	4b91      	ldr	r3, [pc, #580]	; (800b730 <_strtod_l+0xc00>)
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	f040 80b2 	bne.w	800b656 <_strtod_l+0xb26>
 800b4f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b4f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b4fe:	ec4b ab10 	vmov	d0, sl, fp
 800b502:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b506:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b50a:	f002 fa1b 	bl	800d944 <__ulp>
 800b50e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b512:	ec53 2b10 	vmov	r2, r3, d0
 800b516:	f7f5 f87f 	bl	8000618 <__aeabi_dmul>
 800b51a:	4652      	mov	r2, sl
 800b51c:	465b      	mov	r3, fp
 800b51e:	f7f4 fec5 	bl	80002ac <__adddf3>
 800b522:	460b      	mov	r3, r1
 800b524:	4981      	ldr	r1, [pc, #516]	; (800b72c <_strtod_l+0xbfc>)
 800b526:	4a83      	ldr	r2, [pc, #524]	; (800b734 <_strtod_l+0xc04>)
 800b528:	4019      	ands	r1, r3
 800b52a:	4291      	cmp	r1, r2
 800b52c:	4682      	mov	sl, r0
 800b52e:	d95e      	bls.n	800b5ee <_strtod_l+0xabe>
 800b530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b532:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b536:	4293      	cmp	r3, r2
 800b538:	d103      	bne.n	800b542 <_strtod_l+0xa12>
 800b53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b53c:	3301      	adds	r3, #1
 800b53e:	f43f ad43 	beq.w	800afc8 <_strtod_l+0x498>
 800b542:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b740 <_strtod_l+0xc10>
 800b546:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b54a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b54c:	4620      	mov	r0, r4
 800b54e:	f001 fecd 	bl	800d2ec <_Bfree>
 800b552:	9907      	ldr	r1, [sp, #28]
 800b554:	4620      	mov	r0, r4
 800b556:	f001 fec9 	bl	800d2ec <_Bfree>
 800b55a:	4631      	mov	r1, r6
 800b55c:	4620      	mov	r0, r4
 800b55e:	f001 fec5 	bl	800d2ec <_Bfree>
 800b562:	4629      	mov	r1, r5
 800b564:	4620      	mov	r0, r4
 800b566:	f001 fec1 	bl	800d2ec <_Bfree>
 800b56a:	e613      	b.n	800b194 <_strtod_l+0x664>
 800b56c:	f1ba 0f00 	cmp.w	sl, #0
 800b570:	d11b      	bne.n	800b5aa <_strtod_l+0xa7a>
 800b572:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b576:	b9f3      	cbnz	r3, 800b5b6 <_strtod_l+0xa86>
 800b578:	4b6b      	ldr	r3, [pc, #428]	; (800b728 <_strtod_l+0xbf8>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	4640      	mov	r0, r8
 800b57e:	4649      	mov	r1, r9
 800b580:	f7f5 fabc 	bl	8000afc <__aeabi_dcmplt>
 800b584:	b9d0      	cbnz	r0, 800b5bc <_strtod_l+0xa8c>
 800b586:	4640      	mov	r0, r8
 800b588:	4649      	mov	r1, r9
 800b58a:	4b6b      	ldr	r3, [pc, #428]	; (800b738 <_strtod_l+0xc08>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	f7f5 f843 	bl	8000618 <__aeabi_dmul>
 800b592:	4680      	mov	r8, r0
 800b594:	4689      	mov	r9, r1
 800b596:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b59a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b59e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b5a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b5a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b5a8:	e79b      	b.n	800b4e2 <_strtod_l+0x9b2>
 800b5aa:	f1ba 0f01 	cmp.w	sl, #1
 800b5ae:	d102      	bne.n	800b5b6 <_strtod_l+0xa86>
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	f43f ad7e 	beq.w	800b0b2 <_strtod_l+0x582>
 800b5b6:	4b61      	ldr	r3, [pc, #388]	; (800b73c <_strtod_l+0xc0c>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	e78c      	b.n	800b4d6 <_strtod_l+0x9a6>
 800b5bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b738 <_strtod_l+0xc08>
 800b5c0:	f04f 0800 	mov.w	r8, #0
 800b5c4:	e7e7      	b.n	800b596 <_strtod_l+0xa66>
 800b5c6:	4b5c      	ldr	r3, [pc, #368]	; (800b738 <_strtod_l+0xc08>)
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f7f5 f823 	bl	8000618 <__aeabi_dmul>
 800b5d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5d4:	4680      	mov	r8, r0
 800b5d6:	4689      	mov	r9, r1
 800b5d8:	b933      	cbnz	r3, 800b5e8 <_strtod_l+0xab8>
 800b5da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5de:	9012      	str	r0, [sp, #72]	; 0x48
 800b5e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b5e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b5e6:	e7dd      	b.n	800b5a4 <_strtod_l+0xa74>
 800b5e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b5ec:	e7f9      	b.n	800b5e2 <_strtod_l+0xab2>
 800b5ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1a8      	bne.n	800b54a <_strtod_l+0xa1a>
 800b5f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b5fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b5fe:	0d1b      	lsrs	r3, r3, #20
 800b600:	051b      	lsls	r3, r3, #20
 800b602:	429a      	cmp	r2, r3
 800b604:	d1a1      	bne.n	800b54a <_strtod_l+0xa1a>
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f5 fb65 	bl	8000cd8 <__aeabi_d2lz>
 800b60e:	f7f4 ffd5 	bl	80005bc <__aeabi_l2d>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4640      	mov	r0, r8
 800b618:	4649      	mov	r1, r9
 800b61a:	f7f4 fe45 	bl	80002a8 <__aeabi_dsub>
 800b61e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b620:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b624:	ea43 030a 	orr.w	r3, r3, sl
 800b628:	4313      	orrs	r3, r2
 800b62a:	4680      	mov	r8, r0
 800b62c:	4689      	mov	r9, r1
 800b62e:	d053      	beq.n	800b6d8 <_strtod_l+0xba8>
 800b630:	a335      	add	r3, pc, #212	; (adr r3, 800b708 <_strtod_l+0xbd8>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f7f5 fa61 	bl	8000afc <__aeabi_dcmplt>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	f47f acce 	bne.w	800afdc <_strtod_l+0x4ac>
 800b640:	a333      	add	r3, pc, #204	; (adr r3, 800b710 <_strtod_l+0xbe0>)
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	4640      	mov	r0, r8
 800b648:	4649      	mov	r1, r9
 800b64a:	f7f5 fa75 	bl	8000b38 <__aeabi_dcmpgt>
 800b64e:	2800      	cmp	r0, #0
 800b650:	f43f af7b 	beq.w	800b54a <_strtod_l+0xa1a>
 800b654:	e4c2      	b.n	800afdc <_strtod_l+0x4ac>
 800b656:	9b04      	ldr	r3, [sp, #16]
 800b658:	b333      	cbz	r3, 800b6a8 <_strtod_l+0xb78>
 800b65a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b65c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b660:	d822      	bhi.n	800b6a8 <_strtod_l+0xb78>
 800b662:	a32d      	add	r3, pc, #180	; (adr r3, 800b718 <_strtod_l+0xbe8>)
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	4640      	mov	r0, r8
 800b66a:	4649      	mov	r1, r9
 800b66c:	f7f5 fa50 	bl	8000b10 <__aeabi_dcmple>
 800b670:	b1a0      	cbz	r0, 800b69c <_strtod_l+0xb6c>
 800b672:	4649      	mov	r1, r9
 800b674:	4640      	mov	r0, r8
 800b676:	f7f5 faa7 	bl	8000bc8 <__aeabi_d2uiz>
 800b67a:	2801      	cmp	r0, #1
 800b67c:	bf38      	it	cc
 800b67e:	2001      	movcc	r0, #1
 800b680:	f7f4 ff50 	bl	8000524 <__aeabi_ui2d>
 800b684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b686:	4680      	mov	r8, r0
 800b688:	4689      	mov	r9, r1
 800b68a:	bb13      	cbnz	r3, 800b6d2 <_strtod_l+0xba2>
 800b68c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b690:	9014      	str	r0, [sp, #80]	; 0x50
 800b692:	9315      	str	r3, [sp, #84]	; 0x54
 800b694:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b698:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b69c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b69e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b6a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b6b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b6b4:	f002 f946 	bl	800d944 <__ulp>
 800b6b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6bc:	ec53 2b10 	vmov	r2, r3, d0
 800b6c0:	f7f4 ffaa 	bl	8000618 <__aeabi_dmul>
 800b6c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b6c8:	f7f4 fdf0 	bl	80002ac <__adddf3>
 800b6cc:	4682      	mov	sl, r0
 800b6ce:	468b      	mov	fp, r1
 800b6d0:	e78f      	b.n	800b5f2 <_strtod_l+0xac2>
 800b6d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b6d6:	e7dd      	b.n	800b694 <_strtod_l+0xb64>
 800b6d8:	a311      	add	r3, pc, #68	; (adr r3, 800b720 <_strtod_l+0xbf0>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f5 fa0d 	bl	8000afc <__aeabi_dcmplt>
 800b6e2:	e7b4      	b.n	800b64e <_strtod_l+0xb1e>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	930e      	str	r3, [sp, #56]	; 0x38
 800b6e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6ec:	6013      	str	r3, [r2, #0]
 800b6ee:	f7ff ba65 	b.w	800abbc <_strtod_l+0x8c>
 800b6f2:	2b65      	cmp	r3, #101	; 0x65
 800b6f4:	f43f ab5d 	beq.w	800adb2 <_strtod_l+0x282>
 800b6f8:	2b45      	cmp	r3, #69	; 0x45
 800b6fa:	f43f ab5a 	beq.w	800adb2 <_strtod_l+0x282>
 800b6fe:	2201      	movs	r2, #1
 800b700:	f7ff bb92 	b.w	800ae28 <_strtod_l+0x2f8>
 800b704:	f3af 8000 	nop.w
 800b708:	94a03595 	.word	0x94a03595
 800b70c:	3fdfffff 	.word	0x3fdfffff
 800b710:	35afe535 	.word	0x35afe535
 800b714:	3fe00000 	.word	0x3fe00000
 800b718:	ffc00000 	.word	0xffc00000
 800b71c:	41dfffff 	.word	0x41dfffff
 800b720:	94a03595 	.word	0x94a03595
 800b724:	3fcfffff 	.word	0x3fcfffff
 800b728:	3ff00000 	.word	0x3ff00000
 800b72c:	7ff00000 	.word	0x7ff00000
 800b730:	7fe00000 	.word	0x7fe00000
 800b734:	7c9fffff 	.word	0x7c9fffff
 800b738:	3fe00000 	.word	0x3fe00000
 800b73c:	bff00000 	.word	0xbff00000
 800b740:	7fefffff 	.word	0x7fefffff

0800b744 <_strtod_r>:
 800b744:	4b01      	ldr	r3, [pc, #4]	; (800b74c <_strtod_r+0x8>)
 800b746:	f7ff b9f3 	b.w	800ab30 <_strtod_l>
 800b74a:	bf00      	nop
 800b74c:	20000e6c 	.word	0x20000e6c

0800b750 <_strtol_l.isra.0>:
 800b750:	2b01      	cmp	r3, #1
 800b752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b756:	d001      	beq.n	800b75c <_strtol_l.isra.0+0xc>
 800b758:	2b24      	cmp	r3, #36	; 0x24
 800b75a:	d906      	bls.n	800b76a <_strtol_l.isra.0+0x1a>
 800b75c:	f7fe f8be 	bl	80098dc <__errno>
 800b760:	2316      	movs	r3, #22
 800b762:	6003      	str	r3, [r0, #0]
 800b764:	2000      	movs	r0, #0
 800b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76a:	4f3a      	ldr	r7, [pc, #232]	; (800b854 <_strtol_l.isra.0+0x104>)
 800b76c:	468e      	mov	lr, r1
 800b76e:	4676      	mov	r6, lr
 800b770:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b774:	5de5      	ldrb	r5, [r4, r7]
 800b776:	f015 0508 	ands.w	r5, r5, #8
 800b77a:	d1f8      	bne.n	800b76e <_strtol_l.isra.0+0x1e>
 800b77c:	2c2d      	cmp	r4, #45	; 0x2d
 800b77e:	d134      	bne.n	800b7ea <_strtol_l.isra.0+0x9a>
 800b780:	f89e 4000 	ldrb.w	r4, [lr]
 800b784:	f04f 0801 	mov.w	r8, #1
 800b788:	f106 0e02 	add.w	lr, r6, #2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d05c      	beq.n	800b84a <_strtol_l.isra.0+0xfa>
 800b790:	2b10      	cmp	r3, #16
 800b792:	d10c      	bne.n	800b7ae <_strtol_l.isra.0+0x5e>
 800b794:	2c30      	cmp	r4, #48	; 0x30
 800b796:	d10a      	bne.n	800b7ae <_strtol_l.isra.0+0x5e>
 800b798:	f89e 4000 	ldrb.w	r4, [lr]
 800b79c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b7a0:	2c58      	cmp	r4, #88	; 0x58
 800b7a2:	d14d      	bne.n	800b840 <_strtol_l.isra.0+0xf0>
 800b7a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b7a8:	2310      	movs	r3, #16
 800b7aa:	f10e 0e02 	add.w	lr, lr, #2
 800b7ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b7b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b7b6:	2600      	movs	r6, #0
 800b7b8:	fbbc f9f3 	udiv	r9, ip, r3
 800b7bc:	4635      	mov	r5, r6
 800b7be:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b7c6:	2f09      	cmp	r7, #9
 800b7c8:	d818      	bhi.n	800b7fc <_strtol_l.isra.0+0xac>
 800b7ca:	463c      	mov	r4, r7
 800b7cc:	42a3      	cmp	r3, r4
 800b7ce:	dd24      	ble.n	800b81a <_strtol_l.isra.0+0xca>
 800b7d0:	2e00      	cmp	r6, #0
 800b7d2:	db1f      	blt.n	800b814 <_strtol_l.isra.0+0xc4>
 800b7d4:	45a9      	cmp	r9, r5
 800b7d6:	d31d      	bcc.n	800b814 <_strtol_l.isra.0+0xc4>
 800b7d8:	d101      	bne.n	800b7de <_strtol_l.isra.0+0x8e>
 800b7da:	45a2      	cmp	sl, r4
 800b7dc:	db1a      	blt.n	800b814 <_strtol_l.isra.0+0xc4>
 800b7de:	fb05 4503 	mla	r5, r5, r3, r4
 800b7e2:	2601      	movs	r6, #1
 800b7e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b7e8:	e7eb      	b.n	800b7c2 <_strtol_l.isra.0+0x72>
 800b7ea:	2c2b      	cmp	r4, #43	; 0x2b
 800b7ec:	bf08      	it	eq
 800b7ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b7f2:	46a8      	mov	r8, r5
 800b7f4:	bf08      	it	eq
 800b7f6:	f106 0e02 	addeq.w	lr, r6, #2
 800b7fa:	e7c7      	b.n	800b78c <_strtol_l.isra.0+0x3c>
 800b7fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b800:	2f19      	cmp	r7, #25
 800b802:	d801      	bhi.n	800b808 <_strtol_l.isra.0+0xb8>
 800b804:	3c37      	subs	r4, #55	; 0x37
 800b806:	e7e1      	b.n	800b7cc <_strtol_l.isra.0+0x7c>
 800b808:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b80c:	2f19      	cmp	r7, #25
 800b80e:	d804      	bhi.n	800b81a <_strtol_l.isra.0+0xca>
 800b810:	3c57      	subs	r4, #87	; 0x57
 800b812:	e7db      	b.n	800b7cc <_strtol_l.isra.0+0x7c>
 800b814:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b818:	e7e4      	b.n	800b7e4 <_strtol_l.isra.0+0x94>
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	da05      	bge.n	800b82a <_strtol_l.isra.0+0xda>
 800b81e:	2322      	movs	r3, #34	; 0x22
 800b820:	6003      	str	r3, [r0, #0]
 800b822:	4665      	mov	r5, ip
 800b824:	b942      	cbnz	r2, 800b838 <_strtol_l.isra.0+0xe8>
 800b826:	4628      	mov	r0, r5
 800b828:	e79d      	b.n	800b766 <_strtol_l.isra.0+0x16>
 800b82a:	f1b8 0f00 	cmp.w	r8, #0
 800b82e:	d000      	beq.n	800b832 <_strtol_l.isra.0+0xe2>
 800b830:	426d      	negs	r5, r5
 800b832:	2a00      	cmp	r2, #0
 800b834:	d0f7      	beq.n	800b826 <_strtol_l.isra.0+0xd6>
 800b836:	b10e      	cbz	r6, 800b83c <_strtol_l.isra.0+0xec>
 800b838:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800b83c:	6011      	str	r1, [r2, #0]
 800b83e:	e7f2      	b.n	800b826 <_strtol_l.isra.0+0xd6>
 800b840:	2430      	movs	r4, #48	; 0x30
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1b3      	bne.n	800b7ae <_strtol_l.isra.0+0x5e>
 800b846:	2308      	movs	r3, #8
 800b848:	e7b1      	b.n	800b7ae <_strtol_l.isra.0+0x5e>
 800b84a:	2c30      	cmp	r4, #48	; 0x30
 800b84c:	d0a4      	beq.n	800b798 <_strtol_l.isra.0+0x48>
 800b84e:	230a      	movs	r3, #10
 800b850:	e7ad      	b.n	800b7ae <_strtol_l.isra.0+0x5e>
 800b852:	bf00      	nop
 800b854:	080282a9 	.word	0x080282a9

0800b858 <_strtol_r>:
 800b858:	f7ff bf7a 	b.w	800b750 <_strtol_l.isra.0>

0800b85c <__swbuf_r>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	460e      	mov	r6, r1
 800b860:	4614      	mov	r4, r2
 800b862:	4605      	mov	r5, r0
 800b864:	b118      	cbz	r0, 800b86e <__swbuf_r+0x12>
 800b866:	6983      	ldr	r3, [r0, #24]
 800b868:	b90b      	cbnz	r3, 800b86e <__swbuf_r+0x12>
 800b86a:	f001 f84f 	bl	800c90c <__sinit>
 800b86e:	4b21      	ldr	r3, [pc, #132]	; (800b8f4 <__swbuf_r+0x98>)
 800b870:	429c      	cmp	r4, r3
 800b872:	d12b      	bne.n	800b8cc <__swbuf_r+0x70>
 800b874:	686c      	ldr	r4, [r5, #4]
 800b876:	69a3      	ldr	r3, [r4, #24]
 800b878:	60a3      	str	r3, [r4, #8]
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	071a      	lsls	r2, r3, #28
 800b87e:	d52f      	bpl.n	800b8e0 <__swbuf_r+0x84>
 800b880:	6923      	ldr	r3, [r4, #16]
 800b882:	b36b      	cbz	r3, 800b8e0 <__swbuf_r+0x84>
 800b884:	6923      	ldr	r3, [r4, #16]
 800b886:	6820      	ldr	r0, [r4, #0]
 800b888:	1ac0      	subs	r0, r0, r3
 800b88a:	6963      	ldr	r3, [r4, #20]
 800b88c:	b2f6      	uxtb	r6, r6
 800b88e:	4283      	cmp	r3, r0
 800b890:	4637      	mov	r7, r6
 800b892:	dc04      	bgt.n	800b89e <__swbuf_r+0x42>
 800b894:	4621      	mov	r1, r4
 800b896:	4628      	mov	r0, r5
 800b898:	f000 ffa4 	bl	800c7e4 <_fflush_r>
 800b89c:	bb30      	cbnz	r0, 800b8ec <__swbuf_r+0x90>
 800b89e:	68a3      	ldr	r3, [r4, #8]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	60a3      	str	r3, [r4, #8]
 800b8a4:	6823      	ldr	r3, [r4, #0]
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	6022      	str	r2, [r4, #0]
 800b8aa:	701e      	strb	r6, [r3, #0]
 800b8ac:	6963      	ldr	r3, [r4, #20]
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	4283      	cmp	r3, r0
 800b8b2:	d004      	beq.n	800b8be <__swbuf_r+0x62>
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	07db      	lsls	r3, r3, #31
 800b8b8:	d506      	bpl.n	800b8c8 <__swbuf_r+0x6c>
 800b8ba:	2e0a      	cmp	r6, #10
 800b8bc:	d104      	bne.n	800b8c8 <__swbuf_r+0x6c>
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f000 ff8f 	bl	800c7e4 <_fflush_r>
 800b8c6:	b988      	cbnz	r0, 800b8ec <__swbuf_r+0x90>
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8cc:	4b0a      	ldr	r3, [pc, #40]	; (800b8f8 <__swbuf_r+0x9c>)
 800b8ce:	429c      	cmp	r4, r3
 800b8d0:	d101      	bne.n	800b8d6 <__swbuf_r+0x7a>
 800b8d2:	68ac      	ldr	r4, [r5, #8]
 800b8d4:	e7cf      	b.n	800b876 <__swbuf_r+0x1a>
 800b8d6:	4b09      	ldr	r3, [pc, #36]	; (800b8fc <__swbuf_r+0xa0>)
 800b8d8:	429c      	cmp	r4, r3
 800b8da:	bf08      	it	eq
 800b8dc:	68ec      	ldreq	r4, [r5, #12]
 800b8de:	e7ca      	b.n	800b876 <__swbuf_r+0x1a>
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f000 f80c 	bl	800b900 <__swsetup_r>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d0cb      	beq.n	800b884 <__swbuf_r+0x28>
 800b8ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b8f0:	e7ea      	b.n	800b8c8 <__swbuf_r+0x6c>
 800b8f2:	bf00      	nop
 800b8f4:	08028460 	.word	0x08028460
 800b8f8:	08028480 	.word	0x08028480
 800b8fc:	08028440 	.word	0x08028440

0800b900 <__swsetup_r>:
 800b900:	4b32      	ldr	r3, [pc, #200]	; (800b9cc <__swsetup_r+0xcc>)
 800b902:	b570      	push	{r4, r5, r6, lr}
 800b904:	681d      	ldr	r5, [r3, #0]
 800b906:	4606      	mov	r6, r0
 800b908:	460c      	mov	r4, r1
 800b90a:	b125      	cbz	r5, 800b916 <__swsetup_r+0x16>
 800b90c:	69ab      	ldr	r3, [r5, #24]
 800b90e:	b913      	cbnz	r3, 800b916 <__swsetup_r+0x16>
 800b910:	4628      	mov	r0, r5
 800b912:	f000 fffb 	bl	800c90c <__sinit>
 800b916:	4b2e      	ldr	r3, [pc, #184]	; (800b9d0 <__swsetup_r+0xd0>)
 800b918:	429c      	cmp	r4, r3
 800b91a:	d10f      	bne.n	800b93c <__swsetup_r+0x3c>
 800b91c:	686c      	ldr	r4, [r5, #4]
 800b91e:	89a3      	ldrh	r3, [r4, #12]
 800b920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b924:	0719      	lsls	r1, r3, #28
 800b926:	d42c      	bmi.n	800b982 <__swsetup_r+0x82>
 800b928:	06dd      	lsls	r5, r3, #27
 800b92a:	d411      	bmi.n	800b950 <__swsetup_r+0x50>
 800b92c:	2309      	movs	r3, #9
 800b92e:	6033      	str	r3, [r6, #0]
 800b930:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b934:	81a3      	strh	r3, [r4, #12]
 800b936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b93a:	e03e      	b.n	800b9ba <__swsetup_r+0xba>
 800b93c:	4b25      	ldr	r3, [pc, #148]	; (800b9d4 <__swsetup_r+0xd4>)
 800b93e:	429c      	cmp	r4, r3
 800b940:	d101      	bne.n	800b946 <__swsetup_r+0x46>
 800b942:	68ac      	ldr	r4, [r5, #8]
 800b944:	e7eb      	b.n	800b91e <__swsetup_r+0x1e>
 800b946:	4b24      	ldr	r3, [pc, #144]	; (800b9d8 <__swsetup_r+0xd8>)
 800b948:	429c      	cmp	r4, r3
 800b94a:	bf08      	it	eq
 800b94c:	68ec      	ldreq	r4, [r5, #12]
 800b94e:	e7e6      	b.n	800b91e <__swsetup_r+0x1e>
 800b950:	0758      	lsls	r0, r3, #29
 800b952:	d512      	bpl.n	800b97a <__swsetup_r+0x7a>
 800b954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b956:	b141      	cbz	r1, 800b96a <__swsetup_r+0x6a>
 800b958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b95c:	4299      	cmp	r1, r3
 800b95e:	d002      	beq.n	800b966 <__swsetup_r+0x66>
 800b960:	4630      	mov	r0, r6
 800b962:	f7fe f815 	bl	8009990 <_free_r>
 800b966:	2300      	movs	r3, #0
 800b968:	6363      	str	r3, [r4, #52]	; 0x34
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b970:	81a3      	strh	r3, [r4, #12]
 800b972:	2300      	movs	r3, #0
 800b974:	6063      	str	r3, [r4, #4]
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f043 0308 	orr.w	r3, r3, #8
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	6923      	ldr	r3, [r4, #16]
 800b984:	b94b      	cbnz	r3, 800b99a <__swsetup_r+0x9a>
 800b986:	89a3      	ldrh	r3, [r4, #12]
 800b988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b98c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b990:	d003      	beq.n	800b99a <__swsetup_r+0x9a>
 800b992:	4621      	mov	r1, r4
 800b994:	4630      	mov	r0, r6
 800b996:	f001 fbf1 	bl	800d17c <__smakebuf_r>
 800b99a:	89a0      	ldrh	r0, [r4, #12]
 800b99c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9a0:	f010 0301 	ands.w	r3, r0, #1
 800b9a4:	d00a      	beq.n	800b9bc <__swsetup_r+0xbc>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	60a3      	str	r3, [r4, #8]
 800b9aa:	6963      	ldr	r3, [r4, #20]
 800b9ac:	425b      	negs	r3, r3
 800b9ae:	61a3      	str	r3, [r4, #24]
 800b9b0:	6923      	ldr	r3, [r4, #16]
 800b9b2:	b943      	cbnz	r3, 800b9c6 <__swsetup_r+0xc6>
 800b9b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9b8:	d1ba      	bne.n	800b930 <__swsetup_r+0x30>
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	0781      	lsls	r1, r0, #30
 800b9be:	bf58      	it	pl
 800b9c0:	6963      	ldrpl	r3, [r4, #20]
 800b9c2:	60a3      	str	r3, [r4, #8]
 800b9c4:	e7f4      	b.n	800b9b0 <__swsetup_r+0xb0>
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	e7f7      	b.n	800b9ba <__swsetup_r+0xba>
 800b9ca:	bf00      	nop
 800b9cc:	20000e04 	.word	0x20000e04
 800b9d0:	08028460 	.word	0x08028460
 800b9d4:	08028480 	.word	0x08028480
 800b9d8:	08028440 	.word	0x08028440

0800b9dc <abort>:
 800b9dc:	b508      	push	{r3, lr}
 800b9de:	2006      	movs	r0, #6
 800b9e0:	f002 fac2 	bl	800df68 <raise>
 800b9e4:	2001      	movs	r0, #1
 800b9e6:	f003 f851 	bl	800ea8c <_exit>

0800b9ea <quorem>:
 800b9ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ee:	6903      	ldr	r3, [r0, #16]
 800b9f0:	690c      	ldr	r4, [r1, #16]
 800b9f2:	42a3      	cmp	r3, r4
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	f2c0 8081 	blt.w	800bafc <quorem+0x112>
 800b9fa:	3c01      	subs	r4, #1
 800b9fc:	f101 0814 	add.w	r8, r1, #20
 800ba00:	f100 0514 	add.w	r5, r0, #20
 800ba04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba12:	3301      	adds	r3, #1
 800ba14:	429a      	cmp	r2, r3
 800ba16:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba1e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba22:	d331      	bcc.n	800ba88 <quorem+0x9e>
 800ba24:	f04f 0e00 	mov.w	lr, #0
 800ba28:	4640      	mov	r0, r8
 800ba2a:	46ac      	mov	ip, r5
 800ba2c:	46f2      	mov	sl, lr
 800ba2e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba32:	b293      	uxth	r3, r2
 800ba34:	fb06 e303 	mla	r3, r6, r3, lr
 800ba38:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	ebaa 0303 	sub.w	r3, sl, r3
 800ba42:	0c12      	lsrs	r2, r2, #16
 800ba44:	f8dc a000 	ldr.w	sl, [ip]
 800ba48:	fb06 e202 	mla	r2, r6, r2, lr
 800ba4c:	fa13 f38a 	uxtah	r3, r3, sl
 800ba50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba54:	fa1f fa82 	uxth.w	sl, r2
 800ba58:	f8dc 2000 	ldr.w	r2, [ip]
 800ba5c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ba60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba6a:	4581      	cmp	r9, r0
 800ba6c:	f84c 3b04 	str.w	r3, [ip], #4
 800ba70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba74:	d2db      	bcs.n	800ba2e <quorem+0x44>
 800ba76:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba7a:	b92b      	cbnz	r3, 800ba88 <quorem+0x9e>
 800ba7c:	9b01      	ldr	r3, [sp, #4]
 800ba7e:	3b04      	subs	r3, #4
 800ba80:	429d      	cmp	r5, r3
 800ba82:	461a      	mov	r2, r3
 800ba84:	d32e      	bcc.n	800bae4 <quorem+0xfa>
 800ba86:	613c      	str	r4, [r7, #16]
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f001 feb7 	bl	800d7fc <__mcmp>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	db24      	blt.n	800badc <quorem+0xf2>
 800ba92:	3601      	adds	r6, #1
 800ba94:	4628      	mov	r0, r5
 800ba96:	f04f 0c00 	mov.w	ip, #0
 800ba9a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba9e:	f8d0 e000 	ldr.w	lr, [r0]
 800baa2:	b293      	uxth	r3, r2
 800baa4:	ebac 0303 	sub.w	r3, ip, r3
 800baa8:	0c12      	lsrs	r2, r2, #16
 800baaa:	fa13 f38e 	uxtah	r3, r3, lr
 800baae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bab2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800babc:	45c1      	cmp	r9, r8
 800babe:	f840 3b04 	str.w	r3, [r0], #4
 800bac2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bac6:	d2e8      	bcs.n	800ba9a <quorem+0xb0>
 800bac8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bacc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bad0:	b922      	cbnz	r2, 800badc <quorem+0xf2>
 800bad2:	3b04      	subs	r3, #4
 800bad4:	429d      	cmp	r5, r3
 800bad6:	461a      	mov	r2, r3
 800bad8:	d30a      	bcc.n	800baf0 <quorem+0x106>
 800bada:	613c      	str	r4, [r7, #16]
 800badc:	4630      	mov	r0, r6
 800bade:	b003      	add	sp, #12
 800bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae4:	6812      	ldr	r2, [r2, #0]
 800bae6:	3b04      	subs	r3, #4
 800bae8:	2a00      	cmp	r2, #0
 800baea:	d1cc      	bne.n	800ba86 <quorem+0x9c>
 800baec:	3c01      	subs	r4, #1
 800baee:	e7c7      	b.n	800ba80 <quorem+0x96>
 800baf0:	6812      	ldr	r2, [r2, #0]
 800baf2:	3b04      	subs	r3, #4
 800baf4:	2a00      	cmp	r2, #0
 800baf6:	d1f0      	bne.n	800bada <quorem+0xf0>
 800baf8:	3c01      	subs	r4, #1
 800bafa:	e7eb      	b.n	800bad4 <quorem+0xea>
 800bafc:	2000      	movs	r0, #0
 800bafe:	e7ee      	b.n	800bade <quorem+0xf4>

0800bb00 <_dtoa_r>:
 800bb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb04:	ed2d 8b02 	vpush	{d8}
 800bb08:	ec57 6b10 	vmov	r6, r7, d0
 800bb0c:	b095      	sub	sp, #84	; 0x54
 800bb0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bb14:	9105      	str	r1, [sp, #20]
 800bb16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb20:	b975      	cbnz	r5, 800bb40 <_dtoa_r+0x40>
 800bb22:	2010      	movs	r0, #16
 800bb24:	f7fd ff16 	bl	8009954 <malloc>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	6260      	str	r0, [r4, #36]	; 0x24
 800bb2c:	b920      	cbnz	r0, 800bb38 <_dtoa_r+0x38>
 800bb2e:	4bb2      	ldr	r3, [pc, #712]	; (800bdf8 <_dtoa_r+0x2f8>)
 800bb30:	21ea      	movs	r1, #234	; 0xea
 800bb32:	48b2      	ldr	r0, [pc, #712]	; (800bdfc <_dtoa_r+0x2fc>)
 800bb34:	f7fd feb4 	bl	80098a0 <__assert_func>
 800bb38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb3c:	6005      	str	r5, [r0, #0]
 800bb3e:	60c5      	str	r5, [r0, #12]
 800bb40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb42:	6819      	ldr	r1, [r3, #0]
 800bb44:	b151      	cbz	r1, 800bb5c <_dtoa_r+0x5c>
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	604a      	str	r2, [r1, #4]
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	4093      	lsls	r3, r2
 800bb4e:	608b      	str	r3, [r1, #8]
 800bb50:	4620      	mov	r0, r4
 800bb52:	f001 fbcb 	bl	800d2ec <_Bfree>
 800bb56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	1e3b      	subs	r3, r7, #0
 800bb5e:	bfb9      	ittee	lt
 800bb60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb64:	9303      	strlt	r3, [sp, #12]
 800bb66:	2300      	movge	r3, #0
 800bb68:	f8c8 3000 	strge.w	r3, [r8]
 800bb6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bb70:	4ba3      	ldr	r3, [pc, #652]	; (800be00 <_dtoa_r+0x300>)
 800bb72:	bfbc      	itt	lt
 800bb74:	2201      	movlt	r2, #1
 800bb76:	f8c8 2000 	strlt.w	r2, [r8]
 800bb7a:	ea33 0309 	bics.w	r3, r3, r9
 800bb7e:	d11b      	bne.n	800bbb8 <_dtoa_r+0xb8>
 800bb80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb82:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb8c:	4333      	orrs	r3, r6
 800bb8e:	f000 857a 	beq.w	800c686 <_dtoa_r+0xb86>
 800bb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb94:	b963      	cbnz	r3, 800bbb0 <_dtoa_r+0xb0>
 800bb96:	4b9b      	ldr	r3, [pc, #620]	; (800be04 <_dtoa_r+0x304>)
 800bb98:	e024      	b.n	800bbe4 <_dtoa_r+0xe4>
 800bb9a:	4b9b      	ldr	r3, [pc, #620]	; (800be08 <_dtoa_r+0x308>)
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	3308      	adds	r3, #8
 800bba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	9800      	ldr	r0, [sp, #0]
 800bba6:	b015      	add	sp, #84	; 0x54
 800bba8:	ecbd 8b02 	vpop	{d8}
 800bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb0:	4b94      	ldr	r3, [pc, #592]	; (800be04 <_dtoa_r+0x304>)
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	3303      	adds	r3, #3
 800bbb6:	e7f3      	b.n	800bba0 <_dtoa_r+0xa0>
 800bbb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	ec51 0b17 	vmov	r0, r1, d7
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bbc8:	f7f4 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800bbcc:	4680      	mov	r8, r0
 800bbce:	b158      	cbz	r0, 800bbe8 <_dtoa_r+0xe8>
 800bbd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 8551 	beq.w	800c680 <_dtoa_r+0xb80>
 800bbde:	488b      	ldr	r0, [pc, #556]	; (800be0c <_dtoa_r+0x30c>)
 800bbe0:	6018      	str	r0, [r3, #0]
 800bbe2:	1e43      	subs	r3, r0, #1
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	e7dd      	b.n	800bba4 <_dtoa_r+0xa4>
 800bbe8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bbec:	aa12      	add	r2, sp, #72	; 0x48
 800bbee:	a913      	add	r1, sp, #76	; 0x4c
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f001 ff23 	bl	800da3c <__d2b>
 800bbf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbfa:	4683      	mov	fp, r0
 800bbfc:	2d00      	cmp	r5, #0
 800bbfe:	d07c      	beq.n	800bcfa <_dtoa_r+0x1fa>
 800bc00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bc06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bc0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bc12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bc16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc1a:	4b7d      	ldr	r3, [pc, #500]	; (800be10 <_dtoa_r+0x310>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	f7f4 fb41 	bl	80002a8 <__aeabi_dsub>
 800bc26:	a36e      	add	r3, pc, #440	; (adr r3, 800bde0 <_dtoa_r+0x2e0>)
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	f7f4 fcf4 	bl	8000618 <__aeabi_dmul>
 800bc30:	a36d      	add	r3, pc, #436	; (adr r3, 800bde8 <_dtoa_r+0x2e8>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f7f4 fb39 	bl	80002ac <__adddf3>
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	460f      	mov	r7, r1
 800bc40:	f7f4 fc80 	bl	8000544 <__aeabi_i2d>
 800bc44:	a36a      	add	r3, pc, #424	; (adr r3, 800bdf0 <_dtoa_r+0x2f0>)
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f7f4 fce5 	bl	8000618 <__aeabi_dmul>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	4630      	mov	r0, r6
 800bc54:	4639      	mov	r1, r7
 800bc56:	f7f4 fb29 	bl	80002ac <__adddf3>
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	460f      	mov	r7, r1
 800bc5e:	f7f4 ff8b 	bl	8000b78 <__aeabi_d2iz>
 800bc62:	2200      	movs	r2, #0
 800bc64:	4682      	mov	sl, r0
 800bc66:	2300      	movs	r3, #0
 800bc68:	4630      	mov	r0, r6
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	f7f4 ff46 	bl	8000afc <__aeabi_dcmplt>
 800bc70:	b148      	cbz	r0, 800bc86 <_dtoa_r+0x186>
 800bc72:	4650      	mov	r0, sl
 800bc74:	f7f4 fc66 	bl	8000544 <__aeabi_i2d>
 800bc78:	4632      	mov	r2, r6
 800bc7a:	463b      	mov	r3, r7
 800bc7c:	f7f4 ff34 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc80:	b908      	cbnz	r0, 800bc86 <_dtoa_r+0x186>
 800bc82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bc86:	f1ba 0f16 	cmp.w	sl, #22
 800bc8a:	d854      	bhi.n	800bd36 <_dtoa_r+0x236>
 800bc8c:	4b61      	ldr	r3, [pc, #388]	; (800be14 <_dtoa_r+0x314>)
 800bc8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc9a:	f7f4 ff2f 	bl	8000afc <__aeabi_dcmplt>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d04b      	beq.n	800bd3a <_dtoa_r+0x23a>
 800bca2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bca6:	2300      	movs	r3, #0
 800bca8:	930e      	str	r3, [sp, #56]	; 0x38
 800bcaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcac:	1b5d      	subs	r5, r3, r5
 800bcae:	1e6b      	subs	r3, r5, #1
 800bcb0:	9304      	str	r3, [sp, #16]
 800bcb2:	bf43      	ittte	mi
 800bcb4:	2300      	movmi	r3, #0
 800bcb6:	f1c5 0801 	rsbmi	r8, r5, #1
 800bcba:	9304      	strmi	r3, [sp, #16]
 800bcbc:	f04f 0800 	movpl.w	r8, #0
 800bcc0:	f1ba 0f00 	cmp.w	sl, #0
 800bcc4:	db3b      	blt.n	800bd3e <_dtoa_r+0x23e>
 800bcc6:	9b04      	ldr	r3, [sp, #16]
 800bcc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bccc:	4453      	add	r3, sl
 800bcce:	9304      	str	r3, [sp, #16]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9306      	str	r3, [sp, #24]
 800bcd4:	9b05      	ldr	r3, [sp, #20]
 800bcd6:	2b09      	cmp	r3, #9
 800bcd8:	d869      	bhi.n	800bdae <_dtoa_r+0x2ae>
 800bcda:	2b05      	cmp	r3, #5
 800bcdc:	bfc4      	itt	gt
 800bcde:	3b04      	subgt	r3, #4
 800bce0:	9305      	strgt	r3, [sp, #20]
 800bce2:	9b05      	ldr	r3, [sp, #20]
 800bce4:	f1a3 0302 	sub.w	r3, r3, #2
 800bce8:	bfcc      	ite	gt
 800bcea:	2500      	movgt	r5, #0
 800bcec:	2501      	movle	r5, #1
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d869      	bhi.n	800bdc6 <_dtoa_r+0x2c6>
 800bcf2:	e8df f003 	tbb	[pc, r3]
 800bcf6:	4e2c      	.short	0x4e2c
 800bcf8:	5a4c      	.short	0x5a4c
 800bcfa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bcfe:	441d      	add	r5, r3
 800bd00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bd04:	2b20      	cmp	r3, #32
 800bd06:	bfc1      	itttt	gt
 800bd08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bd10:	fa09 f303 	lslgt.w	r3, r9, r3
 800bd14:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bd18:	bfda      	itte	le
 800bd1a:	f1c3 0320 	rsble	r3, r3, #32
 800bd1e:	fa06 f003 	lslle.w	r0, r6, r3
 800bd22:	4318      	orrgt	r0, r3
 800bd24:	f7f4 fbfe 	bl	8000524 <__aeabi_ui2d>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bd30:	3d01      	subs	r5, #1
 800bd32:	9310      	str	r3, [sp, #64]	; 0x40
 800bd34:	e771      	b.n	800bc1a <_dtoa_r+0x11a>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e7b6      	b.n	800bca8 <_dtoa_r+0x1a8>
 800bd3a:	900e      	str	r0, [sp, #56]	; 0x38
 800bd3c:	e7b5      	b.n	800bcaa <_dtoa_r+0x1aa>
 800bd3e:	f1ca 0300 	rsb	r3, sl, #0
 800bd42:	9306      	str	r3, [sp, #24]
 800bd44:	2300      	movs	r3, #0
 800bd46:	eba8 080a 	sub.w	r8, r8, sl
 800bd4a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd4c:	e7c2      	b.n	800bcd4 <_dtoa_r+0x1d4>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	9308      	str	r3, [sp, #32]
 800bd52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	dc39      	bgt.n	800bdcc <_dtoa_r+0x2cc>
 800bd58:	f04f 0901 	mov.w	r9, #1
 800bd5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd60:	464b      	mov	r3, r9
 800bd62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bd66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bd68:	2200      	movs	r2, #0
 800bd6a:	6042      	str	r2, [r0, #4]
 800bd6c:	2204      	movs	r2, #4
 800bd6e:	f102 0614 	add.w	r6, r2, #20
 800bd72:	429e      	cmp	r6, r3
 800bd74:	6841      	ldr	r1, [r0, #4]
 800bd76:	d92f      	bls.n	800bdd8 <_dtoa_r+0x2d8>
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f001 fa77 	bl	800d26c <_Balloc>
 800bd7e:	9000      	str	r0, [sp, #0]
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d14b      	bne.n	800be1c <_dtoa_r+0x31c>
 800bd84:	4b24      	ldr	r3, [pc, #144]	; (800be18 <_dtoa_r+0x318>)
 800bd86:	4602      	mov	r2, r0
 800bd88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd8c:	e6d1      	b.n	800bb32 <_dtoa_r+0x32>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e7de      	b.n	800bd50 <_dtoa_r+0x250>
 800bd92:	2300      	movs	r3, #0
 800bd94:	9308      	str	r3, [sp, #32]
 800bd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd98:	eb0a 0903 	add.w	r9, sl, r3
 800bd9c:	f109 0301 	add.w	r3, r9, #1
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	9301      	str	r3, [sp, #4]
 800bda4:	bfb8      	it	lt
 800bda6:	2301      	movlt	r3, #1
 800bda8:	e7dd      	b.n	800bd66 <_dtoa_r+0x266>
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e7f2      	b.n	800bd94 <_dtoa_r+0x294>
 800bdae:	2501      	movs	r5, #1
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	9508      	str	r5, [sp, #32]
 800bdb6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8cd 9004 	str.w	r9, [sp, #4]
 800bdc0:	2312      	movs	r3, #18
 800bdc2:	9209      	str	r2, [sp, #36]	; 0x24
 800bdc4:	e7cf      	b.n	800bd66 <_dtoa_r+0x266>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	9308      	str	r3, [sp, #32]
 800bdca:	e7f4      	b.n	800bdb6 <_dtoa_r+0x2b6>
 800bdcc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bdd0:	f8cd 9004 	str.w	r9, [sp, #4]
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	e7c6      	b.n	800bd66 <_dtoa_r+0x266>
 800bdd8:	3101      	adds	r1, #1
 800bdda:	6041      	str	r1, [r0, #4]
 800bddc:	0052      	lsls	r2, r2, #1
 800bdde:	e7c6      	b.n	800bd6e <_dtoa_r+0x26e>
 800bde0:	636f4361 	.word	0x636f4361
 800bde4:	3fd287a7 	.word	0x3fd287a7
 800bde8:	8b60c8b3 	.word	0x8b60c8b3
 800bdec:	3fc68a28 	.word	0x3fc68a28
 800bdf0:	509f79fb 	.word	0x509f79fb
 800bdf4:	3fd34413 	.word	0x3fd34413
 800bdf8:	080283b6 	.word	0x080283b6
 800bdfc:	080283cd 	.word	0x080283cd
 800be00:	7ff00000 	.word	0x7ff00000
 800be04:	080283b2 	.word	0x080283b2
 800be08:	080283a9 	.word	0x080283a9
 800be0c:	0802822e 	.word	0x0802822e
 800be10:	3ff80000 	.word	0x3ff80000
 800be14:	080285a8 	.word	0x080285a8
 800be18:	0802842c 	.word	0x0802842c
 800be1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be1e:	9a00      	ldr	r2, [sp, #0]
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	9b01      	ldr	r3, [sp, #4]
 800be24:	2b0e      	cmp	r3, #14
 800be26:	f200 80ad 	bhi.w	800bf84 <_dtoa_r+0x484>
 800be2a:	2d00      	cmp	r5, #0
 800be2c:	f000 80aa 	beq.w	800bf84 <_dtoa_r+0x484>
 800be30:	f1ba 0f00 	cmp.w	sl, #0
 800be34:	dd36      	ble.n	800bea4 <_dtoa_r+0x3a4>
 800be36:	4ac3      	ldr	r2, [pc, #780]	; (800c144 <_dtoa_r+0x644>)
 800be38:	f00a 030f 	and.w	r3, sl, #15
 800be3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be40:	ed93 7b00 	vldr	d7, [r3]
 800be44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800be48:	ea4f 172a 	mov.w	r7, sl, asr #4
 800be4c:	eeb0 8a47 	vmov.f32	s16, s14
 800be50:	eef0 8a67 	vmov.f32	s17, s15
 800be54:	d016      	beq.n	800be84 <_dtoa_r+0x384>
 800be56:	4bbc      	ldr	r3, [pc, #752]	; (800c148 <_dtoa_r+0x648>)
 800be58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800be5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be60:	f7f4 fd04 	bl	800086c <__aeabi_ddiv>
 800be64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be68:	f007 070f 	and.w	r7, r7, #15
 800be6c:	2503      	movs	r5, #3
 800be6e:	4eb6      	ldr	r6, [pc, #728]	; (800c148 <_dtoa_r+0x648>)
 800be70:	b957      	cbnz	r7, 800be88 <_dtoa_r+0x388>
 800be72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be76:	ec53 2b18 	vmov	r2, r3, d8
 800be7a:	f7f4 fcf7 	bl	800086c <__aeabi_ddiv>
 800be7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be82:	e029      	b.n	800bed8 <_dtoa_r+0x3d8>
 800be84:	2502      	movs	r5, #2
 800be86:	e7f2      	b.n	800be6e <_dtoa_r+0x36e>
 800be88:	07f9      	lsls	r1, r7, #31
 800be8a:	d508      	bpl.n	800be9e <_dtoa_r+0x39e>
 800be8c:	ec51 0b18 	vmov	r0, r1, d8
 800be90:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be94:	f7f4 fbc0 	bl	8000618 <__aeabi_dmul>
 800be98:	ec41 0b18 	vmov	d8, r0, r1
 800be9c:	3501      	adds	r5, #1
 800be9e:	107f      	asrs	r7, r7, #1
 800bea0:	3608      	adds	r6, #8
 800bea2:	e7e5      	b.n	800be70 <_dtoa_r+0x370>
 800bea4:	f000 80a6 	beq.w	800bff4 <_dtoa_r+0x4f4>
 800bea8:	f1ca 0600 	rsb	r6, sl, #0
 800beac:	4ba5      	ldr	r3, [pc, #660]	; (800c144 <_dtoa_r+0x644>)
 800beae:	4fa6      	ldr	r7, [pc, #664]	; (800c148 <_dtoa_r+0x648>)
 800beb0:	f006 020f 	and.w	r2, r6, #15
 800beb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bec0:	f7f4 fbaa 	bl	8000618 <__aeabi_dmul>
 800bec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bec8:	1136      	asrs	r6, r6, #4
 800beca:	2300      	movs	r3, #0
 800becc:	2502      	movs	r5, #2
 800bece:	2e00      	cmp	r6, #0
 800bed0:	f040 8085 	bne.w	800bfde <_dtoa_r+0x4de>
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1d2      	bne.n	800be7e <_dtoa_r+0x37e>
 800bed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 808c 	beq.w	800bff8 <_dtoa_r+0x4f8>
 800bee0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bee4:	4b99      	ldr	r3, [pc, #612]	; (800c14c <_dtoa_r+0x64c>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 fe06 	bl	8000afc <__aeabi_dcmplt>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	f000 8081 	beq.w	800bff8 <_dtoa_r+0x4f8>
 800bef6:	9b01      	ldr	r3, [sp, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d07d      	beq.n	800bff8 <_dtoa_r+0x4f8>
 800befc:	f1b9 0f00 	cmp.w	r9, #0
 800bf00:	dd3c      	ble.n	800bf7c <_dtoa_r+0x47c>
 800bf02:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bf06:	9307      	str	r3, [sp, #28]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	4b91      	ldr	r3, [pc, #580]	; (800c150 <_dtoa_r+0x650>)
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	4639      	mov	r1, r7
 800bf10:	f7f4 fb82 	bl	8000618 <__aeabi_dmul>
 800bf14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf18:	3501      	adds	r5, #1
 800bf1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bf1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf22:	4628      	mov	r0, r5
 800bf24:	f7f4 fb0e 	bl	8000544 <__aeabi_i2d>
 800bf28:	4632      	mov	r2, r6
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	f7f4 fb74 	bl	8000618 <__aeabi_dmul>
 800bf30:	4b88      	ldr	r3, [pc, #544]	; (800c154 <_dtoa_r+0x654>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	f7f4 f9ba 	bl	80002ac <__adddf3>
 800bf38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bf3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf40:	9303      	str	r3, [sp, #12]
 800bf42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d15c      	bne.n	800c002 <_dtoa_r+0x502>
 800bf48:	4b83      	ldr	r3, [pc, #524]	; (800c158 <_dtoa_r+0x658>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 f9aa 	bl	80002a8 <__aeabi_dsub>
 800bf54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf58:	4606      	mov	r6, r0
 800bf5a:	460f      	mov	r7, r1
 800bf5c:	f7f4 fdec 	bl	8000b38 <__aeabi_dcmpgt>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	f040 8296 	bne.w	800c492 <_dtoa_r+0x992>
 800bf66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf70:	4639      	mov	r1, r7
 800bf72:	f7f4 fdc3 	bl	8000afc <__aeabi_dcmplt>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f040 8288 	bne.w	800c48c <_dtoa_r+0x98c>
 800bf7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bf80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f2c0 8158 	blt.w	800c23c <_dtoa_r+0x73c>
 800bf8c:	f1ba 0f0e 	cmp.w	sl, #14
 800bf90:	f300 8154 	bgt.w	800c23c <_dtoa_r+0x73c>
 800bf94:	4b6b      	ldr	r3, [pc, #428]	; (800c144 <_dtoa_r+0x644>)
 800bf96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f280 80e3 	bge.w	800c16c <_dtoa_r+0x66c>
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f300 80df 	bgt.w	800c16c <_dtoa_r+0x66c>
 800bfae:	f040 826d 	bne.w	800c48c <_dtoa_r+0x98c>
 800bfb2:	4b69      	ldr	r3, [pc, #420]	; (800c158 <_dtoa_r+0x658>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	4649      	mov	r1, r9
 800bfba:	f7f4 fb2d 	bl	8000618 <__aeabi_dmul>
 800bfbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfc2:	f7f4 fdaf 	bl	8000b24 <__aeabi_dcmpge>
 800bfc6:	9e01      	ldr	r6, [sp, #4]
 800bfc8:	4637      	mov	r7, r6
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	f040 8243 	bne.w	800c456 <_dtoa_r+0x956>
 800bfd0:	9d00      	ldr	r5, [sp, #0]
 800bfd2:	2331      	movs	r3, #49	; 0x31
 800bfd4:	f805 3b01 	strb.w	r3, [r5], #1
 800bfd8:	f10a 0a01 	add.w	sl, sl, #1
 800bfdc:	e23f      	b.n	800c45e <_dtoa_r+0x95e>
 800bfde:	07f2      	lsls	r2, r6, #31
 800bfe0:	d505      	bpl.n	800bfee <_dtoa_r+0x4ee>
 800bfe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe6:	f7f4 fb17 	bl	8000618 <__aeabi_dmul>
 800bfea:	3501      	adds	r5, #1
 800bfec:	2301      	movs	r3, #1
 800bfee:	1076      	asrs	r6, r6, #1
 800bff0:	3708      	adds	r7, #8
 800bff2:	e76c      	b.n	800bece <_dtoa_r+0x3ce>
 800bff4:	2502      	movs	r5, #2
 800bff6:	e76f      	b.n	800bed8 <_dtoa_r+0x3d8>
 800bff8:	9b01      	ldr	r3, [sp, #4]
 800bffa:	f8cd a01c 	str.w	sl, [sp, #28]
 800bffe:	930c      	str	r3, [sp, #48]	; 0x30
 800c000:	e78d      	b.n	800bf1e <_dtoa_r+0x41e>
 800c002:	9900      	ldr	r1, [sp, #0]
 800c004:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c008:	4b4e      	ldr	r3, [pc, #312]	; (800c144 <_dtoa_r+0x644>)
 800c00a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c00e:	4401      	add	r1, r0
 800c010:	9102      	str	r1, [sp, #8]
 800c012:	9908      	ldr	r1, [sp, #32]
 800c014:	eeb0 8a47 	vmov.f32	s16, s14
 800c018:	eef0 8a67 	vmov.f32	s17, s15
 800c01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c020:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c024:	2900      	cmp	r1, #0
 800c026:	d045      	beq.n	800c0b4 <_dtoa_r+0x5b4>
 800c028:	494c      	ldr	r1, [pc, #304]	; (800c15c <_dtoa_r+0x65c>)
 800c02a:	2000      	movs	r0, #0
 800c02c:	f7f4 fc1e 	bl	800086c <__aeabi_ddiv>
 800c030:	ec53 2b18 	vmov	r2, r3, d8
 800c034:	f7f4 f938 	bl	80002a8 <__aeabi_dsub>
 800c038:	9d00      	ldr	r5, [sp, #0]
 800c03a:	ec41 0b18 	vmov	d8, r0, r1
 800c03e:	4639      	mov	r1, r7
 800c040:	4630      	mov	r0, r6
 800c042:	f7f4 fd99 	bl	8000b78 <__aeabi_d2iz>
 800c046:	900c      	str	r0, [sp, #48]	; 0x30
 800c048:	f7f4 fa7c 	bl	8000544 <__aeabi_i2d>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	4630      	mov	r0, r6
 800c052:	4639      	mov	r1, r7
 800c054:	f7f4 f928 	bl	80002a8 <__aeabi_dsub>
 800c058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c05a:	3330      	adds	r3, #48	; 0x30
 800c05c:	f805 3b01 	strb.w	r3, [r5], #1
 800c060:	ec53 2b18 	vmov	r2, r3, d8
 800c064:	4606      	mov	r6, r0
 800c066:	460f      	mov	r7, r1
 800c068:	f7f4 fd48 	bl	8000afc <__aeabi_dcmplt>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d165      	bne.n	800c13c <_dtoa_r+0x63c>
 800c070:	4632      	mov	r2, r6
 800c072:	463b      	mov	r3, r7
 800c074:	4935      	ldr	r1, [pc, #212]	; (800c14c <_dtoa_r+0x64c>)
 800c076:	2000      	movs	r0, #0
 800c078:	f7f4 f916 	bl	80002a8 <__aeabi_dsub>
 800c07c:	ec53 2b18 	vmov	r2, r3, d8
 800c080:	f7f4 fd3c 	bl	8000afc <__aeabi_dcmplt>
 800c084:	2800      	cmp	r0, #0
 800c086:	f040 80b9 	bne.w	800c1fc <_dtoa_r+0x6fc>
 800c08a:	9b02      	ldr	r3, [sp, #8]
 800c08c:	429d      	cmp	r5, r3
 800c08e:	f43f af75 	beq.w	800bf7c <_dtoa_r+0x47c>
 800c092:	4b2f      	ldr	r3, [pc, #188]	; (800c150 <_dtoa_r+0x650>)
 800c094:	ec51 0b18 	vmov	r0, r1, d8
 800c098:	2200      	movs	r2, #0
 800c09a:	f7f4 fabd 	bl	8000618 <__aeabi_dmul>
 800c09e:	4b2c      	ldr	r3, [pc, #176]	; (800c150 <_dtoa_r+0x650>)
 800c0a0:	ec41 0b18 	vmov	d8, r0, r1
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	f7f4 fab5 	bl	8000618 <__aeabi_dmul>
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	460f      	mov	r7, r1
 800c0b2:	e7c4      	b.n	800c03e <_dtoa_r+0x53e>
 800c0b4:	ec51 0b17 	vmov	r0, r1, d7
 800c0b8:	f7f4 faae 	bl	8000618 <__aeabi_dmul>
 800c0bc:	9b02      	ldr	r3, [sp, #8]
 800c0be:	9d00      	ldr	r5, [sp, #0]
 800c0c0:	930c      	str	r3, [sp, #48]	; 0x30
 800c0c2:	ec41 0b18 	vmov	d8, r0, r1
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f7f4 fd55 	bl	8000b78 <__aeabi_d2iz>
 800c0ce:	9011      	str	r0, [sp, #68]	; 0x44
 800c0d0:	f7f4 fa38 	bl	8000544 <__aeabi_i2d>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4630      	mov	r0, r6
 800c0da:	4639      	mov	r1, r7
 800c0dc:	f7f4 f8e4 	bl	80002a8 <__aeabi_dsub>
 800c0e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0e2:	3330      	adds	r3, #48	; 0x30
 800c0e4:	f805 3b01 	strb.w	r3, [r5], #1
 800c0e8:	9b02      	ldr	r3, [sp, #8]
 800c0ea:	429d      	cmp	r5, r3
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	460f      	mov	r7, r1
 800c0f0:	f04f 0200 	mov.w	r2, #0
 800c0f4:	d134      	bne.n	800c160 <_dtoa_r+0x660>
 800c0f6:	4b19      	ldr	r3, [pc, #100]	; (800c15c <_dtoa_r+0x65c>)
 800c0f8:	ec51 0b18 	vmov	r0, r1, d8
 800c0fc:	f7f4 f8d6 	bl	80002ac <__adddf3>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	f7f4 fd16 	bl	8000b38 <__aeabi_dcmpgt>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d175      	bne.n	800c1fc <_dtoa_r+0x6fc>
 800c110:	ec53 2b18 	vmov	r2, r3, d8
 800c114:	4911      	ldr	r1, [pc, #68]	; (800c15c <_dtoa_r+0x65c>)
 800c116:	2000      	movs	r0, #0
 800c118:	f7f4 f8c6 	bl	80002a8 <__aeabi_dsub>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 fcea 	bl	8000afc <__aeabi_dcmplt>
 800c128:	2800      	cmp	r0, #0
 800c12a:	f43f af27 	beq.w	800bf7c <_dtoa_r+0x47c>
 800c12e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c130:	1e6b      	subs	r3, r5, #1
 800c132:	930c      	str	r3, [sp, #48]	; 0x30
 800c134:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c138:	2b30      	cmp	r3, #48	; 0x30
 800c13a:	d0f8      	beq.n	800c12e <_dtoa_r+0x62e>
 800c13c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c140:	e04a      	b.n	800c1d8 <_dtoa_r+0x6d8>
 800c142:	bf00      	nop
 800c144:	080285a8 	.word	0x080285a8
 800c148:	08028580 	.word	0x08028580
 800c14c:	3ff00000 	.word	0x3ff00000
 800c150:	40240000 	.word	0x40240000
 800c154:	401c0000 	.word	0x401c0000
 800c158:	40140000 	.word	0x40140000
 800c15c:	3fe00000 	.word	0x3fe00000
 800c160:	4baf      	ldr	r3, [pc, #700]	; (800c420 <_dtoa_r+0x920>)
 800c162:	f7f4 fa59 	bl	8000618 <__aeabi_dmul>
 800c166:	4606      	mov	r6, r0
 800c168:	460f      	mov	r7, r1
 800c16a:	e7ac      	b.n	800c0c6 <_dtoa_r+0x5c6>
 800c16c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c170:	9d00      	ldr	r5, [sp, #0]
 800c172:	4642      	mov	r2, r8
 800c174:	464b      	mov	r3, r9
 800c176:	4630      	mov	r0, r6
 800c178:	4639      	mov	r1, r7
 800c17a:	f7f4 fb77 	bl	800086c <__aeabi_ddiv>
 800c17e:	f7f4 fcfb 	bl	8000b78 <__aeabi_d2iz>
 800c182:	9002      	str	r0, [sp, #8]
 800c184:	f7f4 f9de 	bl	8000544 <__aeabi_i2d>
 800c188:	4642      	mov	r2, r8
 800c18a:	464b      	mov	r3, r9
 800c18c:	f7f4 fa44 	bl	8000618 <__aeabi_dmul>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4630      	mov	r0, r6
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 f886 	bl	80002a8 <__aeabi_dsub>
 800c19c:	9e02      	ldr	r6, [sp, #8]
 800c19e:	9f01      	ldr	r7, [sp, #4]
 800c1a0:	3630      	adds	r6, #48	; 0x30
 800c1a2:	f805 6b01 	strb.w	r6, [r5], #1
 800c1a6:	9e00      	ldr	r6, [sp, #0]
 800c1a8:	1bae      	subs	r6, r5, r6
 800c1aa:	42b7      	cmp	r7, r6
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	d137      	bne.n	800c222 <_dtoa_r+0x722>
 800c1b2:	f7f4 f87b 	bl	80002ac <__adddf3>
 800c1b6:	4642      	mov	r2, r8
 800c1b8:	464b      	mov	r3, r9
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460f      	mov	r7, r1
 800c1be:	f7f4 fcbb 	bl	8000b38 <__aeabi_dcmpgt>
 800c1c2:	b9c8      	cbnz	r0, 800c1f8 <_dtoa_r+0x6f8>
 800c1c4:	4642      	mov	r2, r8
 800c1c6:	464b      	mov	r3, r9
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	f7f4 fc8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1d0:	b110      	cbz	r0, 800c1d8 <_dtoa_r+0x6d8>
 800c1d2:	9b02      	ldr	r3, [sp, #8]
 800c1d4:	07d9      	lsls	r1, r3, #31
 800c1d6:	d40f      	bmi.n	800c1f8 <_dtoa_r+0x6f8>
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4659      	mov	r1, fp
 800c1dc:	f001 f886 	bl	800d2ec <_Bfree>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	702b      	strb	r3, [r5, #0]
 800c1e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1e6:	f10a 0001 	add.w	r0, sl, #1
 800c1ea:	6018      	str	r0, [r3, #0]
 800c1ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f43f acd8 	beq.w	800bba4 <_dtoa_r+0xa4>
 800c1f4:	601d      	str	r5, [r3, #0]
 800c1f6:	e4d5      	b.n	800bba4 <_dtoa_r+0xa4>
 800c1f8:	f8cd a01c 	str.w	sl, [sp, #28]
 800c1fc:	462b      	mov	r3, r5
 800c1fe:	461d      	mov	r5, r3
 800c200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c204:	2a39      	cmp	r2, #57	; 0x39
 800c206:	d108      	bne.n	800c21a <_dtoa_r+0x71a>
 800c208:	9a00      	ldr	r2, [sp, #0]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d1f7      	bne.n	800c1fe <_dtoa_r+0x6fe>
 800c20e:	9a07      	ldr	r2, [sp, #28]
 800c210:	9900      	ldr	r1, [sp, #0]
 800c212:	3201      	adds	r2, #1
 800c214:	9207      	str	r2, [sp, #28]
 800c216:	2230      	movs	r2, #48	; 0x30
 800c218:	700a      	strb	r2, [r1, #0]
 800c21a:	781a      	ldrb	r2, [r3, #0]
 800c21c:	3201      	adds	r2, #1
 800c21e:	701a      	strb	r2, [r3, #0]
 800c220:	e78c      	b.n	800c13c <_dtoa_r+0x63c>
 800c222:	4b7f      	ldr	r3, [pc, #508]	; (800c420 <_dtoa_r+0x920>)
 800c224:	2200      	movs	r2, #0
 800c226:	f7f4 f9f7 	bl	8000618 <__aeabi_dmul>
 800c22a:	2200      	movs	r2, #0
 800c22c:	2300      	movs	r3, #0
 800c22e:	4606      	mov	r6, r0
 800c230:	460f      	mov	r7, r1
 800c232:	f7f4 fc59 	bl	8000ae8 <__aeabi_dcmpeq>
 800c236:	2800      	cmp	r0, #0
 800c238:	d09b      	beq.n	800c172 <_dtoa_r+0x672>
 800c23a:	e7cd      	b.n	800c1d8 <_dtoa_r+0x6d8>
 800c23c:	9a08      	ldr	r2, [sp, #32]
 800c23e:	2a00      	cmp	r2, #0
 800c240:	f000 80c4 	beq.w	800c3cc <_dtoa_r+0x8cc>
 800c244:	9a05      	ldr	r2, [sp, #20]
 800c246:	2a01      	cmp	r2, #1
 800c248:	f300 80a8 	bgt.w	800c39c <_dtoa_r+0x89c>
 800c24c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c24e:	2a00      	cmp	r2, #0
 800c250:	f000 80a0 	beq.w	800c394 <_dtoa_r+0x894>
 800c254:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c258:	9e06      	ldr	r6, [sp, #24]
 800c25a:	4645      	mov	r5, r8
 800c25c:	9a04      	ldr	r2, [sp, #16]
 800c25e:	2101      	movs	r1, #1
 800c260:	441a      	add	r2, r3
 800c262:	4620      	mov	r0, r4
 800c264:	4498      	add	r8, r3
 800c266:	9204      	str	r2, [sp, #16]
 800c268:	f001 f946 	bl	800d4f8 <__i2b>
 800c26c:	4607      	mov	r7, r0
 800c26e:	2d00      	cmp	r5, #0
 800c270:	dd0b      	ble.n	800c28a <_dtoa_r+0x78a>
 800c272:	9b04      	ldr	r3, [sp, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	dd08      	ble.n	800c28a <_dtoa_r+0x78a>
 800c278:	42ab      	cmp	r3, r5
 800c27a:	9a04      	ldr	r2, [sp, #16]
 800c27c:	bfa8      	it	ge
 800c27e:	462b      	movge	r3, r5
 800c280:	eba8 0803 	sub.w	r8, r8, r3
 800c284:	1aed      	subs	r5, r5, r3
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	9304      	str	r3, [sp, #16]
 800c28a:	9b06      	ldr	r3, [sp, #24]
 800c28c:	b1fb      	cbz	r3, 800c2ce <_dtoa_r+0x7ce>
 800c28e:	9b08      	ldr	r3, [sp, #32]
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 809f 	beq.w	800c3d4 <_dtoa_r+0x8d4>
 800c296:	2e00      	cmp	r6, #0
 800c298:	dd11      	ble.n	800c2be <_dtoa_r+0x7be>
 800c29a:	4639      	mov	r1, r7
 800c29c:	4632      	mov	r2, r6
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f001 f9e6 	bl	800d670 <__pow5mult>
 800c2a4:	465a      	mov	r2, fp
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f001 f93a 	bl	800d524 <__multiply>
 800c2b0:	4659      	mov	r1, fp
 800c2b2:	9007      	str	r0, [sp, #28]
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f001 f819 	bl	800d2ec <_Bfree>
 800c2ba:	9b07      	ldr	r3, [sp, #28]
 800c2bc:	469b      	mov	fp, r3
 800c2be:	9b06      	ldr	r3, [sp, #24]
 800c2c0:	1b9a      	subs	r2, r3, r6
 800c2c2:	d004      	beq.n	800c2ce <_dtoa_r+0x7ce>
 800c2c4:	4659      	mov	r1, fp
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f001 f9d2 	bl	800d670 <__pow5mult>
 800c2cc:	4683      	mov	fp, r0
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f001 f911 	bl	800d4f8 <__i2b>
 800c2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	4606      	mov	r6, r0
 800c2dc:	dd7c      	ble.n	800c3d8 <_dtoa_r+0x8d8>
 800c2de:	461a      	mov	r2, r3
 800c2e0:	4601      	mov	r1, r0
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f001 f9c4 	bl	800d670 <__pow5mult>
 800c2e8:	9b05      	ldr	r3, [sp, #20]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	dd76      	ble.n	800c3de <_dtoa_r+0x8de>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	9306      	str	r3, [sp, #24]
 800c2f4:	6933      	ldr	r3, [r6, #16]
 800c2f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c2fa:	6918      	ldr	r0, [r3, #16]
 800c2fc:	f001 f8ac 	bl	800d458 <__hi0bits>
 800c300:	f1c0 0020 	rsb	r0, r0, #32
 800c304:	9b04      	ldr	r3, [sp, #16]
 800c306:	4418      	add	r0, r3
 800c308:	f010 001f 	ands.w	r0, r0, #31
 800c30c:	f000 8086 	beq.w	800c41c <_dtoa_r+0x91c>
 800c310:	f1c0 0320 	rsb	r3, r0, #32
 800c314:	2b04      	cmp	r3, #4
 800c316:	dd7f      	ble.n	800c418 <_dtoa_r+0x918>
 800c318:	f1c0 001c 	rsb	r0, r0, #28
 800c31c:	9b04      	ldr	r3, [sp, #16]
 800c31e:	4403      	add	r3, r0
 800c320:	4480      	add	r8, r0
 800c322:	4405      	add	r5, r0
 800c324:	9304      	str	r3, [sp, #16]
 800c326:	f1b8 0f00 	cmp.w	r8, #0
 800c32a:	dd05      	ble.n	800c338 <_dtoa_r+0x838>
 800c32c:	4659      	mov	r1, fp
 800c32e:	4642      	mov	r2, r8
 800c330:	4620      	mov	r0, r4
 800c332:	f001 f9f7 	bl	800d724 <__lshift>
 800c336:	4683      	mov	fp, r0
 800c338:	9b04      	ldr	r3, [sp, #16]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	dd05      	ble.n	800c34a <_dtoa_r+0x84a>
 800c33e:	4631      	mov	r1, r6
 800c340:	461a      	mov	r2, r3
 800c342:	4620      	mov	r0, r4
 800c344:	f001 f9ee 	bl	800d724 <__lshift>
 800c348:	4606      	mov	r6, r0
 800c34a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d069      	beq.n	800c424 <_dtoa_r+0x924>
 800c350:	4631      	mov	r1, r6
 800c352:	4658      	mov	r0, fp
 800c354:	f001 fa52 	bl	800d7fc <__mcmp>
 800c358:	2800      	cmp	r0, #0
 800c35a:	da63      	bge.n	800c424 <_dtoa_r+0x924>
 800c35c:	2300      	movs	r3, #0
 800c35e:	4659      	mov	r1, fp
 800c360:	220a      	movs	r2, #10
 800c362:	4620      	mov	r0, r4
 800c364:	f000 ffe4 	bl	800d330 <__multadd>
 800c368:	9b08      	ldr	r3, [sp, #32]
 800c36a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c36e:	4683      	mov	fp, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	f000 818f 	beq.w	800c694 <_dtoa_r+0xb94>
 800c376:	4639      	mov	r1, r7
 800c378:	2300      	movs	r3, #0
 800c37a:	220a      	movs	r2, #10
 800c37c:	4620      	mov	r0, r4
 800c37e:	f000 ffd7 	bl	800d330 <__multadd>
 800c382:	f1b9 0f00 	cmp.w	r9, #0
 800c386:	4607      	mov	r7, r0
 800c388:	f300 808e 	bgt.w	800c4a8 <_dtoa_r+0x9a8>
 800c38c:	9b05      	ldr	r3, [sp, #20]
 800c38e:	2b02      	cmp	r3, #2
 800c390:	dc50      	bgt.n	800c434 <_dtoa_r+0x934>
 800c392:	e089      	b.n	800c4a8 <_dtoa_r+0x9a8>
 800c394:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c39a:	e75d      	b.n	800c258 <_dtoa_r+0x758>
 800c39c:	9b01      	ldr	r3, [sp, #4]
 800c39e:	1e5e      	subs	r6, r3, #1
 800c3a0:	9b06      	ldr	r3, [sp, #24]
 800c3a2:	42b3      	cmp	r3, r6
 800c3a4:	bfbf      	itttt	lt
 800c3a6:	9b06      	ldrlt	r3, [sp, #24]
 800c3a8:	9606      	strlt	r6, [sp, #24]
 800c3aa:	1af2      	sublt	r2, r6, r3
 800c3ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c3ae:	bfb6      	itet	lt
 800c3b0:	189b      	addlt	r3, r3, r2
 800c3b2:	1b9e      	subge	r6, r3, r6
 800c3b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c3b6:	9b01      	ldr	r3, [sp, #4]
 800c3b8:	bfb8      	it	lt
 800c3ba:	2600      	movlt	r6, #0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfb5      	itete	lt
 800c3c0:	eba8 0503 	sublt.w	r5, r8, r3
 800c3c4:	9b01      	ldrge	r3, [sp, #4]
 800c3c6:	2300      	movlt	r3, #0
 800c3c8:	4645      	movge	r5, r8
 800c3ca:	e747      	b.n	800c25c <_dtoa_r+0x75c>
 800c3cc:	9e06      	ldr	r6, [sp, #24]
 800c3ce:	9f08      	ldr	r7, [sp, #32]
 800c3d0:	4645      	mov	r5, r8
 800c3d2:	e74c      	b.n	800c26e <_dtoa_r+0x76e>
 800c3d4:	9a06      	ldr	r2, [sp, #24]
 800c3d6:	e775      	b.n	800c2c4 <_dtoa_r+0x7c4>
 800c3d8:	9b05      	ldr	r3, [sp, #20]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	dc18      	bgt.n	800c410 <_dtoa_r+0x910>
 800c3de:	9b02      	ldr	r3, [sp, #8]
 800c3e0:	b9b3      	cbnz	r3, 800c410 <_dtoa_r+0x910>
 800c3e2:	9b03      	ldr	r3, [sp, #12]
 800c3e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3e8:	b9a3      	cbnz	r3, 800c414 <_dtoa_r+0x914>
 800c3ea:	9b03      	ldr	r3, [sp, #12]
 800c3ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3f0:	0d1b      	lsrs	r3, r3, #20
 800c3f2:	051b      	lsls	r3, r3, #20
 800c3f4:	b12b      	cbz	r3, 800c402 <_dtoa_r+0x902>
 800c3f6:	9b04      	ldr	r3, [sp, #16]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	f108 0801 	add.w	r8, r8, #1
 800c400:	2301      	movs	r3, #1
 800c402:	9306      	str	r3, [sp, #24]
 800c404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c406:	2b00      	cmp	r3, #0
 800c408:	f47f af74 	bne.w	800c2f4 <_dtoa_r+0x7f4>
 800c40c:	2001      	movs	r0, #1
 800c40e:	e779      	b.n	800c304 <_dtoa_r+0x804>
 800c410:	2300      	movs	r3, #0
 800c412:	e7f6      	b.n	800c402 <_dtoa_r+0x902>
 800c414:	9b02      	ldr	r3, [sp, #8]
 800c416:	e7f4      	b.n	800c402 <_dtoa_r+0x902>
 800c418:	d085      	beq.n	800c326 <_dtoa_r+0x826>
 800c41a:	4618      	mov	r0, r3
 800c41c:	301c      	adds	r0, #28
 800c41e:	e77d      	b.n	800c31c <_dtoa_r+0x81c>
 800c420:	40240000 	.word	0x40240000
 800c424:	9b01      	ldr	r3, [sp, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	dc38      	bgt.n	800c49c <_dtoa_r+0x99c>
 800c42a:	9b05      	ldr	r3, [sp, #20]
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	dd35      	ble.n	800c49c <_dtoa_r+0x99c>
 800c430:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c434:	f1b9 0f00 	cmp.w	r9, #0
 800c438:	d10d      	bne.n	800c456 <_dtoa_r+0x956>
 800c43a:	4631      	mov	r1, r6
 800c43c:	464b      	mov	r3, r9
 800c43e:	2205      	movs	r2, #5
 800c440:	4620      	mov	r0, r4
 800c442:	f000 ff75 	bl	800d330 <__multadd>
 800c446:	4601      	mov	r1, r0
 800c448:	4606      	mov	r6, r0
 800c44a:	4658      	mov	r0, fp
 800c44c:	f001 f9d6 	bl	800d7fc <__mcmp>
 800c450:	2800      	cmp	r0, #0
 800c452:	f73f adbd 	bgt.w	800bfd0 <_dtoa_r+0x4d0>
 800c456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c458:	9d00      	ldr	r5, [sp, #0]
 800c45a:	ea6f 0a03 	mvn.w	sl, r3
 800c45e:	f04f 0800 	mov.w	r8, #0
 800c462:	4631      	mov	r1, r6
 800c464:	4620      	mov	r0, r4
 800c466:	f000 ff41 	bl	800d2ec <_Bfree>
 800c46a:	2f00      	cmp	r7, #0
 800c46c:	f43f aeb4 	beq.w	800c1d8 <_dtoa_r+0x6d8>
 800c470:	f1b8 0f00 	cmp.w	r8, #0
 800c474:	d005      	beq.n	800c482 <_dtoa_r+0x982>
 800c476:	45b8      	cmp	r8, r7
 800c478:	d003      	beq.n	800c482 <_dtoa_r+0x982>
 800c47a:	4641      	mov	r1, r8
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 ff35 	bl	800d2ec <_Bfree>
 800c482:	4639      	mov	r1, r7
 800c484:	4620      	mov	r0, r4
 800c486:	f000 ff31 	bl	800d2ec <_Bfree>
 800c48a:	e6a5      	b.n	800c1d8 <_dtoa_r+0x6d8>
 800c48c:	2600      	movs	r6, #0
 800c48e:	4637      	mov	r7, r6
 800c490:	e7e1      	b.n	800c456 <_dtoa_r+0x956>
 800c492:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c494:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c498:	4637      	mov	r7, r6
 800c49a:	e599      	b.n	800bfd0 <_dtoa_r+0x4d0>
 800c49c:	9b08      	ldr	r3, [sp, #32]
 800c49e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 80fd 	beq.w	800c6a2 <_dtoa_r+0xba2>
 800c4a8:	2d00      	cmp	r5, #0
 800c4aa:	dd05      	ble.n	800c4b8 <_dtoa_r+0x9b8>
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	462a      	mov	r2, r5
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f001 f937 	bl	800d724 <__lshift>
 800c4b6:	4607      	mov	r7, r0
 800c4b8:	9b06      	ldr	r3, [sp, #24]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d05c      	beq.n	800c578 <_dtoa_r+0xa78>
 800c4be:	6879      	ldr	r1, [r7, #4]
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 fed3 	bl	800d26c <_Balloc>
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	b928      	cbnz	r0, 800c4d6 <_dtoa_r+0x9d6>
 800c4ca:	4b80      	ldr	r3, [pc, #512]	; (800c6cc <_dtoa_r+0xbcc>)
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c4d2:	f7ff bb2e 	b.w	800bb32 <_dtoa_r+0x32>
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	3202      	adds	r2, #2
 800c4da:	0092      	lsls	r2, r2, #2
 800c4dc:	f107 010c 	add.w	r1, r7, #12
 800c4e0:	300c      	adds	r0, #12
 800c4e2:	f7fd fa3f 	bl	8009964 <memcpy>
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f001 f91a 	bl	800d724 <__lshift>
 800c4f0:	9b00      	ldr	r3, [sp, #0]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	9b00      	ldr	r3, [sp, #0]
 800c4f8:	444b      	add	r3, r9
 800c4fa:	9307      	str	r3, [sp, #28]
 800c4fc:	9b02      	ldr	r3, [sp, #8]
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	46b8      	mov	r8, r7
 800c504:	9306      	str	r3, [sp, #24]
 800c506:	4607      	mov	r7, r0
 800c508:	9b01      	ldr	r3, [sp, #4]
 800c50a:	4631      	mov	r1, r6
 800c50c:	3b01      	subs	r3, #1
 800c50e:	4658      	mov	r0, fp
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	f7ff fa6a 	bl	800b9ea <quorem>
 800c516:	4603      	mov	r3, r0
 800c518:	3330      	adds	r3, #48	; 0x30
 800c51a:	9004      	str	r0, [sp, #16]
 800c51c:	4641      	mov	r1, r8
 800c51e:	4658      	mov	r0, fp
 800c520:	9308      	str	r3, [sp, #32]
 800c522:	f001 f96b 	bl	800d7fc <__mcmp>
 800c526:	463a      	mov	r2, r7
 800c528:	4681      	mov	r9, r0
 800c52a:	4631      	mov	r1, r6
 800c52c:	4620      	mov	r0, r4
 800c52e:	f001 f981 	bl	800d834 <__mdiff>
 800c532:	68c2      	ldr	r2, [r0, #12]
 800c534:	9b08      	ldr	r3, [sp, #32]
 800c536:	4605      	mov	r5, r0
 800c538:	bb02      	cbnz	r2, 800c57c <_dtoa_r+0xa7c>
 800c53a:	4601      	mov	r1, r0
 800c53c:	4658      	mov	r0, fp
 800c53e:	f001 f95d 	bl	800d7fc <__mcmp>
 800c542:	9b08      	ldr	r3, [sp, #32]
 800c544:	4602      	mov	r2, r0
 800c546:	4629      	mov	r1, r5
 800c548:	4620      	mov	r0, r4
 800c54a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c54e:	f000 fecd 	bl	800d2ec <_Bfree>
 800c552:	9b05      	ldr	r3, [sp, #20]
 800c554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c556:	9d01      	ldr	r5, [sp, #4]
 800c558:	ea43 0102 	orr.w	r1, r3, r2
 800c55c:	9b06      	ldr	r3, [sp, #24]
 800c55e:	430b      	orrs	r3, r1
 800c560:	9b08      	ldr	r3, [sp, #32]
 800c562:	d10d      	bne.n	800c580 <_dtoa_r+0xa80>
 800c564:	2b39      	cmp	r3, #57	; 0x39
 800c566:	d029      	beq.n	800c5bc <_dtoa_r+0xabc>
 800c568:	f1b9 0f00 	cmp.w	r9, #0
 800c56c:	dd01      	ble.n	800c572 <_dtoa_r+0xa72>
 800c56e:	9b04      	ldr	r3, [sp, #16]
 800c570:	3331      	adds	r3, #49	; 0x31
 800c572:	9a02      	ldr	r2, [sp, #8]
 800c574:	7013      	strb	r3, [r2, #0]
 800c576:	e774      	b.n	800c462 <_dtoa_r+0x962>
 800c578:	4638      	mov	r0, r7
 800c57a:	e7b9      	b.n	800c4f0 <_dtoa_r+0x9f0>
 800c57c:	2201      	movs	r2, #1
 800c57e:	e7e2      	b.n	800c546 <_dtoa_r+0xa46>
 800c580:	f1b9 0f00 	cmp.w	r9, #0
 800c584:	db06      	blt.n	800c594 <_dtoa_r+0xa94>
 800c586:	9905      	ldr	r1, [sp, #20]
 800c588:	ea41 0909 	orr.w	r9, r1, r9
 800c58c:	9906      	ldr	r1, [sp, #24]
 800c58e:	ea59 0101 	orrs.w	r1, r9, r1
 800c592:	d120      	bne.n	800c5d6 <_dtoa_r+0xad6>
 800c594:	2a00      	cmp	r2, #0
 800c596:	ddec      	ble.n	800c572 <_dtoa_r+0xa72>
 800c598:	4659      	mov	r1, fp
 800c59a:	2201      	movs	r2, #1
 800c59c:	4620      	mov	r0, r4
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	f001 f8c0 	bl	800d724 <__lshift>
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	4683      	mov	fp, r0
 800c5a8:	f001 f928 	bl	800d7fc <__mcmp>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	9b01      	ldr	r3, [sp, #4]
 800c5b0:	dc02      	bgt.n	800c5b8 <_dtoa_r+0xab8>
 800c5b2:	d1de      	bne.n	800c572 <_dtoa_r+0xa72>
 800c5b4:	07da      	lsls	r2, r3, #31
 800c5b6:	d5dc      	bpl.n	800c572 <_dtoa_r+0xa72>
 800c5b8:	2b39      	cmp	r3, #57	; 0x39
 800c5ba:	d1d8      	bne.n	800c56e <_dtoa_r+0xa6e>
 800c5bc:	9a02      	ldr	r2, [sp, #8]
 800c5be:	2339      	movs	r3, #57	; 0x39
 800c5c0:	7013      	strb	r3, [r2, #0]
 800c5c2:	462b      	mov	r3, r5
 800c5c4:	461d      	mov	r5, r3
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c5cc:	2a39      	cmp	r2, #57	; 0x39
 800c5ce:	d050      	beq.n	800c672 <_dtoa_r+0xb72>
 800c5d0:	3201      	adds	r2, #1
 800c5d2:	701a      	strb	r2, [r3, #0]
 800c5d4:	e745      	b.n	800c462 <_dtoa_r+0x962>
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	dd03      	ble.n	800c5e2 <_dtoa_r+0xae2>
 800c5da:	2b39      	cmp	r3, #57	; 0x39
 800c5dc:	d0ee      	beq.n	800c5bc <_dtoa_r+0xabc>
 800c5de:	3301      	adds	r3, #1
 800c5e0:	e7c7      	b.n	800c572 <_dtoa_r+0xa72>
 800c5e2:	9a01      	ldr	r2, [sp, #4]
 800c5e4:	9907      	ldr	r1, [sp, #28]
 800c5e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c5ea:	428a      	cmp	r2, r1
 800c5ec:	d02a      	beq.n	800c644 <_dtoa_r+0xb44>
 800c5ee:	4659      	mov	r1, fp
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	220a      	movs	r2, #10
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f000 fe9b 	bl	800d330 <__multadd>
 800c5fa:	45b8      	cmp	r8, r7
 800c5fc:	4683      	mov	fp, r0
 800c5fe:	f04f 0300 	mov.w	r3, #0
 800c602:	f04f 020a 	mov.w	r2, #10
 800c606:	4641      	mov	r1, r8
 800c608:	4620      	mov	r0, r4
 800c60a:	d107      	bne.n	800c61c <_dtoa_r+0xb1c>
 800c60c:	f000 fe90 	bl	800d330 <__multadd>
 800c610:	4680      	mov	r8, r0
 800c612:	4607      	mov	r7, r0
 800c614:	9b01      	ldr	r3, [sp, #4]
 800c616:	3301      	adds	r3, #1
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	e775      	b.n	800c508 <_dtoa_r+0xa08>
 800c61c:	f000 fe88 	bl	800d330 <__multadd>
 800c620:	4639      	mov	r1, r7
 800c622:	4680      	mov	r8, r0
 800c624:	2300      	movs	r3, #0
 800c626:	220a      	movs	r2, #10
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 fe81 	bl	800d330 <__multadd>
 800c62e:	4607      	mov	r7, r0
 800c630:	e7f0      	b.n	800c614 <_dtoa_r+0xb14>
 800c632:	f1b9 0f00 	cmp.w	r9, #0
 800c636:	9a00      	ldr	r2, [sp, #0]
 800c638:	bfcc      	ite	gt
 800c63a:	464d      	movgt	r5, r9
 800c63c:	2501      	movle	r5, #1
 800c63e:	4415      	add	r5, r2
 800c640:	f04f 0800 	mov.w	r8, #0
 800c644:	4659      	mov	r1, fp
 800c646:	2201      	movs	r2, #1
 800c648:	4620      	mov	r0, r4
 800c64a:	9301      	str	r3, [sp, #4]
 800c64c:	f001 f86a 	bl	800d724 <__lshift>
 800c650:	4631      	mov	r1, r6
 800c652:	4683      	mov	fp, r0
 800c654:	f001 f8d2 	bl	800d7fc <__mcmp>
 800c658:	2800      	cmp	r0, #0
 800c65a:	dcb2      	bgt.n	800c5c2 <_dtoa_r+0xac2>
 800c65c:	d102      	bne.n	800c664 <_dtoa_r+0xb64>
 800c65e:	9b01      	ldr	r3, [sp, #4]
 800c660:	07db      	lsls	r3, r3, #31
 800c662:	d4ae      	bmi.n	800c5c2 <_dtoa_r+0xac2>
 800c664:	462b      	mov	r3, r5
 800c666:	461d      	mov	r5, r3
 800c668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c66c:	2a30      	cmp	r2, #48	; 0x30
 800c66e:	d0fa      	beq.n	800c666 <_dtoa_r+0xb66>
 800c670:	e6f7      	b.n	800c462 <_dtoa_r+0x962>
 800c672:	9a00      	ldr	r2, [sp, #0]
 800c674:	429a      	cmp	r2, r3
 800c676:	d1a5      	bne.n	800c5c4 <_dtoa_r+0xac4>
 800c678:	f10a 0a01 	add.w	sl, sl, #1
 800c67c:	2331      	movs	r3, #49	; 0x31
 800c67e:	e779      	b.n	800c574 <_dtoa_r+0xa74>
 800c680:	4b13      	ldr	r3, [pc, #76]	; (800c6d0 <_dtoa_r+0xbd0>)
 800c682:	f7ff baaf 	b.w	800bbe4 <_dtoa_r+0xe4>
 800c686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f47f aa86 	bne.w	800bb9a <_dtoa_r+0x9a>
 800c68e:	4b11      	ldr	r3, [pc, #68]	; (800c6d4 <_dtoa_r+0xbd4>)
 800c690:	f7ff baa8 	b.w	800bbe4 <_dtoa_r+0xe4>
 800c694:	f1b9 0f00 	cmp.w	r9, #0
 800c698:	dc03      	bgt.n	800c6a2 <_dtoa_r+0xba2>
 800c69a:	9b05      	ldr	r3, [sp, #20]
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	f73f aec9 	bgt.w	800c434 <_dtoa_r+0x934>
 800c6a2:	9d00      	ldr	r5, [sp, #0]
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	4658      	mov	r0, fp
 800c6a8:	f7ff f99f 	bl	800b9ea <quorem>
 800c6ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c6b0:	f805 3b01 	strb.w	r3, [r5], #1
 800c6b4:	9a00      	ldr	r2, [sp, #0]
 800c6b6:	1aaa      	subs	r2, r5, r2
 800c6b8:	4591      	cmp	r9, r2
 800c6ba:	ddba      	ble.n	800c632 <_dtoa_r+0xb32>
 800c6bc:	4659      	mov	r1, fp
 800c6be:	2300      	movs	r3, #0
 800c6c0:	220a      	movs	r2, #10
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 fe34 	bl	800d330 <__multadd>
 800c6c8:	4683      	mov	fp, r0
 800c6ca:	e7eb      	b.n	800c6a4 <_dtoa_r+0xba4>
 800c6cc:	0802842c 	.word	0x0802842c
 800c6d0:	0802822d 	.word	0x0802822d
 800c6d4:	080283a9 	.word	0x080283a9

0800c6d8 <__sflush_r>:
 800c6d8:	898a      	ldrh	r2, [r1, #12]
 800c6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6de:	4605      	mov	r5, r0
 800c6e0:	0710      	lsls	r0, r2, #28
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	d458      	bmi.n	800c798 <__sflush_r+0xc0>
 800c6e6:	684b      	ldr	r3, [r1, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	dc05      	bgt.n	800c6f8 <__sflush_r+0x20>
 800c6ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	dc02      	bgt.n	800c6f8 <__sflush_r+0x20>
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6fa:	2e00      	cmp	r6, #0
 800c6fc:	d0f9      	beq.n	800c6f2 <__sflush_r+0x1a>
 800c6fe:	2300      	movs	r3, #0
 800c700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c704:	682f      	ldr	r7, [r5, #0]
 800c706:	602b      	str	r3, [r5, #0]
 800c708:	d032      	beq.n	800c770 <__sflush_r+0x98>
 800c70a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	075a      	lsls	r2, r3, #29
 800c710:	d505      	bpl.n	800c71e <__sflush_r+0x46>
 800c712:	6863      	ldr	r3, [r4, #4]
 800c714:	1ac0      	subs	r0, r0, r3
 800c716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c718:	b10b      	cbz	r3, 800c71e <__sflush_r+0x46>
 800c71a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c71c:	1ac0      	subs	r0, r0, r3
 800c71e:	2300      	movs	r3, #0
 800c720:	4602      	mov	r2, r0
 800c722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c724:	6a21      	ldr	r1, [r4, #32]
 800c726:	4628      	mov	r0, r5
 800c728:	47b0      	blx	r6
 800c72a:	1c43      	adds	r3, r0, #1
 800c72c:	89a3      	ldrh	r3, [r4, #12]
 800c72e:	d106      	bne.n	800c73e <__sflush_r+0x66>
 800c730:	6829      	ldr	r1, [r5, #0]
 800c732:	291d      	cmp	r1, #29
 800c734:	d82c      	bhi.n	800c790 <__sflush_r+0xb8>
 800c736:	4a2a      	ldr	r2, [pc, #168]	; (800c7e0 <__sflush_r+0x108>)
 800c738:	40ca      	lsrs	r2, r1
 800c73a:	07d6      	lsls	r6, r2, #31
 800c73c:	d528      	bpl.n	800c790 <__sflush_r+0xb8>
 800c73e:	2200      	movs	r2, #0
 800c740:	6062      	str	r2, [r4, #4]
 800c742:	04d9      	lsls	r1, r3, #19
 800c744:	6922      	ldr	r2, [r4, #16]
 800c746:	6022      	str	r2, [r4, #0]
 800c748:	d504      	bpl.n	800c754 <__sflush_r+0x7c>
 800c74a:	1c42      	adds	r2, r0, #1
 800c74c:	d101      	bne.n	800c752 <__sflush_r+0x7a>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	b903      	cbnz	r3, 800c754 <__sflush_r+0x7c>
 800c752:	6560      	str	r0, [r4, #84]	; 0x54
 800c754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c756:	602f      	str	r7, [r5, #0]
 800c758:	2900      	cmp	r1, #0
 800c75a:	d0ca      	beq.n	800c6f2 <__sflush_r+0x1a>
 800c75c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c760:	4299      	cmp	r1, r3
 800c762:	d002      	beq.n	800c76a <__sflush_r+0x92>
 800c764:	4628      	mov	r0, r5
 800c766:	f7fd f913 	bl	8009990 <_free_r>
 800c76a:	2000      	movs	r0, #0
 800c76c:	6360      	str	r0, [r4, #52]	; 0x34
 800c76e:	e7c1      	b.n	800c6f4 <__sflush_r+0x1c>
 800c770:	6a21      	ldr	r1, [r4, #32]
 800c772:	2301      	movs	r3, #1
 800c774:	4628      	mov	r0, r5
 800c776:	47b0      	blx	r6
 800c778:	1c41      	adds	r1, r0, #1
 800c77a:	d1c7      	bne.n	800c70c <__sflush_r+0x34>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d0c4      	beq.n	800c70c <__sflush_r+0x34>
 800c782:	2b1d      	cmp	r3, #29
 800c784:	d001      	beq.n	800c78a <__sflush_r+0xb2>
 800c786:	2b16      	cmp	r3, #22
 800c788:	d101      	bne.n	800c78e <__sflush_r+0xb6>
 800c78a:	602f      	str	r7, [r5, #0]
 800c78c:	e7b1      	b.n	800c6f2 <__sflush_r+0x1a>
 800c78e:	89a3      	ldrh	r3, [r4, #12]
 800c790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c794:	81a3      	strh	r3, [r4, #12]
 800c796:	e7ad      	b.n	800c6f4 <__sflush_r+0x1c>
 800c798:	690f      	ldr	r7, [r1, #16]
 800c79a:	2f00      	cmp	r7, #0
 800c79c:	d0a9      	beq.n	800c6f2 <__sflush_r+0x1a>
 800c79e:	0793      	lsls	r3, r2, #30
 800c7a0:	680e      	ldr	r6, [r1, #0]
 800c7a2:	bf08      	it	eq
 800c7a4:	694b      	ldreq	r3, [r1, #20]
 800c7a6:	600f      	str	r7, [r1, #0]
 800c7a8:	bf18      	it	ne
 800c7aa:	2300      	movne	r3, #0
 800c7ac:	eba6 0807 	sub.w	r8, r6, r7
 800c7b0:	608b      	str	r3, [r1, #8]
 800c7b2:	f1b8 0f00 	cmp.w	r8, #0
 800c7b6:	dd9c      	ble.n	800c6f2 <__sflush_r+0x1a>
 800c7b8:	6a21      	ldr	r1, [r4, #32]
 800c7ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7bc:	4643      	mov	r3, r8
 800c7be:	463a      	mov	r2, r7
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	47b0      	blx	r6
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	dc06      	bgt.n	800c7d6 <__sflush_r+0xfe>
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ce:	81a3      	strh	r3, [r4, #12]
 800c7d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7d4:	e78e      	b.n	800c6f4 <__sflush_r+0x1c>
 800c7d6:	4407      	add	r7, r0
 800c7d8:	eba8 0800 	sub.w	r8, r8, r0
 800c7dc:	e7e9      	b.n	800c7b2 <__sflush_r+0xda>
 800c7de:	bf00      	nop
 800c7e0:	20400001 	.word	0x20400001

0800c7e4 <_fflush_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	690b      	ldr	r3, [r1, #16]
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	b913      	cbnz	r3, 800c7f4 <_fflush_r+0x10>
 800c7ee:	2500      	movs	r5, #0
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	bd38      	pop	{r3, r4, r5, pc}
 800c7f4:	b118      	cbz	r0, 800c7fe <_fflush_r+0x1a>
 800c7f6:	6983      	ldr	r3, [r0, #24]
 800c7f8:	b90b      	cbnz	r3, 800c7fe <_fflush_r+0x1a>
 800c7fa:	f000 f887 	bl	800c90c <__sinit>
 800c7fe:	4b14      	ldr	r3, [pc, #80]	; (800c850 <_fflush_r+0x6c>)
 800c800:	429c      	cmp	r4, r3
 800c802:	d11b      	bne.n	800c83c <_fflush_r+0x58>
 800c804:	686c      	ldr	r4, [r5, #4]
 800c806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0ef      	beq.n	800c7ee <_fflush_r+0xa>
 800c80e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c810:	07d0      	lsls	r0, r2, #31
 800c812:	d404      	bmi.n	800c81e <_fflush_r+0x3a>
 800c814:	0599      	lsls	r1, r3, #22
 800c816:	d402      	bmi.n	800c81e <_fflush_r+0x3a>
 800c818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c81a:	f000 fc88 	bl	800d12e <__retarget_lock_acquire_recursive>
 800c81e:	4628      	mov	r0, r5
 800c820:	4621      	mov	r1, r4
 800c822:	f7ff ff59 	bl	800c6d8 <__sflush_r>
 800c826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c828:	07da      	lsls	r2, r3, #31
 800c82a:	4605      	mov	r5, r0
 800c82c:	d4e0      	bmi.n	800c7f0 <_fflush_r+0xc>
 800c82e:	89a3      	ldrh	r3, [r4, #12]
 800c830:	059b      	lsls	r3, r3, #22
 800c832:	d4dd      	bmi.n	800c7f0 <_fflush_r+0xc>
 800c834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c836:	f000 fc7b 	bl	800d130 <__retarget_lock_release_recursive>
 800c83a:	e7d9      	b.n	800c7f0 <_fflush_r+0xc>
 800c83c:	4b05      	ldr	r3, [pc, #20]	; (800c854 <_fflush_r+0x70>)
 800c83e:	429c      	cmp	r4, r3
 800c840:	d101      	bne.n	800c846 <_fflush_r+0x62>
 800c842:	68ac      	ldr	r4, [r5, #8]
 800c844:	e7df      	b.n	800c806 <_fflush_r+0x22>
 800c846:	4b04      	ldr	r3, [pc, #16]	; (800c858 <_fflush_r+0x74>)
 800c848:	429c      	cmp	r4, r3
 800c84a:	bf08      	it	eq
 800c84c:	68ec      	ldreq	r4, [r5, #12]
 800c84e:	e7da      	b.n	800c806 <_fflush_r+0x22>
 800c850:	08028460 	.word	0x08028460
 800c854:	08028480 	.word	0x08028480
 800c858:	08028440 	.word	0x08028440

0800c85c <std>:
 800c85c:	2300      	movs	r3, #0
 800c85e:	b510      	push	{r4, lr}
 800c860:	4604      	mov	r4, r0
 800c862:	e9c0 3300 	strd	r3, r3, [r0]
 800c866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c86a:	6083      	str	r3, [r0, #8]
 800c86c:	8181      	strh	r1, [r0, #12]
 800c86e:	6643      	str	r3, [r0, #100]	; 0x64
 800c870:	81c2      	strh	r2, [r0, #14]
 800c872:	6183      	str	r3, [r0, #24]
 800c874:	4619      	mov	r1, r3
 800c876:	2208      	movs	r2, #8
 800c878:	305c      	adds	r0, #92	; 0x5c
 800c87a:	f7fd f881 	bl	8009980 <memset>
 800c87e:	4b05      	ldr	r3, [pc, #20]	; (800c894 <std+0x38>)
 800c880:	6263      	str	r3, [r4, #36]	; 0x24
 800c882:	4b05      	ldr	r3, [pc, #20]	; (800c898 <std+0x3c>)
 800c884:	62a3      	str	r3, [r4, #40]	; 0x28
 800c886:	4b05      	ldr	r3, [pc, #20]	; (800c89c <std+0x40>)
 800c888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c88a:	4b05      	ldr	r3, [pc, #20]	; (800c8a0 <std+0x44>)
 800c88c:	6224      	str	r4, [r4, #32]
 800c88e:	6323      	str	r3, [r4, #48]	; 0x30
 800c890:	bd10      	pop	{r4, pc}
 800c892:	bf00      	nop
 800c894:	0800dfa1 	.word	0x0800dfa1
 800c898:	0800dfc3 	.word	0x0800dfc3
 800c89c:	0800dffb 	.word	0x0800dffb
 800c8a0:	0800e01f 	.word	0x0800e01f

0800c8a4 <_cleanup_r>:
 800c8a4:	4901      	ldr	r1, [pc, #4]	; (800c8ac <_cleanup_r+0x8>)
 800c8a6:	f000 b8af 	b.w	800ca08 <_fwalk_reent>
 800c8aa:	bf00      	nop
 800c8ac:	0800c7e5 	.word	0x0800c7e5

0800c8b0 <__sfmoreglue>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	1e4a      	subs	r2, r1, #1
 800c8b4:	2568      	movs	r5, #104	; 0x68
 800c8b6:	4355      	muls	r5, r2
 800c8b8:	460e      	mov	r6, r1
 800c8ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8be:	f7fd f8b7 	bl	8009a30 <_malloc_r>
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	b140      	cbz	r0, 800c8d8 <__sfmoreglue+0x28>
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	e9c0 1600 	strd	r1, r6, [r0]
 800c8cc:	300c      	adds	r0, #12
 800c8ce:	60a0      	str	r0, [r4, #8]
 800c8d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c8d4:	f7fd f854 	bl	8009980 <memset>
 800c8d8:	4620      	mov	r0, r4
 800c8da:	bd70      	pop	{r4, r5, r6, pc}

0800c8dc <__sfp_lock_acquire>:
 800c8dc:	4801      	ldr	r0, [pc, #4]	; (800c8e4 <__sfp_lock_acquire+0x8>)
 800c8de:	f000 bc26 	b.w	800d12e <__retarget_lock_acquire_recursive>
 800c8e2:	bf00      	nop
 800c8e4:	2000d38c 	.word	0x2000d38c

0800c8e8 <__sfp_lock_release>:
 800c8e8:	4801      	ldr	r0, [pc, #4]	; (800c8f0 <__sfp_lock_release+0x8>)
 800c8ea:	f000 bc21 	b.w	800d130 <__retarget_lock_release_recursive>
 800c8ee:	bf00      	nop
 800c8f0:	2000d38c 	.word	0x2000d38c

0800c8f4 <__sinit_lock_acquire>:
 800c8f4:	4801      	ldr	r0, [pc, #4]	; (800c8fc <__sinit_lock_acquire+0x8>)
 800c8f6:	f000 bc1a 	b.w	800d12e <__retarget_lock_acquire_recursive>
 800c8fa:	bf00      	nop
 800c8fc:	2000d387 	.word	0x2000d387

0800c900 <__sinit_lock_release>:
 800c900:	4801      	ldr	r0, [pc, #4]	; (800c908 <__sinit_lock_release+0x8>)
 800c902:	f000 bc15 	b.w	800d130 <__retarget_lock_release_recursive>
 800c906:	bf00      	nop
 800c908:	2000d387 	.word	0x2000d387

0800c90c <__sinit>:
 800c90c:	b510      	push	{r4, lr}
 800c90e:	4604      	mov	r4, r0
 800c910:	f7ff fff0 	bl	800c8f4 <__sinit_lock_acquire>
 800c914:	69a3      	ldr	r3, [r4, #24]
 800c916:	b11b      	cbz	r3, 800c920 <__sinit+0x14>
 800c918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c91c:	f7ff bff0 	b.w	800c900 <__sinit_lock_release>
 800c920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c924:	6523      	str	r3, [r4, #80]	; 0x50
 800c926:	4b13      	ldr	r3, [pc, #76]	; (800c974 <__sinit+0x68>)
 800c928:	4a13      	ldr	r2, [pc, #76]	; (800c978 <__sinit+0x6c>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c92e:	42a3      	cmp	r3, r4
 800c930:	bf04      	itt	eq
 800c932:	2301      	moveq	r3, #1
 800c934:	61a3      	streq	r3, [r4, #24]
 800c936:	4620      	mov	r0, r4
 800c938:	f000 f820 	bl	800c97c <__sfp>
 800c93c:	6060      	str	r0, [r4, #4]
 800c93e:	4620      	mov	r0, r4
 800c940:	f000 f81c 	bl	800c97c <__sfp>
 800c944:	60a0      	str	r0, [r4, #8]
 800c946:	4620      	mov	r0, r4
 800c948:	f000 f818 	bl	800c97c <__sfp>
 800c94c:	2200      	movs	r2, #0
 800c94e:	60e0      	str	r0, [r4, #12]
 800c950:	2104      	movs	r1, #4
 800c952:	6860      	ldr	r0, [r4, #4]
 800c954:	f7ff ff82 	bl	800c85c <std>
 800c958:	68a0      	ldr	r0, [r4, #8]
 800c95a:	2201      	movs	r2, #1
 800c95c:	2109      	movs	r1, #9
 800c95e:	f7ff ff7d 	bl	800c85c <std>
 800c962:	68e0      	ldr	r0, [r4, #12]
 800c964:	2202      	movs	r2, #2
 800c966:	2112      	movs	r1, #18
 800c968:	f7ff ff78 	bl	800c85c <std>
 800c96c:	2301      	movs	r3, #1
 800c96e:	61a3      	str	r3, [r4, #24]
 800c970:	e7d2      	b.n	800c918 <__sinit+0xc>
 800c972:	bf00      	nop
 800c974:	08028208 	.word	0x08028208
 800c978:	0800c8a5 	.word	0x0800c8a5

0800c97c <__sfp>:
 800c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97e:	4607      	mov	r7, r0
 800c980:	f7ff ffac 	bl	800c8dc <__sfp_lock_acquire>
 800c984:	4b1e      	ldr	r3, [pc, #120]	; (800ca00 <__sfp+0x84>)
 800c986:	681e      	ldr	r6, [r3, #0]
 800c988:	69b3      	ldr	r3, [r6, #24]
 800c98a:	b913      	cbnz	r3, 800c992 <__sfp+0x16>
 800c98c:	4630      	mov	r0, r6
 800c98e:	f7ff ffbd 	bl	800c90c <__sinit>
 800c992:	3648      	adds	r6, #72	; 0x48
 800c994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c998:	3b01      	subs	r3, #1
 800c99a:	d503      	bpl.n	800c9a4 <__sfp+0x28>
 800c99c:	6833      	ldr	r3, [r6, #0]
 800c99e:	b30b      	cbz	r3, 800c9e4 <__sfp+0x68>
 800c9a0:	6836      	ldr	r6, [r6, #0]
 800c9a2:	e7f7      	b.n	800c994 <__sfp+0x18>
 800c9a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c9a8:	b9d5      	cbnz	r5, 800c9e0 <__sfp+0x64>
 800c9aa:	4b16      	ldr	r3, [pc, #88]	; (800ca04 <__sfp+0x88>)
 800c9ac:	60e3      	str	r3, [r4, #12]
 800c9ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9b2:	6665      	str	r5, [r4, #100]	; 0x64
 800c9b4:	f000 fbba 	bl	800d12c <__retarget_lock_init_recursive>
 800c9b8:	f7ff ff96 	bl	800c8e8 <__sfp_lock_release>
 800c9bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c9c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c9c4:	6025      	str	r5, [r4, #0]
 800c9c6:	61a5      	str	r5, [r4, #24]
 800c9c8:	2208      	movs	r2, #8
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c9d0:	f7fc ffd6 	bl	8009980 <memset>
 800c9d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c9d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9dc:	4620      	mov	r0, r4
 800c9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e0:	3468      	adds	r4, #104	; 0x68
 800c9e2:	e7d9      	b.n	800c998 <__sfp+0x1c>
 800c9e4:	2104      	movs	r1, #4
 800c9e6:	4638      	mov	r0, r7
 800c9e8:	f7ff ff62 	bl	800c8b0 <__sfmoreglue>
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	6030      	str	r0, [r6, #0]
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d1d5      	bne.n	800c9a0 <__sfp+0x24>
 800c9f4:	f7ff ff78 	bl	800c8e8 <__sfp_lock_release>
 800c9f8:	230c      	movs	r3, #12
 800c9fa:	603b      	str	r3, [r7, #0]
 800c9fc:	e7ee      	b.n	800c9dc <__sfp+0x60>
 800c9fe:	bf00      	nop
 800ca00:	08028208 	.word	0x08028208
 800ca04:	ffff0001 	.word	0xffff0001

0800ca08 <_fwalk_reent>:
 800ca08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	4688      	mov	r8, r1
 800ca10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca14:	2700      	movs	r7, #0
 800ca16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ca1e:	d505      	bpl.n	800ca2c <_fwalk_reent+0x24>
 800ca20:	6824      	ldr	r4, [r4, #0]
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	d1f7      	bne.n	800ca16 <_fwalk_reent+0xe>
 800ca26:	4638      	mov	r0, r7
 800ca28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca2c:	89ab      	ldrh	r3, [r5, #12]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d907      	bls.n	800ca42 <_fwalk_reent+0x3a>
 800ca32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca36:	3301      	adds	r3, #1
 800ca38:	d003      	beq.n	800ca42 <_fwalk_reent+0x3a>
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	47c0      	blx	r8
 800ca40:	4307      	orrs	r7, r0
 800ca42:	3568      	adds	r5, #104	; 0x68
 800ca44:	e7e9      	b.n	800ca1a <_fwalk_reent+0x12>

0800ca46 <rshift>:
 800ca46:	6903      	ldr	r3, [r0, #16]
 800ca48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca50:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca54:	f100 0414 	add.w	r4, r0, #20
 800ca58:	dd45      	ble.n	800cae6 <rshift+0xa0>
 800ca5a:	f011 011f 	ands.w	r1, r1, #31
 800ca5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca66:	d10c      	bne.n	800ca82 <rshift+0x3c>
 800ca68:	f100 0710 	add.w	r7, r0, #16
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	42b1      	cmp	r1, r6
 800ca70:	d334      	bcc.n	800cadc <rshift+0x96>
 800ca72:	1a9b      	subs	r3, r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	1eea      	subs	r2, r5, #3
 800ca78:	4296      	cmp	r6, r2
 800ca7a:	bf38      	it	cc
 800ca7c:	2300      	movcc	r3, #0
 800ca7e:	4423      	add	r3, r4
 800ca80:	e015      	b.n	800caae <rshift+0x68>
 800ca82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca86:	f1c1 0820 	rsb	r8, r1, #32
 800ca8a:	40cf      	lsrs	r7, r1
 800ca8c:	f105 0e04 	add.w	lr, r5, #4
 800ca90:	46a1      	mov	r9, r4
 800ca92:	4576      	cmp	r6, lr
 800ca94:	46f4      	mov	ip, lr
 800ca96:	d815      	bhi.n	800cac4 <rshift+0x7e>
 800ca98:	1a9b      	subs	r3, r3, r2
 800ca9a:	009a      	lsls	r2, r3, #2
 800ca9c:	3a04      	subs	r2, #4
 800ca9e:	3501      	adds	r5, #1
 800caa0:	42ae      	cmp	r6, r5
 800caa2:	bf38      	it	cc
 800caa4:	2200      	movcc	r2, #0
 800caa6:	18a3      	adds	r3, r4, r2
 800caa8:	50a7      	str	r7, [r4, r2]
 800caaa:	b107      	cbz	r7, 800caae <rshift+0x68>
 800caac:	3304      	adds	r3, #4
 800caae:	1b1a      	subs	r2, r3, r4
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cab6:	bf08      	it	eq
 800cab8:	2300      	moveq	r3, #0
 800caba:	6102      	str	r2, [r0, #16]
 800cabc:	bf08      	it	eq
 800cabe:	6143      	streq	r3, [r0, #20]
 800cac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cac4:	f8dc c000 	ldr.w	ip, [ip]
 800cac8:	fa0c fc08 	lsl.w	ip, ip, r8
 800cacc:	ea4c 0707 	orr.w	r7, ip, r7
 800cad0:	f849 7b04 	str.w	r7, [r9], #4
 800cad4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cad8:	40cf      	lsrs	r7, r1
 800cada:	e7da      	b.n	800ca92 <rshift+0x4c>
 800cadc:	f851 cb04 	ldr.w	ip, [r1], #4
 800cae0:	f847 cf04 	str.w	ip, [r7, #4]!
 800cae4:	e7c3      	b.n	800ca6e <rshift+0x28>
 800cae6:	4623      	mov	r3, r4
 800cae8:	e7e1      	b.n	800caae <rshift+0x68>

0800caea <__hexdig_fun>:
 800caea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800caee:	2b09      	cmp	r3, #9
 800caf0:	d802      	bhi.n	800caf8 <__hexdig_fun+0xe>
 800caf2:	3820      	subs	r0, #32
 800caf4:	b2c0      	uxtb	r0, r0
 800caf6:	4770      	bx	lr
 800caf8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cafc:	2b05      	cmp	r3, #5
 800cafe:	d801      	bhi.n	800cb04 <__hexdig_fun+0x1a>
 800cb00:	3847      	subs	r0, #71	; 0x47
 800cb02:	e7f7      	b.n	800caf4 <__hexdig_fun+0xa>
 800cb04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cb08:	2b05      	cmp	r3, #5
 800cb0a:	d801      	bhi.n	800cb10 <__hexdig_fun+0x26>
 800cb0c:	3827      	subs	r0, #39	; 0x27
 800cb0e:	e7f1      	b.n	800caf4 <__hexdig_fun+0xa>
 800cb10:	2000      	movs	r0, #0
 800cb12:	4770      	bx	lr

0800cb14 <__gethex>:
 800cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	ed2d 8b02 	vpush	{d8}
 800cb1c:	b089      	sub	sp, #36	; 0x24
 800cb1e:	ee08 0a10 	vmov	s16, r0
 800cb22:	9304      	str	r3, [sp, #16]
 800cb24:	4bbc      	ldr	r3, [pc, #752]	; (800ce18 <__gethex+0x304>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	468b      	mov	fp, r1
 800cb2e:	4690      	mov	r8, r2
 800cb30:	f7f3 fb58 	bl	80001e4 <strlen>
 800cb34:	9b01      	ldr	r3, [sp, #4]
 800cb36:	f8db 2000 	ldr.w	r2, [fp]
 800cb3a:	4403      	add	r3, r0
 800cb3c:	4682      	mov	sl, r0
 800cb3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cb42:	9305      	str	r3, [sp, #20]
 800cb44:	1c93      	adds	r3, r2, #2
 800cb46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cb4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cb4e:	32fe      	adds	r2, #254	; 0xfe
 800cb50:	18d1      	adds	r1, r2, r3
 800cb52:	461f      	mov	r7, r3
 800cb54:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb58:	9100      	str	r1, [sp, #0]
 800cb5a:	2830      	cmp	r0, #48	; 0x30
 800cb5c:	d0f8      	beq.n	800cb50 <__gethex+0x3c>
 800cb5e:	f7ff ffc4 	bl	800caea <__hexdig_fun>
 800cb62:	4604      	mov	r4, r0
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d13a      	bne.n	800cbde <__gethex+0xca>
 800cb68:	9901      	ldr	r1, [sp, #4]
 800cb6a:	4652      	mov	r2, sl
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	f001 fa5a 	bl	800e026 <strncmp>
 800cb72:	4605      	mov	r5, r0
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d168      	bne.n	800cc4a <__gethex+0x136>
 800cb78:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cb7c:	eb07 060a 	add.w	r6, r7, sl
 800cb80:	f7ff ffb3 	bl	800caea <__hexdig_fun>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d062      	beq.n	800cc4e <__gethex+0x13a>
 800cb88:	4633      	mov	r3, r6
 800cb8a:	7818      	ldrb	r0, [r3, #0]
 800cb8c:	2830      	cmp	r0, #48	; 0x30
 800cb8e:	461f      	mov	r7, r3
 800cb90:	f103 0301 	add.w	r3, r3, #1
 800cb94:	d0f9      	beq.n	800cb8a <__gethex+0x76>
 800cb96:	f7ff ffa8 	bl	800caea <__hexdig_fun>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	fab0 f480 	clz	r4, r0
 800cba0:	0964      	lsrs	r4, r4, #5
 800cba2:	4635      	mov	r5, r6
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	463a      	mov	r2, r7
 800cba8:	4616      	mov	r6, r2
 800cbaa:	3201      	adds	r2, #1
 800cbac:	7830      	ldrb	r0, [r6, #0]
 800cbae:	f7ff ff9c 	bl	800caea <__hexdig_fun>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d1f8      	bne.n	800cba8 <__gethex+0x94>
 800cbb6:	9901      	ldr	r1, [sp, #4]
 800cbb8:	4652      	mov	r2, sl
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f001 fa33 	bl	800e026 <strncmp>
 800cbc0:	b980      	cbnz	r0, 800cbe4 <__gethex+0xd0>
 800cbc2:	b94d      	cbnz	r5, 800cbd8 <__gethex+0xc4>
 800cbc4:	eb06 050a 	add.w	r5, r6, sl
 800cbc8:	462a      	mov	r2, r5
 800cbca:	4616      	mov	r6, r2
 800cbcc:	3201      	adds	r2, #1
 800cbce:	7830      	ldrb	r0, [r6, #0]
 800cbd0:	f7ff ff8b 	bl	800caea <__hexdig_fun>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d1f8      	bne.n	800cbca <__gethex+0xb6>
 800cbd8:	1bad      	subs	r5, r5, r6
 800cbda:	00ad      	lsls	r5, r5, #2
 800cbdc:	e004      	b.n	800cbe8 <__gethex+0xd4>
 800cbde:	2400      	movs	r4, #0
 800cbe0:	4625      	mov	r5, r4
 800cbe2:	e7e0      	b.n	800cba6 <__gethex+0x92>
 800cbe4:	2d00      	cmp	r5, #0
 800cbe6:	d1f7      	bne.n	800cbd8 <__gethex+0xc4>
 800cbe8:	7833      	ldrb	r3, [r6, #0]
 800cbea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbee:	2b50      	cmp	r3, #80	; 0x50
 800cbf0:	d13b      	bne.n	800cc6a <__gethex+0x156>
 800cbf2:	7873      	ldrb	r3, [r6, #1]
 800cbf4:	2b2b      	cmp	r3, #43	; 0x2b
 800cbf6:	d02c      	beq.n	800cc52 <__gethex+0x13e>
 800cbf8:	2b2d      	cmp	r3, #45	; 0x2d
 800cbfa:	d02e      	beq.n	800cc5a <__gethex+0x146>
 800cbfc:	1c71      	adds	r1, r6, #1
 800cbfe:	f04f 0900 	mov.w	r9, #0
 800cc02:	7808      	ldrb	r0, [r1, #0]
 800cc04:	f7ff ff71 	bl	800caea <__hexdig_fun>
 800cc08:	1e43      	subs	r3, r0, #1
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b18      	cmp	r3, #24
 800cc0e:	d82c      	bhi.n	800cc6a <__gethex+0x156>
 800cc10:	f1a0 0210 	sub.w	r2, r0, #16
 800cc14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc18:	f7ff ff67 	bl	800caea <__hexdig_fun>
 800cc1c:	1e43      	subs	r3, r0, #1
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b18      	cmp	r3, #24
 800cc22:	d91d      	bls.n	800cc60 <__gethex+0x14c>
 800cc24:	f1b9 0f00 	cmp.w	r9, #0
 800cc28:	d000      	beq.n	800cc2c <__gethex+0x118>
 800cc2a:	4252      	negs	r2, r2
 800cc2c:	4415      	add	r5, r2
 800cc2e:	f8cb 1000 	str.w	r1, [fp]
 800cc32:	b1e4      	cbz	r4, 800cc6e <__gethex+0x15a>
 800cc34:	9b00      	ldr	r3, [sp, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	bf14      	ite	ne
 800cc3a:	2700      	movne	r7, #0
 800cc3c:	2706      	moveq	r7, #6
 800cc3e:	4638      	mov	r0, r7
 800cc40:	b009      	add	sp, #36	; 0x24
 800cc42:	ecbd 8b02 	vpop	{d8}
 800cc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4a:	463e      	mov	r6, r7
 800cc4c:	4625      	mov	r5, r4
 800cc4e:	2401      	movs	r4, #1
 800cc50:	e7ca      	b.n	800cbe8 <__gethex+0xd4>
 800cc52:	f04f 0900 	mov.w	r9, #0
 800cc56:	1cb1      	adds	r1, r6, #2
 800cc58:	e7d3      	b.n	800cc02 <__gethex+0xee>
 800cc5a:	f04f 0901 	mov.w	r9, #1
 800cc5e:	e7fa      	b.n	800cc56 <__gethex+0x142>
 800cc60:	230a      	movs	r3, #10
 800cc62:	fb03 0202 	mla	r2, r3, r2, r0
 800cc66:	3a10      	subs	r2, #16
 800cc68:	e7d4      	b.n	800cc14 <__gethex+0x100>
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	e7df      	b.n	800cc2e <__gethex+0x11a>
 800cc6e:	1bf3      	subs	r3, r6, r7
 800cc70:	3b01      	subs	r3, #1
 800cc72:	4621      	mov	r1, r4
 800cc74:	2b07      	cmp	r3, #7
 800cc76:	dc0b      	bgt.n	800cc90 <__gethex+0x17c>
 800cc78:	ee18 0a10 	vmov	r0, s16
 800cc7c:	f000 faf6 	bl	800d26c <_Balloc>
 800cc80:	4604      	mov	r4, r0
 800cc82:	b940      	cbnz	r0, 800cc96 <__gethex+0x182>
 800cc84:	4b65      	ldr	r3, [pc, #404]	; (800ce1c <__gethex+0x308>)
 800cc86:	4602      	mov	r2, r0
 800cc88:	21de      	movs	r1, #222	; 0xde
 800cc8a:	4865      	ldr	r0, [pc, #404]	; (800ce20 <__gethex+0x30c>)
 800cc8c:	f7fc fe08 	bl	80098a0 <__assert_func>
 800cc90:	3101      	adds	r1, #1
 800cc92:	105b      	asrs	r3, r3, #1
 800cc94:	e7ee      	b.n	800cc74 <__gethex+0x160>
 800cc96:	f100 0914 	add.w	r9, r0, #20
 800cc9a:	f04f 0b00 	mov.w	fp, #0
 800cc9e:	f1ca 0301 	rsb	r3, sl, #1
 800cca2:	f8cd 9008 	str.w	r9, [sp, #8]
 800cca6:	f8cd b000 	str.w	fp, [sp]
 800ccaa:	9306      	str	r3, [sp, #24]
 800ccac:	42b7      	cmp	r7, r6
 800ccae:	d340      	bcc.n	800cd32 <__gethex+0x21e>
 800ccb0:	9802      	ldr	r0, [sp, #8]
 800ccb2:	9b00      	ldr	r3, [sp, #0]
 800ccb4:	f840 3b04 	str.w	r3, [r0], #4
 800ccb8:	eba0 0009 	sub.w	r0, r0, r9
 800ccbc:	1080      	asrs	r0, r0, #2
 800ccbe:	0146      	lsls	r6, r0, #5
 800ccc0:	6120      	str	r0, [r4, #16]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 fbc8 	bl	800d458 <__hi0bits>
 800ccc8:	1a30      	subs	r0, r6, r0
 800ccca:	f8d8 6000 	ldr.w	r6, [r8]
 800ccce:	42b0      	cmp	r0, r6
 800ccd0:	dd63      	ble.n	800cd9a <__gethex+0x286>
 800ccd2:	1b87      	subs	r7, r0, r6
 800ccd4:	4639      	mov	r1, r7
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f000 ff62 	bl	800dba0 <__any_on>
 800ccdc:	4682      	mov	sl, r0
 800ccde:	b1a8      	cbz	r0, 800cd0c <__gethex+0x1f8>
 800cce0:	1e7b      	subs	r3, r7, #1
 800cce2:	1159      	asrs	r1, r3, #5
 800cce4:	f003 021f 	and.w	r2, r3, #31
 800cce8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ccec:	f04f 0a01 	mov.w	sl, #1
 800ccf0:	fa0a f202 	lsl.w	r2, sl, r2
 800ccf4:	420a      	tst	r2, r1
 800ccf6:	d009      	beq.n	800cd0c <__gethex+0x1f8>
 800ccf8:	4553      	cmp	r3, sl
 800ccfa:	dd05      	ble.n	800cd08 <__gethex+0x1f4>
 800ccfc:	1eb9      	subs	r1, r7, #2
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f000 ff4e 	bl	800dba0 <__any_on>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d145      	bne.n	800cd94 <__gethex+0x280>
 800cd08:	f04f 0a02 	mov.w	sl, #2
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f7ff fe99 	bl	800ca46 <rshift>
 800cd14:	443d      	add	r5, r7
 800cd16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd1a:	42ab      	cmp	r3, r5
 800cd1c:	da4c      	bge.n	800cdb8 <__gethex+0x2a4>
 800cd1e:	ee18 0a10 	vmov	r0, s16
 800cd22:	4621      	mov	r1, r4
 800cd24:	f000 fae2 	bl	800d2ec <_Bfree>
 800cd28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	27a3      	movs	r7, #163	; 0xa3
 800cd30:	e785      	b.n	800cc3e <__gethex+0x12a>
 800cd32:	1e73      	subs	r3, r6, #1
 800cd34:	9a05      	ldr	r2, [sp, #20]
 800cd36:	9303      	str	r3, [sp, #12]
 800cd38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d019      	beq.n	800cd74 <__gethex+0x260>
 800cd40:	f1bb 0f20 	cmp.w	fp, #32
 800cd44:	d107      	bne.n	800cd56 <__gethex+0x242>
 800cd46:	9b02      	ldr	r3, [sp, #8]
 800cd48:	9a00      	ldr	r2, [sp, #0]
 800cd4a:	f843 2b04 	str.w	r2, [r3], #4
 800cd4e:	9302      	str	r3, [sp, #8]
 800cd50:	2300      	movs	r3, #0
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	469b      	mov	fp, r3
 800cd56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cd5a:	f7ff fec6 	bl	800caea <__hexdig_fun>
 800cd5e:	9b00      	ldr	r3, [sp, #0]
 800cd60:	f000 000f 	and.w	r0, r0, #15
 800cd64:	fa00 f00b 	lsl.w	r0, r0, fp
 800cd68:	4303      	orrs	r3, r0
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	f10b 0b04 	add.w	fp, fp, #4
 800cd70:	9b03      	ldr	r3, [sp, #12]
 800cd72:	e00d      	b.n	800cd90 <__gethex+0x27c>
 800cd74:	9b03      	ldr	r3, [sp, #12]
 800cd76:	9a06      	ldr	r2, [sp, #24]
 800cd78:	4413      	add	r3, r2
 800cd7a:	42bb      	cmp	r3, r7
 800cd7c:	d3e0      	bcc.n	800cd40 <__gethex+0x22c>
 800cd7e:	4618      	mov	r0, r3
 800cd80:	9901      	ldr	r1, [sp, #4]
 800cd82:	9307      	str	r3, [sp, #28]
 800cd84:	4652      	mov	r2, sl
 800cd86:	f001 f94e 	bl	800e026 <strncmp>
 800cd8a:	9b07      	ldr	r3, [sp, #28]
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d1d7      	bne.n	800cd40 <__gethex+0x22c>
 800cd90:	461e      	mov	r6, r3
 800cd92:	e78b      	b.n	800ccac <__gethex+0x198>
 800cd94:	f04f 0a03 	mov.w	sl, #3
 800cd98:	e7b8      	b.n	800cd0c <__gethex+0x1f8>
 800cd9a:	da0a      	bge.n	800cdb2 <__gethex+0x29e>
 800cd9c:	1a37      	subs	r7, r6, r0
 800cd9e:	4621      	mov	r1, r4
 800cda0:	ee18 0a10 	vmov	r0, s16
 800cda4:	463a      	mov	r2, r7
 800cda6:	f000 fcbd 	bl	800d724 <__lshift>
 800cdaa:	1bed      	subs	r5, r5, r7
 800cdac:	4604      	mov	r4, r0
 800cdae:	f100 0914 	add.w	r9, r0, #20
 800cdb2:	f04f 0a00 	mov.w	sl, #0
 800cdb6:	e7ae      	b.n	800cd16 <__gethex+0x202>
 800cdb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cdbc:	42a8      	cmp	r0, r5
 800cdbe:	dd72      	ble.n	800cea6 <__gethex+0x392>
 800cdc0:	1b45      	subs	r5, r0, r5
 800cdc2:	42ae      	cmp	r6, r5
 800cdc4:	dc36      	bgt.n	800ce34 <__gethex+0x320>
 800cdc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	d02a      	beq.n	800ce24 <__gethex+0x310>
 800cdce:	2b03      	cmp	r3, #3
 800cdd0:	d02c      	beq.n	800ce2c <__gethex+0x318>
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d115      	bne.n	800ce02 <__gethex+0x2ee>
 800cdd6:	42ae      	cmp	r6, r5
 800cdd8:	d113      	bne.n	800ce02 <__gethex+0x2ee>
 800cdda:	2e01      	cmp	r6, #1
 800cddc:	d10b      	bne.n	800cdf6 <__gethex+0x2e2>
 800cdde:	9a04      	ldr	r2, [sp, #16]
 800cde0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	2301      	movs	r3, #1
 800cde8:	6123      	str	r3, [r4, #16]
 800cdea:	f8c9 3000 	str.w	r3, [r9]
 800cdee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdf0:	2762      	movs	r7, #98	; 0x62
 800cdf2:	601c      	str	r4, [r3, #0]
 800cdf4:	e723      	b.n	800cc3e <__gethex+0x12a>
 800cdf6:	1e71      	subs	r1, r6, #1
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f000 fed1 	bl	800dba0 <__any_on>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d1ed      	bne.n	800cdde <__gethex+0x2ca>
 800ce02:	ee18 0a10 	vmov	r0, s16
 800ce06:	4621      	mov	r1, r4
 800ce08:	f000 fa70 	bl	800d2ec <_Bfree>
 800ce0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce0e:	2300      	movs	r3, #0
 800ce10:	6013      	str	r3, [r2, #0]
 800ce12:	2750      	movs	r7, #80	; 0x50
 800ce14:	e713      	b.n	800cc3e <__gethex+0x12a>
 800ce16:	bf00      	nop
 800ce18:	0802850c 	.word	0x0802850c
 800ce1c:	0802842c 	.word	0x0802842c
 800ce20:	080284a0 	.word	0x080284a0
 800ce24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d1eb      	bne.n	800ce02 <__gethex+0x2ee>
 800ce2a:	e7d8      	b.n	800cdde <__gethex+0x2ca>
 800ce2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1d5      	bne.n	800cdde <__gethex+0x2ca>
 800ce32:	e7e6      	b.n	800ce02 <__gethex+0x2ee>
 800ce34:	1e6f      	subs	r7, r5, #1
 800ce36:	f1ba 0f00 	cmp.w	sl, #0
 800ce3a:	d131      	bne.n	800cea0 <__gethex+0x38c>
 800ce3c:	b127      	cbz	r7, 800ce48 <__gethex+0x334>
 800ce3e:	4639      	mov	r1, r7
 800ce40:	4620      	mov	r0, r4
 800ce42:	f000 fead 	bl	800dba0 <__any_on>
 800ce46:	4682      	mov	sl, r0
 800ce48:	117b      	asrs	r3, r7, #5
 800ce4a:	2101      	movs	r1, #1
 800ce4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ce50:	f007 071f 	and.w	r7, r7, #31
 800ce54:	fa01 f707 	lsl.w	r7, r1, r7
 800ce58:	421f      	tst	r7, r3
 800ce5a:	4629      	mov	r1, r5
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	bf18      	it	ne
 800ce60:	f04a 0a02 	orrne.w	sl, sl, #2
 800ce64:	1b76      	subs	r6, r6, r5
 800ce66:	f7ff fdee 	bl	800ca46 <rshift>
 800ce6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce6e:	2702      	movs	r7, #2
 800ce70:	f1ba 0f00 	cmp.w	sl, #0
 800ce74:	d048      	beq.n	800cf08 <__gethex+0x3f4>
 800ce76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d015      	beq.n	800ceaa <__gethex+0x396>
 800ce7e:	2b03      	cmp	r3, #3
 800ce80:	d017      	beq.n	800ceb2 <__gethex+0x39e>
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d109      	bne.n	800ce9a <__gethex+0x386>
 800ce86:	f01a 0f02 	tst.w	sl, #2
 800ce8a:	d006      	beq.n	800ce9a <__gethex+0x386>
 800ce8c:	f8d9 0000 	ldr.w	r0, [r9]
 800ce90:	ea4a 0a00 	orr.w	sl, sl, r0
 800ce94:	f01a 0f01 	tst.w	sl, #1
 800ce98:	d10e      	bne.n	800ceb8 <__gethex+0x3a4>
 800ce9a:	f047 0710 	orr.w	r7, r7, #16
 800ce9e:	e033      	b.n	800cf08 <__gethex+0x3f4>
 800cea0:	f04f 0a01 	mov.w	sl, #1
 800cea4:	e7d0      	b.n	800ce48 <__gethex+0x334>
 800cea6:	2701      	movs	r7, #1
 800cea8:	e7e2      	b.n	800ce70 <__gethex+0x35c>
 800ceaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceac:	f1c3 0301 	rsb	r3, r3, #1
 800ceb0:	9315      	str	r3, [sp, #84]	; 0x54
 800ceb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d0f0      	beq.n	800ce9a <__gethex+0x386>
 800ceb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cebc:	f104 0314 	add.w	r3, r4, #20
 800cec0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cec4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cec8:	f04f 0c00 	mov.w	ip, #0
 800cecc:	4618      	mov	r0, r3
 800cece:	f853 2b04 	ldr.w	r2, [r3], #4
 800ced2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ced6:	d01c      	beq.n	800cf12 <__gethex+0x3fe>
 800ced8:	3201      	adds	r2, #1
 800ceda:	6002      	str	r2, [r0, #0]
 800cedc:	2f02      	cmp	r7, #2
 800cede:	f104 0314 	add.w	r3, r4, #20
 800cee2:	d13f      	bne.n	800cf64 <__gethex+0x450>
 800cee4:	f8d8 2000 	ldr.w	r2, [r8]
 800cee8:	3a01      	subs	r2, #1
 800ceea:	42b2      	cmp	r2, r6
 800ceec:	d10a      	bne.n	800cf04 <__gethex+0x3f0>
 800ceee:	1171      	asrs	r1, r6, #5
 800cef0:	2201      	movs	r2, #1
 800cef2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cef6:	f006 061f 	and.w	r6, r6, #31
 800cefa:	fa02 f606 	lsl.w	r6, r2, r6
 800cefe:	421e      	tst	r6, r3
 800cf00:	bf18      	it	ne
 800cf02:	4617      	movne	r7, r2
 800cf04:	f047 0720 	orr.w	r7, r7, #32
 800cf08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf0a:	601c      	str	r4, [r3, #0]
 800cf0c:	9b04      	ldr	r3, [sp, #16]
 800cf0e:	601d      	str	r5, [r3, #0]
 800cf10:	e695      	b.n	800cc3e <__gethex+0x12a>
 800cf12:	4299      	cmp	r1, r3
 800cf14:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf18:	d8d8      	bhi.n	800cecc <__gethex+0x3b8>
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	459b      	cmp	fp, r3
 800cf1e:	db19      	blt.n	800cf54 <__gethex+0x440>
 800cf20:	6861      	ldr	r1, [r4, #4]
 800cf22:	ee18 0a10 	vmov	r0, s16
 800cf26:	3101      	adds	r1, #1
 800cf28:	f000 f9a0 	bl	800d26c <_Balloc>
 800cf2c:	4681      	mov	r9, r0
 800cf2e:	b918      	cbnz	r0, 800cf38 <__gethex+0x424>
 800cf30:	4b1a      	ldr	r3, [pc, #104]	; (800cf9c <__gethex+0x488>)
 800cf32:	4602      	mov	r2, r0
 800cf34:	2184      	movs	r1, #132	; 0x84
 800cf36:	e6a8      	b.n	800cc8a <__gethex+0x176>
 800cf38:	6922      	ldr	r2, [r4, #16]
 800cf3a:	3202      	adds	r2, #2
 800cf3c:	f104 010c 	add.w	r1, r4, #12
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	300c      	adds	r0, #12
 800cf44:	f7fc fd0e 	bl	8009964 <memcpy>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	ee18 0a10 	vmov	r0, s16
 800cf4e:	f000 f9cd 	bl	800d2ec <_Bfree>
 800cf52:	464c      	mov	r4, r9
 800cf54:	6923      	ldr	r3, [r4, #16]
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf5c:	6122      	str	r2, [r4, #16]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	615a      	str	r2, [r3, #20]
 800cf62:	e7bb      	b.n	800cedc <__gethex+0x3c8>
 800cf64:	6922      	ldr	r2, [r4, #16]
 800cf66:	455a      	cmp	r2, fp
 800cf68:	dd0b      	ble.n	800cf82 <__gethex+0x46e>
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f7ff fd6a 	bl	800ca46 <rshift>
 800cf72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf76:	3501      	adds	r5, #1
 800cf78:	42ab      	cmp	r3, r5
 800cf7a:	f6ff aed0 	blt.w	800cd1e <__gethex+0x20a>
 800cf7e:	2701      	movs	r7, #1
 800cf80:	e7c0      	b.n	800cf04 <__gethex+0x3f0>
 800cf82:	f016 061f 	ands.w	r6, r6, #31
 800cf86:	d0fa      	beq.n	800cf7e <__gethex+0x46a>
 800cf88:	449a      	add	sl, r3
 800cf8a:	f1c6 0620 	rsb	r6, r6, #32
 800cf8e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cf92:	f000 fa61 	bl	800d458 <__hi0bits>
 800cf96:	42b0      	cmp	r0, r6
 800cf98:	dbe7      	blt.n	800cf6a <__gethex+0x456>
 800cf9a:	e7f0      	b.n	800cf7e <__gethex+0x46a>
 800cf9c:	0802842c 	.word	0x0802842c

0800cfa0 <L_shift>:
 800cfa0:	f1c2 0208 	rsb	r2, r2, #8
 800cfa4:	0092      	lsls	r2, r2, #2
 800cfa6:	b570      	push	{r4, r5, r6, lr}
 800cfa8:	f1c2 0620 	rsb	r6, r2, #32
 800cfac:	6843      	ldr	r3, [r0, #4]
 800cfae:	6804      	ldr	r4, [r0, #0]
 800cfb0:	fa03 f506 	lsl.w	r5, r3, r6
 800cfb4:	432c      	orrs	r4, r5
 800cfb6:	40d3      	lsrs	r3, r2
 800cfb8:	6004      	str	r4, [r0, #0]
 800cfba:	f840 3f04 	str.w	r3, [r0, #4]!
 800cfbe:	4288      	cmp	r0, r1
 800cfc0:	d3f4      	bcc.n	800cfac <L_shift+0xc>
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}

0800cfc4 <__match>:
 800cfc4:	b530      	push	{r4, r5, lr}
 800cfc6:	6803      	ldr	r3, [r0, #0]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfce:	b914      	cbnz	r4, 800cfd6 <__match+0x12>
 800cfd0:	6003      	str	r3, [r0, #0]
 800cfd2:	2001      	movs	r0, #1
 800cfd4:	bd30      	pop	{r4, r5, pc}
 800cfd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cfde:	2d19      	cmp	r5, #25
 800cfe0:	bf98      	it	ls
 800cfe2:	3220      	addls	r2, #32
 800cfe4:	42a2      	cmp	r2, r4
 800cfe6:	d0f0      	beq.n	800cfca <__match+0x6>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e7f3      	b.n	800cfd4 <__match+0x10>

0800cfec <__hexnan>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	680b      	ldr	r3, [r1, #0]
 800cff2:	6801      	ldr	r1, [r0, #0]
 800cff4:	115e      	asrs	r6, r3, #5
 800cff6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cffa:	f013 031f 	ands.w	r3, r3, #31
 800cffe:	b087      	sub	sp, #28
 800d000:	bf18      	it	ne
 800d002:	3604      	addne	r6, #4
 800d004:	2500      	movs	r5, #0
 800d006:	1f37      	subs	r7, r6, #4
 800d008:	4682      	mov	sl, r0
 800d00a:	4690      	mov	r8, r2
 800d00c:	9301      	str	r3, [sp, #4]
 800d00e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d012:	46b9      	mov	r9, r7
 800d014:	463c      	mov	r4, r7
 800d016:	9502      	str	r5, [sp, #8]
 800d018:	46ab      	mov	fp, r5
 800d01a:	784a      	ldrb	r2, [r1, #1]
 800d01c:	1c4b      	adds	r3, r1, #1
 800d01e:	9303      	str	r3, [sp, #12]
 800d020:	b342      	cbz	r2, 800d074 <__hexnan+0x88>
 800d022:	4610      	mov	r0, r2
 800d024:	9105      	str	r1, [sp, #20]
 800d026:	9204      	str	r2, [sp, #16]
 800d028:	f7ff fd5f 	bl	800caea <__hexdig_fun>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d14f      	bne.n	800d0d0 <__hexnan+0xe4>
 800d030:	9a04      	ldr	r2, [sp, #16]
 800d032:	9905      	ldr	r1, [sp, #20]
 800d034:	2a20      	cmp	r2, #32
 800d036:	d818      	bhi.n	800d06a <__hexnan+0x7e>
 800d038:	9b02      	ldr	r3, [sp, #8]
 800d03a:	459b      	cmp	fp, r3
 800d03c:	dd13      	ble.n	800d066 <__hexnan+0x7a>
 800d03e:	454c      	cmp	r4, r9
 800d040:	d206      	bcs.n	800d050 <__hexnan+0x64>
 800d042:	2d07      	cmp	r5, #7
 800d044:	dc04      	bgt.n	800d050 <__hexnan+0x64>
 800d046:	462a      	mov	r2, r5
 800d048:	4649      	mov	r1, r9
 800d04a:	4620      	mov	r0, r4
 800d04c:	f7ff ffa8 	bl	800cfa0 <L_shift>
 800d050:	4544      	cmp	r4, r8
 800d052:	d950      	bls.n	800d0f6 <__hexnan+0x10a>
 800d054:	2300      	movs	r3, #0
 800d056:	f1a4 0904 	sub.w	r9, r4, #4
 800d05a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d05e:	f8cd b008 	str.w	fp, [sp, #8]
 800d062:	464c      	mov	r4, r9
 800d064:	461d      	mov	r5, r3
 800d066:	9903      	ldr	r1, [sp, #12]
 800d068:	e7d7      	b.n	800d01a <__hexnan+0x2e>
 800d06a:	2a29      	cmp	r2, #41	; 0x29
 800d06c:	d156      	bne.n	800d11c <__hexnan+0x130>
 800d06e:	3102      	adds	r1, #2
 800d070:	f8ca 1000 	str.w	r1, [sl]
 800d074:	f1bb 0f00 	cmp.w	fp, #0
 800d078:	d050      	beq.n	800d11c <__hexnan+0x130>
 800d07a:	454c      	cmp	r4, r9
 800d07c:	d206      	bcs.n	800d08c <__hexnan+0xa0>
 800d07e:	2d07      	cmp	r5, #7
 800d080:	dc04      	bgt.n	800d08c <__hexnan+0xa0>
 800d082:	462a      	mov	r2, r5
 800d084:	4649      	mov	r1, r9
 800d086:	4620      	mov	r0, r4
 800d088:	f7ff ff8a 	bl	800cfa0 <L_shift>
 800d08c:	4544      	cmp	r4, r8
 800d08e:	d934      	bls.n	800d0fa <__hexnan+0x10e>
 800d090:	f1a8 0204 	sub.w	r2, r8, #4
 800d094:	4623      	mov	r3, r4
 800d096:	f853 1b04 	ldr.w	r1, [r3], #4
 800d09a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d09e:	429f      	cmp	r7, r3
 800d0a0:	d2f9      	bcs.n	800d096 <__hexnan+0xaa>
 800d0a2:	1b3b      	subs	r3, r7, r4
 800d0a4:	f023 0303 	bic.w	r3, r3, #3
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	3401      	adds	r4, #1
 800d0ac:	3e03      	subs	r6, #3
 800d0ae:	42b4      	cmp	r4, r6
 800d0b0:	bf88      	it	hi
 800d0b2:	2304      	movhi	r3, #4
 800d0b4:	4443      	add	r3, r8
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f843 2b04 	str.w	r2, [r3], #4
 800d0bc:	429f      	cmp	r7, r3
 800d0be:	d2fb      	bcs.n	800d0b8 <__hexnan+0xcc>
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	b91b      	cbnz	r3, 800d0cc <__hexnan+0xe0>
 800d0c4:	4547      	cmp	r7, r8
 800d0c6:	d127      	bne.n	800d118 <__hexnan+0x12c>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	603b      	str	r3, [r7, #0]
 800d0cc:	2005      	movs	r0, #5
 800d0ce:	e026      	b.n	800d11e <__hexnan+0x132>
 800d0d0:	3501      	adds	r5, #1
 800d0d2:	2d08      	cmp	r5, #8
 800d0d4:	f10b 0b01 	add.w	fp, fp, #1
 800d0d8:	dd06      	ble.n	800d0e8 <__hexnan+0xfc>
 800d0da:	4544      	cmp	r4, r8
 800d0dc:	d9c3      	bls.n	800d066 <__hexnan+0x7a>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0e4:	2501      	movs	r5, #1
 800d0e6:	3c04      	subs	r4, #4
 800d0e8:	6822      	ldr	r2, [r4, #0]
 800d0ea:	f000 000f 	and.w	r0, r0, #15
 800d0ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d0f2:	6022      	str	r2, [r4, #0]
 800d0f4:	e7b7      	b.n	800d066 <__hexnan+0x7a>
 800d0f6:	2508      	movs	r5, #8
 800d0f8:	e7b5      	b.n	800d066 <__hexnan+0x7a>
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0df      	beq.n	800d0c0 <__hexnan+0xd4>
 800d100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d104:	f1c3 0320 	rsb	r3, r3, #32
 800d108:	fa22 f303 	lsr.w	r3, r2, r3
 800d10c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d110:	401a      	ands	r2, r3
 800d112:	f846 2c04 	str.w	r2, [r6, #-4]
 800d116:	e7d3      	b.n	800d0c0 <__hexnan+0xd4>
 800d118:	3f04      	subs	r7, #4
 800d11a:	e7d1      	b.n	800d0c0 <__hexnan+0xd4>
 800d11c:	2004      	movs	r0, #4
 800d11e:	b007      	add	sp, #28
 800d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d124 <_localeconv_r>:
 800d124:	4800      	ldr	r0, [pc, #0]	; (800d128 <_localeconv_r+0x4>)
 800d126:	4770      	bx	lr
 800d128:	20000f5c 	.word	0x20000f5c

0800d12c <__retarget_lock_init_recursive>:
 800d12c:	4770      	bx	lr

0800d12e <__retarget_lock_acquire_recursive>:
 800d12e:	4770      	bx	lr

0800d130 <__retarget_lock_release_recursive>:
 800d130:	4770      	bx	lr

0800d132 <__swhatbuf_r>:
 800d132:	b570      	push	{r4, r5, r6, lr}
 800d134:	460e      	mov	r6, r1
 800d136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d13a:	2900      	cmp	r1, #0
 800d13c:	b096      	sub	sp, #88	; 0x58
 800d13e:	4614      	mov	r4, r2
 800d140:	461d      	mov	r5, r3
 800d142:	da07      	bge.n	800d154 <__swhatbuf_r+0x22>
 800d144:	2300      	movs	r3, #0
 800d146:	602b      	str	r3, [r5, #0]
 800d148:	89b3      	ldrh	r3, [r6, #12]
 800d14a:	061a      	lsls	r2, r3, #24
 800d14c:	d410      	bmi.n	800d170 <__swhatbuf_r+0x3e>
 800d14e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d152:	e00e      	b.n	800d172 <__swhatbuf_r+0x40>
 800d154:	466a      	mov	r2, sp
 800d156:	f000 ffa7 	bl	800e0a8 <_fstat_r>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	dbf2      	blt.n	800d144 <__swhatbuf_r+0x12>
 800d15e:	9a01      	ldr	r2, [sp, #4]
 800d160:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d164:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d168:	425a      	negs	r2, r3
 800d16a:	415a      	adcs	r2, r3
 800d16c:	602a      	str	r2, [r5, #0]
 800d16e:	e7ee      	b.n	800d14e <__swhatbuf_r+0x1c>
 800d170:	2340      	movs	r3, #64	; 0x40
 800d172:	2000      	movs	r0, #0
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	b016      	add	sp, #88	; 0x58
 800d178:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d17c <__smakebuf_r>:
 800d17c:	898b      	ldrh	r3, [r1, #12]
 800d17e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d180:	079d      	lsls	r5, r3, #30
 800d182:	4606      	mov	r6, r0
 800d184:	460c      	mov	r4, r1
 800d186:	d507      	bpl.n	800d198 <__smakebuf_r+0x1c>
 800d188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	6123      	str	r3, [r4, #16]
 800d190:	2301      	movs	r3, #1
 800d192:	6163      	str	r3, [r4, #20]
 800d194:	b002      	add	sp, #8
 800d196:	bd70      	pop	{r4, r5, r6, pc}
 800d198:	ab01      	add	r3, sp, #4
 800d19a:	466a      	mov	r2, sp
 800d19c:	f7ff ffc9 	bl	800d132 <__swhatbuf_r>
 800d1a0:	9900      	ldr	r1, [sp, #0]
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f7fc fc43 	bl	8009a30 <_malloc_r>
 800d1aa:	b948      	cbnz	r0, 800d1c0 <__smakebuf_r+0x44>
 800d1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b0:	059a      	lsls	r2, r3, #22
 800d1b2:	d4ef      	bmi.n	800d194 <__smakebuf_r+0x18>
 800d1b4:	f023 0303 	bic.w	r3, r3, #3
 800d1b8:	f043 0302 	orr.w	r3, r3, #2
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	e7e3      	b.n	800d188 <__smakebuf_r+0xc>
 800d1c0:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <__smakebuf_r+0x7c>)
 800d1c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	6020      	str	r0, [r4, #0]
 800d1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1cc:	81a3      	strh	r3, [r4, #12]
 800d1ce:	9b00      	ldr	r3, [sp, #0]
 800d1d0:	6163      	str	r3, [r4, #20]
 800d1d2:	9b01      	ldr	r3, [sp, #4]
 800d1d4:	6120      	str	r0, [r4, #16]
 800d1d6:	b15b      	cbz	r3, 800d1f0 <__smakebuf_r+0x74>
 800d1d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f000 ff75 	bl	800e0cc <_isatty_r>
 800d1e2:	b128      	cbz	r0, 800d1f0 <__smakebuf_r+0x74>
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	f023 0303 	bic.w	r3, r3, #3
 800d1ea:	f043 0301 	orr.w	r3, r3, #1
 800d1ee:	81a3      	strh	r3, [r4, #12]
 800d1f0:	89a0      	ldrh	r0, [r4, #12]
 800d1f2:	4305      	orrs	r5, r0
 800d1f4:	81a5      	strh	r5, [r4, #12]
 800d1f6:	e7cd      	b.n	800d194 <__smakebuf_r+0x18>
 800d1f8:	0800c8a5 	.word	0x0800c8a5

0800d1fc <__ascii_mbtowc>:
 800d1fc:	b082      	sub	sp, #8
 800d1fe:	b901      	cbnz	r1, 800d202 <__ascii_mbtowc+0x6>
 800d200:	a901      	add	r1, sp, #4
 800d202:	b142      	cbz	r2, 800d216 <__ascii_mbtowc+0x1a>
 800d204:	b14b      	cbz	r3, 800d21a <__ascii_mbtowc+0x1e>
 800d206:	7813      	ldrb	r3, [r2, #0]
 800d208:	600b      	str	r3, [r1, #0]
 800d20a:	7812      	ldrb	r2, [r2, #0]
 800d20c:	1e10      	subs	r0, r2, #0
 800d20e:	bf18      	it	ne
 800d210:	2001      	movne	r0, #1
 800d212:	b002      	add	sp, #8
 800d214:	4770      	bx	lr
 800d216:	4610      	mov	r0, r2
 800d218:	e7fb      	b.n	800d212 <__ascii_mbtowc+0x16>
 800d21a:	f06f 0001 	mvn.w	r0, #1
 800d21e:	e7f8      	b.n	800d212 <__ascii_mbtowc+0x16>

0800d220 <memmove>:
 800d220:	4288      	cmp	r0, r1
 800d222:	b510      	push	{r4, lr}
 800d224:	eb01 0402 	add.w	r4, r1, r2
 800d228:	d902      	bls.n	800d230 <memmove+0x10>
 800d22a:	4284      	cmp	r4, r0
 800d22c:	4623      	mov	r3, r4
 800d22e:	d807      	bhi.n	800d240 <memmove+0x20>
 800d230:	1e43      	subs	r3, r0, #1
 800d232:	42a1      	cmp	r1, r4
 800d234:	d008      	beq.n	800d248 <memmove+0x28>
 800d236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d23e:	e7f8      	b.n	800d232 <memmove+0x12>
 800d240:	4402      	add	r2, r0
 800d242:	4601      	mov	r1, r0
 800d244:	428a      	cmp	r2, r1
 800d246:	d100      	bne.n	800d24a <memmove+0x2a>
 800d248:	bd10      	pop	{r4, pc}
 800d24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d252:	e7f7      	b.n	800d244 <memmove+0x24>

0800d254 <__malloc_lock>:
 800d254:	4801      	ldr	r0, [pc, #4]	; (800d25c <__malloc_lock+0x8>)
 800d256:	f7ff bf6a 	b.w	800d12e <__retarget_lock_acquire_recursive>
 800d25a:	bf00      	nop
 800d25c:	2000d388 	.word	0x2000d388

0800d260 <__malloc_unlock>:
 800d260:	4801      	ldr	r0, [pc, #4]	; (800d268 <__malloc_unlock+0x8>)
 800d262:	f7ff bf65 	b.w	800d130 <__retarget_lock_release_recursive>
 800d266:	bf00      	nop
 800d268:	2000d388 	.word	0x2000d388

0800d26c <_Balloc>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d270:	4604      	mov	r4, r0
 800d272:	460d      	mov	r5, r1
 800d274:	b976      	cbnz	r6, 800d294 <_Balloc+0x28>
 800d276:	2010      	movs	r0, #16
 800d278:	f7fc fb6c 	bl	8009954 <malloc>
 800d27c:	4602      	mov	r2, r0
 800d27e:	6260      	str	r0, [r4, #36]	; 0x24
 800d280:	b920      	cbnz	r0, 800d28c <_Balloc+0x20>
 800d282:	4b18      	ldr	r3, [pc, #96]	; (800d2e4 <_Balloc+0x78>)
 800d284:	4818      	ldr	r0, [pc, #96]	; (800d2e8 <_Balloc+0x7c>)
 800d286:	2166      	movs	r1, #102	; 0x66
 800d288:	f7fc fb0a 	bl	80098a0 <__assert_func>
 800d28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d290:	6006      	str	r6, [r0, #0]
 800d292:	60c6      	str	r6, [r0, #12]
 800d294:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d296:	68f3      	ldr	r3, [r6, #12]
 800d298:	b183      	cbz	r3, 800d2bc <_Balloc+0x50>
 800d29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2a2:	b9b8      	cbnz	r0, 800d2d4 <_Balloc+0x68>
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	fa01 f605 	lsl.w	r6, r1, r5
 800d2aa:	1d72      	adds	r2, r6, #5
 800d2ac:	0092      	lsls	r2, r2, #2
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 fc97 	bl	800dbe2 <_calloc_r>
 800d2b4:	b160      	cbz	r0, 800d2d0 <_Balloc+0x64>
 800d2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2ba:	e00e      	b.n	800d2da <_Balloc+0x6e>
 800d2bc:	2221      	movs	r2, #33	; 0x21
 800d2be:	2104      	movs	r1, #4
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 fc8e 	bl	800dbe2 <_calloc_r>
 800d2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2c8:	60f0      	str	r0, [r6, #12]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1e4      	bne.n	800d29a <_Balloc+0x2e>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	bd70      	pop	{r4, r5, r6, pc}
 800d2d4:	6802      	ldr	r2, [r0, #0]
 800d2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2e0:	e7f7      	b.n	800d2d2 <_Balloc+0x66>
 800d2e2:	bf00      	nop
 800d2e4:	080283b6 	.word	0x080283b6
 800d2e8:	08028520 	.word	0x08028520

0800d2ec <_Bfree>:
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	b976      	cbnz	r6, 800d314 <_Bfree+0x28>
 800d2f6:	2010      	movs	r0, #16
 800d2f8:	f7fc fb2c 	bl	8009954 <malloc>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	6268      	str	r0, [r5, #36]	; 0x24
 800d300:	b920      	cbnz	r0, 800d30c <_Bfree+0x20>
 800d302:	4b09      	ldr	r3, [pc, #36]	; (800d328 <_Bfree+0x3c>)
 800d304:	4809      	ldr	r0, [pc, #36]	; (800d32c <_Bfree+0x40>)
 800d306:	218a      	movs	r1, #138	; 0x8a
 800d308:	f7fc faca 	bl	80098a0 <__assert_func>
 800d30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d310:	6006      	str	r6, [r0, #0]
 800d312:	60c6      	str	r6, [r0, #12]
 800d314:	b13c      	cbz	r4, 800d326 <_Bfree+0x3a>
 800d316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d318:	6862      	ldr	r2, [r4, #4]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d320:	6021      	str	r1, [r4, #0]
 800d322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d326:	bd70      	pop	{r4, r5, r6, pc}
 800d328:	080283b6 	.word	0x080283b6
 800d32c:	08028520 	.word	0x08028520

0800d330 <__multadd>:
 800d330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d334:	690e      	ldr	r6, [r1, #16]
 800d336:	4607      	mov	r7, r0
 800d338:	4698      	mov	r8, r3
 800d33a:	460c      	mov	r4, r1
 800d33c:	f101 0014 	add.w	r0, r1, #20
 800d340:	2300      	movs	r3, #0
 800d342:	6805      	ldr	r5, [r0, #0]
 800d344:	b2a9      	uxth	r1, r5
 800d346:	fb02 8101 	mla	r1, r2, r1, r8
 800d34a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d34e:	0c2d      	lsrs	r5, r5, #16
 800d350:	fb02 c505 	mla	r5, r2, r5, ip
 800d354:	b289      	uxth	r1, r1
 800d356:	3301      	adds	r3, #1
 800d358:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d35c:	429e      	cmp	r6, r3
 800d35e:	f840 1b04 	str.w	r1, [r0], #4
 800d362:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d366:	dcec      	bgt.n	800d342 <__multadd+0x12>
 800d368:	f1b8 0f00 	cmp.w	r8, #0
 800d36c:	d022      	beq.n	800d3b4 <__multadd+0x84>
 800d36e:	68a3      	ldr	r3, [r4, #8]
 800d370:	42b3      	cmp	r3, r6
 800d372:	dc19      	bgt.n	800d3a8 <__multadd+0x78>
 800d374:	6861      	ldr	r1, [r4, #4]
 800d376:	4638      	mov	r0, r7
 800d378:	3101      	adds	r1, #1
 800d37a:	f7ff ff77 	bl	800d26c <_Balloc>
 800d37e:	4605      	mov	r5, r0
 800d380:	b928      	cbnz	r0, 800d38e <__multadd+0x5e>
 800d382:	4602      	mov	r2, r0
 800d384:	4b0d      	ldr	r3, [pc, #52]	; (800d3bc <__multadd+0x8c>)
 800d386:	480e      	ldr	r0, [pc, #56]	; (800d3c0 <__multadd+0x90>)
 800d388:	21b5      	movs	r1, #181	; 0xb5
 800d38a:	f7fc fa89 	bl	80098a0 <__assert_func>
 800d38e:	6922      	ldr	r2, [r4, #16]
 800d390:	3202      	adds	r2, #2
 800d392:	f104 010c 	add.w	r1, r4, #12
 800d396:	0092      	lsls	r2, r2, #2
 800d398:	300c      	adds	r0, #12
 800d39a:	f7fc fae3 	bl	8009964 <memcpy>
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	f7ff ffa3 	bl	800d2ec <_Bfree>
 800d3a6:	462c      	mov	r4, r5
 800d3a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d3ac:	3601      	adds	r6, #1
 800d3ae:	f8c3 8014 	str.w	r8, [r3, #20]
 800d3b2:	6126      	str	r6, [r4, #16]
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ba:	bf00      	nop
 800d3bc:	0802842c 	.word	0x0802842c
 800d3c0:	08028520 	.word	0x08028520

0800d3c4 <__s2b>:
 800d3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	4615      	mov	r5, r2
 800d3cc:	461f      	mov	r7, r3
 800d3ce:	2209      	movs	r2, #9
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3d8:	2100      	movs	r1, #0
 800d3da:	2201      	movs	r2, #1
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	db09      	blt.n	800d3f4 <__s2b+0x30>
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f7ff ff43 	bl	800d26c <_Balloc>
 800d3e6:	b940      	cbnz	r0, 800d3fa <__s2b+0x36>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	4b19      	ldr	r3, [pc, #100]	; (800d450 <__s2b+0x8c>)
 800d3ec:	4819      	ldr	r0, [pc, #100]	; (800d454 <__s2b+0x90>)
 800d3ee:	21ce      	movs	r1, #206	; 0xce
 800d3f0:	f7fc fa56 	bl	80098a0 <__assert_func>
 800d3f4:	0052      	lsls	r2, r2, #1
 800d3f6:	3101      	adds	r1, #1
 800d3f8:	e7f0      	b.n	800d3dc <__s2b+0x18>
 800d3fa:	9b08      	ldr	r3, [sp, #32]
 800d3fc:	6143      	str	r3, [r0, #20]
 800d3fe:	2d09      	cmp	r5, #9
 800d400:	f04f 0301 	mov.w	r3, #1
 800d404:	6103      	str	r3, [r0, #16]
 800d406:	dd16      	ble.n	800d436 <__s2b+0x72>
 800d408:	f104 0909 	add.w	r9, r4, #9
 800d40c:	46c8      	mov	r8, r9
 800d40e:	442c      	add	r4, r5
 800d410:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d414:	4601      	mov	r1, r0
 800d416:	3b30      	subs	r3, #48	; 0x30
 800d418:	220a      	movs	r2, #10
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7ff ff88 	bl	800d330 <__multadd>
 800d420:	45a0      	cmp	r8, r4
 800d422:	d1f5      	bne.n	800d410 <__s2b+0x4c>
 800d424:	f1a5 0408 	sub.w	r4, r5, #8
 800d428:	444c      	add	r4, r9
 800d42a:	1b2d      	subs	r5, r5, r4
 800d42c:	1963      	adds	r3, r4, r5
 800d42e:	42bb      	cmp	r3, r7
 800d430:	db04      	blt.n	800d43c <__s2b+0x78>
 800d432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d436:	340a      	adds	r4, #10
 800d438:	2509      	movs	r5, #9
 800d43a:	e7f6      	b.n	800d42a <__s2b+0x66>
 800d43c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d440:	4601      	mov	r1, r0
 800d442:	3b30      	subs	r3, #48	; 0x30
 800d444:	220a      	movs	r2, #10
 800d446:	4630      	mov	r0, r6
 800d448:	f7ff ff72 	bl	800d330 <__multadd>
 800d44c:	e7ee      	b.n	800d42c <__s2b+0x68>
 800d44e:	bf00      	nop
 800d450:	0802842c 	.word	0x0802842c
 800d454:	08028520 	.word	0x08028520

0800d458 <__hi0bits>:
 800d458:	0c03      	lsrs	r3, r0, #16
 800d45a:	041b      	lsls	r3, r3, #16
 800d45c:	b9d3      	cbnz	r3, 800d494 <__hi0bits+0x3c>
 800d45e:	0400      	lsls	r0, r0, #16
 800d460:	2310      	movs	r3, #16
 800d462:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d466:	bf04      	itt	eq
 800d468:	0200      	lsleq	r0, r0, #8
 800d46a:	3308      	addeq	r3, #8
 800d46c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d470:	bf04      	itt	eq
 800d472:	0100      	lsleq	r0, r0, #4
 800d474:	3304      	addeq	r3, #4
 800d476:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d47a:	bf04      	itt	eq
 800d47c:	0080      	lsleq	r0, r0, #2
 800d47e:	3302      	addeq	r3, #2
 800d480:	2800      	cmp	r0, #0
 800d482:	db05      	blt.n	800d490 <__hi0bits+0x38>
 800d484:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d488:	f103 0301 	add.w	r3, r3, #1
 800d48c:	bf08      	it	eq
 800d48e:	2320      	moveq	r3, #32
 800d490:	4618      	mov	r0, r3
 800d492:	4770      	bx	lr
 800d494:	2300      	movs	r3, #0
 800d496:	e7e4      	b.n	800d462 <__hi0bits+0xa>

0800d498 <__lo0bits>:
 800d498:	6803      	ldr	r3, [r0, #0]
 800d49a:	f013 0207 	ands.w	r2, r3, #7
 800d49e:	4601      	mov	r1, r0
 800d4a0:	d00b      	beq.n	800d4ba <__lo0bits+0x22>
 800d4a2:	07da      	lsls	r2, r3, #31
 800d4a4:	d424      	bmi.n	800d4f0 <__lo0bits+0x58>
 800d4a6:	0798      	lsls	r0, r3, #30
 800d4a8:	bf49      	itett	mi
 800d4aa:	085b      	lsrmi	r3, r3, #1
 800d4ac:	089b      	lsrpl	r3, r3, #2
 800d4ae:	2001      	movmi	r0, #1
 800d4b0:	600b      	strmi	r3, [r1, #0]
 800d4b2:	bf5c      	itt	pl
 800d4b4:	600b      	strpl	r3, [r1, #0]
 800d4b6:	2002      	movpl	r0, #2
 800d4b8:	4770      	bx	lr
 800d4ba:	b298      	uxth	r0, r3
 800d4bc:	b9b0      	cbnz	r0, 800d4ec <__lo0bits+0x54>
 800d4be:	0c1b      	lsrs	r3, r3, #16
 800d4c0:	2010      	movs	r0, #16
 800d4c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d4c6:	bf04      	itt	eq
 800d4c8:	0a1b      	lsreq	r3, r3, #8
 800d4ca:	3008      	addeq	r0, #8
 800d4cc:	071a      	lsls	r2, r3, #28
 800d4ce:	bf04      	itt	eq
 800d4d0:	091b      	lsreq	r3, r3, #4
 800d4d2:	3004      	addeq	r0, #4
 800d4d4:	079a      	lsls	r2, r3, #30
 800d4d6:	bf04      	itt	eq
 800d4d8:	089b      	lsreq	r3, r3, #2
 800d4da:	3002      	addeq	r0, #2
 800d4dc:	07da      	lsls	r2, r3, #31
 800d4de:	d403      	bmi.n	800d4e8 <__lo0bits+0x50>
 800d4e0:	085b      	lsrs	r3, r3, #1
 800d4e2:	f100 0001 	add.w	r0, r0, #1
 800d4e6:	d005      	beq.n	800d4f4 <__lo0bits+0x5c>
 800d4e8:	600b      	str	r3, [r1, #0]
 800d4ea:	4770      	bx	lr
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	e7e8      	b.n	800d4c2 <__lo0bits+0x2a>
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	4770      	bx	lr
 800d4f4:	2020      	movs	r0, #32
 800d4f6:	4770      	bx	lr

0800d4f8 <__i2b>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	2101      	movs	r1, #1
 800d4fe:	f7ff feb5 	bl	800d26c <_Balloc>
 800d502:	4602      	mov	r2, r0
 800d504:	b928      	cbnz	r0, 800d512 <__i2b+0x1a>
 800d506:	4b05      	ldr	r3, [pc, #20]	; (800d51c <__i2b+0x24>)
 800d508:	4805      	ldr	r0, [pc, #20]	; (800d520 <__i2b+0x28>)
 800d50a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d50e:	f7fc f9c7 	bl	80098a0 <__assert_func>
 800d512:	2301      	movs	r3, #1
 800d514:	6144      	str	r4, [r0, #20]
 800d516:	6103      	str	r3, [r0, #16]
 800d518:	bd10      	pop	{r4, pc}
 800d51a:	bf00      	nop
 800d51c:	0802842c 	.word	0x0802842c
 800d520:	08028520 	.word	0x08028520

0800d524 <__multiply>:
 800d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d528:	4614      	mov	r4, r2
 800d52a:	690a      	ldr	r2, [r1, #16]
 800d52c:	6923      	ldr	r3, [r4, #16]
 800d52e:	429a      	cmp	r2, r3
 800d530:	bfb8      	it	lt
 800d532:	460b      	movlt	r3, r1
 800d534:	460d      	mov	r5, r1
 800d536:	bfbc      	itt	lt
 800d538:	4625      	movlt	r5, r4
 800d53a:	461c      	movlt	r4, r3
 800d53c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d540:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d544:	68ab      	ldr	r3, [r5, #8]
 800d546:	6869      	ldr	r1, [r5, #4]
 800d548:	eb0a 0709 	add.w	r7, sl, r9
 800d54c:	42bb      	cmp	r3, r7
 800d54e:	b085      	sub	sp, #20
 800d550:	bfb8      	it	lt
 800d552:	3101      	addlt	r1, #1
 800d554:	f7ff fe8a 	bl	800d26c <_Balloc>
 800d558:	b930      	cbnz	r0, 800d568 <__multiply+0x44>
 800d55a:	4602      	mov	r2, r0
 800d55c:	4b42      	ldr	r3, [pc, #264]	; (800d668 <__multiply+0x144>)
 800d55e:	4843      	ldr	r0, [pc, #268]	; (800d66c <__multiply+0x148>)
 800d560:	f240 115d 	movw	r1, #349	; 0x15d
 800d564:	f7fc f99c 	bl	80098a0 <__assert_func>
 800d568:	f100 0614 	add.w	r6, r0, #20
 800d56c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d570:	4633      	mov	r3, r6
 800d572:	2200      	movs	r2, #0
 800d574:	4543      	cmp	r3, r8
 800d576:	d31e      	bcc.n	800d5b6 <__multiply+0x92>
 800d578:	f105 0c14 	add.w	ip, r5, #20
 800d57c:	f104 0314 	add.w	r3, r4, #20
 800d580:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d584:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d588:	9202      	str	r2, [sp, #8]
 800d58a:	ebac 0205 	sub.w	r2, ip, r5
 800d58e:	3a15      	subs	r2, #21
 800d590:	f022 0203 	bic.w	r2, r2, #3
 800d594:	3204      	adds	r2, #4
 800d596:	f105 0115 	add.w	r1, r5, #21
 800d59a:	458c      	cmp	ip, r1
 800d59c:	bf38      	it	cc
 800d59e:	2204      	movcc	r2, #4
 800d5a0:	9201      	str	r2, [sp, #4]
 800d5a2:	9a02      	ldr	r2, [sp, #8]
 800d5a4:	9303      	str	r3, [sp, #12]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d808      	bhi.n	800d5bc <__multiply+0x98>
 800d5aa:	2f00      	cmp	r7, #0
 800d5ac:	dc55      	bgt.n	800d65a <__multiply+0x136>
 800d5ae:	6107      	str	r7, [r0, #16]
 800d5b0:	b005      	add	sp, #20
 800d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b6:	f843 2b04 	str.w	r2, [r3], #4
 800d5ba:	e7db      	b.n	800d574 <__multiply+0x50>
 800d5bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5c0:	f1ba 0f00 	cmp.w	sl, #0
 800d5c4:	d020      	beq.n	800d608 <__multiply+0xe4>
 800d5c6:	f105 0e14 	add.w	lr, r5, #20
 800d5ca:	46b1      	mov	r9, r6
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d5d2:	f8d9 b000 	ldr.w	fp, [r9]
 800d5d6:	b2a1      	uxth	r1, r4
 800d5d8:	fa1f fb8b 	uxth.w	fp, fp
 800d5dc:	fb0a b101 	mla	r1, sl, r1, fp
 800d5e0:	4411      	add	r1, r2
 800d5e2:	f8d9 2000 	ldr.w	r2, [r9]
 800d5e6:	0c24      	lsrs	r4, r4, #16
 800d5e8:	0c12      	lsrs	r2, r2, #16
 800d5ea:	fb0a 2404 	mla	r4, sl, r4, r2
 800d5ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d5f2:	b289      	uxth	r1, r1
 800d5f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d5f8:	45f4      	cmp	ip, lr
 800d5fa:	f849 1b04 	str.w	r1, [r9], #4
 800d5fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d602:	d8e4      	bhi.n	800d5ce <__multiply+0xaa>
 800d604:	9901      	ldr	r1, [sp, #4]
 800d606:	5072      	str	r2, [r6, r1]
 800d608:	9a03      	ldr	r2, [sp, #12]
 800d60a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d60e:	3304      	adds	r3, #4
 800d610:	f1b9 0f00 	cmp.w	r9, #0
 800d614:	d01f      	beq.n	800d656 <__multiply+0x132>
 800d616:	6834      	ldr	r4, [r6, #0]
 800d618:	f105 0114 	add.w	r1, r5, #20
 800d61c:	46b6      	mov	lr, r6
 800d61e:	f04f 0a00 	mov.w	sl, #0
 800d622:	880a      	ldrh	r2, [r1, #0]
 800d624:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d628:	fb09 b202 	mla	r2, r9, r2, fp
 800d62c:	4492      	add	sl, r2
 800d62e:	b2a4      	uxth	r4, r4
 800d630:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d634:	f84e 4b04 	str.w	r4, [lr], #4
 800d638:	f851 4b04 	ldr.w	r4, [r1], #4
 800d63c:	f8be 2000 	ldrh.w	r2, [lr]
 800d640:	0c24      	lsrs	r4, r4, #16
 800d642:	fb09 2404 	mla	r4, r9, r4, r2
 800d646:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d64a:	458c      	cmp	ip, r1
 800d64c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d650:	d8e7      	bhi.n	800d622 <__multiply+0xfe>
 800d652:	9a01      	ldr	r2, [sp, #4]
 800d654:	50b4      	str	r4, [r6, r2]
 800d656:	3604      	adds	r6, #4
 800d658:	e7a3      	b.n	800d5a2 <__multiply+0x7e>
 800d65a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1a5      	bne.n	800d5ae <__multiply+0x8a>
 800d662:	3f01      	subs	r7, #1
 800d664:	e7a1      	b.n	800d5aa <__multiply+0x86>
 800d666:	bf00      	nop
 800d668:	0802842c 	.word	0x0802842c
 800d66c:	08028520 	.word	0x08028520

0800d670 <__pow5mult>:
 800d670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d674:	4615      	mov	r5, r2
 800d676:	f012 0203 	ands.w	r2, r2, #3
 800d67a:	4606      	mov	r6, r0
 800d67c:	460f      	mov	r7, r1
 800d67e:	d007      	beq.n	800d690 <__pow5mult+0x20>
 800d680:	4c25      	ldr	r4, [pc, #148]	; (800d718 <__pow5mult+0xa8>)
 800d682:	3a01      	subs	r2, #1
 800d684:	2300      	movs	r3, #0
 800d686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d68a:	f7ff fe51 	bl	800d330 <__multadd>
 800d68e:	4607      	mov	r7, r0
 800d690:	10ad      	asrs	r5, r5, #2
 800d692:	d03d      	beq.n	800d710 <__pow5mult+0xa0>
 800d694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d696:	b97c      	cbnz	r4, 800d6b8 <__pow5mult+0x48>
 800d698:	2010      	movs	r0, #16
 800d69a:	f7fc f95b 	bl	8009954 <malloc>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	6270      	str	r0, [r6, #36]	; 0x24
 800d6a2:	b928      	cbnz	r0, 800d6b0 <__pow5mult+0x40>
 800d6a4:	4b1d      	ldr	r3, [pc, #116]	; (800d71c <__pow5mult+0xac>)
 800d6a6:	481e      	ldr	r0, [pc, #120]	; (800d720 <__pow5mult+0xb0>)
 800d6a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d6ac:	f7fc f8f8 	bl	80098a0 <__assert_func>
 800d6b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6b4:	6004      	str	r4, [r0, #0]
 800d6b6:	60c4      	str	r4, [r0, #12]
 800d6b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6c0:	b94c      	cbnz	r4, 800d6d6 <__pow5mult+0x66>
 800d6c2:	f240 2171 	movw	r1, #625	; 0x271
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f7ff ff16 	bl	800d4f8 <__i2b>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	6003      	str	r3, [r0, #0]
 800d6d6:	f04f 0900 	mov.w	r9, #0
 800d6da:	07eb      	lsls	r3, r5, #31
 800d6dc:	d50a      	bpl.n	800d6f4 <__pow5mult+0x84>
 800d6de:	4639      	mov	r1, r7
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f7ff ff1e 	bl	800d524 <__multiply>
 800d6e8:	4639      	mov	r1, r7
 800d6ea:	4680      	mov	r8, r0
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7ff fdfd 	bl	800d2ec <_Bfree>
 800d6f2:	4647      	mov	r7, r8
 800d6f4:	106d      	asrs	r5, r5, #1
 800d6f6:	d00b      	beq.n	800d710 <__pow5mult+0xa0>
 800d6f8:	6820      	ldr	r0, [r4, #0]
 800d6fa:	b938      	cbnz	r0, 800d70c <__pow5mult+0x9c>
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	4621      	mov	r1, r4
 800d700:	4630      	mov	r0, r6
 800d702:	f7ff ff0f 	bl	800d524 <__multiply>
 800d706:	6020      	str	r0, [r4, #0]
 800d708:	f8c0 9000 	str.w	r9, [r0]
 800d70c:	4604      	mov	r4, r0
 800d70e:	e7e4      	b.n	800d6da <__pow5mult+0x6a>
 800d710:	4638      	mov	r0, r7
 800d712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d716:	bf00      	nop
 800d718:	08028670 	.word	0x08028670
 800d71c:	080283b6 	.word	0x080283b6
 800d720:	08028520 	.word	0x08028520

0800d724 <__lshift>:
 800d724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d728:	460c      	mov	r4, r1
 800d72a:	6849      	ldr	r1, [r1, #4]
 800d72c:	6923      	ldr	r3, [r4, #16]
 800d72e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d732:	68a3      	ldr	r3, [r4, #8]
 800d734:	4607      	mov	r7, r0
 800d736:	4691      	mov	r9, r2
 800d738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d73c:	f108 0601 	add.w	r6, r8, #1
 800d740:	42b3      	cmp	r3, r6
 800d742:	db0b      	blt.n	800d75c <__lshift+0x38>
 800d744:	4638      	mov	r0, r7
 800d746:	f7ff fd91 	bl	800d26c <_Balloc>
 800d74a:	4605      	mov	r5, r0
 800d74c:	b948      	cbnz	r0, 800d762 <__lshift+0x3e>
 800d74e:	4602      	mov	r2, r0
 800d750:	4b28      	ldr	r3, [pc, #160]	; (800d7f4 <__lshift+0xd0>)
 800d752:	4829      	ldr	r0, [pc, #164]	; (800d7f8 <__lshift+0xd4>)
 800d754:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d758:	f7fc f8a2 	bl	80098a0 <__assert_func>
 800d75c:	3101      	adds	r1, #1
 800d75e:	005b      	lsls	r3, r3, #1
 800d760:	e7ee      	b.n	800d740 <__lshift+0x1c>
 800d762:	2300      	movs	r3, #0
 800d764:	f100 0114 	add.w	r1, r0, #20
 800d768:	f100 0210 	add.w	r2, r0, #16
 800d76c:	4618      	mov	r0, r3
 800d76e:	4553      	cmp	r3, sl
 800d770:	db33      	blt.n	800d7da <__lshift+0xb6>
 800d772:	6920      	ldr	r0, [r4, #16]
 800d774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d778:	f104 0314 	add.w	r3, r4, #20
 800d77c:	f019 091f 	ands.w	r9, r9, #31
 800d780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d784:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d788:	d02b      	beq.n	800d7e2 <__lshift+0xbe>
 800d78a:	f1c9 0e20 	rsb	lr, r9, #32
 800d78e:	468a      	mov	sl, r1
 800d790:	2200      	movs	r2, #0
 800d792:	6818      	ldr	r0, [r3, #0]
 800d794:	fa00 f009 	lsl.w	r0, r0, r9
 800d798:	4302      	orrs	r2, r0
 800d79a:	f84a 2b04 	str.w	r2, [sl], #4
 800d79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a2:	459c      	cmp	ip, r3
 800d7a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7a8:	d8f3      	bhi.n	800d792 <__lshift+0x6e>
 800d7aa:	ebac 0304 	sub.w	r3, ip, r4
 800d7ae:	3b15      	subs	r3, #21
 800d7b0:	f023 0303 	bic.w	r3, r3, #3
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	f104 0015 	add.w	r0, r4, #21
 800d7ba:	4584      	cmp	ip, r0
 800d7bc:	bf38      	it	cc
 800d7be:	2304      	movcc	r3, #4
 800d7c0:	50ca      	str	r2, [r1, r3]
 800d7c2:	b10a      	cbz	r2, 800d7c8 <__lshift+0xa4>
 800d7c4:	f108 0602 	add.w	r6, r8, #2
 800d7c8:	3e01      	subs	r6, #1
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	612e      	str	r6, [r5, #16]
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	f7ff fd8c 	bl	800d2ec <_Bfree>
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7de:	3301      	adds	r3, #1
 800d7e0:	e7c5      	b.n	800d76e <__lshift+0x4a>
 800d7e2:	3904      	subs	r1, #4
 800d7e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7ec:	459c      	cmp	ip, r3
 800d7ee:	d8f9      	bhi.n	800d7e4 <__lshift+0xc0>
 800d7f0:	e7ea      	b.n	800d7c8 <__lshift+0xa4>
 800d7f2:	bf00      	nop
 800d7f4:	0802842c 	.word	0x0802842c
 800d7f8:	08028520 	.word	0x08028520

0800d7fc <__mcmp>:
 800d7fc:	b530      	push	{r4, r5, lr}
 800d7fe:	6902      	ldr	r2, [r0, #16]
 800d800:	690c      	ldr	r4, [r1, #16]
 800d802:	1b12      	subs	r2, r2, r4
 800d804:	d10e      	bne.n	800d824 <__mcmp+0x28>
 800d806:	f100 0314 	add.w	r3, r0, #20
 800d80a:	3114      	adds	r1, #20
 800d80c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d810:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d814:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d818:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d81c:	42a5      	cmp	r5, r4
 800d81e:	d003      	beq.n	800d828 <__mcmp+0x2c>
 800d820:	d305      	bcc.n	800d82e <__mcmp+0x32>
 800d822:	2201      	movs	r2, #1
 800d824:	4610      	mov	r0, r2
 800d826:	bd30      	pop	{r4, r5, pc}
 800d828:	4283      	cmp	r3, r0
 800d82a:	d3f3      	bcc.n	800d814 <__mcmp+0x18>
 800d82c:	e7fa      	b.n	800d824 <__mcmp+0x28>
 800d82e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d832:	e7f7      	b.n	800d824 <__mcmp+0x28>

0800d834 <__mdiff>:
 800d834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	460c      	mov	r4, r1
 800d83a:	4606      	mov	r6, r0
 800d83c:	4611      	mov	r1, r2
 800d83e:	4620      	mov	r0, r4
 800d840:	4617      	mov	r7, r2
 800d842:	f7ff ffdb 	bl	800d7fc <__mcmp>
 800d846:	1e05      	subs	r5, r0, #0
 800d848:	d110      	bne.n	800d86c <__mdiff+0x38>
 800d84a:	4629      	mov	r1, r5
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7ff fd0d 	bl	800d26c <_Balloc>
 800d852:	b930      	cbnz	r0, 800d862 <__mdiff+0x2e>
 800d854:	4b39      	ldr	r3, [pc, #228]	; (800d93c <__mdiff+0x108>)
 800d856:	4602      	mov	r2, r0
 800d858:	f240 2132 	movw	r1, #562	; 0x232
 800d85c:	4838      	ldr	r0, [pc, #224]	; (800d940 <__mdiff+0x10c>)
 800d85e:	f7fc f81f 	bl	80098a0 <__assert_func>
 800d862:	2301      	movs	r3, #1
 800d864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86c:	bfa4      	itt	ge
 800d86e:	463b      	movge	r3, r7
 800d870:	4627      	movge	r7, r4
 800d872:	4630      	mov	r0, r6
 800d874:	6879      	ldr	r1, [r7, #4]
 800d876:	bfa6      	itte	ge
 800d878:	461c      	movge	r4, r3
 800d87a:	2500      	movge	r5, #0
 800d87c:	2501      	movlt	r5, #1
 800d87e:	f7ff fcf5 	bl	800d26c <_Balloc>
 800d882:	b920      	cbnz	r0, 800d88e <__mdiff+0x5a>
 800d884:	4b2d      	ldr	r3, [pc, #180]	; (800d93c <__mdiff+0x108>)
 800d886:	4602      	mov	r2, r0
 800d888:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d88c:	e7e6      	b.n	800d85c <__mdiff+0x28>
 800d88e:	693e      	ldr	r6, [r7, #16]
 800d890:	60c5      	str	r5, [r0, #12]
 800d892:	6925      	ldr	r5, [r4, #16]
 800d894:	f107 0114 	add.w	r1, r7, #20
 800d898:	f104 0914 	add.w	r9, r4, #20
 800d89c:	f100 0e14 	add.w	lr, r0, #20
 800d8a0:	f107 0210 	add.w	r2, r7, #16
 800d8a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d8a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d8ac:	46f2      	mov	sl, lr
 800d8ae:	2700      	movs	r7, #0
 800d8b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d8b8:	fa1f f883 	uxth.w	r8, r3
 800d8bc:	fa17 f78b 	uxtah	r7, r7, fp
 800d8c0:	0c1b      	lsrs	r3, r3, #16
 800d8c2:	eba7 0808 	sub.w	r8, r7, r8
 800d8c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d8ce:	fa1f f888 	uxth.w	r8, r8
 800d8d2:	141f      	asrs	r7, r3, #16
 800d8d4:	454d      	cmp	r5, r9
 800d8d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d8da:	f84a 3b04 	str.w	r3, [sl], #4
 800d8de:	d8e7      	bhi.n	800d8b0 <__mdiff+0x7c>
 800d8e0:	1b2b      	subs	r3, r5, r4
 800d8e2:	3b15      	subs	r3, #21
 800d8e4:	f023 0303 	bic.w	r3, r3, #3
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	3415      	adds	r4, #21
 800d8ec:	42a5      	cmp	r5, r4
 800d8ee:	bf38      	it	cc
 800d8f0:	2304      	movcc	r3, #4
 800d8f2:	4419      	add	r1, r3
 800d8f4:	4473      	add	r3, lr
 800d8f6:	469e      	mov	lr, r3
 800d8f8:	460d      	mov	r5, r1
 800d8fa:	4565      	cmp	r5, ip
 800d8fc:	d30e      	bcc.n	800d91c <__mdiff+0xe8>
 800d8fe:	f10c 0203 	add.w	r2, ip, #3
 800d902:	1a52      	subs	r2, r2, r1
 800d904:	f022 0203 	bic.w	r2, r2, #3
 800d908:	3903      	subs	r1, #3
 800d90a:	458c      	cmp	ip, r1
 800d90c:	bf38      	it	cc
 800d90e:	2200      	movcc	r2, #0
 800d910:	441a      	add	r2, r3
 800d912:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d916:	b17b      	cbz	r3, 800d938 <__mdiff+0x104>
 800d918:	6106      	str	r6, [r0, #16]
 800d91a:	e7a5      	b.n	800d868 <__mdiff+0x34>
 800d91c:	f855 8b04 	ldr.w	r8, [r5], #4
 800d920:	fa17 f488 	uxtah	r4, r7, r8
 800d924:	1422      	asrs	r2, r4, #16
 800d926:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d92a:	b2a4      	uxth	r4, r4
 800d92c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d930:	f84e 4b04 	str.w	r4, [lr], #4
 800d934:	1417      	asrs	r7, r2, #16
 800d936:	e7e0      	b.n	800d8fa <__mdiff+0xc6>
 800d938:	3e01      	subs	r6, #1
 800d93a:	e7ea      	b.n	800d912 <__mdiff+0xde>
 800d93c:	0802842c 	.word	0x0802842c
 800d940:	08028520 	.word	0x08028520

0800d944 <__ulp>:
 800d944:	b082      	sub	sp, #8
 800d946:	ed8d 0b00 	vstr	d0, [sp]
 800d94a:	9b01      	ldr	r3, [sp, #4]
 800d94c:	4912      	ldr	r1, [pc, #72]	; (800d998 <__ulp+0x54>)
 800d94e:	4019      	ands	r1, r3
 800d950:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d954:	2900      	cmp	r1, #0
 800d956:	dd05      	ble.n	800d964 <__ulp+0x20>
 800d958:	2200      	movs	r2, #0
 800d95a:	460b      	mov	r3, r1
 800d95c:	ec43 2b10 	vmov	d0, r2, r3
 800d960:	b002      	add	sp, #8
 800d962:	4770      	bx	lr
 800d964:	4249      	negs	r1, r1
 800d966:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d96a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d96e:	f04f 0200 	mov.w	r2, #0
 800d972:	f04f 0300 	mov.w	r3, #0
 800d976:	da04      	bge.n	800d982 <__ulp+0x3e>
 800d978:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d97c:	fa41 f300 	asr.w	r3, r1, r0
 800d980:	e7ec      	b.n	800d95c <__ulp+0x18>
 800d982:	f1a0 0114 	sub.w	r1, r0, #20
 800d986:	291e      	cmp	r1, #30
 800d988:	bfda      	itte	le
 800d98a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d98e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d992:	2101      	movgt	r1, #1
 800d994:	460a      	mov	r2, r1
 800d996:	e7e1      	b.n	800d95c <__ulp+0x18>
 800d998:	7ff00000 	.word	0x7ff00000

0800d99c <__b2d>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	6905      	ldr	r5, [r0, #16]
 800d9a0:	f100 0714 	add.w	r7, r0, #20
 800d9a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d9a8:	1f2e      	subs	r6, r5, #4
 800d9aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f7ff fd52 	bl	800d458 <__hi0bits>
 800d9b4:	f1c0 0320 	rsb	r3, r0, #32
 800d9b8:	280a      	cmp	r0, #10
 800d9ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800da38 <__b2d+0x9c>
 800d9be:	600b      	str	r3, [r1, #0]
 800d9c0:	dc14      	bgt.n	800d9ec <__b2d+0x50>
 800d9c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d9c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d9ca:	42b7      	cmp	r7, r6
 800d9cc:	ea41 030c 	orr.w	r3, r1, ip
 800d9d0:	bf34      	ite	cc
 800d9d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d9d6:	2100      	movcs	r1, #0
 800d9d8:	3015      	adds	r0, #21
 800d9da:	fa04 f000 	lsl.w	r0, r4, r0
 800d9de:	fa21 f10e 	lsr.w	r1, r1, lr
 800d9e2:	ea40 0201 	orr.w	r2, r0, r1
 800d9e6:	ec43 2b10 	vmov	d0, r2, r3
 800d9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ec:	42b7      	cmp	r7, r6
 800d9ee:	bf3a      	itte	cc
 800d9f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d9f4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d9f8:	2100      	movcs	r1, #0
 800d9fa:	380b      	subs	r0, #11
 800d9fc:	d017      	beq.n	800da2e <__b2d+0x92>
 800d9fe:	f1c0 0c20 	rsb	ip, r0, #32
 800da02:	fa04 f500 	lsl.w	r5, r4, r0
 800da06:	42be      	cmp	r6, r7
 800da08:	fa21 f40c 	lsr.w	r4, r1, ip
 800da0c:	ea45 0504 	orr.w	r5, r5, r4
 800da10:	bf8c      	ite	hi
 800da12:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800da16:	2400      	movls	r4, #0
 800da18:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800da1c:	fa01 f000 	lsl.w	r0, r1, r0
 800da20:	fa24 f40c 	lsr.w	r4, r4, ip
 800da24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800da28:	ea40 0204 	orr.w	r2, r0, r4
 800da2c:	e7db      	b.n	800d9e6 <__b2d+0x4a>
 800da2e:	ea44 030c 	orr.w	r3, r4, ip
 800da32:	460a      	mov	r2, r1
 800da34:	e7d7      	b.n	800d9e6 <__b2d+0x4a>
 800da36:	bf00      	nop
 800da38:	3ff00000 	.word	0x3ff00000

0800da3c <__d2b>:
 800da3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da40:	4689      	mov	r9, r1
 800da42:	2101      	movs	r1, #1
 800da44:	ec57 6b10 	vmov	r6, r7, d0
 800da48:	4690      	mov	r8, r2
 800da4a:	f7ff fc0f 	bl	800d26c <_Balloc>
 800da4e:	4604      	mov	r4, r0
 800da50:	b930      	cbnz	r0, 800da60 <__d2b+0x24>
 800da52:	4602      	mov	r2, r0
 800da54:	4b25      	ldr	r3, [pc, #148]	; (800daec <__d2b+0xb0>)
 800da56:	4826      	ldr	r0, [pc, #152]	; (800daf0 <__d2b+0xb4>)
 800da58:	f240 310a 	movw	r1, #778	; 0x30a
 800da5c:	f7fb ff20 	bl	80098a0 <__assert_func>
 800da60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da68:	bb35      	cbnz	r5, 800dab8 <__d2b+0x7c>
 800da6a:	2e00      	cmp	r6, #0
 800da6c:	9301      	str	r3, [sp, #4]
 800da6e:	d028      	beq.n	800dac2 <__d2b+0x86>
 800da70:	4668      	mov	r0, sp
 800da72:	9600      	str	r6, [sp, #0]
 800da74:	f7ff fd10 	bl	800d498 <__lo0bits>
 800da78:	9900      	ldr	r1, [sp, #0]
 800da7a:	b300      	cbz	r0, 800dabe <__d2b+0x82>
 800da7c:	9a01      	ldr	r2, [sp, #4]
 800da7e:	f1c0 0320 	rsb	r3, r0, #32
 800da82:	fa02 f303 	lsl.w	r3, r2, r3
 800da86:	430b      	orrs	r3, r1
 800da88:	40c2      	lsrs	r2, r0
 800da8a:	6163      	str	r3, [r4, #20]
 800da8c:	9201      	str	r2, [sp, #4]
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	61a3      	str	r3, [r4, #24]
 800da92:	2b00      	cmp	r3, #0
 800da94:	bf14      	ite	ne
 800da96:	2202      	movne	r2, #2
 800da98:	2201      	moveq	r2, #1
 800da9a:	6122      	str	r2, [r4, #16]
 800da9c:	b1d5      	cbz	r5, 800dad4 <__d2b+0x98>
 800da9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800daa2:	4405      	add	r5, r0
 800daa4:	f8c9 5000 	str.w	r5, [r9]
 800daa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800daac:	f8c8 0000 	str.w	r0, [r8]
 800dab0:	4620      	mov	r0, r4
 800dab2:	b003      	add	sp, #12
 800dab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dabc:	e7d5      	b.n	800da6a <__d2b+0x2e>
 800dabe:	6161      	str	r1, [r4, #20]
 800dac0:	e7e5      	b.n	800da8e <__d2b+0x52>
 800dac2:	a801      	add	r0, sp, #4
 800dac4:	f7ff fce8 	bl	800d498 <__lo0bits>
 800dac8:	9b01      	ldr	r3, [sp, #4]
 800daca:	6163      	str	r3, [r4, #20]
 800dacc:	2201      	movs	r2, #1
 800dace:	6122      	str	r2, [r4, #16]
 800dad0:	3020      	adds	r0, #32
 800dad2:	e7e3      	b.n	800da9c <__d2b+0x60>
 800dad4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dad8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dadc:	f8c9 0000 	str.w	r0, [r9]
 800dae0:	6918      	ldr	r0, [r3, #16]
 800dae2:	f7ff fcb9 	bl	800d458 <__hi0bits>
 800dae6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800daea:	e7df      	b.n	800daac <__d2b+0x70>
 800daec:	0802842c 	.word	0x0802842c
 800daf0:	08028520 	.word	0x08028520

0800daf4 <__ratio>:
 800daf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf8:	4688      	mov	r8, r1
 800dafa:	4669      	mov	r1, sp
 800dafc:	4681      	mov	r9, r0
 800dafe:	f7ff ff4d 	bl	800d99c <__b2d>
 800db02:	a901      	add	r1, sp, #4
 800db04:	4640      	mov	r0, r8
 800db06:	ec55 4b10 	vmov	r4, r5, d0
 800db0a:	f7ff ff47 	bl	800d99c <__b2d>
 800db0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800db16:	eba3 0c02 	sub.w	ip, r3, r2
 800db1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800db1e:	1a9b      	subs	r3, r3, r2
 800db20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800db24:	ec51 0b10 	vmov	r0, r1, d0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	bfd6      	itet	le
 800db2c:	460a      	movle	r2, r1
 800db2e:	462a      	movgt	r2, r5
 800db30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800db34:	468b      	mov	fp, r1
 800db36:	462f      	mov	r7, r5
 800db38:	bfd4      	ite	le
 800db3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800db3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800db42:	4620      	mov	r0, r4
 800db44:	ee10 2a10 	vmov	r2, s0
 800db48:	465b      	mov	r3, fp
 800db4a:	4639      	mov	r1, r7
 800db4c:	f7f2 fe8e 	bl	800086c <__aeabi_ddiv>
 800db50:	ec41 0b10 	vmov	d0, r0, r1
 800db54:	b003      	add	sp, #12
 800db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db5a <__copybits>:
 800db5a:	3901      	subs	r1, #1
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	1149      	asrs	r1, r1, #5
 800db60:	6914      	ldr	r4, [r2, #16]
 800db62:	3101      	adds	r1, #1
 800db64:	f102 0314 	add.w	r3, r2, #20
 800db68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db70:	1f05      	subs	r5, r0, #4
 800db72:	42a3      	cmp	r3, r4
 800db74:	d30c      	bcc.n	800db90 <__copybits+0x36>
 800db76:	1aa3      	subs	r3, r4, r2
 800db78:	3b11      	subs	r3, #17
 800db7a:	f023 0303 	bic.w	r3, r3, #3
 800db7e:	3211      	adds	r2, #17
 800db80:	42a2      	cmp	r2, r4
 800db82:	bf88      	it	hi
 800db84:	2300      	movhi	r3, #0
 800db86:	4418      	add	r0, r3
 800db88:	2300      	movs	r3, #0
 800db8a:	4288      	cmp	r0, r1
 800db8c:	d305      	bcc.n	800db9a <__copybits+0x40>
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	f853 6b04 	ldr.w	r6, [r3], #4
 800db94:	f845 6f04 	str.w	r6, [r5, #4]!
 800db98:	e7eb      	b.n	800db72 <__copybits+0x18>
 800db9a:	f840 3b04 	str.w	r3, [r0], #4
 800db9e:	e7f4      	b.n	800db8a <__copybits+0x30>

0800dba0 <__any_on>:
 800dba0:	f100 0214 	add.w	r2, r0, #20
 800dba4:	6900      	ldr	r0, [r0, #16]
 800dba6:	114b      	asrs	r3, r1, #5
 800dba8:	4298      	cmp	r0, r3
 800dbaa:	b510      	push	{r4, lr}
 800dbac:	db11      	blt.n	800dbd2 <__any_on+0x32>
 800dbae:	dd0a      	ble.n	800dbc6 <__any_on+0x26>
 800dbb0:	f011 011f 	ands.w	r1, r1, #31
 800dbb4:	d007      	beq.n	800dbc6 <__any_on+0x26>
 800dbb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dbba:	fa24 f001 	lsr.w	r0, r4, r1
 800dbbe:	fa00 f101 	lsl.w	r1, r0, r1
 800dbc2:	428c      	cmp	r4, r1
 800dbc4:	d10b      	bne.n	800dbde <__any_on+0x3e>
 800dbc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d803      	bhi.n	800dbd6 <__any_on+0x36>
 800dbce:	2000      	movs	r0, #0
 800dbd0:	bd10      	pop	{r4, pc}
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	e7f7      	b.n	800dbc6 <__any_on+0x26>
 800dbd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dbda:	2900      	cmp	r1, #0
 800dbdc:	d0f5      	beq.n	800dbca <__any_on+0x2a>
 800dbde:	2001      	movs	r0, #1
 800dbe0:	e7f6      	b.n	800dbd0 <__any_on+0x30>

0800dbe2 <_calloc_r>:
 800dbe2:	b513      	push	{r0, r1, r4, lr}
 800dbe4:	434a      	muls	r2, r1
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	9201      	str	r2, [sp, #4]
 800dbea:	f7fb ff21 	bl	8009a30 <_malloc_r>
 800dbee:	4604      	mov	r4, r0
 800dbf0:	b118      	cbz	r0, 800dbfa <_calloc_r+0x18>
 800dbf2:	9a01      	ldr	r2, [sp, #4]
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	f7fb fec3 	bl	8009980 <memset>
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	b002      	add	sp, #8
 800dbfe:	bd10      	pop	{r4, pc}

0800dc00 <_realloc_r>:
 800dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc02:	4607      	mov	r7, r0
 800dc04:	4614      	mov	r4, r2
 800dc06:	460e      	mov	r6, r1
 800dc08:	b921      	cbnz	r1, 800dc14 <_realloc_r+0x14>
 800dc0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc0e:	4611      	mov	r1, r2
 800dc10:	f7fb bf0e 	b.w	8009a30 <_malloc_r>
 800dc14:	b922      	cbnz	r2, 800dc20 <_realloc_r+0x20>
 800dc16:	f7fb febb 	bl	8009990 <_free_r>
 800dc1a:	4625      	mov	r5, r4
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc20:	f000 fa76 	bl	800e110 <_malloc_usable_size_r>
 800dc24:	42a0      	cmp	r0, r4
 800dc26:	d20f      	bcs.n	800dc48 <_realloc_r+0x48>
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	f7fb ff00 	bl	8009a30 <_malloc_r>
 800dc30:	4605      	mov	r5, r0
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d0f2      	beq.n	800dc1c <_realloc_r+0x1c>
 800dc36:	4631      	mov	r1, r6
 800dc38:	4622      	mov	r2, r4
 800dc3a:	f7fb fe93 	bl	8009964 <memcpy>
 800dc3e:	4631      	mov	r1, r6
 800dc40:	4638      	mov	r0, r7
 800dc42:	f7fb fea5 	bl	8009990 <_free_r>
 800dc46:	e7e9      	b.n	800dc1c <_realloc_r+0x1c>
 800dc48:	4635      	mov	r5, r6
 800dc4a:	e7e7      	b.n	800dc1c <_realloc_r+0x1c>

0800dc4c <__ssputs_r>:
 800dc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc50:	688e      	ldr	r6, [r1, #8]
 800dc52:	429e      	cmp	r6, r3
 800dc54:	4682      	mov	sl, r0
 800dc56:	460c      	mov	r4, r1
 800dc58:	4690      	mov	r8, r2
 800dc5a:	461f      	mov	r7, r3
 800dc5c:	d838      	bhi.n	800dcd0 <__ssputs_r+0x84>
 800dc5e:	898a      	ldrh	r2, [r1, #12]
 800dc60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc64:	d032      	beq.n	800dccc <__ssputs_r+0x80>
 800dc66:	6825      	ldr	r5, [r4, #0]
 800dc68:	6909      	ldr	r1, [r1, #16]
 800dc6a:	eba5 0901 	sub.w	r9, r5, r1
 800dc6e:	6965      	ldr	r5, [r4, #20]
 800dc70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc78:	3301      	adds	r3, #1
 800dc7a:	444b      	add	r3, r9
 800dc7c:	106d      	asrs	r5, r5, #1
 800dc7e:	429d      	cmp	r5, r3
 800dc80:	bf38      	it	cc
 800dc82:	461d      	movcc	r5, r3
 800dc84:	0553      	lsls	r3, r2, #21
 800dc86:	d531      	bpl.n	800dcec <__ssputs_r+0xa0>
 800dc88:	4629      	mov	r1, r5
 800dc8a:	f7fb fed1 	bl	8009a30 <_malloc_r>
 800dc8e:	4606      	mov	r6, r0
 800dc90:	b950      	cbnz	r0, 800dca8 <__ssputs_r+0x5c>
 800dc92:	230c      	movs	r3, #12
 800dc94:	f8ca 3000 	str.w	r3, [sl]
 800dc98:	89a3      	ldrh	r3, [r4, #12]
 800dc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc9e:	81a3      	strh	r3, [r4, #12]
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca8:	6921      	ldr	r1, [r4, #16]
 800dcaa:	464a      	mov	r2, r9
 800dcac:	f7fb fe5a 	bl	8009964 <memcpy>
 800dcb0:	89a3      	ldrh	r3, [r4, #12]
 800dcb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dcb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	6126      	str	r6, [r4, #16]
 800dcbe:	6165      	str	r5, [r4, #20]
 800dcc0:	444e      	add	r6, r9
 800dcc2:	eba5 0509 	sub.w	r5, r5, r9
 800dcc6:	6026      	str	r6, [r4, #0]
 800dcc8:	60a5      	str	r5, [r4, #8]
 800dcca:	463e      	mov	r6, r7
 800dccc:	42be      	cmp	r6, r7
 800dcce:	d900      	bls.n	800dcd2 <__ssputs_r+0x86>
 800dcd0:	463e      	mov	r6, r7
 800dcd2:	4632      	mov	r2, r6
 800dcd4:	6820      	ldr	r0, [r4, #0]
 800dcd6:	4641      	mov	r1, r8
 800dcd8:	f7ff faa2 	bl	800d220 <memmove>
 800dcdc:	68a3      	ldr	r3, [r4, #8]
 800dcde:	6822      	ldr	r2, [r4, #0]
 800dce0:	1b9b      	subs	r3, r3, r6
 800dce2:	4432      	add	r2, r6
 800dce4:	60a3      	str	r3, [r4, #8]
 800dce6:	6022      	str	r2, [r4, #0]
 800dce8:	2000      	movs	r0, #0
 800dcea:	e7db      	b.n	800dca4 <__ssputs_r+0x58>
 800dcec:	462a      	mov	r2, r5
 800dcee:	f7ff ff87 	bl	800dc00 <_realloc_r>
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d1e1      	bne.n	800dcbc <__ssputs_r+0x70>
 800dcf8:	6921      	ldr	r1, [r4, #16]
 800dcfa:	4650      	mov	r0, sl
 800dcfc:	f7fb fe48 	bl	8009990 <_free_r>
 800dd00:	e7c7      	b.n	800dc92 <__ssputs_r+0x46>
	...

0800dd04 <_svfiprintf_r>:
 800dd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd08:	4698      	mov	r8, r3
 800dd0a:	898b      	ldrh	r3, [r1, #12]
 800dd0c:	061b      	lsls	r3, r3, #24
 800dd0e:	b09d      	sub	sp, #116	; 0x74
 800dd10:	4607      	mov	r7, r0
 800dd12:	460d      	mov	r5, r1
 800dd14:	4614      	mov	r4, r2
 800dd16:	d50e      	bpl.n	800dd36 <_svfiprintf_r+0x32>
 800dd18:	690b      	ldr	r3, [r1, #16]
 800dd1a:	b963      	cbnz	r3, 800dd36 <_svfiprintf_r+0x32>
 800dd1c:	2140      	movs	r1, #64	; 0x40
 800dd1e:	f7fb fe87 	bl	8009a30 <_malloc_r>
 800dd22:	6028      	str	r0, [r5, #0]
 800dd24:	6128      	str	r0, [r5, #16]
 800dd26:	b920      	cbnz	r0, 800dd32 <_svfiprintf_r+0x2e>
 800dd28:	230c      	movs	r3, #12
 800dd2a:	603b      	str	r3, [r7, #0]
 800dd2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd30:	e0d1      	b.n	800ded6 <_svfiprintf_r+0x1d2>
 800dd32:	2340      	movs	r3, #64	; 0x40
 800dd34:	616b      	str	r3, [r5, #20]
 800dd36:	2300      	movs	r3, #0
 800dd38:	9309      	str	r3, [sp, #36]	; 0x24
 800dd3a:	2320      	movs	r3, #32
 800dd3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd40:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd44:	2330      	movs	r3, #48	; 0x30
 800dd46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800def0 <_svfiprintf_r+0x1ec>
 800dd4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd4e:	f04f 0901 	mov.w	r9, #1
 800dd52:	4623      	mov	r3, r4
 800dd54:	469a      	mov	sl, r3
 800dd56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd5a:	b10a      	cbz	r2, 800dd60 <_svfiprintf_r+0x5c>
 800dd5c:	2a25      	cmp	r2, #37	; 0x25
 800dd5e:	d1f9      	bne.n	800dd54 <_svfiprintf_r+0x50>
 800dd60:	ebba 0b04 	subs.w	fp, sl, r4
 800dd64:	d00b      	beq.n	800dd7e <_svfiprintf_r+0x7a>
 800dd66:	465b      	mov	r3, fp
 800dd68:	4622      	mov	r2, r4
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	4638      	mov	r0, r7
 800dd6e:	f7ff ff6d 	bl	800dc4c <__ssputs_r>
 800dd72:	3001      	adds	r0, #1
 800dd74:	f000 80aa 	beq.w	800decc <_svfiprintf_r+0x1c8>
 800dd78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd7a:	445a      	add	r2, fp
 800dd7c:	9209      	str	r2, [sp, #36]	; 0x24
 800dd7e:	f89a 3000 	ldrb.w	r3, [sl]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f000 80a2 	beq.w	800decc <_svfiprintf_r+0x1c8>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd92:	f10a 0a01 	add.w	sl, sl, #1
 800dd96:	9304      	str	r3, [sp, #16]
 800dd98:	9307      	str	r3, [sp, #28]
 800dd9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd9e:	931a      	str	r3, [sp, #104]	; 0x68
 800dda0:	4654      	mov	r4, sl
 800dda2:	2205      	movs	r2, #5
 800dda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dda8:	4851      	ldr	r0, [pc, #324]	; (800def0 <_svfiprintf_r+0x1ec>)
 800ddaa:	f7f2 fa29 	bl	8000200 <memchr>
 800ddae:	9a04      	ldr	r2, [sp, #16]
 800ddb0:	b9d8      	cbnz	r0, 800ddea <_svfiprintf_r+0xe6>
 800ddb2:	06d0      	lsls	r0, r2, #27
 800ddb4:	bf44      	itt	mi
 800ddb6:	2320      	movmi	r3, #32
 800ddb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddbc:	0711      	lsls	r1, r2, #28
 800ddbe:	bf44      	itt	mi
 800ddc0:	232b      	movmi	r3, #43	; 0x2b
 800ddc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddc6:	f89a 3000 	ldrb.w	r3, [sl]
 800ddca:	2b2a      	cmp	r3, #42	; 0x2a
 800ddcc:	d015      	beq.n	800ddfa <_svfiprintf_r+0xf6>
 800ddce:	9a07      	ldr	r2, [sp, #28]
 800ddd0:	4654      	mov	r4, sl
 800ddd2:	2000      	movs	r0, #0
 800ddd4:	f04f 0c0a 	mov.w	ip, #10
 800ddd8:	4621      	mov	r1, r4
 800ddda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddde:	3b30      	subs	r3, #48	; 0x30
 800dde0:	2b09      	cmp	r3, #9
 800dde2:	d94e      	bls.n	800de82 <_svfiprintf_r+0x17e>
 800dde4:	b1b0      	cbz	r0, 800de14 <_svfiprintf_r+0x110>
 800dde6:	9207      	str	r2, [sp, #28]
 800dde8:	e014      	b.n	800de14 <_svfiprintf_r+0x110>
 800ddea:	eba0 0308 	sub.w	r3, r0, r8
 800ddee:	fa09 f303 	lsl.w	r3, r9, r3
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	9304      	str	r3, [sp, #16]
 800ddf6:	46a2      	mov	sl, r4
 800ddf8:	e7d2      	b.n	800dda0 <_svfiprintf_r+0x9c>
 800ddfa:	9b03      	ldr	r3, [sp, #12]
 800ddfc:	1d19      	adds	r1, r3, #4
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	9103      	str	r1, [sp, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	bfbb      	ittet	lt
 800de06:	425b      	neglt	r3, r3
 800de08:	f042 0202 	orrlt.w	r2, r2, #2
 800de0c:	9307      	strge	r3, [sp, #28]
 800de0e:	9307      	strlt	r3, [sp, #28]
 800de10:	bfb8      	it	lt
 800de12:	9204      	strlt	r2, [sp, #16]
 800de14:	7823      	ldrb	r3, [r4, #0]
 800de16:	2b2e      	cmp	r3, #46	; 0x2e
 800de18:	d10c      	bne.n	800de34 <_svfiprintf_r+0x130>
 800de1a:	7863      	ldrb	r3, [r4, #1]
 800de1c:	2b2a      	cmp	r3, #42	; 0x2a
 800de1e:	d135      	bne.n	800de8c <_svfiprintf_r+0x188>
 800de20:	9b03      	ldr	r3, [sp, #12]
 800de22:	1d1a      	adds	r2, r3, #4
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	9203      	str	r2, [sp, #12]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	bfb8      	it	lt
 800de2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800de30:	3402      	adds	r4, #2
 800de32:	9305      	str	r3, [sp, #20]
 800de34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df00 <_svfiprintf_r+0x1fc>
 800de38:	7821      	ldrb	r1, [r4, #0]
 800de3a:	2203      	movs	r2, #3
 800de3c:	4650      	mov	r0, sl
 800de3e:	f7f2 f9df 	bl	8000200 <memchr>
 800de42:	b140      	cbz	r0, 800de56 <_svfiprintf_r+0x152>
 800de44:	2340      	movs	r3, #64	; 0x40
 800de46:	eba0 000a 	sub.w	r0, r0, sl
 800de4a:	fa03 f000 	lsl.w	r0, r3, r0
 800de4e:	9b04      	ldr	r3, [sp, #16]
 800de50:	4303      	orrs	r3, r0
 800de52:	3401      	adds	r4, #1
 800de54:	9304      	str	r3, [sp, #16]
 800de56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de5a:	4826      	ldr	r0, [pc, #152]	; (800def4 <_svfiprintf_r+0x1f0>)
 800de5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de60:	2206      	movs	r2, #6
 800de62:	f7f2 f9cd 	bl	8000200 <memchr>
 800de66:	2800      	cmp	r0, #0
 800de68:	d038      	beq.n	800dedc <_svfiprintf_r+0x1d8>
 800de6a:	4b23      	ldr	r3, [pc, #140]	; (800def8 <_svfiprintf_r+0x1f4>)
 800de6c:	bb1b      	cbnz	r3, 800deb6 <_svfiprintf_r+0x1b2>
 800de6e:	9b03      	ldr	r3, [sp, #12]
 800de70:	3307      	adds	r3, #7
 800de72:	f023 0307 	bic.w	r3, r3, #7
 800de76:	3308      	adds	r3, #8
 800de78:	9303      	str	r3, [sp, #12]
 800de7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de7c:	4433      	add	r3, r6
 800de7e:	9309      	str	r3, [sp, #36]	; 0x24
 800de80:	e767      	b.n	800dd52 <_svfiprintf_r+0x4e>
 800de82:	fb0c 3202 	mla	r2, ip, r2, r3
 800de86:	460c      	mov	r4, r1
 800de88:	2001      	movs	r0, #1
 800de8a:	e7a5      	b.n	800ddd8 <_svfiprintf_r+0xd4>
 800de8c:	2300      	movs	r3, #0
 800de8e:	3401      	adds	r4, #1
 800de90:	9305      	str	r3, [sp, #20]
 800de92:	4619      	mov	r1, r3
 800de94:	f04f 0c0a 	mov.w	ip, #10
 800de98:	4620      	mov	r0, r4
 800de9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de9e:	3a30      	subs	r2, #48	; 0x30
 800dea0:	2a09      	cmp	r2, #9
 800dea2:	d903      	bls.n	800deac <_svfiprintf_r+0x1a8>
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d0c5      	beq.n	800de34 <_svfiprintf_r+0x130>
 800dea8:	9105      	str	r1, [sp, #20]
 800deaa:	e7c3      	b.n	800de34 <_svfiprintf_r+0x130>
 800deac:	fb0c 2101 	mla	r1, ip, r1, r2
 800deb0:	4604      	mov	r4, r0
 800deb2:	2301      	movs	r3, #1
 800deb4:	e7f0      	b.n	800de98 <_svfiprintf_r+0x194>
 800deb6:	ab03      	add	r3, sp, #12
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	462a      	mov	r2, r5
 800debc:	4b0f      	ldr	r3, [pc, #60]	; (800defc <_svfiprintf_r+0x1f8>)
 800debe:	a904      	add	r1, sp, #16
 800dec0:	4638      	mov	r0, r7
 800dec2:	f7fc f809 	bl	8009ed8 <_printf_float>
 800dec6:	1c42      	adds	r2, r0, #1
 800dec8:	4606      	mov	r6, r0
 800deca:	d1d6      	bne.n	800de7a <_svfiprintf_r+0x176>
 800decc:	89ab      	ldrh	r3, [r5, #12]
 800dece:	065b      	lsls	r3, r3, #25
 800ded0:	f53f af2c 	bmi.w	800dd2c <_svfiprintf_r+0x28>
 800ded4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ded6:	b01d      	add	sp, #116	; 0x74
 800ded8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dedc:	ab03      	add	r3, sp, #12
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	462a      	mov	r2, r5
 800dee2:	4b06      	ldr	r3, [pc, #24]	; (800defc <_svfiprintf_r+0x1f8>)
 800dee4:	a904      	add	r1, sp, #16
 800dee6:	4638      	mov	r0, r7
 800dee8:	f7fc fa9a 	bl	800a420 <_printf_i>
 800deec:	e7eb      	b.n	800dec6 <_svfiprintf_r+0x1c2>
 800deee:	bf00      	nop
 800def0:	0802820c 	.word	0x0802820c
 800def4:	08028216 	.word	0x08028216
 800def8:	08009ed9 	.word	0x08009ed9
 800defc:	0800dc4d 	.word	0x0800dc4d
 800df00:	08028212 	.word	0x08028212
 800df04:	00000000 	.word	0x00000000

0800df08 <nan>:
 800df08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df10 <nan+0x8>
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	00000000 	.word	0x00000000
 800df14:	7ff80000 	.word	0x7ff80000

0800df18 <_raise_r>:
 800df18:	291f      	cmp	r1, #31
 800df1a:	b538      	push	{r3, r4, r5, lr}
 800df1c:	4604      	mov	r4, r0
 800df1e:	460d      	mov	r5, r1
 800df20:	d904      	bls.n	800df2c <_raise_r+0x14>
 800df22:	2316      	movs	r3, #22
 800df24:	6003      	str	r3, [r0, #0]
 800df26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df2a:	bd38      	pop	{r3, r4, r5, pc}
 800df2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df2e:	b112      	cbz	r2, 800df36 <_raise_r+0x1e>
 800df30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df34:	b94b      	cbnz	r3, 800df4a <_raise_r+0x32>
 800df36:	4620      	mov	r0, r4
 800df38:	f000 f830 	bl	800df9c <_getpid_r>
 800df3c:	462a      	mov	r2, r5
 800df3e:	4601      	mov	r1, r0
 800df40:	4620      	mov	r0, r4
 800df42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df46:	f000 b817 	b.w	800df78 <_kill_r>
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d00a      	beq.n	800df64 <_raise_r+0x4c>
 800df4e:	1c59      	adds	r1, r3, #1
 800df50:	d103      	bne.n	800df5a <_raise_r+0x42>
 800df52:	2316      	movs	r3, #22
 800df54:	6003      	str	r3, [r0, #0]
 800df56:	2001      	movs	r0, #1
 800df58:	e7e7      	b.n	800df2a <_raise_r+0x12>
 800df5a:	2400      	movs	r4, #0
 800df5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df60:	4628      	mov	r0, r5
 800df62:	4798      	blx	r3
 800df64:	2000      	movs	r0, #0
 800df66:	e7e0      	b.n	800df2a <_raise_r+0x12>

0800df68 <raise>:
 800df68:	4b02      	ldr	r3, [pc, #8]	; (800df74 <raise+0xc>)
 800df6a:	4601      	mov	r1, r0
 800df6c:	6818      	ldr	r0, [r3, #0]
 800df6e:	f7ff bfd3 	b.w	800df18 <_raise_r>
 800df72:	bf00      	nop
 800df74:	20000e04 	.word	0x20000e04

0800df78 <_kill_r>:
 800df78:	b538      	push	{r3, r4, r5, lr}
 800df7a:	4d07      	ldr	r5, [pc, #28]	; (800df98 <_kill_r+0x20>)
 800df7c:	2300      	movs	r3, #0
 800df7e:	4604      	mov	r4, r0
 800df80:	4608      	mov	r0, r1
 800df82:	4611      	mov	r1, r2
 800df84:	602b      	str	r3, [r5, #0]
 800df86:	f000 fd61 	bl	800ea4c <_kill>
 800df8a:	1c43      	adds	r3, r0, #1
 800df8c:	d102      	bne.n	800df94 <_kill_r+0x1c>
 800df8e:	682b      	ldr	r3, [r5, #0]
 800df90:	b103      	cbz	r3, 800df94 <_kill_r+0x1c>
 800df92:	6023      	str	r3, [r4, #0]
 800df94:	bd38      	pop	{r3, r4, r5, pc}
 800df96:	bf00      	nop
 800df98:	2000d390 	.word	0x2000d390

0800df9c <_getpid_r>:
 800df9c:	f000 bd46 	b.w	800ea2c <_getpid>

0800dfa0 <__sread>:
 800dfa0:	b510      	push	{r4, lr}
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfa8:	f000 f8ba 	bl	800e120 <_read_r>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	bfab      	itete	ge
 800dfb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfb2:	89a3      	ldrhlt	r3, [r4, #12]
 800dfb4:	181b      	addge	r3, r3, r0
 800dfb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfba:	bfac      	ite	ge
 800dfbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfbe:	81a3      	strhlt	r3, [r4, #12]
 800dfc0:	bd10      	pop	{r4, pc}

0800dfc2 <__swrite>:
 800dfc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc6:	461f      	mov	r7, r3
 800dfc8:	898b      	ldrh	r3, [r1, #12]
 800dfca:	05db      	lsls	r3, r3, #23
 800dfcc:	4605      	mov	r5, r0
 800dfce:	460c      	mov	r4, r1
 800dfd0:	4616      	mov	r6, r2
 800dfd2:	d505      	bpl.n	800dfe0 <__swrite+0x1e>
 800dfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd8:	2302      	movs	r3, #2
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f000 f886 	bl	800e0ec <_lseek_r>
 800dfe0:	89a3      	ldrh	r3, [r4, #12]
 800dfe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfea:	81a3      	strh	r3, [r4, #12]
 800dfec:	4632      	mov	r2, r6
 800dfee:	463b      	mov	r3, r7
 800dff0:	4628      	mov	r0, r5
 800dff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dff6:	f000 b835 	b.w	800e064 <_write_r>

0800dffa <__sseek>:
 800dffa:	b510      	push	{r4, lr}
 800dffc:	460c      	mov	r4, r1
 800dffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e002:	f000 f873 	bl	800e0ec <_lseek_r>
 800e006:	1c43      	adds	r3, r0, #1
 800e008:	89a3      	ldrh	r3, [r4, #12]
 800e00a:	bf15      	itete	ne
 800e00c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e00e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e016:	81a3      	strheq	r3, [r4, #12]
 800e018:	bf18      	it	ne
 800e01a:	81a3      	strhne	r3, [r4, #12]
 800e01c:	bd10      	pop	{r4, pc}

0800e01e <__sclose>:
 800e01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e022:	f000 b831 	b.w	800e088 <_close_r>

0800e026 <strncmp>:
 800e026:	b510      	push	{r4, lr}
 800e028:	b16a      	cbz	r2, 800e046 <strncmp+0x20>
 800e02a:	3901      	subs	r1, #1
 800e02c:	1884      	adds	r4, r0, r2
 800e02e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e032:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e036:	4293      	cmp	r3, r2
 800e038:	d103      	bne.n	800e042 <strncmp+0x1c>
 800e03a:	42a0      	cmp	r0, r4
 800e03c:	d001      	beq.n	800e042 <strncmp+0x1c>
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1f5      	bne.n	800e02e <strncmp+0x8>
 800e042:	1a98      	subs	r0, r3, r2
 800e044:	bd10      	pop	{r4, pc}
 800e046:	4610      	mov	r0, r2
 800e048:	e7fc      	b.n	800e044 <strncmp+0x1e>

0800e04a <__ascii_wctomb>:
 800e04a:	b149      	cbz	r1, 800e060 <__ascii_wctomb+0x16>
 800e04c:	2aff      	cmp	r2, #255	; 0xff
 800e04e:	bf85      	ittet	hi
 800e050:	238a      	movhi	r3, #138	; 0x8a
 800e052:	6003      	strhi	r3, [r0, #0]
 800e054:	700a      	strbls	r2, [r1, #0]
 800e056:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e05a:	bf98      	it	ls
 800e05c:	2001      	movls	r0, #1
 800e05e:	4770      	bx	lr
 800e060:	4608      	mov	r0, r1
 800e062:	4770      	bx	lr

0800e064 <_write_r>:
 800e064:	b538      	push	{r3, r4, r5, lr}
 800e066:	4d07      	ldr	r5, [pc, #28]	; (800e084 <_write_r+0x20>)
 800e068:	4604      	mov	r4, r0
 800e06a:	4608      	mov	r0, r1
 800e06c:	4611      	mov	r1, r2
 800e06e:	2200      	movs	r2, #0
 800e070:	602a      	str	r2, [r5, #0]
 800e072:	461a      	mov	r2, r3
 800e074:	f000 fd02 	bl	800ea7c <_write>
 800e078:	1c43      	adds	r3, r0, #1
 800e07a:	d102      	bne.n	800e082 <_write_r+0x1e>
 800e07c:	682b      	ldr	r3, [r5, #0]
 800e07e:	b103      	cbz	r3, 800e082 <_write_r+0x1e>
 800e080:	6023      	str	r3, [r4, #0]
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	2000d390 	.word	0x2000d390

0800e088 <_close_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	4d06      	ldr	r5, [pc, #24]	; (800e0a4 <_close_r+0x1c>)
 800e08c:	2300      	movs	r3, #0
 800e08e:	4604      	mov	r4, r0
 800e090:	4608      	mov	r0, r1
 800e092:	602b      	str	r3, [r5, #0]
 800e094:	f000 fcba 	bl	800ea0c <_close>
 800e098:	1c43      	adds	r3, r0, #1
 800e09a:	d102      	bne.n	800e0a2 <_close_r+0x1a>
 800e09c:	682b      	ldr	r3, [r5, #0]
 800e09e:	b103      	cbz	r3, 800e0a2 <_close_r+0x1a>
 800e0a0:	6023      	str	r3, [r4, #0]
 800e0a2:	bd38      	pop	{r3, r4, r5, pc}
 800e0a4:	2000d390 	.word	0x2000d390

0800e0a8 <_fstat_r>:
 800e0a8:	b538      	push	{r3, r4, r5, lr}
 800e0aa:	4d07      	ldr	r5, [pc, #28]	; (800e0c8 <_fstat_r+0x20>)
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	4608      	mov	r0, r1
 800e0b2:	4611      	mov	r1, r2
 800e0b4:	602b      	str	r3, [r5, #0]
 800e0b6:	f000 fcb1 	bl	800ea1c <_fstat>
 800e0ba:	1c43      	adds	r3, r0, #1
 800e0bc:	d102      	bne.n	800e0c4 <_fstat_r+0x1c>
 800e0be:	682b      	ldr	r3, [r5, #0]
 800e0c0:	b103      	cbz	r3, 800e0c4 <_fstat_r+0x1c>
 800e0c2:	6023      	str	r3, [r4, #0]
 800e0c4:	bd38      	pop	{r3, r4, r5, pc}
 800e0c6:	bf00      	nop
 800e0c8:	2000d390 	.word	0x2000d390

0800e0cc <_isatty_r>:
 800e0cc:	b538      	push	{r3, r4, r5, lr}
 800e0ce:	4d06      	ldr	r5, [pc, #24]	; (800e0e8 <_isatty_r+0x1c>)
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	4608      	mov	r0, r1
 800e0d6:	602b      	str	r3, [r5, #0]
 800e0d8:	f000 fcb0 	bl	800ea3c <_isatty>
 800e0dc:	1c43      	adds	r3, r0, #1
 800e0de:	d102      	bne.n	800e0e6 <_isatty_r+0x1a>
 800e0e0:	682b      	ldr	r3, [r5, #0]
 800e0e2:	b103      	cbz	r3, 800e0e6 <_isatty_r+0x1a>
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	bd38      	pop	{r3, r4, r5, pc}
 800e0e8:	2000d390 	.word	0x2000d390

0800e0ec <_lseek_r>:
 800e0ec:	b538      	push	{r3, r4, r5, lr}
 800e0ee:	4d07      	ldr	r5, [pc, #28]	; (800e10c <_lseek_r+0x20>)
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	4608      	mov	r0, r1
 800e0f4:	4611      	mov	r1, r2
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	602a      	str	r2, [r5, #0]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f000 fcae 	bl	800ea5c <_lseek>
 800e100:	1c43      	adds	r3, r0, #1
 800e102:	d102      	bne.n	800e10a <_lseek_r+0x1e>
 800e104:	682b      	ldr	r3, [r5, #0]
 800e106:	b103      	cbz	r3, 800e10a <_lseek_r+0x1e>
 800e108:	6023      	str	r3, [r4, #0]
 800e10a:	bd38      	pop	{r3, r4, r5, pc}
 800e10c:	2000d390 	.word	0x2000d390

0800e110 <_malloc_usable_size_r>:
 800e110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e114:	1f18      	subs	r0, r3, #4
 800e116:	2b00      	cmp	r3, #0
 800e118:	bfbc      	itt	lt
 800e11a:	580b      	ldrlt	r3, [r1, r0]
 800e11c:	18c0      	addlt	r0, r0, r3
 800e11e:	4770      	bx	lr

0800e120 <_read_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	4d07      	ldr	r5, [pc, #28]	; (800e140 <_read_r+0x20>)
 800e124:	4604      	mov	r4, r0
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	2200      	movs	r2, #0
 800e12c:	602a      	str	r2, [r5, #0]
 800e12e:	461a      	mov	r2, r3
 800e130:	f000 fc9c 	bl	800ea6c <_read>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_read_r+0x1e>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_read_r+0x1e>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	2000d390 	.word	0x2000d390

0800e144 <fabsf>:
 800e144:	ee10 3a10 	vmov	r3, s0
 800e148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e14c:	ee00 3a10 	vmov	s0, r3
 800e150:	4770      	bx	lr
	...

0800e154 <roundf>:
 800e154:	ee10 0a10 	vmov	r0, s0
 800e158:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e15c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800e160:	2a16      	cmp	r2, #22
 800e162:	dc15      	bgt.n	800e190 <roundf+0x3c>
 800e164:	2a00      	cmp	r2, #0
 800e166:	da08      	bge.n	800e17a <roundf+0x26>
 800e168:	3201      	adds	r2, #1
 800e16a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e16e:	d101      	bne.n	800e174 <roundf+0x20>
 800e170:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e174:	ee00 3a10 	vmov	s0, r3
 800e178:	4770      	bx	lr
 800e17a:	4908      	ldr	r1, [pc, #32]	; (800e19c <roundf+0x48>)
 800e17c:	4111      	asrs	r1, r2
 800e17e:	4208      	tst	r0, r1
 800e180:	d0fa      	beq.n	800e178 <roundf+0x24>
 800e182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e186:	4113      	asrs	r3, r2
 800e188:	4403      	add	r3, r0
 800e18a:	ea23 0301 	bic.w	r3, r3, r1
 800e18e:	e7f1      	b.n	800e174 <roundf+0x20>
 800e190:	2a80      	cmp	r2, #128	; 0x80
 800e192:	d1f1      	bne.n	800e178 <roundf+0x24>
 800e194:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop
 800e19c:	007fffff 	.word	0x007fffff

0800e1a0 <powf>:
 800e1a0:	b508      	push	{r3, lr}
 800e1a2:	ed2d 8b04 	vpush	{d8-d9}
 800e1a6:	eeb0 9a40 	vmov.f32	s18, s0
 800e1aa:	eef0 8a60 	vmov.f32	s17, s1
 800e1ae:	f000 f88f 	bl	800e2d0 <__ieee754_powf>
 800e1b2:	4b43      	ldr	r3, [pc, #268]	; (800e2c0 <powf+0x120>)
 800e1b4:	f993 3000 	ldrsb.w	r3, [r3]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	eeb0 8a40 	vmov.f32	s16, s0
 800e1be:	d012      	beq.n	800e1e6 <powf+0x46>
 800e1c0:	eef4 8a68 	vcmp.f32	s17, s17
 800e1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c8:	d60d      	bvs.n	800e1e6 <powf+0x46>
 800e1ca:	eeb4 9a49 	vcmp.f32	s18, s18
 800e1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d2:	d70d      	bvc.n	800e1f0 <powf+0x50>
 800e1d4:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e1e0:	bf08      	it	eq
 800e1e2:	eeb0 8a67 	vmoveq.f32	s16, s15
 800e1e6:	eeb0 0a48 	vmov.f32	s0, s16
 800e1ea:	ecbd 8b04 	vpop	{d8-d9}
 800e1ee:	bd08      	pop	{r3, pc}
 800e1f0:	eddf 9a34 	vldr	s19, [pc, #208]	; 800e2c4 <powf+0x124>
 800e1f4:	eeb4 9a69 	vcmp.f32	s18, s19
 800e1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fc:	d116      	bne.n	800e22c <powf+0x8c>
 800e1fe:	eef4 8a69 	vcmp.f32	s17, s19
 800e202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e206:	d057      	beq.n	800e2b8 <powf+0x118>
 800e208:	eeb0 0a68 	vmov.f32	s0, s17
 800e20c:	f000 fb23 	bl	800e856 <finitef>
 800e210:	2800      	cmp	r0, #0
 800e212:	d0e8      	beq.n	800e1e6 <powf+0x46>
 800e214:	eef4 8ae9 	vcmpe.f32	s17, s19
 800e218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e21c:	d5e3      	bpl.n	800e1e6 <powf+0x46>
 800e21e:	f7fb fb5d 	bl	80098dc <__errno>
 800e222:	2321      	movs	r3, #33	; 0x21
 800e224:	6003      	str	r3, [r0, #0]
 800e226:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800e2c8 <powf+0x128>
 800e22a:	e7dc      	b.n	800e1e6 <powf+0x46>
 800e22c:	f000 fb13 	bl	800e856 <finitef>
 800e230:	bb50      	cbnz	r0, 800e288 <powf+0xe8>
 800e232:	eeb0 0a49 	vmov.f32	s0, s18
 800e236:	f000 fb0e 	bl	800e856 <finitef>
 800e23a:	b328      	cbz	r0, 800e288 <powf+0xe8>
 800e23c:	eeb0 0a68 	vmov.f32	s0, s17
 800e240:	f000 fb09 	bl	800e856 <finitef>
 800e244:	b300      	cbz	r0, 800e288 <powf+0xe8>
 800e246:	eeb4 8a48 	vcmp.f32	s16, s16
 800e24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24e:	d706      	bvc.n	800e25e <powf+0xbe>
 800e250:	f7fb fb44 	bl	80098dc <__errno>
 800e254:	2321      	movs	r3, #33	; 0x21
 800e256:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800e25a:	6003      	str	r3, [r0, #0]
 800e25c:	e7c3      	b.n	800e1e6 <powf+0x46>
 800e25e:	f7fb fb3d 	bl	80098dc <__errno>
 800e262:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800e266:	2322      	movs	r3, #34	; 0x22
 800e268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26c:	6003      	str	r3, [r0, #0]
 800e26e:	d508      	bpl.n	800e282 <powf+0xe2>
 800e270:	eeb0 0a68 	vmov.f32	s0, s17
 800e274:	f000 fafc 	bl	800e870 <rintf>
 800e278:	eeb4 0a68 	vcmp.f32	s0, s17
 800e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e280:	d1d1      	bne.n	800e226 <powf+0x86>
 800e282:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800e2cc <powf+0x12c>
 800e286:	e7ae      	b.n	800e1e6 <powf+0x46>
 800e288:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e290:	d1a9      	bne.n	800e1e6 <powf+0x46>
 800e292:	eeb0 0a49 	vmov.f32	s0, s18
 800e296:	f000 fade 	bl	800e856 <finitef>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d0a3      	beq.n	800e1e6 <powf+0x46>
 800e29e:	eeb0 0a68 	vmov.f32	s0, s17
 800e2a2:	f000 fad8 	bl	800e856 <finitef>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d09d      	beq.n	800e1e6 <powf+0x46>
 800e2aa:	f7fb fb17 	bl	80098dc <__errno>
 800e2ae:	2322      	movs	r3, #34	; 0x22
 800e2b0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800e2c4 <powf+0x124>
 800e2b4:	6003      	str	r3, [r0, #0]
 800e2b6:	e796      	b.n	800e1e6 <powf+0x46>
 800e2b8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e2bc:	e793      	b.n	800e1e6 <powf+0x46>
 800e2be:	bf00      	nop
 800e2c0:	20000fd8 	.word	0x20000fd8
 800e2c4:	00000000 	.word	0x00000000
 800e2c8:	ff800000 	.word	0xff800000
 800e2cc:	7f800000 	.word	0x7f800000

0800e2d0 <__ieee754_powf>:
 800e2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d4:	ee10 5a90 	vmov	r5, s1
 800e2d8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800e2dc:	ed2d 8b02 	vpush	{d8}
 800e2e0:	eeb0 8a40 	vmov.f32	s16, s0
 800e2e4:	eef0 8a60 	vmov.f32	s17, s1
 800e2e8:	f000 8291 	beq.w	800e80e <__ieee754_powf+0x53e>
 800e2ec:	ee10 8a10 	vmov	r8, s0
 800e2f0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800e2f4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e2f8:	dc06      	bgt.n	800e308 <__ieee754_powf+0x38>
 800e2fa:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e2fe:	dd0a      	ble.n	800e316 <__ieee754_powf+0x46>
 800e300:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e304:	f000 8283 	beq.w	800e80e <__ieee754_powf+0x53e>
 800e308:	ecbd 8b02 	vpop	{d8}
 800e30c:	48d8      	ldr	r0, [pc, #864]	; (800e670 <__ieee754_powf+0x3a0>)
 800e30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e312:	f7fc bbcb 	b.w	800aaac <nanf>
 800e316:	f1b8 0f00 	cmp.w	r8, #0
 800e31a:	da1f      	bge.n	800e35c <__ieee754_powf+0x8c>
 800e31c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800e320:	da2e      	bge.n	800e380 <__ieee754_powf+0xb0>
 800e322:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e326:	f2c0 827b 	blt.w	800e820 <__ieee754_powf+0x550>
 800e32a:	15fb      	asrs	r3, r7, #23
 800e32c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e330:	fa47 f603 	asr.w	r6, r7, r3
 800e334:	fa06 f303 	lsl.w	r3, r6, r3
 800e338:	42bb      	cmp	r3, r7
 800e33a:	f040 8271 	bne.w	800e820 <__ieee754_powf+0x550>
 800e33e:	f006 0601 	and.w	r6, r6, #1
 800e342:	f1c6 0602 	rsb	r6, r6, #2
 800e346:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e34a:	d120      	bne.n	800e38e <__ieee754_powf+0xbe>
 800e34c:	2d00      	cmp	r5, #0
 800e34e:	f280 8264 	bge.w	800e81a <__ieee754_powf+0x54a>
 800e352:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e356:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e35a:	e00d      	b.n	800e378 <__ieee754_powf+0xa8>
 800e35c:	2600      	movs	r6, #0
 800e35e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e362:	d1f0      	bne.n	800e346 <__ieee754_powf+0x76>
 800e364:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e368:	f000 8251 	beq.w	800e80e <__ieee754_powf+0x53e>
 800e36c:	dd0a      	ble.n	800e384 <__ieee754_powf+0xb4>
 800e36e:	2d00      	cmp	r5, #0
 800e370:	f280 8250 	bge.w	800e814 <__ieee754_powf+0x544>
 800e374:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800e674 <__ieee754_powf+0x3a4>
 800e378:	ecbd 8b02 	vpop	{d8}
 800e37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e380:	2602      	movs	r6, #2
 800e382:	e7ec      	b.n	800e35e <__ieee754_powf+0x8e>
 800e384:	2d00      	cmp	r5, #0
 800e386:	daf5      	bge.n	800e374 <__ieee754_powf+0xa4>
 800e388:	eeb1 0a68 	vneg.f32	s0, s17
 800e38c:	e7f4      	b.n	800e378 <__ieee754_powf+0xa8>
 800e38e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800e392:	d102      	bne.n	800e39a <__ieee754_powf+0xca>
 800e394:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e398:	e7ee      	b.n	800e378 <__ieee754_powf+0xa8>
 800e39a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800e39e:	eeb0 0a48 	vmov.f32	s0, s16
 800e3a2:	d108      	bne.n	800e3b6 <__ieee754_powf+0xe6>
 800e3a4:	f1b8 0f00 	cmp.w	r8, #0
 800e3a8:	db05      	blt.n	800e3b6 <__ieee754_powf+0xe6>
 800e3aa:	ecbd 8b02 	vpop	{d8}
 800e3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b2:	f000 ba4d 	b.w	800e850 <__ieee754_sqrtf>
 800e3b6:	f7ff fec5 	bl	800e144 <fabsf>
 800e3ba:	b124      	cbz	r4, 800e3c6 <__ieee754_powf+0xf6>
 800e3bc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800e3c0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e3c4:	d117      	bne.n	800e3f6 <__ieee754_powf+0x126>
 800e3c6:	2d00      	cmp	r5, #0
 800e3c8:	bfbc      	itt	lt
 800e3ca:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e3ce:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e3d2:	f1b8 0f00 	cmp.w	r8, #0
 800e3d6:	dacf      	bge.n	800e378 <__ieee754_powf+0xa8>
 800e3d8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800e3dc:	ea54 0306 	orrs.w	r3, r4, r6
 800e3e0:	d104      	bne.n	800e3ec <__ieee754_powf+0x11c>
 800e3e2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e3e6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e3ea:	e7c5      	b.n	800e378 <__ieee754_powf+0xa8>
 800e3ec:	2e01      	cmp	r6, #1
 800e3ee:	d1c3      	bne.n	800e378 <__ieee754_powf+0xa8>
 800e3f0:	eeb1 0a40 	vneg.f32	s0, s0
 800e3f4:	e7c0      	b.n	800e378 <__ieee754_powf+0xa8>
 800e3f6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800e3fa:	3801      	subs	r0, #1
 800e3fc:	ea56 0300 	orrs.w	r3, r6, r0
 800e400:	d104      	bne.n	800e40c <__ieee754_powf+0x13c>
 800e402:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e406:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e40a:	e7b5      	b.n	800e378 <__ieee754_powf+0xa8>
 800e40c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800e410:	dd6b      	ble.n	800e4ea <__ieee754_powf+0x21a>
 800e412:	4b99      	ldr	r3, [pc, #612]	; (800e678 <__ieee754_powf+0x3a8>)
 800e414:	429c      	cmp	r4, r3
 800e416:	dc06      	bgt.n	800e426 <__ieee754_powf+0x156>
 800e418:	2d00      	cmp	r5, #0
 800e41a:	daab      	bge.n	800e374 <__ieee754_powf+0xa4>
 800e41c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800e67c <__ieee754_powf+0x3ac>
 800e420:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e424:	e7a8      	b.n	800e378 <__ieee754_powf+0xa8>
 800e426:	4b96      	ldr	r3, [pc, #600]	; (800e680 <__ieee754_powf+0x3b0>)
 800e428:	429c      	cmp	r4, r3
 800e42a:	dd02      	ble.n	800e432 <__ieee754_powf+0x162>
 800e42c:	2d00      	cmp	r5, #0
 800e42e:	dcf5      	bgt.n	800e41c <__ieee754_powf+0x14c>
 800e430:	e7a0      	b.n	800e374 <__ieee754_powf+0xa4>
 800e432:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e436:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e43a:	eddf 6a92 	vldr	s13, [pc, #584]	; 800e684 <__ieee754_powf+0x3b4>
 800e43e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e442:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e446:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e44a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e44e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e456:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800e688 <__ieee754_powf+0x3b8>
 800e45a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800e45e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800e68c <__ieee754_powf+0x3bc>
 800e462:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e466:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e690 <__ieee754_powf+0x3c0>
 800e46a:	eef0 6a67 	vmov.f32	s13, s15
 800e46e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e472:	ee16 3a90 	vmov	r3, s13
 800e476:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e47a:	f023 030f 	bic.w	r3, r3, #15
 800e47e:	ee00 3a90 	vmov	s1, r3
 800e482:	eee0 0a47 	vfms.f32	s1, s0, s14
 800e486:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e48a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800e48e:	f025 050f 	bic.w	r5, r5, #15
 800e492:	ee07 5a10 	vmov	s14, r5
 800e496:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e49a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e49e:	ee07 3a90 	vmov	s15, r3
 800e4a2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e4a6:	3e01      	subs	r6, #1
 800e4a8:	ea56 0200 	orrs.w	r2, r6, r0
 800e4ac:	ee07 5a10 	vmov	s14, r5
 800e4b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e4b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e4b8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e4bc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e4c0:	ee17 4a10 	vmov	r4, s14
 800e4c4:	bf08      	it	eq
 800e4c6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e4ca:	2c00      	cmp	r4, #0
 800e4cc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e4d0:	f340 8184 	ble.w	800e7dc <__ieee754_powf+0x50c>
 800e4d4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e4d8:	f340 80fc 	ble.w	800e6d4 <__ieee754_powf+0x404>
 800e4dc:	eddf 7a67 	vldr	s15, [pc, #412]	; 800e67c <__ieee754_powf+0x3ac>
 800e4e0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e4e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e4e8:	e746      	b.n	800e378 <__ieee754_powf+0xa8>
 800e4ea:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800e4ee:	bf01      	itttt	eq
 800e4f0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800e694 <__ieee754_powf+0x3c4>
 800e4f4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e4f8:	f06f 0217 	mvneq.w	r2, #23
 800e4fc:	ee17 4a90 	vmoveq	r4, s15
 800e500:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800e504:	bf18      	it	ne
 800e506:	2200      	movne	r2, #0
 800e508:	3b7f      	subs	r3, #127	; 0x7f
 800e50a:	4413      	add	r3, r2
 800e50c:	4a62      	ldr	r2, [pc, #392]	; (800e698 <__ieee754_powf+0x3c8>)
 800e50e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800e512:	4294      	cmp	r4, r2
 800e514:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800e518:	dd06      	ble.n	800e528 <__ieee754_powf+0x258>
 800e51a:	4a60      	ldr	r2, [pc, #384]	; (800e69c <__ieee754_powf+0x3cc>)
 800e51c:	4294      	cmp	r4, r2
 800e51e:	f340 80a4 	ble.w	800e66a <__ieee754_powf+0x39a>
 800e522:	3301      	adds	r3, #1
 800e524:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e528:	2400      	movs	r4, #0
 800e52a:	4a5d      	ldr	r2, [pc, #372]	; (800e6a0 <__ieee754_powf+0x3d0>)
 800e52c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e530:	ee07 1a90 	vmov	s15, r1
 800e534:	ed92 7a00 	vldr	s14, [r2]
 800e538:	4a5a      	ldr	r2, [pc, #360]	; (800e6a4 <__ieee754_powf+0x3d4>)
 800e53a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e53e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e542:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e546:	1049      	asrs	r1, r1, #1
 800e548:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e54c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e550:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800e554:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800e558:	ee06 1a10 	vmov	s12, r1
 800e55c:	ee65 4a26 	vmul.f32	s9, s10, s13
 800e560:	ee36 7a47 	vsub.f32	s14, s12, s14
 800e564:	ee14 7a90 	vmov	r7, s9
 800e568:	4017      	ands	r7, r2
 800e56a:	ee05 7a90 	vmov	s11, r7
 800e56e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800e572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e576:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800e6a8 <__ieee754_powf+0x3d8>
 800e57a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800e57e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e582:	ee25 6a26 	vmul.f32	s12, s10, s13
 800e586:	eddf 6a49 	vldr	s13, [pc, #292]	; 800e6ac <__ieee754_powf+0x3dc>
 800e58a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e58e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e6b0 <__ieee754_powf+0x3e0>
 800e592:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e596:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800e684 <__ieee754_powf+0x3b4>
 800e59a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e59e:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e6b4 <__ieee754_powf+0x3e4>
 800e5a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e5a6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800e6b8 <__ieee754_powf+0x3e8>
 800e5aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e5ae:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800e5b2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800e5b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e5ba:	eee5 6a07 	vfma.f32	s13, s10, s14
 800e5be:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800e5c2:	eef0 7a45 	vmov.f32	s15, s10
 800e5c6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800e5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5ce:	ee17 1a90 	vmov	r1, s15
 800e5d2:	4011      	ands	r1, r2
 800e5d4:	ee07 1a90 	vmov	s15, r1
 800e5d8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800e5dc:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800e5e0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e5e4:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e5e8:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e5ec:	eeb0 6a47 	vmov.f32	s12, s14
 800e5f0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e5f4:	ee16 1a10 	vmov	r1, s12
 800e5f8:	4011      	ands	r1, r2
 800e5fa:	ee06 1a90 	vmov	s13, r1
 800e5fe:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800e602:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e6bc <__ieee754_powf+0x3ec>
 800e606:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e6c0 <__ieee754_powf+0x3f0>
 800e60a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e60e:	ee06 1a10 	vmov	s12, r1
 800e612:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e616:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e6c4 <__ieee754_powf+0x3f4>
 800e61a:	492b      	ldr	r1, [pc, #172]	; (800e6c8 <__ieee754_powf+0x3f8>)
 800e61c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e624:	edd1 7a00 	vldr	s15, [r1]
 800e628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e62c:	ee07 3a90 	vmov	s15, r3
 800e630:	4b26      	ldr	r3, [pc, #152]	; (800e6cc <__ieee754_powf+0x3fc>)
 800e632:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e636:	eef0 7a47 	vmov.f32	s15, s14
 800e63a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e63e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e642:	edd4 0a00 	vldr	s1, [r4]
 800e646:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e64e:	ee17 3a90 	vmov	r3, s15
 800e652:	4013      	ands	r3, r2
 800e654:	ee07 3a90 	vmov	s15, r3
 800e658:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e65c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800e660:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e664:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e668:	e70f      	b.n	800e48a <__ieee754_powf+0x1ba>
 800e66a:	2401      	movs	r4, #1
 800e66c:	e75d      	b.n	800e52a <__ieee754_powf+0x25a>
 800e66e:	bf00      	nop
 800e670:	08028207 	.word	0x08028207
 800e674:	00000000 	.word	0x00000000
 800e678:	3f7ffff7 	.word	0x3f7ffff7
 800e67c:	7149f2ca 	.word	0x7149f2ca
 800e680:	3f800007 	.word	0x3f800007
 800e684:	3eaaaaab 	.word	0x3eaaaaab
 800e688:	3fb8aa3b 	.word	0x3fb8aa3b
 800e68c:	36eca570 	.word	0x36eca570
 800e690:	3fb8aa00 	.word	0x3fb8aa00
 800e694:	4b800000 	.word	0x4b800000
 800e698:	001cc471 	.word	0x001cc471
 800e69c:	005db3d6 	.word	0x005db3d6
 800e6a0:	0802867c 	.word	0x0802867c
 800e6a4:	fffff000 	.word	0xfffff000
 800e6a8:	3e6c3255 	.word	0x3e6c3255
 800e6ac:	3e53f142 	.word	0x3e53f142
 800e6b0:	3e8ba305 	.word	0x3e8ba305
 800e6b4:	3edb6db7 	.word	0x3edb6db7
 800e6b8:	3f19999a 	.word	0x3f19999a
 800e6bc:	3f76384f 	.word	0x3f76384f
 800e6c0:	3f763800 	.word	0x3f763800
 800e6c4:	369dc3a0 	.word	0x369dc3a0
 800e6c8:	0802868c 	.word	0x0802868c
 800e6cc:	08028684 	.word	0x08028684
 800e6d0:	3338aa3c 	.word	0x3338aa3c
 800e6d4:	f040 8092 	bne.w	800e7fc <__ieee754_powf+0x52c>
 800e6d8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e6d0 <__ieee754_powf+0x400>
 800e6dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e6e0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e6e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ec:	f73f aef6 	bgt.w	800e4dc <__ieee754_powf+0x20c>
 800e6f0:	15db      	asrs	r3, r3, #23
 800e6f2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e6f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e6fa:	4103      	asrs	r3, r0
 800e6fc:	4423      	add	r3, r4
 800e6fe:	4949      	ldr	r1, [pc, #292]	; (800e824 <__ieee754_powf+0x554>)
 800e700:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e704:	3a7f      	subs	r2, #127	; 0x7f
 800e706:	4111      	asrs	r1, r2
 800e708:	ea23 0101 	bic.w	r1, r3, r1
 800e70c:	ee07 1a10 	vmov	s14, r1
 800e710:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e714:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e718:	f1c2 0217 	rsb	r2, r2, #23
 800e71c:	4110      	asrs	r0, r2
 800e71e:	2c00      	cmp	r4, #0
 800e720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e724:	bfb8      	it	lt
 800e726:	4240      	neglt	r0, r0
 800e728:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e72c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800e828 <__ieee754_powf+0x558>
 800e730:	ee17 3a10 	vmov	r3, s14
 800e734:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e738:	f023 030f 	bic.w	r3, r3, #15
 800e73c:	ee07 3a10 	vmov	s14, r3
 800e740:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e744:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e748:	eddf 7a38 	vldr	s15, [pc, #224]	; 800e82c <__ieee754_powf+0x55c>
 800e74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e750:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e754:	eddf 6a36 	vldr	s13, [pc, #216]	; 800e830 <__ieee754_powf+0x560>
 800e758:	eeb0 0a67 	vmov.f32	s0, s15
 800e75c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800e760:	eeb0 6a40 	vmov.f32	s12, s0
 800e764:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e768:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e76c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e770:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e834 <__ieee754_powf+0x564>
 800e774:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800e838 <__ieee754_powf+0x568>
 800e778:	eea7 6a26 	vfma.f32	s12, s14, s13
 800e77c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800e83c <__ieee754_powf+0x56c>
 800e780:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e784:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800e840 <__ieee754_powf+0x570>
 800e788:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e78c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800e844 <__ieee754_powf+0x574>
 800e790:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e794:	eeb0 6a40 	vmov.f32	s12, s0
 800e798:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e79c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e7a0:	eeb0 7a46 	vmov.f32	s14, s12
 800e7a4:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e7a8:	ee20 6a06 	vmul.f32	s12, s0, s12
 800e7ac:	eee0 7a27 	vfma.f32	s15, s0, s15
 800e7b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e7b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e7bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e7c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e7c4:	ee10 3a10 	vmov	r3, s0
 800e7c8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e7cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e7d0:	da1a      	bge.n	800e808 <__ieee754_powf+0x538>
 800e7d2:	f000 f8a9 	bl	800e928 <scalbnf>
 800e7d6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e7da:	e5cd      	b.n	800e378 <__ieee754_powf+0xa8>
 800e7dc:	4a1a      	ldr	r2, [pc, #104]	; (800e848 <__ieee754_powf+0x578>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	dd02      	ble.n	800e7e8 <__ieee754_powf+0x518>
 800e7e2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800e84c <__ieee754_powf+0x57c>
 800e7e6:	e67b      	b.n	800e4e0 <__ieee754_powf+0x210>
 800e7e8:	d108      	bne.n	800e7fc <__ieee754_powf+0x52c>
 800e7ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e7ee:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7f6:	f6ff af7b 	blt.w	800e6f0 <__ieee754_powf+0x420>
 800e7fa:	e7f2      	b.n	800e7e2 <__ieee754_powf+0x512>
 800e7fc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e800:	f73f af76 	bgt.w	800e6f0 <__ieee754_powf+0x420>
 800e804:	2000      	movs	r0, #0
 800e806:	e78f      	b.n	800e728 <__ieee754_powf+0x458>
 800e808:	ee00 3a10 	vmov	s0, r3
 800e80c:	e7e3      	b.n	800e7d6 <__ieee754_powf+0x506>
 800e80e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e812:	e5b1      	b.n	800e378 <__ieee754_powf+0xa8>
 800e814:	eeb0 0a68 	vmov.f32	s0, s17
 800e818:	e5ae      	b.n	800e378 <__ieee754_powf+0xa8>
 800e81a:	eeb0 0a48 	vmov.f32	s0, s16
 800e81e:	e5ab      	b.n	800e378 <__ieee754_powf+0xa8>
 800e820:	2600      	movs	r6, #0
 800e822:	e590      	b.n	800e346 <__ieee754_powf+0x76>
 800e824:	007fffff 	.word	0x007fffff
 800e828:	3f317218 	.word	0x3f317218
 800e82c:	35bfbe8c 	.word	0x35bfbe8c
 800e830:	3f317200 	.word	0x3f317200
 800e834:	3331bb4c 	.word	0x3331bb4c
 800e838:	b5ddea0e 	.word	0xb5ddea0e
 800e83c:	388ab355 	.word	0x388ab355
 800e840:	bb360b61 	.word	0xbb360b61
 800e844:	3e2aaaab 	.word	0x3e2aaaab
 800e848:	43160000 	.word	0x43160000
 800e84c:	0da24260 	.word	0x0da24260

0800e850 <__ieee754_sqrtf>:
 800e850:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e854:	4770      	bx	lr

0800e856 <finitef>:
 800e856:	b082      	sub	sp, #8
 800e858:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e85c:	9801      	ldr	r0, [sp, #4]
 800e85e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e862:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e866:	bfac      	ite	ge
 800e868:	2000      	movge	r0, #0
 800e86a:	2001      	movlt	r0, #1
 800e86c:	b002      	add	sp, #8
 800e86e:	4770      	bx	lr

0800e870 <rintf>:
 800e870:	ee10 2a10 	vmov	r2, s0
 800e874:	b513      	push	{r0, r1, r4, lr}
 800e876:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e87a:	397f      	subs	r1, #127	; 0x7f
 800e87c:	2916      	cmp	r1, #22
 800e87e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e882:	dc47      	bgt.n	800e914 <rintf+0xa4>
 800e884:	b32b      	cbz	r3, 800e8d2 <rintf+0x62>
 800e886:	2900      	cmp	r1, #0
 800e888:	ee10 3a10 	vmov	r3, s0
 800e88c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800e890:	da21      	bge.n	800e8d6 <rintf+0x66>
 800e892:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800e896:	425b      	negs	r3, r3
 800e898:	4921      	ldr	r1, [pc, #132]	; (800e920 <rintf+0xb0>)
 800e89a:	0a5b      	lsrs	r3, r3, #9
 800e89c:	0d12      	lsrs	r2, r2, #20
 800e89e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8a2:	0512      	lsls	r2, r2, #20
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e8aa:	ee07 3a90 	vmov	s15, r3
 800e8ae:	edd1 6a00 	vldr	s13, [r1]
 800e8b2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e8b6:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e8ba:	eddd 7a01 	vldr	s15, [sp, #4]
 800e8be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e8c2:	ee17 3a90 	vmov	r3, s15
 800e8c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e8ca:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e8ce:	ee00 3a10 	vmov	s0, r3
 800e8d2:	b002      	add	sp, #8
 800e8d4:	bd10      	pop	{r4, pc}
 800e8d6:	4a13      	ldr	r2, [pc, #76]	; (800e924 <rintf+0xb4>)
 800e8d8:	410a      	asrs	r2, r1
 800e8da:	4213      	tst	r3, r2
 800e8dc:	d0f9      	beq.n	800e8d2 <rintf+0x62>
 800e8de:	0854      	lsrs	r4, r2, #1
 800e8e0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800e8e4:	d006      	beq.n	800e8f4 <rintf+0x84>
 800e8e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e8ea:	ea23 0304 	bic.w	r3, r3, r4
 800e8ee:	fa42 f101 	asr.w	r1, r2, r1
 800e8f2:	430b      	orrs	r3, r1
 800e8f4:	4a0a      	ldr	r2, [pc, #40]	; (800e920 <rintf+0xb0>)
 800e8f6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800e8fa:	ed90 7a00 	vldr	s14, [r0]
 800e8fe:	ee07 3a90 	vmov	s15, r3
 800e902:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e906:	edcd 7a01 	vstr	s15, [sp, #4]
 800e90a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e90e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e912:	e7de      	b.n	800e8d2 <rintf+0x62>
 800e914:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e918:	d3db      	bcc.n	800e8d2 <rintf+0x62>
 800e91a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e91e:	e7d8      	b.n	800e8d2 <rintf+0x62>
 800e920:	08028694 	.word	0x08028694
 800e924:	007fffff 	.word	0x007fffff

0800e928 <scalbnf>:
 800e928:	ee10 3a10 	vmov	r3, s0
 800e92c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e930:	d025      	beq.n	800e97e <scalbnf+0x56>
 800e932:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e936:	d302      	bcc.n	800e93e <scalbnf+0x16>
 800e938:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e93c:	4770      	bx	lr
 800e93e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e942:	d122      	bne.n	800e98a <scalbnf+0x62>
 800e944:	4b2a      	ldr	r3, [pc, #168]	; (800e9f0 <scalbnf+0xc8>)
 800e946:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e9f4 <scalbnf+0xcc>
 800e94a:	4298      	cmp	r0, r3
 800e94c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e950:	db16      	blt.n	800e980 <scalbnf+0x58>
 800e952:	ee10 3a10 	vmov	r3, s0
 800e956:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e95a:	3a19      	subs	r2, #25
 800e95c:	4402      	add	r2, r0
 800e95e:	2afe      	cmp	r2, #254	; 0xfe
 800e960:	dd15      	ble.n	800e98e <scalbnf+0x66>
 800e962:	ee10 3a10 	vmov	r3, s0
 800e966:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e9f8 <scalbnf+0xd0>
 800e96a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e9fc <scalbnf+0xd4>
 800e96e:	2b00      	cmp	r3, #0
 800e970:	eeb0 7a67 	vmov.f32	s14, s15
 800e974:	bfb8      	it	lt
 800e976:	eef0 7a66 	vmovlt.f32	s15, s13
 800e97a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e97e:	4770      	bx	lr
 800e980:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ea00 <scalbnf+0xd8>
 800e984:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e988:	4770      	bx	lr
 800e98a:	0dd2      	lsrs	r2, r2, #23
 800e98c:	e7e6      	b.n	800e95c <scalbnf+0x34>
 800e98e:	2a00      	cmp	r2, #0
 800e990:	dd06      	ble.n	800e9a0 <scalbnf+0x78>
 800e992:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e996:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e99a:	ee00 3a10 	vmov	s0, r3
 800e99e:	4770      	bx	lr
 800e9a0:	f112 0f16 	cmn.w	r2, #22
 800e9a4:	da1a      	bge.n	800e9dc <scalbnf+0xb4>
 800e9a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e9aa:	4298      	cmp	r0, r3
 800e9ac:	ee10 3a10 	vmov	r3, s0
 800e9b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e9b4:	dd0a      	ble.n	800e9cc <scalbnf+0xa4>
 800e9b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e9f8 <scalbnf+0xd0>
 800e9ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e9fc <scalbnf+0xd4>
 800e9be:	eef0 7a40 	vmov.f32	s15, s0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	bf18      	it	ne
 800e9c6:	eeb0 0a47 	vmovne.f32	s0, s14
 800e9ca:	e7db      	b.n	800e984 <scalbnf+0x5c>
 800e9cc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ea00 <scalbnf+0xd8>
 800e9d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ea04 <scalbnf+0xdc>
 800e9d4:	eef0 7a40 	vmov.f32	s15, s0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	e7f3      	b.n	800e9c4 <scalbnf+0x9c>
 800e9dc:	3219      	adds	r2, #25
 800e9de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e9e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ea08 <scalbnf+0xe0>
 800e9ea:	ee07 3a10 	vmov	s14, r3
 800e9ee:	e7c4      	b.n	800e97a <scalbnf+0x52>
 800e9f0:	ffff3cb0 	.word	0xffff3cb0
 800e9f4:	4c000000 	.word	0x4c000000
 800e9f8:	7149f2ca 	.word	0x7149f2ca
 800e9fc:	f149f2ca 	.word	0xf149f2ca
 800ea00:	0da24260 	.word	0x0da24260
 800ea04:	8da24260 	.word	0x8da24260
 800ea08:	33000000 	.word	0x33000000

0800ea0c <_close>:
 800ea0c:	4b02      	ldr	r3, [pc, #8]	; (800ea18 <_close+0xc>)
 800ea0e:	2258      	movs	r2, #88	; 0x58
 800ea10:	601a      	str	r2, [r3, #0]
 800ea12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea16:	4770      	bx	lr
 800ea18:	2000d390 	.word	0x2000d390

0800ea1c <_fstat>:
 800ea1c:	4b02      	ldr	r3, [pc, #8]	; (800ea28 <_fstat+0xc>)
 800ea1e:	2258      	movs	r2, #88	; 0x58
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea26:	4770      	bx	lr
 800ea28:	2000d390 	.word	0x2000d390

0800ea2c <_getpid>:
 800ea2c:	4b02      	ldr	r3, [pc, #8]	; (800ea38 <_getpid+0xc>)
 800ea2e:	2258      	movs	r2, #88	; 0x58
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea36:	4770      	bx	lr
 800ea38:	2000d390 	.word	0x2000d390

0800ea3c <_isatty>:
 800ea3c:	4b02      	ldr	r3, [pc, #8]	; (800ea48 <_isatty+0xc>)
 800ea3e:	2258      	movs	r2, #88	; 0x58
 800ea40:	601a      	str	r2, [r3, #0]
 800ea42:	2000      	movs	r0, #0
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	2000d390 	.word	0x2000d390

0800ea4c <_kill>:
 800ea4c:	4b02      	ldr	r3, [pc, #8]	; (800ea58 <_kill+0xc>)
 800ea4e:	2258      	movs	r2, #88	; 0x58
 800ea50:	601a      	str	r2, [r3, #0]
 800ea52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea56:	4770      	bx	lr
 800ea58:	2000d390 	.word	0x2000d390

0800ea5c <_lseek>:
 800ea5c:	4b02      	ldr	r3, [pc, #8]	; (800ea68 <_lseek+0xc>)
 800ea5e:	2258      	movs	r2, #88	; 0x58
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea66:	4770      	bx	lr
 800ea68:	2000d390 	.word	0x2000d390

0800ea6c <_read>:
 800ea6c:	4b02      	ldr	r3, [pc, #8]	; (800ea78 <_read+0xc>)
 800ea6e:	2258      	movs	r2, #88	; 0x58
 800ea70:	601a      	str	r2, [r3, #0]
 800ea72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea76:	4770      	bx	lr
 800ea78:	2000d390 	.word	0x2000d390

0800ea7c <_write>:
 800ea7c:	4b02      	ldr	r3, [pc, #8]	; (800ea88 <_write+0xc>)
 800ea7e:	2258      	movs	r2, #88	; 0x58
 800ea80:	601a      	str	r2, [r3, #0]
 800ea82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea86:	4770      	bx	lr
 800ea88:	2000d390 	.word	0x2000d390

0800ea8c <_exit>:
 800ea8c:	e7fe      	b.n	800ea8c <_exit>
	...

0800ea90 <_init>:
 800ea90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea92:	bf00      	nop
 800ea94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea96:	bc08      	pop	{r3}
 800ea98:	469e      	mov	lr, r3
 800ea9a:	4770      	bx	lr

0800ea9c <_fini>:
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9e:	bf00      	nop
 800eaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa2:	bc08      	pop	{r3}
 800eaa4:	469e      	mov	lr, r3
 800eaa6:	4770      	bx	lr
