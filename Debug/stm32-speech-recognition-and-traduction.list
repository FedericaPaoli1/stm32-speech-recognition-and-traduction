
stm32-speech-recognition-and-traduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec4  08006ec4  00020474  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ecc  08006ecc  00020474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ecc  08006ecc  00016ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  20000000  08006ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000474  08007348  00020474  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000096c  08007348  0002096c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e09a  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f9  00000000  00000000  0002e53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  000312d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220be  00000000  00000000  00031b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db2d  00000000  00000000  00053c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c65b7  00000000  00000000  0006177b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  00127d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  00127e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000474 	.word	0x20000474
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dfc 	.word	0x08006dfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000478 	.word	0x20000478
 80001cc:	08006dfc 	.word	0x08006dfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b090      	sub	sp, #64	; 0x40
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fc7b 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f871 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f987 	bl	8000898 <MX_GPIO_Init>
  MX_DMA_Init();
 800058a:	f000 f965 	bl	8000858 <MX_DMA_Init>
  MX_I2S2_Init();
 800058e:	f000 f90b 	bl	80007a8 <MX_I2S2_Init>
  MX_CRC_Init();
 8000592:	f000 f8ed 	bl	8000770 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000596:	f003 fc17 	bl	8003dc8 <MX_PDM2PCM_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f933 	bl	8000804 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	mic_init(&hi2s2);
 800059e:	482d      	ldr	r0, [pc, #180]	; (8000654 <main+0xdc>)
 80005a0:	f000 f9e0 	bl	8000964 <mic_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (mic_start_recording() == 0) {
 80005a4:	f000 f9ee 	bl	8000984 <mic_start_recording>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d14c      	bne.n	8000648 <main+0xd0>
			int result = mic_monitor();
 80005ae:	f000 fa17 	bl	80009e0 <mic_monitor>
 80005b2:	6378      	str	r0, [r7, #52]	; 0x34
			for (int i = 0; i < 1000000; i++) {
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005b8:	e002      	b.n	80005c0 <main+0x48>
 80005ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005bc:	3301      	adds	r3, #1
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <main+0xe0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	ddf8      	ble.n	80005ba <main+0x42>
				;
			}
			if (result == 0) {
 80005c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d105      	bne.n	80005da <main+0x62>
				// no input: BLUE LED
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80005ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d2:	4822      	ldr	r0, [pc, #136]	; (800065c <main+0xe4>)
 80005d4:	f001 fb85 	bl	8001ce2 <HAL_GPIO_TogglePin>
 80005d8:	e033      	b.n	8000642 <main+0xca>
			} else if (result == -1) {
 80005da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005e0:	d105      	bne.n	80005ee <main+0x76>
				// Error in PDM->PCM conversion: RED LED
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	481d      	ldr	r0, [pc, #116]	; (800065c <main+0xe4>)
 80005e8:	f001 fb7b 	bl	8001ce2 <HAL_GPIO_TogglePin>
 80005ec:	e029      	b.n	8000642 <main+0xca>
			} else {
				// PDM->PCM conversion done: GREEN LED
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80005ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f2:	481a      	ldr	r0, [pc, #104]	; (800065c <main+0xe4>)
 80005f4:	f001 fb75 	bl	8001ce2 <HAL_GPIO_TogglePin>
				int16_t* pcm = get_pcm();
 80005f8:	f000 fa22 	bl	8000a40 <get_pcm>
 80005fc:	6338      	str	r0, [r7, #48]	; 0x30
				char b[PCM_BUF_SIZE];
				for (int i=0; i < PCM_BUF_SIZE; i++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
 8000602:	e00f      	b.n	8000624 <main+0xac>
					sprintf(b+i, "%" PRIu16, *(pcm+i));
 8000604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000606:	463a      	mov	r2, r7
 8000608:	18d0      	adds	r0, r2, r3
 800060a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000610:	4413      	add	r3, r2
 8000612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000616:	461a      	mov	r2, r3
 8000618:	4911      	ldr	r1, [pc, #68]	; (8000660 <main+0xe8>)
 800061a:	f005 fb57 	bl	8005ccc <siprintf>
				for (int i=0; i < PCM_BUF_SIZE; i++) {
 800061e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000620:	3301      	adds	r3, #1
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
 8000624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000626:	2b2f      	cmp	r3, #47	; 0x2f
 8000628:	ddec      	ble.n	8000604 <main+0x8c>
				}
				HAL_UART_Transmit(&huart2, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800062a:	463b      	mov	r3, r7
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fdcf 	bl	80001d0 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	4639      	mov	r1, r7
 8000638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <main+0xec>)
 800063e:	f003 f8fa 	bl	8003836 <HAL_UART_Transmit>
			}
			mic_stop_recording();
 8000642:	f000 f9c1 	bl	80009c8 <mic_stop_recording>
 8000646:	e7ad      	b.n	80005a4 <main+0x2c>

		} else {
			// Failed to start I2S transmission: ORANGE LED
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <main+0xe4>)
 800064e:	f001 fb48 	bl	8001ce2 <HAL_GPIO_TogglePin>
		if (mic_start_recording() == 0) {
 8000652:	e7a7      	b.n	80005a4 <main+0x2c>
 8000654:	200008bc 	.word	0x200008bc
 8000658:	000f423f 	.word	0x000f423f
 800065c:	40020c00 	.word	0x40020c00
 8000660:	08006e14 	.word	0x08006e14
 8000664:	20000878 	.word	0x20000878

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b098      	sub	sp, #96	; 0x60
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fb20 	bl	8005cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(10);
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <SystemClock_Config+0x100>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006a2:	4a31      	ldr	r2, [pc, #196]	; (8000768 <SystemClock_Config+0x100>)
 80006a4:	f043 030a 	orr.w	r3, r3, #10
 80006a8:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <SystemClock_Config+0x100>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <SystemClock_Config+0x100>)
 80006b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006b4:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <SystemClock_Config+0x100>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <SystemClock_Config+0x100>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SystemClock_Config+0x100>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0x104>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a24      	ldr	r2, [pc, #144]	; (800076c <SystemClock_Config+0x104>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0x104>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2310      	movs	r3, #16
 80006f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fe:	2300      	movs	r3, #0
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fac0 	bl	8002c8c <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000712:	f000 f921 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fd23 	bl	800317c <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800073c:	f000 f90c 	bl	8000958 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000740:	2301      	movs	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000744:	23c0      	movs	r3, #192	; 0xc0
 8000746:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8000748:	2305      	movs	r3, #5
 800074a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fee3 	bl	800351c <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800075c:	f000 f8fc 	bl	8000958 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3760      	adds	r7, #96	; 0x60
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_CRC_Init+0x30>)
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <MX_CRC_Init+0x34>)
 8000778:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_CRC_Init+0x30>)
 800077c:	f000 fcff 	bl	800117e <HAL_CRC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000786:	f000 f8e7 	bl	8000958 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <MX_CRC_Init+0x30>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <MX_CRC_Init+0x30>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f042 0201 	orr.w	r2, r2, #1
 8000798:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000810 	.word	0x20000810
 80007a4:	40023000 	.word	0x40023000

080007a8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_I2S2_Init+0x54>)
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <MX_I2S2_Init+0x58>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2S2_Init+0x54>)
 80007b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007b8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_I2S2_Init+0x54>)
 80007bc:	2210      	movs	r2, #16
 80007be:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2S2_Init+0x54>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_I2S2_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_I2S2_Init+0x54>)
 80007ce:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007d2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_I2S2_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_I2S2_Init+0x54>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_I2S2_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_I2S2_Init+0x54>)
 80007e8:	f001 fa96 	bl	8001d18 <HAL_I2S_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80007f2:	f000 f8b1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200008bc 	.word	0x200008bc
 8000800:	40003800 	.word	0x40003800

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f002 ffae 	bl	800379c <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f887 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000878 	.word	0x20000878
 8000854:	40004400 	.word	0x40004400

08000858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_DMA_Init+0x3c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_DMA_Init+0x3c>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_DMA_Init+0x3c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	200e      	movs	r0, #14
 8000880:	f000 fc47 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000884:	200e      	movs	r0, #14
 8000886:	f000 fc60 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a26      	ldr	r2, [pc, #152]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_GPIO_Init+0xb8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a11      	ldr	r2, [pc, #68]	; (8000950 <MX_GPIO_Init+0xb8>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_GPIO_Init+0xb8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0xbc>)
 8000926:	f001 f9c3 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800092a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0xbc>)
 8000944:	f001 f818 	bl	8001978 <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40020c00 	.word	0x40020c00

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <mic_init>:
/*extern uint8_t is_filesystem_mounted(void);
extern serial_t *console;
*/
static int convert_audio_to_pcm(void);

void mic_init(void *instance) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  i2s = instance;
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <mic_init+0x1c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  MX_PDM2PCM_Init();
 8000972:	f003 fa29 	bl	8003dc8 <MX_PDM2PCM_Init>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000494 	.word	0x20000494

08000984 <mic_start_recording>:

int mic_start_recording(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
    return 1;
  }

  LOGLN("File opened successfully ...");*/

  unsigned transfer_len = PDM_BUF_SIZE;
 800098a:	23c0      	movs	r3, #192	; 0xc0
 800098c:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(i2s, rxbufs[0], transfer_len);
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <mic_start_recording+0x38>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	b292      	uxth	r2, r2
 8000996:	490a      	ldr	r1, [pc, #40]	; (80009c0 <mic_start_recording+0x3c>)
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fafd 	bl	8001f98 <HAL_I2S_Receive_DMA>
 800099e:	4603      	mov	r3, r0
 80009a0:	70fb      	strb	r3, [r7, #3]
  if (status != HAL_OK) {
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <mic_start_recording+0x28>
    //LOGLN("Failed to start I2S transmission.");
    return 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e003      	b.n	80009b4 <mic_start_recording+0x30>
  }
  sample_count = 0;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <mic_start_recording+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]

  return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000494 	.word	0x20000494
 80009c0:	200004f8 	.word	0x200004f8
 80009c4:	200007fc 	.word	0x200007fc

080009c8 <mic_stop_recording>:

void mic_stop_recording(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  HAL_I2S_DMAStop(i2s);
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <mic_stop_recording+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fb9d 	bl	8002110 <HAL_I2S_DMAStop>
  /*f_close(&fp);
  sprintf(msg, "%u samples recorded ...", sample_count);
  LOGLN(msg);*/
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000494 	.word	0x20000494

080009e0 <mic_monitor>:

int mic_monitor(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  if (new_data) {
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <mic_monitor+0x24>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d006      	beq.n	80009fc <mic_monitor+0x1c>
    new_data = 0;
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <mic_monitor+0x24>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
    return convert_audio_to_pcm();
 80009f4:	f000 f808 	bl	8000a08 <convert_audio_to_pcm>
 80009f8:	4603      	mov	r3, r0
 80009fa:	e000      	b.n	80009fe <mic_monitor+0x1e>
  }
  return 0;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000800 	.word	0x20000800

08000a08 <convert_audio_to_pcm>:

static int convert_audio_to_pcm(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  uint32_t rc = PDM_Filter(rxbuf, pcm, &PDM1_filter_handler);
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <convert_audio_to_pcm+0x2c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <convert_audio_to_pcm+0x30>)
 8000a14:	4909      	ldr	r1, [pc, #36]	; (8000a3c <convert_audio_to_pcm+0x34>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 f8cc 	bl	8005bb4 <PDM_Filter>
 8000a1c:	6078      	str	r0, [r7, #4]
  if (rc != 0) {
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <convert_audio_to_pcm+0x22>
    //LOGLN("Error in PDM->PCM conversion.");
    return -1;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a28:	e000      	b.n	8000a2c <convert_audio_to_pcm+0x24>
  }
  return 1;
 8000a2a:	2301      	movs	r3, #1
  FRESULT fr = f_write(&fp, pcm, len, &write_count);
  if (fr != FR_OK) {
    LOGLN("Failed to write PCM audio to file.");
  }
  sample_count += PCM_BUF_SIZE;*/
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200007f8 	.word	0x200007f8
 8000a38:	20000910 	.word	0x20000910
 8000a3c:	20000498 	.word	0x20000498

08000a40 <get_pcm>:

int16_t* get_pcm(void) {
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	return pcm;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <get_pcm+0x10>)
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	20000498 	.word	0x20000498

08000a54 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if (hi2s != i2s) {
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d106      	bne.n	8000a74 <HAL_I2S_RxHalfCpltCallback+0x20>
    return;
  }
  rxbuf = rxbufs[0];
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000a6a:	601a      	str	r2, [r3, #0]
  new_data = 1;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	e000      	b.n	8000a76 <HAL_I2S_RxHalfCpltCallback+0x22>
    return;
 8000a74:	bf00      	nop
}
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	20000494 	.word	0x20000494
 8000a84:	200007f8 	.word	0x200007f8
 8000a88:	200004f8 	.word	0x200004f8
 8000a8c:	20000800 	.word	0x20000800

08000a90 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if (hi2s != i2s) {
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_I2S_RxCpltCallback+0x2c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d106      	bne.n	8000ab0 <HAL_I2S_RxCpltCallback+0x20>
    return;
  }
  rxbuf = rxbufs[1];
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <HAL_I2S_RxCpltCallback+0x30>)
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_I2S_RxCpltCallback+0x34>)
 8000aa6:	601a      	str	r2, [r3, #0]
  new_data = 1;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <HAL_I2S_RxCpltCallback+0x38>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e000      	b.n	8000ab2 <HAL_I2S_RxCpltCallback+0x22>
    return;
 8000ab0:	bf00      	nop
}
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	20000494 	.word	0x20000494
 8000ac0:	200007f8 	.word	0x200007f8
 8000ac4:	20000678 	.word	0x20000678
 8000ac8:	20000800 	.word	0x20000800

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_CRC_MspInit+0x3c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d10d      	bne.n	8000b4a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_CRC_MspInit+0x40>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_CRC_MspInit+0x40>)
 8000b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_CRC_MspInit+0x40>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023000 	.word	0x40023000
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a41      	ldr	r2, [pc, #260]	; (8000c84 <HAL_I2S_MspInit+0x124>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d17b      	bne.n	8000c7a <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a3f      	ldr	r2, [pc, #252]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <HAL_I2S_MspInit+0x128>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be6:	2305      	movs	r3, #5
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4826      	ldr	r0, [pc, #152]	; (8000c8c <HAL_I2S_MspInit+0x12c>)
 8000bf2:	f000 fec1 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000bf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	481f      	ldr	r0, [pc, #124]	; (8000c90 <HAL_I2S_MspInit+0x130>)
 8000c14:	f000 feb0 	bl	8001978 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <HAL_I2S_MspInit+0x138>)
 8000c1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c36:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c3e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c46:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c4e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c56:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c60:	f000 faaa 	bl	80011b8 <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8000c6a:	f7ff fe75 	bl	8000958 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_I2S_MspInit+0x134>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40003800 	.word	0x40003800
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	20000818 	.word	0x20000818
 8000c98:	40026058 	.word	0x40026058

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_UART_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d06:	2307      	movs	r3, #7
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_UART_MspInit+0x8c>)
 8000d12:	f000 fe31 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f8d0 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA1_Stream3_IRQHandler+0x10>)
 8000d86:	f000 fb8d 	bl	80014a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000818 	.word	0x20000818

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f004 ff50 	bl	8005c68 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	20000804 	.word	0x20000804
 8000dfc:	20000970 	.word	0x20000970

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd7 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f004 ff0f 	bl	8005c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fb8f 	bl	8000578 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000474 	.word	0x20000474
  ldr r2, =_sidata
 8000e68:	08006ed4 	.word	0x08006ed4
  ldr r2, =_sbss
 8000e6c:	20000474 	.word	0x20000474
  ldr r4, =_ebss
 8000e70:	2000096c 	.word	0x2000096c

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f92b 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe0e 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f943 	bl	8001166 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef8:	f000 f90b 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000400 	.word	0x20000400
 8000f14:	20000408 	.word	0x20000408
 8000f18:	20000404 	.word	0x20000404

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000408 	.word	0x20000408
 8000f40:	20000904 	.word	0x20000904

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000904 	.word	0x20000904

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff29 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff3e 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff31 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e00e      	b.n	80011ae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	795b      	ldrb	r3, [r3, #5]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d105      	bne.n	80011a6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fcbb 	bl	8000b1c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff febe 	bl	8000f44 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e099      	b.n	8001308 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2202      	movs	r2, #2
 80011d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f4:	e00f      	b.n	8001216 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011f6:	f7ff fea5 	bl	8000f44 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b05      	cmp	r3, #5
 8001202:	d908      	bls.n	8001216 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2220      	movs	r2, #32
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e078      	b.n	8001308 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e8      	bne.n	80011f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <HAL_DMA_Init+0x158>)
 8001230:	4013      	ands	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001242:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4313      	orrs	r3, r2
 8001266:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	2b04      	cmp	r3, #4
 800126e:	d107      	bne.n	8001280 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4313      	orrs	r3, r2
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f023 0307 	bic.w	r3, r3, #7
 8001296:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	4313      	orrs	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d117      	bne.n	80012da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00e      	beq.n	80012da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fadf 	bl	8001880 <DMA_CheckFifoParam>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012d6:	2301      	movs	r3, #1
 80012d8:	e016      	b.n	8001308 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fa96 	bl	8001814 <DMA_CalcBaseAndBitshift>
 80012e8:	4603      	mov	r3, r0
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f0:	223f      	movs	r2, #63	; 0x3f
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	f010803f 	.word	0xf010803f

08001314 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_DMA_Start_IT+0x26>
 8001336:	2302      	movs	r3, #2
 8001338:	e040      	b.n	80013bc <HAL_DMA_Start_IT+0xa8>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d12f      	bne.n	80013ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2202      	movs	r2, #2
 8001352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 fa28 	bl	80017b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0216 	orr.w	r2, r2, #22
 8001382:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0208 	orr.w	r2, r2, #8
 800139a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e005      	b.n	80013ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
 80013b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d2:	f7ff fdb7 	bl	8000f44 <HAL_GetTick>
 80013d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d008      	beq.n	80013f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e052      	b.n	800149c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0216 	bic.w	r2, r2, #22
 8001404:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001414:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <HAL_DMA_Abort+0x62>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0208 	bic.w	r2, r2, #8
 8001434:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001446:	e013      	b.n	8001470 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001448:	f7ff fd7c 	bl	8000f44 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b05      	cmp	r3, #5
 8001454:	d90c      	bls.n	8001470 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2203      	movs	r2, #3
 8001460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e015      	b.n	800149c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1e4      	bne.n	8001448 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	223f      	movs	r2, #63	; 0x3f
 8001484:	409a      	lsls	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014b0:	4b92      	ldr	r3, [pc, #584]	; (80016fc <HAL_DMA_IRQHandler+0x258>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_DMA_IRQHandler+0x25c>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0a9b      	lsrs	r3, r3, #10
 80014bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	2208      	movs	r2, #8
 80014d0:	409a      	lsls	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d01a      	beq.n	8001510 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0204 	bic.w	r2, r2, #4
 80014f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2208      	movs	r2, #8
 80014fe:	409a      	lsls	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	2201      	movs	r2, #1
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d012      	beq.n	8001546 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2201      	movs	r2, #1
 8001534:	409a      	lsls	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153e:	f043 0202 	orr.w	r2, r3, #2
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	2204      	movs	r2, #4
 800154c:	409a      	lsls	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d012      	beq.n	800157c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	2204      	movs	r2, #4
 800156a:	409a      	lsls	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001574:	f043 0204 	orr.w	r2, r3, #4
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	2210      	movs	r2, #16
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d043      	beq.n	8001614 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d03c      	beq.n	8001614 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	2210      	movs	r2, #16
 80015a0:	409a      	lsls	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d018      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d108      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d024      	beq.n	8001614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
 80015d2:	e01f      	b.n	8001614 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01b      	beq.n	8001614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	4798      	blx	r3
 80015e4:	e016      	b.n	8001614 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0208 	bic.w	r2, r2, #8
 8001602:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2220      	movs	r2, #32
 800161a:	409a      	lsls	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 808e 	beq.w	8001742 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8086 	beq.w	8001742 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	2220      	movs	r2, #32
 800163c:	409a      	lsls	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b05      	cmp	r3, #5
 800164c:	d136      	bne.n	80016bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0216 	bic.w	r2, r2, #22
 800165c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2b00      	cmp	r3, #0
 8001674:	d103      	bne.n	800167e <HAL_DMA_IRQHandler+0x1da>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0208 	bic.w	r2, r2, #8
 800168c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001692:	223f      	movs	r2, #63	; 0x3f
 8001694:	409a      	lsls	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d07d      	beq.n	80017ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
        }
        return;
 80016ba:	e078      	b.n	80017ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01c      	beq.n	8001704 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d030      	beq.n	8001742 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
 80016e8:	e02b      	b.n	8001742 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d027      	beq.n	8001742 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
 80016fa:	e022      	b.n	8001742 <HAL_DMA_IRQHandler+0x29e>
 80016fc:	20000400 	.word	0x20000400
 8001700:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10f      	bne.n	8001732 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0210 	bic.w	r2, r2, #16
 8001720:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	2b00      	cmp	r3, #0
 8001748:	d032      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d022      	beq.n	800179c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2205      	movs	r2, #5
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	3301      	adds	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	429a      	cmp	r2, r3
 8001778:	d307      	bcc.n	800178a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f2      	bne.n	800176e <HAL_DMA_IRQHandler+0x2ca>
 8001788:	e000      	b.n	800178c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800178a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
 80017ac:	e000      	b.n	80017b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017ae:	bf00      	nop
    }
  }
}
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop

080017b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b40      	cmp	r3, #64	; 0x40
 80017e4:	d108      	bne.n	80017f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017f6:	e007      	b.n	8001808 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	60da      	str	r2, [r3, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	3b10      	subs	r3, #16
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <DMA_CalcBaseAndBitshift+0x64>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800182e:	4a13      	ldr	r2, [pc, #76]	; (800187c <DMA_CalcBaseAndBitshift+0x68>)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d909      	bls.n	8001856 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	1d1a      	adds	r2, r3, #4
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	659a      	str	r2, [r3, #88]	; 0x58
 8001854:	e007      	b.n	8001866 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800185e:	f023 0303 	bic.w	r3, r3, #3
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	aaaaaaab 	.word	0xaaaaaaab
 800187c:	08006e68 	.word	0x08006e68

08001880 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d11f      	bne.n	80018da <DMA_CheckFifoParam+0x5a>
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d856      	bhi.n	800194e <DMA_CheckFifoParam+0xce>
 80018a0:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <DMA_CheckFifoParam+0x28>)
 80018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a6:	bf00      	nop
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	080018cb 	.word	0x080018cb
 80018b0:	080018b9 	.word	0x080018b9
 80018b4:	0800194f 	.word	0x0800194f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d046      	beq.n	8001952 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018c8:	e043      	b.n	8001952 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018d2:	d140      	bne.n	8001956 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d8:	e03d      	b.n	8001956 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e2:	d121      	bne.n	8001928 <DMA_CheckFifoParam+0xa8>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d837      	bhi.n	800195a <DMA_CheckFifoParam+0xda>
 80018ea:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <DMA_CheckFifoParam+0x70>)
 80018ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f0:	08001901 	.word	0x08001901
 80018f4:	08001907 	.word	0x08001907
 80018f8:	08001901 	.word	0x08001901
 80018fc:	08001919 	.word	0x08001919
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
      break;
 8001904:	e030      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d025      	beq.n	800195e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001916:	e022      	b.n	800195e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001920:	d11f      	bne.n	8001962 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001926:	e01c      	b.n	8001962 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d903      	bls.n	8001936 <DMA_CheckFifoParam+0xb6>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d003      	beq.n	800193c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001934:	e018      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
      break;
 800193a:	e015      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00e      	beq.n	8001966 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
      break;
 800194c:	e00b      	b.n	8001966 <DMA_CheckFifoParam+0xe6>
      break;
 800194e:	bf00      	nop
 8001950:	e00a      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
      break;
 8001952:	bf00      	nop
 8001954:	e008      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
      break;
 8001956:	bf00      	nop
 8001958:	e006      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
      break;
 800195a:	bf00      	nop
 800195c:	e004      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
      break;
 800195e:	bf00      	nop
 8001960:	e002      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
      break;   
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <DMA_CheckFifoParam+0xe8>
      break;
 8001966:	bf00      	nop
    }
  } 
  
  return status; 
 8001968:	7bfb      	ldrb	r3, [r7, #15]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e16b      	b.n	8001c6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 815a 	bne.w	8001c66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d130      	bne.n	8001a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0201 	and.w	r2, r3, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d017      	beq.n	8001a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d123      	bne.n	8001abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	69b9      	ldr	r1, [r7, #24]
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80b4 	beq.w	8001c66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <HAL_GPIO_Init+0x30c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a5f      	ldr	r2, [pc, #380]	; (8001c84 <HAL_GPIO_Init+0x30c>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <HAL_GPIO_Init+0x30c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1a:	4a5b      	ldr	r2, [pc, #364]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_GPIO_Init+0x314>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d02b      	beq.n	8001b9e <HAL_GPIO_Init+0x226>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a51      	ldr	r2, [pc, #324]	; (8001c90 <HAL_GPIO_Init+0x318>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d025      	beq.n	8001b9a <HAL_GPIO_Init+0x222>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a50      	ldr	r2, [pc, #320]	; (8001c94 <HAL_GPIO_Init+0x31c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01f      	beq.n	8001b96 <HAL_GPIO_Init+0x21e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	; (8001c98 <HAL_GPIO_Init+0x320>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x21a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4e      	ldr	r2, [pc, #312]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x216>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4d      	ldr	r2, [pc, #308]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x212>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <HAL_GPIO_Init+0x32c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x20e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_GPIO_Init+0x330>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x20a>
 8001b7e:	2307      	movs	r3, #7
 8001b80:	e00e      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
 8001b82:	2308      	movs	r3, #8
 8001b84:	e00c      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
 8001b86:	2306      	movs	r3, #6
 8001b88:	e00a      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
 8001b8a:	2305      	movs	r3, #5
 8001b8c:	e008      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
 8001b92:	2303      	movs	r3, #3
 8001b94:	e004      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f002 0203 	and.w	r2, r2, #3
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb0:	4935      	ldr	r1, [pc, #212]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be2:	4a32      	ldr	r2, [pc, #200]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a12      	ldr	r2, [pc, #72]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	f67f ae90 	bls.w	8001994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020400 	.word	0x40020400
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40021400 	.word	0x40021400
 8001ca4:	40021800 	.word	0x40021800
 8001ca8:	40021c00 	.word	0x40021c00
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b085      	sub	sp, #20
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf4:	887a      	ldrh	r2, [r7, #2]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	041a      	lsls	r2, r3, #16
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	400b      	ands	r3, r1
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	619a      	str	r2, [r3, #24]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e128      	b.n	8001f7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a90      	ldr	r2, [pc, #576]	; (8001f84 <HAL_I2S_Init+0x26c>)
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7fe ff0b 	bl	8000b60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d60:	f023 030f 	bic.w	r3, r3, #15
 8001d64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d060      	beq.n	8001e38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d7e:	2310      	movs	r3, #16
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e001      	b.n	8001d88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d84:	2320      	movs	r3, #32
 8001d86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d802      	bhi.n	8001d96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f001 fca2 	bl	80036e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da6:	d125      	bne.n	8001df4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	3305      	adds	r3, #5
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e01f      	b.n	8001e12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	3305      	adds	r3, #5
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e00e      	b.n	8001e12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	3305      	adds	r3, #5
 8001e10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4a5c      	ldr	r2, [pc, #368]	; (8001f88 <HAL_I2S_Init+0x270>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	e003      	b.n	8001e40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d902      	bls.n	8001e4c <HAL_I2S_Init+0x134>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	2bff      	cmp	r3, #255	; 0xff
 8001e4a:	d907      	bls.n	8001e5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	f043 0210 	orr.w	r2, r3, #16
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e08f      	b.n	8001f7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	ea42 0103 	orr.w	r1, r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e7a:	f023 030f 	bic.w	r3, r3, #15
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6851      	ldr	r1, [r2, #4]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6892      	ldr	r2, [r2, #8]
 8001e86:	4311      	orrs	r1, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68d2      	ldr	r2, [r2, #12]
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6992      	ldr	r2, [r2, #24]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d161      	bne.n	8001f6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a38      	ldr	r2, [pc, #224]	; (8001f8c <HAL_I2S_Init+0x274>)
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a37      	ldr	r2, [pc, #220]	; (8001f90 <HAL_I2S_Init+0x278>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2S_Init+0x1a4>
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_I2S_Init+0x27c>)
 8001eba:	e001      	b.n	8001ec0 <HAL_I2S_Init+0x1a8>
 8001ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	4932      	ldr	r1, [pc, #200]	; (8001f90 <HAL_I2S_Init+0x278>)
 8001ec8:	428a      	cmp	r2, r1
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2S_Init+0x1b8>
 8001ecc:	4a31      	ldr	r2, [pc, #196]	; (8001f94 <HAL_I2S_Init+0x27c>)
 8001ece:	e001      	b.n	8001ed4 <HAL_I2S_Init+0x1bc>
 8001ed0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ed4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ed8:	f023 030f 	bic.w	r3, r3, #15
 8001edc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <HAL_I2S_Init+0x278>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_I2S_Init+0x1d4>
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_I2S_Init+0x27c>)
 8001eea:	e001      	b.n	8001ef0 <HAL_I2S_Init+0x1d8>
 8001eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <HAL_I2S_Init+0x278>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_I2S_Init+0x1ea>
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_I2S_Init+0x27c>)
 8001f00:	e001      	b.n	8001f06 <HAL_I2S_Init+0x1ee>
 8001f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f12:	d003      	beq.n	8001f1c <HAL_I2S_Init+0x204>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e001      	b.n	8001f28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	897b      	ldrh	r3, [r7, #10]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <HAL_I2S_Init+0x278>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_I2S_Init+0x24c>
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_I2S_Init+0x27c>)
 8001f62:	e001      	b.n	8001f68 <HAL_I2S_Init+0x250>
 8001f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f68:	897a      	ldrh	r2, [r7, #10]
 8001f6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08002651 	.word	0x08002651
 8001f88:	cccccccd 	.word	0xcccccccd
 8001f8c:	080027d9 	.word	0x080027d9
 8001f90:	40003800 	.word	0x40003800
 8001f94:	40003400 	.word	0x40003400

08001f98 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_I2S_Receive_DMA+0x1a>
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0a1      	b.n	80020fa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2S_Receive_DMA+0x2e>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e099      	b.n	80020fa <HAL_I2S_Receive_DMA+0x162>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d005      	beq.n	8001fe6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e089      	b.n	80020fa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d002      	beq.n	8002012 <HAL_I2S_Receive_DMA+0x7a>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d10a      	bne.n	8002028 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	865a      	strh	r2, [r3, #50]	; 0x32
 8002026:	e005      	b.n	8002034 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_I2S_Receive_DMA+0x16c>)
 800203a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_I2S_Receive_DMA+0x170>)
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_I2S_Receive_DMA+0x174>)
 800204a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800205a:	d10a      	bne.n	8002072 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	330c      	adds	r3, #12
 800207c:	4619      	mov	r1, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002088:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800208a:	f7ff f943 	bl	8001314 <HAL_DMA_Start_IT>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00f      	beq.n	80020b4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	f043 0208 	orr.w	r2, r3, #8
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e022      	b.n	80020fa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020d0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	0800252f 	.word	0x0800252f
 8002108:	080024ed 	.word	0x080024ed
 800210c:	0800254b 	.word	0x0800254b

08002110 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	d004      	beq.n	8002130 <HAL_I2S_DMAStop+0x20>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80d1 	bne.w	80022d2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00f      	beq.n	8002158 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff f941 	bl	80013c4 <HAL_DMA_Abort>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f043 0208 	orr.w	r2, r3, #8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002158:	2364      	movs	r3, #100	; 0x64
 800215a:	2201      	movs	r2, #1
 800215c:	2102      	movs	r1, #2
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fb00 	bl	8002764 <I2S_WaitFlagStateUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	2200      	movs	r2, #0
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 faeb 	bl	8002764 <I2S_WaitFlagStateUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00b      	beq.n	80021ac <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0202 	bic.w	r2, r2, #2
 80021d8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	f040 8165 	bne.w	80024b2 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00f      	beq.n	8002210 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f8e5 	bl	80013c4 <HAL_DMA_Abort>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0208 	orr.w	r2, r3, #8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a8a      	ldr	r2, [pc, #552]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_I2S_DMAStop+0x10e>
 800221a:	4b8a      	ldr	r3, [pc, #552]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 800221c:	e001      	b.n	8002222 <HAL_I2S_DMAStop+0x112>
 800221e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4985      	ldr	r1, [pc, #532]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 800222a:	428b      	cmp	r3, r1
 800222c:	d101      	bne.n	8002232 <HAL_I2S_DMAStop+0x122>
 800222e:	4b85      	ldr	r3, [pc, #532]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 8002230:	e001      	b.n	8002236 <HAL_I2S_DMAStop+0x126>
 8002232:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7e      	ldr	r2, [pc, #504]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_I2S_DMAStop+0x13e>
 800224a:	4b7e      	ldr	r3, [pc, #504]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 800224c:	e001      	b.n	8002252 <HAL_I2S_DMAStop+0x142>
 800224e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a79      	ldr	r2, [pc, #484]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_I2S_DMAStop+0x154>
 8002260:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 8002262:	e001      	b.n	8002268 <HAL_I2S_DMAStop+0x158>
 8002264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a73      	ldr	r2, [pc, #460]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d101      	bne.n	800227c <HAL_I2S_DMAStop+0x16c>
 8002278:	4b72      	ldr	r3, [pc, #456]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 800227a:	e001      	b.n	8002280 <HAL_I2S_DMAStop+0x170>
 800227c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	496e      	ldr	r1, [pc, #440]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 8002288:	428b      	cmp	r3, r1
 800228a:	d101      	bne.n	8002290 <HAL_I2S_DMAStop+0x180>
 800228c:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 800228e:	e001      	b.n	8002294 <HAL_I2S_DMAStop+0x184>
 8002290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002294:	f022 0201 	bic.w	r2, r2, #1
 8002298:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80022ba:	e0fa      	b.n	80024b2 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a5f      	ldr	r2, [pc, #380]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_I2S_DMAStop+0x1ba>
 80022c6:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 80022c8:	e001      	b.n	80022ce <HAL_I2S_DMAStop+0x1be>
 80022ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ce:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80022d0:	e0ef      	b.n	80024b2 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022da:	d005      	beq.n	80022e8 <HAL_I2S_DMAStop+0x1d8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e4:	f040 80e5 	bne.w	80024b2 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00f      	beq.n	8002310 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff f865 	bl	80013c4 <HAL_DMA_Abort>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	f043 0208 	orr.w	r2, r3, #8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b05      	cmp	r3, #5
 800231a:	f040 809a 	bne.w	8002452 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00f      	beq.n	8002346 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f84a 	bl	80013c4 <HAL_DMA_Abort>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f043 0208 	orr.w	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002346:	f7fe fdfd 	bl	8000f44 <HAL_GetTick>
 800234a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800234c:	e012      	b.n	8002374 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800234e:	f7fe fdf9 	bl	8000f44 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d90b      	bls.n	8002374 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a31      	ldr	r2, [pc, #196]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_I2S_DMAStop+0x272>
 800237e:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 8002380:	e001      	b.n	8002386 <HAL_I2S_DMAStop+0x276>
 8002382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d1de      	bne.n	800234e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002390:	e012      	b.n	80023b8 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002392:	f7fe fdd7 	bl	8000f44 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d90b      	bls.n	80023b8 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a20      	ldr	r2, [pc, #128]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_I2S_DMAStop+0x2b6>
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 80023c4:	e001      	b.n	80023ca <HAL_I2S_DMAStop+0x2ba>
 80023c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b80      	cmp	r3, #128	; 0x80
 80023d2:	d0de      	beq.n	8002392 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_I2S_DMAStop+0x2d2>
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 80023e0:	e001      	b.n	80023e6 <HAL_I2S_DMAStop+0x2d6>
 80023e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4914      	ldr	r1, [pc, #80]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 80023ee:	428b      	cmp	r3, r1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2S_DMAStop+0x2e6>
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 80023f4:	e001      	b.n	80023fa <HAL_I2S_DMAStop+0x2ea>
 80023f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fe:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_I2S_DMAStop+0x302>
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 8002410:	e001      	b.n	8002416 <HAL_I2S_DMAStop+0x306>
 8002412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a07      	ldr	r2, [pc, #28]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_I2S_DMAStop+0x31a>
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 8002428:	e001      	b.n	800242e <HAL_I2S_DMAStop+0x31e>
 800242a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4902      	ldr	r1, [pc, #8]	; (8002440 <HAL_I2S_DMAStop+0x330>)
 8002436:	428b      	cmp	r3, r1
 8002438:	d106      	bne.n	8002448 <HAL_I2S_DMAStop+0x338>
 800243a:	4b02      	ldr	r3, [pc, #8]	; (8002444 <HAL_I2S_DMAStop+0x334>)
 800243c:	e006      	b.n	800244c <HAL_I2S_DMAStop+0x33c>
 800243e:	bf00      	nop
 8002440:	40003800 	.word	0x40003800
 8002444:	40003400 	.word	0x40003400
 8002448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800244c:	f022 0202 	bic.w	r2, r2, #2
 8002450:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69da      	ldr	r2, [r3, #28]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002460:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002490:	d10c      	bne.n	80024ac <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	77fb      	strb	r3, [r7, #31]
 80024aa:	e002      	b.n	80024b2 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10e      	bne.n	8002520 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7fe fab5 	bl	8000a90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7fe fa89 	bl	8000a54 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0203 	bic.w	r2, r2, #3
 8002566:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f043 0208 	orr.w	r2, r3, #8
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff ffa5 	bl	80024d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c9a      	adds	r2, r3, #2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10e      	bne.n	80025ea <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff6d 	bl	80024c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	b292      	uxth	r2, r2
 8002606:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	1c9a      	adds	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10e      	bne.n	8002648 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002638:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fa24 	bl	8000a90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b04      	cmp	r3, #4
 800266a:	d13a      	bne.n	80026e2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d109      	bne.n	800268a <I2S_IRQHandler+0x3a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d102      	bne.n	800268a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffb4 	bl	80025f2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d126      	bne.n	80026e2 <I2S_IRQHandler+0x92>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d11f      	bne.n	80026e2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026b0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0202 	orr.w	r2, r3, #2
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fefb 	bl	80024d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d136      	bne.n	800275c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d109      	bne.n	800270c <I2S_IRQHandler+0xbc>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d102      	bne.n	800270c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff45 	bl	8002596 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b08      	cmp	r3, #8
 8002714:	d122      	bne.n	800275c <I2S_IRQHandler+0x10c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b20      	cmp	r3, #32
 8002722:	d11b      	bne.n	800275c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002732:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f043 0204 	orr.w	r2, r3, #4
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff febe 	bl	80024d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800275c:	bf00      	nop
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002774:	f7fe fbe6 	bl	8000f44 <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800277a:	e018      	b.n	80027ae <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002782:	d014      	beq.n	80027ae <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002784:	f7fe fbde 	bl	8000f44 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d902      	bls.n	800279a <I2S_WaitFlagStateUntilTimeout+0x36>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e00f      	b.n	80027ce <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1d7      	bne.n	800277c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4aa2      	ldr	r2, [pc, #648]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80027f2:	4ba2      	ldr	r3, [pc, #648]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027f4:	e001      	b.n	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80027f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a9b      	ldr	r2, [pc, #620]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002810:	4b9a      	ldr	r3, [pc, #616]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002812:	e001      	b.n	8002818 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d004      	beq.n	8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 8099 	bne.w	8002962 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d107      	bne.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f925 	bl	8002a94 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d107      	bne.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9c8 	bl	8002bf4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d13a      	bne.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d035      	beq.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7e      	ldr	r2, [pc, #504]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002882:	4b7e      	ldr	r3, [pc, #504]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002884:	e001      	b.n	800288a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4979      	ldr	r1, [pc, #484]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002892:	428b      	cmp	r3, r1
 8002894:	d101      	bne.n	800289a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002896:	4b79      	ldr	r3, [pc, #484]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002898:	e001      	b.n	800289e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800289a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800289e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f043 0202 	orr.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fdfa 	bl	80024d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	f040 80be 	bne.w	8002a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80b8 	beq.w	8002a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800290a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a59      	ldr	r2, [pc, #356]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002916:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002918:	e001      	b.n	800291e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800291a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4954      	ldr	r1, [pc, #336]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002926:	428b      	cmp	r3, r1
 8002928:	d101      	bne.n	800292e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800292a:	4b54      	ldr	r3, [pc, #336]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800292c:	e001      	b.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002936:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fdbc 	bl	80024d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002960:	e084      	b.n	8002a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d107      	bne.n	800297c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8be 	bl	8002af8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8fd 	bl	8002b90 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d12f      	bne.n	8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02a      	beq.n	8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029c6:	e001      	b.n	80029cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80029c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4929      	ldr	r1, [pc, #164]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d101      	bne.n	80029dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029da:	e001      	b.n	80029e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80029dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fd6c 	bl	80024d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d131      	bne.n	8002a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02c      	beq.n	8002a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a20:	e001      	b.n	8002a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4912      	ldr	r1, [pc, #72]	; (8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a2e:	428b      	cmp	r3, r1
 8002a30:	d101      	bne.n	8002a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a34:	e001      	b.n	8002a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a4e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	f043 0204 	orr.w	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fd37 	bl	80024d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a6a:	e000      	b.n	8002a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a6c:	bf00      	nop
}
 8002a6e:	bf00      	nop
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40003800 	.word	0x40003800
 8002a7c:	40003400 	.word	0x40003400

08002a80 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	1c99      	adds	r1, r3, #2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6251      	str	r1, [r2, #36]	; 0x24
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d113      	bne.n	8002aee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ffc9 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	1c99      	adds	r1, r3, #2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6251      	str	r1, [r2, #36]	; 0x24
 8002b0a:	8819      	ldrh	r1, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <I2SEx_TxISR_I2SExt+0x22>
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b18:	e001      	b.n	8002b1e <I2SEx_TxISR_I2SExt+0x26>
 8002b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b1e:	460a      	mov	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d121      	bne.n	8002b7e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <I2SEx_TxISR_I2SExt+0x50>
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b46:	e001      	b.n	8002b4c <I2SEx_TxISR_I2SExt+0x54>
 8002b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	490d      	ldr	r1, [pc, #52]	; (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d101      	bne.n	8002b5c <I2SEx_TxISR_I2SExt+0x64>
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b5a:	e001      	b.n	8002b60 <I2SEx_TxISR_I2SExt+0x68>
 8002b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff81 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40003800 	.word	0x40003800
 8002b8c:	40003400 	.word	0x40003400

08002b90 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68d8      	ldr	r0, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	1c99      	adds	r1, r3, #2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ba8:	b282      	uxth	r2, r0
 8002baa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d113      	bne.n	8002bec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bd2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ff4a 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <I2SEx_RxISR_I2SExt+0x16>
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c08:	e001      	b.n	8002c0e <I2SEx_RxISR_I2SExt+0x1a>
 8002c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c0e:	68d8      	ldr	r0, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	1c99      	adds	r1, r3, #2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002c1a:	b282      	uxth	r2, r0
 8002c1c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d121      	bne.n	8002c7a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <I2SEx_RxISR_I2SExt+0x50>
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c42:	e001      	b.n	8002c48 <I2SEx_RxISR_I2SExt+0x54>
 8002c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	490d      	ldr	r1, [pc, #52]	; (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d101      	bne.n	8002c58 <I2SEx_RxISR_I2SExt+0x64>
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c56:	e001      	b.n	8002c5c <I2SEx_RxISR_I2SExt+0x68>
 8002c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c60:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff03 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40003800 	.word	0x40003800
 8002c88:	40003400 	.word	0x40003400

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e264      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	4ba3      	ldr	r3, [pc, #652]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4ba0      	ldr	r3, [pc, #640]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b9d      	ldr	r3, [pc, #628]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e23f      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b91      	ldr	r3, [pc, #580]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a90      	ldr	r2, [pc, #576]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a8a      	ldr	r2, [pc, #552]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a87      	ldr	r2, [pc, #540]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b84      	ldr	r3, [pc, #528]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a83      	ldr	r2, [pc, #524]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a80      	ldr	r2, [pc, #512]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe f8fe 	bl	8000f44 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe f8fa 	bl	8000f44 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e204      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f8ea 	bl	8000f44 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe f8e6 	bl	8000f44 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1f0      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1c4      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b56      	ldr	r3, [pc, #344]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4952      	ldr	r1, [pc, #328]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <HAL_RCC_OscConfig+0x2b0>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe f89f 	bl	8000f44 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe f89b 	bl	8000f44 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1a5      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4940      	ldr	r1, [pc, #256]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCC_OscConfig+0x2b0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f87e 	bl	8000f44 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe f87a 	bl	8000f44 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e184      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d030      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_RCC_OscConfig+0x2b4>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe f85e 	bl	8000f44 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe f85a 	bl	8000f44 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e164      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e015      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_OscConfig+0x2b4>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe f847 	bl	8000f44 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fe f843 	bl	8000f44 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e14d      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a0 	beq.w	8003026 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe f809 	bl	8000f44 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e011      	b.n	8002f5a <HAL_RCC_OscConfig+0x2ce>
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	42470000 	.word	0x42470000
 8002f40:	42470e80 	.word	0x42470e80
 8002f44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7fd fffc 	bl	8000f44 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e106      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b85      	ldr	r3, [pc, #532]	; (8003170 <HAL_RCC_OscConfig+0x4e4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2f0>
 8002f6e:	4b81      	ldr	r3, [pc, #516]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x32a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x312>
 8002f84:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a7a      	ldr	r2, [pc, #488]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a77      	ldr	r2, [pc, #476]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x32a>
 8002f9e:	4b75      	ldr	r3, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a74      	ldr	r2, [pc, #464]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	4b72      	ldr	r3, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a71      	ldr	r2, [pc, #452]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fd ffc1 	bl	8000f44 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fd ffbd 	bl	8000f44 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0c5      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x33a>
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fd ffab 	bl	8000f44 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fd ffa7 	bl	8000f44 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0af      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b56      	ldr	r3, [pc, #344]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a55      	ldr	r2, [pc, #340]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 809b 	beq.w	8003166 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d05c      	beq.n	80030f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d141      	bne.n	80030c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fd ff7b 	bl	8000f44 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fd ff77 	bl	8000f44 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e081      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003064:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	019b      	lsls	r3, r3, #6
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	061b      	lsls	r3, r3, #24
 8003094:	4937      	ldr	r1, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fd ff50 	bl	8000f44 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fd ff4c 	bl	8000f44 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e056      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x41c>
 80030c6:	e04e      	b.n	8003166 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fd ff39 	bl	8000f44 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fd ff35 	bl	8000f44 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e03f      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x44a>
 80030f4:	e037      	b.n	8003166 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e032      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d028      	beq.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d121      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d11a      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003132:	4013      	ands	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003138:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313a:	4293      	cmp	r3, r2
 800313c:	d111      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d107      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40007000 	.word	0x40007000
 8003174:	40023800 	.word	0x40023800
 8003178:	42470060 	.word	0x42470060

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fd fe6a 	bl	8000f44 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fd fe66 	bl	8000f44 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd fdca 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	08006e50 	.word	0x08006e50
 8003340:	20000400 	.word	0x20000400
 8003344:	20000404 	.word	0x20000404

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800334e:	2100      	movs	r1, #0
 8003350:	6079      	str	r1, [r7, #4]
 8003352:	2100      	movs	r1, #0
 8003354:	60f9      	str	r1, [r7, #12]
 8003356:	2100      	movs	r1, #0
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800335a:	2100      	movs	r1, #0
 800335c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335e:	4952      	ldr	r1, [pc, #328]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003360:	6889      	ldr	r1, [r1, #8]
 8003362:	f001 010c 	and.w	r1, r1, #12
 8003366:	2908      	cmp	r1, #8
 8003368:	d00d      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x3e>
 800336a:	2908      	cmp	r1, #8
 800336c:	f200 8094 	bhi.w	8003498 <HAL_RCC_GetSysClockFreq+0x150>
 8003370:	2900      	cmp	r1, #0
 8003372:	d002      	beq.n	800337a <HAL_RCC_GetSysClockFreq+0x32>
 8003374:	2904      	cmp	r1, #4
 8003376:	d003      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x38>
 8003378:	e08e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337a:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <HAL_RCC_GetSysClockFreq+0x164>)
 800337c:	60bb      	str	r3, [r7, #8]
       break;
 800337e:	e08e      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003382:	60bb      	str	r3, [r7, #8]
      break;
 8003384:	e08b      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003386:	4948      	ldr	r1, [pc, #288]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003388:	6849      	ldr	r1, [r1, #4]
 800338a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800338e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003390:	4945      	ldr	r1, [pc, #276]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003392:	6849      	ldr	r1, [r1, #4]
 8003394:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003398:	2900      	cmp	r1, #0
 800339a:	d024      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339c:	4942      	ldr	r1, [pc, #264]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800339e:	6849      	ldr	r1, [r1, #4]
 80033a0:	0989      	lsrs	r1, r1, #6
 80033a2:	4608      	mov	r0, r1
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033ac:	f04f 0500 	mov.w	r5, #0
 80033b0:	ea00 0204 	and.w	r2, r0, r4
 80033b4:	ea01 0305 	and.w	r3, r1, r5
 80033b8:	493d      	ldr	r1, [pc, #244]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033ba:	fb01 f003 	mul.w	r0, r1, r3
 80033be:	2100      	movs	r1, #0
 80033c0:	fb01 f102 	mul.w	r1, r1, r2
 80033c4:	1844      	adds	r4, r0, r1
 80033c6:	493a      	ldr	r1, [pc, #232]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033c8:	fba2 0101 	umull	r0, r1, r2, r1
 80033cc:	1863      	adds	r3, r4, r1
 80033ce:	4619      	mov	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	f7fc ff52 	bl	8000280 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4613      	mov	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e04a      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	461a      	mov	r2, r3
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	ea02 0400 	and.w	r4, r2, r0
 80033fe:	ea03 0501 	and.w	r5, r3, r1
 8003402:	4620      	mov	r0, r4
 8003404:	4629      	mov	r1, r5
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	014b      	lsls	r3, r1, #5
 8003410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003414:	0142      	lsls	r2, r0, #5
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	1b00      	subs	r0, r0, r4
 800341c:	eb61 0105 	sbc.w	r1, r1, r5
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	018b      	lsls	r3, r1, #6
 800342a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800342e:	0182      	lsls	r2, r0, #6
 8003430:	1a12      	subs	r2, r2, r0
 8003432:	eb63 0301 	sbc.w	r3, r3, r1
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	00d9      	lsls	r1, r3, #3
 8003440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003444:	00d0      	lsls	r0, r2, #3
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	1912      	adds	r2, r2, r4
 800344c:	eb45 0303 	adc.w	r3, r5, r3
 8003450:	f04f 0000 	mov.w	r0, #0
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	0299      	lsls	r1, r3, #10
 800345a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800345e:	0290      	lsls	r0, r2, #10
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	f7fc ff06 	bl	8000280 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	60bb      	str	r3, [r7, #8]
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <HAL_RCC_GetSysClockFreq+0x164>)
 800349a:	60bb      	str	r3, [r7, #8]
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	68bb      	ldr	r3, [r7, #8]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bdb0      	pop	{r4, r5, r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	017d7840 	.word	0x017d7840

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000400 	.word	0x20000400

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	08006e60 	.word	0x08006e60

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034f8:	f7ff ffdc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	08006e60 	.word	0x08006e60

0800351c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003540:	2b00      	cmp	r3, #0
 8003542:	d035      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003544:	4b62      	ldr	r3, [pc, #392]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800354a:	f7fd fcfb 	bl	8000f44 <HAL_GetTick>
 800354e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003552:	f7fd fcf7 	bl	8000f44 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0b0      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003564:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f0      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	019a      	lsls	r2, r3, #6
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	071b      	lsls	r3, r3, #28
 800357c:	4955      	ldr	r1, [pc, #340]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003584:	4b52      	ldr	r3, [pc, #328]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800358a:	f7fd fcdb 	bl	8000f44 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003592:	f7fd fcd7 	bl	8000f44 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e090      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8083 	beq.w	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	4b44      	ldr	r3, [pc, #272]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a43      	ldr	r2, [pc, #268]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035da:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3e      	ldr	r2, [pc, #248]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035e6:	f7fd fcad 	bl	8000f44 <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fd fca9 	bl	8000f44 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e062      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003600:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003614:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02f      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	429a      	cmp	r2, r3
 8003628:	d028      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362a:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003632:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800363a:	4b28      	ldr	r3, [pc, #160]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003640:	4a24      	ldr	r2, [pc, #144]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003646:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d114      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003652:	f7fd fc77 	bl	8000f44 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fd fc73 	bl	8000f44 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e02a      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ee      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003688:	d10d      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	490d      	ldr	r1, [pc, #52]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]
 80036a4:	e005      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036b0:	6093      	str	r3, [r2, #8]
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036be:	4905      	ldr	r1, [pc, #20]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	42470068 	.word	0x42470068
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42470e40 	.word	0x42470e40

080036e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d13e      	bne.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80036fe:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d12f      	bne.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003716:	617b      	str	r3, [r7, #20]
          break;
 8003718:	e02f      	b.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800371a:	4b1c      	ldr	r3, [pc, #112]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003726:	d108      	bne.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003728:	4b18      	ldr	r3, [pc, #96]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003730:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e007      	b.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003742:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003764:	0f1b      	lsrs	r3, r3, #28
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
          break;
 8003772:	e002      	b.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
          break;
 8003778:	bf00      	nop
        }
      }
      break;
 800377a:	bf00      	nop
    }
  }
  return frequency;
 800377c:	697b      	ldr	r3, [r7, #20]
}
 800377e:	4618      	mov	r0, r3
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	00bb8000 	.word	0x00bb8000
 8003794:	017d7840 	.word	0x017d7840
 8003798:	00f42400 	.word	0x00f42400

0800379c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e03f      	b.n	800382e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fa6a 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f929 	bl	8003a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b08a      	sub	sp, #40	; 0x28
 800383a:	af02      	add	r7, sp, #8
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b20      	cmp	r3, #32
 8003854:	d17c      	bne.n	8003950 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_UART_Transmit+0x2c>
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e075      	b.n	8003952 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_UART_Transmit+0x3e>
 8003870:	2302      	movs	r3, #2
 8003872:	e06e      	b.n	8003952 <HAL_UART_Transmit+0x11c>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2221      	movs	r2, #33	; 0x21
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388a:	f7fd fb5b 	bl	8000f44 <HAL_GetTick>
 800388e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a4:	d108      	bne.n	80038b8 <HAL_UART_Transmit+0x82>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e003      	b.n	80038c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038c8:	e02a      	b.n	8003920 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2180      	movs	r1, #128	; 0x80
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f840 	bl	800395a <UART_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e036      	b.n	8003952 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	3302      	adds	r3, #2
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	e007      	b.n	8003912 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3301      	adds	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1cf      	bne.n	80038ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2200      	movs	r2, #0
 8003932:	2140      	movs	r1, #64	; 0x40
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f810 	bl	800395a <UART_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e006      	b.n	8003952 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e000      	b.n	8003952 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b090      	sub	sp, #64	; 0x40
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4613      	mov	r3, r2
 8003968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396a:	e050      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003972:	d04c      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0x30>
 800397a:	f7fd fae3 	bl	8000f44 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003986:	429a      	cmp	r2, r3
 8003988:	d241      	bcs.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039aa:	637a      	str	r2, [r7, #52]	; 0x34
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e5      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3314      	adds	r3, #20
 80039c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	613b      	str	r3, [r7, #16]
   return(result);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3314      	adds	r3, #20
 80039dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039de:	623a      	str	r2, [r7, #32]
 80039e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	69f9      	ldr	r1, [r7, #28]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e5      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e00f      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d09f      	beq.n	800396c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3740      	adds	r7, #64	; 0x40
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3c:	b09f      	sub	sp, #124	; 0x7c
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	ea40 0301 	orr.w	r3, r0, r1
 8003a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a7c:	f021 010c 	bic.w	r1, r1, #12
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a86:	430b      	orrs	r3, r1
 8003a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	6999      	ldr	r1, [r3, #24]
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	ea40 0301 	orr.w	r3, r0, r1
 8003aa0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4bc5      	ldr	r3, [pc, #788]	; (8003dbc <UART_SetConfig+0x384>)
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d004      	beq.n	8003ab6 <UART_SetConfig+0x7e>
 8003aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4bc3      	ldr	r3, [pc, #780]	; (8003dc0 <UART_SetConfig+0x388>)
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d103      	bne.n	8003abe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab6:	f7ff fd1d 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8003aba:	6778      	str	r0, [r7, #116]	; 0x74
 8003abc:	e002      	b.n	8003ac4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7ff fd05 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8003ac2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003acc:	f040 80b6 	bne.w	8003c3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad2:	461c      	mov	r4, r3
 8003ad4:	f04f 0500 	mov.w	r5, #0
 8003ad8:	4622      	mov	r2, r4
 8003ada:	462b      	mov	r3, r5
 8003adc:	1891      	adds	r1, r2, r2
 8003ade:	6439      	str	r1, [r7, #64]	; 0x40
 8003ae0:	415b      	adcs	r3, r3
 8003ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ae8:	1912      	adds	r2, r2, r4
 8003aea:	eb45 0303 	adc.w	r3, r5, r3
 8003aee:	f04f 0000 	mov.w	r0, #0
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	00d9      	lsls	r1, r3, #3
 8003af8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003afc:	00d0      	lsls	r0, r2, #3
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	1911      	adds	r1, r2, r4
 8003b04:	6639      	str	r1, [r7, #96]	; 0x60
 8003b06:	416b      	adcs	r3, r5
 8003b08:	667b      	str	r3, [r7, #100]	; 0x64
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b24:	f7fc fbac 	bl	8000280 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4ba5      	ldr	r3, [pc, #660]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	011e      	lsls	r6, r3, #4
 8003b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b38:	461c      	mov	r4, r3
 8003b3a:	f04f 0500 	mov.w	r5, #0
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	1891      	adds	r1, r2, r2
 8003b44:	6339      	str	r1, [r7, #48]	; 0x30
 8003b46:	415b      	adcs	r3, r3
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b4e:	1912      	adds	r2, r2, r4
 8003b50:	eb45 0303 	adc.w	r3, r5, r3
 8003b54:	f04f 0000 	mov.w	r0, #0
 8003b58:	f04f 0100 	mov.w	r1, #0
 8003b5c:	00d9      	lsls	r1, r3, #3
 8003b5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b62:	00d0      	lsls	r0, r2, #3
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	1911      	adds	r1, r2, r4
 8003b6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b6c:	416b      	adcs	r3, r5
 8003b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	461a      	mov	r2, r3
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	1891      	adds	r1, r2, r2
 8003b7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b7e:	415b      	adcs	r3, r3
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b8a:	f7fc fb79 	bl	8000280 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4b8c      	ldr	r3, [pc, #560]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003b94:	fba3 1302 	umull	r1, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	2164      	movs	r1, #100	; 0x64
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	3332      	adds	r3, #50	; 0x32
 8003ba6:	4a87      	ldr	r2, [pc, #540]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb4:	441e      	add	r6, r3
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	1894      	adds	r4, r2, r2
 8003bc4:	623c      	str	r4, [r7, #32]
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bce:	1812      	adds	r2, r2, r0
 8003bd0:	eb41 0303 	adc.w	r3, r1, r3
 8003bd4:	f04f 0400 	mov.w	r4, #0
 8003bd8:	f04f 0500 	mov.w	r5, #0
 8003bdc:	00dd      	lsls	r5, r3, #3
 8003bde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003be2:	00d4      	lsls	r4, r2, #3
 8003be4:	4622      	mov	r2, r4
 8003be6:	462b      	mov	r3, r5
 8003be8:	1814      	adds	r4, r2, r0
 8003bea:	653c      	str	r4, [r7, #80]	; 0x50
 8003bec:	414b      	adcs	r3, r1
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	1891      	adds	r1, r2, r2
 8003bfc:	61b9      	str	r1, [r7, #24]
 8003bfe:	415b      	adcs	r3, r3
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c0a:	f7fc fb39 	bl	8000280 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4b6c      	ldr	r3, [pc, #432]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003c14:	fba3 1302 	umull	r1, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	2164      	movs	r1, #100	; 0x64
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	4a67      	ldr	r2, [pc, #412]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	f003 0207 	and.w	r2, r3, #7
 8003c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4432      	add	r2, r6
 8003c38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c3a:	e0b9      	b.n	8003db0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3e:	461c      	mov	r4, r3
 8003c40:	f04f 0500 	mov.w	r5, #0
 8003c44:	4622      	mov	r2, r4
 8003c46:	462b      	mov	r3, r5
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	6139      	str	r1, [r7, #16]
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c54:	1912      	adds	r2, r2, r4
 8003c56:	eb45 0303 	adc.w	r3, r5, r3
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	00d9      	lsls	r1, r3, #3
 8003c64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c68:	00d0      	lsls	r0, r2, #3
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	eb12 0804 	adds.w	r8, r2, r4
 8003c72:	eb43 0905 	adc.w	r9, r3, r5
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	008b      	lsls	r3, r1, #2
 8003c8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c8e:	0082      	lsls	r2, r0, #2
 8003c90:	4640      	mov	r0, r8
 8003c92:	4649      	mov	r1, r9
 8003c94:	f7fc faf4 	bl	8000280 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	011e      	lsls	r6, r3, #4
 8003ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	1894      	adds	r4, r2, r2
 8003cb4:	60bc      	str	r4, [r7, #8]
 8003cb6:	415b      	adcs	r3, r3
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cbe:	1812      	adds	r2, r2, r0
 8003cc0:	eb41 0303 	adc.w	r3, r1, r3
 8003cc4:	f04f 0400 	mov.w	r4, #0
 8003cc8:	f04f 0500 	mov.w	r5, #0
 8003ccc:	00dd      	lsls	r5, r3, #3
 8003cce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cd2:	00d4      	lsls	r4, r2, #3
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	1814      	adds	r4, r2, r0
 8003cda:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cdc:	414b      	adcs	r3, r1
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	008b      	lsls	r3, r1, #2
 8003cf4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cf8:	0082      	lsls	r2, r0, #2
 8003cfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cfe:	f7fc fabf 	bl	8000280 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003d08:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d26:	441e      	add	r6, r3
 8003d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	1894      	adds	r4, r2, r2
 8003d36:	603c      	str	r4, [r7, #0]
 8003d38:	415b      	adcs	r3, r3
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d40:	1812      	adds	r2, r2, r0
 8003d42:	eb41 0303 	adc.w	r3, r1, r3
 8003d46:	f04f 0400 	mov.w	r4, #0
 8003d4a:	f04f 0500 	mov.w	r5, #0
 8003d4e:	00dd      	lsls	r5, r3, #3
 8003d50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d54:	00d4      	lsls	r4, r2, #3
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	eb12 0a00 	adds.w	sl, r2, r0
 8003d5e:	eb43 0b01 	adc.w	fp, r3, r1
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f04f 0100 	mov.w	r1, #0
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	008b      	lsls	r3, r1, #2
 8003d76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d7a:	0082      	lsls	r2, r0, #2
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	4659      	mov	r1, fp
 8003d80:	f7fc fa7e 	bl	8000280 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2164      	movs	r1, #100	; 0x64
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	3332      	adds	r3, #50	; 0x32
 8003d9c:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	f003 020f 	and.w	r2, r3, #15
 8003da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4432      	add	r2, r6
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	377c      	adds	r7, #124	; 0x7c
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	40011000 	.word	0x40011000
 8003dc0:	40011400 	.word	0x40011400
 8003dc4:	51eb851f 	.word	0x51eb851f

08003dc8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <MX_PDM2PCM_Init+0x48>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <MX_PDM2PCM_Init+0x48>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <MX_PDM2PCM_Init+0x48>)
 8003dda:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <MX_PDM2PCM_Init+0x4c>)
 8003ddc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <MX_PDM2PCM_Init+0x48>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <MX_PDM2PCM_Init+0x48>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8003dea:	4809      	ldr	r0, [pc, #36]	; (8003e10 <MX_PDM2PCM_Init+0x48>)
 8003dec:	f001 fd66 	bl	80058bc <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <MX_PDM2PCM_Init+0x50>)
 8003df2:	2202      	movs	r2, #2
 8003df4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <MX_PDM2PCM_Init+0x50>)
 8003df8:	2210      	movs	r2, #16
 8003dfa:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <MX_PDM2PCM_Init+0x50>)
 8003dfe:	2218      	movs	r2, #24
 8003e00:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8003e02:	4905      	ldr	r1, [pc, #20]	; (8003e18 <MX_PDM2PCM_Init+0x50>)
 8003e04:	4802      	ldr	r0, [pc, #8]	; (8003e10 <MX_PDM2PCM_Init+0x48>)
 8003e06:	f001 fde3 	bl	80059d0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000910 	.word	0x20000910
 8003e14:	7d70a3d6 	.word	0x7d70a3d6
 8003e18:	20000908 	.word	0x20000908

08003e1c <D16_GENERIC>:
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	b089      	sub	sp, #36	; 0x24
 8003e22:	68d4      	ldr	r4, [r2, #12]
 8003e24:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003e26:	6993      	ldr	r3, [r2, #24]
 8003e28:	9407      	str	r4, [sp, #28]
 8003e2a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003e2c:	9306      	str	r3, [sp, #24]
 8003e2e:	9402      	str	r4, [sp, #8]
 8003e30:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003e34:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8003e38:	69d3      	ldr	r3, [r2, #28]
 8003e3a:	6896      	ldr	r6, [r2, #8]
 8003e3c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003e3e:	9103      	str	r1, [sp, #12]
 8003e40:	2d00      	cmp	r5, #0
 8003e42:	d066      	beq.n	8003f12 <D16_GENERIC+0xf6>
 8003e44:	f004 0510 	and.w	r5, r4, #16
 8003e48:	f004 0420 	and.w	r4, r4, #32
 8003e4c:	9504      	str	r5, [sp, #16]
 8003e4e:	4938      	ldr	r1, [pc, #224]	; (8003f30 <D16_GENERIC+0x114>)
 8003e50:	9405      	str	r4, [sp, #20]
 8003e52:	f04f 0e00 	mov.w	lr, #0
 8003e56:	4635      	mov	r5, r6
 8003e58:	e04f      	b.n	8003efa <D16_GENERIC+0xde>
 8003e5a:	5d87      	ldrb	r7, [r0, r6]
 8003e5c:	7804      	ldrb	r4, [r0, #0]
 8003e5e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003e62:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8003e66:	b2e6      	uxtb	r6, r4
 8003e68:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003e6c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003e70:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8003e74:	4433      	add	r3, r6
 8003e76:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8003e7a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8003e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e82:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8003e86:	0aa3      	lsrs	r3, r4, #10
 8003e88:	4c2a      	ldr	r4, [pc, #168]	; (8003f34 <D16_GENERIC+0x118>)
 8003e8a:	fb26 5404 	smlad	r4, r6, r4, r5
 8003e8e:	4d2a      	ldr	r5, [pc, #168]	; (8003f38 <D16_GENERIC+0x11c>)
 8003e90:	fb26 f505 	smuad	r5, r6, r5
 8003e94:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8003e98:	eb04 080a 	add.w	r8, r4, sl
 8003e9c:	eba8 080b 	sub.w	r8, r8, fp
 8003ea0:	4646      	mov	r6, r8
 8003ea2:	17f7      	asrs	r7, r6, #31
 8003ea4:	e9cd 6700 	strd	r6, r7, [sp]
 8003ea8:	9e04      	ldr	r6, [sp, #16]
 8003eaa:	f10e 0c01 	add.w	ip, lr, #1
 8003eae:	b16e      	cbz	r6, 8003ecc <D16_GENERIC+0xb0>
 8003eb0:	6a16      	ldr	r6, [r2, #32]
 8003eb2:	9f01      	ldr	r7, [sp, #4]
 8003eb4:	fba8 8906 	umull	r8, r9, r8, r6
 8003eb8:	fb06 9907 	mla	r9, r6, r7, r9
 8003ebc:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003ec0:	f149 0900 	adc.w	r9, r9, #0
 8003ec4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8003ec8:	46a3      	mov	fp, r4
 8003eca:	4654      	mov	r4, sl
 8003ecc:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8003ece:	9f02      	ldr	r7, [sp, #8]
 8003ed0:	0424      	lsls	r4, r4, #16
 8003ed2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003ed6:	f04f 0900 	mov.w	r9, #0
 8003eda:	fb0e fe06 	mul.w	lr, lr, r6
 8003ede:	fbc7 8904 	smlal	r8, r9, r7, r4
 8003ee2:	9e03      	ldr	r6, [sp, #12]
 8003ee4:	464f      	mov	r7, r9
 8003ee6:	10bc      	asrs	r4, r7, #2
 8003ee8:	f304 040f 	ssat	r4, #16, r4
 8003eec:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8003ef0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003ef2:	fa1f fe8c 	uxth.w	lr, ip
 8003ef6:	4574      	cmp	r4, lr
 8003ef8:	d90a      	bls.n	8003f10 <D16_GENERIC+0xf4>
 8003efa:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003efc:	2c01      	cmp	r4, #1
 8003efe:	b2e6      	uxtb	r6, r4
 8003f00:	d1ab      	bne.n	8003e5a <D16_GENERIC+0x3e>
 8003f02:	9e05      	ldr	r6, [sp, #20]
 8003f04:	f850 4b02 	ldr.w	r4, [r0], #2
 8003f08:	2e00      	cmp	r6, #0
 8003f0a:	d0ac      	beq.n	8003e66 <D16_GENERIC+0x4a>
 8003f0c:	ba64      	rev16	r4, r4
 8003f0e:	e7aa      	b.n	8003e66 <D16_GENERIC+0x4a>
 8003f10:	462e      	mov	r6, r5
 8003f12:	9907      	ldr	r1, [sp, #28]
 8003f14:	61d3      	str	r3, [r2, #28]
 8003f16:	9b06      	ldr	r3, [sp, #24]
 8003f18:	6096      	str	r6, [r2, #8]
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	60d1      	str	r1, [r2, #12]
 8003f1e:	f8c2 a010 	str.w	sl, [r2, #16]
 8003f22:	f8c2 b014 	str.w	fp, [r2, #20]
 8003f26:	6193      	str	r3, [r2, #24]
 8003f28:	b009      	add	sp, #36	; 0x24
 8003f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000000 	.word	0x20000000
 8003f34:	00030001 	.word	0x00030001
 8003f38:	00010003 	.word	0x00010003

08003f3c <D24_GENERIC>:
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f40:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8003f42:	6993      	ldr	r3, [r2, #24]
 8003f44:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003f46:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003f4a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8003f4e:	6894      	ldr	r4, [r2, #8]
 8003f50:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003f54:	b089      	sub	sp, #36	; 0x24
 8003f56:	9307      	str	r3, [sp, #28]
 8003f58:	9503      	str	r5, [sp, #12]
 8003f5a:	69d3      	ldr	r3, [r2, #28]
 8003f5c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8003f5e:	9104      	str	r1, [sp, #16]
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	f000 8096 	beq.w	8004092 <D24_GENERIC+0x156>
 8003f66:	f005 0610 	and.w	r6, r5, #16
 8003f6a:	f005 0520 	and.w	r5, r5, #32
 8003f6e:	4954      	ldr	r1, [pc, #336]	; (80040c0 <D24_GENERIC+0x184>)
 8003f70:	9605      	str	r6, [sp, #20]
 8003f72:	9506      	str	r5, [sp, #24]
 8003f74:	f04f 0e00 	mov.w	lr, #0
 8003f78:	f8cd 9008 	str.w	r9, [sp, #8]
 8003f7c:	e06a      	b.n	8004054 <D24_GENERIC+0x118>
 8003f7e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8003f82:	f810 8007 	ldrb.w	r8, [r0, r7]
 8003f86:	f890 c000 	ldrb.w	ip, [r0]
 8003f8a:	042d      	lsls	r5, r5, #16
 8003f8c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003f90:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8003f94:	44ac      	add	ip, r5
 8003f96:	4438      	add	r0, r7
 8003f98:	fa5f f68c 	uxtb.w	r6, ip
 8003f9c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8003fa0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003fa4:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8003fa8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003fac:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8003fb0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8003fb4:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8003fb8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8003fbc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003fc0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8003fc4:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8003fc8:	4d3e      	ldr	r5, [pc, #248]	; (80040c4 <D24_GENERIC+0x188>)
 8003fca:	fb26 b705 	smlad	r7, r6, r5, fp
 8003fce:	4d3e      	ldr	r5, [pc, #248]	; (80040c8 <D24_GENERIC+0x18c>)
 8003fd0:	fb26 4b05 	smlad	fp, r6, r5, r4
 8003fd4:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8003fd8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8003fdc:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8003fe0:	2401      	movs	r4, #1
 8003fe2:	fb26 f604 	smuad	r6, r6, r4
 8003fe6:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8003fea:	9f02      	ldr	r7, [sp, #8]
 8003fec:	eb0e 0c04 	add.w	ip, lr, r4
 8003ff0:	eb08 0406 	add.w	r4, r8, r6
 8003ff4:	eb05 060a 	add.w	r6, r5, sl
 8003ff8:	1bf6      	subs	r6, r6, r7
 8003ffa:	4637      	mov	r7, r6
 8003ffc:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004000:	e9cd 7800 	strd	r7, r8, [sp]
 8004004:	9f05      	ldr	r7, [sp, #20]
 8004006:	b177      	cbz	r7, 8004026 <D24_GENERIC+0xea>
 8004008:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800400c:	9502      	str	r5, [sp, #8]
 800400e:	fba6 9a08 	umull	r9, sl, r6, r8
 8004012:	9e01      	ldr	r6, [sp, #4]
 8004014:	fb08 aa06 	mla	sl, r8, r6, sl
 8004018:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800401c:	f14a 0700 	adc.w	r7, sl, #0
 8004020:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004024:	4655      	mov	r5, sl
 8004026:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004028:	9f03      	ldr	r7, [sp, #12]
 800402a:	03ad      	lsls	r5, r5, #14
 800402c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004030:	f04f 0900 	mov.w	r9, #0
 8004034:	fb0e fe06 	mul.w	lr, lr, r6
 8004038:	fbc7 8905 	smlal	r8, r9, r7, r5
 800403c:	9e04      	ldr	r6, [sp, #16]
 800403e:	464f      	mov	r7, r9
 8004040:	10bd      	asrs	r5, r7, #2
 8004042:	f305 050f 	ssat	r5, #16, r5
 8004046:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800404a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800404c:	fa1f fe8c 	uxth.w	lr, ip
 8004050:	4575      	cmp	r5, lr
 8004052:	d91c      	bls.n	800408e <D24_GENERIC+0x152>
 8004054:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8004056:	b2ef      	uxtb	r7, r5
 8004058:	2d01      	cmp	r5, #1
 800405a:	b23e      	sxth	r6, r7
 800405c:	d18f      	bne.n	8003f7e <D24_GENERIC+0x42>
 800405e:	9d06      	ldr	r5, [sp, #24]
 8004060:	b15d      	cbz	r5, 800407a <D24_GENERIC+0x13e>
 8004062:	f01e 0f01 	tst.w	lr, #1
 8004066:	d122      	bne.n	80040ae <D24_GENERIC+0x172>
 8004068:	7805      	ldrb	r5, [r0, #0]
 800406a:	78c7      	ldrb	r7, [r0, #3]
 800406c:	7846      	ldrb	r6, [r0, #1]
 800406e:	022d      	lsls	r5, r5, #8
 8004070:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004074:	44b4      	add	ip, r6
 8004076:	3002      	adds	r0, #2
 8004078:	e78e      	b.n	8003f98 <D24_GENERIC+0x5c>
 800407a:	7846      	ldrb	r6, [r0, #1]
 800407c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8004080:	f810 5b03 	ldrb.w	r5, [r0], #3
 8004084:	0236      	lsls	r6, r6, #8
 8004086:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800408a:	44ac      	add	ip, r5
 800408c:	e784      	b.n	8003f98 <D24_GENERIC+0x5c>
 800408e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004092:	61d3      	str	r3, [r2, #28]
 8004094:	9b07      	ldr	r3, [sp, #28]
 8004096:	6094      	str	r4, [r2, #8]
 8004098:	2000      	movs	r0, #0
 800409a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800409e:	f8c2 a010 	str.w	sl, [r2, #16]
 80040a2:	f8c2 9014 	str.w	r9, [r2, #20]
 80040a6:	6193      	str	r3, [r2, #24]
 80040a8:	b009      	add	sp, #36	; 0x24
 80040aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ae:	78c5      	ldrb	r5, [r0, #3]
 80040b0:	7887      	ldrb	r7, [r0, #2]
 80040b2:	f810 6b04 	ldrb.w	r6, [r0], #4
 80040b6:	022d      	lsls	r5, r5, #8
 80040b8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80040bc:	44b4      	add	ip, r6
 80040be:	e76b      	b.n	8003f98 <D24_GENERIC+0x5c>
 80040c0:	20000000 	.word	0x20000000
 80040c4:	00030001 	.word	0x00030001
 80040c8:	00060007 	.word	0x00060007

080040cc <D32_GENERIC>:
 80040cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80040d2:	6993      	ldr	r3, [r2, #24]
 80040d4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80040d6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80040da:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80040de:	69d6      	ldr	r6, [r2, #28]
 80040e0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80040e4:	b089      	sub	sp, #36	; 0x24
 80040e6:	9307      	str	r3, [sp, #28]
 80040e8:	9403      	str	r4, [sp, #12]
 80040ea:	6893      	ldr	r3, [r2, #8]
 80040ec:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80040ee:	9104      	str	r1, [sp, #16]
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	f000 809f 	beq.w	8004234 <D32_GENERIC+0x168>
 80040f6:	f004 0510 	and.w	r5, r4, #16
 80040fa:	f004 0420 	and.w	r4, r4, #32
 80040fe:	9505      	str	r5, [sp, #20]
 8004100:	4953      	ldr	r1, [pc, #332]	; (8004250 <D32_GENERIC+0x184>)
 8004102:	9406      	str	r4, [sp, #24]
 8004104:	f04f 0c00 	mov.w	ip, #0
 8004108:	f8cd 9008 	str.w	r9, [sp, #8]
 800410c:	461d      	mov	r5, r3
 800410e:	4617      	mov	r7, r2
 8004110:	e077      	b.n	8004202 <D32_GENERIC+0x136>
 8004112:	f818 3003 	ldrb.w	r3, [r8, r3]
 8004116:	f810 800e 	ldrb.w	r8, [r0, lr]
 800411a:	f810 e002 	ldrb.w	lr, [r0, r2]
 800411e:	7800      	ldrb	r0, [r0, #0]
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004126:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800412a:	4403      	add	r3, r0
 800412c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8004130:	b2dc      	uxtb	r4, r3
 8004132:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004136:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800413a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800413e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004142:	0e1b      	lsrs	r3, r3, #24
 8004144:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8004148:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800414c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004150:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004154:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8004158:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800415c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8004160:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004164:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004168:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800416c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8004170:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004174:	4b37      	ldr	r3, [pc, #220]	; (8004254 <D32_GENERIC+0x188>)
 8004176:	fb22 b403 	smlad	r4, r2, r3, fp
 800417a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800417e:	fb2e 4803 	smlad	r8, lr, r3, r4
 8004182:	4b35      	ldr	r3, [pc, #212]	; (8004258 <D32_GENERIC+0x18c>)
 8004184:	fb22 5503 	smlad	r5, r2, r3, r5
 8004188:	4b34      	ldr	r3, [pc, #208]	; (800425c <D32_GENERIC+0x190>)
 800418a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800418e:	2301      	movs	r3, #1
 8004190:	fb22 f203 	smuad	r2, r2, r3
 8004194:	4b32      	ldr	r3, [pc, #200]	; (8004260 <D32_GENERIC+0x194>)
 8004196:	fb2e 2503 	smlad	r5, lr, r3, r2
 800419a:	9b02      	ldr	r3, [sp, #8]
 800419c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80041a0:	eb04 080a 	add.w	r8, r4, sl
 80041a4:	eba8 0803 	sub.w	r8, r8, r3
 80041a8:	4642      	mov	r2, r8
 80041aa:	17d3      	asrs	r3, r2, #31
 80041ac:	e9cd 2300 	strd	r2, r3, [sp]
 80041b0:	9b05      	ldr	r3, [sp, #20]
 80041b2:	f10c 0e01 	add.w	lr, ip, #1
 80041b6:	b16b      	cbz	r3, 80041d4 <D32_GENERIC+0x108>
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	9b01      	ldr	r3, [sp, #4]
 80041bc:	9402      	str	r4, [sp, #8]
 80041be:	fba8 8902 	umull	r8, r9, r8, r2
 80041c2:	fb02 9903 	mla	r9, r2, r3, r9
 80041c6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80041ca:	f149 0900 	adc.w	r9, r9, #0
 80041ce:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80041d2:	4654      	mov	r4, sl
 80041d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041d6:	9a04      	ldr	r2, [sp, #16]
 80041d8:	fb0c fc03 	mul.w	ip, ip, r3
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	0364      	lsls	r4, r4, #13
 80041e0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80041e4:	f04f 0900 	mov.w	r9, #0
 80041e8:	fbc3 8904 	smlal	r8, r9, r3, r4
 80041ec:	464b      	mov	r3, r9
 80041ee:	109b      	asrs	r3, r3, #2
 80041f0:	f303 030f 	ssat	r3, #16, r3
 80041f4:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80041f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041fa:	fa1f fc8e 	uxth.w	ip, lr
 80041fe:	4563      	cmp	r3, ip
 8004200:	d914      	bls.n	800422c <D32_GENERIC+0x160>
 8004202:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004204:	b2e2      	uxtb	r2, r4
 8004206:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800420a:	eb00 080e 	add.w	r8, r0, lr
 800420e:	4253      	negs	r3, r2
 8004210:	2c01      	cmp	r4, #1
 8004212:	eb08 0403 	add.w	r4, r8, r3
 8004216:	f47f af7c 	bne.w	8004112 <D32_GENERIC+0x46>
 800421a:	1d02      	adds	r2, r0, #4
 800421c:	6803      	ldr	r3, [r0, #0]
 800421e:	9806      	ldr	r0, [sp, #24]
 8004220:	b110      	cbz	r0, 8004228 <D32_GENERIC+0x15c>
 8004222:	ba5b      	rev16	r3, r3
 8004224:	4610      	mov	r0, r2
 8004226:	e783      	b.n	8004130 <D32_GENERIC+0x64>
 8004228:	4610      	mov	r0, r2
 800422a:	e781      	b.n	8004130 <D32_GENERIC+0x64>
 800422c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004230:	462b      	mov	r3, r5
 8004232:	463a      	mov	r2, r7
 8004234:	6093      	str	r3, [r2, #8]
 8004236:	9b07      	ldr	r3, [sp, #28]
 8004238:	f8c2 b00c 	str.w	fp, [r2, #12]
 800423c:	2000      	movs	r0, #0
 800423e:	61d6      	str	r6, [r2, #28]
 8004240:	f8c2 a010 	str.w	sl, [r2, #16]
 8004244:	f8c2 9014 	str.w	r9, [r2, #20]
 8004248:	6193      	str	r3, [r2, #24]
 800424a:	b009      	add	sp, #36	; 0x24
 800424c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004250:	20000000 	.word	0x20000000
 8004254:	00060003 	.word	0x00060003
 8004258:	000a000c 	.word	0x000a000c
 800425c:	000c000a 	.word	0x000c000a
 8004260:	00030006 	.word	0x00030006

08004264 <D48_GENERIC>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	b089      	sub	sp, #36	; 0x24
 800426a:	6953      	ldr	r3, [r2, #20]
 800426c:	68d4      	ldr	r4, [r2, #12]
 800426e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004270:	9302      	str	r3, [sp, #8]
 8004272:	9400      	str	r4, [sp, #0]
 8004274:	6993      	ldr	r3, [r2, #24]
 8004276:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004278:	9307      	str	r3, [sp, #28]
 800427a:	9403      	str	r4, [sp, #12]
 800427c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004280:	69d6      	ldr	r6, [r2, #28]
 8004282:	6893      	ldr	r3, [r2, #8]
 8004284:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004286:	9104      	str	r1, [sp, #16]
 8004288:	2d00      	cmp	r5, #0
 800428a:	f000 80c5 	beq.w	8004418 <D48_GENERIC+0x1b4>
 800428e:	f004 0510 	and.w	r5, r4, #16
 8004292:	f004 0420 	and.w	r4, r4, #32
 8004296:	4967      	ldr	r1, [pc, #412]	; (8004434 <D48_GENERIC+0x1d0>)
 8004298:	9505      	str	r5, [sp, #20]
 800429a:	9406      	str	r4, [sp, #24]
 800429c:	f04f 0c00 	mov.w	ip, #0
 80042a0:	4657      	mov	r7, sl
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	e09c      	b.n	80043e0 <D48_GENERIC+0x17c>
 80042a6:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80042aa:	f810 b009 	ldrb.w	fp, [r0, r9]
 80042ae:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80042b2:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80042b6:	7800      	ldrb	r0, [r0, #0]
 80042b8:	0424      	lsls	r4, r4, #16
 80042ba:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80042be:	f818 4005 	ldrb.w	r4, [r8, r5]
 80042c2:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80042c6:	44a8      	add	r8, r5
 80042c8:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80042cc:	eb0b 0500 	add.w	r5, fp, r0
 80042d0:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80042d4:	fa5f f885 	uxtb.w	r8, r5
 80042d8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80042dc:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80042e0:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80042e4:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80042e8:	0e2d      	lsrs	r5, r5, #24
 80042ea:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80042ee:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80042f2:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80042f6:	b2e6      	uxtb	r6, r4
 80042f8:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80042fc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004300:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8004304:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004308:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800430c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8004310:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004314:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8004318:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800431c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004320:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8004324:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004328:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800432c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004330:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8004334:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8004338:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800433c:	4c3e      	ldr	r4, [pc, #248]	; (8004438 <D48_GENERIC+0x1d4>)
 800433e:	9d00      	ldr	r5, [sp, #0]
 8004340:	fb2a 5404 	smlad	r4, sl, r4, r5
 8004344:	4d3d      	ldr	r5, [pc, #244]	; (800443c <D48_GENERIC+0x1d8>)
 8004346:	fb28 4405 	smlad	r4, r8, r5, r4
 800434a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800434e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8004352:	4c3b      	ldr	r4, [pc, #236]	; (8004440 <D48_GENERIC+0x1dc>)
 8004354:	9b01      	ldr	r3, [sp, #4]
 8004356:	fb2a 3304 	smlad	r3, sl, r4, r3
 800435a:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800435e:	fb28 3304 	smlad	r3, r8, r4, r3
 8004362:	4c38      	ldr	r4, [pc, #224]	; (8004444 <D48_GENERIC+0x1e0>)
 8004364:	fb2e 3304 	smlad	r3, lr, r4, r3
 8004368:	2501      	movs	r5, #1
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	fb2a fa05 	smuad	sl, sl, r5
 8004370:	4b35      	ldr	r3, [pc, #212]	; (8004448 <D48_GENERIC+0x1e4>)
 8004372:	fb28 a803 	smlad	r8, r8, r3, sl
 8004376:	4b35      	ldr	r3, [pc, #212]	; (800444c <D48_GENERIC+0x1e8>)
 8004378:	fb2e 8303 	smlad	r3, lr, r3, r8
 800437c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	9b02      	ldr	r3, [sp, #8]
 8004384:	eb04 0807 	add.w	r8, r4, r7
 8004388:	eba8 0803 	sub.w	r8, r8, r3
 800438c:	9b05      	ldr	r3, [sp, #20]
 800438e:	4465      	add	r5, ip
 8004390:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8004394:	b163      	cbz	r3, 80043b0 <D48_GENERIC+0x14c>
 8004396:	6a17      	ldr	r7, [r2, #32]
 8004398:	9402      	str	r4, [sp, #8]
 800439a:	fba8 8907 	umull	r8, r9, r8, r7
 800439e:	fb07 990b 	mla	r9, r7, fp, r9
 80043a2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80043a6:	f149 0900 	adc.w	r9, r9, #0
 80043aa:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80043ae:	463c      	mov	r4, r7
 80043b0:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	02e4      	lsls	r4, r4, #11
 80043b8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80043bc:	f04f 0900 	mov.w	r9, #0
 80043c0:	fb0c fc0e 	mul.w	ip, ip, lr
 80043c4:	fbc3 8904 	smlal	r8, r9, r3, r4
 80043c8:	9b04      	ldr	r3, [sp, #16]
 80043ca:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80043ce:	f304 040f 	ssat	r4, #16, r4
 80043d2:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80043d6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80043d8:	fa1f fc85 	uxth.w	ip, r5
 80043dc:	4564      	cmp	r4, ip
 80043de:	d919      	bls.n	8004414 <D48_GENERIC+0x1b0>
 80043e0:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80043e2:	fa5f fe84 	uxtb.w	lr, r4
 80043e6:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80043ea:	f1ce 0500 	rsb	r5, lr, #0
 80043ee:	eb00 0b09 	add.w	fp, r0, r9
 80043f2:	eb0b 0a05 	add.w	sl, fp, r5
 80043f6:	2c01      	cmp	r4, #1
 80043f8:	eb0a 0809 	add.w	r8, sl, r9
 80043fc:	f47f af53 	bne.w	80042a6 <D48_GENERIC+0x42>
 8004400:	9b06      	ldr	r3, [sp, #24]
 8004402:	6805      	ldr	r5, [r0, #0]
 8004404:	6844      	ldr	r4, [r0, #4]
 8004406:	3006      	adds	r0, #6
 8004408:	2b00      	cmp	r3, #0
 800440a:	f43f af63 	beq.w	80042d4 <D48_GENERIC+0x70>
 800440e:	ba6d      	rev16	r5, r5
 8004410:	ba64      	rev16	r4, r4
 8004412:	e75f      	b.n	80042d4 <D48_GENERIC+0x70>
 8004414:	9b01      	ldr	r3, [sp, #4]
 8004416:	46ba      	mov	sl, r7
 8004418:	6093      	str	r3, [r2, #8]
 800441a:	9b00      	ldr	r3, [sp, #0]
 800441c:	60d3      	str	r3, [r2, #12]
 800441e:	9b02      	ldr	r3, [sp, #8]
 8004420:	6153      	str	r3, [r2, #20]
 8004422:	9b07      	ldr	r3, [sp, #28]
 8004424:	61d6      	str	r6, [r2, #28]
 8004426:	2000      	movs	r0, #0
 8004428:	f8c2 a010 	str.w	sl, [r2, #16]
 800442c:	6193      	str	r3, [r2, #24]
 800442e:	b009      	add	sp, #36	; 0x24
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	20000000 	.word	0x20000000
 8004438:	000f000a 	.word	0x000f000a
 800443c:	00060003 	.word	0x00060003
 8004440:	00150019 	.word	0x00150019
 8004444:	00190015 	.word	0x00190015
 8004448:	00030006 	.word	0x00030006
 800444c:	000a000f 	.word	0x000a000f

08004450 <D64_GENERIC>:
 8004450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004454:	b089      	sub	sp, #36	; 0x24
 8004456:	6913      	ldr	r3, [r2, #16]
 8004458:	6895      	ldr	r5, [r2, #8]
 800445a:	9303      	str	r3, [sp, #12]
 800445c:	9501      	str	r5, [sp, #4]
 800445e:	6953      	ldr	r3, [r2, #20]
 8004460:	68d5      	ldr	r5, [r2, #12]
 8004462:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004464:	9304      	str	r3, [sp, #16]
 8004466:	9500      	str	r5, [sp, #0]
 8004468:	6993      	ldr	r3, [r2, #24]
 800446a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800446c:	9307      	str	r3, [sp, #28]
 800446e:	9505      	str	r5, [sp, #20]
 8004470:	69d3      	ldr	r3, [r2, #28]
 8004472:	9106      	str	r1, [sp, #24]
 8004474:	2c00      	cmp	r4, #0
 8004476:	f000 80d9 	beq.w	800462c <D64_GENERIC+0x1dc>
 800447a:	6a11      	ldr	r1, [r2, #32]
 800447c:	9102      	str	r1, [sp, #8]
 800447e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800466c <D64_GENERIC+0x21c>
 8004482:	f04f 0c00 	mov.w	ip, #0
 8004486:	4681      	mov	r9, r0
 8004488:	e0c1      	b.n	800460e <D64_GENERIC+0x1be>
 800448a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800448e:	4274      	negs	r4, r6
 8004490:	eb09 0708 	add.w	r7, r9, r8
 8004494:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8004498:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800449c:	5d38      	ldrb	r0, [r7, r4]
 800449e:	5d29      	ldrb	r1, [r5, r4]
 80044a0:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80044a4:	f819 a008 	ldrb.w	sl, [r9, r8]
 80044a8:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80044ac:	f899 7000 	ldrb.w	r7, [r9]
 80044b0:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80044b4:	4425      	add	r5, r4
 80044b6:	0409      	lsls	r1, r1, #16
 80044b8:	0400      	lsls	r0, r0, #16
 80044ba:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80044be:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80044c2:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80044c6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80044ca:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80044ce:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80044d2:	4459      	add	r1, fp
 80044d4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80044d8:	4438      	add	r0, r7
 80044da:	b2c5      	uxtb	r5, r0
 80044dc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80044e0:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80044e4:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80044e8:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80044ec:	0e00      	lsrs	r0, r0, #24
 80044ee:	eb03 0806 	add.w	r8, r3, r6
 80044f2:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80044f6:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80044fa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80044fe:	b2c8      	uxtb	r0, r1
 8004500:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004504:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004508:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800450c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8004510:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004514:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004518:	0e09      	lsrs	r1, r1, #24
 800451a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800451e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8004522:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8004526:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800452a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800452e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8004532:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8004536:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800453a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800453e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004542:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8004546:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800454a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800454e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004552:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8004556:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800455a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800455e:	0a8b      	lsrs	r3, r1, #10
 8004560:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004564:	4939      	ldr	r1, [pc, #228]	; (800464c <D64_GENERIC+0x1fc>)
 8004566:	9c00      	ldr	r4, [sp, #0]
 8004568:	fb28 4101 	smlad	r1, r8, r1, r4
 800456c:	4c38      	ldr	r4, [pc, #224]	; (8004650 <D64_GENERIC+0x200>)
 800456e:	fb27 1104 	smlad	r1, r7, r4, r1
 8004572:	4c38      	ldr	r4, [pc, #224]	; (8004654 <D64_GENERIC+0x204>)
 8004574:	fb20 1104 	smlad	r1, r0, r4, r1
 8004578:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800457c:	fb2a 1106 	smlad	r1, sl, r6, r1
 8004580:	4c35      	ldr	r4, [pc, #212]	; (8004658 <D64_GENERIC+0x208>)
 8004582:	9d01      	ldr	r5, [sp, #4]
 8004584:	fb28 5404 	smlad	r4, r8, r4, r5
 8004588:	4d33      	ldr	r5, [pc, #204]	; (8004658 <D64_GENERIC+0x208>)
 800458a:	fb2a 4415 	smladx	r4, sl, r5, r4
 800458e:	4d33      	ldr	r5, [pc, #204]	; (800465c <D64_GENERIC+0x20c>)
 8004590:	fb27 4405 	smlad	r4, r7, r5, r4
 8004594:	fb20 4415 	smladx	r4, r0, r5, r4
 8004598:	2501      	movs	r5, #1
 800459a:	9400      	str	r4, [sp, #0]
 800459c:	fb28 f805 	smuad	r8, r8, r5
 80045a0:	4c2f      	ldr	r4, [pc, #188]	; (8004660 <D64_GENERIC+0x210>)
 80045a2:	fb27 8704 	smlad	r7, r7, r4, r8
 80045a6:	4c2f      	ldr	r4, [pc, #188]	; (8004664 <D64_GENERIC+0x214>)
 80045a8:	fb20 7004 	smlad	r0, r0, r4, r7
 80045ac:	4c2e      	ldr	r4, [pc, #184]	; (8004668 <D64_GENERIC+0x218>)
 80045ae:	fb2a 0004 	smlad	r0, sl, r4, r0
 80045b2:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80045b6:	9902      	ldr	r1, [sp, #8]
 80045b8:	9001      	str	r0, [sp, #4]
 80045ba:	b189      	cbz	r1, 80045e0 <D64_GENERIC+0x190>
 80045bc:	9803      	ldr	r0, [sp, #12]
 80045be:	9c04      	ldr	r4, [sp, #16]
 80045c0:	9604      	str	r6, [sp, #16]
 80045c2:	4430      	add	r0, r6
 80045c4:	1b00      	subs	r0, r0, r4
 80045c6:	17c5      	asrs	r5, r0, #31
 80045c8:	460f      	mov	r7, r1
 80045ca:	fba0 0101 	umull	r0, r1, r0, r1
 80045ce:	fb07 1105 	mla	r1, r7, r5, r1
 80045d2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80045d6:	f141 0100 	adc.w	r1, r1, #0
 80045da:	0049      	lsls	r1, r1, #1
 80045dc:	9103      	str	r1, [sp, #12]
 80045de:	460e      	mov	r6, r1
 80045e0:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 80045e2:	9905      	ldr	r1, [sp, #20]
 80045e4:	9806      	ldr	r0, [sp, #24]
 80045e6:	02b6      	lsls	r6, r6, #10
 80045e8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80045ec:	f04f 0800 	mov.w	r8, #0
 80045f0:	fb0c f404 	mul.w	r4, ip, r4
 80045f4:	fbc1 7806 	smlal	r7, r8, r1, r6
 80045f8:	4641      	mov	r1, r8
 80045fa:	1089      	asrs	r1, r1, #2
 80045fc:	f301 010f 	ssat	r1, #16, r1
 8004600:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8004604:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8004606:	f10c 0c01 	add.w	ip, ip, #1
 800460a:	4561      	cmp	r1, ip
 800460c:	dd0e      	ble.n	800462c <D64_GENERIC+0x1dc>
 800460e:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8004610:	2e01      	cmp	r6, #1
 8004612:	f47f af3a 	bne.w	800448a <D64_GENERIC+0x3a>
 8004616:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8004618:	06b4      	lsls	r4, r6, #26
 800461a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800461e:	f109 0908 	add.w	r9, r9, #8
 8004622:	f57f af5a 	bpl.w	80044da <D64_GENERIC+0x8a>
 8004626:	ba40      	rev16	r0, r0
 8004628:	ba49      	rev16	r1, r1
 800462a:	e756      	b.n	80044da <D64_GENERIC+0x8a>
 800462c:	61d3      	str	r3, [r2, #28]
 800462e:	9b03      	ldr	r3, [sp, #12]
 8004630:	9901      	ldr	r1, [sp, #4]
 8004632:	6113      	str	r3, [r2, #16]
 8004634:	9b04      	ldr	r3, [sp, #16]
 8004636:	6091      	str	r1, [r2, #8]
 8004638:	6153      	str	r3, [r2, #20]
 800463a:	9900      	ldr	r1, [sp, #0]
 800463c:	9b07      	ldr	r3, [sp, #28]
 800463e:	60d1      	str	r1, [r2, #12]
 8004640:	2000      	movs	r0, #0
 8004642:	6193      	str	r3, [r2, #24]
 8004644:	b009      	add	sp, #36	; 0x24
 8004646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464a:	bf00      	nop
 800464c:	001c0015 	.word	0x001c0015
 8004650:	000f000a 	.word	0x000f000a
 8004654:	00060003 	.word	0x00060003
 8004658:	0024002a 	.word	0x0024002a
 800465c:	002e0030 	.word	0x002e0030
 8004660:	00030006 	.word	0x00030006
 8004664:	000a000f 	.word	0x000a000f
 8004668:	0015001c 	.word	0x0015001c
 800466c:	20000000 	.word	0x20000000

08004670 <D80_GENERIC>:
 8004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	b08b      	sub	sp, #44	; 0x2c
 8004676:	6914      	ldr	r4, [r2, #16]
 8004678:	9404      	str	r4, [sp, #16]
 800467a:	6954      	ldr	r4, [r2, #20]
 800467c:	9405      	str	r4, [sp, #20]
 800467e:	6994      	ldr	r4, [r2, #24]
 8004680:	9409      	str	r4, [sp, #36]	; 0x24
 8004682:	6894      	ldr	r4, [r2, #8]
 8004684:	9402      	str	r4, [sp, #8]
 8004686:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004688:	68d4      	ldr	r4, [r2, #12]
 800468a:	9401      	str	r4, [sp, #4]
 800468c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800468e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8004692:	9406      	str	r4, [sp, #24]
 8004694:	9107      	str	r1, [sp, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 810f 	beq.w	80048ba <D80_GENERIC+0x24a>
 800469c:	6a13      	ldr	r3, [r2, #32]
 800469e:	9308      	str	r3, [sp, #32]
 80046a0:	2300      	movs	r3, #0
 80046a2:	9200      	str	r2, [sp, #0]
 80046a4:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800490c <D80_GENERIC+0x29c>
 80046a8:	f8cd b00c 	str.w	fp, [sp, #12]
 80046ac:	461a      	mov	r2, r3
 80046ae:	e0ed      	b.n	800488c <D80_GENERIC+0x21c>
 80046b0:	fa5f fc8c 	uxtb.w	ip, ip
 80046b4:	fa0f f48c 	sxth.w	r4, ip
 80046b8:	0066      	lsls	r6, r4, #1
 80046ba:	eb06 0804 	add.w	r8, r6, r4
 80046be:	f1cc 0500 	rsb	r5, ip, #0
 80046c2:	eb00 0108 	add.w	r1, r0, r8
 80046c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80046ca:	194b      	adds	r3, r1, r5
 80046cc:	5d49      	ldrb	r1, [r1, r5]
 80046ce:	f810 a008 	ldrb.w	sl, [r0, r8]
 80046d2:	f813 b004 	ldrb.w	fp, [r3, r4]
 80046d6:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80046da:	f890 8000 	ldrb.w	r8, [r0]
 80046de:	eb03 0e04 	add.w	lr, r3, r4
 80046e2:	eb0e 0705 	add.w	r7, lr, r5
 80046e6:	0409      	lsls	r1, r1, #16
 80046e8:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80046ec:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80046f0:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80046f4:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80046f8:	eb0a 0004 	add.w	r0, sl, r4
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	f81a a004 	ldrb.w	sl, [sl, r4]
 8004702:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8004706:	5d44      	ldrb	r4, [r0, r5]
 8004708:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800470c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004710:	4428      	add	r0, r5
 8004712:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004716:	4441      	add	r1, r8
 8004718:	4430      	add	r0, r6
 800471a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800471e:	441f      	add	r7, r3
 8004720:	b2cd      	uxtb	r5, r1
 8004722:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004726:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800472a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004734:	0e09      	lsrs	r1, r1, #24
 8004736:	4433      	add	r3, r6
 8004738:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800473c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8004740:	b2fd      	uxtb	r5, r7
 8004742:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8004746:	469b      	mov	fp, r3
 8004748:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800474c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8004750:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8004754:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8004758:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800475c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8004760:	0e3b      	lsrs	r3, r7, #24
 8004762:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8004766:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800476a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800476e:	fa5f fe84 	uxtb.w	lr, r4
 8004772:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8004776:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800477a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800477e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8004782:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8004786:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800478a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800478e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8004792:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800479a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800479e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80047a2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80047a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80047aa:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80047ae:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80047b2:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80047b6:	0aa3      	lsrs	r3, r4, #10
 80047b8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80047bc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80047c0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80047c4:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 80047c8:	9303      	str	r3, [sp, #12]
 80047ca:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80047ce:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 80047d2:	4b42      	ldr	r3, [pc, #264]	; (80048dc <D80_GENERIC+0x26c>)
 80047d4:	9901      	ldr	r1, [sp, #4]
 80047d6:	fb2b 1303 	smlad	r3, fp, r3, r1
 80047da:	4941      	ldr	r1, [pc, #260]	; (80048e0 <D80_GENERIC+0x270>)
 80047dc:	fb28 3301 	smlad	r3, r8, r1, r3
 80047e0:	4940      	ldr	r1, [pc, #256]	; (80048e4 <D80_GENERIC+0x274>)
 80047e2:	fb2c 3301 	smlad	r3, ip, r1, r3
 80047e6:	4940      	ldr	r1, [pc, #256]	; (80048e8 <D80_GENERIC+0x278>)
 80047e8:	fb27 3301 	smlad	r3, r7, r1, r3
 80047ec:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80047f0:	fb2e 3301 	smlad	r3, lr, r1, r3
 80047f4:	493d      	ldr	r1, [pc, #244]	; (80048ec <D80_GENERIC+0x27c>)
 80047f6:	9c02      	ldr	r4, [sp, #8]
 80047f8:	fb2b 4401 	smlad	r4, fp, r1, r4
 80047fc:	493c      	ldr	r1, [pc, #240]	; (80048f0 <D80_GENERIC+0x280>)
 80047fe:	fb28 4401 	smlad	r4, r8, r1, r4
 8004802:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8004806:	fb2c 4101 	smlad	r1, ip, r1, r4
 800480a:	4c3a      	ldr	r4, [pc, #232]	; (80048f4 <D80_GENERIC+0x284>)
 800480c:	fb27 1104 	smlad	r1, r7, r4, r1
 8004810:	4c39      	ldr	r4, [pc, #228]	; (80048f8 <D80_GENERIC+0x288>)
 8004812:	fb2e 1104 	smlad	r1, lr, r4, r1
 8004816:	9101      	str	r1, [sp, #4]
 8004818:	2101      	movs	r1, #1
 800481a:	fb2b fb01 	smuad	fp, fp, r1
 800481e:	4937      	ldr	r1, [pc, #220]	; (80048fc <D80_GENERIC+0x28c>)
 8004820:	fb28 b801 	smlad	r8, r8, r1, fp
 8004824:	4d36      	ldr	r5, [pc, #216]	; (8004900 <D80_GENERIC+0x290>)
 8004826:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800482a:	4d36      	ldr	r5, [pc, #216]	; (8004904 <D80_GENERIC+0x294>)
 800482c:	fb27 c705 	smlad	r7, r7, r5, ip
 8004830:	4d35      	ldr	r5, [pc, #212]	; (8004908 <D80_GENERIC+0x298>)
 8004832:	fb2e 7105 	smlad	r1, lr, r5, r7
 8004836:	9102      	str	r1, [sp, #8]
 8004838:	9908      	ldr	r1, [sp, #32]
 800483a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800483e:	b181      	cbz	r1, 8004862 <D80_GENERIC+0x1f2>
 8004840:	9c04      	ldr	r4, [sp, #16]
 8004842:	9d05      	ldr	r5, [sp, #20]
 8004844:	9305      	str	r3, [sp, #20]
 8004846:	441c      	add	r4, r3
 8004848:	1b64      	subs	r4, r4, r5
 800484a:	17e7      	asrs	r7, r4, #31
 800484c:	fba4 4501 	umull	r4, r5, r4, r1
 8004850:	fb01 5507 	mla	r5, r1, r7, r5
 8004854:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8004858:	f145 0500 	adc.w	r5, r5, #0
 800485c:	0069      	lsls	r1, r5, #1
 800485e:	9104      	str	r1, [sp, #16]
 8004860:	460b      	mov	r3, r1
 8004862:	9e00      	ldr	r6, [sp, #0]
 8004864:	9f06      	ldr	r7, [sp, #24]
 8004866:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8004868:	025b      	lsls	r3, r3, #9
 800486a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800486e:	2500      	movs	r5, #0
 8004870:	fb02 f101 	mul.w	r1, r2, r1
 8004874:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004878:	9c07      	ldr	r4, [sp, #28]
 800487a:	10ab      	asrs	r3, r5, #2
 800487c:	f303 030f 	ssat	r3, #16, r3
 8004880:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004884:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8004886:	3201      	adds	r2, #1
 8004888:	4293      	cmp	r3, r2
 800488a:	dd13      	ble.n	80048b4 <D80_GENERIC+0x244>
 800488c:	9b00      	ldr	r3, [sp, #0]
 800488e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8004892:	f1bc 0f01 	cmp.w	ip, #1
 8004896:	f47f af0b 	bne.w	80046b0 <D80_GENERIC+0x40>
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	6884      	ldr	r4, [r0, #8]
 800489e:	069b      	lsls	r3, r3, #26
 80048a0:	e890 0082 	ldmia.w	r0, {r1, r7}
 80048a4:	f100 000a 	add.w	r0, r0, #10
 80048a8:	f57f af3a 	bpl.w	8004720 <D80_GENERIC+0xb0>
 80048ac:	ba49      	rev16	r1, r1
 80048ae:	ba7f      	rev16	r7, r7
 80048b0:	ba64      	rev16	r4, r4
 80048b2:	e735      	b.n	8004720 <D80_GENERIC+0xb0>
 80048b4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80048b8:	4632      	mov	r2, r6
 80048ba:	9b02      	ldr	r3, [sp, #8]
 80048bc:	6093      	str	r3, [r2, #8]
 80048be:	9b01      	ldr	r3, [sp, #4]
 80048c0:	60d3      	str	r3, [r2, #12]
 80048c2:	9b04      	ldr	r3, [sp, #16]
 80048c4:	6113      	str	r3, [r2, #16]
 80048c6:	9b05      	ldr	r3, [sp, #20]
 80048c8:	6153      	str	r3, [r2, #20]
 80048ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048cc:	f8c2 b01c 	str.w	fp, [r2, #28]
 80048d0:	2000      	movs	r0, #0
 80048d2:	6193      	str	r3, [r2, #24]
 80048d4:	b00b      	add	sp, #44	; 0x2c
 80048d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048da:	bf00      	nop
 80048dc:	002d0024 	.word	0x002d0024
 80048e0:	001c0015 	.word	0x001c0015
 80048e4:	000f000a 	.word	0x000f000a
 80048e8:	00060003 	.word	0x00060003
 80048ec:	0037003f 	.word	0x0037003f
 80048f0:	00450049 	.word	0x00450049
 80048f4:	00490045 	.word	0x00490045
 80048f8:	003f0037 	.word	0x003f0037
 80048fc:	00030006 	.word	0x00030006
 8004900:	000a000f 	.word	0x000a000f
 8004904:	0015001c 	.word	0x0015001c
 8004908:	0024002d 	.word	0x0024002d
 800490c:	20000000 	.word	0x20000000

08004910 <D128_GENERIC>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	b093      	sub	sp, #76	; 0x4c
 8004916:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004918:	9005      	str	r0, [sp, #20]
 800491a:	4610      	mov	r0, r2
 800491c:	9201      	str	r2, [sp, #4]
 800491e:	6912      	ldr	r2, [r2, #16]
 8004920:	920c      	str	r2, [sp, #48]	; 0x30
 8004922:	4602      	mov	r2, r0
 8004924:	6940      	ldr	r0, [r0, #20]
 8004926:	900d      	str	r0, [sp, #52]	; 0x34
 8004928:	4610      	mov	r0, r2
 800492a:	4614      	mov	r4, r2
 800492c:	6992      	ldr	r2, [r2, #24]
 800492e:	9211      	str	r2, [sp, #68]	; 0x44
 8004930:	69c2      	ldr	r2, [r0, #28]
 8004932:	9202      	str	r2, [sp, #8]
 8004934:	68e2      	ldr	r2, [r4, #12]
 8004936:	6880      	ldr	r0, [r0, #8]
 8004938:	9203      	str	r2, [sp, #12]
 800493a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800493c:	9004      	str	r0, [sp, #16]
 800493e:	920e      	str	r2, [sp, #56]	; 0x38
 8004940:	910f      	str	r1, [sp, #60]	; 0x3c
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 819b 	beq.w	8004c7e <D128_GENERIC+0x36e>
 8004948:	6a23      	ldr	r3, [r4, #32]
 800494a:	9310      	str	r3, [sp, #64]	; 0x40
 800494c:	2300      	movs	r3, #0
 800494e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8004cf8 <D128_GENERIC+0x3e8>
 8004952:	9306      	str	r3, [sp, #24]
 8004954:	e17a      	b.n	8004c4c <D128_GENERIC+0x33c>
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	9d05      	ldr	r5, [sp, #20]
 800495a:	b214      	sxth	r4, r2
 800495c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8004960:	4250      	negs	r0, r2
 8004962:	eb05 010a 	add.w	r1, r5, sl
 8004966:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800496a:	eb01 0800 	add.w	r8, r1, r0
 800496e:	eb0b 0c04 	add.w	ip, fp, r4
 8004972:	eb08 070c 	add.w	r7, r8, ip
 8004976:	183b      	adds	r3, r7, r0
 8004978:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800497c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8004980:	eb0e 0604 	add.w	r6, lr, r4
 8004984:	9307      	str	r3, [sp, #28]
 8004986:	1833      	adds	r3, r6, r0
 8004988:	9305      	str	r3, [sp, #20]
 800498a:	462b      	mov	r3, r5
 800498c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8004990:	f8cd a020 	str.w	sl, [sp, #32]
 8004994:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8004998:	f813 c002 	ldrb.w	ip, [r3, r2]
 800499c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 80049a0:	5c3a      	ldrb	r2, [r7, r0]
 80049a2:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 80049a6:	781f      	ldrb	r7, [r3, #0]
 80049a8:	9b07      	ldr	r3, [sp, #28]
 80049aa:	9d05      	ldr	r5, [sp, #20]
 80049ac:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80049b0:	5c09      	ldrb	r1, [r1, r0]
 80049b2:	9709      	str	r7, [sp, #36]	; 0x24
 80049b4:	9307      	str	r3, [sp, #28]
 80049b6:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 80049ba:	5c33      	ldrb	r3, [r6, r0]
 80049bc:	0412      	lsls	r2, r2, #16
 80049be:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 80049c2:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 80049c6:	9d08      	ldr	r5, [sp, #32]
 80049c8:	eb06 0a04 	add.w	sl, r6, r4
 80049cc:	0409      	lsls	r1, r1, #16
 80049ce:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 80049d2:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80049d6:	5d36      	ldrb	r6, [r6, r4]
 80049d8:	9c05      	ldr	r4, [sp, #20]
 80049da:	042d      	lsls	r5, r5, #16
 80049dc:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 80049e0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80049e4:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 80049e8:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 80049ec:	eb0a 0c00 	add.w	ip, sl, r0
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80049f6:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80049fa:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 80049fe:	9d07      	ldr	r5, [sp, #28]
 8004a00:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004a04:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8004a08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004a0a:	4458      	add	r0, fp
 8004a0c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8004a10:	9005      	str	r0, [sp, #20]
 8004a12:	4439      	add	r1, r7
 8004a14:	442a      	add	r2, r5
 8004a16:	44b2      	add	sl, r6
 8004a18:	1918      	adds	r0, r3, r4
 8004a1a:	b2cb      	uxtb	r3, r1
 8004a1c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8004a20:	9e02      	ldr	r6, [sp, #8]
 8004a22:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004a26:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8004a2a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8004a2e:	441e      	add	r6, r3
 8004a30:	0e09      	lsrs	r1, r1, #24
 8004a32:	4633      	mov	r3, r6
 8004a34:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004a38:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8004a3c:	b2d4      	uxtb	r4, r2
 8004a3e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004a42:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004a46:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8004a4a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004a4e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004a52:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004a56:	0e12      	lsrs	r2, r2, #24
 8004a58:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004a5c:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8004a60:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004a64:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8004a68:	9702      	str	r7, [sp, #8]
 8004a6a:	b2c2      	uxtb	r2, r0
 8004a6c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8004a70:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8004a74:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8004a78:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004a7c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004a80:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004a84:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004a88:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004a8c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8004a90:	0e00      	lsrs	r0, r0, #24
 8004a92:	fa5f f68a 	uxtb.w	r6, sl
 8004a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8004aa0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8004aa4:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004aa8:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004aac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004ab0:	950a      	str	r5, [sp, #40]	; 0x28
 8004ab2:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004ab6:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004aba:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004abe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004ac2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8004ac6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004aca:	920b      	str	r2, [sp, #44]	; 0x2c
 8004acc:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ad2:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004ad6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004ada:	9307      	str	r3, [sp, #28]
 8004adc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004ae0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004ae4:	9b02      	ldr	r3, [sp, #8]
 8004ae6:	f8cd c008 	str.w	ip, [sp, #8]
 8004aea:	4694      	mov	ip, r2
 8004aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aee:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8004af2:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8004af6:	9a02      	ldr	r2, [sp, #8]
 8004af8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004afc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004b00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b06:	f8cd a020 	str.w	sl, [sp, #32]
 8004b0a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004b0e:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004b12:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004b16:	9b07      	ldr	r3, [sp, #28]
 8004b18:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004b1c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8004b20:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8004b24:	9a08      	ldr	r2, [sp, #32]
 8004b26:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004b32:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004b36:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8004b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004b3e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004b42:	0a96      	lsrs	r6, r2, #10
 8004b44:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004b48:	9602      	str	r6, [sp, #8]
 8004b4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004b4e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004b52:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8004b56:	4e53      	ldr	r6, [pc, #332]	; (8004ca4 <D128_GENERIC+0x394>)
 8004b58:	9f03      	ldr	r7, [sp, #12]
 8004b5a:	fb2c 7606 	smlad	r6, ip, r6, r7
 8004b5e:	4f52      	ldr	r7, [pc, #328]	; (8004ca8 <D128_GENERIC+0x398>)
 8004b60:	fb2a 6607 	smlad	r6, sl, r7, r6
 8004b64:	4f51      	ldr	r7, [pc, #324]	; (8004cac <D128_GENERIC+0x39c>)
 8004b66:	fb21 6607 	smlad	r6, r1, r7, r6
 8004b6a:	4f51      	ldr	r7, [pc, #324]	; (8004cb0 <D128_GENERIC+0x3a0>)
 8004b6c:	fb24 6607 	smlad	r6, r4, r7, r6
 8004b70:	4f50      	ldr	r7, [pc, #320]	; (8004cb4 <D128_GENERIC+0x3a4>)
 8004b72:	fb28 6607 	smlad	r6, r8, r7, r6
 8004b76:	4f50      	ldr	r7, [pc, #320]	; (8004cb8 <D128_GENERIC+0x3a8>)
 8004b78:	fb20 6607 	smlad	r6, r0, r7, r6
 8004b7c:	4f4f      	ldr	r7, [pc, #316]	; (8004cbc <D128_GENERIC+0x3ac>)
 8004b7e:	fb23 6607 	smlad	r6, r3, r7, r6
 8004b82:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8004b86:	fb25 6607 	smlad	r6, r5, r7, r6
 8004b8a:	4f4d      	ldr	r7, [pc, #308]	; (8004cc0 <D128_GENERIC+0x3b0>)
 8004b8c:	9a04      	ldr	r2, [sp, #16]
 8004b8e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8004b92:	4a4c      	ldr	r2, [pc, #304]	; (8004cc4 <D128_GENERIC+0x3b4>)
 8004b94:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004b98:	4f4b      	ldr	r7, [pc, #300]	; (8004cc8 <D128_GENERIC+0x3b8>)
 8004b9a:	fb21 ee07 	smlad	lr, r1, r7, lr
 8004b9e:	4f4b      	ldr	r7, [pc, #300]	; (8004ccc <D128_GENERIC+0x3bc>)
 8004ba0:	fb24 ee07 	smlad	lr, r4, r7, lr
 8004ba4:	4f4a      	ldr	r7, [pc, #296]	; (8004cd0 <D128_GENERIC+0x3c0>)
 8004ba6:	fb28 ee07 	smlad	lr, r8, r7, lr
 8004baa:	4f4a      	ldr	r7, [pc, #296]	; (8004cd4 <D128_GENERIC+0x3c4>)
 8004bac:	fb20 ee07 	smlad	lr, r0, r7, lr
 8004bb0:	4f49      	ldr	r7, [pc, #292]	; (8004cd8 <D128_GENERIC+0x3c8>)
 8004bb2:	fb23 e707 	smlad	r7, r3, r7, lr
 8004bb6:	f8df e144 	ldr.w	lr, [pc, #324]	; 8004cfc <D128_GENERIC+0x3ec>
 8004bba:	fb25 720e 	smlad	r2, r5, lr, r7
 8004bbe:	f04f 0b01 	mov.w	fp, #1
 8004bc2:	9203      	str	r2, [sp, #12]
 8004bc4:	fb2c fb0b 	smuad	fp, ip, fp
 8004bc8:	4f44      	ldr	r7, [pc, #272]	; (8004cdc <D128_GENERIC+0x3cc>)
 8004bca:	fb2a ba07 	smlad	sl, sl, r7, fp
 8004bce:	4f44      	ldr	r7, [pc, #272]	; (8004ce0 <D128_GENERIC+0x3d0>)
 8004bd0:	fb21 aa07 	smlad	sl, r1, r7, sl
 8004bd4:	4f43      	ldr	r7, [pc, #268]	; (8004ce4 <D128_GENERIC+0x3d4>)
 8004bd6:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004bda:	4f43      	ldr	r7, [pc, #268]	; (8004ce8 <D128_GENERIC+0x3d8>)
 8004bdc:	fb28 a707 	smlad	r7, r8, r7, sl
 8004be0:	4a42      	ldr	r2, [pc, #264]	; (8004cec <D128_GENERIC+0x3dc>)
 8004be2:	fb20 7702 	smlad	r7, r0, r2, r7
 8004be6:	4a42      	ldr	r2, [pc, #264]	; (8004cf0 <D128_GENERIC+0x3e0>)
 8004be8:	fb23 7702 	smlad	r7, r3, r2, r7
 8004bec:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <D128_GENERIC+0x3e4>)
 8004bee:	fb25 7303 	smlad	r3, r5, r3, r7
 8004bf2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004bf4:	9304      	str	r3, [sp, #16]
 8004bf6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8004bfa:	b185      	cbz	r5, 8004c1e <D128_GENERIC+0x30e>
 8004bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c00:	960d      	str	r6, [sp, #52]	; 0x34
 8004c02:	4432      	add	r2, r6
 8004c04:	1a52      	subs	r2, r2, r1
 8004c06:	17d1      	asrs	r1, r2, #31
 8004c08:	fba2 2305 	umull	r2, r3, r2, r5
 8004c0c:	fb05 3301 	mla	r3, r5, r1, r3
 8004c10:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004c14:	f143 0300 	adc.w	r3, r3, #0
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8004c1c:	461e      	mov	r6, r3
 8004c1e:	9801      	ldr	r0, [sp, #4]
 8004c20:	9c06      	ldr	r4, [sp, #24]
 8004c22:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8004c24:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004c26:	01f6      	lsls	r6, r6, #7
 8004c28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	fbc5 2306 	smlal	r2, r3, r5, r6
 8004c32:	fb04 f101 	mul.w	r1, r4, r1
 8004c36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c38:	109b      	asrs	r3, r3, #2
 8004c3a:	f303 030f 	ssat	r3, #16, r3
 8004c3e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8004c42:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004c44:	1c62      	adds	r2, r4, #1
 8004c46:	4293      	cmp	r3, r2
 8004c48:	9206      	str	r2, [sp, #24]
 8004c4a:	dd18      	ble.n	8004c7e <D128_GENERIC+0x36e>
 8004c4c:	9b01      	ldr	r3, [sp, #4]
 8004c4e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8004c50:	2a01      	cmp	r2, #1
 8004c52:	f47f ae80 	bne.w	8004956 <D128_GENERIC+0x46>
 8004c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c58:	9d05      	ldr	r5, [sp, #20]
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	6829      	ldr	r1, [r5, #0]
 8004c5e:	686a      	ldr	r2, [r5, #4]
 8004c60:	68a8      	ldr	r0, [r5, #8]
 8004c62:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8004c66:	f105 0410 	add.w	r4, r5, #16
 8004c6a:	d506      	bpl.n	8004c7a <D128_GENERIC+0x36a>
 8004c6c:	ba49      	rev16	r1, r1
 8004c6e:	ba52      	rev16	r2, r2
 8004c70:	ba40      	rev16	r0, r0
 8004c72:	fa9a fa9a 	rev16.w	sl, sl
 8004c76:	9405      	str	r4, [sp, #20]
 8004c78:	e6cf      	b.n	8004a1a <D128_GENERIC+0x10a>
 8004c7a:	9405      	str	r4, [sp, #20]
 8004c7c:	e6cd      	b.n	8004a1a <D128_GENERIC+0x10a>
 8004c7e:	9a01      	ldr	r2, [sp, #4]
 8004c80:	9904      	ldr	r1, [sp, #16]
 8004c82:	6091      	str	r1, [r2, #8]
 8004c84:	9903      	ldr	r1, [sp, #12]
 8004c86:	60d1      	str	r1, [r2, #12]
 8004c88:	9b02      	ldr	r3, [sp, #8]
 8004c8a:	61d3      	str	r3, [r2, #28]
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	4613      	mov	r3, r2
 8004c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c92:	610a      	str	r2, [r1, #16]
 8004c94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c96:	6159      	str	r1, [r3, #20]
 8004c98:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004c9a:	6199      	str	r1, [r3, #24]
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	b013      	add	sp, #76	; 0x4c
 8004ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca4:	00780069 	.word	0x00780069
 8004ca8:	005b004e 	.word	0x005b004e
 8004cac:	00420037 	.word	0x00420037
 8004cb0:	002d0024 	.word	0x002d0024
 8004cb4:	001c0015 	.word	0x001c0015
 8004cb8:	000f000a 	.word	0x000f000a
 8004cbc:	00060003 	.word	0x00060003
 8004cc0:	00880096 	.word	0x00880096
 8004cc4:	00a200ac 	.word	0x00a200ac
 8004cc8:	00b400ba 	.word	0x00b400ba
 8004ccc:	00be00c0 	.word	0x00be00c0
 8004cd0:	00c000be 	.word	0x00c000be
 8004cd4:	00ba00b4 	.word	0x00ba00b4
 8004cd8:	00ac00a2 	.word	0x00ac00a2
 8004cdc:	00030006 	.word	0x00030006
 8004ce0:	000a000f 	.word	0x000a000f
 8004ce4:	0015001c 	.word	0x0015001c
 8004ce8:	0024002d 	.word	0x0024002d
 8004cec:	00370042 	.word	0x00370042
 8004cf0:	004e005b 	.word	0x004e005b
 8004cf4:	00690078 	.word	0x00690078
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	00960088 	.word	0x00960088

08004d00 <D16_1CH_HTONS_VOL_HP>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	4691      	mov	r9, r2
 8004d06:	b083      	sub	sp, #12
 8004d08:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004d0a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004d0e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4680      	mov	r8, r0
 8004d16:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8004d1a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8004d1e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004d22:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8004d26:	9401      	str	r4, [sp, #4]
 8004d28:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8004d2c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8004d30:	2a00      	cmp	r2, #0
 8004d32:	d04e      	beq.n	8004dd2 <D16_1CH_HTONS_VOL_HP+0xd2>
 8004d34:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8004de0 <D16_1CH_HTONS_VOL_HP+0xe0>
 8004d38:	1e8c      	subs	r4, r1, #2
 8004d3a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8004d3e:	f858 2b02 	ldr.w	r2, [r8], #2
 8004d42:	ba52      	rev16	r2, r2
 8004d44:	b2d6      	uxtb	r6, r2
 8004d46:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004d4a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8004d4e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8004d52:	4413      	add	r3, r2
 8004d54:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8004d58:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8004d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004d64:	0a93      	lsrs	r3, r2, #10
 8004d66:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8004d68:	fb21 5202 	smlad	r2, r1, r2, r5
 8004d6c:	4d1b      	ldr	r5, [pc, #108]	; (8004ddc <D16_1CH_HTONS_VOL_HP+0xdc>)
 8004d6e:	fb21 f505 	smuad	r5, r1, r5
 8004d72:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8004d76:	4410      	add	r0, r2
 8004d78:	1bc0      	subs	r0, r0, r7
 8004d7a:	17c7      	asrs	r7, r0, #31
 8004d7c:	fba0 010e 	umull	r0, r1, r0, lr
 8004d80:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004d84:	fb0e 1107 	mla	r1, lr, r7, r1
 8004d88:	f141 0100 	adc.w	r1, r1, #0
 8004d8c:	0448      	lsls	r0, r1, #17
 8004d8e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004d92:	2700      	movs	r7, #0
 8004d94:	fbc0 670a 	smlal	r6, r7, r0, sl
 8004d98:	45d8      	cmp	r8, fp
 8004d9a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8004d9e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8004da2:	4617      	mov	r7, r2
 8004da4:	f301 010f 	ssat	r1, #16, r1
 8004da8:	f824 1f02 	strh.w	r1, [r4, #2]!
 8004dac:	d1c7      	bne.n	8004d3e <D16_1CH_HTONS_VOL_HP+0x3e>
 8004dae:	9901      	ldr	r1, [sp, #4]
 8004db0:	f8c9 301c 	str.w	r3, [r9, #28]
 8004db4:	9b00      	ldr	r3, [sp, #0]
 8004db6:	f8c9 0010 	str.w	r0, [r9, #16]
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f8c9 5008 	str.w	r5, [r9, #8]
 8004dc0:	f8c9 100c 	str.w	r1, [r9, #12]
 8004dc4:	f8c9 2014 	str.w	r2, [r9, #20]
 8004dc8:	f8c9 3018 	str.w	r3, [r9, #24]
 8004dcc:	b003      	add	sp, #12
 8004dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd2:	463a      	mov	r2, r7
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	e7eb      	b.n	8004db0 <D16_1CH_HTONS_VOL_HP+0xb0>
 8004dd8:	00030001 	.word	0x00030001
 8004ddc:	00010003 	.word	0x00010003
 8004de0:	20000000 	.word	0x20000000

08004de4 <D24_1CH_HTONS_VOL_HP>:
 8004de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	b089      	sub	sp, #36	; 0x24
 8004dea:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004dec:	6996      	ldr	r6, [r2, #24]
 8004dee:	9304      	str	r3, [sp, #16]
 8004df0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8004df2:	9207      	str	r2, [sp, #28]
 8004df4:	6915      	ldr	r5, [r2, #16]
 8004df6:	6954      	ldr	r4, [r2, #20]
 8004df8:	9606      	str	r6, [sp, #24]
 8004dfa:	6893      	ldr	r3, [r2, #8]
 8004dfc:	69d6      	ldr	r6, [r2, #28]
 8004dfe:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8004e02:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8004e06:	9a04      	ldr	r2, [sp, #16]
 8004e08:	9705      	str	r7, [sp, #20]
 8004e0a:	2a00      	cmp	r2, #0
 8004e0c:	d07e      	beq.n	8004f0c <D24_1CH_HTONS_VOL_HP+0x128>
 8004e0e:	f1a1 0b02 	sub.w	fp, r1, #2
 8004e12:	2700      	movs	r7, #0
 8004e14:	46a8      	mov	r8, r5
 8004e16:	f8cd b004 	str.w	fp, [sp, #4]
 8004e1a:	4655      	mov	r5, sl
 8004e1c:	46e3      	mov	fp, ip
 8004e1e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8004f18 <D24_1CH_HTONS_VOL_HP+0x134>
 8004e22:	46ba      	mov	sl, r7
 8004e24:	469c      	mov	ip, r3
 8004e26:	e055      	b.n	8004ed4 <D24_1CH_HTONS_VOL_HP+0xf0>
 8004e28:	7802      	ldrb	r2, [r0, #0]
 8004e2a:	78c3      	ldrb	r3, [r0, #3]
 8004e2c:	7841      	ldrb	r1, [r0, #1]
 8004e2e:	0212      	lsls	r2, r2, #8
 8004e30:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8004e34:	440b      	add	r3, r1
 8004e36:	3002      	adds	r0, #2
 8004e38:	b2d9      	uxtb	r1, r3
 8004e3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e3e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8004e42:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8004e46:	0c1b      	lsrs	r3, r3, #16
 8004e48:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004e4c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004e50:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8004e54:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8004e58:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8004e5c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004e60:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8004e64:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8004e66:	fb23 b102 	smlad	r1, r3, r2, fp
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <D24_1CH_HTONS_VOL_HP+0x130>)
 8004e6c:	fb23 cb02 	smlad	fp, r3, r2, ip
 8004e70:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8004e74:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8004e78:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	fb23 f702 	smuad	r7, r3, r2
 8004e82:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8004e86:	eb01 0208 	add.w	r2, r1, r8
 8004e8a:	1b12      	subs	r2, r2, r4
 8004e8c:	17d4      	asrs	r4, r2, #31
 8004e8e:	fba2 2305 	umull	r2, r3, r2, r5
 8004e92:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004e96:	fb05 3304 	mla	r3, r5, r4, r3
 8004e9a:	f143 0300 	adc.w	r3, r3, #0
 8004e9e:	9c05      	ldr	r4, [sp, #20]
 8004ea0:	03da      	lsls	r2, r3, #15
 8004ea2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004ea6:	f04f 0900 	mov.w	r9, #0
 8004eaa:	fbc4 8902 	smlal	r8, r9, r4, r2
 8004eae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004eb2:	9a01      	ldr	r2, [sp, #4]
 8004eb4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	109b      	asrs	r3, r3, #2
 8004ebc:	f303 030f 	ssat	r3, #16, r3
 8004ec0:	f822 3f02 	strh.w	r3, [r2, #2]!
 8004ec4:	9b04      	ldr	r3, [sp, #16]
 8004ec6:	9201      	str	r2, [sp, #4]
 8004ec8:	f10a 0a01 	add.w	sl, sl, #1
 8004ecc:	459a      	cmp	sl, r3
 8004ece:	44bc      	add	ip, r7
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	d00b      	beq.n	8004eec <D24_1CH_HTONS_VOL_HP+0x108>
 8004ed4:	f01a 0f01 	tst.w	sl, #1
 8004ed8:	d0a6      	beq.n	8004e28 <D24_1CH_HTONS_VOL_HP+0x44>
 8004eda:	78c2      	ldrb	r2, [r0, #3]
 8004edc:	7883      	ldrb	r3, [r0, #2]
 8004ede:	f810 1b04 	ldrb.w	r1, [r0], #4
 8004ee2:	0212      	lsls	r2, r2, #8
 8004ee4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8004ee8:	440b      	add	r3, r1
 8004eea:	e7a5      	b.n	8004e38 <D24_1CH_HTONS_VOL_HP+0x54>
 8004eec:	4663      	mov	r3, ip
 8004eee:	4645      	mov	r5, r8
 8004ef0:	46dc      	mov	ip, fp
 8004ef2:	9807      	ldr	r0, [sp, #28]
 8004ef4:	6141      	str	r1, [r0, #20]
 8004ef6:	9906      	ldr	r1, [sp, #24]
 8004ef8:	6083      	str	r3, [r0, #8]
 8004efa:	f8c0 c00c 	str.w	ip, [r0, #12]
 8004efe:	61c6      	str	r6, [r0, #28]
 8004f00:	6105      	str	r5, [r0, #16]
 8004f02:	6181      	str	r1, [r0, #24]
 8004f04:	2000      	movs	r0, #0
 8004f06:	b009      	add	sp, #36	; 0x24
 8004f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	e7f0      	b.n	8004ef2 <D24_1CH_HTONS_VOL_HP+0x10e>
 8004f10:	00030001 	.word	0x00030001
 8004f14:	00060007 	.word	0x00060007
 8004f18:	20000000 	.word	0x20000000

08004f1c <D32_1CH_HTONS_VOL_HP>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	4692      	mov	sl, r2
 8004f22:	b087      	sub	sp, #28
 8004f24:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004f26:	f8da 3018 	ldr.w	r3, [sl, #24]
 8004f2a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8004f2e:	9304      	str	r3, [sp, #16]
 8004f30:	f8da 4010 	ldr.w	r4, [sl, #16]
 8004f34:	f8da 8014 	ldr.w	r8, [sl, #20]
 8004f38:	f8da 601c 	ldr.w	r6, [sl, #28]
 8004f3c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004f40:	f8da e00c 	ldr.w	lr, [sl, #12]
 8004f44:	9501      	str	r5, [sp, #4]
 8004f46:	f8da c020 	ldr.w	ip, [sl, #32]
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	d07b      	beq.n	8005046 <D32_1CH_HTONS_VOL_HP+0x12a>
 8004f4e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004f52:	4f3e      	ldr	r7, [pc, #248]	; (800504c <D32_1CH_HTONS_VOL_HP+0x130>)
 8004f54:	f8cd c00c 	str.w	ip, [sp, #12]
 8004f58:	9202      	str	r2, [sp, #8]
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	46a1      	mov	r9, r4
 8004f5e:	4684      	mov	ip, r0
 8004f60:	f8cd a014 	str.w	sl, [sp, #20]
 8004f64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004f68:	ba49      	rev16	r1, r1
 8004f6a:	b2c8      	uxtb	r0, r1
 8004f6c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004f70:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8004f74:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8004f78:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004f7c:	0e09      	lsrs	r1, r1, #24
 8004f7e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004f82:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8004f86:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8004f8a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8004f8e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8004f92:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8004f96:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004f9a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8004f9e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004fa2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004fa6:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8004faa:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8004fae:	4a28      	ldr	r2, [pc, #160]	; (8005050 <D32_1CH_HTONS_VOL_HP+0x134>)
 8004fb0:	fb20 e202 	smlad	r2, r0, r2, lr
 8004fb4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004fb8:	fb2a 2101 	smlad	r1, sl, r1, r2
 8004fbc:	4a25      	ldr	r2, [pc, #148]	; (8005054 <D32_1CH_HTONS_VOL_HP+0x138>)
 8004fbe:	fb20 3302 	smlad	r3, r0, r2, r3
 8004fc2:	4a25      	ldr	r2, [pc, #148]	; (8005058 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8004fc4:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8004fc8:	2301      	movs	r3, #1
 8004fca:	fb20 f003 	smuad	r0, r0, r3
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <D32_1CH_HTONS_VOL_HP+0x140>)
 8004fd0:	fb2a 0303 	smlad	r3, sl, r3, r0
 8004fd4:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8004fd8:	9c03      	ldr	r4, [sp, #12]
 8004fda:	eb02 0009 	add.w	r0, r2, r9
 8004fde:	eba0 0008 	sub.w	r0, r0, r8
 8004fe2:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8004fe6:	fba0 0104 	umull	r0, r1, r0, r4
 8004fea:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004fee:	fb04 110b 	mla	r1, r4, fp, r1
 8004ff2:	f141 0100 	adc.w	r1, r1, #0
 8004ff6:	9c01      	ldr	r4, [sp, #4]
 8004ff8:	0388      	lsls	r0, r1, #14
 8004ffa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004ffe:	f04f 0900 	mov.w	r9, #0
 8005002:	fbc0 8904 	smlal	r8, r9, r0, r4
 8005006:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800500a:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800500e:	f300 000f 	ssat	r0, #16, r0
 8005012:	9902      	ldr	r1, [sp, #8]
 8005014:	f825 0b02 	strh.w	r0, [r5], #2
 8005018:	428d      	cmp	r5, r1
 800501a:	4690      	mov	r8, r2
 800501c:	d1a2      	bne.n	8004f64 <D32_1CH_HTONS_VOL_HP+0x48>
 800501e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005022:	464c      	mov	r4, r9
 8005024:	f8ca 3008 	str.w	r3, [sl, #8]
 8005028:	9b04      	ldr	r3, [sp, #16]
 800502a:	f8ca e00c 	str.w	lr, [sl, #12]
 800502e:	2000      	movs	r0, #0
 8005030:	f8ca 601c 	str.w	r6, [sl, #28]
 8005034:	f8ca 4010 	str.w	r4, [sl, #16]
 8005038:	f8ca 2014 	str.w	r2, [sl, #20]
 800503c:	f8ca 3018 	str.w	r3, [sl, #24]
 8005040:	b007      	add	sp, #28
 8005042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005046:	4642      	mov	r2, r8
 8005048:	e7ec      	b.n	8005024 <D32_1CH_HTONS_VOL_HP+0x108>
 800504a:	bf00      	nop
 800504c:	20000000 	.word	0x20000000
 8005050:	00060003 	.word	0x00060003
 8005054:	000a000c 	.word	0x000a000c
 8005058:	000c000a 	.word	0x000c000a
 800505c:	00030006 	.word	0x00030006

08005060 <D48_1CH_HTONS_VOL_HP>:
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	4613      	mov	r3, r2
 8005066:	461c      	mov	r4, r3
 8005068:	b087      	sub	sp, #28
 800506a:	4625      	mov	r5, r4
 800506c:	4626      	mov	r6, r4
 800506e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8005070:	9205      	str	r2, [sp, #20]
 8005072:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005074:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005078:	9501      	str	r5, [sp, #4]
 800507a:	4680      	mov	r8, r0
 800507c:	6a35      	ldr	r5, [r6, #32]
 800507e:	6918      	ldr	r0, [r3, #16]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	9304      	str	r3, [sp, #16]
 8005084:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8005088:	68a3      	ldr	r3, [r4, #8]
 800508a:	9502      	str	r5, [sp, #8]
 800508c:	68e4      	ldr	r4, [r4, #12]
 800508e:	2a00      	cmp	r2, #0
 8005090:	f000 808c 	beq.w	80051ac <D48_1CH_HTONS_VOL_HP+0x14c>
 8005094:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005098:	4d45      	ldr	r5, [pc, #276]	; (80051b0 <D48_1CH_HTONS_VOL_HP+0x150>)
 800509a:	9203      	str	r2, [sp, #12]
 800509c:	468c      	mov	ip, r1
 800509e:	e898 0044 	ldmia.w	r8, {r2, r6}
 80050a2:	f108 0806 	add.w	r8, r8, #6
 80050a6:	ba52      	rev16	r2, r2
 80050a8:	ba76      	rev16	r6, r6
 80050aa:	b2d7      	uxtb	r7, r2
 80050ac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80050b0:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80050b4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80050b8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80050bc:	0e12      	lsrs	r2, r2, #24
 80050be:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80050c2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80050c6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80050ca:	fa5f fb86 	uxtb.w	fp, r6
 80050ce:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80050d2:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80050d6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 80050da:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80050de:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80050e2:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80050e6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80050ea:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80050ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80050f2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80050f6:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 80050fa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80050fe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005102:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005106:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800510a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800510e:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8005112:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <D48_1CH_HTONS_VOL_HP+0x154>)
 8005114:	fb2a 4202 	smlad	r2, sl, r2, r4
 8005118:	4927      	ldr	r1, [pc, #156]	; (80051b8 <D48_1CH_HTONS_VOL_HP+0x158>)
 800511a:	fb27 2201 	smlad	r2, r7, r1, r2
 800511e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005122:	fb26 2201 	smlad	r2, r6, r1, r2
 8005126:	4925      	ldr	r1, [pc, #148]	; (80051bc <D48_1CH_HTONS_VOL_HP+0x15c>)
 8005128:	fb2a 3401 	smlad	r4, sl, r1, r3
 800512c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8005130:	fb27 4403 	smlad	r4, r7, r3, r4
 8005134:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8005136:	fb26 4403 	smlad	r4, r6, r3, r4
 800513a:	2101      	movs	r1, #1
 800513c:	fb2a fa01 	smuad	sl, sl, r1
 8005140:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <D48_1CH_HTONS_VOL_HP+0x164>)
 8005142:	fb27 a703 	smlad	r7, r7, r3, sl
 8005146:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <D48_1CH_HTONS_VOL_HP+0x168>)
 8005148:	fb26 7303 	smlad	r3, r6, r3, r7
 800514c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8005150:	9e02      	ldr	r6, [sp, #8]
 8005152:	9f01      	ldr	r7, [sp, #4]
 8005154:	4410      	add	r0, r2
 8005156:	eba0 0009 	sub.w	r0, r0, r9
 800515a:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800515e:	fba0 0106 	umull	r0, r1, r0, r6
 8005162:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005166:	fb06 110a 	mla	r1, r6, sl, r1
 800516a:	f141 0100 	adc.w	r1, r1, #0
 800516e:	0308      	lsls	r0, r1, #12
 8005170:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8005174:	f04f 0a00 	mov.w	sl, #0
 8005178:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800517c:	4657      	mov	r7, sl
 800517e:	10b8      	asrs	r0, r7, #2
 8005180:	f300 000f 	ssat	r0, #16, r0
 8005184:	f82c 0b02 	strh.w	r0, [ip], #2
 8005188:	0048      	lsls	r0, r1, #1
 800518a:	9903      	ldr	r1, [sp, #12]
 800518c:	458c      	cmp	ip, r1
 800518e:	4691      	mov	r9, r2
 8005190:	d185      	bne.n	800509e <D48_1CH_HTONS_VOL_HP+0x3e>
 8005192:	9d05      	ldr	r5, [sp, #20]
 8005194:	616a      	str	r2, [r5, #20]
 8005196:	9a04      	ldr	r2, [sp, #16]
 8005198:	6128      	str	r0, [r5, #16]
 800519a:	2000      	movs	r0, #0
 800519c:	60ab      	str	r3, [r5, #8]
 800519e:	60ec      	str	r4, [r5, #12]
 80051a0:	f8c5 e01c 	str.w	lr, [r5, #28]
 80051a4:	61aa      	str	r2, [r5, #24]
 80051a6:	b007      	add	sp, #28
 80051a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ac:	464a      	mov	r2, r9
 80051ae:	e7f0      	b.n	8005192 <D48_1CH_HTONS_VOL_HP+0x132>
 80051b0:	20000000 	.word	0x20000000
 80051b4:	000f000a 	.word	0x000f000a
 80051b8:	00060003 	.word	0x00060003
 80051bc:	00150019 	.word	0x00150019
 80051c0:	00190015 	.word	0x00190015
 80051c4:	00030006 	.word	0x00030006
 80051c8:	000a000f 	.word	0x000a000f

080051cc <D64_1CH_HTONS_VOL_HP>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	b089      	sub	sp, #36	; 0x24
 80051d2:	4614      	mov	r4, r2
 80051d4:	9207      	str	r2, [sp, #28]
 80051d6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80051d8:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80051dc:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80051e0:	6992      	ldr	r2, [r2, #24]
 80051e2:	9206      	str	r2, [sp, #24]
 80051e4:	68e2      	ldr	r2, [r4, #12]
 80051e6:	9201      	str	r2, [sp, #4]
 80051e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051ea:	9203      	str	r2, [sp, #12]
 80051ec:	6a22      	ldr	r2, [r4, #32]
 80051ee:	69e5      	ldr	r5, [r4, #28]
 80051f0:	68a6      	ldr	r6, [r4, #8]
 80051f2:	9204      	str	r2, [sp, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80b0 	beq.w	800535a <D64_1CH_HTONS_VOL_HP+0x18e>
 80051fa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80051fe:	4f58      	ldr	r7, [pc, #352]	; (8005360 <D64_1CH_HTONS_VOL_HP+0x194>)
 8005200:	9305      	str	r3, [sp, #20]
 8005202:	9102      	str	r1, [sp, #8]
 8005204:	f850 2b08 	ldr.w	r2, [r0], #8
 8005208:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800520c:	ba52      	rev16	r2, r2
 800520e:	fa93 f993 	rev16.w	r9, r3
 8005212:	b2d4      	uxtb	r4, r2
 8005214:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005218:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800521c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005220:	9901      	ldr	r1, [sp, #4]
 8005222:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005226:	0e12      	lsrs	r2, r2, #24
 8005228:	44ab      	add	fp, r5
 800522a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800522e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8005232:	fa5f f289 	uxtb.w	r2, r9
 8005236:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800523a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800523e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8005242:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005246:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800524a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800524e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8005252:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8005256:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800525a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800525e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8005262:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8005266:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800526a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800526e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005272:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005276:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800527a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800527e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005282:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8005286:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800528a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800528e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005292:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8005296:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800529a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800529e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80052a2:	4b30      	ldr	r3, [pc, #192]	; (8005364 <D64_1CH_HTONS_VOL_HP+0x198>)
 80052a4:	fb2b 1303 	smlad	r3, fp, r3, r1
 80052a8:	492f      	ldr	r1, [pc, #188]	; (8005368 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80052aa:	fb24 3301 	smlad	r3, r4, r1, r3
 80052ae:	492f      	ldr	r1, [pc, #188]	; (800536c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80052b0:	fb22 3301 	smlad	r3, r2, r1, r3
 80052b4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80052b8:	fb2e 390a 	smlad	r9, lr, sl, r3
 80052bc:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80052be:	fb2b 6603 	smlad	r6, fp, r3, r6
 80052c2:	fb2e 6613 	smladx	r6, lr, r3, r6
 80052c6:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80052c8:	fb24 6603 	smlad	r6, r4, r3, r6
 80052cc:	fb22 6313 	smladx	r3, r2, r3, r6
 80052d0:	f04f 0a01 	mov.w	sl, #1
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	fb2b fb0a 	smuad	fp, fp, sl
 80052da:	4b27      	ldr	r3, [pc, #156]	; (8005378 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80052dc:	fb24 ba03 	smlad	sl, r4, r3, fp
 80052e0:	4b26      	ldr	r3, [pc, #152]	; (800537c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80052e2:	fb22 a203 	smlad	r2, r2, r3, sl
 80052e6:	4b26      	ldr	r3, [pc, #152]	; (8005380 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80052e8:	fb2e 2603 	smlad	r6, lr, r3, r2
 80052ec:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 80052f0:	eb0a 020c 	add.w	r2, sl, ip
 80052f4:	9c04      	ldr	r4, [sp, #16]
 80052f6:	9903      	ldr	r1, [sp, #12]
 80052f8:	eba2 0208 	sub.w	r2, r2, r8
 80052fc:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8005300:	fba2 2304 	umull	r2, r3, r2, r4
 8005304:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005308:	fb04 3309 	mla	r3, r4, r9, r3
 800530c:	f143 0300 	adc.w	r3, r3, #0
 8005310:	02da      	lsls	r2, r3, #11
 8005312:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005316:	f04f 0900 	mov.w	r9, #0
 800531a:	fbc1 8902 	smlal	r8, r9, r1, r2
 800531e:	9902      	ldr	r1, [sp, #8]
 8005320:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8005324:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005328:	f302 020f 	ssat	r2, #16, r2
 800532c:	9b05      	ldr	r3, [sp, #20]
 800532e:	f821 2b02 	strh.w	r2, [r1], #2
 8005332:	4299      	cmp	r1, r3
 8005334:	9102      	str	r1, [sp, #8]
 8005336:	46d0      	mov	r8, sl
 8005338:	f47f af64 	bne.w	8005204 <D64_1CH_HTONS_VOL_HP+0x38>
 800533c:	9a07      	ldr	r2, [sp, #28]
 800533e:	9901      	ldr	r1, [sp, #4]
 8005340:	60d1      	str	r1, [r2, #12]
 8005342:	9906      	ldr	r1, [sp, #24]
 8005344:	6096      	str	r6, [r2, #8]
 8005346:	2000      	movs	r0, #0
 8005348:	61d5      	str	r5, [r2, #28]
 800534a:	f8c2 c010 	str.w	ip, [r2, #16]
 800534e:	f8c2 a014 	str.w	sl, [r2, #20]
 8005352:	6191      	str	r1, [r2, #24]
 8005354:	b009      	add	sp, #36	; 0x24
 8005356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535a:	46c2      	mov	sl, r8
 800535c:	4622      	mov	r2, r4
 800535e:	e7ee      	b.n	800533e <D64_1CH_HTONS_VOL_HP+0x172>
 8005360:	20000000 	.word	0x20000000
 8005364:	001c0015 	.word	0x001c0015
 8005368:	000f000a 	.word	0x000f000a
 800536c:	00060003 	.word	0x00060003
 8005370:	0024002a 	.word	0x0024002a
 8005374:	002e0030 	.word	0x002e0030
 8005378:	00030006 	.word	0x00030006
 800537c:	000a000f 	.word	0x000a000f
 8005380:	0015001c 	.word	0x0015001c

08005384 <D80_1CH_HTONS_VOL_HP>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	4613      	mov	r3, r2
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	4686      	mov	lr, r0
 800538e:	6918      	ldr	r0, [r3, #16]
 8005390:	9000      	str	r0, [sp, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	461c      	mov	r4, r3
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	9302      	str	r3, [sp, #8]
 800539a:	6983      	ldr	r3, [r0, #24]
 800539c:	9306      	str	r3, [sp, #24]
 800539e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80053a2:	69c3      	ldr	r3, [r0, #28]
 80053a4:	68c0      	ldr	r0, [r0, #12]
 80053a6:	9207      	str	r2, [sp, #28]
 80053a8:	9001      	str	r0, [sp, #4]
 80053aa:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80053ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80053ae:	9003      	str	r0, [sp, #12]
 80053b0:	6a20      	ldr	r0, [r4, #32]
 80053b2:	9004      	str	r0, [sp, #16]
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	f000 80d2 	beq.w	800555e <D80_1CH_HTONS_VOL_HP+0x1da>
 80053ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80053be:	4869      	ldr	r0, [pc, #420]	; (8005564 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80053c0:	9205      	str	r2, [sp, #20]
 80053c2:	461c      	mov	r4, r3
 80053c4:	f8de 5000 	ldr.w	r5, [lr]
 80053c8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80053cc:	f8de 3008 	ldr.w	r3, [lr, #8]
 80053d0:	f10e 0e0a 	add.w	lr, lr, #10
 80053d4:	ba6d      	rev16	r5, r5
 80053d6:	ba52      	rev16	r2, r2
 80053d8:	fa93 fb93 	rev16.w	fp, r3
 80053dc:	b2ee      	uxtb	r6, r5
 80053de:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80053e2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80053e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80053ea:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80053ee:	eb04 0a07 	add.w	sl, r4, r7
 80053f2:	0e2d      	lsrs	r5, r5, #24
 80053f4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80053f8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80053fc:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8005400:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8005404:	b2d5      	uxtb	r5, r2
 8005406:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800540a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800540e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8005412:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005416:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800541a:	0e12      	lsrs	r2, r2, #24
 800541c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8005420:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8005424:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005428:	fa5f f48b 	uxtb.w	r4, fp
 800542c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005430:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8005434:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005438:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800543c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8005440:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005444:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8005448:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800544c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005450:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005454:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005458:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800545c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005460:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005464:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8005468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800546c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8005470:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005474:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005478:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800547c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8005480:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8005484:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005488:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800548c:	4d36      	ldr	r5, [pc, #216]	; (8005568 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800548e:	9f01      	ldr	r7, [sp, #4]
 8005490:	fb23 7505 	smlad	r5, r3, r5, r7
 8005494:	4f35      	ldr	r7, [pc, #212]	; (800556c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8005496:	fb29 5507 	smlad	r5, r9, r7, r5
 800549a:	4f35      	ldr	r7, [pc, #212]	; (8005570 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800549c:	fb28 5507 	smlad	r5, r8, r7, r5
 80054a0:	4f34      	ldr	r7, [pc, #208]	; (8005574 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80054a2:	fb22 5507 	smlad	r5, r2, r7, r5
 80054a6:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80054aa:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80054ae:	4d32      	ldr	r5, [pc, #200]	; (8005578 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80054b0:	fb23 cc05 	smlad	ip, r3, r5, ip
 80054b4:	4d31      	ldr	r5, [pc, #196]	; (800557c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80054b6:	fb29 cc05 	smlad	ip, r9, r5, ip
 80054ba:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 80054be:	fb28 c505 	smlad	r5, r8, r5, ip
 80054c2:	4f2f      	ldr	r7, [pc, #188]	; (8005580 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80054c4:	fb22 5507 	smlad	r5, r2, r7, r5
 80054c8:	4f2e      	ldr	r7, [pc, #184]	; (8005584 <D80_1CH_HTONS_VOL_HP+0x200>)
 80054ca:	fb26 5507 	smlad	r5, r6, r7, r5
 80054ce:	f04f 0a01 	mov.w	sl, #1
 80054d2:	9501      	str	r5, [sp, #4]
 80054d4:	fb23 fa0a 	smuad	sl, r3, sl
 80054d8:	4b2b      	ldr	r3, [pc, #172]	; (8005588 <D80_1CH_HTONS_VOL_HP+0x204>)
 80054da:	fb29 a903 	smlad	r9, r9, r3, sl
 80054de:	4d2b      	ldr	r5, [pc, #172]	; (800558c <D80_1CH_HTONS_VOL_HP+0x208>)
 80054e0:	fb28 9805 	smlad	r8, r8, r5, r9
 80054e4:	4d2a      	ldr	r5, [pc, #168]	; (8005590 <D80_1CH_HTONS_VOL_HP+0x20c>)
 80054e6:	fb22 8205 	smlad	r2, r2, r5, r8
 80054ea:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <D80_1CH_HTONS_VOL_HP+0x210>)
 80054ec:	fb26 2c03 	smlad	ip, r6, r3, r2
 80054f0:	9b00      	ldr	r3, [sp, #0]
 80054f2:	9d04      	ldr	r5, [sp, #16]
 80054f4:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 80054f8:	4453      	add	r3, sl
 80054fa:	461a      	mov	r2, r3
 80054fc:	9b02      	ldr	r3, [sp, #8]
 80054fe:	f8cd a008 	str.w	sl, [sp, #8]
 8005502:	1ad2      	subs	r2, r2, r3
 8005504:	17d7      	asrs	r7, r2, #31
 8005506:	fba2 2305 	umull	r2, r3, r2, r5
 800550a:	fb05 3307 	mla	r3, r5, r7, r3
 800550e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005512:	f143 0300 	adc.w	r3, r3, #0
 8005516:	9d03      	ldr	r5, [sp, #12]
 8005518:	029a      	lsls	r2, r3, #10
 800551a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800551e:	2700      	movs	r7, #0
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	fbc5 6702 	smlal	r6, r7, r5, r2
 8005526:	10ba      	asrs	r2, r7, #2
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	f302 020f 	ssat	r2, #16, r2
 800552e:	9b05      	ldr	r3, [sp, #20]
 8005530:	f821 2b02 	strh.w	r2, [r1], #2
 8005534:	4299      	cmp	r1, r3
 8005536:	f47f af45 	bne.w	80053c4 <D80_1CH_HTONS_VOL_HP+0x40>
 800553a:	4623      	mov	r3, r4
 800553c:	9907      	ldr	r1, [sp, #28]
 800553e:	9801      	ldr	r0, [sp, #4]
 8005540:	60c8      	str	r0, [r1, #12]
 8005542:	9a00      	ldr	r2, [sp, #0]
 8005544:	f8c1 c008 	str.w	ip, [r1, #8]
 8005548:	4608      	mov	r0, r1
 800554a:	61cb      	str	r3, [r1, #28]
 800554c:	610a      	str	r2, [r1, #16]
 800554e:	f8c1 a014 	str.w	sl, [r1, #20]
 8005552:	9906      	ldr	r1, [sp, #24]
 8005554:	6181      	str	r1, [r0, #24]
 8005556:	2000      	movs	r0, #0
 8005558:	b009      	add	sp, #36	; 0x24
 800555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005562:	e7eb      	b.n	800553c <D80_1CH_HTONS_VOL_HP+0x1b8>
 8005564:	20000000 	.word	0x20000000
 8005568:	002d0024 	.word	0x002d0024
 800556c:	001c0015 	.word	0x001c0015
 8005570:	000f000a 	.word	0x000f000a
 8005574:	00060003 	.word	0x00060003
 8005578:	0037003f 	.word	0x0037003f
 800557c:	00450049 	.word	0x00450049
 8005580:	00490045 	.word	0x00490045
 8005584:	003f0037 	.word	0x003f0037
 8005588:	00030006 	.word	0x00030006
 800558c:	000a000f 	.word	0x000a000f
 8005590:	0015001c 	.word	0x0015001c
 8005594:	0024002d 	.word	0x0024002d

08005598 <D128_1CH_HTONS_VOL_HP>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	b093      	sub	sp, #76	; 0x4c
 800559e:	4614      	mov	r4, r2
 80055a0:	9211      	str	r2, [sp, #68]	; 0x44
 80055a2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80055a4:	6912      	ldr	r2, [r2, #16]
 80055a6:	9203      	str	r2, [sp, #12]
 80055a8:	4622      	mov	r2, r4
 80055aa:	4615      	mov	r5, r2
 80055ac:	6964      	ldr	r4, [r4, #20]
 80055ae:	9406      	str	r4, [sp, #24]
 80055b0:	4614      	mov	r4, r2
 80055b2:	6992      	ldr	r2, [r2, #24]
 80055b4:	9210      	str	r2, [sp, #64]	; 0x40
 80055b6:	68ea      	ldr	r2, [r5, #12]
 80055b8:	9204      	str	r2, [sp, #16]
 80055ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80055bc:	69e6      	ldr	r6, [r4, #28]
 80055be:	920d      	str	r2, [sp, #52]	; 0x34
 80055c0:	68a4      	ldr	r4, [r4, #8]
 80055c2:	6a2a      	ldr	r2, [r5, #32]
 80055c4:	9405      	str	r4, [sp, #20]
 80055c6:	920e      	str	r2, [sp, #56]	; 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8145 	beq.w	8005858 <D128_1CH_HTONS_VOL_HP+0x2c0>
 80055ce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80055d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80055d4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80058b4 <D128_1CH_HTONS_VOL_HP+0x31c>
 80055d8:	9107      	str	r1, [sp, #28]
 80055da:	f100 0310 	add.w	r3, r0, #16
 80055de:	4699      	mov	r9, r3
 80055e0:	f1a9 0110 	sub.w	r1, r9, #16
 80055e4:	c90e      	ldmia	r1, {r1, r2, r3}
 80055e6:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80055ea:	ba49      	rev16	r1, r1
 80055ec:	ba52      	rev16	r2, r2
 80055ee:	ba5b      	rev16	r3, r3
 80055f0:	fa90 fa90 	rev16.w	sl, r0
 80055f4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80055f8:	b2cc      	uxtb	r4, r1
 80055fa:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80055fe:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8005602:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8005606:	0e09      	lsrs	r1, r1, #24
 8005608:	4426      	add	r6, r4
 800560a:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800560e:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8005612:	b2d0      	uxtb	r0, r2
 8005614:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8005618:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800561c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005620:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005624:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8005628:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800562c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8005630:	0e12      	lsrs	r2, r2, #24
 8005632:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005636:	9701      	str	r7, [sp, #4]
 8005638:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800563c:	4627      	mov	r7, r4
 800563e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8005642:	9702      	str	r7, [sp, #8]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800564a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800564e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8005652:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005656:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800565a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800565e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8005662:	0e1b      	lsrs	r3, r3, #24
 8005664:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8005668:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800566c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8005670:	fa5f f38a 	uxtb.w	r3, sl
 8005674:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005678:	960a      	str	r6, [sp, #40]	; 0x28
 800567a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800567e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8005682:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005686:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800568a:	950b      	str	r5, [sp, #44]	; 0x2c
 800568c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005690:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005694:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005698:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800569c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80056a0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80056a4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80056a8:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80056ac:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80056b0:	9308      	str	r3, [sp, #32]
 80056b2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80056b6:	9b01      	ldr	r3, [sp, #4]
 80056b8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80056bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80056c0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80056c4:	9b02      	ldr	r3, [sp, #8]
 80056c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	9b08      	ldr	r3, [sp, #32]
 80056ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d2:	9308      	str	r3, [sp, #32]
 80056d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80056da:	950c      	str	r5, [sp, #48]	; 0x30
 80056dc:	461d      	mov	r5, r3
 80056de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80056e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80056e8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80056ec:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	9b02      	ldr	r3, [sp, #8]
 80056f4:	9202      	str	r2, [sp, #8]
 80056f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056fa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80056fe:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005702:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005706:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800570a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800570e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005712:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8005716:	9b08      	ldr	r3, [sp, #32]
 8005718:	9f01      	ldr	r7, [sp, #4]
 800571a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800571e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005722:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005726:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800572a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800572e:	46be      	mov	lr, r7
 8005730:	0a96      	lsrs	r6, r2, #10
 8005732:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005736:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800573a:	4f49      	ldr	r7, [pc, #292]	; (8005860 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800573c:	9a04      	ldr	r2, [sp, #16]
 800573e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8005742:	4a48      	ldr	r2, [pc, #288]	; (8005864 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8005744:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005748:	4a47      	ldr	r2, [pc, #284]	; (8005868 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800574a:	fb21 ee02 	smlad	lr, r1, r2, lr
 800574e:	4a47      	ldr	r2, [pc, #284]	; (800586c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8005750:	fb24 ee02 	smlad	lr, r4, r2, lr
 8005754:	4a46      	ldr	r2, [pc, #280]	; (8005870 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8005756:	9f02      	ldr	r7, [sp, #8]
 8005758:	fb27 ee02 	smlad	lr, r7, r2, lr
 800575c:	4a45      	ldr	r2, [pc, #276]	; (8005874 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800575e:	fb20 ee02 	smlad	lr, r0, r2, lr
 8005762:	4a45      	ldr	r2, [pc, #276]	; (8005878 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8005764:	fb23 e702 	smlad	r7, r3, r2, lr
 8005768:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800576c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8005770:	9f01      	ldr	r7, [sp, #4]
 8005772:	4a42      	ldr	r2, [pc, #264]	; (800587c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8005774:	46bc      	mov	ip, r7
 8005776:	9f05      	ldr	r7, [sp, #20]
 8005778:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800577c:	4a40      	ldr	r2, [pc, #256]	; (8005880 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800577e:	fb2a cc02 	smlad	ip, sl, r2, ip
 8005782:	4f40      	ldr	r7, [pc, #256]	; (8005884 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8005784:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005788:	4f3f      	ldr	r7, [pc, #252]	; (8005888 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800578a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800578e:	4f3f      	ldr	r7, [pc, #252]	; (800588c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8005790:	9a02      	ldr	r2, [sp, #8]
 8005792:	fb22 cc07 	smlad	ip, r2, r7, ip
 8005796:	4f3e      	ldr	r7, [pc, #248]	; (8005890 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8005798:	fb20 cc07 	smlad	ip, r0, r7, ip
 800579c:	4f3d      	ldr	r7, [pc, #244]	; (8005894 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800579e:	fb23 c707 	smlad	r7, r3, r7, ip
 80057a2:	f8df c114 	ldr.w	ip, [pc, #276]	; 80058b8 <D128_1CH_HTONS_VOL_HP+0x320>
 80057a6:	fb25 720c 	smlad	r2, r5, ip, r7
 80057aa:	f04f 0b01 	mov.w	fp, #1
 80057ae:	9204      	str	r2, [sp, #16]
 80057b0:	9f01      	ldr	r7, [sp, #4]
 80057b2:	fb27 fb0b 	smuad	fp, r7, fp
 80057b6:	4f38      	ldr	r7, [pc, #224]	; (8005898 <D128_1CH_HTONS_VOL_HP+0x300>)
 80057b8:	fb2a ba07 	smlad	sl, sl, r7, fp
 80057bc:	4f37      	ldr	r7, [pc, #220]	; (800589c <D128_1CH_HTONS_VOL_HP+0x304>)
 80057be:	fb21 aa07 	smlad	sl, r1, r7, sl
 80057c2:	4f37      	ldr	r7, [pc, #220]	; (80058a0 <D128_1CH_HTONS_VOL_HP+0x308>)
 80057c4:	fb24 aa07 	smlad	sl, r4, r7, sl
 80057c8:	4f36      	ldr	r7, [pc, #216]	; (80058a4 <D128_1CH_HTONS_VOL_HP+0x30c>)
 80057ca:	9a02      	ldr	r2, [sp, #8]
 80057cc:	fb22 a707 	smlad	r7, r2, r7, sl
 80057d0:	4a35      	ldr	r2, [pc, #212]	; (80058a8 <D128_1CH_HTONS_VOL_HP+0x310>)
 80057d2:	fb20 7702 	smlad	r7, r0, r2, r7
 80057d6:	4a35      	ldr	r2, [pc, #212]	; (80058ac <D128_1CH_HTONS_VOL_HP+0x314>)
 80057d8:	fb23 7702 	smlad	r7, r3, r2, r7
 80057dc:	4b34      	ldr	r3, [pc, #208]	; (80058b0 <D128_1CH_HTONS_VOL_HP+0x318>)
 80057de:	fb25 7303 	smlad	r3, r5, r3, r7
 80057e2:	9305      	str	r3, [sp, #20]
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80057e8:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80057ec:	4473      	add	r3, lr
 80057ee:	461a      	mov	r2, r3
 80057f0:	9b06      	ldr	r3, [sp, #24]
 80057f2:	f8cd e018 	str.w	lr, [sp, #24]
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	17d1      	asrs	r1, r2, #31
 80057fa:	fba2 2304 	umull	r2, r3, r2, r4
 80057fe:	fb04 3301 	mla	r3, r4, r1, r3
 8005802:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005806:	f143 0300 	adc.w	r3, r3, #0
 800580a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800580c:	021a      	lsls	r2, r3, #8
 800580e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005812:	2100      	movs	r1, #0
 8005814:	fbc4 0102 	smlal	r0, r1, r4, r2
 8005818:	108a      	asrs	r2, r1, #2
 800581a:	9907      	ldr	r1, [sp, #28]
 800581c:	f302 020f 	ssat	r2, #16, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	f821 2b02 	strh.w	r2, [r1], #2
 8005826:	9303      	str	r3, [sp, #12]
 8005828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800582a:	9107      	str	r1, [sp, #28]
 800582c:	4299      	cmp	r1, r3
 800582e:	f109 0910 	add.w	r9, r9, #16
 8005832:	f47f aed5 	bne.w	80055e0 <D128_1CH_HTONS_VOL_HP+0x48>
 8005836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005838:	9905      	ldr	r1, [sp, #20]
 800583a:	6091      	str	r1, [r2, #8]
 800583c:	9904      	ldr	r1, [sp, #16]
 800583e:	60d1      	str	r1, [r2, #12]
 8005840:	4613      	mov	r3, r2
 8005842:	61d6      	str	r6, [r2, #28]
 8005844:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005846:	9a03      	ldr	r2, [sp, #12]
 8005848:	611a      	str	r2, [r3, #16]
 800584a:	2000      	movs	r0, #0
 800584c:	f8c3 e014 	str.w	lr, [r3, #20]
 8005850:	6199      	str	r1, [r3, #24]
 8005852:	b013      	add	sp, #76	; 0x4c
 8005854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005858:	f8dd e018 	ldr.w	lr, [sp, #24]
 800585c:	e7eb      	b.n	8005836 <D128_1CH_HTONS_VOL_HP+0x29e>
 800585e:	bf00      	nop
 8005860:	00780069 	.word	0x00780069
 8005864:	005b004e 	.word	0x005b004e
 8005868:	00420037 	.word	0x00420037
 800586c:	002d0024 	.word	0x002d0024
 8005870:	001c0015 	.word	0x001c0015
 8005874:	000f000a 	.word	0x000f000a
 8005878:	00060003 	.word	0x00060003
 800587c:	00880096 	.word	0x00880096
 8005880:	00a200ac 	.word	0x00a200ac
 8005884:	00b400ba 	.word	0x00b400ba
 8005888:	00be00c0 	.word	0x00be00c0
 800588c:	00c000be 	.word	0x00c000be
 8005890:	00ba00b4 	.word	0x00ba00b4
 8005894:	00ac00a2 	.word	0x00ac00a2
 8005898:	00030006 	.word	0x00030006
 800589c:	000a000f 	.word	0x000a000f
 80058a0:	0015001c 	.word	0x0015001c
 80058a4:	0024002d 	.word	0x0024002d
 80058a8:	00370042 	.word	0x00370042
 80058ac:	004e005b 	.word	0x004e005b
 80058b0:	00690078 	.word	0x00690078
 80058b4:	20000000 	.word	0x20000000
 80058b8:	00960088 	.word	0x00960088

080058bc <PDM_Filter_Init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	2240      	movs	r2, #64	; 0x40
 80058c0:	4604      	mov	r4, r0
 80058c2:	2100      	movs	r1, #0
 80058c4:	300c      	adds	r0, #12
 80058c6:	f000 f9f9 	bl	8005cbc <memset>
 80058ca:	493b      	ldr	r1, [pc, #236]	; (80059b8 <PDM_Filter_Init+0xfc>)
 80058cc:	483b      	ldr	r0, [pc, #236]	; (80059bc <PDM_Filter_Init+0x100>)
 80058ce:	f000 f98d 	bl	8005bec <CRC_Lock>
 80058d2:	8822      	ldrh	r2, [r4, #0]
 80058d4:	8963      	ldrh	r3, [r4, #10]
 80058d6:	4938      	ldr	r1, [pc, #224]	; (80059b8 <PDM_Filter_Init+0xfc>)
 80058d8:	8925      	ldrh	r5, [r4, #8]
 80058da:	86a3      	strh	r3, [r4, #52]	; 0x34
 80058dc:	2801      	cmp	r0, #1
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	bf18      	it	ne
 80058e4:	2100      	movne	r1, #0
 80058e6:	2a01      	cmp	r2, #1
 80058e8:	6461      	str	r1, [r4, #68]	; 0x44
 80058ea:	86e5      	strh	r5, [r4, #54]	; 0x36
 80058ec:	61a3      	str	r3, [r4, #24]
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	6163      	str	r3, [r4, #20]
 80058f2:	60e3      	str	r3, [r4, #12]
 80058f4:	6263      	str	r3, [r4, #36]	; 0x24
 80058f6:	61e3      	str	r3, [r4, #28]
 80058f8:	6223      	str	r3, [r4, #32]
 80058fa:	6423      	str	r3, [r4, #64]	; 0x40
 80058fc:	d918      	bls.n	8005930 <PDM_Filter_Init+0x74>
 80058fe:	2003      	movs	r0, #3
 8005900:	2302      	movs	r3, #2
 8005902:	8862      	ldrh	r2, [r4, #2]
 8005904:	2a01      	cmp	r2, #1
 8005906:	d91d      	bls.n	8005944 <PDM_Filter_Init+0x88>
 8005908:	2140      	movs	r1, #64	; 0x40
 800590a:	2300      	movs	r3, #0
 800590c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800590e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	bf04      	itt	eq
 8005916:	6421      	streq	r1, [r4, #64]	; 0x40
 8005918:	460b      	moveq	r3, r1
 800591a:	b11a      	cbz	r2, 8005924 <PDM_Filter_Init+0x68>
 800591c:	f043 0310 	orr.w	r3, r3, #16
 8005920:	6423      	str	r3, [r4, #64]	; 0x40
 8005922:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005924:	2200      	movs	r2, #0
 8005926:	8722      	strh	r2, [r4, #56]	; 0x38
 8005928:	b908      	cbnz	r0, 800592e <PDM_Filter_Init+0x72>
 800592a:	3380      	adds	r3, #128	; 0x80
 800592c:	6423      	str	r3, [r4, #64]	; 0x40
 800592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005930:	4d23      	ldr	r5, [pc, #140]	; (80059c0 <PDM_Filter_Init+0x104>)
 8005932:	d010      	beq.n	8005956 <PDM_Filter_Init+0x9a>
 8005934:	782a      	ldrb	r2, [r5, #0]
 8005936:	2a01      	cmp	r2, #1
 8005938:	d027      	beq.n	800598a <PDM_Filter_Init+0xce>
 800593a:	8862      	ldrh	r2, [r4, #2]
 800593c:	2a01      	cmp	r2, #1
 800593e:	f04f 0001 	mov.w	r0, #1
 8005942:	d8e1      	bhi.n	8005908 <PDM_Filter_Init+0x4c>
 8005944:	d001      	beq.n	800594a <PDM_Filter_Init+0x8e>
 8005946:	4618      	mov	r0, r3
 8005948:	e7de      	b.n	8005908 <PDM_Filter_Init+0x4c>
 800594a:	2220      	movs	r2, #32
 800594c:	4618      	mov	r0, r3
 800594e:	6422      	str	r2, [r4, #64]	; 0x40
 8005950:	4613      	mov	r3, r2
 8005952:	2160      	movs	r1, #96	; 0x60
 8005954:	e7da      	b.n	800590c <PDM_Filter_Init+0x50>
 8005956:	7829      	ldrb	r1, [r5, #0]
 8005958:	2900      	cmp	r1, #0
 800595a:	d1ee      	bne.n	800593a <PDM_Filter_Init+0x7e>
 800595c:	4919      	ldr	r1, [pc, #100]	; (80059c4 <PDM_Filter_Init+0x108>)
 800595e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80059cc <PDM_Filter_Init+0x110>
 8005962:	4f19      	ldr	r7, [pc, #100]	; (80059c8 <PDM_Filter_Init+0x10c>)
 8005964:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005968:	684a      	ldr	r2, [r1, #4]
 800596a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800596e:	ea02 0007 	and.w	r0, r2, r7
 8005972:	4303      	orrs	r3, r0
 8005974:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005978:	4413      	add	r3, r2
 800597a:	f841 3f04 	str.w	r3, [r1, #4]!
 800597e:	428e      	cmp	r6, r1
 8005980:	d1f2      	bne.n	8005968 <PDM_Filter_Init+0xac>
 8005982:	2001      	movs	r0, #1
 8005984:	7028      	strb	r0, [r5, #0]
 8005986:	2300      	movs	r3, #0
 8005988:	e7bb      	b.n	8005902 <PDM_Filter_Init+0x46>
 800598a:	490e      	ldr	r1, [pc, #56]	; (80059c4 <PDM_Filter_Init+0x108>)
 800598c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80059cc <PDM_Filter_Init+0x110>
 8005990:	4f0d      	ldr	r7, [pc, #52]	; (80059c8 <PDM_Filter_Init+0x10c>)
 8005992:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005996:	684a      	ldr	r2, [r1, #4]
 8005998:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800599c:	ea02 0007 	and.w	r0, r2, r7
 80059a0:	4303      	orrs	r3, r0
 80059a2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80059a6:	4413      	add	r3, r2
 80059a8:	f841 3f04 	str.w	r3, [r1, #4]!
 80059ac:	428e      	cmp	r6, r1
 80059ae:	d1f2      	bne.n	8005996 <PDM_Filter_Init+0xda>
 80059b0:	2300      	movs	r3, #0
 80059b2:	702b      	strb	r3, [r5, #0]
 80059b4:	e7c1      	b.n	800593a <PDM_Filter_Init+0x7e>
 80059b6:	bf00      	nop
 80059b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80059bc:	f407a5c2 	.word	0xf407a5c2
 80059c0:	20000490 	.word	0x20000490
 80059c4:	1ffffffc 	.word	0x1ffffffc
 80059c8:	000ffc00 	.word	0x000ffc00
 80059cc:	3ff00000 	.word	0x3ff00000

080059d0 <PDM_Filter_setConfig>:
 80059d0:	4b66      	ldr	r3, [pc, #408]	; (8005b6c <PDM_Filter_setConfig+0x19c>)
 80059d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <PDM_Filter_setConfig+0xc>
 80059d8:	2004      	movs	r0, #4
 80059da:	4770      	bx	lr
 80059dc:	b530      	push	{r4, r5, lr}
 80059de:	880a      	ldrh	r2, [r1, #0]
 80059e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80059e2:	ed2d 8b04 	vpush	{d8-d9}
 80059e6:	4604      	mov	r4, r0
 80059e8:	460d      	mov	r5, r1
 80059ea:	1e51      	subs	r1, r2, #1
 80059ec:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 80059f0:	2906      	cmp	r1, #6
 80059f2:	b083      	sub	sp, #12
 80059f4:	6420      	str	r0, [r4, #64]	; 0x40
 80059f6:	d91a      	bls.n	8005a2e <PDM_Filter_setConfig+0x5e>
 80059f8:	2008      	movs	r0, #8
 80059fa:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80059fe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005a02:	4299      	cmp	r1, r3
 8005a04:	d07e      	beq.n	8005b04 <PDM_Filter_setConfig+0x134>
 8005a06:	f113 0f0c 	cmn.w	r3, #12
 8005a0a:	da2a      	bge.n	8005a62 <PDM_Filter_setConfig+0x92>
 8005a0c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8005a10:	3040      	adds	r0, #64	; 0x40
 8005a12:	80ab      	strh	r3, [r5, #4]
 8005a14:	8622      	strh	r2, [r4, #48]	; 0x30
 8005a16:	886b      	ldrh	r3, [r5, #2]
 8005a18:	8663      	strh	r3, [r4, #50]	; 0x32
 8005a1a:	b920      	cbnz	r0, 8005a26 <PDM_Filter_setConfig+0x56>
 8005a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a22:	6423      	str	r3, [r4, #64]	; 0x40
 8005a24:	2000      	movs	r0, #0
 8005a26:	b003      	add	sp, #12
 8005a28:	ecbd 8b04 	vpop	{d8-d9}
 8005a2c:	bd30      	pop	{r4, r5, pc}
 8005a2e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005a30:	4291      	cmp	r1, r2
 8005a32:	d06c      	beq.n	8005b0e <PDM_Filter_setConfig+0x13e>
 8005a34:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8005a42:	6423      	str	r3, [r4, #64]	; 0x40
 8005a44:	2970      	cmp	r1, #112	; 0x70
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005a4e:	d066      	beq.n	8005b1e <PDM_Filter_setConfig+0x14e>
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	f200 8089 	bhi.w	8005b68 <PDM_Filter_setConfig+0x198>
 8005a56:	e8df f003 	tbb	[pc, r3]
 8005a5a:	4f52      	.short	0x4f52
 8005a5c:	3d43494c 	.word	0x3d43494c
 8005a60:	46          	.byte	0x46
 8005a61:	00          	.byte	0x00
 8005a62:	2b33      	cmp	r3, #51	; 0x33
 8005a64:	dc32      	bgt.n	8005acc <PDM_Filter_setConfig+0xfc>
 8005a66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a68:	f002 020f 	and.w	r2, r2, #15
 8005a6c:	3a01      	subs	r2, #1
 8005a6e:	2a06      	cmp	r2, #6
 8005a70:	d872      	bhi.n	8005b58 <PDM_Filter_setConfig+0x188>
 8005a72:	493f      	ldr	r1, [pc, #252]	; (8005b70 <PDM_Filter_setConfig+0x1a0>)
 8005a74:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005a78:	ed92 9a00 	vldr	s18, [r2]
 8005a7c:	ed92 8a07 	vldr	s16, [r2, #28]
 8005a80:	9001      	str	r0, [sp, #4]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a8a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8005a8e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8005a92:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005a96:	f000 fd6d 	bl	8006574 <powf>
 8005a9a:	eddf 0a36 	vldr	s1, [pc, #216]	; 8005b74 <PDM_Filter_setConfig+0x1a4>
 8005a9e:	eef0 8a40 	vmov.f32	s17, s0
 8005aa2:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8005aa6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005aaa:	f000 fd63 	bl	8006574 <powf>
 8005aae:	ee28 8a28 	vmul.f32	s16, s16, s17
 8005ab2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005ab6:	f000 fd37 	bl	8006528 <roundf>
 8005aba:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8005abe:	88ab      	ldrh	r3, [r5, #4]
 8005ac0:	882a      	ldrh	r2, [r5, #0]
 8005ac2:	9801      	ldr	r0, [sp, #4]
 8005ac4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8005ac8:	8723      	strh	r3, [r4, #56]	; 0x38
 8005aca:	e7a3      	b.n	8005a14 <PDM_Filter_setConfig+0x44>
 8005acc:	2333      	movs	r3, #51	; 0x33
 8005ace:	3040      	adds	r0, #64	; 0x40
 8005ad0:	80ab      	strh	r3, [r5, #4]
 8005ad2:	e79f      	b.n	8005a14 <PDM_Filter_setConfig+0x44>
 8005ad4:	4b28      	ldr	r3, [pc, #160]	; (8005b78 <PDM_Filter_setConfig+0x1a8>)
 8005ad6:	64a3      	str	r3, [r4, #72]	; 0x48
 8005ad8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005adc:	2000      	movs	r0, #0
 8005ade:	e792      	b.n	8005a06 <PDM_Filter_setConfig+0x36>
 8005ae0:	4b26      	ldr	r3, [pc, #152]	; (8005b7c <PDM_Filter_setConfig+0x1ac>)
 8005ae2:	64a3      	str	r3, [r4, #72]	; 0x48
 8005ae4:	e7f8      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005ae6:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <PDM_Filter_setConfig+0x1b0>)
 8005ae8:	64a3      	str	r3, [r4, #72]	; 0x48
 8005aea:	e7f5      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005aec:	4b25      	ldr	r3, [pc, #148]	; (8005b84 <PDM_Filter_setConfig+0x1b4>)
 8005aee:	64a3      	str	r3, [r4, #72]	; 0x48
 8005af0:	e7f2      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005af2:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <PDM_Filter_setConfig+0x1b8>)
 8005af4:	64a3      	str	r3, [r4, #72]	; 0x48
 8005af6:	e7ef      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005af8:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <PDM_Filter_setConfig+0x1bc>)
 8005afa:	64a3      	str	r3, [r4, #72]	; 0x48
 8005afc:	e7ec      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005afe:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <PDM_Filter_setConfig+0x1c0>)
 8005b00:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b02:	e7e9      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005b04:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005b06:	4291      	cmp	r1, r2
 8005b08:	f47f af7d 	bne.w	8005a06 <PDM_Filter_setConfig+0x36>
 8005b0c:	e783      	b.n	8005a16 <PDM_Filter_setConfig+0x46>
 8005b0e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005b12:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005b16:	4299      	cmp	r1, r3
 8005b18:	d023      	beq.n	8005b62 <PDM_Filter_setConfig+0x192>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e773      	b.n	8005a06 <PDM_Filter_setConfig+0x36>
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d822      	bhi.n	8005b68 <PDM_Filter_setConfig+0x198>
 8005b22:	e8df f003 	tbb	[pc, r3]
 8005b26:	1316      	.short	0x1316
 8005b28:	070a0d10 	.word	0x070a0d10
 8005b2c:	04          	.byte	0x04
 8005b2d:	00          	.byte	0x00
 8005b2e:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <PDM_Filter_setConfig+0x1c4>)
 8005b30:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b32:	e7d1      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005b34:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <PDM_Filter_setConfig+0x1c8>)
 8005b36:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b38:	e7ce      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005b3a:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <PDM_Filter_setConfig+0x1cc>)
 8005b3c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b3e:	e7cb      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005b40:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <PDM_Filter_setConfig+0x1d0>)
 8005b42:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b44:	e7c8      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005b46:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <PDM_Filter_setConfig+0x1d4>)
 8005b48:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b4a:	e7c5      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005b4c:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <PDM_Filter_setConfig+0x1d8>)
 8005b4e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b50:	e7c2      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005b52:	4b16      	ldr	r3, [pc, #88]	; (8005bac <PDM_Filter_setConfig+0x1dc>)
 8005b54:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b56:	e7bf      	b.n	8005ad8 <PDM_Filter_setConfig+0x108>
 8005b58:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8005bb0 <PDM_Filter_setConfig+0x1e0>
 8005b5c:	eeb0 9a48 	vmov.f32	s18, s16
 8005b60:	e78e      	b.n	8005a80 <PDM_Filter_setConfig+0xb0>
 8005b62:	886b      	ldrh	r3, [r5, #2]
 8005b64:	8663      	strh	r3, [r4, #50]	; 0x32
 8005b66:	e759      	b.n	8005a1c <PDM_Filter_setConfig+0x4c>
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e746      	b.n	80059fa <PDM_Filter_setConfig+0x2a>
 8005b6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b70:	08006e18 	.word	0x08006e18
 8005b74:	42000000 	.word	0x42000000
 8005b78:	08003f3d 	.word	0x08003f3d
 8005b7c:	08003e1d 	.word	0x08003e1d
 8005b80:	080040cd 	.word	0x080040cd
 8005b84:	08004911 	.word	0x08004911
 8005b88:	08004671 	.word	0x08004671
 8005b8c:	08004451 	.word	0x08004451
 8005b90:	08004265 	.word	0x08004265
 8005b94:	08004f1d 	.word	0x08004f1d
 8005b98:	08004de5 	.word	0x08004de5
 8005b9c:	08004d01 	.word	0x08004d01
 8005ba0:	08005599 	.word	0x08005599
 8005ba4:	08005385 	.word	0x08005385
 8005ba8:	080051cd 	.word	0x080051cd
 8005bac:	08005061 	.word	0x08005061
 8005bb0:	00000000 	.word	0x00000000

08005bb4 <PDM_Filter>:
 8005bb4:	b410      	push	{r4}
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <PDM_Filter+0x34>)
 8005bb8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	d003      	beq.n	8005bc6 <PDM_Filter+0x12>
 8005bbe:	2004      	movs	r0, #4
 8005bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bc8:	05dc      	lsls	r4, r3, #23
 8005bca:	d407      	bmi.n	8005bdc <PDM_Filter+0x28>
 8005bcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bd0:	bf14      	ite	ne
 8005bd2:	2020      	movne	r0, #32
 8005bd4:	2030      	moveq	r0, #48	; 0x30
 8005bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be2:	320c      	adds	r2, #12
 8005be4:	4718      	bx	r3
 8005be6:	bf00      	nop
 8005be8:	b5e8b5cd 	.word	0xb5e8b5cd

08005bec <CRC_Lock>:
 8005bec:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <CRC_Lock+0x60>)
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	b410      	push	{r4}
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	4c16      	ldr	r4, [pc, #88]	; (8005c50 <CRC_Lock+0x64>)
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	b933      	cbnz	r3, 8005c0c <CRC_Lock+0x20>
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <CRC_Lock+0x68>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c06:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005c0a:	d00f      	beq.n	8005c2c <CRC_Lock+0x40>
 8005c0c:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <CRC_Lock+0x6c>)
 8005c0e:	2301      	movs	r3, #1
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1fc      	bne.n	8005c12 <CRC_Lock+0x26>
 8005c18:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <CRC_Lock+0x70>)
 8005c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c1e:	6018      	str	r0, [r3, #0]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	1a08      	subs	r0, r1, r0
 8005c24:	fab0 f080 	clz	r0, r0
 8005c28:	0940      	lsrs	r0, r0, #5
 8005c2a:	4770      	bx	lr
 8005c2c:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <CRC_Lock+0x74>)
 8005c2e:	2301      	movs	r3, #1
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	6813      	ldr	r3, [r2, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1fc      	bne.n	8005c32 <CRC_Lock+0x46>
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <CRC_Lock+0x78>)
 8005c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c3e:	6018      	str	r0, [r3, #0]
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	1a40      	subs	r0, r0, r1
 8005c44:	fab0 f080 	clz	r0, r0
 8005c48:	0940      	lsrs	r0, r0, #5
 8005c4a:	4770      	bx	lr
 8005c4c:	e0002000 	.word	0xe0002000
 8005c50:	e0042000 	.word	0xe0042000
 8005c54:	5c001000 	.word	0x5c001000
 8005c58:	40023008 	.word	0x40023008
 8005c5c:	40023000 	.word	0x40023000
 8005c60:	58024c08 	.word	0x58024c08
 8005c64:	58024c00 	.word	0x58024c00

08005c68 <__errno>:
 8005c68:	4b01      	ldr	r3, [pc, #4]	; (8005c70 <__errno+0x8>)
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	2000040c 	.word	0x2000040c

08005c74 <__libc_init_array>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	4d0d      	ldr	r5, [pc, #52]	; (8005cac <__libc_init_array+0x38>)
 8005c78:	4c0d      	ldr	r4, [pc, #52]	; (8005cb0 <__libc_init_array+0x3c>)
 8005c7a:	1b64      	subs	r4, r4, r5
 8005c7c:	10a4      	asrs	r4, r4, #2
 8005c7e:	2600      	movs	r6, #0
 8005c80:	42a6      	cmp	r6, r4
 8005c82:	d109      	bne.n	8005c98 <__libc_init_array+0x24>
 8005c84:	4d0b      	ldr	r5, [pc, #44]	; (8005cb4 <__libc_init_array+0x40>)
 8005c86:	4c0c      	ldr	r4, [pc, #48]	; (8005cb8 <__libc_init_array+0x44>)
 8005c88:	f001 f8b8 	bl	8006dfc <_init>
 8005c8c:	1b64      	subs	r4, r4, r5
 8005c8e:	10a4      	asrs	r4, r4, #2
 8005c90:	2600      	movs	r6, #0
 8005c92:	42a6      	cmp	r6, r4
 8005c94:	d105      	bne.n	8005ca2 <__libc_init_array+0x2e>
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9c:	4798      	blx	r3
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	e7ee      	b.n	8005c80 <__libc_init_array+0xc>
 8005ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca6:	4798      	blx	r3
 8005ca8:	3601      	adds	r6, #1
 8005caa:	e7f2      	b.n	8005c92 <__libc_init_array+0x1e>
 8005cac:	08006ecc 	.word	0x08006ecc
 8005cb0:	08006ecc 	.word	0x08006ecc
 8005cb4:	08006ecc 	.word	0x08006ecc
 8005cb8:	08006ed0 	.word	0x08006ed0

08005cbc <memset>:
 8005cbc:	4402      	add	r2, r0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d100      	bne.n	8005cc6 <memset+0xa>
 8005cc4:	4770      	bx	lr
 8005cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cca:	e7f9      	b.n	8005cc0 <memset+0x4>

08005ccc <siprintf>:
 8005ccc:	b40e      	push	{r1, r2, r3}
 8005cce:	b500      	push	{lr}
 8005cd0:	b09c      	sub	sp, #112	; 0x70
 8005cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8005cd4:	9002      	str	r0, [sp, #8]
 8005cd6:	9006      	str	r0, [sp, #24]
 8005cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cdc:	4809      	ldr	r0, [pc, #36]	; (8005d04 <siprintf+0x38>)
 8005cde:	9107      	str	r1, [sp, #28]
 8005ce0:	9104      	str	r1, [sp, #16]
 8005ce2:	4909      	ldr	r1, [pc, #36]	; (8005d08 <siprintf+0x3c>)
 8005ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce8:	9105      	str	r1, [sp, #20]
 8005cea:	6800      	ldr	r0, [r0, #0]
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	a902      	add	r1, sp, #8
 8005cf0:	f000 f868 	bl	8005dc4 <_svfiprintf_r>
 8005cf4:	9b02      	ldr	r3, [sp, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	b01c      	add	sp, #112	; 0x70
 8005cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d00:	b003      	add	sp, #12
 8005d02:	4770      	bx	lr
 8005d04:	2000040c 	.word	0x2000040c
 8005d08:	ffff0208 	.word	0xffff0208

08005d0c <__ssputs_r>:
 8005d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	688e      	ldr	r6, [r1, #8]
 8005d12:	429e      	cmp	r6, r3
 8005d14:	4682      	mov	sl, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	4690      	mov	r8, r2
 8005d1a:	461f      	mov	r7, r3
 8005d1c:	d838      	bhi.n	8005d90 <__ssputs_r+0x84>
 8005d1e:	898a      	ldrh	r2, [r1, #12]
 8005d20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d24:	d032      	beq.n	8005d8c <__ssputs_r+0x80>
 8005d26:	6825      	ldr	r5, [r4, #0]
 8005d28:	6909      	ldr	r1, [r1, #16]
 8005d2a:	eba5 0901 	sub.w	r9, r5, r1
 8005d2e:	6965      	ldr	r5, [r4, #20]
 8005d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d38:	3301      	adds	r3, #1
 8005d3a:	444b      	add	r3, r9
 8005d3c:	106d      	asrs	r5, r5, #1
 8005d3e:	429d      	cmp	r5, r3
 8005d40:	bf38      	it	cc
 8005d42:	461d      	movcc	r5, r3
 8005d44:	0553      	lsls	r3, r2, #21
 8005d46:	d531      	bpl.n	8005dac <__ssputs_r+0xa0>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f000 fb47 	bl	80063dc <_malloc_r>
 8005d4e:	4606      	mov	r6, r0
 8005d50:	b950      	cbnz	r0, 8005d68 <__ssputs_r+0x5c>
 8005d52:	230c      	movs	r3, #12
 8005d54:	f8ca 3000 	str.w	r3, [sl]
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d68:	6921      	ldr	r1, [r4, #16]
 8005d6a:	464a      	mov	r2, r9
 8005d6c:	f000 fabe 	bl	80062ec <memcpy>
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	6126      	str	r6, [r4, #16]
 8005d7e:	6165      	str	r5, [r4, #20]
 8005d80:	444e      	add	r6, r9
 8005d82:	eba5 0509 	sub.w	r5, r5, r9
 8005d86:	6026      	str	r6, [r4, #0]
 8005d88:	60a5      	str	r5, [r4, #8]
 8005d8a:	463e      	mov	r6, r7
 8005d8c:	42be      	cmp	r6, r7
 8005d8e:	d900      	bls.n	8005d92 <__ssputs_r+0x86>
 8005d90:	463e      	mov	r6, r7
 8005d92:	4632      	mov	r2, r6
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	4641      	mov	r1, r8
 8005d98:	f000 fab6 	bl	8006308 <memmove>
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	1b9b      	subs	r3, r3, r6
 8005da2:	4432      	add	r2, r6
 8005da4:	60a3      	str	r3, [r4, #8]
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	2000      	movs	r0, #0
 8005daa:	e7db      	b.n	8005d64 <__ssputs_r+0x58>
 8005dac:	462a      	mov	r2, r5
 8005dae:	f000 fb6f 	bl	8006490 <_realloc_r>
 8005db2:	4606      	mov	r6, r0
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d1e1      	bne.n	8005d7c <__ssputs_r+0x70>
 8005db8:	6921      	ldr	r1, [r4, #16]
 8005dba:	4650      	mov	r0, sl
 8005dbc:	f000 fabe 	bl	800633c <_free_r>
 8005dc0:	e7c7      	b.n	8005d52 <__ssputs_r+0x46>
	...

08005dc4 <_svfiprintf_r>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	4698      	mov	r8, r3
 8005dca:	898b      	ldrh	r3, [r1, #12]
 8005dcc:	061b      	lsls	r3, r3, #24
 8005dce:	b09d      	sub	sp, #116	; 0x74
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	d50e      	bpl.n	8005df6 <_svfiprintf_r+0x32>
 8005dd8:	690b      	ldr	r3, [r1, #16]
 8005dda:	b963      	cbnz	r3, 8005df6 <_svfiprintf_r+0x32>
 8005ddc:	2140      	movs	r1, #64	; 0x40
 8005dde:	f000 fafd 	bl	80063dc <_malloc_r>
 8005de2:	6028      	str	r0, [r5, #0]
 8005de4:	6128      	str	r0, [r5, #16]
 8005de6:	b920      	cbnz	r0, 8005df2 <_svfiprintf_r+0x2e>
 8005de8:	230c      	movs	r3, #12
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df0:	e0d1      	b.n	8005f96 <_svfiprintf_r+0x1d2>
 8005df2:	2340      	movs	r3, #64	; 0x40
 8005df4:	616b      	str	r3, [r5, #20]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e04:	2330      	movs	r3, #48	; 0x30
 8005e06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fb0 <_svfiprintf_r+0x1ec>
 8005e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e0e:	f04f 0901 	mov.w	r9, #1
 8005e12:	4623      	mov	r3, r4
 8005e14:	469a      	mov	sl, r3
 8005e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1a:	b10a      	cbz	r2, 8005e20 <_svfiprintf_r+0x5c>
 8005e1c:	2a25      	cmp	r2, #37	; 0x25
 8005e1e:	d1f9      	bne.n	8005e14 <_svfiprintf_r+0x50>
 8005e20:	ebba 0b04 	subs.w	fp, sl, r4
 8005e24:	d00b      	beq.n	8005e3e <_svfiprintf_r+0x7a>
 8005e26:	465b      	mov	r3, fp
 8005e28:	4622      	mov	r2, r4
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff ff6d 	bl	8005d0c <__ssputs_r>
 8005e32:	3001      	adds	r0, #1
 8005e34:	f000 80aa 	beq.w	8005f8c <_svfiprintf_r+0x1c8>
 8005e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e3a:	445a      	add	r2, fp
 8005e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80a2 	beq.w	8005f8c <_svfiprintf_r+0x1c8>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e52:	f10a 0a01 	add.w	sl, sl, #1
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e60:	4654      	mov	r4, sl
 8005e62:	2205      	movs	r2, #5
 8005e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e68:	4851      	ldr	r0, [pc, #324]	; (8005fb0 <_svfiprintf_r+0x1ec>)
 8005e6a:	f7fa f9b9 	bl	80001e0 <memchr>
 8005e6e:	9a04      	ldr	r2, [sp, #16]
 8005e70:	b9d8      	cbnz	r0, 8005eaa <_svfiprintf_r+0xe6>
 8005e72:	06d0      	lsls	r0, r2, #27
 8005e74:	bf44      	itt	mi
 8005e76:	2320      	movmi	r3, #32
 8005e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7c:	0711      	lsls	r1, r2, #28
 8005e7e:	bf44      	itt	mi
 8005e80:	232b      	movmi	r3, #43	; 0x2b
 8005e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e86:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8c:	d015      	beq.n	8005eba <_svfiprintf_r+0xf6>
 8005e8e:	9a07      	ldr	r2, [sp, #28]
 8005e90:	4654      	mov	r4, sl
 8005e92:	2000      	movs	r0, #0
 8005e94:	f04f 0c0a 	mov.w	ip, #10
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9e:	3b30      	subs	r3, #48	; 0x30
 8005ea0:	2b09      	cmp	r3, #9
 8005ea2:	d94e      	bls.n	8005f42 <_svfiprintf_r+0x17e>
 8005ea4:	b1b0      	cbz	r0, 8005ed4 <_svfiprintf_r+0x110>
 8005ea6:	9207      	str	r2, [sp, #28]
 8005ea8:	e014      	b.n	8005ed4 <_svfiprintf_r+0x110>
 8005eaa:	eba0 0308 	sub.w	r3, r0, r8
 8005eae:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	46a2      	mov	sl, r4
 8005eb8:	e7d2      	b.n	8005e60 <_svfiprintf_r+0x9c>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	1d19      	adds	r1, r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	9103      	str	r1, [sp, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfbb      	ittet	lt
 8005ec6:	425b      	neglt	r3, r3
 8005ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ecc:	9307      	strge	r3, [sp, #28]
 8005ece:	9307      	strlt	r3, [sp, #28]
 8005ed0:	bfb8      	it	lt
 8005ed2:	9204      	strlt	r2, [sp, #16]
 8005ed4:	7823      	ldrb	r3, [r4, #0]
 8005ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ed8:	d10c      	bne.n	8005ef4 <_svfiprintf_r+0x130>
 8005eda:	7863      	ldrb	r3, [r4, #1]
 8005edc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ede:	d135      	bne.n	8005f4c <_svfiprintf_r+0x188>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	9203      	str	r2, [sp, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bfb8      	it	lt
 8005eec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ef0:	3402      	adds	r4, #2
 8005ef2:	9305      	str	r3, [sp, #20]
 8005ef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fc0 <_svfiprintf_r+0x1fc>
 8005ef8:	7821      	ldrb	r1, [r4, #0]
 8005efa:	2203      	movs	r2, #3
 8005efc:	4650      	mov	r0, sl
 8005efe:	f7fa f96f 	bl	80001e0 <memchr>
 8005f02:	b140      	cbz	r0, 8005f16 <_svfiprintf_r+0x152>
 8005f04:	2340      	movs	r3, #64	; 0x40
 8005f06:	eba0 000a 	sub.w	r0, r0, sl
 8005f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	4303      	orrs	r3, r0
 8005f12:	3401      	adds	r4, #1
 8005f14:	9304      	str	r3, [sp, #16]
 8005f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1a:	4826      	ldr	r0, [pc, #152]	; (8005fb4 <_svfiprintf_r+0x1f0>)
 8005f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f20:	2206      	movs	r2, #6
 8005f22:	f7fa f95d 	bl	80001e0 <memchr>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d038      	beq.n	8005f9c <_svfiprintf_r+0x1d8>
 8005f2a:	4b23      	ldr	r3, [pc, #140]	; (8005fb8 <_svfiprintf_r+0x1f4>)
 8005f2c:	bb1b      	cbnz	r3, 8005f76 <_svfiprintf_r+0x1b2>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	3307      	adds	r3, #7
 8005f32:	f023 0307 	bic.w	r3, r3, #7
 8005f36:	3308      	adds	r3, #8
 8005f38:	9303      	str	r3, [sp, #12]
 8005f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3c:	4433      	add	r3, r6
 8005f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f40:	e767      	b.n	8005e12 <_svfiprintf_r+0x4e>
 8005f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f46:	460c      	mov	r4, r1
 8005f48:	2001      	movs	r0, #1
 8005f4a:	e7a5      	b.n	8005e98 <_svfiprintf_r+0xd4>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	3401      	adds	r4, #1
 8005f50:	9305      	str	r3, [sp, #20]
 8005f52:	4619      	mov	r1, r3
 8005f54:	f04f 0c0a 	mov.w	ip, #10
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f5e:	3a30      	subs	r2, #48	; 0x30
 8005f60:	2a09      	cmp	r2, #9
 8005f62:	d903      	bls.n	8005f6c <_svfiprintf_r+0x1a8>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0c5      	beq.n	8005ef4 <_svfiprintf_r+0x130>
 8005f68:	9105      	str	r1, [sp, #20]
 8005f6a:	e7c3      	b.n	8005ef4 <_svfiprintf_r+0x130>
 8005f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f70:	4604      	mov	r4, r0
 8005f72:	2301      	movs	r3, #1
 8005f74:	e7f0      	b.n	8005f58 <_svfiprintf_r+0x194>
 8005f76:	ab03      	add	r3, sp, #12
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	462a      	mov	r2, r5
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <_svfiprintf_r+0x1f8>)
 8005f7e:	a904      	add	r1, sp, #16
 8005f80:	4638      	mov	r0, r7
 8005f82:	f3af 8000 	nop.w
 8005f86:	1c42      	adds	r2, r0, #1
 8005f88:	4606      	mov	r6, r0
 8005f8a:	d1d6      	bne.n	8005f3a <_svfiprintf_r+0x176>
 8005f8c:	89ab      	ldrh	r3, [r5, #12]
 8005f8e:	065b      	lsls	r3, r3, #25
 8005f90:	f53f af2c 	bmi.w	8005dec <_svfiprintf_r+0x28>
 8005f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f96:	b01d      	add	sp, #116	; 0x74
 8005f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <_svfiprintf_r+0x1f8>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f000 f87a 	bl	80060a0 <_printf_i>
 8005fac:	e7eb      	b.n	8005f86 <_svfiprintf_r+0x1c2>
 8005fae:	bf00      	nop
 8005fb0:	08006e70 	.word	0x08006e70
 8005fb4:	08006e7a 	.word	0x08006e7a
 8005fb8:	00000000 	.word	0x00000000
 8005fbc:	08005d0d 	.word	0x08005d0d
 8005fc0:	08006e76 	.word	0x08006e76

08005fc4 <_printf_common>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	4616      	mov	r6, r2
 8005fca:	4699      	mov	r9, r3
 8005fcc:	688a      	ldr	r2, [r1, #8]
 8005fce:	690b      	ldr	r3, [r1, #16]
 8005fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	bfb8      	it	lt
 8005fd8:	4613      	movlt	r3, r2
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	b10a      	cbz	r2, 8005fea <_printf_common+0x26>
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	0699      	lsls	r1, r3, #26
 8005fee:	bf42      	ittt	mi
 8005ff0:	6833      	ldrmi	r3, [r6, #0]
 8005ff2:	3302      	addmi	r3, #2
 8005ff4:	6033      	strmi	r3, [r6, #0]
 8005ff6:	6825      	ldr	r5, [r4, #0]
 8005ff8:	f015 0506 	ands.w	r5, r5, #6
 8005ffc:	d106      	bne.n	800600c <_printf_common+0x48>
 8005ffe:	f104 0a19 	add.w	sl, r4, #25
 8006002:	68e3      	ldr	r3, [r4, #12]
 8006004:	6832      	ldr	r2, [r6, #0]
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	42ab      	cmp	r3, r5
 800600a:	dc26      	bgt.n	800605a <_printf_common+0x96>
 800600c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006010:	1e13      	subs	r3, r2, #0
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	bf18      	it	ne
 8006016:	2301      	movne	r3, #1
 8006018:	0692      	lsls	r2, r2, #26
 800601a:	d42b      	bmi.n	8006074 <_printf_common+0xb0>
 800601c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006020:	4649      	mov	r1, r9
 8006022:	4638      	mov	r0, r7
 8006024:	47c0      	blx	r8
 8006026:	3001      	adds	r0, #1
 8006028:	d01e      	beq.n	8006068 <_printf_common+0xa4>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	68e5      	ldr	r5, [r4, #12]
 800602e:	6832      	ldr	r2, [r6, #0]
 8006030:	f003 0306 	and.w	r3, r3, #6
 8006034:	2b04      	cmp	r3, #4
 8006036:	bf08      	it	eq
 8006038:	1aad      	subeq	r5, r5, r2
 800603a:	68a3      	ldr	r3, [r4, #8]
 800603c:	6922      	ldr	r2, [r4, #16]
 800603e:	bf0c      	ite	eq
 8006040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006044:	2500      	movne	r5, #0
 8006046:	4293      	cmp	r3, r2
 8006048:	bfc4      	itt	gt
 800604a:	1a9b      	subgt	r3, r3, r2
 800604c:	18ed      	addgt	r5, r5, r3
 800604e:	2600      	movs	r6, #0
 8006050:	341a      	adds	r4, #26
 8006052:	42b5      	cmp	r5, r6
 8006054:	d11a      	bne.n	800608c <_printf_common+0xc8>
 8006056:	2000      	movs	r0, #0
 8006058:	e008      	b.n	800606c <_printf_common+0xa8>
 800605a:	2301      	movs	r3, #1
 800605c:	4652      	mov	r2, sl
 800605e:	4649      	mov	r1, r9
 8006060:	4638      	mov	r0, r7
 8006062:	47c0      	blx	r8
 8006064:	3001      	adds	r0, #1
 8006066:	d103      	bne.n	8006070 <_printf_common+0xac>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006070:	3501      	adds	r5, #1
 8006072:	e7c6      	b.n	8006002 <_printf_common+0x3e>
 8006074:	18e1      	adds	r1, r4, r3
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	2030      	movs	r0, #48	; 0x30
 800607a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800607e:	4422      	add	r2, r4
 8006080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006088:	3302      	adds	r3, #2
 800608a:	e7c7      	b.n	800601c <_printf_common+0x58>
 800608c:	2301      	movs	r3, #1
 800608e:	4622      	mov	r2, r4
 8006090:	4649      	mov	r1, r9
 8006092:	4638      	mov	r0, r7
 8006094:	47c0      	blx	r8
 8006096:	3001      	adds	r0, #1
 8006098:	d0e6      	beq.n	8006068 <_printf_common+0xa4>
 800609a:	3601      	adds	r6, #1
 800609c:	e7d9      	b.n	8006052 <_printf_common+0x8e>
	...

080060a0 <_printf_i>:
 80060a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a4:	460c      	mov	r4, r1
 80060a6:	4691      	mov	r9, r2
 80060a8:	7e27      	ldrb	r7, [r4, #24]
 80060aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060ac:	2f78      	cmp	r7, #120	; 0x78
 80060ae:	4680      	mov	r8, r0
 80060b0:	469a      	mov	sl, r3
 80060b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060b6:	d807      	bhi.n	80060c8 <_printf_i+0x28>
 80060b8:	2f62      	cmp	r7, #98	; 0x62
 80060ba:	d80a      	bhi.n	80060d2 <_printf_i+0x32>
 80060bc:	2f00      	cmp	r7, #0
 80060be:	f000 80d8 	beq.w	8006272 <_printf_i+0x1d2>
 80060c2:	2f58      	cmp	r7, #88	; 0x58
 80060c4:	f000 80a3 	beq.w	800620e <_printf_i+0x16e>
 80060c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d0:	e03a      	b.n	8006148 <_printf_i+0xa8>
 80060d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060d6:	2b15      	cmp	r3, #21
 80060d8:	d8f6      	bhi.n	80060c8 <_printf_i+0x28>
 80060da:	a001      	add	r0, pc, #4	; (adr r0, 80060e0 <_printf_i+0x40>)
 80060dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060e0:	08006139 	.word	0x08006139
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	080060c9 	.word	0x080060c9
 80060ec:	080060c9 	.word	0x080060c9
 80060f0:	080060c9 	.word	0x080060c9
 80060f4:	080060c9 	.word	0x080060c9
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	080060c9 	.word	0x080060c9
 8006100:	080060c9 	.word	0x080060c9
 8006104:	080060c9 	.word	0x080060c9
 8006108:	080060c9 	.word	0x080060c9
 800610c:	08006259 	.word	0x08006259
 8006110:	0800617d 	.word	0x0800617d
 8006114:	0800623b 	.word	0x0800623b
 8006118:	080060c9 	.word	0x080060c9
 800611c:	080060c9 	.word	0x080060c9
 8006120:	0800627b 	.word	0x0800627b
 8006124:	080060c9 	.word	0x080060c9
 8006128:	0800617d 	.word	0x0800617d
 800612c:	080060c9 	.word	0x080060c9
 8006130:	080060c9 	.word	0x080060c9
 8006134:	08006243 	.word	0x08006243
 8006138:	680b      	ldr	r3, [r1, #0]
 800613a:	1d1a      	adds	r2, r3, #4
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	600a      	str	r2, [r1, #0]
 8006140:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006148:	2301      	movs	r3, #1
 800614a:	e0a3      	b.n	8006294 <_printf_i+0x1f4>
 800614c:	6825      	ldr	r5, [r4, #0]
 800614e:	6808      	ldr	r0, [r1, #0]
 8006150:	062e      	lsls	r6, r5, #24
 8006152:	f100 0304 	add.w	r3, r0, #4
 8006156:	d50a      	bpl.n	800616e <_printf_i+0xce>
 8006158:	6805      	ldr	r5, [r0, #0]
 800615a:	600b      	str	r3, [r1, #0]
 800615c:	2d00      	cmp	r5, #0
 800615e:	da03      	bge.n	8006168 <_printf_i+0xc8>
 8006160:	232d      	movs	r3, #45	; 0x2d
 8006162:	426d      	negs	r5, r5
 8006164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006168:	485e      	ldr	r0, [pc, #376]	; (80062e4 <_printf_i+0x244>)
 800616a:	230a      	movs	r3, #10
 800616c:	e019      	b.n	80061a2 <_printf_i+0x102>
 800616e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006172:	6805      	ldr	r5, [r0, #0]
 8006174:	600b      	str	r3, [r1, #0]
 8006176:	bf18      	it	ne
 8006178:	b22d      	sxthne	r5, r5
 800617a:	e7ef      	b.n	800615c <_printf_i+0xbc>
 800617c:	680b      	ldr	r3, [r1, #0]
 800617e:	6825      	ldr	r5, [r4, #0]
 8006180:	1d18      	adds	r0, r3, #4
 8006182:	6008      	str	r0, [r1, #0]
 8006184:	0628      	lsls	r0, r5, #24
 8006186:	d501      	bpl.n	800618c <_printf_i+0xec>
 8006188:	681d      	ldr	r5, [r3, #0]
 800618a:	e002      	b.n	8006192 <_printf_i+0xf2>
 800618c:	0669      	lsls	r1, r5, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0xe8>
 8006190:	881d      	ldrh	r5, [r3, #0]
 8006192:	4854      	ldr	r0, [pc, #336]	; (80062e4 <_printf_i+0x244>)
 8006194:	2f6f      	cmp	r7, #111	; 0x6f
 8006196:	bf0c      	ite	eq
 8006198:	2308      	moveq	r3, #8
 800619a:	230a      	movne	r3, #10
 800619c:	2100      	movs	r1, #0
 800619e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061a2:	6866      	ldr	r6, [r4, #4]
 80061a4:	60a6      	str	r6, [r4, #8]
 80061a6:	2e00      	cmp	r6, #0
 80061a8:	bfa2      	ittt	ge
 80061aa:	6821      	ldrge	r1, [r4, #0]
 80061ac:	f021 0104 	bicge.w	r1, r1, #4
 80061b0:	6021      	strge	r1, [r4, #0]
 80061b2:	b90d      	cbnz	r5, 80061b8 <_printf_i+0x118>
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	d04d      	beq.n	8006254 <_printf_i+0x1b4>
 80061b8:	4616      	mov	r6, r2
 80061ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80061be:	fb03 5711 	mls	r7, r3, r1, r5
 80061c2:	5dc7      	ldrb	r7, [r0, r7]
 80061c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061c8:	462f      	mov	r7, r5
 80061ca:	42bb      	cmp	r3, r7
 80061cc:	460d      	mov	r5, r1
 80061ce:	d9f4      	bls.n	80061ba <_printf_i+0x11a>
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d10b      	bne.n	80061ec <_printf_i+0x14c>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	07df      	lsls	r7, r3, #31
 80061d8:	d508      	bpl.n	80061ec <_printf_i+0x14c>
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	6861      	ldr	r1, [r4, #4]
 80061de:	4299      	cmp	r1, r3
 80061e0:	bfde      	ittt	le
 80061e2:	2330      	movle	r3, #48	; 0x30
 80061e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061e8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80061ec:	1b92      	subs	r2, r2, r6
 80061ee:	6122      	str	r2, [r4, #16]
 80061f0:	f8cd a000 	str.w	sl, [sp]
 80061f4:	464b      	mov	r3, r9
 80061f6:	aa03      	add	r2, sp, #12
 80061f8:	4621      	mov	r1, r4
 80061fa:	4640      	mov	r0, r8
 80061fc:	f7ff fee2 	bl	8005fc4 <_printf_common>
 8006200:	3001      	adds	r0, #1
 8006202:	d14c      	bne.n	800629e <_printf_i+0x1fe>
 8006204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006208:	b004      	add	sp, #16
 800620a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620e:	4835      	ldr	r0, [pc, #212]	; (80062e4 <_printf_i+0x244>)
 8006210:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	680e      	ldr	r6, [r1, #0]
 8006218:	061f      	lsls	r7, r3, #24
 800621a:	f856 5b04 	ldr.w	r5, [r6], #4
 800621e:	600e      	str	r6, [r1, #0]
 8006220:	d514      	bpl.n	800624c <_printf_i+0x1ac>
 8006222:	07d9      	lsls	r1, r3, #31
 8006224:	bf44      	itt	mi
 8006226:	f043 0320 	orrmi.w	r3, r3, #32
 800622a:	6023      	strmi	r3, [r4, #0]
 800622c:	b91d      	cbnz	r5, 8006236 <_printf_i+0x196>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f023 0320 	bic.w	r3, r3, #32
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	2310      	movs	r3, #16
 8006238:	e7b0      	b.n	800619c <_printf_i+0xfc>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f043 0320 	orr.w	r3, r3, #32
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	2378      	movs	r3, #120	; 0x78
 8006244:	4828      	ldr	r0, [pc, #160]	; (80062e8 <_printf_i+0x248>)
 8006246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800624a:	e7e3      	b.n	8006214 <_printf_i+0x174>
 800624c:	065e      	lsls	r6, r3, #25
 800624e:	bf48      	it	mi
 8006250:	b2ad      	uxthmi	r5, r5
 8006252:	e7e6      	b.n	8006222 <_printf_i+0x182>
 8006254:	4616      	mov	r6, r2
 8006256:	e7bb      	b.n	80061d0 <_printf_i+0x130>
 8006258:	680b      	ldr	r3, [r1, #0]
 800625a:	6826      	ldr	r6, [r4, #0]
 800625c:	6960      	ldr	r0, [r4, #20]
 800625e:	1d1d      	adds	r5, r3, #4
 8006260:	600d      	str	r5, [r1, #0]
 8006262:	0635      	lsls	r5, r6, #24
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	d501      	bpl.n	800626c <_printf_i+0x1cc>
 8006268:	6018      	str	r0, [r3, #0]
 800626a:	e002      	b.n	8006272 <_printf_i+0x1d2>
 800626c:	0671      	lsls	r1, r6, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0x1c8>
 8006270:	8018      	strh	r0, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	4616      	mov	r6, r2
 8006278:	e7ba      	b.n	80061f0 <_printf_i+0x150>
 800627a:	680b      	ldr	r3, [r1, #0]
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	600a      	str	r2, [r1, #0]
 8006280:	681e      	ldr	r6, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	4630      	mov	r0, r6
 8006288:	f7f9 ffaa 	bl	80001e0 <memchr>
 800628c:	b108      	cbz	r0, 8006292 <_printf_i+0x1f2>
 800628e:	1b80      	subs	r0, r0, r6
 8006290:	6060      	str	r0, [r4, #4]
 8006292:	6863      	ldr	r3, [r4, #4]
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629c:	e7a8      	b.n	80061f0 <_printf_i+0x150>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	4632      	mov	r2, r6
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d0ab      	beq.n	8006204 <_printf_i+0x164>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d413      	bmi.n	80062da <_printf_i+0x23a>
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	4298      	cmp	r0, r3
 80062b8:	bfb8      	it	lt
 80062ba:	4618      	movlt	r0, r3
 80062bc:	e7a4      	b.n	8006208 <_printf_i+0x168>
 80062be:	2301      	movs	r3, #1
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	47d0      	blx	sl
 80062c8:	3001      	adds	r0, #1
 80062ca:	d09b      	beq.n	8006204 <_printf_i+0x164>
 80062cc:	3501      	adds	r5, #1
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	9903      	ldr	r1, [sp, #12]
 80062d2:	1a5b      	subs	r3, r3, r1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dcf2      	bgt.n	80062be <_printf_i+0x21e>
 80062d8:	e7eb      	b.n	80062b2 <_printf_i+0x212>
 80062da:	2500      	movs	r5, #0
 80062dc:	f104 0619 	add.w	r6, r4, #25
 80062e0:	e7f5      	b.n	80062ce <_printf_i+0x22e>
 80062e2:	bf00      	nop
 80062e4:	08006e81 	.word	0x08006e81
 80062e8:	08006e92 	.word	0x08006e92

080062ec <memcpy>:
 80062ec:	440a      	add	r2, r1
 80062ee:	4291      	cmp	r1, r2
 80062f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80062f4:	d100      	bne.n	80062f8 <memcpy+0xc>
 80062f6:	4770      	bx	lr
 80062f8:	b510      	push	{r4, lr}
 80062fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006302:	4291      	cmp	r1, r2
 8006304:	d1f9      	bne.n	80062fa <memcpy+0xe>
 8006306:	bd10      	pop	{r4, pc}

08006308 <memmove>:
 8006308:	4288      	cmp	r0, r1
 800630a:	b510      	push	{r4, lr}
 800630c:	eb01 0402 	add.w	r4, r1, r2
 8006310:	d902      	bls.n	8006318 <memmove+0x10>
 8006312:	4284      	cmp	r4, r0
 8006314:	4623      	mov	r3, r4
 8006316:	d807      	bhi.n	8006328 <memmove+0x20>
 8006318:	1e43      	subs	r3, r0, #1
 800631a:	42a1      	cmp	r1, r4
 800631c:	d008      	beq.n	8006330 <memmove+0x28>
 800631e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006326:	e7f8      	b.n	800631a <memmove+0x12>
 8006328:	4402      	add	r2, r0
 800632a:	4601      	mov	r1, r0
 800632c:	428a      	cmp	r2, r1
 800632e:	d100      	bne.n	8006332 <memmove+0x2a>
 8006330:	bd10      	pop	{r4, pc}
 8006332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800633a:	e7f7      	b.n	800632c <memmove+0x24>

0800633c <_free_r>:
 800633c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800633e:	2900      	cmp	r1, #0
 8006340:	d048      	beq.n	80063d4 <_free_r+0x98>
 8006342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006346:	9001      	str	r0, [sp, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f1a1 0404 	sub.w	r4, r1, #4
 800634e:	bfb8      	it	lt
 8006350:	18e4      	addlt	r4, r4, r3
 8006352:	f000 f8d3 	bl	80064fc <__malloc_lock>
 8006356:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <_free_r+0x9c>)
 8006358:	9801      	ldr	r0, [sp, #4]
 800635a:	6813      	ldr	r3, [r2, #0]
 800635c:	4615      	mov	r5, r2
 800635e:	b933      	cbnz	r3, 800636e <_free_r+0x32>
 8006360:	6063      	str	r3, [r4, #4]
 8006362:	6014      	str	r4, [r2, #0]
 8006364:	b003      	add	sp, #12
 8006366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800636a:	f000 b8cd 	b.w	8006508 <__malloc_unlock>
 800636e:	42a3      	cmp	r3, r4
 8006370:	d90b      	bls.n	800638a <_free_r+0x4e>
 8006372:	6821      	ldr	r1, [r4, #0]
 8006374:	1862      	adds	r2, r4, r1
 8006376:	4293      	cmp	r3, r2
 8006378:	bf04      	itt	eq
 800637a:	681a      	ldreq	r2, [r3, #0]
 800637c:	685b      	ldreq	r3, [r3, #4]
 800637e:	6063      	str	r3, [r4, #4]
 8006380:	bf04      	itt	eq
 8006382:	1852      	addeq	r2, r2, r1
 8006384:	6022      	streq	r2, [r4, #0]
 8006386:	602c      	str	r4, [r5, #0]
 8006388:	e7ec      	b.n	8006364 <_free_r+0x28>
 800638a:	461a      	mov	r2, r3
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	b10b      	cbz	r3, 8006394 <_free_r+0x58>
 8006390:	42a3      	cmp	r3, r4
 8006392:	d9fa      	bls.n	800638a <_free_r+0x4e>
 8006394:	6811      	ldr	r1, [r2, #0]
 8006396:	1855      	adds	r5, r2, r1
 8006398:	42a5      	cmp	r5, r4
 800639a:	d10b      	bne.n	80063b4 <_free_r+0x78>
 800639c:	6824      	ldr	r4, [r4, #0]
 800639e:	4421      	add	r1, r4
 80063a0:	1854      	adds	r4, r2, r1
 80063a2:	42a3      	cmp	r3, r4
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	d1dd      	bne.n	8006364 <_free_r+0x28>
 80063a8:	681c      	ldr	r4, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	6053      	str	r3, [r2, #4]
 80063ae:	4421      	add	r1, r4
 80063b0:	6011      	str	r1, [r2, #0]
 80063b2:	e7d7      	b.n	8006364 <_free_r+0x28>
 80063b4:	d902      	bls.n	80063bc <_free_r+0x80>
 80063b6:	230c      	movs	r3, #12
 80063b8:	6003      	str	r3, [r0, #0]
 80063ba:	e7d3      	b.n	8006364 <_free_r+0x28>
 80063bc:	6825      	ldr	r5, [r4, #0]
 80063be:	1961      	adds	r1, r4, r5
 80063c0:	428b      	cmp	r3, r1
 80063c2:	bf04      	itt	eq
 80063c4:	6819      	ldreq	r1, [r3, #0]
 80063c6:	685b      	ldreq	r3, [r3, #4]
 80063c8:	6063      	str	r3, [r4, #4]
 80063ca:	bf04      	itt	eq
 80063cc:	1949      	addeq	r1, r1, r5
 80063ce:	6021      	streq	r1, [r4, #0]
 80063d0:	6054      	str	r4, [r2, #4]
 80063d2:	e7c7      	b.n	8006364 <_free_r+0x28>
 80063d4:	b003      	add	sp, #12
 80063d6:	bd30      	pop	{r4, r5, pc}
 80063d8:	20000808 	.word	0x20000808

080063dc <_malloc_r>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	1ccd      	adds	r5, r1, #3
 80063e0:	f025 0503 	bic.w	r5, r5, #3
 80063e4:	3508      	adds	r5, #8
 80063e6:	2d0c      	cmp	r5, #12
 80063e8:	bf38      	it	cc
 80063ea:	250c      	movcc	r5, #12
 80063ec:	2d00      	cmp	r5, #0
 80063ee:	4606      	mov	r6, r0
 80063f0:	db01      	blt.n	80063f6 <_malloc_r+0x1a>
 80063f2:	42a9      	cmp	r1, r5
 80063f4:	d903      	bls.n	80063fe <_malloc_r+0x22>
 80063f6:	230c      	movs	r3, #12
 80063f8:	6033      	str	r3, [r6, #0]
 80063fa:	2000      	movs	r0, #0
 80063fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063fe:	f000 f87d 	bl	80064fc <__malloc_lock>
 8006402:	4921      	ldr	r1, [pc, #132]	; (8006488 <_malloc_r+0xac>)
 8006404:	680a      	ldr	r2, [r1, #0]
 8006406:	4614      	mov	r4, r2
 8006408:	b99c      	cbnz	r4, 8006432 <_malloc_r+0x56>
 800640a:	4f20      	ldr	r7, [pc, #128]	; (800648c <_malloc_r+0xb0>)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	b923      	cbnz	r3, 800641a <_malloc_r+0x3e>
 8006410:	4621      	mov	r1, r4
 8006412:	4630      	mov	r0, r6
 8006414:	f000 f862 	bl	80064dc <_sbrk_r>
 8006418:	6038      	str	r0, [r7, #0]
 800641a:	4629      	mov	r1, r5
 800641c:	4630      	mov	r0, r6
 800641e:	f000 f85d 	bl	80064dc <_sbrk_r>
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	d123      	bne.n	800646e <_malloc_r+0x92>
 8006426:	230c      	movs	r3, #12
 8006428:	6033      	str	r3, [r6, #0]
 800642a:	4630      	mov	r0, r6
 800642c:	f000 f86c 	bl	8006508 <__malloc_unlock>
 8006430:	e7e3      	b.n	80063fa <_malloc_r+0x1e>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	1b5b      	subs	r3, r3, r5
 8006436:	d417      	bmi.n	8006468 <_malloc_r+0x8c>
 8006438:	2b0b      	cmp	r3, #11
 800643a:	d903      	bls.n	8006444 <_malloc_r+0x68>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	441c      	add	r4, r3
 8006440:	6025      	str	r5, [r4, #0]
 8006442:	e004      	b.n	800644e <_malloc_r+0x72>
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	42a2      	cmp	r2, r4
 8006448:	bf0c      	ite	eq
 800644a:	600b      	streq	r3, [r1, #0]
 800644c:	6053      	strne	r3, [r2, #4]
 800644e:	4630      	mov	r0, r6
 8006450:	f000 f85a 	bl	8006508 <__malloc_unlock>
 8006454:	f104 000b 	add.w	r0, r4, #11
 8006458:	1d23      	adds	r3, r4, #4
 800645a:	f020 0007 	bic.w	r0, r0, #7
 800645e:	1ac2      	subs	r2, r0, r3
 8006460:	d0cc      	beq.n	80063fc <_malloc_r+0x20>
 8006462:	1a1b      	subs	r3, r3, r0
 8006464:	50a3      	str	r3, [r4, r2]
 8006466:	e7c9      	b.n	80063fc <_malloc_r+0x20>
 8006468:	4622      	mov	r2, r4
 800646a:	6864      	ldr	r4, [r4, #4]
 800646c:	e7cc      	b.n	8006408 <_malloc_r+0x2c>
 800646e:	1cc4      	adds	r4, r0, #3
 8006470:	f024 0403 	bic.w	r4, r4, #3
 8006474:	42a0      	cmp	r0, r4
 8006476:	d0e3      	beq.n	8006440 <_malloc_r+0x64>
 8006478:	1a21      	subs	r1, r4, r0
 800647a:	4630      	mov	r0, r6
 800647c:	f000 f82e 	bl	80064dc <_sbrk_r>
 8006480:	3001      	adds	r0, #1
 8006482:	d1dd      	bne.n	8006440 <_malloc_r+0x64>
 8006484:	e7cf      	b.n	8006426 <_malloc_r+0x4a>
 8006486:	bf00      	nop
 8006488:	20000808 	.word	0x20000808
 800648c:	2000080c 	.word	0x2000080c

08006490 <_realloc_r>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	4607      	mov	r7, r0
 8006494:	4614      	mov	r4, r2
 8006496:	460e      	mov	r6, r1
 8006498:	b921      	cbnz	r1, 80064a4 <_realloc_r+0x14>
 800649a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800649e:	4611      	mov	r1, r2
 80064a0:	f7ff bf9c 	b.w	80063dc <_malloc_r>
 80064a4:	b922      	cbnz	r2, 80064b0 <_realloc_r+0x20>
 80064a6:	f7ff ff49 	bl	800633c <_free_r>
 80064aa:	4625      	mov	r5, r4
 80064ac:	4628      	mov	r0, r5
 80064ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b0:	f000 f830 	bl	8006514 <_malloc_usable_size_r>
 80064b4:	42a0      	cmp	r0, r4
 80064b6:	d20f      	bcs.n	80064d8 <_realloc_r+0x48>
 80064b8:	4621      	mov	r1, r4
 80064ba:	4638      	mov	r0, r7
 80064bc:	f7ff ff8e 	bl	80063dc <_malloc_r>
 80064c0:	4605      	mov	r5, r0
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d0f2      	beq.n	80064ac <_realloc_r+0x1c>
 80064c6:	4631      	mov	r1, r6
 80064c8:	4622      	mov	r2, r4
 80064ca:	f7ff ff0f 	bl	80062ec <memcpy>
 80064ce:	4631      	mov	r1, r6
 80064d0:	4638      	mov	r0, r7
 80064d2:	f7ff ff33 	bl	800633c <_free_r>
 80064d6:	e7e9      	b.n	80064ac <_realloc_r+0x1c>
 80064d8:	4635      	mov	r5, r6
 80064da:	e7e7      	b.n	80064ac <_realloc_r+0x1c>

080064dc <_sbrk_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4d06      	ldr	r5, [pc, #24]	; (80064f8 <_sbrk_r+0x1c>)
 80064e0:	2300      	movs	r3, #0
 80064e2:	4604      	mov	r4, r0
 80064e4:	4608      	mov	r0, r1
 80064e6:	602b      	str	r3, [r5, #0]
 80064e8:	f7fa fc54 	bl	8000d94 <_sbrk>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d102      	bne.n	80064f6 <_sbrk_r+0x1a>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	b103      	cbz	r3, 80064f6 <_sbrk_r+0x1a>
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
 80064f8:	2000095c 	.word	0x2000095c

080064fc <__malloc_lock>:
 80064fc:	4801      	ldr	r0, [pc, #4]	; (8006504 <__malloc_lock+0x8>)
 80064fe:	f000 b811 	b.w	8006524 <__retarget_lock_acquire_recursive>
 8006502:	bf00      	nop
 8006504:	20000964 	.word	0x20000964

08006508 <__malloc_unlock>:
 8006508:	4801      	ldr	r0, [pc, #4]	; (8006510 <__malloc_unlock+0x8>)
 800650a:	f000 b80c 	b.w	8006526 <__retarget_lock_release_recursive>
 800650e:	bf00      	nop
 8006510:	20000964 	.word	0x20000964

08006514 <_malloc_usable_size_r>:
 8006514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006518:	1f18      	subs	r0, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	bfbc      	itt	lt
 800651e:	580b      	ldrlt	r3, [r1, r0]
 8006520:	18c0      	addlt	r0, r0, r3
 8006522:	4770      	bx	lr

08006524 <__retarget_lock_acquire_recursive>:
 8006524:	4770      	bx	lr

08006526 <__retarget_lock_release_recursive>:
 8006526:	4770      	bx	lr

08006528 <roundf>:
 8006528:	ee10 0a10 	vmov	r0, s0
 800652c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006530:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8006534:	2a16      	cmp	r2, #22
 8006536:	dc15      	bgt.n	8006564 <roundf+0x3c>
 8006538:	2a00      	cmp	r2, #0
 800653a:	da08      	bge.n	800654e <roundf+0x26>
 800653c:	3201      	adds	r2, #1
 800653e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006542:	d101      	bne.n	8006548 <roundf+0x20>
 8006544:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006548:	ee00 3a10 	vmov	s0, r3
 800654c:	4770      	bx	lr
 800654e:	4908      	ldr	r1, [pc, #32]	; (8006570 <roundf+0x48>)
 8006550:	4111      	asrs	r1, r2
 8006552:	4208      	tst	r0, r1
 8006554:	d0fa      	beq.n	800654c <roundf+0x24>
 8006556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800655a:	4113      	asrs	r3, r2
 800655c:	4403      	add	r3, r0
 800655e:	ea23 0301 	bic.w	r3, r3, r1
 8006562:	e7f1      	b.n	8006548 <roundf+0x20>
 8006564:	2a80      	cmp	r2, #128	; 0x80
 8006566:	d1f1      	bne.n	800654c <roundf+0x24>
 8006568:	ee30 0a00 	vadd.f32	s0, s0, s0
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	007fffff 	.word	0x007fffff

08006574 <powf>:
 8006574:	b508      	push	{r3, lr}
 8006576:	ed2d 8b04 	vpush	{d8-d9}
 800657a:	eeb0 9a40 	vmov.f32	s18, s0
 800657e:	eef0 8a60 	vmov.f32	s17, s1
 8006582:	f000 f88f 	bl	80066a4 <__ieee754_powf>
 8006586:	4b43      	ldr	r3, [pc, #268]	; (8006694 <powf+0x120>)
 8006588:	f993 3000 	ldrsb.w	r3, [r3]
 800658c:	3301      	adds	r3, #1
 800658e:	eeb0 8a40 	vmov.f32	s16, s0
 8006592:	d012      	beq.n	80065ba <powf+0x46>
 8006594:	eef4 8a68 	vcmp.f32	s17, s17
 8006598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659c:	d60d      	bvs.n	80065ba <powf+0x46>
 800659e:	eeb4 9a49 	vcmp.f32	s18, s18
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	d70d      	bvc.n	80065c4 <powf+0x50>
 80065a8:	eef5 8a40 	vcmp.f32	s17, #0.0
 80065ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80065b4:	bf08      	it	eq
 80065b6:	eeb0 8a67 	vmoveq.f32	s16, s15
 80065ba:	eeb0 0a48 	vmov.f32	s0, s16
 80065be:	ecbd 8b04 	vpop	{d8-d9}
 80065c2:	bd08      	pop	{r3, pc}
 80065c4:	eddf 9a34 	vldr	s19, [pc, #208]	; 8006698 <powf+0x124>
 80065c8:	eeb4 9a69 	vcmp.f32	s18, s19
 80065cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d0:	d116      	bne.n	8006600 <powf+0x8c>
 80065d2:	eef4 8a69 	vcmp.f32	s17, s19
 80065d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065da:	d057      	beq.n	800668c <powf+0x118>
 80065dc:	eeb0 0a68 	vmov.f32	s0, s17
 80065e0:	f000 fb2a 	bl	8006c38 <finitef>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d0e8      	beq.n	80065ba <powf+0x46>
 80065e8:	eef4 8ae9 	vcmpe.f32	s17, s19
 80065ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f0:	d5e3      	bpl.n	80065ba <powf+0x46>
 80065f2:	f7ff fb39 	bl	8005c68 <__errno>
 80065f6:	2321      	movs	r3, #33	; 0x21
 80065f8:	6003      	str	r3, [r0, #0]
 80065fa:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800669c <powf+0x128>
 80065fe:	e7dc      	b.n	80065ba <powf+0x46>
 8006600:	f000 fb1a 	bl	8006c38 <finitef>
 8006604:	bb50      	cbnz	r0, 800665c <powf+0xe8>
 8006606:	eeb0 0a49 	vmov.f32	s0, s18
 800660a:	f000 fb15 	bl	8006c38 <finitef>
 800660e:	b328      	cbz	r0, 800665c <powf+0xe8>
 8006610:	eeb0 0a68 	vmov.f32	s0, s17
 8006614:	f000 fb10 	bl	8006c38 <finitef>
 8006618:	b300      	cbz	r0, 800665c <powf+0xe8>
 800661a:	eeb4 8a48 	vcmp.f32	s16, s16
 800661e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006622:	d706      	bvc.n	8006632 <powf+0xbe>
 8006624:	f7ff fb20 	bl	8005c68 <__errno>
 8006628:	2321      	movs	r3, #33	; 0x21
 800662a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800662e:	6003      	str	r3, [r0, #0]
 8006630:	e7c3      	b.n	80065ba <powf+0x46>
 8006632:	f7ff fb19 	bl	8005c68 <__errno>
 8006636:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800663a:	2322      	movs	r3, #34	; 0x22
 800663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006640:	6003      	str	r3, [r0, #0]
 8006642:	d508      	bpl.n	8006656 <powf+0xe2>
 8006644:	eeb0 0a68 	vmov.f32	s0, s17
 8006648:	f000 fb0a 	bl	8006c60 <rintf>
 800664c:	eeb4 0a68 	vcmp.f32	s0, s17
 8006650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006654:	d1d1      	bne.n	80065fa <powf+0x86>
 8006656:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80066a0 <powf+0x12c>
 800665a:	e7ae      	b.n	80065ba <powf+0x46>
 800665c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006664:	d1a9      	bne.n	80065ba <powf+0x46>
 8006666:	eeb0 0a49 	vmov.f32	s0, s18
 800666a:	f000 fae5 	bl	8006c38 <finitef>
 800666e:	2800      	cmp	r0, #0
 8006670:	d0a3      	beq.n	80065ba <powf+0x46>
 8006672:	eeb0 0a68 	vmov.f32	s0, s17
 8006676:	f000 fadf 	bl	8006c38 <finitef>
 800667a:	2800      	cmp	r0, #0
 800667c:	d09d      	beq.n	80065ba <powf+0x46>
 800667e:	f7ff faf3 	bl	8005c68 <__errno>
 8006682:	2322      	movs	r3, #34	; 0x22
 8006684:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8006698 <powf+0x124>
 8006688:	6003      	str	r3, [r0, #0]
 800668a:	e796      	b.n	80065ba <powf+0x46>
 800668c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006690:	e793      	b.n	80065ba <powf+0x46>
 8006692:	bf00      	nop
 8006694:	20000470 	.word	0x20000470
 8006698:	00000000 	.word	0x00000000
 800669c:	ff800000 	.word	0xff800000
 80066a0:	7f800000 	.word	0x7f800000

080066a4 <__ieee754_powf>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	ee10 5a90 	vmov	r5, s1
 80066ac:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80066b0:	ed2d 8b02 	vpush	{d8}
 80066b4:	eeb0 8a40 	vmov.f32	s16, s0
 80066b8:	eef0 8a60 	vmov.f32	s17, s1
 80066bc:	f000 8291 	beq.w	8006be2 <__ieee754_powf+0x53e>
 80066c0:	ee10 8a10 	vmov	r8, s0
 80066c4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80066c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80066cc:	dc06      	bgt.n	80066dc <__ieee754_powf+0x38>
 80066ce:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80066d2:	dd0a      	ble.n	80066ea <__ieee754_powf+0x46>
 80066d4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80066d8:	f000 8283 	beq.w	8006be2 <__ieee754_powf+0x53e>
 80066dc:	ecbd 8b02 	vpop	{d8}
 80066e0:	48d8      	ldr	r0, [pc, #864]	; (8006a44 <__ieee754_powf+0x3a0>)
 80066e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066e6:	f000 bab5 	b.w	8006c54 <nanf>
 80066ea:	f1b8 0f00 	cmp.w	r8, #0
 80066ee:	da1f      	bge.n	8006730 <__ieee754_powf+0x8c>
 80066f0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80066f4:	da2e      	bge.n	8006754 <__ieee754_powf+0xb0>
 80066f6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80066fa:	f2c0 827b 	blt.w	8006bf4 <__ieee754_powf+0x550>
 80066fe:	15fb      	asrs	r3, r7, #23
 8006700:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006704:	fa47 f603 	asr.w	r6, r7, r3
 8006708:	fa06 f303 	lsl.w	r3, r6, r3
 800670c:	42bb      	cmp	r3, r7
 800670e:	f040 8271 	bne.w	8006bf4 <__ieee754_powf+0x550>
 8006712:	f006 0601 	and.w	r6, r6, #1
 8006716:	f1c6 0602 	rsb	r6, r6, #2
 800671a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800671e:	d120      	bne.n	8006762 <__ieee754_powf+0xbe>
 8006720:	2d00      	cmp	r5, #0
 8006722:	f280 8264 	bge.w	8006bee <__ieee754_powf+0x54a>
 8006726:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800672a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800672e:	e00d      	b.n	800674c <__ieee754_powf+0xa8>
 8006730:	2600      	movs	r6, #0
 8006732:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006736:	d1f0      	bne.n	800671a <__ieee754_powf+0x76>
 8006738:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800673c:	f000 8251 	beq.w	8006be2 <__ieee754_powf+0x53e>
 8006740:	dd0a      	ble.n	8006758 <__ieee754_powf+0xb4>
 8006742:	2d00      	cmp	r5, #0
 8006744:	f280 8250 	bge.w	8006be8 <__ieee754_powf+0x544>
 8006748:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8006a48 <__ieee754_powf+0x3a4>
 800674c:	ecbd 8b02 	vpop	{d8}
 8006750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006754:	2602      	movs	r6, #2
 8006756:	e7ec      	b.n	8006732 <__ieee754_powf+0x8e>
 8006758:	2d00      	cmp	r5, #0
 800675a:	daf5      	bge.n	8006748 <__ieee754_powf+0xa4>
 800675c:	eeb1 0a68 	vneg.f32	s0, s17
 8006760:	e7f4      	b.n	800674c <__ieee754_powf+0xa8>
 8006762:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006766:	d102      	bne.n	800676e <__ieee754_powf+0xca>
 8006768:	ee28 0a08 	vmul.f32	s0, s16, s16
 800676c:	e7ee      	b.n	800674c <__ieee754_powf+0xa8>
 800676e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8006772:	eeb0 0a48 	vmov.f32	s0, s16
 8006776:	d108      	bne.n	800678a <__ieee754_powf+0xe6>
 8006778:	f1b8 0f00 	cmp.w	r8, #0
 800677c:	db05      	blt.n	800678a <__ieee754_powf+0xe6>
 800677e:	ecbd 8b02 	vpop	{d8}
 8006782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006786:	f000 ba4d 	b.w	8006c24 <__ieee754_sqrtf>
 800678a:	f000 fa4e 	bl	8006c2a <fabsf>
 800678e:	b124      	cbz	r4, 800679a <__ieee754_powf+0xf6>
 8006790:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006794:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006798:	d117      	bne.n	80067ca <__ieee754_powf+0x126>
 800679a:	2d00      	cmp	r5, #0
 800679c:	bfbc      	itt	lt
 800679e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80067a2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80067a6:	f1b8 0f00 	cmp.w	r8, #0
 80067aa:	dacf      	bge.n	800674c <__ieee754_powf+0xa8>
 80067ac:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80067b0:	ea54 0306 	orrs.w	r3, r4, r6
 80067b4:	d104      	bne.n	80067c0 <__ieee754_powf+0x11c>
 80067b6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80067ba:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80067be:	e7c5      	b.n	800674c <__ieee754_powf+0xa8>
 80067c0:	2e01      	cmp	r6, #1
 80067c2:	d1c3      	bne.n	800674c <__ieee754_powf+0xa8>
 80067c4:	eeb1 0a40 	vneg.f32	s0, s0
 80067c8:	e7c0      	b.n	800674c <__ieee754_powf+0xa8>
 80067ca:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80067ce:	3801      	subs	r0, #1
 80067d0:	ea56 0300 	orrs.w	r3, r6, r0
 80067d4:	d104      	bne.n	80067e0 <__ieee754_powf+0x13c>
 80067d6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80067da:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80067de:	e7b5      	b.n	800674c <__ieee754_powf+0xa8>
 80067e0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80067e4:	dd6b      	ble.n	80068be <__ieee754_powf+0x21a>
 80067e6:	4b99      	ldr	r3, [pc, #612]	; (8006a4c <__ieee754_powf+0x3a8>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	dc06      	bgt.n	80067fa <__ieee754_powf+0x156>
 80067ec:	2d00      	cmp	r5, #0
 80067ee:	daab      	bge.n	8006748 <__ieee754_powf+0xa4>
 80067f0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8006a50 <__ieee754_powf+0x3ac>
 80067f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80067f8:	e7a8      	b.n	800674c <__ieee754_powf+0xa8>
 80067fa:	4b96      	ldr	r3, [pc, #600]	; (8006a54 <__ieee754_powf+0x3b0>)
 80067fc:	429c      	cmp	r4, r3
 80067fe:	dd02      	ble.n	8006806 <__ieee754_powf+0x162>
 8006800:	2d00      	cmp	r5, #0
 8006802:	dcf5      	bgt.n	80067f0 <__ieee754_powf+0x14c>
 8006804:	e7a0      	b.n	8006748 <__ieee754_powf+0xa4>
 8006806:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800680a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800680e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8006a58 <__ieee754_powf+0x3b4>
 8006812:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006816:	eee0 6a67 	vfms.f32	s13, s0, s15
 800681a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800681e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006822:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006a5c <__ieee754_powf+0x3b8>
 800682e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006832:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006a60 <__ieee754_powf+0x3bc>
 8006836:	eee0 7a07 	vfma.f32	s15, s0, s14
 800683a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006a64 <__ieee754_powf+0x3c0>
 800683e:	eef0 6a67 	vmov.f32	s13, s15
 8006842:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006846:	ee16 3a90 	vmov	r3, s13
 800684a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800684e:	f023 030f 	bic.w	r3, r3, #15
 8006852:	ee00 3a90 	vmov	s1, r3
 8006856:	eee0 0a47 	vfms.f32	s1, s0, s14
 800685a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800685e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006862:	f025 050f 	bic.w	r5, r5, #15
 8006866:	ee07 5a10 	vmov	s14, r5
 800686a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800686e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eee7 0a27 	vfma.f32	s1, s14, s15
 800687a:	3e01      	subs	r6, #1
 800687c:	ea56 0200 	orrs.w	r2, r6, r0
 8006880:	ee07 5a10 	vmov	s14, r5
 8006884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006888:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800688c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006890:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006894:	ee17 4a10 	vmov	r4, s14
 8006898:	bf08      	it	eq
 800689a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800689e:	2c00      	cmp	r4, #0
 80068a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80068a4:	f340 8184 	ble.w	8006bb0 <__ieee754_powf+0x50c>
 80068a8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80068ac:	f340 80fc 	ble.w	8006aa8 <__ieee754_powf+0x404>
 80068b0:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006a50 <__ieee754_powf+0x3ac>
 80068b4:	ee28 0a27 	vmul.f32	s0, s16, s15
 80068b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80068bc:	e746      	b.n	800674c <__ieee754_powf+0xa8>
 80068be:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80068c2:	bf01      	itttt	eq
 80068c4:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8006a68 <__ieee754_powf+0x3c4>
 80068c8:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80068cc:	f06f 0217 	mvneq.w	r2, #23
 80068d0:	ee17 4a90 	vmoveq	r4, s15
 80068d4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80068d8:	bf18      	it	ne
 80068da:	2200      	movne	r2, #0
 80068dc:	3b7f      	subs	r3, #127	; 0x7f
 80068de:	4413      	add	r3, r2
 80068e0:	4a62      	ldr	r2, [pc, #392]	; (8006a6c <__ieee754_powf+0x3c8>)
 80068e2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80068e6:	4294      	cmp	r4, r2
 80068e8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80068ec:	dd06      	ble.n	80068fc <__ieee754_powf+0x258>
 80068ee:	4a60      	ldr	r2, [pc, #384]	; (8006a70 <__ieee754_powf+0x3cc>)
 80068f0:	4294      	cmp	r4, r2
 80068f2:	f340 80a4 	ble.w	8006a3e <__ieee754_powf+0x39a>
 80068f6:	3301      	adds	r3, #1
 80068f8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80068fc:	2400      	movs	r4, #0
 80068fe:	4a5d      	ldr	r2, [pc, #372]	; (8006a74 <__ieee754_powf+0x3d0>)
 8006900:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006904:	ee07 1a90 	vmov	s15, r1
 8006908:	ed92 7a00 	vldr	s14, [r2]
 800690c:	4a5a      	ldr	r2, [pc, #360]	; (8006a78 <__ieee754_powf+0x3d4>)
 800690e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006912:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006916:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800691a:	1049      	asrs	r1, r1, #1
 800691c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006920:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006924:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006928:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800692c:	ee06 1a10 	vmov	s12, r1
 8006930:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006934:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006938:	ee14 7a90 	vmov	r7, s9
 800693c:	4017      	ands	r7, r2
 800693e:	ee05 7a90 	vmov	s11, r7
 8006942:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8006946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800694a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8006a7c <__ieee754_powf+0x3d8>
 800694e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8006952:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006956:	ee25 6a26 	vmul.f32	s12, s10, s13
 800695a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8006a80 <__ieee754_powf+0x3dc>
 800695e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006962:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a84 <__ieee754_powf+0x3e0>
 8006966:	eee7 6a27 	vfma.f32	s13, s14, s15
 800696a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006a58 <__ieee754_powf+0x3b4>
 800696e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006972:	eddf 6a45 	vldr	s13, [pc, #276]	; 8006a88 <__ieee754_powf+0x3e4>
 8006976:	eee7 6a27 	vfma.f32	s13, s14, s15
 800697a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006a8c <__ieee754_powf+0x3e8>
 800697e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006982:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8006986:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800698a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800698e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006992:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006996:	eef0 7a45 	vmov.f32	s15, s10
 800699a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a2:	ee17 1a90 	vmov	r1, s15
 80069a6:	4011      	ands	r1, r2
 80069a8:	ee07 1a90 	vmov	s15, r1
 80069ac:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80069b0:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80069b4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80069b8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80069bc:	eea6 7a27 	vfma.f32	s14, s12, s15
 80069c0:	eeb0 6a47 	vmov.f32	s12, s14
 80069c4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80069c8:	ee16 1a10 	vmov	r1, s12
 80069cc:	4011      	ands	r1, r2
 80069ce:	ee06 1a90 	vmov	s13, r1
 80069d2:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80069d6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006a90 <__ieee754_powf+0x3ec>
 80069da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a94 <__ieee754_powf+0x3f0>
 80069de:	ee37 7a66 	vsub.f32	s14, s14, s13
 80069e2:	ee06 1a10 	vmov	s12, r1
 80069e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069ea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006a98 <__ieee754_powf+0x3f4>
 80069ee:	492b      	ldr	r1, [pc, #172]	; (8006a9c <__ieee754_powf+0x3f8>)
 80069f0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80069f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069f8:	edd1 7a00 	vldr	s15, [r1]
 80069fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a00:	ee07 3a90 	vmov	s15, r3
 8006a04:	4b26      	ldr	r3, [pc, #152]	; (8006aa0 <__ieee754_powf+0x3fc>)
 8006a06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006a0a:	eef0 7a47 	vmov.f32	s15, s14
 8006a0e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006a12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a16:	edd4 0a00 	vldr	s1, [r4]
 8006a1a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a22:	ee17 3a90 	vmov	r3, s15
 8006a26:	4013      	ands	r3, r2
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006a30:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006a34:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006a38:	ee77 7a66 	vsub.f32	s15, s14, s13
 8006a3c:	e70f      	b.n	800685e <__ieee754_powf+0x1ba>
 8006a3e:	2401      	movs	r4, #1
 8006a40:	e75d      	b.n	80068fe <__ieee754_powf+0x25a>
 8006a42:	bf00      	nop
 8006a44:	08006e75 	.word	0x08006e75
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	3f7ffff7 	.word	0x3f7ffff7
 8006a50:	7149f2ca 	.word	0x7149f2ca
 8006a54:	3f800007 	.word	0x3f800007
 8006a58:	3eaaaaab 	.word	0x3eaaaaab
 8006a5c:	3fb8aa3b 	.word	0x3fb8aa3b
 8006a60:	36eca570 	.word	0x36eca570
 8006a64:	3fb8aa00 	.word	0x3fb8aa00
 8006a68:	4b800000 	.word	0x4b800000
 8006a6c:	001cc471 	.word	0x001cc471
 8006a70:	005db3d6 	.word	0x005db3d6
 8006a74:	08006ea4 	.word	0x08006ea4
 8006a78:	fffff000 	.word	0xfffff000
 8006a7c:	3e6c3255 	.word	0x3e6c3255
 8006a80:	3e53f142 	.word	0x3e53f142
 8006a84:	3e8ba305 	.word	0x3e8ba305
 8006a88:	3edb6db7 	.word	0x3edb6db7
 8006a8c:	3f19999a 	.word	0x3f19999a
 8006a90:	3f76384f 	.word	0x3f76384f
 8006a94:	3f763800 	.word	0x3f763800
 8006a98:	369dc3a0 	.word	0x369dc3a0
 8006a9c:	08006eb4 	.word	0x08006eb4
 8006aa0:	08006eac 	.word	0x08006eac
 8006aa4:	3338aa3c 	.word	0x3338aa3c
 8006aa8:	f040 8092 	bne.w	8006bd0 <__ieee754_powf+0x52c>
 8006aac:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006aa4 <__ieee754_powf+0x400>
 8006ab0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ab4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006ab8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac0:	f73f aef6 	bgt.w	80068b0 <__ieee754_powf+0x20c>
 8006ac4:	15db      	asrs	r3, r3, #23
 8006ac6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006aca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006ace:	4103      	asrs	r3, r0
 8006ad0:	4423      	add	r3, r4
 8006ad2:	4949      	ldr	r1, [pc, #292]	; (8006bf8 <__ieee754_powf+0x554>)
 8006ad4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006ad8:	3a7f      	subs	r2, #127	; 0x7f
 8006ada:	4111      	asrs	r1, r2
 8006adc:	ea23 0101 	bic.w	r1, r3, r1
 8006ae0:	ee07 1a10 	vmov	s14, r1
 8006ae4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006ae8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006aec:	f1c2 0217 	rsb	r2, r2, #23
 8006af0:	4110      	asrs	r0, r2
 8006af2:	2c00      	cmp	r4, #0
 8006af4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006af8:	bfb8      	it	lt
 8006afa:	4240      	neglt	r0, r0
 8006afc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006b00:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8006bfc <__ieee754_powf+0x558>
 8006b04:	ee17 3a10 	vmov	r3, s14
 8006b08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b0c:	f023 030f 	bic.w	r3, r3, #15
 8006b10:	ee07 3a10 	vmov	s14, r3
 8006b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b18:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006b1c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006c00 <__ieee754_powf+0x55c>
 8006b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b24:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006b28:	eddf 6a36 	vldr	s13, [pc, #216]	; 8006c04 <__ieee754_powf+0x560>
 8006b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b30:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006b34:	eeb0 6a40 	vmov.f32	s12, s0
 8006b38:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006b3c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006b40:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006b44:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006c08 <__ieee754_powf+0x564>
 8006b48:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8006c0c <__ieee754_powf+0x568>
 8006b4c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006b50:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006c10 <__ieee754_powf+0x56c>
 8006b54:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006b58:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006c14 <__ieee754_powf+0x570>
 8006b5c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006b60:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006c18 <__ieee754_powf+0x574>
 8006b64:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006b68:	eeb0 6a40 	vmov.f32	s12, s0
 8006b6c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006b70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006b74:	eeb0 7a46 	vmov.f32	s14, s12
 8006b78:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006b7c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006b80:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006b84:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b8c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006b90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006b94:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006b98:	ee10 3a10 	vmov	r3, s0
 8006b9c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ba4:	da1a      	bge.n	8006bdc <__ieee754_powf+0x538>
 8006ba6:	f000 f8b7 	bl	8006d18 <scalbnf>
 8006baa:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006bae:	e5cd      	b.n	800674c <__ieee754_powf+0xa8>
 8006bb0:	4a1a      	ldr	r2, [pc, #104]	; (8006c1c <__ieee754_powf+0x578>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	dd02      	ble.n	8006bbc <__ieee754_powf+0x518>
 8006bb6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8006c20 <__ieee754_powf+0x57c>
 8006bba:	e67b      	b.n	80068b4 <__ieee754_powf+0x210>
 8006bbc:	d108      	bne.n	8006bd0 <__ieee754_powf+0x52c>
 8006bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bc2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bca:	f6ff af7b 	blt.w	8006ac4 <__ieee754_powf+0x420>
 8006bce:	e7f2      	b.n	8006bb6 <__ieee754_powf+0x512>
 8006bd0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006bd4:	f73f af76 	bgt.w	8006ac4 <__ieee754_powf+0x420>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e78f      	b.n	8006afc <__ieee754_powf+0x458>
 8006bdc:	ee00 3a10 	vmov	s0, r3
 8006be0:	e7e3      	b.n	8006baa <__ieee754_powf+0x506>
 8006be2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006be6:	e5b1      	b.n	800674c <__ieee754_powf+0xa8>
 8006be8:	eeb0 0a68 	vmov.f32	s0, s17
 8006bec:	e5ae      	b.n	800674c <__ieee754_powf+0xa8>
 8006bee:	eeb0 0a48 	vmov.f32	s0, s16
 8006bf2:	e5ab      	b.n	800674c <__ieee754_powf+0xa8>
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	e590      	b.n	800671a <__ieee754_powf+0x76>
 8006bf8:	007fffff 	.word	0x007fffff
 8006bfc:	3f317218 	.word	0x3f317218
 8006c00:	35bfbe8c 	.word	0x35bfbe8c
 8006c04:	3f317200 	.word	0x3f317200
 8006c08:	3331bb4c 	.word	0x3331bb4c
 8006c0c:	b5ddea0e 	.word	0xb5ddea0e
 8006c10:	388ab355 	.word	0x388ab355
 8006c14:	bb360b61 	.word	0xbb360b61
 8006c18:	3e2aaaab 	.word	0x3e2aaaab
 8006c1c:	43160000 	.word	0x43160000
 8006c20:	0da24260 	.word	0x0da24260

08006c24 <__ieee754_sqrtf>:
 8006c24:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006c28:	4770      	bx	lr

08006c2a <fabsf>:
 8006c2a:	ee10 3a10 	vmov	r3, s0
 8006c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c32:	ee00 3a10 	vmov	s0, r3
 8006c36:	4770      	bx	lr

08006c38 <finitef>:
 8006c38:	b082      	sub	sp, #8
 8006c3a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006c3e:	9801      	ldr	r0, [sp, #4]
 8006c40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006c44:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006c48:	bfac      	ite	ge
 8006c4a:	2000      	movge	r0, #0
 8006c4c:	2001      	movlt	r0, #1
 8006c4e:	b002      	add	sp, #8
 8006c50:	4770      	bx	lr
	...

08006c54 <nanf>:
 8006c54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c5c <nanf+0x8>
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	7fc00000 	.word	0x7fc00000

08006c60 <rintf>:
 8006c60:	ee10 2a10 	vmov	r2, s0
 8006c64:	b513      	push	{r0, r1, r4, lr}
 8006c66:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006c6a:	397f      	subs	r1, #127	; 0x7f
 8006c6c:	2916      	cmp	r1, #22
 8006c6e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006c72:	dc47      	bgt.n	8006d04 <rintf+0xa4>
 8006c74:	b32b      	cbz	r3, 8006cc2 <rintf+0x62>
 8006c76:	2900      	cmp	r1, #0
 8006c78:	ee10 3a10 	vmov	r3, s0
 8006c7c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8006c80:	da21      	bge.n	8006cc6 <rintf+0x66>
 8006c82:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8006c86:	425b      	negs	r3, r3
 8006c88:	4921      	ldr	r1, [pc, #132]	; (8006d10 <rintf+0xb0>)
 8006c8a:	0a5b      	lsrs	r3, r3, #9
 8006c8c:	0d12      	lsrs	r2, r2, #20
 8006c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c92:	0512      	lsls	r2, r2, #20
 8006c94:	4313      	orrs	r3, r2
 8006c96:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	edd1 6a00 	vldr	s13, [r1]
 8006ca2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006ca6:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006caa:	eddd 7a01 	vldr	s15, [sp, #4]
 8006cae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cb2:	ee17 3a90 	vmov	r3, s15
 8006cb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cba:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006cbe:	ee00 3a10 	vmov	s0, r3
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <rintf+0xb4>)
 8006cc8:	410a      	asrs	r2, r1
 8006cca:	4213      	tst	r3, r2
 8006ccc:	d0f9      	beq.n	8006cc2 <rintf+0x62>
 8006cce:	0854      	lsrs	r4, r2, #1
 8006cd0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8006cd4:	d006      	beq.n	8006ce4 <rintf+0x84>
 8006cd6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006cda:	ea23 0304 	bic.w	r3, r3, r4
 8006cde:	fa42 f101 	asr.w	r1, r2, r1
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	4a0a      	ldr	r2, [pc, #40]	; (8006d10 <rintf+0xb0>)
 8006ce6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8006cea:	ed90 7a00 	vldr	s14, [r0]
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cf6:	edcd 7a01 	vstr	s15, [sp, #4]
 8006cfa:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006cfe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006d02:	e7de      	b.n	8006cc2 <rintf+0x62>
 8006d04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006d08:	d3db      	bcc.n	8006cc2 <rintf+0x62>
 8006d0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006d0e:	e7d8      	b.n	8006cc2 <rintf+0x62>
 8006d10:	08006ebc 	.word	0x08006ebc
 8006d14:	007fffff 	.word	0x007fffff

08006d18 <scalbnf>:
 8006d18:	ee10 3a10 	vmov	r3, s0
 8006d1c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006d20:	d025      	beq.n	8006d6e <scalbnf+0x56>
 8006d22:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006d26:	d302      	bcc.n	8006d2e <scalbnf+0x16>
 8006d28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006d2c:	4770      	bx	lr
 8006d2e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006d32:	d122      	bne.n	8006d7a <scalbnf+0x62>
 8006d34:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <scalbnf+0xc8>)
 8006d36:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006de4 <scalbnf+0xcc>
 8006d3a:	4298      	cmp	r0, r3
 8006d3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006d40:	db16      	blt.n	8006d70 <scalbnf+0x58>
 8006d42:	ee10 3a10 	vmov	r3, s0
 8006d46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006d4a:	3a19      	subs	r2, #25
 8006d4c:	4402      	add	r2, r0
 8006d4e:	2afe      	cmp	r2, #254	; 0xfe
 8006d50:	dd15      	ble.n	8006d7e <scalbnf+0x66>
 8006d52:	ee10 3a10 	vmov	r3, s0
 8006d56:	eddf 7a24 	vldr	s15, [pc, #144]	; 8006de8 <scalbnf+0xd0>
 8006d5a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006dec <scalbnf+0xd4>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	eeb0 7a67 	vmov.f32	s14, s15
 8006d64:	bfb8      	it	lt
 8006d66:	eef0 7a66 	vmovlt.f32	s15, s13
 8006d6a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006d6e:	4770      	bx	lr
 8006d70:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006df0 <scalbnf+0xd8>
 8006d74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006d78:	4770      	bx	lr
 8006d7a:	0dd2      	lsrs	r2, r2, #23
 8006d7c:	e7e6      	b.n	8006d4c <scalbnf+0x34>
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	dd06      	ble.n	8006d90 <scalbnf+0x78>
 8006d82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d86:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006d8a:	ee00 3a10 	vmov	s0, r3
 8006d8e:	4770      	bx	lr
 8006d90:	f112 0f16 	cmn.w	r2, #22
 8006d94:	da1a      	bge.n	8006dcc <scalbnf+0xb4>
 8006d96:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d9a:	4298      	cmp	r0, r3
 8006d9c:	ee10 3a10 	vmov	r3, s0
 8006da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	dd0a      	ble.n	8006dbc <scalbnf+0xa4>
 8006da6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006de8 <scalbnf+0xd0>
 8006daa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006dec <scalbnf+0xd4>
 8006dae:	eef0 7a40 	vmov.f32	s15, s0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bf18      	it	ne
 8006db6:	eeb0 0a47 	vmovne.f32	s0, s14
 8006dba:	e7db      	b.n	8006d74 <scalbnf+0x5c>
 8006dbc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006df0 <scalbnf+0xd8>
 8006dc0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006df4 <scalbnf+0xdc>
 8006dc4:	eef0 7a40 	vmov.f32	s15, s0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	e7f3      	b.n	8006db4 <scalbnf+0x9c>
 8006dcc:	3219      	adds	r2, #25
 8006dce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006dd2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006dd6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006df8 <scalbnf+0xe0>
 8006dda:	ee07 3a10 	vmov	s14, r3
 8006dde:	e7c4      	b.n	8006d6a <scalbnf+0x52>
 8006de0:	ffff3cb0 	.word	0xffff3cb0
 8006de4:	4c000000 	.word	0x4c000000
 8006de8:	7149f2ca 	.word	0x7149f2ca
 8006dec:	f149f2ca 	.word	0xf149f2ca
 8006df0:	0da24260 	.word	0x0da24260
 8006df4:	8da24260 	.word	0x8da24260
 8006df8:	33000000 	.word	0x33000000

08006dfc <_init>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

08006e08 <_fini>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr
