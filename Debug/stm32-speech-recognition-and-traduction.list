
stm32-speech-recognition-and-traduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e058  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800e1e8  0800e1e8  0001e1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb60  0800eb60  000205e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb60  0800eb60  0001eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb68  0800eb68  000205e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb68  0800eb68  0001eb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb6c  0800eb6c  0001eb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e8  20000000  0800eb70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051e4  200005e8  0800f158  000205e8  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  200057cc  0800f158  000257cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea15  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002438  00000000  00000000  0002f02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00031468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  00031eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021984  00000000  00000000  00032810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e242  00000000  00000000  00054194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cab3c  00000000  00000000  000623d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  0012cf12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  0012cfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00131510  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001315dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005e8 	.word	0x200005e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1d0 	.word	0x0800e1d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005ec 	.word	0x200005ec
 80001cc:	0800e1d0 	.word	0x0800e1d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <GetCoefficient>:
 * binSize - the size of the spectralData array, usually a power of 2
 * m - The mth MFCC coefficient to compute
 *
 */
double GetCoefficient(double* spectralData, unsigned int samplingRate, unsigned int NumFilters, unsigned int binSize, unsigned int m)
{
 8000ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff4:	b08c      	sub	sp, #48	; 0x30
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
	double result = 0.0f;
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double outerSum = 0.0f;
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double innerSum = 0.0f;
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c7 2308 	strd	r2, r3, [r7, #32]
	unsigned int k, l;

	// 0 <= m < L
	if(m >= NumFilters)
 8001024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d304      	bcc.n	8001036 <GetCoefficient+0x46>
	{
		// This represents an error condition - the specified coefficient is greater than or equal to the number of filters. The behavior in this case is undefined.
		return 0.0f;
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e0ab      	b.n	800118e <GetCoefficient+0x19e>
	}

	result = NormalizationFactor(NumFilters, m);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f8b7 	bl	80011b0 <NormalizationFactor>
 8001042:	ed87 0b04 	vstr	d0, [r7, #16]

	
	for(l = 1; l <= NumFilters; l++)
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	e08f      	b.n	800116c <GetCoefficient+0x17c>
	{
		// Compute inner sum
		innerSum = 0.0f;
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(k = 0; k < binSize - 1; k++)
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	e023      	b.n	80010a6 <GetCoefficient+0xb6>
		{
			innerSum += fabs(spectralData[k] * GetFilterParameter(samplingRate, binSize, k, l));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	e9d3 8900 	ldrd	r8, r9, [r3]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f000 f8e1 	bl	8001238 <GetFilterParameter>
 8001076:	ec53 2b10 	vmov	r2, r3, d0
 800107a:	4640      	mov	r0, r8
 800107c:	4649      	mov	r1, r9
 800107e:	f7ff fabb 	bl	80005f8 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4614      	mov	r4, r2
 8001088:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800108c:	4622      	mov	r2, r4
 800108e:	462b      	mov	r3, r5
 8001090:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001094:	f7ff f8fa 	bl	800028c <__adddf3>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(k = 0; k < binSize - 1; k++)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	3301      	adds	r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3d6      	bcc.n	800105e <GetCoefficient+0x6e>
		}

		if(innerSum > 0.0f)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010bc:	f7ff fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <GetCoefficient+0xe2>
		{
			innerSum = log(innerSum); // The log of 0 is undefined, so don't use it
 80010c6:	ed97 0b08 	vldr	d0, [r7, #32]
 80010ca:	f00a facd 	bl	800b668 <log>
 80010ce:	ed87 0b08 	vstr	d0, [r7, #32]
		}

		innerSum = innerSum * cos(((m * mfcc_PI) / NumFilters) * (l - 0.5f));
 80010d2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010d4:	f7ff fa16 	bl	8000504 <__aeabi_ui2d>
 80010d8:	a333      	add	r3, pc, #204	; (adr r3, 80011a8 <GetCoefficient+0x1b8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fa8b 	bl	80005f8 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4690      	mov	r8, r2
 80010e8:	4699      	mov	r9, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fa0a 	bl	8000504 <__aeabi_ui2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4640      	mov	r0, r8
 80010f6:	4649      	mov	r1, r9
 80010f8:	f7ff fba8 	bl	800084c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4690      	mov	r8, r2
 8001102:	4699      	mov	r9, r3
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001116:	ee17 0a90 	vmov	r0, s15
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4640      	mov	r0, r8
 8001124:	4649      	mov	r1, r9
 8001126:	f7ff fa67 	bl	80005f8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	ec43 2b17 	vmov	d7, r2, r3
 8001132:	eeb0 0a47 	vmov.f32	s0, s14
 8001136:	eef0 0a67 	vmov.f32	s1, s15
 800113a:	f00a fa15 	bl	800b568 <cos>
 800113e:	ec53 2b10 	vmov	r2, r3, d0
 8001142:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	e9c7 2308 	strd	r2, r3, [r7, #32]

		outerSum += innerSum;
 8001152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800115a:	f7ff f897 	bl	800028c <__adddf3>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for(l = 1; l <= NumFilters; l++)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	3301      	adds	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	f67f af6b 	bls.w	800104c <GetCoefficient+0x5c>
	}

	result *= outerSum;
 8001176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800117a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800117e:	f7ff fa3b 	bl	80005f8 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return result;
 800118a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800118e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001192:	eeb0 0a47 	vmov.f32	s0, s14
 8001196:	eef0 0a67 	vmov.f32	s1, s15
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011a2:	bf00      	nop
 80011a4:	f3af 8000 	nop.w
 80011a8:	54442d18 	.word	0x54442d18
 80011ac:	400921fb 	.word	0x400921fb

080011b0 <NormalizationFactor>:
/* 
 * Computes the Normalization Factor (Equation 6)
 * Used for internal computation only - not to be called directly
 */
double NormalizationFactor(int NumFilters, int m)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	double normalizationFactor = 0.0f;
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(m == 0)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d115      	bne.n	80011f8 <NormalizationFactor+0x48>
	{
		normalizationFactor = sqrt(1.0f / NumFilters);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011de:	ee16 0a90 	vmov	r0, s13
 80011e2:	f7ff f9b1 	bl	8000548 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	ec43 2b10 	vmov	d0, r2, r3
 80011ee:	f00a fb31 	bl	800b854 <sqrt>
 80011f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80011f6:	e014      	b.n	8001222 <NormalizationFactor+0x72>
	}
	else 
	{
		normalizationFactor = sqrt(2.0f / NumFilters);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001202:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001206:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800120a:	ee16 0a90 	vmov	r0, s13
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b10 	vmov	d0, r2, r3
 800121a:	f00a fb1b 	bl	800b854 <sqrt>
 800121e:	ed87 0b02 	vstr	d0, [r7, #8]
	}
	
	return normalizationFactor;
 8001222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001226:	ec43 2b17 	vmov	d7, r2, r3
}
 800122a:	eeb0 0a47 	vmov.f32	s0, s14
 800122e:	eef0 0a67 	vmov.f32	s1, s15
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <GetFilterParameter>:
/* 
 * Compute the filter parameter for the specified frequency and filter bands (Eq. 2)
 * Used for internal computation only - not the be called directly
 */
double GetFilterParameter(unsigned int samplingRate, unsigned int binSize, unsigned int frequencyBand, unsigned int filterBand)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
	double filterParameter = 0.0f;
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double boundary = (frequencyBand * samplingRate) / binSize;		// k * Fs / N
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	fb02 f203 	mul.w	r2, r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f94f 	bl	8000504 <__aeabi_ui2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double prevCenterFrequency = GetCenterFrequency(filterBand - 1);		// fc(l - 1) etc.
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3b01      	subs	r3, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f910 	bl	8001498 <GetCenterFrequency>
 8001278:	ed87 0b08 	vstr	d0, [r7, #32]
	double thisCenterFrequency = GetCenterFrequency(filterBand);
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f000 f90b 	bl	8001498 <GetCenterFrequency>
 8001282:	ed87 0b06 	vstr	d0, [r7, #24]
	double nextCenterFrequency = GetCenterFrequency(filterBand + 1);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f904 	bl	8001498 <GetCenterFrequency>
 8001290:	ed87 0b04 	vstr	d0, [r7, #16]

	if(boundary >= 0 && boundary < prevCenterFrequency)
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012a0:	f7ff fc30 	bl	8000b04 <__aeabi_dcmpge>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00f      	beq.n	80012ca <GetFilterParameter+0x92>
 80012aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012b2:	f7ff fc13 	bl	8000adc <__aeabi_dcmplt>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <GetFilterParameter+0x92>
	{
		filterParameter = 0.0f;
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80012c8:	e08e      	b.n	80013e8 <GetFilterParameter+0x1b0>
	}
	else if(boundary >= prevCenterFrequency && boundary < thisCenterFrequency)
 80012ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012d2:	f7ff fc17 	bl	8000b04 <__aeabi_dcmpge>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d030      	beq.n	800133e <GetFilterParameter+0x106>
 80012dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012e4:	f7ff fbfa 	bl	8000adc <__aeabi_dcmplt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d027      	beq.n	800133e <GetFilterParameter+0x106>
	{
		filterParameter = (boundary - prevCenterFrequency) / (thisCenterFrequency - prevCenterFrequency);
 80012ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012f6:	f7fe ffc7 	bl	8000288 <__aeabi_dsub>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4614      	mov	r4, r2
 8001300:	461d      	mov	r5, r3
 8001302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001306:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800130a:	f7fe ffbd 	bl	8000288 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7ff fa99 	bl	800084c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		filterParameter *= GetMagnitudeFactor(filterBand);
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f000 f86c 	bl	8001400 <GetMagnitudeFactor>
 8001328:	ec53 2b10 	vmov	r2, r3, d0
 800132c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800133c:	e054      	b.n	80013e8 <GetFilterParameter+0x1b0>
	}
	else if(boundary >= thisCenterFrequency && boundary < nextCenterFrequency)
 800133e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001346:	f7ff fbdd 	bl	8000b04 <__aeabi_dcmpge>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d030      	beq.n	80013b2 <GetFilterParameter+0x17a>
 8001350:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001354:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001358:	f7ff fbc0 	bl	8000adc <__aeabi_dcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d027      	beq.n	80013b2 <GetFilterParameter+0x17a>
	{
		filterParameter = (boundary - nextCenterFrequency) / (thisCenterFrequency - nextCenterFrequency);
 8001362:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800136a:	f7fe ff8d 	bl	8000288 <__aeabi_dsub>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4614      	mov	r4, r2
 8001374:	461d      	mov	r5, r3
 8001376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800137a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800137e:	f7fe ff83 	bl	8000288 <__aeabi_dsub>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7ff fa5f 	bl	800084c <__aeabi_ddiv>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		filterParameter *= GetMagnitudeFactor(filterBand);
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f000 f832 	bl	8001400 <GetMagnitudeFactor>
 800139c:	ec53 2b10 	vmov	r2, r3, d0
 80013a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013a4:	f7ff f928 	bl	80005f8 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80013b0:	e01a      	b.n	80013e8 <GetFilterParameter+0x1b0>
	}
	else if(boundary >= nextCenterFrequency && boundary < samplingRate)
 80013b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013ba:	f7ff fba3 	bl	8000b04 <__aeabi_dcmpge>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d011      	beq.n	80013e8 <GetFilterParameter+0x1b0>
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff f89d 	bl	8000504 <__aeabi_ui2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013d2:	f7ff fb83 	bl	8000adc <__aeabi_dcmplt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <GetFilterParameter+0x1b0>
	{
		filterParameter = 0.0f;
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return filterParameter;
 80013e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f0:	eeb0 0a47 	vmov.f32	s0, s14
 80013f4:	eef0 0a67 	vmov.f32	s1, s15
 80013f8:	3738      	adds	r7, #56	; 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001400 <GetMagnitudeFactor>:
/* 
 * Compute the band-dependent magnitude factor for the given filter band (Eq. 3)
 * Used for internal computation only - not the be called directly
 */
double GetMagnitudeFactor(unsigned int filterBand)
{
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	double magnitudeFactor = 0.0f;
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	if(filterBand >= 1 && filterBand <= 14)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d008      	beq.n	800142c <GetMagnitudeFactor+0x2c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0e      	cmp	r3, #14
 800141e:	d805      	bhi.n	800142c <GetMagnitudeFactor+0x2c>
	{
		magnitudeFactor = 0.015;
 8001420:	a31b      	add	r3, pc, #108	; (adr r3, 8001490 <GetMagnitudeFactor+0x90>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800142a:	e023      	b.n	8001474 <GetMagnitudeFactor+0x74>
	}
	else if(filterBand >= 15 && filterBand <= 48)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b0e      	cmp	r3, #14
 8001430:	d920      	bls.n	8001474 <GetMagnitudeFactor+0x74>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b30      	cmp	r3, #48	; 0x30
 8001436:	d81d      	bhi.n	8001474 <GetMagnitudeFactor+0x74>
	{
		magnitudeFactor = 2.0f / (GetCenterFrequency(filterBand + 1) - GetCenterFrequency(filterBand -1));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3301      	adds	r3, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f82b 	bl	8001498 <GetCenterFrequency>
 8001442:	ec55 4b10 	vmov	r4, r5, d0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3b01      	subs	r3, #1
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f824 	bl	8001498 <GetCenterFrequency>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe ff16 	bl	8000288 <__aeabi_dsub>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001468:	f7ff f9f0 	bl	800084c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	return magnitudeFactor;
 8001474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001478:	ec43 2b17 	vmov	d7, r2, r3
}
 800147c:	eeb0 0a47 	vmov.f32	s0, s14
 8001480:	eef0 0a67 	vmov.f32	s1, s15
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bdb0      	pop	{r4, r5, r7, pc}
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	eb851eb8 	.word	0xeb851eb8
 8001494:	3f8eb851 	.word	0x3f8eb851

08001498 <GetCenterFrequency>:
 * This where the mel-frequency scaling occurs. Filters are specified so that their
 * center frequencies are equally spaced on the mel scale
 * Used for internal computation only - not the be called directly
 */
double GetCenterFrequency(unsigned int filterBand)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	double centerFrequency = 0.0f;
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double exponent;

	if(filterBand == 0)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <GetCenterFrequency+0x28>
	{
		centerFrequency = 0;
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80014be:	e03f      	b.n	8001540 <GetCenterFrequency+0xa8>
	}
	else if(filterBand >= 1 && filterBand <= 14)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d018      	beq.n	80014f8 <GetCenterFrequency+0x60>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0e      	cmp	r3, #14
 80014ca:	d815      	bhi.n	80014f8 <GetCenterFrequency+0x60>
	{
		centerFrequency = (200.0f * filterBand) / 3.0f;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001568 <GetCenterFrequency+0xd0>
 80014da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014de:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014e6:	ee16 0a90 	vmov	r0, s13
 80014ea:	f7ff f82d 	bl	8000548 <__aeabi_f2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80014f6:	e023      	b.n	8001540 <GetCenterFrequency+0xa8>
	}
	else
	{
		exponent = filterBand - 14.0f;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001502:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800150a:	ee17 0a90 	vmov	r0, s15
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	e9c7 2302 	strd	r2, r3, [r7, #8]
		centerFrequency = pow(1.0711703, exponent);
 800151a:	ed97 1b02 	vldr	d1, [r7, #8]
 800151e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001558 <GetCenterFrequency+0xc0>
 8001522:	f00a f8e9 	bl	800b6f8 <pow>
 8001526:	ed87 0b04 	vstr	d0, [r7, #16]
		centerFrequency *= 1073.4;
 800152a:	a30d      	add	r3, pc, #52	; (adr r3, 8001560 <GetCenterFrequency+0xc8>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001534:	f7ff f860 	bl	80005f8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	
	return centerFrequency;
 8001540:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001544:	ec43 2b17 	vmov	d7, r2, r3
}
 8001548:	eeb0 0a47 	vmov.f32	s0, s14
 800154c:	eef0 0a67 	vmov.f32	s1, s15
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	77ef24e6 	.word	0x77ef24e6
 800155c:	3ff12383 	.word	0x3ff12383
 8001560:	9999999a 	.word	0x9999999a
 8001564:	4090c599 	.word	0x4090c599
 8001568:	43480000 	.word	0x43480000

0800156c <rbit>:
#endif
#endif

// reverse bits (ARM: RBIT)
//__INLINE
uint32_t rbit(uint32_t x) {
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t result;
#if defined(__ARMCC_VERSION) && ((__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300))
  __asm{ rbit result, x }
#elif defined(__GNUC__) && defined(__arm__) && ((__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300))
  __asm("rbit %0, %1":"=r"(result):"r"(x));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	60fb      	str	r3, [r7, #12]
  x = (((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2));
  x = (((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4));
  x = (((x & 0xff00ff00) >> 8) | ((x & 0x00ff00ff) << 8));
  result = (x >> 16) | (x << 16);
#endif
  return result;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <smmlar>:
}

// 32-bit signed multiply -> 32-bit result, add 32-bit (ARM: SMMLAR)
// floating point equivalent: return c + a * b
//__INLINE
int32_t smmlar(int32_t a, int32_t b, int32_t c) {
 800158a:	b480      	push	{r7}
 800158c:	b087      	sub	sp, #28
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  int32_t result;
#if defined(__ARMCC_VERSION) && (__CORTEX_M >= 0x04U)
  __asm{ smmlar result, a, b, c }
#elif defined(__GNUC__) && defined(__arm__) && (__CORTEX_M >= 0x04U)
  __asm("smmlar %0, %1, %2, %3":"=r"(result):"r"(a),"r"(b),"r"(c));
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	fb53 1312 	smmlar	r3, r3, r2, r1
 80015a0:	617b      	str	r3, [r7, #20]
#else
  result = c + ((((int64_t)a * b) + 0x80000000) >> 32);
#endif
  return result;
 80015a2:	697b      	ldr	r3, [r7, #20]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <smmlsr>:

// 32-bit signed multiply -> 32-bit result, subtract 32-bit (ARM: SMMLSR)
// floating point equivalent: return c - a * b
//__INLINE
int32_t smmlsr(int32_t a, int32_t b, int32_t c) {
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  int32_t result;
#if defined(__ARMCC_VERSION) && (__CORTEX_M >= 0x04U)
  __asm{ smmlsr result, a, b, c }
#elif defined(__GNUC__) && defined(__arm__) && (__CORTEX_M >= 0x04U)
  __asm("smmlsr %0, %1, %2, %3":"=r"(result):"r"(a),"r"(b),"r"(c));
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	fb63 1312 	smmlsr	r3, r3, r2, r1
 80015c6:	617b      	str	r3, [r7, #20]
#else
  result = c - ((((int64_t)a * b) + 0x80000000) >> 32);
#endif
  return result;
 80015c8:	697b      	ldr	r3, [r7, #20]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <smmulr>:

// 32-bit signed multiply -> 32-bit result (ARM: SMMULR)
// floating point equivalent: return a * b
//__INLINE
int32_t smmulr(int32_t a, int32_t b) {
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  int32_t result;
#if defined(__ARMCC_VERSION) && (__CORTEX_M >= 0x04U)
  __asm{ smmulr result, a, b }
#elif defined(__GNUC__) && defined(__arm__) && (__CORTEX_M >= 0x04U)
  __asm("smmulr %0, %1, %2":"=r"(result):"r"(a),"r"(b));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	fb53 f312 	smmulr	r3, r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
#else
  result = ((((int64_t)a * b) + 0x80000000) >> 32);
#endif
  return result;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <fft_forward>:

/* == FORWARD AND INVERSE FFT ===================================== */

// Forward FFT transform
// Permutation must be performed prior to (DIT)/after (DIF) call
void fft_forward(fft_complex_t data[], unsigned bits) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0a6      	sub	sp, #152	; 0x98
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  unsigned size = 1 << bits;
 8001602:	2201      	movs	r2, #1
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	67fb      	str	r3, [r7, #124]	; 0x7c
#ifdef FFT_DIT
  unsigned shift = SINE_BITS + 1;
 800160c:	2308      	movs	r3, #8
 800160e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  for(unsigned stride = 2 ; stride <= size; stride <<= 1, shift--) {
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001618:	e1b4      	b.n	8001984 <fft_forward+0x38c>
#else//FFT_DIF
  unsigned shift = SINE_BITS - (bits - 2);
  for(unsigned stride = size; stride >= 2; stride >>= 1, shift++) {
#endif
    // Twiddle and combine for k = 0, having trivial (0 and 1) twiddle factors
    for(unsigned a = 0; a < size; a += stride) {
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001620:	e03f      	b.n	80016a2 <fft_forward+0xaa>
      unsigned b = a + (stride >> 1);
 8001622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800162c:	4413      	add	r3, r2
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
      // # Radix-2 DIT/DIF trivial butterfly #
      FFT_ASSGN(data[a], FFT_D2(FFT_ADD(FFT(A,r), FFT(B,r))), FFT_D2(FFT_ADD(FFT(A,i), FFT(B,i))));
      FFT_ASSGN(data[b], FFT_D2(FFT_SUB(FFT(A,r), FFT(B,r))), FFT_D2(FFT_SUB(FFT(A,i), FFT(B,i))));
*/
      // Special case: GCC optimizes ARMCC style better here
      fft_complex_t A = data[a], B = data[b];
 8001630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	441a      	add	r2, r3
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001642:	e883 0003 	stmia.w	r3, {r0, r1}
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	441a      	add	r2, r3
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001656:	e883 0003 	stmia.w	r3, {r0, r1}
      // # Radix-2 DIT/DIF trivial butterfly #
      data[a] = (fft_complex_t){ .r = FFT_D2(FFT_A(A.r, B.r)), .i = FFT_D2(FFT_A(A.i, B.i)) };
 800165a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	6a39      	ldr	r1, [r7, #32]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	440a      	add	r2, r1
 800166a:	1051      	asrs	r1, r2, #1
 800166c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	4402      	add	r2, r0
 8001672:	1052      	asrs	r2, r2, #1
 8001674:	6019      	str	r1, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
      data[b] = (fft_complex_t){ .r = FFT_D2(FFT_S(A.r, B.r)), .i = FFT_D2(FFT_S(A.i, B.i)) };
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	6a39      	ldr	r1, [r7, #32]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	1a8a      	subs	r2, r1, r2
 8001686:	1051      	asrs	r1, r2, #1
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	1a82      	subs	r2, r0, r2
 800168e:	1052      	asrs	r2, r2, #1
 8001690:	6019      	str	r1, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
    for(unsigned a = 0; a < size; a += stride) {
 8001694:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800169c:	4413      	add	r3, r2
 800169e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80016a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80016a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3ba      	bcc.n	8001622 <fft_forward+0x2a>
    }
    if(!(stride & 2)) {
 80016ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d15c      	bne.n	8001772 <fft_forward+0x17a>
      for(unsigned a = (stride >> 2); a < (stride >> 2) + size; a += stride) {
 80016b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016c2:	e04d      	b.n	8001760 <fft_forward+0x168>
        unsigned b = a + (stride >> 1);
 80016c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80016ce:	4413      	add	r3, r2
 80016d0:	67bb      	str	r3, [r7, #120]	; 0x78
        FFT_DECLC(A, data[a]); FFT_DECLC(B, data[b]);
 80016d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
 80016e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	673b      	str	r3, [r7, #112]	; 0x70
 80016ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	66bb      	str	r3, [r7, #104]	; 0x68
#ifdef FFT_DIT
        // # Radix-2 DIT trivial butterfly #
        FFT_ASSGN(data[a], FFT_D2(FFT_A(FFT(A,r), FFT(B,i))), FFT_D2(FFT_S(FFT(A,i), FFT(B,r))));
 8001706:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800170a:	441a      	add	r2, r3
 800170c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	440b      	add	r3, r1
 8001716:	1052      	asrs	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800171c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800171e:	1ad2      	subs	r2, r2, r3
 8001720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	440b      	add	r3, r1
 800172a:	1052      	asrs	r2, r2, #1
 800172c:	605a      	str	r2, [r3, #4]
        FFT_ASSGN(data[b], FFT_D2(FFT_S(FFT(A,r), FFT(B,i))), FFT_D2(FFT_A(FFT(A,i), FFT(B,r))));
 800172e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001732:	1ad2      	subs	r2, r2, r3
 8001734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	440b      	add	r3, r1
 800173c:	1052      	asrs	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001744:	441a      	add	r2, r3
 8001746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	440b      	add	r3, r1
 800174e:	1052      	asrs	r2, r2, #1
 8001750:	605a      	str	r2, [r3, #4]
      for(unsigned a = (stride >> 2); a < (stride >> 2) + size; a += stride) {
 8001752:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001756:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800175a:	4413      	add	r3, r2
 800175c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001764:	089a      	lsrs	r2, r3, #2
 8001766:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001768:	4413      	add	r3, r2
 800176a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800176e:	429a      	cmp	r2, r3
 8001770:	d3a8      	bcc.n	80016c4 <fft_forward+0xcc>
        FFT_ASSGN(data[b], FFT_D2(FFT_S(FFT(A,i), FFT(B,i))), FFT_D2(FFT_S(FFT(B,r), FFT(A,r))));
#endif
      }
    }
    // Twiddle and combine
    for(unsigned k = 1; k < (stride >> 2); k++) {
 8001772:	2301      	movs	r3, #1
 8001774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001778:	e0f2      	b.n	8001960 <fft_forward+0x368>
      FFT_DECLR(W, FFT_QCOS(k, shift), FFT_QSIN(k, shift));
 800177a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800177e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800178a:	4a84      	ldr	r2, [pc, #528]	; (800199c <fft_forward+0x3a4>)
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	667b      	str	r3, [r7, #100]	; 0x64
 8001792:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	4a7f      	ldr	r2, [pc, #508]	; (800199c <fft_forward+0x3a4>)
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	663b      	str	r3, [r7, #96]	; 0x60
      for(unsigned a = k, b; a < size; a += (stride >> 2) + (stride >> 1)) {
 80017a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017ae:	e0cc      	b.n	800194a <fft_forward+0x352>
        b = a + (stride >> 1);
 80017b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80017ba:	4413      	add	r3, r2
 80017bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        { // These two blocks prevent the compiler from confusing...
          FFT_DECLC(A, data[a]); FFT_DECLC(B, data[b]);
 80017be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80017cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	657b      	str	r3, [r7, #84]	; 0x54
 80017da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	653b      	str	r3, [r7, #80]	; 0x50
 80017e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
#ifdef FFT_DIT
          // # Radix-2 DIT butterfly #
          FFT_DECLR(BW, FFT_MA(FFT(B,i), FFT(W,i), FFT_M(FFT(B,r), FFT(W,r))),
 80017f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80017f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80017f6:	f7ff feee 	bl	80015d6 <smmulr>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001800:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001802:	f7ff fec2 	bl	800158a <smmlar>
 8001806:	64b8      	str	r0, [r7, #72]	; 0x48
 8001808:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800180a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800180c:	f7ff fee3 	bl	80015d6 <smmulr>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001816:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001818:	f7ff feca 	bl	80015b0 <smmlsr>
 800181c:	6478      	str	r0, [r7, #68]	; 0x44
                        FFT_MS(FFT(B,r), FFT(W,i), FFT_M(FFT(B,i), FFT(W,r))));
          FFT_ASSGN(data[a], FFT_A(FFT_D2(FFT(A,r)), FFT(BW,r)), FFT_A(FFT_D2(FFT(A,i)), FFT(BW,i)));
 800181e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001820:	1059      	asrs	r1, r3, #1
 8001822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800182e:	440a      	add	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	1059      	asrs	r1, r3, #1
 8001836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001842:	440a      	add	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
          FFT_ASSGN(data[b], FFT_S(FFT_D2(FFT(A,r)), FFT(BW,r)), FFT_S(FFT_D2(FFT(A,i)), FFT(BW,i)));
 8001846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001848:	1059      	asrs	r1, r3, #1
 800184a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001854:	1a8a      	subs	r2, r1, r2
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	1059      	asrs	r1, r3, #1
 800185c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001866:	1a8a      	subs	r2, r1, r2
 8001868:	605a      	str	r2, [r3, #4]
          FFT_DECLR(D, FFT_S(FFT(A,r), FFT(B,r)), FFT_S(FFT(A,i), FFT(B,i)));
          FFT_ASSGN(data[b], FFT_MA(FFT(D,r), FFT(W,r), FFT_M(FFT(D,i), FFT(W,i))),
                             FFT_MS(FFT(D,r), FFT(W,i), FFT_M(FFT(D,i), FFT(W,r))));
#endif
        }
        a += (stride >> 2); b += (stride >> 2);
 800186a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001874:	4413      	add	r3, r2
 8001876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800187a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001882:	4413      	add	r3, r2
 8001884:	65fb      	str	r3, [r7, #92]	; 0x5c
        { // ...register use resulting in more efficient code
          FFT_DECLC(A, data[a]); FFT_DECLC(B, data[b]);
 8001886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
 8001894:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
#ifdef FFT_DIT
          // # Radix-2 DIT butterfly #
          FFT_DECLR(BW, FFT_MS(FFT(B,r), FFT(W,i), FFT_M(FFT(B,i), FFT(W,r))),
 80018ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80018bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018be:	f7ff fe8a 	bl	80015d6 <smmulr>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018ca:	f7ff fe71 	bl	80015b0 <smmlsr>
 80018ce:	6338      	str	r0, [r7, #48]	; 0x30
 80018d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80018d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018d4:	f7ff fe7f 	bl	80015d6 <smmulr>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018e0:	f7ff fe53 	bl	800158a <smmlar>
 80018e4:	62f8      	str	r0, [r7, #44]	; 0x2c
                        FFT_MA(FFT(B,i), FFT(W,i), FFT_M(FFT(B,r), FFT(W,r))));
          FFT_ASSGN(data[a], FFT_A(FFT_D2(FFT(A,r)), FFT(BW,r)), FFT_S(FFT_D2(FFT(A,i)), FFT(BW,i)));
 80018e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e8:	1059      	asrs	r1, r3, #1
 80018ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f6:	440a      	add	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fc:	1059      	asrs	r1, r3, #1
 80018fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190a:	1a8a      	subs	r2, r1, r2
 800190c:	605a      	str	r2, [r3, #4]
          FFT_ASSGN(data[b], FFT_S(FFT_D2(FFT(A,r)), FFT(BW,r)), FFT_A(FFT_D2(FFT(A,i)), FFT(BW,i)));
 800190e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001910:	1059      	asrs	r1, r3, #1
 8001912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191c:	1a8a      	subs	r2, r1, r2
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001922:	1059      	asrs	r1, r3, #1
 8001924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192e:	440a      	add	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
      for(unsigned a = k, b; a < size; a += (stride >> 2) + (stride >> 1)) {
 8001932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001936:	089a      	lsrs	r2, r3, #2
 8001938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001944:	4413      	add	r3, r2
 8001946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800194a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800194e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001950:	429a      	cmp	r2, r3
 8001952:	f4ff af2d 	bcc.w	80017b0 <fft_forward+0x1b8>
    for(unsigned k = 1; k < (stride >> 2); k++) {
 8001956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800195a:	3301      	adds	r3, #1
 800195c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800196a:	429a      	cmp	r2, r3
 800196c:	f4ff af05 	bcc.w	800177a <fft_forward+0x182>
  for(unsigned stride = 2 ; stride <= size; stride <<= 1, shift--) {
 8001970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800197a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800197e:	3b01      	subs	r3, #1
 8001980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001984:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800198a:	429a      	cmp	r2, r3
 800198c:	f67f ae45 	bls.w	800161a <fft_forward+0x22>
#endif
        }
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3798      	adds	r7, #152	; 0x98
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	0800e248 	.word	0x0800e248

080019a0 <fft_permutate>:
  if(!invert) { data[0].r <<= 1; data[0].i <<= 1; }
}

// Perform bit-reversal permutation on data set
// (Reverses address bits for all data points)
void fft_permutate(fft_complex_t data[], unsigned bits) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  unsigned size  = 1 << bits;
 80019aa:	2201      	movs	r2, #1
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	61bb      	str	r3, [r7, #24]
  unsigned shift = 32 - bits;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f1c3 0320 	rsb	r3, r3, #32
 80019ba:	617b      	str	r3, [r7, #20]
  for(unsigned i = 1; i < size - 1; i++) {
 80019bc:	2301      	movs	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	e03a      	b.n	8001a38 <fft_permutate+0x98>
    unsigned z = rbit(i) >> shift;
 80019c2:	69f8      	ldr	r0, [r7, #28]
 80019c4:	f7ff fdd2 	bl	800156c <rbit>
 80019c8:	4602      	mov	r2, r0
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
 80019d0:	613b      	str	r3, [r7, #16]
    if(z > i) {
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d92b      	bls.n	8001a32 <fft_permutate+0x92>
      fft_t
      t = data[i].r; data[i].r = data[z].r; data[z].r = t;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	441a      	add	r2, r3
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	440b      	add	r3, r1
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]
      t = data[i].i; data[i].i = data[z].i; data[z].i = t;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	441a      	add	r2, r3
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	440b      	add	r3, r1
 8001a22:	6852      	ldr	r2, [r2, #4]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	605a      	str	r2, [r3, #4]
  for(unsigned i = 1; i < size - 1; i++) {
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3bf      	bcc.n	80019c2 <fft_permutate+0x22>
    }
  }
}
 8001a42:	bf00      	nop
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <FifoWrite>:

fft_complex_t pcm_data[WIN_LENGTH];
double spectrum[WIN_LENGTH];
int bits = 8; // log2(HOP_LENGTH)

void FifoWrite(uint16_t data) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
	// TODO set to 0 the counter
	fifobuf[fifo_w_ptr] = data;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <FifoWrite+0x48>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <FifoWrite+0x4c>)
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	fifo_w_ptr++;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <FifoWrite+0x48>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <FifoWrite+0x48>)
 8001a6e:	801a      	strh	r2, [r3, #0]
	if (fifo_w_ptr >= WIN_LENGTH) {
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <FifoWrite+0x48>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d305      	bcc.n	8001a86 <FifoWrite+0x3a>
		fifo_read_enabled = 1;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <FifoWrite+0x50>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		fifo_w_ptr = 0;
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <FifoWrite+0x48>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	801a      	strh	r2, [r3, #0]
	}
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000606 	.word	0x20000606
 8001a98:	20004f64 	.word	0x20004f64
 8001a9c:	2000060a 	.word	0x2000060a

08001aa0 <FifoRead>:

uint16_t FifoRead() {
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
	// TODO set to 0 the counter
	uint16_t val = fifobuf[fifo_r_ptr];
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <FifoRead+0x40>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <FifoRead+0x44>)
 8001aae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ab2:	80fb      	strh	r3, [r7, #6]
	fifo_r_ptr++;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <FifoRead+0x40>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <FifoRead+0x40>)
 8001abe:	801a      	strh	r2, [r3, #0]
	if (fifo_r_ptr >= WIN_LENGTH)
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <FifoRead+0x40>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac8:	d302      	bcc.n	8001ad0 <FifoRead+0x30>
		fifo_r_ptr = 0;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <FifoRead+0x40>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	801a      	strh	r2, [r3, #0]
	return val;
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000608 	.word	0x20000608
 8001ae4:	20004f64 	.word	0x20004f64

08001ae8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001aee:	f000 fc59 	bl	80023a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001af2:	f000 f8e1 	bl	8001cb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001af6:	f000 f9e1 	bl	8001ebc <MX_GPIO_Init>
	MX_DMA_Init();
 8001afa:	f000 f9bf 	bl	8001e7c <MX_DMA_Init>
	MX_I2S2_Init();
 8001afe:	f000 f965 	bl	8001dcc <MX_I2S2_Init>
	MX_CRC_Init();
 8001b02:	f000 f947 	bl	8001d94 <MX_CRC_Init>
	MX_PDM2PCM_Init();
 8001b06:	f003 f983 	bl	8004e10 <MX_PDM2PCM_Init>
	MX_USART2_UART_Init();
 8001b0a:	f000 f98d 	bl	8001e28 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	//__HAL_RCC_CRC_CLK_ENABLE();
	//CRC->CR = CRC_CR_RESET;
	//mic_init(&hi2s2);
	HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0], HOP_LENGTH / 2);
 8001b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b12:	495b      	ldr	r1, [pc, #364]	; (8001c80 <main+0x198>)
 8001b14:	485b      	ldr	r0, [pc, #364]	; (8001c84 <main+0x19c>)
 8001b16:	f001 fc4b 	bl	80033b0 <HAL_I2S_Receive_DMA>
		 }

		 // Read output (predicted y) of neural network
		 y_val = ((float*) out_data)[0];
		 */
		if (rxstate == 1) {
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <main+0x1a0>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d117      	bne.n	8001b52 <main+0x6a>
			// Filter the input values and store the results in an intermediate buffer
			PDM_Filter(&pdmRxBuf[0], &MidBuffer[0], &PDM1_filter_handler);
 8001b22:	4a5a      	ldr	r2, [pc, #360]	; (8001c8c <main+0x1a4>)
 8001b24:	495a      	ldr	r1, [pc, #360]	; (8001c90 <main+0x1a8>)
 8001b26:	4856      	ldr	r0, [pc, #344]	; (8001c80 <main+0x198>)
 8001b28:	f005 f868 	bl	8006bfc <PDM_Filter>

			// The mid buffer has length 16 because the PDM is configured to produce 16 samples
			// of PCM each time it is called
			for (int i = 0; i < 16; i++) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b30:	e009      	b.n	8001b46 <main+0x5e>
				FifoWrite(MidBuffer[i]);
 8001b32:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <main+0x1a8>)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff86 	bl	8001a4c <FifoWrite>
			for (int i = 0; i < 16; i++) {
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3301      	adds	r3, #1
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	2b0f      	cmp	r3, #15
 8001b4a:	ddf2      	ble.n	8001b32 <main+0x4a>
			}

			// Reset rx state
			rxstate = 0;
 8001b4c:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <main+0x1a0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]

		}

		if (rxstate == 2) {
 8001b52:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <main+0x1a0>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d117      	bne.n	8001b8a <main+0xa2>
			// Filter the input values and store the results in an intermediate buffer
			PDM_Filter(&pdmRxBuf[HOP_LENGTH / 2], &MidBuffer[0],
 8001b5a:	4a4c      	ldr	r2, [pc, #304]	; (8001c8c <main+0x1a4>)
 8001b5c:	494c      	ldr	r1, [pc, #304]	; (8001c90 <main+0x1a8>)
 8001b5e:	484d      	ldr	r0, [pc, #308]	; (8001c94 <main+0x1ac>)
 8001b60:	f005 f84c 	bl	8006bfc <PDM_Filter>
					&PDM1_filter_handler);
			for (int i = 0; i < 16; i++) {
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	e009      	b.n	8001b7e <main+0x96>
				FifoWrite(MidBuffer[i]);
 8001b6a:	4a49      	ldr	r2, [pc, #292]	; (8001c90 <main+0x1a8>)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff6a 	bl	8001a4c <FifoWrite>
			for (int i = 0; i < 16; i++) {
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	ddf2      	ble.n	8001b6a <main+0x82>
			 fifo_read_enabled = 1;
			 debug("fifo_read_enabled\r\n");
			 }*/

			// Reset rx state
			rxstate = 0;
 8001b84:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <main+0x1a0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
		}

		if (fifo_read_enabled == 1) {
 8001b8a:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <main+0x1b0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d1c3      	bne.n	8001b1a <main+0x32>
			// Read 1024 samples from the PCM buffer
			for (int i = 0; i < WIN_LENGTH; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e00b      	b.n	8001bb0 <main+0xc8>
				// Cast the value to float
				int32_t data = FifoRead();
 8001b98:	f7ff ff82 	bl	8001aa0 <FifoRead>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	603b      	str	r3, [r7, #0]
				//pcm_buf[i] = data;
				pcm_data[i].r = data;
 8001ba0:	493e      	ldr	r1, [pc, #248]	; (8001c9c <main+0x1b4>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			for (int i = 0; i < WIN_LENGTH; i++) {
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	dbef      	blt.n	8001b98 <main+0xb0>

			 for (int i = 0; i < 128; i++) {
			 pcm_data[i].r = pcm_buf[i];
			 }*/

			fft_permutate(pcm_data, bits);
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <main+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4837      	ldr	r0, [pc, #220]	; (8001c9c <main+0x1b4>)
 8001bc0:	f7ff feee 	bl	80019a0 <fft_permutate>
			fft_forward(pcm_data, bits);
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <main+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4834      	ldr	r0, [pc, #208]	; (8001c9c <main+0x1b4>)
 8001bcc:	f7ff fd14 	bl	80015f8 <fft_forward>

			// make FFT results purely real
			for (int i = 0; i < WIN_LENGTH; i++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e011      	b.n	8001bfa <main+0x112>
				spectrum[i] = pcm_data[i].r;
 8001bd6:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <main+0x1b4>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fca0 	bl	8000524 <__aeabi_i2d>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	482e      	ldr	r0, [pc, #184]	; (8001ca4 <main+0x1bc>)
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	00c9      	lsls	r1, r1, #3
 8001bee:	4401      	add	r1, r0
 8001bf0:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < WIN_LENGTH; i++) {
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c00:	dbe9      	blt.n	8001bd6 <main+0xee>
			 int l = sprintf(b, "-------------------------END\r\n");
			 HAL_UART_Transmit(&huart2, (uint8_t*) b, l,
			 HAL_MAX_DELAY);*/

			// compute the first coefficient
			int numbins = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	613b      	str	r3, [r7, #16]
			for (int coeff = 0; coeff < numbins; coeff++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e026      	b.n	8001c5a <main+0x172>
				float mfcc_result = GetCoefficient(spectrum, 8000, numbins,
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c16:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001c1a:	4822      	ldr	r0, [pc, #136]	; (8001ca4 <main+0x1bc>)
 8001c1c:	f7ff f9e8 	bl	8000ff0 <GetCoefficient>
 8001c20:	ec53 2b10 	vmov	r2, r3, d0
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ffde 	bl	8000be8 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60bb      	str	r3, [r7, #8]
				WIN_LENGTH, coeff);
				int l = sprintf(b, "%f\r\n", mfcc_result);
 8001c30:	68b8      	ldr	r0, [r7, #8]
 8001c32:	f7fe fc89 	bl	8000548 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	491b      	ldr	r1, [pc, #108]	; (8001ca8 <main+0x1c0>)
 8001c3c:	481b      	ldr	r0, [pc, #108]	; (8001cac <main+0x1c4>)
 8001c3e:	f005 ffb9 	bl	8007bb4 <siprintf>
 8001c42:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, (uint8_t*) b, l,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4c:	4917      	ldr	r1, [pc, #92]	; (8001cac <main+0x1c4>)
 8001c4e:	4818      	ldr	r0, [pc, #96]	; (8001cb0 <main+0x1c8>)
 8001c50:	f002 fe15 	bl	800487e <HAL_UART_Transmit>
			for (int coeff = 0; coeff < numbins; coeff++) {
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbd4      	blt.n	8001c0c <main+0x124>
				HAL_MAX_DELAY);
			}
			int l = sprintf(b, "-------------------------END\r\n");
 8001c62:	4914      	ldr	r1, [pc, #80]	; (8001cb4 <main+0x1cc>)
 8001c64:	4811      	ldr	r0, [pc, #68]	; (8001cac <main+0x1c4>)
 8001c66:	f005 ffa5 	bl	8007bb4 <siprintf>
 8001c6a:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t*) b, l,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c74:	490d      	ldr	r1, [pc, #52]	; (8001cac <main+0x1c4>)
 8001c76:	480e      	ldr	r0, [pc, #56]	; (8001cb0 <main+0x1c8>)
 8001c78:	f002 fe01 	bl	800487e <HAL_UART_Transmit>
		if (rxstate == 1) {
 8001c7c:	e74d      	b.n	8001b1a <main+0x32>
 8001c7e:	bf00      	nop
 8001c80:	200046d8 	.word	0x200046d8
 8001c84:	20004f1c 	.word	0x20004f1c
 8001c88:	20000605 	.word	0x20000605
 8001c8c:	20005770 	.word	0x20005770
 8001c90:	200046b8 	.word	0x200046b8
 8001c94:	200048d8 	.word	0x200048d8
 8001c98:	2000060a 	.word	0x2000060a
 8001c9c:	2000064c 	.word	0x2000064c
 8001ca0:	20000400 	.word	0x20000400
 8001ca4:	200026b8 	.word	0x200026b8
 8001ca8:	0800e1e8 	.word	0x0800e1e8
 8001cac:	20000618 	.word	0x20000618
 8001cb0:	20004ed8 	.word	0x20004ed8
 8001cb4:	0800e1f0 	.word	0x0800e1f0

08001cb8 <SystemClock_Config>:
//}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b094      	sub	sp, #80	; 0x50
 8001cbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	2230      	movs	r2, #48	; 0x30
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 f832 	bl	8006d30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(8);
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <SystemClock_Config+0xd4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <SystemClock_Config+0xd4>)
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	6053      	str	r3, [r2, #4]
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <SystemClock_Config+0xd4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <SystemClock_Config+0xd4>)
 8001cf2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cf6:	6053      	str	r3, [r2, #4]
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <SystemClock_Config+0xd4>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <SystemClock_Config+0xd4>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	6413      	str	r3, [r2, #64]	; 0x40
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <SystemClock_Config+0xd4>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <SystemClock_Config+0xd8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <SystemClock_Config+0xd8>)
 8001d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <SystemClock_Config+0xd8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d34:	2301      	movs	r3, #1
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 ff97 	bl	8003c7c <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0xa0>
		Error_Handler();
 8001d54:	f000 f932 	bl	8001fbc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d58:	230f      	movs	r3, #15
 8001d5a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 f9fa 	bl	800416c <HAL_RCC_ClockConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SystemClock_Config+0xca>
		Error_Handler();
 8001d7e:	f000 f91d 	bl	8001fbc <Error_Handler>
	}
}
 8001d82:	bf00      	nop
 8001d84:	3750      	adds	r7, #80	; 0x50
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_CRC_Init+0x30>)
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <MX_CRC_Init+0x34>)
 8001d9c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001d9e:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <MX_CRC_Init+0x30>)
 8001da0:	f000 fc83 	bl	80026aa <HAL_CRC_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_CRC_Init+0x1a>
		Error_Handler();
 8001daa:	f000 f907 	bl	8001fbc <Error_Handler>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <MX_CRC_Init+0x30>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <MX_CRC_Init+0x30>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000264c 	.word	0x2000264c
 8001dc8:	40023000 	.word	0x40023000

08001dcc <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <MX_I2S2_Init+0x54>)
 8001dd4:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001dd8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ddc:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001de0:	2210      	movs	r2, #16
 8001de2:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001de6:	2203      	movs	r2, #3
 8001de8:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_192K;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001df2:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <MX_I2S2_Init+0x58>)
 8001df4:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <MX_I2S2_Init+0x50>)
 8001e0a:	f001 f991 	bl	8003130 <HAL_I2S_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_I2S2_Init+0x4c>
		Error_Handler();
 8001e14:	f000 f8d2 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20004f1c 	.word	0x20004f1c
 8001e20:	40003800 	.word	0x40003800
 8001e24:	0002ee00 	.word	0x0002ee00

08001e28 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <MX_USART2_UART_Init+0x50>)
 8001e30:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e38:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e60:	f002 fcc0 	bl	80047e4 <HAL_UART_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001e6a:	f000 f8a7 	bl	8001fbc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20004ed8 	.word	0x20004ed8
 8001e78:	40004400 	.word	0x40004400

08001e7c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_DMA_Init+0x3c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <MX_DMA_Init+0x3c>)
 8001e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_DMA_Init+0x3c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200e      	movs	r0, #14
 8001ea4:	f000 fbcb 	bl	800263e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ea8:	200e      	movs	r0, #14
 8001eaa:	f000 fbe4 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_GPIO_Init+0xb8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001f48:	480b      	ldr	r0, [pc, #44]	; (8001f78 <MX_GPIO_Init+0xbc>)
 8001f4a:	f001 f8d7 	bl	80030fc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 8001f4e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4804      	ldr	r0, [pc, #16]	; (8001f78 <MX_GPIO_Init+0xbc>)
 8001f68:	f000 ff2c 	bl	8002dc4 <HAL_GPIO_Init>

}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020c00 	.word	0x40020c00

08001f7c <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	rxstate = 1;
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000605 	.word	0x20000605

08001f9c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	rxstate = 2;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_I2S_RxCpltCallback+0x1c>)
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	701a      	strb	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000605 	.word	0x20000605

08001fbc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>
	...

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_MspInit+0x4c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_MspInit+0x4c>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_MspInit+0x4c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_MspInit+0x4c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_MspInit+0x4c>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_MspInit+0x4c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <HAL_CRC_MspInit+0x3c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10d      	bne.n	8002046 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_CRC_MspInit+0x40>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_CRC_MspInit+0x40>)
 8002034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_CRC_MspInit+0x40>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023000 	.word	0x40023000
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08e      	sub	sp, #56	; 0x38
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <HAL_I2S_MspInit+0x154>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f040 808c 	bne.w	80021a6 <HAL_I2S_MspInit+0x14a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800208e:	2301      	movs	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 86;
 8002092:	2356      	movs	r3, #86	; 0x56
 8002094:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002096:	2302      	movs	r3, #2
 8002098:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fa60 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80020aa:	f7ff ff87 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a3f      	ldr	r2, [pc, #252]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a38      	ldr	r2, [pc, #224]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <HAL_I2S_MspInit+0x158>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002102:	2308      	movs	r3, #8
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002112:	2305      	movs	r3, #5
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	4826      	ldr	r0, [pc, #152]	; (80021b8 <HAL_I2S_MspInit+0x15c>)
 800211e:	f000 fe51 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002122:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002134:	2305      	movs	r3, #5
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	481f      	ldr	r0, [pc, #124]	; (80021bc <HAL_I2S_MspInit+0x160>)
 8002140:	f000 fe40 	bl	8002dc4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 8002146:	4a1f      	ldr	r2, [pc, #124]	; (80021c4 <HAL_I2S_MspInit+0x168>)
 8002148:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 800215e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002162:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 8002166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800216a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 800216e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002172:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 8002176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 800217e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002182:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800218a:	480d      	ldr	r0, [pc, #52]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 800218c:	f000 faaa 	bl	80026e4 <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8002196:	f7ff ff11 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_I2S_MspInit+0x164>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3738      	adds	r7, #56	; 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40003800 	.word	0x40003800
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020400 	.word	0x40020400
 80021c0:	20002654 	.word	0x20002654
 80021c4:	40026058 	.word	0x40026058

080021c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_UART_MspInit+0x84>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d12b      	bne.n	8002242 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_UART_MspInit+0x88>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_UART_MspInit+0x88>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_UART_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002222:	230c      	movs	r3, #12
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002232:	2307      	movs	r3, #7
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <HAL_UART_MspInit+0x8c>)
 800223e:	f000 fdc1 	bl	8002dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	; 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40004400 	.word	0x40004400
 8002250:	40023800 	.word	0x40023800
 8002254:	40020000 	.word	0x40020000

08002258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800225c:	e7fe      	b.n	800225c <NMI_Handler+0x4>

0800225e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <HardFault_Handler+0x4>

08002264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <MemManage_Handler+0x4>

0800226a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <BusFault_Handler+0x4>

08002270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <UsageFault_Handler+0x4>

08002276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a4:	f000 f8d0 	bl	8002448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}

080022ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <DMA1_Stream3_IRQHandler+0x10>)
 80022b2:	f000 fb1d 	bl	80028f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20002654 	.word	0x20002654

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f004 fcde 	bl	8006cb0 <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20020000 	.word	0x20020000
 8002320:	00000800 	.word	0x00000800
 8002324:	2000060c 	.word	0x2000060c
 8002328:	200057d0 	.word	0x200057d0

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <SystemInit+0x20>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <SystemInit+0x20>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002354:	480d      	ldr	r0, [pc, #52]	; (800238c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002356:	490e      	ldr	r1, [pc, #56]	; (8002390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002358:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800236c:	4c0b      	ldr	r4, [pc, #44]	; (800239c <LoopFillZerobss+0x26>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800237a:	f7ff ffd7 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237e:	f004 fc9d 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002382:	f7ff fbb1 	bl	8001ae8 <main>
  bx  lr    
 8002386:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002390:	200005e8 	.word	0x200005e8
  ldr r2, =_sidata
 8002394:	0800eb70 	.word	0x0800eb70
  ldr r2, =_sbss
 8002398:	200005e8 	.word	0x200005e8
  ldr r4, =_ebss
 800239c:	200057cc 	.word	0x200057cc

080023a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC_IRQHandler>
	...

080023a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_Init+0x40>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <HAL_Init+0x40>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_Init+0x40>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 f92b 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f000 f808 	bl	80023e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d8:	f7ff fdf6 	bl	8001fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00

080023e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x54>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x58>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f943 	bl	8002692 <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00e      	b.n	8002434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d80a      	bhi.n	8002432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241c:	2200      	movs	r2, #0
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002424:	f000 f90b 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <HAL_InitTick+0x5c>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000404 	.word	0x20000404
 8002440:	2000040c 	.word	0x2000040c
 8002444:	20000408 	.word	0x20000408

08002448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x20>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_IncTick+0x24>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_IncTick+0x24>)
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2000040c 	.word	0x2000040c
 800246c:	20005764 	.word	0x20005764

08002470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_GetTick+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20005764 	.word	0x20005764

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e00e      	b.n	80026da <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	795b      	ldrb	r3, [r3, #5]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d105      	bne.n	80026d2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fca3 	bl	8002018 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff febe 	bl	8002470 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e099      	b.n	8002834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002720:	e00f      	b.n	8002742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002722:	f7ff fea5 	bl	8002470 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b05      	cmp	r3, #5
 800272e:	d908      	bls.n	8002742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e078      	b.n	8002834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e8      	bne.n	8002722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_DMA_Init+0x158>)
 800275c:	4013      	ands	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4313      	orrs	r3, r2
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0307 	bic.w	r3, r3, #7
 80027c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d117      	bne.n	8002806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fa6f 	bl	8002ccc <DMA_CheckFifoParam>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2240      	movs	r2, #64	; 0x40
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002802:	2301      	movs	r3, #1
 8002804:	e016      	b.n	8002834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa26 	bl	8002c60 <DMA_CalcBaseAndBitshift>
 8002814:	4603      	mov	r3, r0
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	223f      	movs	r2, #63	; 0x3f
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	f010803f 	.word	0xf010803f

08002840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_DMA_Start_IT+0x26>
 8002862:	2302      	movs	r3, #2
 8002864:	e040      	b.n	80028e8 <HAL_DMA_Start_IT+0xa8>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d12f      	bne.n	80028da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f9b8 	bl	8002c04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	223f      	movs	r2, #63	; 0x3f
 800289a:	409a      	lsls	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0216 	orr.w	r2, r2, #22
 80028ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0208 	orr.w	r2, r2, #8
 80028c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e005      	b.n	80028e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
 80028e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_DMA_IRQHandler+0x258>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a92      	ldr	r2, [pc, #584]	; (8002b4c <HAL_DMA_IRQHandler+0x25c>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0a9b      	lsrs	r3, r3, #10
 8002908:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	2208      	movs	r2, #8
 800291c:	409a      	lsls	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01a      	beq.n	800295c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0204 	bic.w	r2, r2, #4
 8002942:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	2208      	movs	r2, #8
 800294a:	409a      	lsls	r2, r3
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	2201      	movs	r2, #1
 8002962:	409a      	lsls	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d012      	beq.n	8002992 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	2201      	movs	r2, #1
 8002980:	409a      	lsls	r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	f043 0202 	orr.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	2204      	movs	r2, #4
 8002998:	409a      	lsls	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d012      	beq.n	80029c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	2204      	movs	r2, #4
 80029b6:	409a      	lsls	r2, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f043 0204 	orr.w	r2, r3, #4
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	2210      	movs	r2, #16
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d043      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03c      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	2210      	movs	r2, #16
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d018      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d024      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
 8002a1e:	e01f      	b.n	8002a60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01b      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
 8002a30:	e016      	b.n	8002a60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0208 	bic.w	r2, r2, #8
 8002a4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	2220      	movs	r2, #32
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 808e 	beq.w	8002b8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8086 	beq.w	8002b8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	2220      	movs	r2, #32
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d136      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0216 	bic.w	r2, r2, #22
 8002aa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <HAL_DMA_IRQHandler+0x1da>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0208 	bic.w	r2, r2, #8
 8002ad8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	223f      	movs	r2, #63	; 0x3f
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d07d      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
        }
        return;
 8002b06:	e078      	b.n	8002bfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01c      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d108      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d030      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
 8002b34:	e02b      	b.n	8002b8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d027      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
 8002b46:	e022      	b.n	8002b8e <HAL_DMA_IRQHandler+0x29e>
 8002b48:	20000404 	.word	0x20000404
 8002b4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0210 	bic.w	r2, r2, #16
 8002b6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d032      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d022      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2205      	movs	r2, #5
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d307      	bcc.n	8002bd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f2      	bne.n	8002bba <HAL_DMA_IRQHandler+0x2ca>
 8002bd4:	e000      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bd6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bfa:	bf00      	nop
    }
  }
}
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop

08002c04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d108      	bne.n	8002c44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c42:	e007      	b.n	8002c54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	60da      	str	r2, [r3, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	3b10      	subs	r3, #16
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d909      	bls.n	8002ca2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c96:	f023 0303 	bic.w	r3, r3, #3
 8002c9a:	1d1a      	adds	r2, r3, #4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002ca0:	e007      	b.n	8002cb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	aaaaaaab 	.word	0xaaaaaaab
 8002cc8:	0800e464 	.word	0x0800e464

08002ccc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11f      	bne.n	8002d26 <DMA_CheckFifoParam+0x5a>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d856      	bhi.n	8002d9a <DMA_CheckFifoParam+0xce>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <DMA_CheckFifoParam+0x28>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d17 	.word	0x08002d17
 8002cfc:	08002d05 	.word	0x08002d05
 8002d00:	08002d9b 	.word	0x08002d9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d046      	beq.n	8002d9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d14:	e043      	b.n	8002d9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d1e:	d140      	bne.n	8002da2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d24:	e03d      	b.n	8002da2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2e:	d121      	bne.n	8002d74 <DMA_CheckFifoParam+0xa8>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d837      	bhi.n	8002da6 <DMA_CheckFifoParam+0xda>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <DMA_CheckFifoParam+0x70>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d53 	.word	0x08002d53
 8002d44:	08002d4d 	.word	0x08002d4d
 8002d48:	08002d65 	.word	0x08002d65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d50:	e030      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d025      	beq.n	8002daa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d62:	e022      	b.n	8002daa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d6c:	d11f      	bne.n	8002dae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d72:	e01c      	b.n	8002dae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d903      	bls.n	8002d82 <DMA_CheckFifoParam+0xb6>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d003      	beq.n	8002d88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d80:	e018      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      break;
 8002d86:	e015      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      break;
 8002d98:	e00b      	b.n	8002db2 <DMA_CheckFifoParam+0xe6>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e00a      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e008      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e006      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e004      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
    }
  } 
  
  return status; 
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	; 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	e16b      	b.n	80030b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de0:	2201      	movs	r2, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	f040 815a 	bne.w	80030b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d005      	beq.n	8002e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d130      	bne.n	8002e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 0201 	and.w	r2, r3, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d017      	beq.n	8002eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d123      	bne.n	8002f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	08da      	lsrs	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3208      	adds	r2, #8
 8002ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	08da      	lsrs	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3208      	adds	r2, #8
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0203 	and.w	r2, r3, #3
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80b4 	beq.w	80030b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <HAL_GPIO_Init+0x30c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	4a5f      	ldr	r2, [pc, #380]	; (80030d0 <HAL_GPIO_Init+0x30c>)
 8002f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f58:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5a:	4b5d      	ldr	r3, [pc, #372]	; (80030d0 <HAL_GPIO_Init+0x30c>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f66:	4a5b      	ldr	r2, [pc, #364]	; (80030d4 <HAL_GPIO_Init+0x310>)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_GPIO_Init+0x314>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02b      	beq.n	8002fea <HAL_GPIO_Init+0x226>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a51      	ldr	r2, [pc, #324]	; (80030dc <HAL_GPIO_Init+0x318>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d025      	beq.n	8002fe6 <HAL_GPIO_Init+0x222>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a50      	ldr	r2, [pc, #320]	; (80030e0 <HAL_GPIO_Init+0x31c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01f      	beq.n	8002fe2 <HAL_GPIO_Init+0x21e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4f      	ldr	r2, [pc, #316]	; (80030e4 <HAL_GPIO_Init+0x320>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d019      	beq.n	8002fde <HAL_GPIO_Init+0x21a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4e      	ldr	r2, [pc, #312]	; (80030e8 <HAL_GPIO_Init+0x324>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_GPIO_Init+0x216>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4d      	ldr	r2, [pc, #308]	; (80030ec <HAL_GPIO_Init+0x328>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_GPIO_Init+0x212>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4c      	ldr	r2, [pc, #304]	; (80030f0 <HAL_GPIO_Init+0x32c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <HAL_GPIO_Init+0x20e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4b      	ldr	r2, [pc, #300]	; (80030f4 <HAL_GPIO_Init+0x330>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_GPIO_Init+0x20a>
 8002fca:	2307      	movs	r3, #7
 8002fcc:	e00e      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fce:	2308      	movs	r3, #8
 8002fd0:	e00c      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fd2:	2306      	movs	r3, #6
 8002fd4:	e00a      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	e008      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fda:	2304      	movs	r3, #4
 8002fdc:	e006      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e004      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e002      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fea:	2300      	movs	r3, #0
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	f002 0203 	and.w	r2, r2, #3
 8002ff2:	0092      	lsls	r2, r2, #2
 8002ff4:	4093      	lsls	r3, r2
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ffc:	4935      	ldr	r1, [pc, #212]	; (80030d4 <HAL_GPIO_Init+0x310>)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_GPIO_Init+0x334>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800302e:	4a32      	ldr	r2, [pc, #200]	; (80030f8 <HAL_GPIO_Init+0x334>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003034:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <HAL_GPIO_Init+0x334>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003058:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_GPIO_Init+0x334>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_GPIO_Init+0x334>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003082:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_GPIO_Init+0x334>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_GPIO_Init+0x334>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030ac:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <HAL_GPIO_Init+0x334>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3301      	adds	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	f67f ae90 	bls.w	8002de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40013800 	.word	0x40013800
 80030d8:	40020000 	.word	0x40020000
 80030dc:	40020400 	.word	0x40020400
 80030e0:	40020800 	.word	0x40020800
 80030e4:	40020c00 	.word	0x40020c00
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40021400 	.word	0x40021400
 80030f0:	40021800 	.word	0x40021800
 80030f4:	40021c00 	.word	0x40021c00
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
 8003108:	4613      	mov	r3, r2
 800310a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003118:	e003      	b.n	8003122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	619a      	str	r2, [r3, #24]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e128      	b.n	8003394 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a90      	ldr	r2, [pc, #576]	; (800339c <HAL_I2S_Init+0x26c>)
 800315a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7fe ff7d 	bl	800205c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003178:	f023 030f 	bic.w	r3, r3, #15
 800317c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2202      	movs	r2, #2
 8003184:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d060      	beq.n	8003250 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003196:	2310      	movs	r3, #16
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e001      	b.n	80031a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d802      	bhi.n	80031ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f001 faba 	bl	8004728 <HAL_RCCEx_GetPeriphCLKFreq>
 80031b4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031be:	d125      	bne.n	800320c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	3305      	adds	r3, #5
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e01f      	b.n	800322a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	3305      	adds	r3, #5
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e00e      	b.n	800322a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fbb2 f2f3 	udiv	r2, r2, r3
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	3305      	adds	r3, #5
 8003228:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4a5c      	ldr	r2, [pc, #368]	; (80033a0 <HAL_I2S_Init+0x270>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	08db      	lsrs	r3, r3, #3
 8003234:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	e003      	b.n	8003258 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003250:	2302      	movs	r3, #2
 8003252:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d902      	bls.n	8003264 <HAL_I2S_Init+0x134>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	2bff      	cmp	r3, #255	; 0xff
 8003262:	d907      	bls.n	8003274 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e08f      	b.n	8003394 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	ea42 0103 	orr.w	r1, r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	430a      	orrs	r2, r1
 8003286:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003292:	f023 030f 	bic.w	r3, r3, #15
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6851      	ldr	r1, [r2, #4]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68d2      	ldr	r2, [r2, #12]
 80032a4:	4311      	orrs	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6992      	ldr	r2, [r2, #24]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d161      	bne.n	8003384 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a38      	ldr	r2, [pc, #224]	; (80033a4 <HAL_I2S_Init+0x274>)
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a37      	ldr	r2, [pc, #220]	; (80033a8 <HAL_I2S_Init+0x278>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_I2S_Init+0x1a4>
 80032d0:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_I2S_Init+0x27c>)
 80032d2:	e001      	b.n	80032d8 <HAL_I2S_Init+0x1a8>
 80032d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	4932      	ldr	r1, [pc, #200]	; (80033a8 <HAL_I2S_Init+0x278>)
 80032e0:	428a      	cmp	r2, r1
 80032e2:	d101      	bne.n	80032e8 <HAL_I2S_Init+0x1b8>
 80032e4:	4a31      	ldr	r2, [pc, #196]	; (80033ac <HAL_I2S_Init+0x27c>)
 80032e6:	e001      	b.n	80032ec <HAL_I2S_Init+0x1bc>
 80032e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032f0:	f023 030f 	bic.w	r3, r3, #15
 80032f4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <HAL_I2S_Init+0x278>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_I2S_Init+0x1d4>
 8003300:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_I2S_Init+0x27c>)
 8003302:	e001      	b.n	8003308 <HAL_I2S_Init+0x1d8>
 8003304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003308:	2202      	movs	r2, #2
 800330a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <HAL_I2S_Init+0x278>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_I2S_Init+0x1ea>
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_I2S_Init+0x27c>)
 8003318:	e001      	b.n	800331e <HAL_I2S_Init+0x1ee>
 800331a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332a:	d003      	beq.n	8003334 <HAL_I2S_Init+0x204>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e001      	b.n	8003340 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800334a:	4313      	orrs	r3, r2
 800334c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003354:	4313      	orrs	r3, r2
 8003356:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800335e:	4313      	orrs	r3, r2
 8003360:	b29a      	uxth	r2, r3
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	4313      	orrs	r3, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800336c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <HAL_I2S_Init+0x278>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_I2S_Init+0x24c>
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_I2S_Init+0x27c>)
 800337a:	e001      	b.n	8003380 <HAL_I2S_Init+0x250>
 800337c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003380:	897a      	ldrh	r2, [r7, #10]
 8003382:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	080036b5 	.word	0x080036b5
 80033a0:	cccccccd 	.word	0xcccccccd
 80033a4:	080037c9 	.word	0x080037c9
 80033a8:	40003800 	.word	0x40003800
 80033ac:	40003400 	.word	0x40003400

080033b0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_I2S_Receive_DMA+0x1a>
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0a1      	b.n	8003512 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2S_Receive_DMA+0x2e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e099      	b.n	8003512 <HAL_I2S_Receive_DMA+0x162>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d005      	beq.n	80033fe <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
 80033fc:	e089      	b.n	8003512 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2204      	movs	r2, #4
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d002      	beq.n	800342a <HAL_I2S_Receive_DMA+0x7a>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10a      	bne.n	8003440 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	865a      	strh	r2, [r3, #50]	; 0x32
 800343e:	e005      	b.n	800344c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	4a32      	ldr	r2, [pc, #200]	; (800351c <HAL_I2S_Receive_DMA+0x16c>)
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_I2S_Receive_DMA+0x170>)
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	4a30      	ldr	r2, [pc, #192]	; (8003524 <HAL_I2S_Receive_DMA+0x174>)
 8003462:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003472:	d10a      	bne.n	800348a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	4619      	mov	r1, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80034a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80034a2:	f7ff f9cd 	bl	8002840 <HAL_DMA_Start_IT>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00f      	beq.n	80034cc <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f043 0208 	orr.w	r2, r3, #8
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e022      	b.n	8003512 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034e8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d107      	bne.n	8003508 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	08003593 	.word	0x08003593
 8003520:	08003551 	.word	0x08003551
 8003524:	080035af 	.word	0x080035af

08003528 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10e      	bne.n	8003584 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7fe fd09 	bl	8001f9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7fe fceb 	bl	8001f7c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0203 	bic.w	r2, r2, #3
 80035ca:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f043 0208 	orr.w	r2, r3, #8
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff ffa5 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	881a      	ldrh	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c9a      	adds	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10e      	bne.n	800364e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff ff6d 	bl	8003528 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	b292      	uxth	r2, r2
 800366a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	1c9a      	adds	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800369c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe fc78 	bl	8001f9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d13a      	bne.n	8003746 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d109      	bne.n	80036ee <I2S_IRQHandler+0x3a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	d102      	bne.n	80036ee <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ffb4 	bl	8003656 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d126      	bne.n	8003746 <I2S_IRQHandler+0x92>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b20      	cmp	r3, #32
 8003704:	d11f      	bne.n	8003746 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003714:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	f043 0202 	orr.w	r2, r3, #2
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fefb 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b03      	cmp	r3, #3
 8003750:	d136      	bne.n	80037c0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b02      	cmp	r3, #2
 800375a:	d109      	bne.n	8003770 <I2S_IRQHandler+0xbc>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b80      	cmp	r3, #128	; 0x80
 8003768:	d102      	bne.n	8003770 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff45 	bl	80035fa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b08      	cmp	r3, #8
 8003778:	d122      	bne.n	80037c0 <I2S_IRQHandler+0x10c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b20      	cmp	r3, #32
 8003786:	d11b      	bne.n	80037c0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003796:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f043 0204 	orr.w	r2, r3, #4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff febe 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037c0:	bf00      	nop
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4aa2      	ldr	r2, [pc, #648]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037e2:	4ba2      	ldr	r3, [pc, #648]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e4:	e001      	b.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a9b      	ldr	r2, [pc, #620]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003800:	4b9a      	ldr	r3, [pc, #616]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003802:	e001      	b.n	8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003814:	d004      	beq.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 8099 	bne.w	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d107      	bne.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f925 	bl	8003a84 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f9c8 	bl	8003be4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d13a      	bne.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d035      	beq.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a7e      	ldr	r2, [pc, #504]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003872:	4b7e      	ldr	r3, [pc, #504]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003874:	e001      	b.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4979      	ldr	r1, [pc, #484]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003882:	428b      	cmp	r3, r1
 8003884:	d101      	bne.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003886:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003888:	e001      	b.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800388a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003892:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f043 0202 	orr.w	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fe34 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	f040 80be 	bne.w	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80b8 	beq.w	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a59      	ldr	r2, [pc, #356]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003906:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003908:	e001      	b.n	800390e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800390a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4954      	ldr	r1, [pc, #336]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003916:	428b      	cmp	r3, r1
 8003918:	d101      	bne.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800391a:	4b54      	ldr	r3, [pc, #336]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800391c:	e001      	b.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800391e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003922:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003926:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fdf6 	bl	800353c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003950:	e084      	b.n	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d107      	bne.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8be 	bl	8003ae8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f8fd 	bl	8003b80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d12f      	bne.n	80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d02a      	beq.n	80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039b4:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039b6:	e001      	b.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4929      	ldr	r1, [pc, #164]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039c4:	428b      	cmp	r3, r1
 80039c6:	d101      	bne.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039c8:	4b28      	ldr	r3, [pc, #160]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ca:	e001      	b.n	80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fda6 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d131      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d02c      	beq.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a10:	e001      	b.n	8003a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4912      	ldr	r1, [pc, #72]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a1e:	428b      	cmp	r3, r1
 8003a20:	d101      	bne.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a24:	e001      	b.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a3e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	f043 0204 	orr.w	r2, r3, #4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fd71 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5a:	e000      	b.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a5c:	bf00      	nop
}
 8003a5e:	bf00      	nop
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40003800 	.word	0x40003800
 8003a6c:	40003400 	.word	0x40003400

08003a70 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c99      	adds	r1, r3, #2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6251      	str	r1, [r2, #36]	; 0x24
 8003a96:	881a      	ldrh	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d113      	bne.n	8003ade <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ffc9 	bl	8003a70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c99      	adds	r1, r3, #2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6251      	str	r1, [r2, #36]	; 0x24
 8003afa:	8819      	ldrh	r1, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <I2SEx_TxISR_I2SExt+0x90>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <I2SEx_TxISR_I2SExt+0x22>
 8003b06:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <I2SEx_TxISR_I2SExt+0x94>)
 8003b08:	e001      	b.n	8003b0e <I2SEx_TxISR_I2SExt+0x26>
 8003b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0e:	460a      	mov	r2, r1
 8003b10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d121      	bne.n	8003b6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <I2SEx_TxISR_I2SExt+0x90>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <I2SEx_TxISR_I2SExt+0x50>
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <I2SEx_TxISR_I2SExt+0x94>)
 8003b36:	e001      	b.n	8003b3c <I2SEx_TxISR_I2SExt+0x54>
 8003b38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	490d      	ldr	r1, [pc, #52]	; (8003b78 <I2SEx_TxISR_I2SExt+0x90>)
 8003b44:	428b      	cmp	r3, r1
 8003b46:	d101      	bne.n	8003b4c <I2SEx_TxISR_I2SExt+0x64>
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <I2SEx_TxISR_I2SExt+0x94>)
 8003b4a:	e001      	b.n	8003b50 <I2SEx_TxISR_I2SExt+0x68>
 8003b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff81 	bl	8003a70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40003800 	.word	0x40003800
 8003b7c:	40003400 	.word	0x40003400

08003b80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68d8      	ldr	r0, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	1c99      	adds	r1, r3, #2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b98:	b282      	uxth	r2, r0
 8003b9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d113      	bne.n	8003bdc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ff4a 	bl	8003a70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a20      	ldr	r2, [pc, #128]	; (8003c74 <I2SEx_RxISR_I2SExt+0x90>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <I2SEx_RxISR_I2SExt+0x16>
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <I2SEx_RxISR_I2SExt+0x94>)
 8003bf8:	e001      	b.n	8003bfe <I2SEx_RxISR_I2SExt+0x1a>
 8003bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfe:	68d8      	ldr	r0, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	1c99      	adds	r1, r3, #2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c0a:	b282      	uxth	r2, r0
 8003c0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d121      	bne.n	8003c6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <I2SEx_RxISR_I2SExt+0x90>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <I2SEx_RxISR_I2SExt+0x50>
 8003c30:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <I2SEx_RxISR_I2SExt+0x94>)
 8003c32:	e001      	b.n	8003c38 <I2SEx_RxISR_I2SExt+0x54>
 8003c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	490d      	ldr	r1, [pc, #52]	; (8003c74 <I2SEx_RxISR_I2SExt+0x90>)
 8003c40:	428b      	cmp	r3, r1
 8003c42:	d101      	bne.n	8003c48 <I2SEx_RxISR_I2SExt+0x64>
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <I2SEx_RxISR_I2SExt+0x94>)
 8003c46:	e001      	b.n	8003c4c <I2SEx_RxISR_I2SExt+0x68>
 8003c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff03 	bl	8003a70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40003800 	.word	0x40003800
 8003c78:	40003400 	.word	0x40003400

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e264      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d075      	beq.n	8003d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c9a:	4ba3      	ldr	r3, [pc, #652]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca6:	4ba0      	ldr	r3, [pc, #640]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d112      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb2:	4b9d      	ldr	r3, [pc, #628]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	4b99      	ldr	r3, [pc, #612]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d05b      	beq.n	8003d84 <HAL_RCC_OscConfig+0x108>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d157      	bne.n	8003d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e23f      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x74>
 8003ce2:	4b91      	ldr	r3, [pc, #580]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a90      	ldr	r2, [pc, #576]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x98>
 8003cfa:	4b8b      	ldr	r3, [pc, #556]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a8a      	ldr	r2, [pc, #552]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b88      	ldr	r3, [pc, #544]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a87      	ldr	r2, [pc, #540]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003d14:	4b84      	ldr	r3, [pc, #528]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a83      	ldr	r2, [pc, #524]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b81      	ldr	r3, [pc, #516]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a80      	ldr	r2, [pc, #512]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fe fb9c 	bl	8002470 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fe fb98 	bl	8002470 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e204      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0xc0>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fb88 	bl	8002470 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe fb84 	bl	8002470 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1f0      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	4b6c      	ldr	r3, [pc, #432]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0xe8>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d063      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d92:	4b65      	ldr	r3, [pc, #404]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b62      	ldr	r3, [pc, #392]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003daa:	4b5f      	ldr	r3, [pc, #380]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	4b5c      	ldr	r3, [pc, #368]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x152>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1c4      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b56      	ldr	r3, [pc, #344]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4952      	ldr	r1, [pc, #328]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e03a      	b.n	8003e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b4f      	ldr	r3, [pc, #316]	; (8003f2c <HAL_RCC_OscConfig+0x2b0>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fe fb3d 	bl	8002470 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fe fb39 	bl	8002470 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e1a5      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	4b46      	ldr	r3, [pc, #280]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b43      	ldr	r3, [pc, #268]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4940      	ldr	r1, [pc, #256]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2e:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_RCC_OscConfig+0x2b0>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe fb1c 	bl	8002470 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7fe fb18 	bl	8002470 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e184      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	4b36      	ldr	r3, [pc, #216]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d030      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <HAL_RCC_OscConfig+0x2b4>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fe fafc 	bl	8002470 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fe faf8 	bl	8002470 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e164      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x200>
 8003e9a:	e015      	b.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9c:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCC_OscConfig+0x2b4>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe fae5 	bl	8002470 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fe fae1 	bl	8002470 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e14d      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80a0 	beq.w	8004016 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	4a0e      	ldr	r2, [pc, #56]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_OscConfig+0x2b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d121      	bne.n	8003f56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f12:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <HAL_RCC_OscConfig+0x2b8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <HAL_RCC_OscConfig+0x2b8>)
 8003f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f1e:	f7fe faa7 	bl	8002470 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	e011      	b.n	8003f4a <HAL_RCC_OscConfig+0x2ce>
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470000 	.word	0x42470000
 8003f30:	42470e80 	.word	0x42470e80
 8003f34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f38:	f7fe fa9a 	bl	8002470 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e106      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b85      	ldr	r3, [pc, #532]	; (8004160 <HAL_RCC_OscConfig+0x4e4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
 8003f5e:	4b81      	ldr	r3, [pc, #516]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6a:	e01c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x32a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b05      	cmp	r3, #5
 8003f72:	d10c      	bne.n	8003f8e <HAL_RCC_OscConfig+0x312>
 8003f74:	4b7b      	ldr	r3, [pc, #492]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a7a      	ldr	r2, [pc, #488]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f7a:	f043 0304 	orr.w	r3, r3, #4
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	4b78      	ldr	r3, [pc, #480]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a77      	ldr	r2, [pc, #476]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8c:	e00b      	b.n	8003fa6 <HAL_RCC_OscConfig+0x32a>
 8003f8e:	4b75      	ldr	r3, [pc, #468]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a74      	ldr	r2, [pc, #464]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9a:	4b72      	ldr	r3, [pc, #456]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a71      	ldr	r2, [pc, #452]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003fa0:	f023 0304 	bic.w	r3, r3, #4
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d015      	beq.n	8003fda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fe fa5f 	bl	8002470 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fe fa5b 	bl	8002470 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e0c5      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fcc:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ee      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x33a>
 8003fd8:	e014      	b.n	8004004 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fda:	f7fe fa49 	bl	8002470 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fe fa45 	bl	8002470 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0af      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff8:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ee      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d105      	bne.n	8004016 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400a:	4b56      	ldr	r3, [pc, #344]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a55      	ldr	r2, [pc, #340]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8004010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 809b 	beq.w	8004156 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b08      	cmp	r3, #8
 800402a:	d05c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d141      	bne.n	80040b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004034:	4b4c      	ldr	r3, [pc, #304]	; (8004168 <HAL_RCC_OscConfig+0x4ec>)
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fe fa19 	bl	8002470 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004042:	f7fe fa15 	bl	8002470 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e081      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f0      	bne.n	8004042 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	019b      	lsls	r3, r3, #6
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	3b01      	subs	r3, #1
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	061b      	lsls	r3, r3, #24
 8004084:	4937      	ldr	r1, [pc, #220]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCC_OscConfig+0x4ec>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fe f9ee 	bl	8002470 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7fe f9ea 	bl	8002470 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e056      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x41c>
 80040b6:	e04e      	b.n	8004156 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_OscConfig+0x4ec>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040be:	f7fe f9d7 	bl	8002470 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c6:	f7fe f9d3 	bl	8002470 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e03f      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d8:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f0      	bne.n	80040c6 <HAL_RCC_OscConfig+0x44a>
 80040e4:	e037      	b.n	8004156 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e032      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <HAL_RCC_OscConfig+0x4e8>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d028      	beq.n	8004152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d121      	bne.n	8004152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d11a      	bne.n	8004152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004122:	4013      	ands	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004128:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800412a:	4293      	cmp	r3, r2
 800412c:	d111      	bne.n	8004152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d001      	beq.n	8004156 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40007000 	.word	0x40007000
 8004164:	40023800 	.word	0x40023800
 8004168:	42470060 	.word	0x42470060

0800416c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0cc      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b68      	ldr	r3, [pc, #416]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d90c      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b65      	ldr	r3, [pc, #404]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0b8      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a52      	ldr	r2, [pc, #328]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	494d      	ldr	r1, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d044      	beq.n	800428c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d119      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d003      	beq.n	800422a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004226:	2b03      	cmp	r3, #3
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422a:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e06f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423a:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e067      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424a:	4b37      	ldr	r3, [pc, #220]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4934      	ldr	r1, [pc, #208]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800425c:	f7fe f908 	bl	8002470 <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fe f904 	bl	8002470 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e04f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	4b2b      	ldr	r3, [pc, #172]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 020c 	and.w	r2, r3, #12
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	429a      	cmp	r2, r3
 800428a:	d1eb      	bne.n	8004264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d20c      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e032      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4916      	ldr	r1, [pc, #88]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	490e      	ldr	r1, [pc, #56]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042f2:	f000 f821 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	490a      	ldr	r1, [pc, #40]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe f868 	bl	80023e8 <HAL_InitTick>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023c00 	.word	0x40023c00
 8004328:	40023800 	.word	0x40023800
 800432c:	0800e44c 	.word	0x0800e44c
 8004330:	20000404 	.word	0x20000404
 8004334:	20000408 	.word	0x20000408

08004338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	2300      	movs	r3, #0
 800434a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004350:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b08      	cmp	r3, #8
 800435a:	d00d      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x40>
 800435c:	2b08      	cmp	r3, #8
 800435e:	f200 80bd 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x34>
 8004366:	2b04      	cmp	r3, #4
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x3a>
 800436a:	e0b7      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b61      	ldr	r3, [pc, #388]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800436e:	60bb      	str	r3, [r7, #8]
       break;
 8004370:	e0b7      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004372:	4b61      	ldr	r3, [pc, #388]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004374:	60bb      	str	r3, [r7, #8]
      break;
 8004376:	e0b4      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004378:	4b5d      	ldr	r3, [pc, #372]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004380:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004382:	4b5b      	ldr	r3, [pc, #364]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04d      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	461a      	mov	r2, r3
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	ea02 0800 	and.w	r8, r2, r0
 80043a6:	ea03 0901 	and.w	r9, r3, r1
 80043aa:	4640      	mov	r0, r8
 80043ac:	4649      	mov	r1, r9
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	014b      	lsls	r3, r1, #5
 80043b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043bc:	0142      	lsls	r2, r0, #5
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	ebb0 0008 	subs.w	r0, r0, r8
 80043c6:	eb61 0109 	sbc.w	r1, r1, r9
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	018b      	lsls	r3, r1, #6
 80043d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043d8:	0182      	lsls	r2, r0, #6
 80043da:	1a12      	subs	r2, r2, r0
 80043dc:	eb63 0301 	sbc.w	r3, r3, r1
 80043e0:	f04f 0000 	mov.w	r0, #0
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	00d9      	lsls	r1, r3, #3
 80043ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ee:	00d0      	lsls	r0, r2, #3
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	eb12 0208 	adds.w	r2, r2, r8
 80043f8:	eb43 0309 	adc.w	r3, r3, r9
 80043fc:	f04f 0000 	mov.w	r0, #0
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	0259      	lsls	r1, r3, #9
 8004406:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800440a:	0250      	lsls	r0, r2, #9
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4610      	mov	r0, r2
 8004412:	4619      	mov	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	461a      	mov	r2, r3
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f7fc fc34 	bl	8000c88 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e04a      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	461a      	mov	r2, r3
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	f240 10ff 	movw	r0, #511	; 0x1ff
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	ea02 0400 	and.w	r4, r2, r0
 8004442:	ea03 0501 	and.w	r5, r3, r1
 8004446:	4620      	mov	r0, r4
 8004448:	4629      	mov	r1, r5
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	014b      	lsls	r3, r1, #5
 8004454:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004458:	0142      	lsls	r2, r0, #5
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	1b00      	subs	r0, r0, r4
 8004460:	eb61 0105 	sbc.w	r1, r1, r5
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	018b      	lsls	r3, r1, #6
 800446e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004472:	0182      	lsls	r2, r0, #6
 8004474:	1a12      	subs	r2, r2, r0
 8004476:	eb63 0301 	sbc.w	r3, r3, r1
 800447a:	f04f 0000 	mov.w	r0, #0
 800447e:	f04f 0100 	mov.w	r1, #0
 8004482:	00d9      	lsls	r1, r3, #3
 8004484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004488:	00d0      	lsls	r0, r2, #3
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	1912      	adds	r2, r2, r4
 8004490:	eb45 0303 	adc.w	r3, r5, r3
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	0299      	lsls	r1, r3, #10
 800449e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044a2:	0290      	lsls	r0, r2, #10
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	f7fc fbe8 	bl	8000c88 <__aeabi_uldivmod>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4613      	mov	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	3301      	adds	r3, #1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	60bb      	str	r3, [r7, #8]
      break;
 80044da:	e002      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044de:	60bb      	str	r3, [r7, #8]
      break;
 80044e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e2:	68bb      	ldr	r3, [r7, #8]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	007a1200 	.word	0x007a1200

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_RCC_GetHCLKFreq+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000404 	.word	0x20000404

08004514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004518:	f7ff fff0 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	0800e45c 	.word	0x0800e45c

0800453c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004540:	f7ff ffdc 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0b5b      	lsrs	r3, r3, #13
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	0800e45c 	.word	0x0800e45c

08004564 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004588:	2b00      	cmp	r3, #0
 800458a:	d035      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800458c:	4b62      	ldr	r3, [pc, #392]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004592:	f7fd ff6d 	bl	8002470 <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800459a:	f7fd ff69 	bl	8002470 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0b0      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ac:	4b5b      	ldr	r3, [pc, #364]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	019a      	lsls	r2, r3, #6
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	071b      	lsls	r3, r3, #28
 80045c4:	4955      	ldr	r1, [pc, #340]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045cc:	4b52      	ldr	r3, [pc, #328]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045d2:	f7fd ff4d 	bl	8002470 <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045da:	f7fd ff49 	bl	8002470 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e090      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8083 	beq.w	800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	4b44      	ldr	r3, [pc, #272]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a43      	ldr	r2, [pc, #268]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b41      	ldr	r3, [pc, #260]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004622:	4b3f      	ldr	r3, [pc, #252]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a3e      	ldr	r2, [pc, #248]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800462e:	f7fd ff1f 	bl	8002470 <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004636:	f7fd ff1b 	bl	8002470 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e062      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004654:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02f      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	429a      	cmp	r2, r3
 8004670:	d028      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004672:	4b2a      	ldr	r3, [pc, #168]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800467c:	4b29      	ldr	r3, [pc, #164]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004682:	4b28      	ldr	r3, [pc, #160]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004688:	4a24      	ldr	r2, [pc, #144]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d114      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800469a:	f7fd fee9 	bl	8002470 <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fd fee5 	bl	8002470 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e02a      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ee      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d0:	d10d      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	490d      	ldr	r1, [pc, #52]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	608b      	str	r3, [r1, #8]
 80046ec:	e005      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046f8:	6093      	str	r3, [r2, #8]
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004706:	4905      	ldr	r1, [pc, #20]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004708:	4313      	orrs	r3, r2
 800470a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	42470068 	.word	0x42470068
 800471c:	40023800 	.word	0x40023800
 8004720:	40007000 	.word	0x40007000
 8004724:	42470e40 	.word	0x42470e40

08004728 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d13e      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004746:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d12f      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800475c:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800475e:	617b      	str	r3, [r7, #20]
          break;
 8004760:	e02f      	b.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004762:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476e:	d108      	bne.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004770:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	e007      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004782:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478a:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ac:	0f1b      	lsrs	r3, r3, #28
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
          break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
          break;
 80047c0:	bf00      	nop
        }
      }
      break;
 80047c2:	bf00      	nop
    }
  }
  return frequency;
 80047c4:	697b      	ldr	r3, [r7, #20]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800
 80047d8:	00bb8000 	.word	0x00bb8000
 80047dc:	007a1200 	.word	0x007a1200
 80047e0:	00f42400 	.word	0x00f42400

080047e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e03f      	b.n	8004876 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd fcdc 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f929 	bl	8004a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800483c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800484c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b08a      	sub	sp, #40	; 0x28
 8004882:	af02      	add	r7, sp, #8
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b20      	cmp	r3, #32
 800489c:	d17c      	bne.n	8004998 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_UART_Transmit+0x2c>
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e075      	b.n	800499a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_UART_Transmit+0x3e>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e06e      	b.n	800499a <HAL_UART_Transmit+0x11c>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2221      	movs	r2, #33	; 0x21
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d2:	f7fd fdcd 	bl	8002470 <HAL_GetTick>
 80048d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ec:	d108      	bne.n	8004900 <HAL_UART_Transmit+0x82>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	e003      	b.n	8004908 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004910:	e02a      	b.n	8004968 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	2180      	movs	r1, #128	; 0x80
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f840 	bl	80049a2 <UART_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e036      	b.n	800499a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3302      	adds	r3, #2
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e007      	b.n	800495a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3301      	adds	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1cf      	bne.n	8004912 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2140      	movs	r1, #64	; 0x40
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f810 	bl	80049a2 <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e006      	b.n	800499a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	e000      	b.n	800499a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b090      	sub	sp, #64	; 0x40
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b2:	e050      	b.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ba:	d04c      	beq.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80049c2:	f7fd fd55 	bl	8002470 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d241      	bcs.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049f2:	637a      	str	r2, [r7, #52]	; 0x34
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e5      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	613b      	str	r3, [r7, #16]
   return(result);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3314      	adds	r3, #20
 8004a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a26:	623a      	str	r2, [r7, #32]
 8004a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	69f9      	ldr	r1, [r7, #28]
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e5      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e00f      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	bf0c      	ite	eq
 8004a66:	2301      	moveq	r3, #1
 8004a68:	2300      	movne	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d09f      	beq.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3740      	adds	r7, #64	; 0x40
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	b09f      	sub	sp, #124	; 0x7c
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a96:	68d9      	ldr	r1, [r3, #12]
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	ea40 0301 	orr.w	r3, r0, r1
 8004aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ac4:	f021 010c 	bic.w	r1, r1, #12
 8004ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	6999      	ldr	r1, [r3, #24]
 8004ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	ea40 0301 	orr.w	r3, r0, r1
 8004ae8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4bc5      	ldr	r3, [pc, #788]	; (8004e04 <UART_SetConfig+0x384>)
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d004      	beq.n	8004afe <UART_SetConfig+0x7e>
 8004af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4bc3      	ldr	r3, [pc, #780]	; (8004e08 <UART_SetConfig+0x388>)
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d103      	bne.n	8004b06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004afe:	f7ff fd1d 	bl	800453c <HAL_RCC_GetPCLK2Freq>
 8004b02:	6778      	str	r0, [r7, #116]	; 0x74
 8004b04:	e002      	b.n	8004b0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b06:	f7ff fd05 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 8004b0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b14:	f040 80b6 	bne.w	8004c84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	f04f 0500 	mov.w	r5, #0
 8004b20:	4622      	mov	r2, r4
 8004b22:	462b      	mov	r3, r5
 8004b24:	1891      	adds	r1, r2, r2
 8004b26:	6439      	str	r1, [r7, #64]	; 0x40
 8004b28:	415b      	adcs	r3, r3
 8004b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b30:	1912      	adds	r2, r2, r4
 8004b32:	eb45 0303 	adc.w	r3, r5, r3
 8004b36:	f04f 0000 	mov.w	r0, #0
 8004b3a:	f04f 0100 	mov.w	r1, #0
 8004b3e:	00d9      	lsls	r1, r3, #3
 8004b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b44:	00d0      	lsls	r0, r2, #3
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	1911      	adds	r1, r2, r4
 8004b4c:	6639      	str	r1, [r7, #96]	; 0x60
 8004b4e:	416b      	adcs	r3, r5
 8004b50:	667b      	str	r3, [r7, #100]	; 0x64
 8004b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b60:	415b      	adcs	r3, r3
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b6c:	f7fc f88c 	bl	8000c88 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4ba5      	ldr	r3, [pc, #660]	; (8004e0c <UART_SetConfig+0x38c>)
 8004b76:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	011e      	lsls	r6, r3, #4
 8004b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b80:	461c      	mov	r4, r3
 8004b82:	f04f 0500 	mov.w	r5, #0
 8004b86:	4622      	mov	r2, r4
 8004b88:	462b      	mov	r3, r5
 8004b8a:	1891      	adds	r1, r2, r2
 8004b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b8e:	415b      	adcs	r3, r3
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
 8004b92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b96:	1912      	adds	r2, r2, r4
 8004b98:	eb45 0303 	adc.w	r3, r5, r3
 8004b9c:	f04f 0000 	mov.w	r0, #0
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	00d9      	lsls	r1, r3, #3
 8004ba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004baa:	00d0      	lsls	r0, r2, #3
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	1911      	adds	r1, r2, r4
 8004bb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb4:	416b      	adcs	r3, r5
 8004bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	1891      	adds	r1, r2, r2
 8004bc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bc6:	415b      	adcs	r3, r3
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004bd2:	f7fc f859 	bl	8000c88 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4b8c      	ldr	r3, [pc, #560]	; (8004e0c <UART_SetConfig+0x38c>)
 8004bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	2164      	movs	r1, #100	; 0x64
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	3332      	adds	r3, #50	; 0x32
 8004bee:	4a87      	ldr	r2, [pc, #540]	; (8004e0c <UART_SetConfig+0x38c>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bfc:	441e      	add	r6, r3
 8004bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c00:	4618      	mov	r0, r3
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	1894      	adds	r4, r2, r2
 8004c0c:	623c      	str	r4, [r7, #32]
 8004c0e:	415b      	adcs	r3, r3
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
 8004c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c16:	1812      	adds	r2, r2, r0
 8004c18:	eb41 0303 	adc.w	r3, r1, r3
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	f04f 0500 	mov.w	r5, #0
 8004c24:	00dd      	lsls	r5, r3, #3
 8004c26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c2a:	00d4      	lsls	r4, r2, #3
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	462b      	mov	r3, r5
 8004c30:	1814      	adds	r4, r2, r0
 8004c32:	653c      	str	r4, [r7, #80]	; 0x50
 8004c34:	414b      	adcs	r3, r1
 8004c36:	657b      	str	r3, [r7, #84]	; 0x54
 8004c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	1891      	adds	r1, r2, r2
 8004c44:	61b9      	str	r1, [r7, #24]
 8004c46:	415b      	adcs	r3, r3
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c52:	f7fc f819 	bl	8000c88 <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4b6c      	ldr	r3, [pc, #432]	; (8004e0c <UART_SetConfig+0x38c>)
 8004c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	2164      	movs	r1, #100	; 0x64
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	3332      	adds	r3, #50	; 0x32
 8004c6e:	4a67      	ldr	r2, [pc, #412]	; (8004e0c <UART_SetConfig+0x38c>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 0207 	and.w	r2, r3, #7
 8004c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4432      	add	r2, r6
 8004c80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c82:	e0b9      	b.n	8004df8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c86:	461c      	mov	r4, r3
 8004c88:	f04f 0500 	mov.w	r5, #0
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	462b      	mov	r3, r5
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	6139      	str	r1, [r7, #16]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c9c:	1912      	adds	r2, r2, r4
 8004c9e:	eb45 0303 	adc.w	r3, r5, r3
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	00d9      	lsls	r1, r3, #3
 8004cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cb0:	00d0      	lsls	r0, r2, #3
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	eb12 0804 	adds.w	r8, r2, r4
 8004cba:	eb43 0905 	adc.w	r9, r3, r5
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	008b      	lsls	r3, r1, #2
 8004cd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cd6:	0082      	lsls	r2, r0, #2
 8004cd8:	4640      	mov	r0, r8
 8004cda:	4649      	mov	r1, r9
 8004cdc:	f7fb ffd4 	bl	8000c88 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4b49      	ldr	r3, [pc, #292]	; (8004e0c <UART_SetConfig+0x38c>)
 8004ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	011e      	lsls	r6, r3, #4
 8004cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f04f 0100 	mov.w	r1, #0
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	1894      	adds	r4, r2, r2
 8004cfc:	60bc      	str	r4, [r7, #8]
 8004cfe:	415b      	adcs	r3, r3
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d06:	1812      	adds	r2, r2, r0
 8004d08:	eb41 0303 	adc.w	r3, r1, r3
 8004d0c:	f04f 0400 	mov.w	r4, #0
 8004d10:	f04f 0500 	mov.w	r5, #0
 8004d14:	00dd      	lsls	r5, r3, #3
 8004d16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d1a:	00d4      	lsls	r4, r2, #3
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	462b      	mov	r3, r5
 8004d20:	1814      	adds	r4, r2, r0
 8004d22:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d24:	414b      	adcs	r3, r1
 8004d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	008b      	lsls	r3, r1, #2
 8004d3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d40:	0082      	lsls	r2, r0, #2
 8004d42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d46:	f7fb ff9f 	bl	8000c88 <__aeabi_uldivmod>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <UART_SetConfig+0x38c>)
 8004d50:	fba3 1302 	umull	r1, r3, r3, r2
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	2164      	movs	r1, #100	; 0x64
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	3332      	adds	r3, #50	; 0x32
 8004d62:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <UART_SetConfig+0x38c>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d6e:	441e      	add	r6, r3
 8004d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d72:	4618      	mov	r0, r3
 8004d74:	f04f 0100 	mov.w	r1, #0
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	1894      	adds	r4, r2, r2
 8004d7e:	603c      	str	r4, [r7, #0]
 8004d80:	415b      	adcs	r3, r3
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d88:	1812      	adds	r2, r2, r0
 8004d8a:	eb41 0303 	adc.w	r3, r1, r3
 8004d8e:	f04f 0400 	mov.w	r4, #0
 8004d92:	f04f 0500 	mov.w	r5, #0
 8004d96:	00dd      	lsls	r5, r3, #3
 8004d98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d9c:	00d4      	lsls	r4, r2, #3
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	eb12 0a00 	adds.w	sl, r2, r0
 8004da6:	eb43 0b01 	adc.w	fp, r3, r1
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	008b      	lsls	r3, r1, #2
 8004dbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dc2:	0082      	lsls	r2, r0, #2
 8004dc4:	4650      	mov	r0, sl
 8004dc6:	4659      	mov	r1, fp
 8004dc8:	f7fb ff5e 	bl	8000c88 <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <UART_SetConfig+0x38c>)
 8004dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2164      	movs	r1, #100	; 0x64
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	3332      	adds	r3, #50	; 0x32
 8004de4:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <UART_SetConfig+0x38c>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4432      	add	r2, r6
 8004df6:	609a      	str	r2, [r3, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	377c      	adds	r7, #124	; 0x7c
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e02:	bf00      	nop
 8004e04:	40011000 	.word	0x40011000
 8004e08:	40011400 	.word	0x40011400
 8004e0c:	51eb851f 	.word	0x51eb851f

08004e10 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <MX_PDM2PCM_Init+0x48>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <MX_PDM2PCM_Init+0x48>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8004e20:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <MX_PDM2PCM_Init+0x48>)
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <MX_PDM2PCM_Init+0x4c>)
 8004e24:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <MX_PDM2PCM_Init+0x48>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <MX_PDM2PCM_Init+0x48>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8004e32:	4809      	ldr	r0, [pc, #36]	; (8004e58 <MX_PDM2PCM_Init+0x48>)
 8004e34:	f001 fd66 	bl	8006904 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <MX_PDM2PCM_Init+0x50>)
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <MX_PDM2PCM_Init+0x50>)
 8004e40:	2210      	movs	r2, #16
 8004e42:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <MX_PDM2PCM_Init+0x50>)
 8004e46:	2218      	movs	r2, #24
 8004e48:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8004e4a:	4905      	ldr	r1, [pc, #20]	; (8004e60 <MX_PDM2PCM_Init+0x50>)
 8004e4c:	4802      	ldr	r0, [pc, #8]	; (8004e58 <MX_PDM2PCM_Init+0x48>)
 8004e4e:	f001 fde3 	bl	8006a18 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20005770 	.word	0x20005770
 8004e5c:	7d70a3d6 	.word	0x7d70a3d6
 8004e60:	20005768 	.word	0x20005768

08004e64 <D16_GENERIC>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	b089      	sub	sp, #36	; 0x24
 8004e6a:	68d4      	ldr	r4, [r2, #12]
 8004e6c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004e6e:	6993      	ldr	r3, [r2, #24]
 8004e70:	9407      	str	r4, [sp, #28]
 8004e72:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004e74:	9306      	str	r3, [sp, #24]
 8004e76:	9402      	str	r4, [sp, #8]
 8004e78:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004e7c:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8004e80:	69d3      	ldr	r3, [r2, #28]
 8004e82:	6896      	ldr	r6, [r2, #8]
 8004e84:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004e86:	9103      	str	r1, [sp, #12]
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	d066      	beq.n	8004f5a <D16_GENERIC+0xf6>
 8004e8c:	f004 0510 	and.w	r5, r4, #16
 8004e90:	f004 0420 	and.w	r4, r4, #32
 8004e94:	9504      	str	r5, [sp, #16]
 8004e96:	4938      	ldr	r1, [pc, #224]	; (8004f78 <D16_GENERIC+0x114>)
 8004e98:	9405      	str	r4, [sp, #20]
 8004e9a:	f04f 0e00 	mov.w	lr, #0
 8004e9e:	4635      	mov	r5, r6
 8004ea0:	e04f      	b.n	8004f42 <D16_GENERIC+0xde>
 8004ea2:	5d87      	ldrb	r7, [r0, r6]
 8004ea4:	7804      	ldrb	r4, [r0, #0]
 8004ea6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004eaa:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004eae:	b2e6      	uxtb	r6, r4
 8004eb0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004eb4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004eb8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004ebc:	4433      	add	r3, r6
 8004ebe:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004ec2:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8004ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eca:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004ece:	0aa3      	lsrs	r3, r4, #10
 8004ed0:	4c2a      	ldr	r4, [pc, #168]	; (8004f7c <D16_GENERIC+0x118>)
 8004ed2:	fb26 5404 	smlad	r4, r6, r4, r5
 8004ed6:	4d2a      	ldr	r5, [pc, #168]	; (8004f80 <D16_GENERIC+0x11c>)
 8004ed8:	fb26 f505 	smuad	r5, r6, r5
 8004edc:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8004ee0:	eb04 080a 	add.w	r8, r4, sl
 8004ee4:	eba8 080b 	sub.w	r8, r8, fp
 8004ee8:	4646      	mov	r6, r8
 8004eea:	17f7      	asrs	r7, r6, #31
 8004eec:	e9cd 6700 	strd	r6, r7, [sp]
 8004ef0:	9e04      	ldr	r6, [sp, #16]
 8004ef2:	f10e 0c01 	add.w	ip, lr, #1
 8004ef6:	b16e      	cbz	r6, 8004f14 <D16_GENERIC+0xb0>
 8004ef8:	6a16      	ldr	r6, [r2, #32]
 8004efa:	9f01      	ldr	r7, [sp, #4]
 8004efc:	fba8 8906 	umull	r8, r9, r8, r6
 8004f00:	fb06 9907 	mla	r9, r6, r7, r9
 8004f04:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004f08:	f149 0900 	adc.w	r9, r9, #0
 8004f0c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004f10:	46a3      	mov	fp, r4
 8004f12:	4654      	mov	r4, sl
 8004f14:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004f16:	9f02      	ldr	r7, [sp, #8]
 8004f18:	0424      	lsls	r4, r4, #16
 8004f1a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004f1e:	f04f 0900 	mov.w	r9, #0
 8004f22:	fb0e fe06 	mul.w	lr, lr, r6
 8004f26:	fbc7 8904 	smlal	r8, r9, r7, r4
 8004f2a:	9e03      	ldr	r6, [sp, #12]
 8004f2c:	464f      	mov	r7, r9
 8004f2e:	10bc      	asrs	r4, r7, #2
 8004f30:	f304 040f 	ssat	r4, #16, r4
 8004f34:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8004f38:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004f3a:	fa1f fe8c 	uxth.w	lr, ip
 8004f3e:	4574      	cmp	r4, lr
 8004f40:	d90a      	bls.n	8004f58 <D16_GENERIC+0xf4>
 8004f42:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8004f44:	2c01      	cmp	r4, #1
 8004f46:	b2e6      	uxtb	r6, r4
 8004f48:	d1ab      	bne.n	8004ea2 <D16_GENERIC+0x3e>
 8004f4a:	9e05      	ldr	r6, [sp, #20]
 8004f4c:	f850 4b02 	ldr.w	r4, [r0], #2
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	d0ac      	beq.n	8004eae <D16_GENERIC+0x4a>
 8004f54:	ba64      	rev16	r4, r4
 8004f56:	e7aa      	b.n	8004eae <D16_GENERIC+0x4a>
 8004f58:	462e      	mov	r6, r5
 8004f5a:	9907      	ldr	r1, [sp, #28]
 8004f5c:	61d3      	str	r3, [r2, #28]
 8004f5e:	9b06      	ldr	r3, [sp, #24]
 8004f60:	6096      	str	r6, [r2, #8]
 8004f62:	2000      	movs	r0, #0
 8004f64:	60d1      	str	r1, [r2, #12]
 8004f66:	f8c2 a010 	str.w	sl, [r2, #16]
 8004f6a:	f8c2 b014 	str.w	fp, [r2, #20]
 8004f6e:	6193      	str	r3, [r2, #24]
 8004f70:	b009      	add	sp, #36	; 0x24
 8004f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f76:	bf00      	nop
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	00030001 	.word	0x00030001
 8004f80:	00010003 	.word	0x00010003

08004f84 <D24_GENERIC>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8004f8a:	6993      	ldr	r3, [r2, #24]
 8004f8c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8004f8e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004f92:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8004f96:	6894      	ldr	r4, [r2, #8]
 8004f98:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004f9c:	b089      	sub	sp, #36	; 0x24
 8004f9e:	9307      	str	r3, [sp, #28]
 8004fa0:	9503      	str	r5, [sp, #12]
 8004fa2:	69d3      	ldr	r3, [r2, #28]
 8004fa4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004fa6:	9104      	str	r1, [sp, #16]
 8004fa8:	2e00      	cmp	r6, #0
 8004faa:	f000 8096 	beq.w	80050da <D24_GENERIC+0x156>
 8004fae:	f005 0610 	and.w	r6, r5, #16
 8004fb2:	f005 0520 	and.w	r5, r5, #32
 8004fb6:	4954      	ldr	r1, [pc, #336]	; (8005108 <D24_GENERIC+0x184>)
 8004fb8:	9605      	str	r6, [sp, #20]
 8004fba:	9506      	str	r5, [sp, #24]
 8004fbc:	f04f 0e00 	mov.w	lr, #0
 8004fc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fc4:	e06a      	b.n	800509c <D24_GENERIC+0x118>
 8004fc6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8004fca:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004fce:	f890 c000 	ldrb.w	ip, [r0]
 8004fd2:	042d      	lsls	r5, r5, #16
 8004fd4:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004fd8:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004fdc:	44ac      	add	ip, r5
 8004fde:	4438      	add	r0, r7
 8004fe0:	fa5f f68c 	uxtb.w	r6, ip
 8004fe4:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8004fe8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004fec:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004ff0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004ff4:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8004ff8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004ffc:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8005000:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8005004:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005008:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800500c:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8005010:	4d3e      	ldr	r5, [pc, #248]	; (800510c <D24_GENERIC+0x188>)
 8005012:	fb26 b705 	smlad	r7, r6, r5, fp
 8005016:	4d3e      	ldr	r5, [pc, #248]	; (8005110 <D24_GENERIC+0x18c>)
 8005018:	fb26 4b05 	smlad	fp, r6, r5, r4
 800501c:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8005020:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8005024:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8005028:	2401      	movs	r4, #1
 800502a:	fb26 f604 	smuad	r6, r6, r4
 800502e:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8005032:	9f02      	ldr	r7, [sp, #8]
 8005034:	eb0e 0c04 	add.w	ip, lr, r4
 8005038:	eb08 0406 	add.w	r4, r8, r6
 800503c:	eb05 060a 	add.w	r6, r5, sl
 8005040:	1bf6      	subs	r6, r6, r7
 8005042:	4637      	mov	r7, r6
 8005044:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8005048:	e9cd 7800 	strd	r7, r8, [sp]
 800504c:	9f05      	ldr	r7, [sp, #20]
 800504e:	b177      	cbz	r7, 800506e <D24_GENERIC+0xea>
 8005050:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8005054:	9502      	str	r5, [sp, #8]
 8005056:	fba6 9a08 	umull	r9, sl, r6, r8
 800505a:	9e01      	ldr	r6, [sp, #4]
 800505c:	fb08 aa06 	mla	sl, r8, r6, sl
 8005060:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8005064:	f14a 0700 	adc.w	r7, sl, #0
 8005068:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800506c:	4655      	mov	r5, sl
 800506e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8005070:	9f03      	ldr	r7, [sp, #12]
 8005072:	03ad      	lsls	r5, r5, #14
 8005074:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005078:	f04f 0900 	mov.w	r9, #0
 800507c:	fb0e fe06 	mul.w	lr, lr, r6
 8005080:	fbc7 8905 	smlal	r8, r9, r7, r5
 8005084:	9e04      	ldr	r6, [sp, #16]
 8005086:	464f      	mov	r7, r9
 8005088:	10bd      	asrs	r5, r7, #2
 800508a:	f305 050f 	ssat	r5, #16, r5
 800508e:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8005092:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005094:	fa1f fe8c 	uxth.w	lr, ip
 8005098:	4575      	cmp	r5, lr
 800509a:	d91c      	bls.n	80050d6 <D24_GENERIC+0x152>
 800509c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800509e:	b2ef      	uxtb	r7, r5
 80050a0:	2d01      	cmp	r5, #1
 80050a2:	b23e      	sxth	r6, r7
 80050a4:	d18f      	bne.n	8004fc6 <D24_GENERIC+0x42>
 80050a6:	9d06      	ldr	r5, [sp, #24]
 80050a8:	b15d      	cbz	r5, 80050c2 <D24_GENERIC+0x13e>
 80050aa:	f01e 0f01 	tst.w	lr, #1
 80050ae:	d122      	bne.n	80050f6 <D24_GENERIC+0x172>
 80050b0:	7805      	ldrb	r5, [r0, #0]
 80050b2:	78c7      	ldrb	r7, [r0, #3]
 80050b4:	7846      	ldrb	r6, [r0, #1]
 80050b6:	022d      	lsls	r5, r5, #8
 80050b8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80050bc:	44b4      	add	ip, r6
 80050be:	3002      	adds	r0, #2
 80050c0:	e78e      	b.n	8004fe0 <D24_GENERIC+0x5c>
 80050c2:	7846      	ldrb	r6, [r0, #1]
 80050c4:	f890 c002 	ldrb.w	ip, [r0, #2]
 80050c8:	f810 5b03 	ldrb.w	r5, [r0], #3
 80050cc:	0236      	lsls	r6, r6, #8
 80050ce:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80050d2:	44ac      	add	ip, r5
 80050d4:	e784      	b.n	8004fe0 <D24_GENERIC+0x5c>
 80050d6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80050da:	61d3      	str	r3, [r2, #28]
 80050dc:	9b07      	ldr	r3, [sp, #28]
 80050de:	6094      	str	r4, [r2, #8]
 80050e0:	2000      	movs	r0, #0
 80050e2:	f8c2 b00c 	str.w	fp, [r2, #12]
 80050e6:	f8c2 a010 	str.w	sl, [r2, #16]
 80050ea:	f8c2 9014 	str.w	r9, [r2, #20]
 80050ee:	6193      	str	r3, [r2, #24]
 80050f0:	b009      	add	sp, #36	; 0x24
 80050f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f6:	78c5      	ldrb	r5, [r0, #3]
 80050f8:	7887      	ldrb	r7, [r0, #2]
 80050fa:	f810 6b04 	ldrb.w	r6, [r0], #4
 80050fe:	022d      	lsls	r5, r5, #8
 8005100:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005104:	44b4      	add	ip, r6
 8005106:	e76b      	b.n	8004fe0 <D24_GENERIC+0x5c>
 8005108:	20000000 	.word	0x20000000
 800510c:	00030001 	.word	0x00030001
 8005110:	00060007 	.word	0x00060007

08005114 <D32_GENERIC>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800511a:	6993      	ldr	r3, [r2, #24]
 800511c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800511e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005122:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8005126:	69d6      	ldr	r6, [r2, #28]
 8005128:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800512c:	b089      	sub	sp, #36	; 0x24
 800512e:	9307      	str	r3, [sp, #28]
 8005130:	9403      	str	r4, [sp, #12]
 8005132:	6893      	ldr	r3, [r2, #8]
 8005134:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005136:	9104      	str	r1, [sp, #16]
 8005138:	2d00      	cmp	r5, #0
 800513a:	f000 809f 	beq.w	800527c <D32_GENERIC+0x168>
 800513e:	f004 0510 	and.w	r5, r4, #16
 8005142:	f004 0420 	and.w	r4, r4, #32
 8005146:	9505      	str	r5, [sp, #20]
 8005148:	4953      	ldr	r1, [pc, #332]	; (8005298 <D32_GENERIC+0x184>)
 800514a:	9406      	str	r4, [sp, #24]
 800514c:	f04f 0c00 	mov.w	ip, #0
 8005150:	f8cd 9008 	str.w	r9, [sp, #8]
 8005154:	461d      	mov	r5, r3
 8005156:	4617      	mov	r7, r2
 8005158:	e077      	b.n	800524a <D32_GENERIC+0x136>
 800515a:	f818 3003 	ldrb.w	r3, [r8, r3]
 800515e:	f810 800e 	ldrb.w	r8, [r0, lr]
 8005162:	f810 e002 	ldrb.w	lr, [r0, r2]
 8005166:	7800      	ldrb	r0, [r0, #0]
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800516e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8005172:	4403      	add	r3, r0
 8005174:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8005178:	b2dc      	uxtb	r4, r3
 800517a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800517e:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8005182:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8005186:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800518a:	0e1b      	lsrs	r3, r3, #24
 800518c:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8005190:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8005194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005198:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800519c:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80051a0:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80051a4:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80051a8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80051ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80051b0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80051b4:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80051b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80051bc:	4b37      	ldr	r3, [pc, #220]	; (800529c <D32_GENERIC+0x188>)
 80051be:	fb22 b403 	smlad	r4, r2, r3, fp
 80051c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051c6:	fb2e 4803 	smlad	r8, lr, r3, r4
 80051ca:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <D32_GENERIC+0x18c>)
 80051cc:	fb22 5503 	smlad	r5, r2, r3, r5
 80051d0:	4b34      	ldr	r3, [pc, #208]	; (80052a4 <D32_GENERIC+0x190>)
 80051d2:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80051d6:	2301      	movs	r3, #1
 80051d8:	fb22 f203 	smuad	r2, r2, r3
 80051dc:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <D32_GENERIC+0x194>)
 80051de:	fb2e 2503 	smlad	r5, lr, r3, r2
 80051e2:	9b02      	ldr	r3, [sp, #8]
 80051e4:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80051e8:	eb04 080a 	add.w	r8, r4, sl
 80051ec:	eba8 0803 	sub.w	r8, r8, r3
 80051f0:	4642      	mov	r2, r8
 80051f2:	17d3      	asrs	r3, r2, #31
 80051f4:	e9cd 2300 	strd	r2, r3, [sp]
 80051f8:	9b05      	ldr	r3, [sp, #20]
 80051fa:	f10c 0e01 	add.w	lr, ip, #1
 80051fe:	b16b      	cbz	r3, 800521c <D32_GENERIC+0x108>
 8005200:	6a3a      	ldr	r2, [r7, #32]
 8005202:	9b01      	ldr	r3, [sp, #4]
 8005204:	9402      	str	r4, [sp, #8]
 8005206:	fba8 8902 	umull	r8, r9, r8, r2
 800520a:	fb02 9903 	mla	r9, r2, r3, r9
 800520e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005212:	f149 0900 	adc.w	r9, r9, #0
 8005216:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800521a:	4654      	mov	r4, sl
 800521c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800521e:	9a04      	ldr	r2, [sp, #16]
 8005220:	fb0c fc03 	mul.w	ip, ip, r3
 8005224:	9b03      	ldr	r3, [sp, #12]
 8005226:	0364      	lsls	r4, r4, #13
 8005228:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800522c:	f04f 0900 	mov.w	r9, #0
 8005230:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005234:	464b      	mov	r3, r9
 8005236:	109b      	asrs	r3, r3, #2
 8005238:	f303 030f 	ssat	r3, #16, r3
 800523c:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8005240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005242:	fa1f fc8e 	uxth.w	ip, lr
 8005246:	4563      	cmp	r3, ip
 8005248:	d914      	bls.n	8005274 <D32_GENERIC+0x160>
 800524a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800524c:	b2e2      	uxtb	r2, r4
 800524e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8005252:	eb00 080e 	add.w	r8, r0, lr
 8005256:	4253      	negs	r3, r2
 8005258:	2c01      	cmp	r4, #1
 800525a:	eb08 0403 	add.w	r4, r8, r3
 800525e:	f47f af7c 	bne.w	800515a <D32_GENERIC+0x46>
 8005262:	1d02      	adds	r2, r0, #4
 8005264:	6803      	ldr	r3, [r0, #0]
 8005266:	9806      	ldr	r0, [sp, #24]
 8005268:	b110      	cbz	r0, 8005270 <D32_GENERIC+0x15c>
 800526a:	ba5b      	rev16	r3, r3
 800526c:	4610      	mov	r0, r2
 800526e:	e783      	b.n	8005178 <D32_GENERIC+0x64>
 8005270:	4610      	mov	r0, r2
 8005272:	e781      	b.n	8005178 <D32_GENERIC+0x64>
 8005274:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005278:	462b      	mov	r3, r5
 800527a:	463a      	mov	r2, r7
 800527c:	6093      	str	r3, [r2, #8]
 800527e:	9b07      	ldr	r3, [sp, #28]
 8005280:	f8c2 b00c 	str.w	fp, [r2, #12]
 8005284:	2000      	movs	r0, #0
 8005286:	61d6      	str	r6, [r2, #28]
 8005288:	f8c2 a010 	str.w	sl, [r2, #16]
 800528c:	f8c2 9014 	str.w	r9, [r2, #20]
 8005290:	6193      	str	r3, [r2, #24]
 8005292:	b009      	add	sp, #36	; 0x24
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005298:	20000000 	.word	0x20000000
 800529c:	00060003 	.word	0x00060003
 80052a0:	000a000c 	.word	0x000a000c
 80052a4:	000c000a 	.word	0x000c000a
 80052a8:	00030006 	.word	0x00030006

080052ac <D48_GENERIC>:
 80052ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	b089      	sub	sp, #36	; 0x24
 80052b2:	6953      	ldr	r3, [r2, #20]
 80052b4:	68d4      	ldr	r4, [r2, #12]
 80052b6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80052b8:	9302      	str	r3, [sp, #8]
 80052ba:	9400      	str	r4, [sp, #0]
 80052bc:	6993      	ldr	r3, [r2, #24]
 80052be:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80052c0:	9307      	str	r3, [sp, #28]
 80052c2:	9403      	str	r4, [sp, #12]
 80052c4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80052c8:	69d6      	ldr	r6, [r2, #28]
 80052ca:	6893      	ldr	r3, [r2, #8]
 80052cc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80052ce:	9104      	str	r1, [sp, #16]
 80052d0:	2d00      	cmp	r5, #0
 80052d2:	f000 80c5 	beq.w	8005460 <D48_GENERIC+0x1b4>
 80052d6:	f004 0510 	and.w	r5, r4, #16
 80052da:	f004 0420 	and.w	r4, r4, #32
 80052de:	4967      	ldr	r1, [pc, #412]	; (800547c <D48_GENERIC+0x1d0>)
 80052e0:	9505      	str	r5, [sp, #20]
 80052e2:	9406      	str	r4, [sp, #24]
 80052e4:	f04f 0c00 	mov.w	ip, #0
 80052e8:	4657      	mov	r7, sl
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	e09c      	b.n	8005428 <D48_GENERIC+0x17c>
 80052ee:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80052f2:	f810 b009 	ldrb.w	fp, [r0, r9]
 80052f6:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80052fa:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80052fe:	7800      	ldrb	r0, [r0, #0]
 8005300:	0424      	lsls	r4, r4, #16
 8005302:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8005306:	f818 4005 	ldrb.w	r4, [r8, r5]
 800530a:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800530e:	44a8      	add	r8, r5
 8005310:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8005314:	eb0b 0500 	add.w	r5, fp, r0
 8005318:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800531c:	fa5f f885 	uxtb.w	r8, r5
 8005320:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8005324:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8005328:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800532c:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8005330:	0e2d      	lsrs	r5, r5, #24
 8005332:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8005336:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800533a:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800533e:	b2e6      	uxtb	r6, r4
 8005340:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8005344:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005348:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800534c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005350:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8005354:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8005358:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800535c:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8005360:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005364:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005368:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800536c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005370:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005374:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005378:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800537c:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8005380:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8005384:	4c3e      	ldr	r4, [pc, #248]	; (8005480 <D48_GENERIC+0x1d4>)
 8005386:	9d00      	ldr	r5, [sp, #0]
 8005388:	fb2a 5404 	smlad	r4, sl, r4, r5
 800538c:	4d3d      	ldr	r5, [pc, #244]	; (8005484 <D48_GENERIC+0x1d8>)
 800538e:	fb28 4405 	smlad	r4, r8, r5, r4
 8005392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005396:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800539a:	4c3b      	ldr	r4, [pc, #236]	; (8005488 <D48_GENERIC+0x1dc>)
 800539c:	9b01      	ldr	r3, [sp, #4]
 800539e:	fb2a 3304 	smlad	r3, sl, r4, r3
 80053a2:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80053a6:	fb28 3304 	smlad	r3, r8, r4, r3
 80053aa:	4c38      	ldr	r4, [pc, #224]	; (800548c <D48_GENERIC+0x1e0>)
 80053ac:	fb2e 3304 	smlad	r3, lr, r4, r3
 80053b0:	2501      	movs	r5, #1
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	fb2a fa05 	smuad	sl, sl, r5
 80053b8:	4b35      	ldr	r3, [pc, #212]	; (8005490 <D48_GENERIC+0x1e4>)
 80053ba:	fb28 a803 	smlad	r8, r8, r3, sl
 80053be:	4b35      	ldr	r3, [pc, #212]	; (8005494 <D48_GENERIC+0x1e8>)
 80053c0:	fb2e 8303 	smlad	r3, lr, r3, r8
 80053c4:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	9b02      	ldr	r3, [sp, #8]
 80053cc:	eb04 0807 	add.w	r8, r4, r7
 80053d0:	eba8 0803 	sub.w	r8, r8, r3
 80053d4:	9b05      	ldr	r3, [sp, #20]
 80053d6:	4465      	add	r5, ip
 80053d8:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80053dc:	b163      	cbz	r3, 80053f8 <D48_GENERIC+0x14c>
 80053de:	6a17      	ldr	r7, [r2, #32]
 80053e0:	9402      	str	r4, [sp, #8]
 80053e2:	fba8 8907 	umull	r8, r9, r8, r7
 80053e6:	fb07 990b 	mla	r9, r7, fp, r9
 80053ea:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80053ee:	f149 0900 	adc.w	r9, r9, #0
 80053f2:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80053f6:	463c      	mov	r4, r7
 80053f8:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	02e4      	lsls	r4, r4, #11
 8005400:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005404:	f04f 0900 	mov.w	r9, #0
 8005408:	fb0c fc0e 	mul.w	ip, ip, lr
 800540c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005410:	9b04      	ldr	r3, [sp, #16]
 8005412:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8005416:	f304 040f 	ssat	r4, #16, r4
 800541a:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800541e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005420:	fa1f fc85 	uxth.w	ip, r5
 8005424:	4564      	cmp	r4, ip
 8005426:	d919      	bls.n	800545c <D48_GENERIC+0x1b0>
 8005428:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800542a:	fa5f fe84 	uxtb.w	lr, r4
 800542e:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8005432:	f1ce 0500 	rsb	r5, lr, #0
 8005436:	eb00 0b09 	add.w	fp, r0, r9
 800543a:	eb0b 0a05 	add.w	sl, fp, r5
 800543e:	2c01      	cmp	r4, #1
 8005440:	eb0a 0809 	add.w	r8, sl, r9
 8005444:	f47f af53 	bne.w	80052ee <D48_GENERIC+0x42>
 8005448:	9b06      	ldr	r3, [sp, #24]
 800544a:	6805      	ldr	r5, [r0, #0]
 800544c:	6844      	ldr	r4, [r0, #4]
 800544e:	3006      	adds	r0, #6
 8005450:	2b00      	cmp	r3, #0
 8005452:	f43f af63 	beq.w	800531c <D48_GENERIC+0x70>
 8005456:	ba6d      	rev16	r5, r5
 8005458:	ba64      	rev16	r4, r4
 800545a:	e75f      	b.n	800531c <D48_GENERIC+0x70>
 800545c:	9b01      	ldr	r3, [sp, #4]
 800545e:	46ba      	mov	sl, r7
 8005460:	6093      	str	r3, [r2, #8]
 8005462:	9b00      	ldr	r3, [sp, #0]
 8005464:	60d3      	str	r3, [r2, #12]
 8005466:	9b02      	ldr	r3, [sp, #8]
 8005468:	6153      	str	r3, [r2, #20]
 800546a:	9b07      	ldr	r3, [sp, #28]
 800546c:	61d6      	str	r6, [r2, #28]
 800546e:	2000      	movs	r0, #0
 8005470:	f8c2 a010 	str.w	sl, [r2, #16]
 8005474:	6193      	str	r3, [r2, #24]
 8005476:	b009      	add	sp, #36	; 0x24
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547c:	20000000 	.word	0x20000000
 8005480:	000f000a 	.word	0x000f000a
 8005484:	00060003 	.word	0x00060003
 8005488:	00150019 	.word	0x00150019
 800548c:	00190015 	.word	0x00190015
 8005490:	00030006 	.word	0x00030006
 8005494:	000a000f 	.word	0x000a000f

08005498 <D64_GENERIC>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	b089      	sub	sp, #36	; 0x24
 800549e:	6913      	ldr	r3, [r2, #16]
 80054a0:	6895      	ldr	r5, [r2, #8]
 80054a2:	9303      	str	r3, [sp, #12]
 80054a4:	9501      	str	r5, [sp, #4]
 80054a6:	6953      	ldr	r3, [r2, #20]
 80054a8:	68d5      	ldr	r5, [r2, #12]
 80054aa:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	9500      	str	r5, [sp, #0]
 80054b0:	6993      	ldr	r3, [r2, #24]
 80054b2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80054b4:	9307      	str	r3, [sp, #28]
 80054b6:	9505      	str	r5, [sp, #20]
 80054b8:	69d3      	ldr	r3, [r2, #28]
 80054ba:	9106      	str	r1, [sp, #24]
 80054bc:	2c00      	cmp	r4, #0
 80054be:	f000 80d9 	beq.w	8005674 <D64_GENERIC+0x1dc>
 80054c2:	6a11      	ldr	r1, [r2, #32]
 80054c4:	9102      	str	r1, [sp, #8]
 80054c6:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80056b4 <D64_GENERIC+0x21c>
 80054ca:	f04f 0c00 	mov.w	ip, #0
 80054ce:	4681      	mov	r9, r0
 80054d0:	e0c1      	b.n	8005656 <D64_GENERIC+0x1be>
 80054d2:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80054d6:	4274      	negs	r4, r6
 80054d8:	eb09 0708 	add.w	r7, r9, r8
 80054dc:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80054e0:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80054e4:	5d38      	ldrb	r0, [r7, r4]
 80054e6:	5d29      	ldrb	r1, [r5, r4]
 80054e8:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80054ec:	f819 a008 	ldrb.w	sl, [r9, r8]
 80054f0:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80054f4:	f899 7000 	ldrb.w	r7, [r9]
 80054f8:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80054fc:	4425      	add	r5, r4
 80054fe:	0409      	lsls	r1, r1, #16
 8005500:	0400      	lsls	r0, r0, #16
 8005502:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8005506:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800550a:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800550e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8005512:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8005516:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800551a:	4459      	add	r1, fp
 800551c:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8005520:	4438      	add	r0, r7
 8005522:	b2c5      	uxtb	r5, r0
 8005524:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005528:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800552c:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8005530:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8005534:	0e00      	lsrs	r0, r0, #24
 8005536:	eb03 0806 	add.w	r8, r3, r6
 800553a:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800553e:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8005542:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005546:	b2c8      	uxtb	r0, r1
 8005548:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800554c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005550:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8005554:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8005558:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800555c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005560:	0e09      	lsrs	r1, r1, #24
 8005562:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8005566:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800556a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800556e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005572:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8005576:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800557a:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800557e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005582:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005586:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800558a:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800558e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005592:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005596:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800559a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800559e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80055a2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80055a6:	0a8b      	lsrs	r3, r1, #10
 80055a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80055ac:	4939      	ldr	r1, [pc, #228]	; (8005694 <D64_GENERIC+0x1fc>)
 80055ae:	9c00      	ldr	r4, [sp, #0]
 80055b0:	fb28 4101 	smlad	r1, r8, r1, r4
 80055b4:	4c38      	ldr	r4, [pc, #224]	; (8005698 <D64_GENERIC+0x200>)
 80055b6:	fb27 1104 	smlad	r1, r7, r4, r1
 80055ba:	4c38      	ldr	r4, [pc, #224]	; (800569c <D64_GENERIC+0x204>)
 80055bc:	fb20 1104 	smlad	r1, r0, r4, r1
 80055c0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80055c4:	fb2a 1106 	smlad	r1, sl, r6, r1
 80055c8:	4c35      	ldr	r4, [pc, #212]	; (80056a0 <D64_GENERIC+0x208>)
 80055ca:	9d01      	ldr	r5, [sp, #4]
 80055cc:	fb28 5404 	smlad	r4, r8, r4, r5
 80055d0:	4d33      	ldr	r5, [pc, #204]	; (80056a0 <D64_GENERIC+0x208>)
 80055d2:	fb2a 4415 	smladx	r4, sl, r5, r4
 80055d6:	4d33      	ldr	r5, [pc, #204]	; (80056a4 <D64_GENERIC+0x20c>)
 80055d8:	fb27 4405 	smlad	r4, r7, r5, r4
 80055dc:	fb20 4415 	smladx	r4, r0, r5, r4
 80055e0:	2501      	movs	r5, #1
 80055e2:	9400      	str	r4, [sp, #0]
 80055e4:	fb28 f805 	smuad	r8, r8, r5
 80055e8:	4c2f      	ldr	r4, [pc, #188]	; (80056a8 <D64_GENERIC+0x210>)
 80055ea:	fb27 8704 	smlad	r7, r7, r4, r8
 80055ee:	4c2f      	ldr	r4, [pc, #188]	; (80056ac <D64_GENERIC+0x214>)
 80055f0:	fb20 7004 	smlad	r0, r0, r4, r7
 80055f4:	4c2e      	ldr	r4, [pc, #184]	; (80056b0 <D64_GENERIC+0x218>)
 80055f6:	fb2a 0004 	smlad	r0, sl, r4, r0
 80055fa:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80055fe:	9902      	ldr	r1, [sp, #8]
 8005600:	9001      	str	r0, [sp, #4]
 8005602:	b189      	cbz	r1, 8005628 <D64_GENERIC+0x190>
 8005604:	9803      	ldr	r0, [sp, #12]
 8005606:	9c04      	ldr	r4, [sp, #16]
 8005608:	9604      	str	r6, [sp, #16]
 800560a:	4430      	add	r0, r6
 800560c:	1b00      	subs	r0, r0, r4
 800560e:	17c5      	asrs	r5, r0, #31
 8005610:	460f      	mov	r7, r1
 8005612:	fba0 0101 	umull	r0, r1, r0, r1
 8005616:	fb07 1105 	mla	r1, r7, r5, r1
 800561a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800561e:	f141 0100 	adc.w	r1, r1, #0
 8005622:	0049      	lsls	r1, r1, #1
 8005624:	9103      	str	r1, [sp, #12]
 8005626:	460e      	mov	r6, r1
 8005628:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800562a:	9905      	ldr	r1, [sp, #20]
 800562c:	9806      	ldr	r0, [sp, #24]
 800562e:	02b6      	lsls	r6, r6, #10
 8005630:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005634:	f04f 0800 	mov.w	r8, #0
 8005638:	fb0c f404 	mul.w	r4, ip, r4
 800563c:	fbc1 7806 	smlal	r7, r8, r1, r6
 8005640:	4641      	mov	r1, r8
 8005642:	1089      	asrs	r1, r1, #2
 8005644:	f301 010f 	ssat	r1, #16, r1
 8005648:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800564c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800564e:	f10c 0c01 	add.w	ip, ip, #1
 8005652:	4561      	cmp	r1, ip
 8005654:	dd0e      	ble.n	8005674 <D64_GENERIC+0x1dc>
 8005656:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8005658:	2e01      	cmp	r6, #1
 800565a:	f47f af3a 	bne.w	80054d2 <D64_GENERIC+0x3a>
 800565e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005660:	06b4      	lsls	r4, r6, #26
 8005662:	e899 0003 	ldmia.w	r9, {r0, r1}
 8005666:	f109 0908 	add.w	r9, r9, #8
 800566a:	f57f af5a 	bpl.w	8005522 <D64_GENERIC+0x8a>
 800566e:	ba40      	rev16	r0, r0
 8005670:	ba49      	rev16	r1, r1
 8005672:	e756      	b.n	8005522 <D64_GENERIC+0x8a>
 8005674:	61d3      	str	r3, [r2, #28]
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	9901      	ldr	r1, [sp, #4]
 800567a:	6113      	str	r3, [r2, #16]
 800567c:	9b04      	ldr	r3, [sp, #16]
 800567e:	6091      	str	r1, [r2, #8]
 8005680:	6153      	str	r3, [r2, #20]
 8005682:	9900      	ldr	r1, [sp, #0]
 8005684:	9b07      	ldr	r3, [sp, #28]
 8005686:	60d1      	str	r1, [r2, #12]
 8005688:	2000      	movs	r0, #0
 800568a:	6193      	str	r3, [r2, #24]
 800568c:	b009      	add	sp, #36	; 0x24
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005692:	bf00      	nop
 8005694:	001c0015 	.word	0x001c0015
 8005698:	000f000a 	.word	0x000f000a
 800569c:	00060003 	.word	0x00060003
 80056a0:	0024002a 	.word	0x0024002a
 80056a4:	002e0030 	.word	0x002e0030
 80056a8:	00030006 	.word	0x00030006
 80056ac:	000a000f 	.word	0x000a000f
 80056b0:	0015001c 	.word	0x0015001c
 80056b4:	20000000 	.word	0x20000000

080056b8 <D80_GENERIC>:
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	b08b      	sub	sp, #44	; 0x2c
 80056be:	6914      	ldr	r4, [r2, #16]
 80056c0:	9404      	str	r4, [sp, #16]
 80056c2:	6954      	ldr	r4, [r2, #20]
 80056c4:	9405      	str	r4, [sp, #20]
 80056c6:	6994      	ldr	r4, [r2, #24]
 80056c8:	9409      	str	r4, [sp, #36]	; 0x24
 80056ca:	6894      	ldr	r4, [r2, #8]
 80056cc:	9402      	str	r4, [sp, #8]
 80056ce:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80056d0:	68d4      	ldr	r4, [r2, #12]
 80056d2:	9401      	str	r4, [sp, #4]
 80056d4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80056d6:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80056da:	9406      	str	r4, [sp, #24]
 80056dc:	9107      	str	r1, [sp, #28]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 810f 	beq.w	8005902 <D80_GENERIC+0x24a>
 80056e4:	6a13      	ldr	r3, [r2, #32]
 80056e6:	9308      	str	r3, [sp, #32]
 80056e8:	2300      	movs	r3, #0
 80056ea:	9200      	str	r2, [sp, #0]
 80056ec:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8005954 <D80_GENERIC+0x29c>
 80056f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80056f4:	461a      	mov	r2, r3
 80056f6:	e0ed      	b.n	80058d4 <D80_GENERIC+0x21c>
 80056f8:	fa5f fc8c 	uxtb.w	ip, ip
 80056fc:	fa0f f48c 	sxth.w	r4, ip
 8005700:	0066      	lsls	r6, r4, #1
 8005702:	eb06 0804 	add.w	r8, r6, r4
 8005706:	f1cc 0500 	rsb	r5, ip, #0
 800570a:	eb00 0108 	add.w	r1, r0, r8
 800570e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005712:	194b      	adds	r3, r1, r5
 8005714:	5d49      	ldrb	r1, [r1, r5]
 8005716:	f810 a008 	ldrb.w	sl, [r0, r8]
 800571a:	f813 b004 	ldrb.w	fp, [r3, r4]
 800571e:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8005722:	f890 8000 	ldrb.w	r8, [r0]
 8005726:	eb03 0e04 	add.w	lr, r3, r4
 800572a:	eb0e 0705 	add.w	r7, lr, r5
 800572e:	0409      	lsls	r1, r1, #16
 8005730:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8005734:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8005738:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800573c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8005740:	eb0a 0004 	add.w	r0, sl, r4
 8005744:	041b      	lsls	r3, r3, #16
 8005746:	f81a a004 	ldrb.w	sl, [sl, r4]
 800574a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800574e:	5d44      	ldrb	r4, [r0, r5]
 8005750:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8005754:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005758:	4428      	add	r0, r5
 800575a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800575e:	4441      	add	r1, r8
 8005760:	4430      	add	r0, r6
 8005762:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8005766:	441f      	add	r7, r3
 8005768:	b2cd      	uxtb	r5, r1
 800576a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800576e:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8005772:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800577c:	0e09      	lsrs	r1, r1, #24
 800577e:	4433      	add	r3, r6
 8005780:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8005784:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8005788:	b2fd      	uxtb	r5, r7
 800578a:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800578e:	469b      	mov	fp, r3
 8005790:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8005794:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8005798:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800579c:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80057a0:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80057a4:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80057a8:	0e3b      	lsrs	r3, r7, #24
 80057aa:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80057ae:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80057b2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80057b6:	fa5f fe84 	uxtb.w	lr, r4
 80057ba:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80057be:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80057c2:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80057c6:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80057ca:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80057ce:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80057d2:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80057d6:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80057da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80057de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80057e6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80057ea:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80057ee:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80057f2:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80057f6:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80057fa:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80057fe:	0aa3      	lsrs	r3, r4, #10
 8005800:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005804:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005808:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800580c:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8005810:	9303      	str	r3, [sp, #12]
 8005812:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8005816:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800581a:	4b42      	ldr	r3, [pc, #264]	; (8005924 <D80_GENERIC+0x26c>)
 800581c:	9901      	ldr	r1, [sp, #4]
 800581e:	fb2b 1303 	smlad	r3, fp, r3, r1
 8005822:	4941      	ldr	r1, [pc, #260]	; (8005928 <D80_GENERIC+0x270>)
 8005824:	fb28 3301 	smlad	r3, r8, r1, r3
 8005828:	4940      	ldr	r1, [pc, #256]	; (800592c <D80_GENERIC+0x274>)
 800582a:	fb2c 3301 	smlad	r3, ip, r1, r3
 800582e:	4940      	ldr	r1, [pc, #256]	; (8005930 <D80_GENERIC+0x278>)
 8005830:	fb27 3301 	smlad	r3, r7, r1, r3
 8005834:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005838:	fb2e 3301 	smlad	r3, lr, r1, r3
 800583c:	493d      	ldr	r1, [pc, #244]	; (8005934 <D80_GENERIC+0x27c>)
 800583e:	9c02      	ldr	r4, [sp, #8]
 8005840:	fb2b 4401 	smlad	r4, fp, r1, r4
 8005844:	493c      	ldr	r1, [pc, #240]	; (8005938 <D80_GENERIC+0x280>)
 8005846:	fb28 4401 	smlad	r4, r8, r1, r4
 800584a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800584e:	fb2c 4101 	smlad	r1, ip, r1, r4
 8005852:	4c3a      	ldr	r4, [pc, #232]	; (800593c <D80_GENERIC+0x284>)
 8005854:	fb27 1104 	smlad	r1, r7, r4, r1
 8005858:	4c39      	ldr	r4, [pc, #228]	; (8005940 <D80_GENERIC+0x288>)
 800585a:	fb2e 1104 	smlad	r1, lr, r4, r1
 800585e:	9101      	str	r1, [sp, #4]
 8005860:	2101      	movs	r1, #1
 8005862:	fb2b fb01 	smuad	fp, fp, r1
 8005866:	4937      	ldr	r1, [pc, #220]	; (8005944 <D80_GENERIC+0x28c>)
 8005868:	fb28 b801 	smlad	r8, r8, r1, fp
 800586c:	4d36      	ldr	r5, [pc, #216]	; (8005948 <D80_GENERIC+0x290>)
 800586e:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8005872:	4d36      	ldr	r5, [pc, #216]	; (800594c <D80_GENERIC+0x294>)
 8005874:	fb27 c705 	smlad	r7, r7, r5, ip
 8005878:	4d35      	ldr	r5, [pc, #212]	; (8005950 <D80_GENERIC+0x298>)
 800587a:	fb2e 7105 	smlad	r1, lr, r5, r7
 800587e:	9102      	str	r1, [sp, #8]
 8005880:	9908      	ldr	r1, [sp, #32]
 8005882:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8005886:	b181      	cbz	r1, 80058aa <D80_GENERIC+0x1f2>
 8005888:	9c04      	ldr	r4, [sp, #16]
 800588a:	9d05      	ldr	r5, [sp, #20]
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	441c      	add	r4, r3
 8005890:	1b64      	subs	r4, r4, r5
 8005892:	17e7      	asrs	r7, r4, #31
 8005894:	fba4 4501 	umull	r4, r5, r4, r1
 8005898:	fb01 5507 	mla	r5, r1, r7, r5
 800589c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80058a0:	f145 0500 	adc.w	r5, r5, #0
 80058a4:	0069      	lsls	r1, r5, #1
 80058a6:	9104      	str	r1, [sp, #16]
 80058a8:	460b      	mov	r3, r1
 80058aa:	9e00      	ldr	r6, [sp, #0]
 80058ac:	9f06      	ldr	r7, [sp, #24]
 80058ae:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80058b0:	025b      	lsls	r3, r3, #9
 80058b2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80058b6:	2500      	movs	r5, #0
 80058b8:	fb02 f101 	mul.w	r1, r2, r1
 80058bc:	fbc7 4503 	smlal	r4, r5, r7, r3
 80058c0:	9c07      	ldr	r4, [sp, #28]
 80058c2:	10ab      	asrs	r3, r5, #2
 80058c4:	f303 030f 	ssat	r3, #16, r3
 80058c8:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80058cc:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80058ce:	3201      	adds	r2, #1
 80058d0:	4293      	cmp	r3, r2
 80058d2:	dd13      	ble.n	80058fc <D80_GENERIC+0x244>
 80058d4:	9b00      	ldr	r3, [sp, #0]
 80058d6:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80058da:	f1bc 0f01 	cmp.w	ip, #1
 80058de:	f47f af0b 	bne.w	80056f8 <D80_GENERIC+0x40>
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	6884      	ldr	r4, [r0, #8]
 80058e6:	069b      	lsls	r3, r3, #26
 80058e8:	e890 0082 	ldmia.w	r0, {r1, r7}
 80058ec:	f100 000a 	add.w	r0, r0, #10
 80058f0:	f57f af3a 	bpl.w	8005768 <D80_GENERIC+0xb0>
 80058f4:	ba49      	rev16	r1, r1
 80058f6:	ba7f      	rev16	r7, r7
 80058f8:	ba64      	rev16	r4, r4
 80058fa:	e735      	b.n	8005768 <D80_GENERIC+0xb0>
 80058fc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005900:	4632      	mov	r2, r6
 8005902:	9b02      	ldr	r3, [sp, #8]
 8005904:	6093      	str	r3, [r2, #8]
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	60d3      	str	r3, [r2, #12]
 800590a:	9b04      	ldr	r3, [sp, #16]
 800590c:	6113      	str	r3, [r2, #16]
 800590e:	9b05      	ldr	r3, [sp, #20]
 8005910:	6153      	str	r3, [r2, #20]
 8005912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005914:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005918:	2000      	movs	r0, #0
 800591a:	6193      	str	r3, [r2, #24]
 800591c:	b00b      	add	sp, #44	; 0x2c
 800591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005922:	bf00      	nop
 8005924:	002d0024 	.word	0x002d0024
 8005928:	001c0015 	.word	0x001c0015
 800592c:	000f000a 	.word	0x000f000a
 8005930:	00060003 	.word	0x00060003
 8005934:	0037003f 	.word	0x0037003f
 8005938:	00450049 	.word	0x00450049
 800593c:	00490045 	.word	0x00490045
 8005940:	003f0037 	.word	0x003f0037
 8005944:	00030006 	.word	0x00030006
 8005948:	000a000f 	.word	0x000a000f
 800594c:	0015001c 	.word	0x0015001c
 8005950:	0024002d 	.word	0x0024002d
 8005954:	20000000 	.word	0x20000000

08005958 <D128_GENERIC>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	b093      	sub	sp, #76	; 0x4c
 800595e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005960:	9005      	str	r0, [sp, #20]
 8005962:	4610      	mov	r0, r2
 8005964:	9201      	str	r2, [sp, #4]
 8005966:	6912      	ldr	r2, [r2, #16]
 8005968:	920c      	str	r2, [sp, #48]	; 0x30
 800596a:	4602      	mov	r2, r0
 800596c:	6940      	ldr	r0, [r0, #20]
 800596e:	900d      	str	r0, [sp, #52]	; 0x34
 8005970:	4610      	mov	r0, r2
 8005972:	4614      	mov	r4, r2
 8005974:	6992      	ldr	r2, [r2, #24]
 8005976:	9211      	str	r2, [sp, #68]	; 0x44
 8005978:	69c2      	ldr	r2, [r0, #28]
 800597a:	9202      	str	r2, [sp, #8]
 800597c:	68e2      	ldr	r2, [r4, #12]
 800597e:	6880      	ldr	r0, [r0, #8]
 8005980:	9203      	str	r2, [sp, #12]
 8005982:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005984:	9004      	str	r0, [sp, #16]
 8005986:	920e      	str	r2, [sp, #56]	; 0x38
 8005988:	910f      	str	r1, [sp, #60]	; 0x3c
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 819b 	beq.w	8005cc6 <D128_GENERIC+0x36e>
 8005990:	6a23      	ldr	r3, [r4, #32]
 8005992:	9310      	str	r3, [sp, #64]	; 0x40
 8005994:	2300      	movs	r3, #0
 8005996:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8005d40 <D128_GENERIC+0x3e8>
 800599a:	9306      	str	r3, [sp, #24]
 800599c:	e17a      	b.n	8005c94 <D128_GENERIC+0x33c>
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	9d05      	ldr	r5, [sp, #20]
 80059a2:	b214      	sxth	r4, r2
 80059a4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80059a8:	4250      	negs	r0, r2
 80059aa:	eb05 010a 	add.w	r1, r5, sl
 80059ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059b2:	eb01 0800 	add.w	r8, r1, r0
 80059b6:	eb0b 0c04 	add.w	ip, fp, r4
 80059ba:	eb08 070c 	add.w	r7, r8, ip
 80059be:	183b      	adds	r3, r7, r0
 80059c0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80059c4:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 80059c8:	eb0e 0604 	add.w	r6, lr, r4
 80059cc:	9307      	str	r3, [sp, #28]
 80059ce:	1833      	adds	r3, r6, r0
 80059d0:	9305      	str	r3, [sp, #20]
 80059d2:	462b      	mov	r3, r5
 80059d4:	f815 a00a 	ldrb.w	sl, [r5, sl]
 80059d8:	f8cd a020 	str.w	sl, [sp, #32]
 80059dc:	f818 a00c 	ldrb.w	sl, [r8, ip]
 80059e0:	f813 c002 	ldrb.w	ip, [r3, r2]
 80059e4:	f81e 8004 	ldrb.w	r8, [lr, r4]
 80059e8:	5c3a      	ldrb	r2, [r7, r0]
 80059ea:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 80059ee:	781f      	ldrb	r7, [r3, #0]
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	9d05      	ldr	r5, [sp, #20]
 80059f4:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80059f8:	5c09      	ldrb	r1, [r1, r0]
 80059fa:	9709      	str	r7, [sp, #36]	; 0x24
 80059fc:	9307      	str	r3, [sp, #28]
 80059fe:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8005a02:	5c33      	ldrb	r3, [r6, r0]
 8005a04:	0412      	lsls	r2, r2, #16
 8005a06:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005a0a:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005a0e:	9d08      	ldr	r5, [sp, #32]
 8005a10:	eb06 0a04 	add.w	sl, r6, r4
 8005a14:	0409      	lsls	r1, r1, #16
 8005a16:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8005a1a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8005a1e:	5d36      	ldrb	r6, [r6, r4]
 8005a20:	9c05      	ldr	r4, [sp, #20]
 8005a22:	042d      	lsls	r5, r5, #16
 8005a24:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8005a28:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005a2c:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8005a30:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8005a34:	eb0a 0c00 	add.w	ip, sl, r0
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005a3e:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8005a42:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8005a46:	9d07      	ldr	r5, [sp, #28]
 8005a48:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005a4c:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8005a50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a52:	4458      	add	r0, fp
 8005a54:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8005a58:	9005      	str	r0, [sp, #20]
 8005a5a:	4439      	add	r1, r7
 8005a5c:	442a      	add	r2, r5
 8005a5e:	44b2      	add	sl, r6
 8005a60:	1918      	adds	r0, r3, r4
 8005a62:	b2cb      	uxtb	r3, r1
 8005a64:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8005a68:	9e02      	ldr	r6, [sp, #8]
 8005a6a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005a6e:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8005a72:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8005a76:	441e      	add	r6, r3
 8005a78:	0e09      	lsrs	r1, r1, #24
 8005a7a:	4633      	mov	r3, r6
 8005a7c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005a80:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8005a84:	b2d4      	uxtb	r4, r2
 8005a86:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005a8a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005a8e:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8005a92:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005a96:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005a9a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005a9e:	0e12      	lsrs	r2, r2, #24
 8005aa0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8005aa4:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8005aa8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005aac:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8005ab0:	9702      	str	r7, [sp, #8]
 8005ab2:	b2c2      	uxtb	r2, r0
 8005ab4:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8005ab8:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8005abc:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8005ac0:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005ac4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005ac8:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005acc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8005ad0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8005ad4:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005ad8:	0e00      	lsrs	r0, r0, #24
 8005ada:	fa5f f68a 	uxtb.w	r6, sl
 8005ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae4:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8005ae8:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005aec:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005af0:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005af4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005af8:	950a      	str	r5, [sp, #40]	; 0x28
 8005afa:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005afe:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005b02:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005b06:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005b0a:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005b0e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005b12:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b14:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b1a:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005b1e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005b28:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005b2c:	9b02      	ldr	r3, [sp, #8]
 8005b2e:	f8cd c008 	str.w	ip, [sp, #8]
 8005b32:	4694      	mov	ip, r2
 8005b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b36:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8005b3a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8005b3e:	9a02      	ldr	r2, [sp, #8]
 8005b40:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005b44:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005b48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b4e:	f8cd a020 	str.w	sl, [sp, #32]
 8005b52:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005b56:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005b5a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005b5e:	9b07      	ldr	r3, [sp, #28]
 8005b60:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005b64:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8005b68:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8005b6c:	9a08      	ldr	r2, [sp, #32]
 8005b6e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b76:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005b7a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005b7e:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8005b82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005b86:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005b8a:	0a96      	lsrs	r6, r2, #10
 8005b8c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005b90:	9602      	str	r6, [sp, #8]
 8005b92:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005b96:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005b9a:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8005b9e:	4e53      	ldr	r6, [pc, #332]	; (8005cec <D128_GENERIC+0x394>)
 8005ba0:	9f03      	ldr	r7, [sp, #12]
 8005ba2:	fb2c 7606 	smlad	r6, ip, r6, r7
 8005ba6:	4f52      	ldr	r7, [pc, #328]	; (8005cf0 <D128_GENERIC+0x398>)
 8005ba8:	fb2a 6607 	smlad	r6, sl, r7, r6
 8005bac:	4f51      	ldr	r7, [pc, #324]	; (8005cf4 <D128_GENERIC+0x39c>)
 8005bae:	fb21 6607 	smlad	r6, r1, r7, r6
 8005bb2:	4f51      	ldr	r7, [pc, #324]	; (8005cf8 <D128_GENERIC+0x3a0>)
 8005bb4:	fb24 6607 	smlad	r6, r4, r7, r6
 8005bb8:	4f50      	ldr	r7, [pc, #320]	; (8005cfc <D128_GENERIC+0x3a4>)
 8005bba:	fb28 6607 	smlad	r6, r8, r7, r6
 8005bbe:	4f50      	ldr	r7, [pc, #320]	; (8005d00 <D128_GENERIC+0x3a8>)
 8005bc0:	fb20 6607 	smlad	r6, r0, r7, r6
 8005bc4:	4f4f      	ldr	r7, [pc, #316]	; (8005d04 <D128_GENERIC+0x3ac>)
 8005bc6:	fb23 6607 	smlad	r6, r3, r7, r6
 8005bca:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8005bce:	fb25 6607 	smlad	r6, r5, r7, r6
 8005bd2:	4f4d      	ldr	r7, [pc, #308]	; (8005d08 <D128_GENERIC+0x3b0>)
 8005bd4:	9a04      	ldr	r2, [sp, #16]
 8005bd6:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8005bda:	4a4c      	ldr	r2, [pc, #304]	; (8005d0c <D128_GENERIC+0x3b4>)
 8005bdc:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005be0:	4f4b      	ldr	r7, [pc, #300]	; (8005d10 <D128_GENERIC+0x3b8>)
 8005be2:	fb21 ee07 	smlad	lr, r1, r7, lr
 8005be6:	4f4b      	ldr	r7, [pc, #300]	; (8005d14 <D128_GENERIC+0x3bc>)
 8005be8:	fb24 ee07 	smlad	lr, r4, r7, lr
 8005bec:	4f4a      	ldr	r7, [pc, #296]	; (8005d18 <D128_GENERIC+0x3c0>)
 8005bee:	fb28 ee07 	smlad	lr, r8, r7, lr
 8005bf2:	4f4a      	ldr	r7, [pc, #296]	; (8005d1c <D128_GENERIC+0x3c4>)
 8005bf4:	fb20 ee07 	smlad	lr, r0, r7, lr
 8005bf8:	4f49      	ldr	r7, [pc, #292]	; (8005d20 <D128_GENERIC+0x3c8>)
 8005bfa:	fb23 e707 	smlad	r7, r3, r7, lr
 8005bfe:	f8df e144 	ldr.w	lr, [pc, #324]	; 8005d44 <D128_GENERIC+0x3ec>
 8005c02:	fb25 720e 	smlad	r2, r5, lr, r7
 8005c06:	f04f 0b01 	mov.w	fp, #1
 8005c0a:	9203      	str	r2, [sp, #12]
 8005c0c:	fb2c fb0b 	smuad	fp, ip, fp
 8005c10:	4f44      	ldr	r7, [pc, #272]	; (8005d24 <D128_GENERIC+0x3cc>)
 8005c12:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005c16:	4f44      	ldr	r7, [pc, #272]	; (8005d28 <D128_GENERIC+0x3d0>)
 8005c18:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005c1c:	4f43      	ldr	r7, [pc, #268]	; (8005d2c <D128_GENERIC+0x3d4>)
 8005c1e:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005c22:	4f43      	ldr	r7, [pc, #268]	; (8005d30 <D128_GENERIC+0x3d8>)
 8005c24:	fb28 a707 	smlad	r7, r8, r7, sl
 8005c28:	4a42      	ldr	r2, [pc, #264]	; (8005d34 <D128_GENERIC+0x3dc>)
 8005c2a:	fb20 7702 	smlad	r7, r0, r2, r7
 8005c2e:	4a42      	ldr	r2, [pc, #264]	; (8005d38 <D128_GENERIC+0x3e0>)
 8005c30:	fb23 7702 	smlad	r7, r3, r2, r7
 8005c34:	4b41      	ldr	r3, [pc, #260]	; (8005d3c <D128_GENERIC+0x3e4>)
 8005c36:	fb25 7303 	smlad	r3, r5, r3, r7
 8005c3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c3c:	9304      	str	r3, [sp, #16]
 8005c3e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8005c42:	b185      	cbz	r5, 8005c66 <D128_GENERIC+0x30e>
 8005c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c48:	960d      	str	r6, [sp, #52]	; 0x34
 8005c4a:	4432      	add	r2, r6
 8005c4c:	1a52      	subs	r2, r2, r1
 8005c4e:	17d1      	asrs	r1, r2, #31
 8005c50:	fba2 2305 	umull	r2, r3, r2, r5
 8005c54:	fb05 3301 	mla	r3, r5, r1, r3
 8005c58:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005c5c:	f143 0300 	adc.w	r3, r3, #0
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	930c      	str	r3, [sp, #48]	; 0x30
 8005c64:	461e      	mov	r6, r3
 8005c66:	9801      	ldr	r0, [sp, #4]
 8005c68:	9c06      	ldr	r4, [sp, #24]
 8005c6a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8005c6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005c6e:	01f6      	lsls	r6, r6, #7
 8005c70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c74:	2300      	movs	r3, #0
 8005c76:	fbc5 2306 	smlal	r2, r3, r5, r6
 8005c7a:	fb04 f101 	mul.w	r1, r4, r1
 8005c7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c80:	109b      	asrs	r3, r3, #2
 8005c82:	f303 030f 	ssat	r3, #16, r3
 8005c86:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8005c8a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005c8c:	1c62      	adds	r2, r4, #1
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	9206      	str	r2, [sp, #24]
 8005c92:	dd18      	ble.n	8005cc6 <D128_GENERIC+0x36e>
 8005c94:	9b01      	ldr	r3, [sp, #4]
 8005c96:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005c98:	2a01      	cmp	r2, #1
 8005c9a:	f47f ae80 	bne.w	800599e <D128_GENERIC+0x46>
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	9d05      	ldr	r5, [sp, #20]
 8005ca2:	069b      	lsls	r3, r3, #26
 8005ca4:	6829      	ldr	r1, [r5, #0]
 8005ca6:	686a      	ldr	r2, [r5, #4]
 8005ca8:	68a8      	ldr	r0, [r5, #8]
 8005caa:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8005cae:	f105 0410 	add.w	r4, r5, #16
 8005cb2:	d506      	bpl.n	8005cc2 <D128_GENERIC+0x36a>
 8005cb4:	ba49      	rev16	r1, r1
 8005cb6:	ba52      	rev16	r2, r2
 8005cb8:	ba40      	rev16	r0, r0
 8005cba:	fa9a fa9a 	rev16.w	sl, sl
 8005cbe:	9405      	str	r4, [sp, #20]
 8005cc0:	e6cf      	b.n	8005a62 <D128_GENERIC+0x10a>
 8005cc2:	9405      	str	r4, [sp, #20]
 8005cc4:	e6cd      	b.n	8005a62 <D128_GENERIC+0x10a>
 8005cc6:	9a01      	ldr	r2, [sp, #4]
 8005cc8:	9904      	ldr	r1, [sp, #16]
 8005cca:	6091      	str	r1, [r2, #8]
 8005ccc:	9903      	ldr	r1, [sp, #12]
 8005cce:	60d1      	str	r1, [r2, #12]
 8005cd0:	9b02      	ldr	r3, [sp, #8]
 8005cd2:	61d3      	str	r3, [r2, #28]
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cda:	610a      	str	r2, [r1, #16]
 8005cdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cde:	6159      	str	r1, [r3, #20]
 8005ce0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005ce2:	6199      	str	r1, [r3, #24]
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	b013      	add	sp, #76	; 0x4c
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	00780069 	.word	0x00780069
 8005cf0:	005b004e 	.word	0x005b004e
 8005cf4:	00420037 	.word	0x00420037
 8005cf8:	002d0024 	.word	0x002d0024
 8005cfc:	001c0015 	.word	0x001c0015
 8005d00:	000f000a 	.word	0x000f000a
 8005d04:	00060003 	.word	0x00060003
 8005d08:	00880096 	.word	0x00880096
 8005d0c:	00a200ac 	.word	0x00a200ac
 8005d10:	00b400ba 	.word	0x00b400ba
 8005d14:	00be00c0 	.word	0x00be00c0
 8005d18:	00c000be 	.word	0x00c000be
 8005d1c:	00ba00b4 	.word	0x00ba00b4
 8005d20:	00ac00a2 	.word	0x00ac00a2
 8005d24:	00030006 	.word	0x00030006
 8005d28:	000a000f 	.word	0x000a000f
 8005d2c:	0015001c 	.word	0x0015001c
 8005d30:	0024002d 	.word	0x0024002d
 8005d34:	00370042 	.word	0x00370042
 8005d38:	004e005b 	.word	0x004e005b
 8005d3c:	00690078 	.word	0x00690078
 8005d40:	20000000 	.word	0x20000000
 8005d44:	00960088 	.word	0x00960088

08005d48 <D16_1CH_HTONS_VOL_HP>:
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	4691      	mov	r9, r2
 8005d4e:	b083      	sub	sp, #12
 8005d50:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005d52:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8005d56:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8005d62:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8005d66:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d6a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005d6e:	9401      	str	r4, [sp, #4]
 8005d70:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8005d74:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	d04e      	beq.n	8005e1a <D16_1CH_HTONS_VOL_HP+0xd2>
 8005d7c:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8005e28 <D16_1CH_HTONS_VOL_HP+0xe0>
 8005d80:	1e8c      	subs	r4, r1, #2
 8005d82:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8005d86:	f858 2b02 	ldr.w	r2, [r8], #2
 8005d8a:	ba52      	rev16	r2, r2
 8005d8c:	b2d6      	uxtb	r6, r2
 8005d8e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005d92:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8005d96:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8005da0:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8005da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005dac:	0a93      	lsrs	r3, r2, #10
 8005dae:	4a1c      	ldr	r2, [pc, #112]	; (8005e20 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8005db0:	fb21 5202 	smlad	r2, r1, r2, r5
 8005db4:	4d1b      	ldr	r5, [pc, #108]	; (8005e24 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8005db6:	fb21 f505 	smuad	r5, r1, r5
 8005dba:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005dbe:	4410      	add	r0, r2
 8005dc0:	1bc0      	subs	r0, r0, r7
 8005dc2:	17c7      	asrs	r7, r0, #31
 8005dc4:	fba0 010e 	umull	r0, r1, r0, lr
 8005dc8:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005dcc:	fb0e 1107 	mla	r1, lr, r7, r1
 8005dd0:	f141 0100 	adc.w	r1, r1, #0
 8005dd4:	0448      	lsls	r0, r1, #17
 8005dd6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005dda:	2700      	movs	r7, #0
 8005ddc:	fbc0 670a 	smlal	r6, r7, r0, sl
 8005de0:	45d8      	cmp	r8, fp
 8005de2:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8005de6:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8005dea:	4617      	mov	r7, r2
 8005dec:	f301 010f 	ssat	r1, #16, r1
 8005df0:	f824 1f02 	strh.w	r1, [r4, #2]!
 8005df4:	d1c7      	bne.n	8005d86 <D16_1CH_HTONS_VOL_HP+0x3e>
 8005df6:	9901      	ldr	r1, [sp, #4]
 8005df8:	f8c9 301c 	str.w	r3, [r9, #28]
 8005dfc:	9b00      	ldr	r3, [sp, #0]
 8005dfe:	f8c9 0010 	str.w	r0, [r9, #16]
 8005e02:	2000      	movs	r0, #0
 8005e04:	f8c9 5008 	str.w	r5, [r9, #8]
 8005e08:	f8c9 100c 	str.w	r1, [r9, #12]
 8005e0c:	f8c9 2014 	str.w	r2, [r9, #20]
 8005e10:	f8c9 3018 	str.w	r3, [r9, #24]
 8005e14:	b003      	add	sp, #12
 8005e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	e7eb      	b.n	8005df8 <D16_1CH_HTONS_VOL_HP+0xb0>
 8005e20:	00030001 	.word	0x00030001
 8005e24:	00010003 	.word	0x00010003
 8005e28:	20000000 	.word	0x20000000

08005e2c <D24_1CH_HTONS_VOL_HP>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	b089      	sub	sp, #36	; 0x24
 8005e32:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005e34:	6996      	ldr	r6, [r2, #24]
 8005e36:	9304      	str	r3, [sp, #16]
 8005e38:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005e3a:	9207      	str	r2, [sp, #28]
 8005e3c:	6915      	ldr	r5, [r2, #16]
 8005e3e:	6954      	ldr	r4, [r2, #20]
 8005e40:	9606      	str	r6, [sp, #24]
 8005e42:	6893      	ldr	r3, [r2, #8]
 8005e44:	69d6      	ldr	r6, [r2, #28]
 8005e46:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8005e4a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8005e4e:	9a04      	ldr	r2, [sp, #16]
 8005e50:	9705      	str	r7, [sp, #20]
 8005e52:	2a00      	cmp	r2, #0
 8005e54:	d07e      	beq.n	8005f54 <D24_1CH_HTONS_VOL_HP+0x128>
 8005e56:	f1a1 0b02 	sub.w	fp, r1, #2
 8005e5a:	2700      	movs	r7, #0
 8005e5c:	46a8      	mov	r8, r5
 8005e5e:	f8cd b004 	str.w	fp, [sp, #4]
 8005e62:	4655      	mov	r5, sl
 8005e64:	46e3      	mov	fp, ip
 8005e66:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8005f60 <D24_1CH_HTONS_VOL_HP+0x134>
 8005e6a:	46ba      	mov	sl, r7
 8005e6c:	469c      	mov	ip, r3
 8005e6e:	e055      	b.n	8005f1c <D24_1CH_HTONS_VOL_HP+0xf0>
 8005e70:	7802      	ldrb	r2, [r0, #0]
 8005e72:	78c3      	ldrb	r3, [r0, #3]
 8005e74:	7841      	ldrb	r1, [r0, #1]
 8005e76:	0212      	lsls	r2, r2, #8
 8005e78:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005e7c:	440b      	add	r3, r1
 8005e7e:	3002      	adds	r0, #2
 8005e80:	b2d9      	uxtb	r1, r3
 8005e82:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005e86:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8005e8a:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005e94:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005e98:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8005e9c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8005ea0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005ea4:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005ea8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005eac:	4a2a      	ldr	r2, [pc, #168]	; (8005f58 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8005eae:	fb23 b102 	smlad	r1, r3, r2, fp
 8005eb2:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <D24_1CH_HTONS_VOL_HP+0x130>)
 8005eb4:	fb23 cb02 	smlad	fp, r3, r2, ip
 8005eb8:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8005ebc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005ec0:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	fb23 f702 	smuad	r7, r3, r2
 8005eca:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8005ece:	eb01 0208 	add.w	r2, r1, r8
 8005ed2:	1b12      	subs	r2, r2, r4
 8005ed4:	17d4      	asrs	r4, r2, #31
 8005ed6:	fba2 2305 	umull	r2, r3, r2, r5
 8005eda:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005ede:	fb05 3304 	mla	r3, r5, r4, r3
 8005ee2:	f143 0300 	adc.w	r3, r3, #0
 8005ee6:	9c05      	ldr	r4, [sp, #20]
 8005ee8:	03da      	lsls	r2, r3, #15
 8005eea:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005eee:	f04f 0900 	mov.w	r9, #0
 8005ef2:	fbc4 8902 	smlal	r8, r9, r4, r2
 8005ef6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005efa:	9a01      	ldr	r2, [sp, #4]
 8005efc:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	109b      	asrs	r3, r3, #2
 8005f04:	f303 030f 	ssat	r3, #16, r3
 8005f08:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005f0c:	9b04      	ldr	r3, [sp, #16]
 8005f0e:	9201      	str	r2, [sp, #4]
 8005f10:	f10a 0a01 	add.w	sl, sl, #1
 8005f14:	459a      	cmp	sl, r3
 8005f16:	44bc      	add	ip, r7
 8005f18:	460c      	mov	r4, r1
 8005f1a:	d00b      	beq.n	8005f34 <D24_1CH_HTONS_VOL_HP+0x108>
 8005f1c:	f01a 0f01 	tst.w	sl, #1
 8005f20:	d0a6      	beq.n	8005e70 <D24_1CH_HTONS_VOL_HP+0x44>
 8005f22:	78c2      	ldrb	r2, [r0, #3]
 8005f24:	7883      	ldrb	r3, [r0, #2]
 8005f26:	f810 1b04 	ldrb.w	r1, [r0], #4
 8005f2a:	0212      	lsls	r2, r2, #8
 8005f2c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005f30:	440b      	add	r3, r1
 8005f32:	e7a5      	b.n	8005e80 <D24_1CH_HTONS_VOL_HP+0x54>
 8005f34:	4663      	mov	r3, ip
 8005f36:	4645      	mov	r5, r8
 8005f38:	46dc      	mov	ip, fp
 8005f3a:	9807      	ldr	r0, [sp, #28]
 8005f3c:	6141      	str	r1, [r0, #20]
 8005f3e:	9906      	ldr	r1, [sp, #24]
 8005f40:	6083      	str	r3, [r0, #8]
 8005f42:	f8c0 c00c 	str.w	ip, [r0, #12]
 8005f46:	61c6      	str	r6, [r0, #28]
 8005f48:	6105      	str	r5, [r0, #16]
 8005f4a:	6181      	str	r1, [r0, #24]
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	b009      	add	sp, #36	; 0x24
 8005f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f54:	4621      	mov	r1, r4
 8005f56:	e7f0      	b.n	8005f3a <D24_1CH_HTONS_VOL_HP+0x10e>
 8005f58:	00030001 	.word	0x00030001
 8005f5c:	00060007 	.word	0x00060007
 8005f60:	20000000 	.word	0x20000000

08005f64 <D32_1CH_HTONS_VOL_HP>:
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	4692      	mov	sl, r2
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005f6e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005f72:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8005f76:	9304      	str	r3, [sp, #16]
 8005f78:	f8da 4010 	ldr.w	r4, [sl, #16]
 8005f7c:	f8da 8014 	ldr.w	r8, [sl, #20]
 8005f80:	f8da 601c 	ldr.w	r6, [sl, #28]
 8005f84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005f88:	f8da e00c 	ldr.w	lr, [sl, #12]
 8005f8c:	9501      	str	r5, [sp, #4]
 8005f8e:	f8da c020 	ldr.w	ip, [sl, #32]
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	d07b      	beq.n	800608e <D32_1CH_HTONS_VOL_HP+0x12a>
 8005f96:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005f9a:	4f3e      	ldr	r7, [pc, #248]	; (8006094 <D32_1CH_HTONS_VOL_HP+0x130>)
 8005f9c:	f8cd c00c 	str.w	ip, [sp, #12]
 8005fa0:	9202      	str	r2, [sp, #8]
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	46a1      	mov	r9, r4
 8005fa6:	4684      	mov	ip, r0
 8005fa8:	f8cd a014 	str.w	sl, [sp, #20]
 8005fac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005fb0:	ba49      	rev16	r1, r1
 8005fb2:	b2c8      	uxtb	r0, r1
 8005fb4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005fb8:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8005fbc:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005fc0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005fc4:	0e09      	lsrs	r1, r1, #24
 8005fc6:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005fca:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8005fce:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005fd2:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8005fd6:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8005fda:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8005fde:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005fe2:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8005fe6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005fea:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005fee:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005ff2:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8005ff6:	4a28      	ldr	r2, [pc, #160]	; (8006098 <D32_1CH_HTONS_VOL_HP+0x134>)
 8005ff8:	fb20 e202 	smlad	r2, r0, r2, lr
 8005ffc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006000:	fb2a 2101 	smlad	r1, sl, r1, r2
 8006004:	4a25      	ldr	r2, [pc, #148]	; (800609c <D32_1CH_HTONS_VOL_HP+0x138>)
 8006006:	fb20 3302 	smlad	r3, r0, r2, r3
 800600a:	4a25      	ldr	r2, [pc, #148]	; (80060a0 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800600c:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8006010:	2301      	movs	r3, #1
 8006012:	fb20 f003 	smuad	r0, r0, r3
 8006016:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <D32_1CH_HTONS_VOL_HP+0x140>)
 8006018:	fb2a 0303 	smlad	r3, sl, r3, r0
 800601c:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8006020:	9c03      	ldr	r4, [sp, #12]
 8006022:	eb02 0009 	add.w	r0, r2, r9
 8006026:	eba0 0008 	sub.w	r0, r0, r8
 800602a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800602e:	fba0 0104 	umull	r0, r1, r0, r4
 8006032:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006036:	fb04 110b 	mla	r1, r4, fp, r1
 800603a:	f141 0100 	adc.w	r1, r1, #0
 800603e:	9c01      	ldr	r4, [sp, #4]
 8006040:	0388      	lsls	r0, r1, #14
 8006042:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006046:	f04f 0900 	mov.w	r9, #0
 800604a:	fbc0 8904 	smlal	r8, r9, r0, r4
 800604e:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8006052:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8006056:	f300 000f 	ssat	r0, #16, r0
 800605a:	9902      	ldr	r1, [sp, #8]
 800605c:	f825 0b02 	strh.w	r0, [r5], #2
 8006060:	428d      	cmp	r5, r1
 8006062:	4690      	mov	r8, r2
 8006064:	d1a2      	bne.n	8005fac <D32_1CH_HTONS_VOL_HP+0x48>
 8006066:	f8dd a014 	ldr.w	sl, [sp, #20]
 800606a:	464c      	mov	r4, r9
 800606c:	f8ca 3008 	str.w	r3, [sl, #8]
 8006070:	9b04      	ldr	r3, [sp, #16]
 8006072:	f8ca e00c 	str.w	lr, [sl, #12]
 8006076:	2000      	movs	r0, #0
 8006078:	f8ca 601c 	str.w	r6, [sl, #28]
 800607c:	f8ca 4010 	str.w	r4, [sl, #16]
 8006080:	f8ca 2014 	str.w	r2, [sl, #20]
 8006084:	f8ca 3018 	str.w	r3, [sl, #24]
 8006088:	b007      	add	sp, #28
 800608a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608e:	4642      	mov	r2, r8
 8006090:	e7ec      	b.n	800606c <D32_1CH_HTONS_VOL_HP+0x108>
 8006092:	bf00      	nop
 8006094:	20000000 	.word	0x20000000
 8006098:	00060003 	.word	0x00060003
 800609c:	000a000c 	.word	0x000a000c
 80060a0:	000c000a 	.word	0x000c000a
 80060a4:	00030006 	.word	0x00030006

080060a8 <D48_1CH_HTONS_VOL_HP>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	4613      	mov	r3, r2
 80060ae:	461c      	mov	r4, r3
 80060b0:	b087      	sub	sp, #28
 80060b2:	4625      	mov	r5, r4
 80060b4:	4626      	mov	r6, r4
 80060b6:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80060b8:	9205      	str	r2, [sp, #20]
 80060ba:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80060bc:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80060c0:	9501      	str	r5, [sp, #4]
 80060c2:	4680      	mov	r8, r0
 80060c4:	6a35      	ldr	r5, [r6, #32]
 80060c6:	6918      	ldr	r0, [r3, #16]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	9502      	str	r5, [sp, #8]
 80060d4:	68e4      	ldr	r4, [r4, #12]
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	f000 808c 	beq.w	80061f4 <D48_1CH_HTONS_VOL_HP+0x14c>
 80060dc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80060e0:	4d45      	ldr	r5, [pc, #276]	; (80061f8 <D48_1CH_HTONS_VOL_HP+0x150>)
 80060e2:	9203      	str	r2, [sp, #12]
 80060e4:	468c      	mov	ip, r1
 80060e6:	e898 0044 	ldmia.w	r8, {r2, r6}
 80060ea:	f108 0806 	add.w	r8, r8, #6
 80060ee:	ba52      	rev16	r2, r2
 80060f0:	ba76      	rev16	r6, r6
 80060f2:	b2d7      	uxtb	r7, r2
 80060f4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80060f8:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80060fc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8006100:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8006104:	0e12      	lsrs	r2, r2, #24
 8006106:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800610a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800610e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8006112:	fa5f fb86 	uxtb.w	fp, r6
 8006116:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800611a:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800611e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8006122:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8006126:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800612a:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800612e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8006132:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8006136:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800613a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800613e:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8006142:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006146:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800614a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800614e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8006152:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8006156:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800615a:	4a28      	ldr	r2, [pc, #160]	; (80061fc <D48_1CH_HTONS_VOL_HP+0x154>)
 800615c:	fb2a 4202 	smlad	r2, sl, r2, r4
 8006160:	4927      	ldr	r1, [pc, #156]	; (8006200 <D48_1CH_HTONS_VOL_HP+0x158>)
 8006162:	fb27 2201 	smlad	r2, r7, r1, r2
 8006166:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800616a:	fb26 2201 	smlad	r2, r6, r1, r2
 800616e:	4925      	ldr	r1, [pc, #148]	; (8006204 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8006170:	fb2a 3401 	smlad	r4, sl, r1, r3
 8006174:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8006178:	fb27 4403 	smlad	r4, r7, r3, r4
 800617c:	4b22      	ldr	r3, [pc, #136]	; (8006208 <D48_1CH_HTONS_VOL_HP+0x160>)
 800617e:	fb26 4403 	smlad	r4, r6, r3, r4
 8006182:	2101      	movs	r1, #1
 8006184:	fb2a fa01 	smuad	sl, sl, r1
 8006188:	4b20      	ldr	r3, [pc, #128]	; (800620c <D48_1CH_HTONS_VOL_HP+0x164>)
 800618a:	fb27 a703 	smlad	r7, r7, r3, sl
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <D48_1CH_HTONS_VOL_HP+0x168>)
 8006190:	fb26 7303 	smlad	r3, r6, r3, r7
 8006194:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8006198:	9e02      	ldr	r6, [sp, #8]
 800619a:	9f01      	ldr	r7, [sp, #4]
 800619c:	4410      	add	r0, r2
 800619e:	eba0 0009 	sub.w	r0, r0, r9
 80061a2:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80061a6:	fba0 0106 	umull	r0, r1, r0, r6
 80061aa:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80061ae:	fb06 110a 	mla	r1, r6, sl, r1
 80061b2:	f141 0100 	adc.w	r1, r1, #0
 80061b6:	0308      	lsls	r0, r1, #12
 80061b8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80061bc:	f04f 0a00 	mov.w	sl, #0
 80061c0:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80061c4:	4657      	mov	r7, sl
 80061c6:	10b8      	asrs	r0, r7, #2
 80061c8:	f300 000f 	ssat	r0, #16, r0
 80061cc:	f82c 0b02 	strh.w	r0, [ip], #2
 80061d0:	0048      	lsls	r0, r1, #1
 80061d2:	9903      	ldr	r1, [sp, #12]
 80061d4:	458c      	cmp	ip, r1
 80061d6:	4691      	mov	r9, r2
 80061d8:	d185      	bne.n	80060e6 <D48_1CH_HTONS_VOL_HP+0x3e>
 80061da:	9d05      	ldr	r5, [sp, #20]
 80061dc:	616a      	str	r2, [r5, #20]
 80061de:	9a04      	ldr	r2, [sp, #16]
 80061e0:	6128      	str	r0, [r5, #16]
 80061e2:	2000      	movs	r0, #0
 80061e4:	60ab      	str	r3, [r5, #8]
 80061e6:	60ec      	str	r4, [r5, #12]
 80061e8:	f8c5 e01c 	str.w	lr, [r5, #28]
 80061ec:	61aa      	str	r2, [r5, #24]
 80061ee:	b007      	add	sp, #28
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	464a      	mov	r2, r9
 80061f6:	e7f0      	b.n	80061da <D48_1CH_HTONS_VOL_HP+0x132>
 80061f8:	20000000 	.word	0x20000000
 80061fc:	000f000a 	.word	0x000f000a
 8006200:	00060003 	.word	0x00060003
 8006204:	00150019 	.word	0x00150019
 8006208:	00190015 	.word	0x00190015
 800620c:	00030006 	.word	0x00030006
 8006210:	000a000f 	.word	0x000a000f

08006214 <D64_1CH_HTONS_VOL_HP>:
 8006214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	b089      	sub	sp, #36	; 0x24
 800621a:	4614      	mov	r4, r2
 800621c:	9207      	str	r2, [sp, #28]
 800621e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006220:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8006224:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8006228:	6992      	ldr	r2, [r2, #24]
 800622a:	9206      	str	r2, [sp, #24]
 800622c:	68e2      	ldr	r2, [r4, #12]
 800622e:	9201      	str	r2, [sp, #4]
 8006230:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006232:	9203      	str	r2, [sp, #12]
 8006234:	6a22      	ldr	r2, [r4, #32]
 8006236:	69e5      	ldr	r5, [r4, #28]
 8006238:	68a6      	ldr	r6, [r4, #8]
 800623a:	9204      	str	r2, [sp, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80b0 	beq.w	80063a2 <D64_1CH_HTONS_VOL_HP+0x18e>
 8006242:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006246:	4f58      	ldr	r7, [pc, #352]	; (80063a8 <D64_1CH_HTONS_VOL_HP+0x194>)
 8006248:	9305      	str	r3, [sp, #20]
 800624a:	9102      	str	r1, [sp, #8]
 800624c:	f850 2b08 	ldr.w	r2, [r0], #8
 8006250:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006254:	ba52      	rev16	r2, r2
 8006256:	fa93 f993 	rev16.w	r9, r3
 800625a:	b2d4      	uxtb	r4, r2
 800625c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006260:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8006264:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006268:	9901      	ldr	r1, [sp, #4]
 800626a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800626e:	0e12      	lsrs	r2, r2, #24
 8006270:	44ab      	add	fp, r5
 8006272:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006276:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800627a:	fa5f f289 	uxtb.w	r2, r9
 800627e:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8006282:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8006286:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800628a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800628e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006292:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8006296:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800629a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800629e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80062a2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80062a6:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80062aa:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80062ae:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80062b2:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80062b6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80062ba:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80062be:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80062c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80062ca:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80062ce:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80062d2:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80062d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80062da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80062de:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80062e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80062e6:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80062ea:	4b30      	ldr	r3, [pc, #192]	; (80063ac <D64_1CH_HTONS_VOL_HP+0x198>)
 80062ec:	fb2b 1303 	smlad	r3, fp, r3, r1
 80062f0:	492f      	ldr	r1, [pc, #188]	; (80063b0 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80062f2:	fb24 3301 	smlad	r3, r4, r1, r3
 80062f6:	492f      	ldr	r1, [pc, #188]	; (80063b4 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80062f8:	fb22 3301 	smlad	r3, r2, r1, r3
 80062fc:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8006300:	fb2e 390a 	smlad	r9, lr, sl, r3
 8006304:	4b2c      	ldr	r3, [pc, #176]	; (80063b8 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8006306:	fb2b 6603 	smlad	r6, fp, r3, r6
 800630a:	fb2e 6613 	smladx	r6, lr, r3, r6
 800630e:	4b2b      	ldr	r3, [pc, #172]	; (80063bc <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8006310:	fb24 6603 	smlad	r6, r4, r3, r6
 8006314:	fb22 6313 	smladx	r3, r2, r3, r6
 8006318:	f04f 0a01 	mov.w	sl, #1
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	fb2b fb0a 	smuad	fp, fp, sl
 8006322:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8006324:	fb24 ba03 	smlad	sl, r4, r3, fp
 8006328:	4b26      	ldr	r3, [pc, #152]	; (80063c4 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800632a:	fb22 a203 	smlad	r2, r2, r3, sl
 800632e:	4b26      	ldr	r3, [pc, #152]	; (80063c8 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8006330:	fb2e 2603 	smlad	r6, lr, r3, r2
 8006334:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8006338:	eb0a 020c 	add.w	r2, sl, ip
 800633c:	9c04      	ldr	r4, [sp, #16]
 800633e:	9903      	ldr	r1, [sp, #12]
 8006340:	eba2 0208 	sub.w	r2, r2, r8
 8006344:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8006348:	fba2 2304 	umull	r2, r3, r2, r4
 800634c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006350:	fb04 3309 	mla	r3, r4, r9, r3
 8006354:	f143 0300 	adc.w	r3, r3, #0
 8006358:	02da      	lsls	r2, r3, #11
 800635a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800635e:	f04f 0900 	mov.w	r9, #0
 8006362:	fbc1 8902 	smlal	r8, r9, r1, r2
 8006366:	9902      	ldr	r1, [sp, #8]
 8006368:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800636c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006370:	f302 020f 	ssat	r2, #16, r2
 8006374:	9b05      	ldr	r3, [sp, #20]
 8006376:	f821 2b02 	strh.w	r2, [r1], #2
 800637a:	4299      	cmp	r1, r3
 800637c:	9102      	str	r1, [sp, #8]
 800637e:	46d0      	mov	r8, sl
 8006380:	f47f af64 	bne.w	800624c <D64_1CH_HTONS_VOL_HP+0x38>
 8006384:	9a07      	ldr	r2, [sp, #28]
 8006386:	9901      	ldr	r1, [sp, #4]
 8006388:	60d1      	str	r1, [r2, #12]
 800638a:	9906      	ldr	r1, [sp, #24]
 800638c:	6096      	str	r6, [r2, #8]
 800638e:	2000      	movs	r0, #0
 8006390:	61d5      	str	r5, [r2, #28]
 8006392:	f8c2 c010 	str.w	ip, [r2, #16]
 8006396:	f8c2 a014 	str.w	sl, [r2, #20]
 800639a:	6191      	str	r1, [r2, #24]
 800639c:	b009      	add	sp, #36	; 0x24
 800639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a2:	46c2      	mov	sl, r8
 80063a4:	4622      	mov	r2, r4
 80063a6:	e7ee      	b.n	8006386 <D64_1CH_HTONS_VOL_HP+0x172>
 80063a8:	20000000 	.word	0x20000000
 80063ac:	001c0015 	.word	0x001c0015
 80063b0:	000f000a 	.word	0x000f000a
 80063b4:	00060003 	.word	0x00060003
 80063b8:	0024002a 	.word	0x0024002a
 80063bc:	002e0030 	.word	0x002e0030
 80063c0:	00030006 	.word	0x00030006
 80063c4:	000a000f 	.word	0x000a000f
 80063c8:	0015001c 	.word	0x0015001c

080063cc <D80_1CH_HTONS_VOL_HP>:
 80063cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	4613      	mov	r3, r2
 80063d2:	b089      	sub	sp, #36	; 0x24
 80063d4:	4686      	mov	lr, r0
 80063d6:	6918      	ldr	r0, [r3, #16]
 80063d8:	9000      	str	r0, [sp, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	461c      	mov	r4, r3
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	9302      	str	r3, [sp, #8]
 80063e2:	6983      	ldr	r3, [r0, #24]
 80063e4:	9306      	str	r3, [sp, #24]
 80063e6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80063ea:	69c3      	ldr	r3, [r0, #28]
 80063ec:	68c0      	ldr	r0, [r0, #12]
 80063ee:	9207      	str	r2, [sp, #28]
 80063f0:	9001      	str	r0, [sp, #4]
 80063f2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80063f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80063f6:	9003      	str	r0, [sp, #12]
 80063f8:	6a20      	ldr	r0, [r4, #32]
 80063fa:	9004      	str	r0, [sp, #16]
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	f000 80d2 	beq.w	80065a6 <D80_1CH_HTONS_VOL_HP+0x1da>
 8006402:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006406:	4869      	ldr	r0, [pc, #420]	; (80065ac <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8006408:	9205      	str	r2, [sp, #20]
 800640a:	461c      	mov	r4, r3
 800640c:	f8de 5000 	ldr.w	r5, [lr]
 8006410:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006414:	f8de 3008 	ldr.w	r3, [lr, #8]
 8006418:	f10e 0e0a 	add.w	lr, lr, #10
 800641c:	ba6d      	rev16	r5, r5
 800641e:	ba52      	rev16	r2, r2
 8006420:	fa93 fb93 	rev16.w	fp, r3
 8006424:	b2ee      	uxtb	r6, r5
 8006426:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800642a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800642e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006432:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8006436:	eb04 0a07 	add.w	sl, r4, r7
 800643a:	0e2d      	lsrs	r5, r5, #24
 800643c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8006440:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8006444:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8006448:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800644c:	b2d5      	uxtb	r5, r2
 800644e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8006452:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8006456:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800645a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800645e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8006462:	0e12      	lsrs	r2, r2, #24
 8006464:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8006468:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800646c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006470:	fa5f f48b 	uxtb.w	r4, fp
 8006474:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8006478:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800647c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8006480:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8006484:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8006488:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800648c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8006490:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8006494:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006498:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800649c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80064a0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80064a4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80064a8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80064ac:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80064b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064b4:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80064b8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80064bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80064c0:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80064c4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80064c8:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80064cc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80064d0:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80064d4:	4d36      	ldr	r5, [pc, #216]	; (80065b0 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80064d6:	9f01      	ldr	r7, [sp, #4]
 80064d8:	fb23 7505 	smlad	r5, r3, r5, r7
 80064dc:	4f35      	ldr	r7, [pc, #212]	; (80065b4 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80064de:	fb29 5507 	smlad	r5, r9, r7, r5
 80064e2:	4f35      	ldr	r7, [pc, #212]	; (80065b8 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80064e4:	fb28 5507 	smlad	r5, r8, r7, r5
 80064e8:	4f34      	ldr	r7, [pc, #208]	; (80065bc <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80064ea:	fb22 5507 	smlad	r5, r2, r7, r5
 80064ee:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80064f2:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80064f6:	4d32      	ldr	r5, [pc, #200]	; (80065c0 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80064f8:	fb23 cc05 	smlad	ip, r3, r5, ip
 80064fc:	4d31      	ldr	r5, [pc, #196]	; (80065c4 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80064fe:	fb29 cc05 	smlad	ip, r9, r5, ip
 8006502:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8006506:	fb28 c505 	smlad	r5, r8, r5, ip
 800650a:	4f2f      	ldr	r7, [pc, #188]	; (80065c8 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800650c:	fb22 5507 	smlad	r5, r2, r7, r5
 8006510:	4f2e      	ldr	r7, [pc, #184]	; (80065cc <D80_1CH_HTONS_VOL_HP+0x200>)
 8006512:	fb26 5507 	smlad	r5, r6, r7, r5
 8006516:	f04f 0a01 	mov.w	sl, #1
 800651a:	9501      	str	r5, [sp, #4]
 800651c:	fb23 fa0a 	smuad	sl, r3, sl
 8006520:	4b2b      	ldr	r3, [pc, #172]	; (80065d0 <D80_1CH_HTONS_VOL_HP+0x204>)
 8006522:	fb29 a903 	smlad	r9, r9, r3, sl
 8006526:	4d2b      	ldr	r5, [pc, #172]	; (80065d4 <D80_1CH_HTONS_VOL_HP+0x208>)
 8006528:	fb28 9805 	smlad	r8, r8, r5, r9
 800652c:	4d2a      	ldr	r5, [pc, #168]	; (80065d8 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800652e:	fb22 8205 	smlad	r2, r2, r5, r8
 8006532:	4b2a      	ldr	r3, [pc, #168]	; (80065dc <D80_1CH_HTONS_VOL_HP+0x210>)
 8006534:	fb26 2c03 	smlad	ip, r6, r3, r2
 8006538:	9b00      	ldr	r3, [sp, #0]
 800653a:	9d04      	ldr	r5, [sp, #16]
 800653c:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8006540:	4453      	add	r3, sl
 8006542:	461a      	mov	r2, r3
 8006544:	9b02      	ldr	r3, [sp, #8]
 8006546:	f8cd a008 	str.w	sl, [sp, #8]
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	17d7      	asrs	r7, r2, #31
 800654e:	fba2 2305 	umull	r2, r3, r2, r5
 8006552:	fb05 3307 	mla	r3, r5, r7, r3
 8006556:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800655a:	f143 0300 	adc.w	r3, r3, #0
 800655e:	9d03      	ldr	r5, [sp, #12]
 8006560:	029a      	lsls	r2, r3, #10
 8006562:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006566:	2700      	movs	r7, #0
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	fbc5 6702 	smlal	r6, r7, r5, r2
 800656e:	10ba      	asrs	r2, r7, #2
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	f302 020f 	ssat	r2, #16, r2
 8006576:	9b05      	ldr	r3, [sp, #20]
 8006578:	f821 2b02 	strh.w	r2, [r1], #2
 800657c:	4299      	cmp	r1, r3
 800657e:	f47f af45 	bne.w	800640c <D80_1CH_HTONS_VOL_HP+0x40>
 8006582:	4623      	mov	r3, r4
 8006584:	9907      	ldr	r1, [sp, #28]
 8006586:	9801      	ldr	r0, [sp, #4]
 8006588:	60c8      	str	r0, [r1, #12]
 800658a:	9a00      	ldr	r2, [sp, #0]
 800658c:	f8c1 c008 	str.w	ip, [r1, #8]
 8006590:	4608      	mov	r0, r1
 8006592:	61cb      	str	r3, [r1, #28]
 8006594:	610a      	str	r2, [r1, #16]
 8006596:	f8c1 a014 	str.w	sl, [r1, #20]
 800659a:	9906      	ldr	r1, [sp, #24]
 800659c:	6181      	str	r1, [r0, #24]
 800659e:	2000      	movs	r0, #0
 80065a0:	b009      	add	sp, #36	; 0x24
 80065a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a6:	f8dd a008 	ldr.w	sl, [sp, #8]
 80065aa:	e7eb      	b.n	8006584 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80065ac:	20000000 	.word	0x20000000
 80065b0:	002d0024 	.word	0x002d0024
 80065b4:	001c0015 	.word	0x001c0015
 80065b8:	000f000a 	.word	0x000f000a
 80065bc:	00060003 	.word	0x00060003
 80065c0:	0037003f 	.word	0x0037003f
 80065c4:	00450049 	.word	0x00450049
 80065c8:	00490045 	.word	0x00490045
 80065cc:	003f0037 	.word	0x003f0037
 80065d0:	00030006 	.word	0x00030006
 80065d4:	000a000f 	.word	0x000a000f
 80065d8:	0015001c 	.word	0x0015001c
 80065dc:	0024002d 	.word	0x0024002d

080065e0 <D128_1CH_HTONS_VOL_HP>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	b093      	sub	sp, #76	; 0x4c
 80065e6:	4614      	mov	r4, r2
 80065e8:	9211      	str	r2, [sp, #68]	; 0x44
 80065ea:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80065ec:	6912      	ldr	r2, [r2, #16]
 80065ee:	9203      	str	r2, [sp, #12]
 80065f0:	4622      	mov	r2, r4
 80065f2:	4615      	mov	r5, r2
 80065f4:	6964      	ldr	r4, [r4, #20]
 80065f6:	9406      	str	r4, [sp, #24]
 80065f8:	4614      	mov	r4, r2
 80065fa:	6992      	ldr	r2, [r2, #24]
 80065fc:	9210      	str	r2, [sp, #64]	; 0x40
 80065fe:	68ea      	ldr	r2, [r5, #12]
 8006600:	9204      	str	r2, [sp, #16]
 8006602:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006604:	69e6      	ldr	r6, [r4, #28]
 8006606:	920d      	str	r2, [sp, #52]	; 0x34
 8006608:	68a4      	ldr	r4, [r4, #8]
 800660a:	6a2a      	ldr	r2, [r5, #32]
 800660c:	9405      	str	r4, [sp, #20]
 800660e:	920e      	str	r2, [sp, #56]	; 0x38
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8145 	beq.w	80068a0 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8006616:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800661a:	930f      	str	r3, [sp, #60]	; 0x3c
 800661c:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80068fc <D128_1CH_HTONS_VOL_HP+0x31c>
 8006620:	9107      	str	r1, [sp, #28]
 8006622:	f100 0310 	add.w	r3, r0, #16
 8006626:	4699      	mov	r9, r3
 8006628:	f1a9 0110 	sub.w	r1, r9, #16
 800662c:	c90e      	ldmia	r1, {r1, r2, r3}
 800662e:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8006632:	ba49      	rev16	r1, r1
 8006634:	ba52      	rev16	r2, r2
 8006636:	ba5b      	rev16	r3, r3
 8006638:	fa90 fa90 	rev16.w	sl, r0
 800663c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006640:	b2cc      	uxtb	r4, r1
 8006642:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8006646:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800664a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800664e:	0e09      	lsrs	r1, r1, #24
 8006650:	4426      	add	r6, r4
 8006652:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006656:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800665a:	b2d0      	uxtb	r0, r2
 800665c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8006660:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8006664:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006668:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800666c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8006670:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8006674:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006678:	0e12      	lsrs	r2, r2, #24
 800667a:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800667e:	9701      	str	r7, [sp, #4]
 8006680:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8006684:	4627      	mov	r7, r4
 8006686:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800668a:	9702      	str	r7, [sp, #8]
 800668c:	b2da      	uxtb	r2, r3
 800668e:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8006692:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8006696:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800669a:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800669e:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80066a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80066a6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80066aa:	0e1b      	lsrs	r3, r3, #24
 80066ac:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80066b0:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80066b4:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80066b8:	fa5f f38a 	uxtb.w	r3, sl
 80066bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80066c0:	960a      	str	r6, [sp, #40]	; 0x28
 80066c2:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80066c6:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80066ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80066ce:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80066d2:	950b      	str	r5, [sp, #44]	; 0x2c
 80066d4:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80066d8:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80066dc:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80066e0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80066e4:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80066e8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80066ec:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80066f0:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80066f4:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80066f8:	9308      	str	r3, [sp, #32]
 80066fa:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8006704:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006708:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006712:	9302      	str	r3, [sp, #8]
 8006714:	9b08      	ldr	r3, [sp, #32]
 8006716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800671a:	9308      	str	r3, [sp, #32]
 800671c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006722:	950c      	str	r5, [sp, #48]	; 0x30
 8006724:	461d      	mov	r5, r3
 8006726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006728:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800672c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006730:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8006734:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	9b02      	ldr	r3, [sp, #8]
 800673c:	9202      	str	r2, [sp, #8]
 800673e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006740:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006742:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006746:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800674a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800674e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006752:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006756:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800675a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800675e:	9b08      	ldr	r3, [sp, #32]
 8006760:	9f01      	ldr	r7, [sp, #4]
 8006762:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006766:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800676a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800676e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006772:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006776:	46be      	mov	lr, r7
 8006778:	0a96      	lsrs	r6, r2, #10
 800677a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800677e:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8006782:	4f49      	ldr	r7, [pc, #292]	; (80068a8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8006784:	9a04      	ldr	r2, [sp, #16]
 8006786:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800678a:	4a48      	ldr	r2, [pc, #288]	; (80068ac <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800678c:	fb2a ee02 	smlad	lr, sl, r2, lr
 8006790:	4a47      	ldr	r2, [pc, #284]	; (80068b0 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8006792:	fb21 ee02 	smlad	lr, r1, r2, lr
 8006796:	4a47      	ldr	r2, [pc, #284]	; (80068b4 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8006798:	fb24 ee02 	smlad	lr, r4, r2, lr
 800679c:	4a46      	ldr	r2, [pc, #280]	; (80068b8 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800679e:	9f02      	ldr	r7, [sp, #8]
 80067a0:	fb27 ee02 	smlad	lr, r7, r2, lr
 80067a4:	4a45      	ldr	r2, [pc, #276]	; (80068bc <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80067a6:	fb20 ee02 	smlad	lr, r0, r2, lr
 80067aa:	4a45      	ldr	r2, [pc, #276]	; (80068c0 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80067ac:	fb23 e702 	smlad	r7, r3, r2, lr
 80067b0:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80067b4:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80067b8:	9f01      	ldr	r7, [sp, #4]
 80067ba:	4a42      	ldr	r2, [pc, #264]	; (80068c4 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80067bc:	46bc      	mov	ip, r7
 80067be:	9f05      	ldr	r7, [sp, #20]
 80067c0:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80067c4:	4a40      	ldr	r2, [pc, #256]	; (80068c8 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80067c6:	fb2a cc02 	smlad	ip, sl, r2, ip
 80067ca:	4f40      	ldr	r7, [pc, #256]	; (80068cc <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80067cc:	fb21 cc07 	smlad	ip, r1, r7, ip
 80067d0:	4f3f      	ldr	r7, [pc, #252]	; (80068d0 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80067d2:	fb24 cc07 	smlad	ip, r4, r7, ip
 80067d6:	4f3f      	ldr	r7, [pc, #252]	; (80068d4 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80067d8:	9a02      	ldr	r2, [sp, #8]
 80067da:	fb22 cc07 	smlad	ip, r2, r7, ip
 80067de:	4f3e      	ldr	r7, [pc, #248]	; (80068d8 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80067e0:	fb20 cc07 	smlad	ip, r0, r7, ip
 80067e4:	4f3d      	ldr	r7, [pc, #244]	; (80068dc <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80067e6:	fb23 c707 	smlad	r7, r3, r7, ip
 80067ea:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006900 <D128_1CH_HTONS_VOL_HP+0x320>
 80067ee:	fb25 720c 	smlad	r2, r5, ip, r7
 80067f2:	f04f 0b01 	mov.w	fp, #1
 80067f6:	9204      	str	r2, [sp, #16]
 80067f8:	9f01      	ldr	r7, [sp, #4]
 80067fa:	fb27 fb0b 	smuad	fp, r7, fp
 80067fe:	4f38      	ldr	r7, [pc, #224]	; (80068e0 <D128_1CH_HTONS_VOL_HP+0x300>)
 8006800:	fb2a ba07 	smlad	sl, sl, r7, fp
 8006804:	4f37      	ldr	r7, [pc, #220]	; (80068e4 <D128_1CH_HTONS_VOL_HP+0x304>)
 8006806:	fb21 aa07 	smlad	sl, r1, r7, sl
 800680a:	4f37      	ldr	r7, [pc, #220]	; (80068e8 <D128_1CH_HTONS_VOL_HP+0x308>)
 800680c:	fb24 aa07 	smlad	sl, r4, r7, sl
 8006810:	4f36      	ldr	r7, [pc, #216]	; (80068ec <D128_1CH_HTONS_VOL_HP+0x30c>)
 8006812:	9a02      	ldr	r2, [sp, #8]
 8006814:	fb22 a707 	smlad	r7, r2, r7, sl
 8006818:	4a35      	ldr	r2, [pc, #212]	; (80068f0 <D128_1CH_HTONS_VOL_HP+0x310>)
 800681a:	fb20 7702 	smlad	r7, r0, r2, r7
 800681e:	4a35      	ldr	r2, [pc, #212]	; (80068f4 <D128_1CH_HTONS_VOL_HP+0x314>)
 8006820:	fb23 7702 	smlad	r7, r3, r2, r7
 8006824:	4b34      	ldr	r3, [pc, #208]	; (80068f8 <D128_1CH_HTONS_VOL_HP+0x318>)
 8006826:	fb25 7303 	smlad	r3, r5, r3, r7
 800682a:	9305      	str	r3, [sp, #20]
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006830:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8006834:	4473      	add	r3, lr
 8006836:	461a      	mov	r2, r3
 8006838:	9b06      	ldr	r3, [sp, #24]
 800683a:	f8cd e018 	str.w	lr, [sp, #24]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	17d1      	asrs	r1, r2, #31
 8006842:	fba2 2304 	umull	r2, r3, r2, r4
 8006846:	fb04 3301 	mla	r3, r4, r1, r3
 800684a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800684e:	f143 0300 	adc.w	r3, r3, #0
 8006852:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006854:	021a      	lsls	r2, r3, #8
 8006856:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800685a:	2100      	movs	r1, #0
 800685c:	fbc4 0102 	smlal	r0, r1, r4, r2
 8006860:	108a      	asrs	r2, r1, #2
 8006862:	9907      	ldr	r1, [sp, #28]
 8006864:	f302 020f 	ssat	r2, #16, r2
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	f821 2b02 	strh.w	r2, [r1], #2
 800686e:	9303      	str	r3, [sp, #12]
 8006870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006872:	9107      	str	r1, [sp, #28]
 8006874:	4299      	cmp	r1, r3
 8006876:	f109 0910 	add.w	r9, r9, #16
 800687a:	f47f aed5 	bne.w	8006628 <D128_1CH_HTONS_VOL_HP+0x48>
 800687e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006880:	9905      	ldr	r1, [sp, #20]
 8006882:	6091      	str	r1, [r2, #8]
 8006884:	9904      	ldr	r1, [sp, #16]
 8006886:	60d1      	str	r1, [r2, #12]
 8006888:	4613      	mov	r3, r2
 800688a:	61d6      	str	r6, [r2, #28]
 800688c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800688e:	9a03      	ldr	r2, [sp, #12]
 8006890:	611a      	str	r2, [r3, #16]
 8006892:	2000      	movs	r0, #0
 8006894:	f8c3 e014 	str.w	lr, [r3, #20]
 8006898:	6199      	str	r1, [r3, #24]
 800689a:	b013      	add	sp, #76	; 0x4c
 800689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a0:	f8dd e018 	ldr.w	lr, [sp, #24]
 80068a4:	e7eb      	b.n	800687e <D128_1CH_HTONS_VOL_HP+0x29e>
 80068a6:	bf00      	nop
 80068a8:	00780069 	.word	0x00780069
 80068ac:	005b004e 	.word	0x005b004e
 80068b0:	00420037 	.word	0x00420037
 80068b4:	002d0024 	.word	0x002d0024
 80068b8:	001c0015 	.word	0x001c0015
 80068bc:	000f000a 	.word	0x000f000a
 80068c0:	00060003 	.word	0x00060003
 80068c4:	00880096 	.word	0x00880096
 80068c8:	00a200ac 	.word	0x00a200ac
 80068cc:	00b400ba 	.word	0x00b400ba
 80068d0:	00be00c0 	.word	0x00be00c0
 80068d4:	00c000be 	.word	0x00c000be
 80068d8:	00ba00b4 	.word	0x00ba00b4
 80068dc:	00ac00a2 	.word	0x00ac00a2
 80068e0:	00030006 	.word	0x00030006
 80068e4:	000a000f 	.word	0x000a000f
 80068e8:	0015001c 	.word	0x0015001c
 80068ec:	0024002d 	.word	0x0024002d
 80068f0:	00370042 	.word	0x00370042
 80068f4:	004e005b 	.word	0x004e005b
 80068f8:	00690078 	.word	0x00690078
 80068fc:	20000000 	.word	0x20000000
 8006900:	00960088 	.word	0x00960088

08006904 <PDM_Filter_Init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	2240      	movs	r2, #64	; 0x40
 8006908:	4604      	mov	r4, r0
 800690a:	2100      	movs	r1, #0
 800690c:	300c      	adds	r0, #12
 800690e:	f000 fa0f 	bl	8006d30 <memset>
 8006912:	493b      	ldr	r1, [pc, #236]	; (8006a00 <PDM_Filter_Init+0xfc>)
 8006914:	483b      	ldr	r0, [pc, #236]	; (8006a04 <PDM_Filter_Init+0x100>)
 8006916:	f000 f98d 	bl	8006c34 <CRC_Lock>
 800691a:	8822      	ldrh	r2, [r4, #0]
 800691c:	8963      	ldrh	r3, [r4, #10]
 800691e:	4938      	ldr	r1, [pc, #224]	; (8006a00 <PDM_Filter_Init+0xfc>)
 8006920:	8925      	ldrh	r5, [r4, #8]
 8006922:	86a3      	strh	r3, [r4, #52]	; 0x34
 8006924:	2801      	cmp	r0, #1
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	bf18      	it	ne
 800692c:	2100      	movne	r1, #0
 800692e:	2a01      	cmp	r2, #1
 8006930:	6461      	str	r1, [r4, #68]	; 0x44
 8006932:	86e5      	strh	r5, [r4, #54]	; 0x36
 8006934:	61a3      	str	r3, [r4, #24]
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	6163      	str	r3, [r4, #20]
 800693a:	60e3      	str	r3, [r4, #12]
 800693c:	6263      	str	r3, [r4, #36]	; 0x24
 800693e:	61e3      	str	r3, [r4, #28]
 8006940:	6223      	str	r3, [r4, #32]
 8006942:	6423      	str	r3, [r4, #64]	; 0x40
 8006944:	d918      	bls.n	8006978 <PDM_Filter_Init+0x74>
 8006946:	2003      	movs	r0, #3
 8006948:	2302      	movs	r3, #2
 800694a:	8862      	ldrh	r2, [r4, #2]
 800694c:	2a01      	cmp	r2, #1
 800694e:	d91d      	bls.n	800698c <PDM_Filter_Init+0x88>
 8006950:	2140      	movs	r1, #64	; 0x40
 8006952:	2300      	movs	r3, #0
 8006954:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006956:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800695a:	6862      	ldr	r2, [r4, #4]
 800695c:	bf04      	itt	eq
 800695e:	6421      	streq	r1, [r4, #64]	; 0x40
 8006960:	460b      	moveq	r3, r1
 8006962:	b11a      	cbz	r2, 800696c <PDM_Filter_Init+0x68>
 8006964:	f043 0310 	orr.w	r3, r3, #16
 8006968:	6423      	str	r3, [r4, #64]	; 0x40
 800696a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800696c:	2200      	movs	r2, #0
 800696e:	8722      	strh	r2, [r4, #56]	; 0x38
 8006970:	b908      	cbnz	r0, 8006976 <PDM_Filter_Init+0x72>
 8006972:	3380      	adds	r3, #128	; 0x80
 8006974:	6423      	str	r3, [r4, #64]	; 0x40
 8006976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006978:	4d23      	ldr	r5, [pc, #140]	; (8006a08 <PDM_Filter_Init+0x104>)
 800697a:	d010      	beq.n	800699e <PDM_Filter_Init+0x9a>
 800697c:	782a      	ldrb	r2, [r5, #0]
 800697e:	2a01      	cmp	r2, #1
 8006980:	d027      	beq.n	80069d2 <PDM_Filter_Init+0xce>
 8006982:	8862      	ldrh	r2, [r4, #2]
 8006984:	2a01      	cmp	r2, #1
 8006986:	f04f 0001 	mov.w	r0, #1
 800698a:	d8e1      	bhi.n	8006950 <PDM_Filter_Init+0x4c>
 800698c:	d001      	beq.n	8006992 <PDM_Filter_Init+0x8e>
 800698e:	4618      	mov	r0, r3
 8006990:	e7de      	b.n	8006950 <PDM_Filter_Init+0x4c>
 8006992:	2220      	movs	r2, #32
 8006994:	4618      	mov	r0, r3
 8006996:	6422      	str	r2, [r4, #64]	; 0x40
 8006998:	4613      	mov	r3, r2
 800699a:	2160      	movs	r1, #96	; 0x60
 800699c:	e7da      	b.n	8006954 <PDM_Filter_Init+0x50>
 800699e:	7829      	ldrb	r1, [r5, #0]
 80069a0:	2900      	cmp	r1, #0
 80069a2:	d1ee      	bne.n	8006982 <PDM_Filter_Init+0x7e>
 80069a4:	4919      	ldr	r1, [pc, #100]	; (8006a0c <PDM_Filter_Init+0x108>)
 80069a6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8006a14 <PDM_Filter_Init+0x110>
 80069aa:	4f19      	ldr	r7, [pc, #100]	; (8006a10 <PDM_Filter_Init+0x10c>)
 80069ac:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80069b0:	684a      	ldr	r2, [r1, #4]
 80069b2:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80069b6:	ea02 0007 	and.w	r0, r2, r7
 80069ba:	4303      	orrs	r3, r0
 80069bc:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80069c0:	4413      	add	r3, r2
 80069c2:	f841 3f04 	str.w	r3, [r1, #4]!
 80069c6:	428e      	cmp	r6, r1
 80069c8:	d1f2      	bne.n	80069b0 <PDM_Filter_Init+0xac>
 80069ca:	2001      	movs	r0, #1
 80069cc:	7028      	strb	r0, [r5, #0]
 80069ce:	2300      	movs	r3, #0
 80069d0:	e7bb      	b.n	800694a <PDM_Filter_Init+0x46>
 80069d2:	490e      	ldr	r1, [pc, #56]	; (8006a0c <PDM_Filter_Init+0x108>)
 80069d4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006a14 <PDM_Filter_Init+0x110>
 80069d8:	4f0d      	ldr	r7, [pc, #52]	; (8006a10 <PDM_Filter_Init+0x10c>)
 80069da:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80069de:	684a      	ldr	r2, [r1, #4]
 80069e0:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80069e4:	ea02 0007 	and.w	r0, r2, r7
 80069e8:	4303      	orrs	r3, r0
 80069ea:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80069ee:	4413      	add	r3, r2
 80069f0:	f841 3f04 	str.w	r3, [r1, #4]!
 80069f4:	428e      	cmp	r6, r1
 80069f6:	d1f2      	bne.n	80069de <PDM_Filter_Init+0xda>
 80069f8:	2300      	movs	r3, #0
 80069fa:	702b      	strb	r3, [r5, #0]
 80069fc:	e7c1      	b.n	8006982 <PDM_Filter_Init+0x7e>
 80069fe:	bf00      	nop
 8006a00:	b5e8b5cd 	.word	0xb5e8b5cd
 8006a04:	f407a5c2 	.word	0xf407a5c2
 8006a08:	20000604 	.word	0x20000604
 8006a0c:	1ffffffc 	.word	0x1ffffffc
 8006a10:	000ffc00 	.word	0x000ffc00
 8006a14:	3ff00000 	.word	0x3ff00000

08006a18 <PDM_Filter_setConfig>:
 8006a18:	4b66      	ldr	r3, [pc, #408]	; (8006bb4 <PDM_Filter_setConfig+0x19c>)
 8006a1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d001      	beq.n	8006a24 <PDM_Filter_setConfig+0xc>
 8006a20:	2004      	movs	r0, #4
 8006a22:	4770      	bx	lr
 8006a24:	b530      	push	{r4, r5, lr}
 8006a26:	880a      	ldrh	r2, [r1, #0]
 8006a28:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006a2a:	ed2d 8b04 	vpush	{d8-d9}
 8006a2e:	4604      	mov	r4, r0
 8006a30:	460d      	mov	r5, r1
 8006a32:	1e51      	subs	r1, r2, #1
 8006a34:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8006a38:	2906      	cmp	r1, #6
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	6420      	str	r0, [r4, #64]	; 0x40
 8006a3e:	d91a      	bls.n	8006a76 <PDM_Filter_setConfig+0x5e>
 8006a40:	2008      	movs	r0, #8
 8006a42:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8006a46:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006a4a:	4299      	cmp	r1, r3
 8006a4c:	d07e      	beq.n	8006b4c <PDM_Filter_setConfig+0x134>
 8006a4e:	f113 0f0c 	cmn.w	r3, #12
 8006a52:	da2a      	bge.n	8006aaa <PDM_Filter_setConfig+0x92>
 8006a54:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8006a58:	3040      	adds	r0, #64	; 0x40
 8006a5a:	80ab      	strh	r3, [r5, #4]
 8006a5c:	8622      	strh	r2, [r4, #48]	; 0x30
 8006a5e:	886b      	ldrh	r3, [r5, #2]
 8006a60:	8663      	strh	r3, [r4, #50]	; 0x32
 8006a62:	b920      	cbnz	r0, 8006a6e <PDM_Filter_setConfig+0x56>
 8006a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a6a:	6423      	str	r3, [r4, #64]	; 0x40
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	b003      	add	sp, #12
 8006a70:	ecbd 8b04 	vpop	{d8-d9}
 8006a74:	bd30      	pop	{r4, r5, pc}
 8006a76:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006a78:	4291      	cmp	r1, r2
 8006a7a:	d06c      	beq.n	8006b56 <PDM_Filter_setConfig+0x13e>
 8006a7c:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8006a8a:	6423      	str	r3, [r4, #64]	; 0x40
 8006a8c:	2970      	cmp	r1, #112	; 0x70
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006a96:	d066      	beq.n	8006b66 <PDM_Filter_setConfig+0x14e>
 8006a98:	2b06      	cmp	r3, #6
 8006a9a:	f200 8089 	bhi.w	8006bb0 <PDM_Filter_setConfig+0x198>
 8006a9e:	e8df f003 	tbb	[pc, r3]
 8006aa2:	4f52      	.short	0x4f52
 8006aa4:	3d43494c 	.word	0x3d43494c
 8006aa8:	46          	.byte	0x46
 8006aa9:	00          	.byte	0x00
 8006aaa:	2b33      	cmp	r3, #51	; 0x33
 8006aac:	dc32      	bgt.n	8006b14 <PDM_Filter_setConfig+0xfc>
 8006aae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ab0:	f002 020f 	and.w	r2, r2, #15
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	2a06      	cmp	r2, #6
 8006ab8:	d872      	bhi.n	8006ba0 <PDM_Filter_setConfig+0x188>
 8006aba:	493f      	ldr	r1, [pc, #252]	; (8006bb8 <PDM_Filter_setConfig+0x1a0>)
 8006abc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006ac0:	ed92 9a00 	vldr	s18, [r2]
 8006ac4:	ed92 8a07 	vldr	s16, [r2, #28]
 8006ac8:	9001      	str	r0, [sp, #4]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ad2:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8006ad6:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8006ada:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006ade:	f004 feed 	bl	800b8bc <powf>
 8006ae2:	eddf 0a36 	vldr	s1, [pc, #216]	; 8006bbc <PDM_Filter_setConfig+0x1a4>
 8006ae6:	eef0 8a40 	vmov.f32	s17, s0
 8006aea:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8006aee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006af2:	f004 fee3 	bl	800b8bc <powf>
 8006af6:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006afa:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006afe:	f004 fd8b 	bl	800b618 <roundf>
 8006b02:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006b06:	88ab      	ldrh	r3, [r5, #4]
 8006b08:	882a      	ldrh	r2, [r5, #0]
 8006b0a:	9801      	ldr	r0, [sp, #4]
 8006b0c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8006b10:	8723      	strh	r3, [r4, #56]	; 0x38
 8006b12:	e7a3      	b.n	8006a5c <PDM_Filter_setConfig+0x44>
 8006b14:	2333      	movs	r3, #51	; 0x33
 8006b16:	3040      	adds	r0, #64	; 0x40
 8006b18:	80ab      	strh	r3, [r5, #4]
 8006b1a:	e79f      	b.n	8006a5c <PDM_Filter_setConfig+0x44>
 8006b1c:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <PDM_Filter_setConfig+0x1a8>)
 8006b1e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b20:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006b24:	2000      	movs	r0, #0
 8006b26:	e792      	b.n	8006a4e <PDM_Filter_setConfig+0x36>
 8006b28:	4b26      	ldr	r3, [pc, #152]	; (8006bc4 <PDM_Filter_setConfig+0x1ac>)
 8006b2a:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b2c:	e7f8      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b2e:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <PDM_Filter_setConfig+0x1b0>)
 8006b30:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b32:	e7f5      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b34:	4b25      	ldr	r3, [pc, #148]	; (8006bcc <PDM_Filter_setConfig+0x1b4>)
 8006b36:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b38:	e7f2      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b3a:	4b25      	ldr	r3, [pc, #148]	; (8006bd0 <PDM_Filter_setConfig+0x1b8>)
 8006b3c:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b3e:	e7ef      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b40:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <PDM_Filter_setConfig+0x1bc>)
 8006b42:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b44:	e7ec      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b46:	4b24      	ldr	r3, [pc, #144]	; (8006bd8 <PDM_Filter_setConfig+0x1c0>)
 8006b48:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b4a:	e7e9      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b4c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006b4e:	4291      	cmp	r1, r2
 8006b50:	f47f af7d 	bne.w	8006a4e <PDM_Filter_setConfig+0x36>
 8006b54:	e783      	b.n	8006a5e <PDM_Filter_setConfig+0x46>
 8006b56:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006b5a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	d023      	beq.n	8006baa <PDM_Filter_setConfig+0x192>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e773      	b.n	8006a4e <PDM_Filter_setConfig+0x36>
 8006b66:	2b06      	cmp	r3, #6
 8006b68:	d822      	bhi.n	8006bb0 <PDM_Filter_setConfig+0x198>
 8006b6a:	e8df f003 	tbb	[pc, r3]
 8006b6e:	1316      	.short	0x1316
 8006b70:	070a0d10 	.word	0x070a0d10
 8006b74:	04          	.byte	0x04
 8006b75:	00          	.byte	0x00
 8006b76:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <PDM_Filter_setConfig+0x1c4>)
 8006b78:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b7a:	e7d1      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b7c:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <PDM_Filter_setConfig+0x1c8>)
 8006b7e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b80:	e7ce      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b82:	4b18      	ldr	r3, [pc, #96]	; (8006be4 <PDM_Filter_setConfig+0x1cc>)
 8006b84:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b86:	e7cb      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b88:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <PDM_Filter_setConfig+0x1d0>)
 8006b8a:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b8c:	e7c8      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b8e:	4b17      	ldr	r3, [pc, #92]	; (8006bec <PDM_Filter_setConfig+0x1d4>)
 8006b90:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b92:	e7c5      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b94:	4b16      	ldr	r3, [pc, #88]	; (8006bf0 <PDM_Filter_setConfig+0x1d8>)
 8006b96:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b98:	e7c2      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006b9a:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <PDM_Filter_setConfig+0x1dc>)
 8006b9c:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b9e:	e7bf      	b.n	8006b20 <PDM_Filter_setConfig+0x108>
 8006ba0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8006bf8 <PDM_Filter_setConfig+0x1e0>
 8006ba4:	eeb0 9a48 	vmov.f32	s18, s16
 8006ba8:	e78e      	b.n	8006ac8 <PDM_Filter_setConfig+0xb0>
 8006baa:	886b      	ldrh	r3, [r5, #2]
 8006bac:	8663      	strh	r3, [r4, #50]	; 0x32
 8006bae:	e759      	b.n	8006a64 <PDM_Filter_setConfig+0x4c>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	e746      	b.n	8006a42 <PDM_Filter_setConfig+0x2a>
 8006bb4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006bb8:	0800e210 	.word	0x0800e210
 8006bbc:	42000000 	.word	0x42000000
 8006bc0:	08004f85 	.word	0x08004f85
 8006bc4:	08004e65 	.word	0x08004e65
 8006bc8:	08005115 	.word	0x08005115
 8006bcc:	08005959 	.word	0x08005959
 8006bd0:	080056b9 	.word	0x080056b9
 8006bd4:	08005499 	.word	0x08005499
 8006bd8:	080052ad 	.word	0x080052ad
 8006bdc:	08005f65 	.word	0x08005f65
 8006be0:	08005e2d 	.word	0x08005e2d
 8006be4:	08005d49 	.word	0x08005d49
 8006be8:	080065e1 	.word	0x080065e1
 8006bec:	080063cd 	.word	0x080063cd
 8006bf0:	08006215 	.word	0x08006215
 8006bf4:	080060a9 	.word	0x080060a9
 8006bf8:	00000000 	.word	0x00000000

08006bfc <PDM_Filter>:
 8006bfc:	b410      	push	{r4}
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <PDM_Filter+0x34>)
 8006c00:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006c02:	429c      	cmp	r4, r3
 8006c04:	d003      	beq.n	8006c0e <PDM_Filter+0x12>
 8006c06:	2004      	movs	r0, #4
 8006c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006c10:	05dc      	lsls	r4, r3, #23
 8006c12:	d407      	bmi.n	8006c24 <PDM_Filter+0x28>
 8006c14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c18:	bf14      	ite	ne
 8006c1a:	2020      	movne	r0, #32
 8006c1c:	2030      	moveq	r0, #48	; 0x30
 8006c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2a:	320c      	adds	r2, #12
 8006c2c:	4718      	bx	r3
 8006c2e:	bf00      	nop
 8006c30:	b5e8b5cd 	.word	0xb5e8b5cd

08006c34 <CRC_Lock>:
 8006c34:	4a17      	ldr	r2, [pc, #92]	; (8006c94 <CRC_Lock+0x60>)
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	b410      	push	{r4}
 8006c3a:	f023 0301 	bic.w	r3, r3, #1
 8006c3e:	4c16      	ldr	r4, [pc, #88]	; (8006c98 <CRC_Lock+0x64>)
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	b933      	cbnz	r3, 8006c54 <CRC_Lock+0x20>
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <CRC_Lock+0x68>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c4e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c52:	d00f      	beq.n	8006c74 <CRC_Lock+0x40>
 8006c54:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <CRC_Lock+0x6c>)
 8006c56:	2301      	movs	r3, #1
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	6813      	ldr	r3, [r2, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1fc      	bne.n	8006c5a <CRC_Lock+0x26>
 8006c60:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <CRC_Lock+0x70>)
 8006c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c66:	6018      	str	r0, [r3, #0]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	1a08      	subs	r0, r1, r0
 8006c6c:	fab0 f080 	clz	r0, r0
 8006c70:	0940      	lsrs	r0, r0, #5
 8006c72:	4770      	bx	lr
 8006c74:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <CRC_Lock+0x74>)
 8006c76:	2301      	movs	r3, #1
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	6813      	ldr	r3, [r2, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1fc      	bne.n	8006c7a <CRC_Lock+0x46>
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <CRC_Lock+0x78>)
 8006c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c86:	6018      	str	r0, [r3, #0]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	1a40      	subs	r0, r0, r1
 8006c8c:	fab0 f080 	clz	r0, r0
 8006c90:	0940      	lsrs	r0, r0, #5
 8006c92:	4770      	bx	lr
 8006c94:	e0002000 	.word	0xe0002000
 8006c98:	e0042000 	.word	0xe0042000
 8006c9c:	5c001000 	.word	0x5c001000
 8006ca0:	40023008 	.word	0x40023008
 8006ca4:	40023000 	.word	0x40023000
 8006ca8:	58024c08 	.word	0x58024c08
 8006cac:	58024c00 	.word	0x58024c00

08006cb0 <__errno>:
 8006cb0:	4b01      	ldr	r3, [pc, #4]	; (8006cb8 <__errno+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000410 	.word	0x20000410

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f007 fa7e 	bl	800e1d0 <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	0800eb68 	.word	0x0800eb68
 8006cf8:	0800eb68 	.word	0x0800eb68
 8006cfc:	0800eb68 	.word	0x0800eb68
 8006d00:	0800eb6c 	.word	0x0800eb6c

08006d04 <malloc>:
 8006d04:	4b02      	ldr	r3, [pc, #8]	; (8006d10 <malloc+0xc>)
 8006d06:	4601      	mov	r1, r0
 8006d08:	6818      	ldr	r0, [r3, #0]
 8006d0a:	f000 b869 	b.w	8006de0 <_malloc_r>
 8006d0e:	bf00      	nop
 8006d10:	20000410 	.word	0x20000410

08006d14 <memcpy>:
 8006d14:	440a      	add	r2, r1
 8006d16:	4291      	cmp	r1, r2
 8006d18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d1c:	d100      	bne.n	8006d20 <memcpy+0xc>
 8006d1e:	4770      	bx	lr
 8006d20:	b510      	push	{r4, lr}
 8006d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d2a:	4291      	cmp	r1, r2
 8006d2c:	d1f9      	bne.n	8006d22 <memcpy+0xe>
 8006d2e:	bd10      	pop	{r4, pc}

08006d30 <memset>:
 8006d30:	4402      	add	r2, r0
 8006d32:	4603      	mov	r3, r0
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d100      	bne.n	8006d3a <memset+0xa>
 8006d38:	4770      	bx	lr
 8006d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3e:	e7f9      	b.n	8006d34 <memset+0x4>

08006d40 <_free_r>:
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	2900      	cmp	r1, #0
 8006d44:	d048      	beq.n	8006dd8 <_free_r+0x98>
 8006d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4a:	9001      	str	r0, [sp, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d52:	bfb8      	it	lt
 8006d54:	18e4      	addlt	r4, r4, r3
 8006d56:	f003 f801 	bl	8009d5c <__malloc_lock>
 8006d5a:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <_free_r+0x9c>)
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	4615      	mov	r5, r2
 8006d62:	b933      	cbnz	r3, 8006d72 <_free_r+0x32>
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6014      	str	r4, [r2, #0]
 8006d68:	b003      	add	sp, #12
 8006d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6e:	f002 bffb 	b.w	8009d68 <__malloc_unlock>
 8006d72:	42a3      	cmp	r3, r4
 8006d74:	d90b      	bls.n	8006d8e <_free_r+0x4e>
 8006d76:	6821      	ldr	r1, [r4, #0]
 8006d78:	1862      	adds	r2, r4, r1
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	bf04      	itt	eq
 8006d7e:	681a      	ldreq	r2, [r3, #0]
 8006d80:	685b      	ldreq	r3, [r3, #4]
 8006d82:	6063      	str	r3, [r4, #4]
 8006d84:	bf04      	itt	eq
 8006d86:	1852      	addeq	r2, r2, r1
 8006d88:	6022      	streq	r2, [r4, #0]
 8006d8a:	602c      	str	r4, [r5, #0]
 8006d8c:	e7ec      	b.n	8006d68 <_free_r+0x28>
 8006d8e:	461a      	mov	r2, r3
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	b10b      	cbz	r3, 8006d98 <_free_r+0x58>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d9fa      	bls.n	8006d8e <_free_r+0x4e>
 8006d98:	6811      	ldr	r1, [r2, #0]
 8006d9a:	1855      	adds	r5, r2, r1
 8006d9c:	42a5      	cmp	r5, r4
 8006d9e:	d10b      	bne.n	8006db8 <_free_r+0x78>
 8006da0:	6824      	ldr	r4, [r4, #0]
 8006da2:	4421      	add	r1, r4
 8006da4:	1854      	adds	r4, r2, r1
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	6011      	str	r1, [r2, #0]
 8006daa:	d1dd      	bne.n	8006d68 <_free_r+0x28>
 8006dac:	681c      	ldr	r4, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	6053      	str	r3, [r2, #4]
 8006db2:	4421      	add	r1, r4
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	e7d7      	b.n	8006d68 <_free_r+0x28>
 8006db8:	d902      	bls.n	8006dc0 <_free_r+0x80>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	6003      	str	r3, [r0, #0]
 8006dbe:	e7d3      	b.n	8006d68 <_free_r+0x28>
 8006dc0:	6825      	ldr	r5, [r4, #0]
 8006dc2:	1961      	adds	r1, r4, r5
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf04      	itt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	6063      	str	r3, [r4, #4]
 8006dce:	bf04      	itt	eq
 8006dd0:	1949      	addeq	r1, r1, r5
 8006dd2:	6021      	streq	r1, [r4, #0]
 8006dd4:	6054      	str	r4, [r2, #4]
 8006dd6:	e7c7      	b.n	8006d68 <_free_r+0x28>
 8006dd8:	b003      	add	sp, #12
 8006dda:	bd30      	pop	{r4, r5, pc}
 8006ddc:	20000610 	.word	0x20000610

08006de0 <_malloc_r>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	1ccd      	adds	r5, r1, #3
 8006de4:	f025 0503 	bic.w	r5, r5, #3
 8006de8:	3508      	adds	r5, #8
 8006dea:	2d0c      	cmp	r5, #12
 8006dec:	bf38      	it	cc
 8006dee:	250c      	movcc	r5, #12
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	4606      	mov	r6, r0
 8006df4:	db01      	blt.n	8006dfa <_malloc_r+0x1a>
 8006df6:	42a9      	cmp	r1, r5
 8006df8:	d903      	bls.n	8006e02 <_malloc_r+0x22>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	6033      	str	r3, [r6, #0]
 8006dfe:	2000      	movs	r0, #0
 8006e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e02:	f002 ffab 	bl	8009d5c <__malloc_lock>
 8006e06:	4921      	ldr	r1, [pc, #132]	; (8006e8c <_malloc_r+0xac>)
 8006e08:	680a      	ldr	r2, [r1, #0]
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	b99c      	cbnz	r4, 8006e36 <_malloc_r+0x56>
 8006e0e:	4f20      	ldr	r7, [pc, #128]	; (8006e90 <_malloc_r+0xb0>)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	b923      	cbnz	r3, 8006e1e <_malloc_r+0x3e>
 8006e14:	4621      	mov	r1, r4
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 feb6 	bl	8007b88 <_sbrk_r>
 8006e1c:	6038      	str	r0, [r7, #0]
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4630      	mov	r0, r6
 8006e22:	f000 feb1 	bl	8007b88 <_sbrk_r>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d123      	bne.n	8006e72 <_malloc_r+0x92>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f002 ff9a 	bl	8009d68 <__malloc_unlock>
 8006e34:	e7e3      	b.n	8006dfe <_malloc_r+0x1e>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	1b5b      	subs	r3, r3, r5
 8006e3a:	d417      	bmi.n	8006e6c <_malloc_r+0x8c>
 8006e3c:	2b0b      	cmp	r3, #11
 8006e3e:	d903      	bls.n	8006e48 <_malloc_r+0x68>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	441c      	add	r4, r3
 8006e44:	6025      	str	r5, [r4, #0]
 8006e46:	e004      	b.n	8006e52 <_malloc_r+0x72>
 8006e48:	6863      	ldr	r3, [r4, #4]
 8006e4a:	42a2      	cmp	r2, r4
 8006e4c:	bf0c      	ite	eq
 8006e4e:	600b      	streq	r3, [r1, #0]
 8006e50:	6053      	strne	r3, [r2, #4]
 8006e52:	4630      	mov	r0, r6
 8006e54:	f002 ff88 	bl	8009d68 <__malloc_unlock>
 8006e58:	f104 000b 	add.w	r0, r4, #11
 8006e5c:	1d23      	adds	r3, r4, #4
 8006e5e:	f020 0007 	bic.w	r0, r0, #7
 8006e62:	1ac2      	subs	r2, r0, r3
 8006e64:	d0cc      	beq.n	8006e00 <_malloc_r+0x20>
 8006e66:	1a1b      	subs	r3, r3, r0
 8006e68:	50a3      	str	r3, [r4, r2]
 8006e6a:	e7c9      	b.n	8006e00 <_malloc_r+0x20>
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	6864      	ldr	r4, [r4, #4]
 8006e70:	e7cc      	b.n	8006e0c <_malloc_r+0x2c>
 8006e72:	1cc4      	adds	r4, r0, #3
 8006e74:	f024 0403 	bic.w	r4, r4, #3
 8006e78:	42a0      	cmp	r0, r4
 8006e7a:	d0e3      	beq.n	8006e44 <_malloc_r+0x64>
 8006e7c:	1a21      	subs	r1, r4, r0
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f000 fe82 	bl	8007b88 <_sbrk_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1dd      	bne.n	8006e44 <_malloc_r+0x64>
 8006e88:	e7cf      	b.n	8006e2a <_malloc_r+0x4a>
 8006e8a:	bf00      	nop
 8006e8c:	20000610 	.word	0x20000610
 8006e90:	20000614 	.word	0x20000614

08006e94 <__cvt>:
 8006e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	ec55 4b10 	vmov	r4, r5, d0
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	460e      	mov	r6, r1
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	bfbb      	ittet	lt
 8006ea6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eaa:	461d      	movlt	r5, r3
 8006eac:	2300      	movge	r3, #0
 8006eae:	232d      	movlt	r3, #45	; 0x2d
 8006eb0:	700b      	strb	r3, [r1, #0]
 8006eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006eb8:	4691      	mov	r9, r2
 8006eba:	f023 0820 	bic.w	r8, r3, #32
 8006ebe:	bfbc      	itt	lt
 8006ec0:	4622      	movlt	r2, r4
 8006ec2:	4614      	movlt	r4, r2
 8006ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ec8:	d005      	beq.n	8006ed6 <__cvt+0x42>
 8006eca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ece:	d100      	bne.n	8006ed2 <__cvt+0x3e>
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	e000      	b.n	8006ed8 <__cvt+0x44>
 8006ed6:	2103      	movs	r1, #3
 8006ed8:	ab03      	add	r3, sp, #12
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	ab02      	add	r3, sp, #8
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	ec45 4b10 	vmov	d0, r4, r5
 8006ee4:	4653      	mov	r3, sl
 8006ee6:	4632      	mov	r2, r6
 8006ee8:	f001 fdc6 	bl	8008a78 <_dtoa_r>
 8006eec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	d102      	bne.n	8006efa <__cvt+0x66>
 8006ef4:	f019 0f01 	tst.w	r9, #1
 8006ef8:	d022      	beq.n	8006f40 <__cvt+0xac>
 8006efa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006efe:	eb07 0906 	add.w	r9, r7, r6
 8006f02:	d110      	bne.n	8006f26 <__cvt+0x92>
 8006f04:	783b      	ldrb	r3, [r7, #0]
 8006f06:	2b30      	cmp	r3, #48	; 0x30
 8006f08:	d10a      	bne.n	8006f20 <__cvt+0x8c>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f16:	b918      	cbnz	r0, 8006f20 <__cvt+0x8c>
 8006f18:	f1c6 0601 	rsb	r6, r6, #1
 8006f1c:	f8ca 6000 	str.w	r6, [sl]
 8006f20:	f8da 3000 	ldr.w	r3, [sl]
 8006f24:	4499      	add	r9, r3
 8006f26:	2200      	movs	r2, #0
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	f7f9 fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f32:	b108      	cbz	r0, 8006f38 <__cvt+0xa4>
 8006f34:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f38:	2230      	movs	r2, #48	; 0x30
 8006f3a:	9b03      	ldr	r3, [sp, #12]
 8006f3c:	454b      	cmp	r3, r9
 8006f3e:	d307      	bcc.n	8006f50 <__cvt+0xbc>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f44:	1bdb      	subs	r3, r3, r7
 8006f46:	4638      	mov	r0, r7
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	b004      	add	sp, #16
 8006f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	9103      	str	r1, [sp, #12]
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e7f0      	b.n	8006f3a <__cvt+0xa6>

08006f58 <__exponent>:
 8006f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	bfb8      	it	lt
 8006f60:	4249      	neglt	r1, r1
 8006f62:	f803 2b02 	strb.w	r2, [r3], #2
 8006f66:	bfb4      	ite	lt
 8006f68:	222d      	movlt	r2, #45	; 0x2d
 8006f6a:	222b      	movge	r2, #43	; 0x2b
 8006f6c:	2909      	cmp	r1, #9
 8006f6e:	7042      	strb	r2, [r0, #1]
 8006f70:	dd2a      	ble.n	8006fc8 <__exponent+0x70>
 8006f72:	f10d 0407 	add.w	r4, sp, #7
 8006f76:	46a4      	mov	ip, r4
 8006f78:	270a      	movs	r7, #10
 8006f7a:	46a6      	mov	lr, r4
 8006f7c:	460a      	mov	r2, r1
 8006f7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f82:	fb07 1516 	mls	r5, r7, r6, r1
 8006f86:	3530      	adds	r5, #48	; 0x30
 8006f88:	2a63      	cmp	r2, #99	; 0x63
 8006f8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006f8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f92:	4631      	mov	r1, r6
 8006f94:	dcf1      	bgt.n	8006f7a <__exponent+0x22>
 8006f96:	3130      	adds	r1, #48	; 0x30
 8006f98:	f1ae 0502 	sub.w	r5, lr, #2
 8006f9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fa0:	1c44      	adds	r4, r0, #1
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	4561      	cmp	r1, ip
 8006fa6:	d30a      	bcc.n	8006fbe <__exponent+0x66>
 8006fa8:	f10d 0209 	add.w	r2, sp, #9
 8006fac:	eba2 020e 	sub.w	r2, r2, lr
 8006fb0:	4565      	cmp	r5, ip
 8006fb2:	bf88      	it	hi
 8006fb4:	2200      	movhi	r2, #0
 8006fb6:	4413      	add	r3, r2
 8006fb8:	1a18      	subs	r0, r3, r0
 8006fba:	b003      	add	sp, #12
 8006fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006fc6:	e7ed      	b.n	8006fa4 <__exponent+0x4c>
 8006fc8:	2330      	movs	r3, #48	; 0x30
 8006fca:	3130      	adds	r1, #48	; 0x30
 8006fcc:	7083      	strb	r3, [r0, #2]
 8006fce:	70c1      	strb	r1, [r0, #3]
 8006fd0:	1d03      	adds	r3, r0, #4
 8006fd2:	e7f1      	b.n	8006fb8 <__exponent+0x60>

08006fd4 <_printf_float>:
 8006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	ed2d 8b02 	vpush	{d8}
 8006fdc:	b08d      	sub	sp, #52	; 0x34
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	461f      	mov	r7, r3
 8006fe8:	4605      	mov	r5, r0
 8006fea:	f002 fea1 	bl	8009d30 <_localeconv_r>
 8006fee:	f8d0 a000 	ldr.w	sl, [r0]
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	f7f9 f8ec 	bl	80001d0 <strlen>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	9305      	str	r3, [sp, #20]
 8007000:	f8d8 3000 	ldr.w	r3, [r8]
 8007004:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007008:	3307      	adds	r3, #7
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	f103 0208 	add.w	r2, r3, #8
 8007012:	f8c8 2000 	str.w	r2, [r8]
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800701e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	f8cd 8018 	str.w	r8, [sp, #24]
 800702c:	ee08 0a10 	vmov	s16, r0
 8007030:	4b9f      	ldr	r3, [pc, #636]	; (80072b0 <_printf_float+0x2dc>)
 8007032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800703a:	f7f9 fd77 	bl	8000b2c <__aeabi_dcmpun>
 800703e:	bb88      	cbnz	r0, 80070a4 <_printf_float+0xd0>
 8007040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007044:	4b9a      	ldr	r3, [pc, #616]	; (80072b0 <_printf_float+0x2dc>)
 8007046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800704a:	f7f9 fd51 	bl	8000af0 <__aeabi_dcmple>
 800704e:	bb48      	cbnz	r0, 80070a4 <_printf_float+0xd0>
 8007050:	2200      	movs	r2, #0
 8007052:	2300      	movs	r3, #0
 8007054:	4640      	mov	r0, r8
 8007056:	4649      	mov	r1, r9
 8007058:	f7f9 fd40 	bl	8000adc <__aeabi_dcmplt>
 800705c:	b110      	cbz	r0, 8007064 <_printf_float+0x90>
 800705e:	232d      	movs	r3, #45	; 0x2d
 8007060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007064:	4b93      	ldr	r3, [pc, #588]	; (80072b4 <_printf_float+0x2e0>)
 8007066:	4894      	ldr	r0, [pc, #592]	; (80072b8 <_printf_float+0x2e4>)
 8007068:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800706c:	bf94      	ite	ls
 800706e:	4698      	movls	r8, r3
 8007070:	4680      	movhi	r8, r0
 8007072:	2303      	movs	r3, #3
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	9b05      	ldr	r3, [sp, #20]
 8007078:	f023 0204 	bic.w	r2, r3, #4
 800707c:	6022      	str	r2, [r4, #0]
 800707e:	f04f 0900 	mov.w	r9, #0
 8007082:	9700      	str	r7, [sp, #0]
 8007084:	4633      	mov	r3, r6
 8007086:	aa0b      	add	r2, sp, #44	; 0x2c
 8007088:	4621      	mov	r1, r4
 800708a:	4628      	mov	r0, r5
 800708c:	f000 f9d8 	bl	8007440 <_printf_common>
 8007090:	3001      	adds	r0, #1
 8007092:	f040 8090 	bne.w	80071b6 <_printf_float+0x1e2>
 8007096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800709a:	b00d      	add	sp, #52	; 0x34
 800709c:	ecbd 8b02 	vpop	{d8}
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	4640      	mov	r0, r8
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 fd3e 	bl	8000b2c <__aeabi_dcmpun>
 80070b0:	b140      	cbz	r0, 80070c4 <_printf_float+0xf0>
 80070b2:	464b      	mov	r3, r9
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfbc      	itt	lt
 80070b8:	232d      	movlt	r3, #45	; 0x2d
 80070ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070be:	487f      	ldr	r0, [pc, #508]	; (80072bc <_printf_float+0x2e8>)
 80070c0:	4b7f      	ldr	r3, [pc, #508]	; (80072c0 <_printf_float+0x2ec>)
 80070c2:	e7d1      	b.n	8007068 <_printf_float+0x94>
 80070c4:	6863      	ldr	r3, [r4, #4]
 80070c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070ca:	9206      	str	r2, [sp, #24]
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	d13f      	bne.n	8007150 <_printf_float+0x17c>
 80070d0:	2306      	movs	r3, #6
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	9b05      	ldr	r3, [sp, #20]
 80070d6:	6861      	ldr	r1, [r4, #4]
 80070d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070dc:	2300      	movs	r3, #0
 80070de:	9303      	str	r3, [sp, #12]
 80070e0:	ab0a      	add	r3, sp, #40	; 0x28
 80070e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070e6:	ab09      	add	r3, sp, #36	; 0x24
 80070e8:	ec49 8b10 	vmov	d0, r8, r9
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	6022      	str	r2, [r4, #0]
 80070f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070f4:	4628      	mov	r0, r5
 80070f6:	f7ff fecd 	bl	8006e94 <__cvt>
 80070fa:	9b06      	ldr	r3, [sp, #24]
 80070fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070fe:	2b47      	cmp	r3, #71	; 0x47
 8007100:	4680      	mov	r8, r0
 8007102:	d108      	bne.n	8007116 <_printf_float+0x142>
 8007104:	1cc8      	adds	r0, r1, #3
 8007106:	db02      	blt.n	800710e <_printf_float+0x13a>
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	4299      	cmp	r1, r3
 800710c:	dd41      	ble.n	8007192 <_printf_float+0x1be>
 800710e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007112:	fa5f fb8b 	uxtb.w	fp, fp
 8007116:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800711a:	d820      	bhi.n	800715e <_printf_float+0x18a>
 800711c:	3901      	subs	r1, #1
 800711e:	465a      	mov	r2, fp
 8007120:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007124:	9109      	str	r1, [sp, #36]	; 0x24
 8007126:	f7ff ff17 	bl	8006f58 <__exponent>
 800712a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800712c:	1813      	adds	r3, r2, r0
 800712e:	2a01      	cmp	r2, #1
 8007130:	4681      	mov	r9, r0
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	dc02      	bgt.n	800713c <_printf_float+0x168>
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	07d2      	lsls	r2, r2, #31
 800713a:	d501      	bpl.n	8007140 <_printf_float+0x16c>
 800713c:	3301      	adds	r3, #1
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007144:	2b00      	cmp	r3, #0
 8007146:	d09c      	beq.n	8007082 <_printf_float+0xae>
 8007148:	232d      	movs	r3, #45	; 0x2d
 800714a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800714e:	e798      	b.n	8007082 <_printf_float+0xae>
 8007150:	9a06      	ldr	r2, [sp, #24]
 8007152:	2a47      	cmp	r2, #71	; 0x47
 8007154:	d1be      	bne.n	80070d4 <_printf_float+0x100>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1bc      	bne.n	80070d4 <_printf_float+0x100>
 800715a:	2301      	movs	r3, #1
 800715c:	e7b9      	b.n	80070d2 <_printf_float+0xfe>
 800715e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007162:	d118      	bne.n	8007196 <_printf_float+0x1c2>
 8007164:	2900      	cmp	r1, #0
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	dd0b      	ble.n	8007182 <_printf_float+0x1ae>
 800716a:	6121      	str	r1, [r4, #16]
 800716c:	b913      	cbnz	r3, 8007174 <_printf_float+0x1a0>
 800716e:	6822      	ldr	r2, [r4, #0]
 8007170:	07d0      	lsls	r0, r2, #31
 8007172:	d502      	bpl.n	800717a <_printf_float+0x1a6>
 8007174:	3301      	adds	r3, #1
 8007176:	440b      	add	r3, r1
 8007178:	6123      	str	r3, [r4, #16]
 800717a:	65a1      	str	r1, [r4, #88]	; 0x58
 800717c:	f04f 0900 	mov.w	r9, #0
 8007180:	e7de      	b.n	8007140 <_printf_float+0x16c>
 8007182:	b913      	cbnz	r3, 800718a <_printf_float+0x1b6>
 8007184:	6822      	ldr	r2, [r4, #0]
 8007186:	07d2      	lsls	r2, r2, #31
 8007188:	d501      	bpl.n	800718e <_printf_float+0x1ba>
 800718a:	3302      	adds	r3, #2
 800718c:	e7f4      	b.n	8007178 <_printf_float+0x1a4>
 800718e:	2301      	movs	r3, #1
 8007190:	e7f2      	b.n	8007178 <_printf_float+0x1a4>
 8007192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007198:	4299      	cmp	r1, r3
 800719a:	db05      	blt.n	80071a8 <_printf_float+0x1d4>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	6121      	str	r1, [r4, #16]
 80071a0:	07d8      	lsls	r0, r3, #31
 80071a2:	d5ea      	bpl.n	800717a <_printf_float+0x1a6>
 80071a4:	1c4b      	adds	r3, r1, #1
 80071a6:	e7e7      	b.n	8007178 <_printf_float+0x1a4>
 80071a8:	2900      	cmp	r1, #0
 80071aa:	bfd4      	ite	le
 80071ac:	f1c1 0202 	rsble	r2, r1, #2
 80071b0:	2201      	movgt	r2, #1
 80071b2:	4413      	add	r3, r2
 80071b4:	e7e0      	b.n	8007178 <_printf_float+0x1a4>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	055a      	lsls	r2, r3, #21
 80071ba:	d407      	bmi.n	80071cc <_printf_float+0x1f8>
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	4642      	mov	r2, r8
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	d12c      	bne.n	8007224 <_printf_float+0x250>
 80071ca:	e764      	b.n	8007096 <_printf_float+0xc2>
 80071cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071d0:	f240 80e0 	bls.w	8007394 <_printf_float+0x3c0>
 80071d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d8:	2200      	movs	r2, #0
 80071da:	2300      	movs	r3, #0
 80071dc:	f7f9 fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d034      	beq.n	800724e <_printf_float+0x27a>
 80071e4:	4a37      	ldr	r2, [pc, #220]	; (80072c4 <_printf_float+0x2f0>)
 80071e6:	2301      	movs	r3, #1
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	f43f af51 	beq.w	8007096 <_printf_float+0xc2>
 80071f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f8:	429a      	cmp	r2, r3
 80071fa:	db02      	blt.n	8007202 <_printf_float+0x22e>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	07d8      	lsls	r0, r3, #31
 8007200:	d510      	bpl.n	8007224 <_printf_float+0x250>
 8007202:	ee18 3a10 	vmov	r3, s16
 8007206:	4652      	mov	r2, sl
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f af41 	beq.w	8007096 <_printf_float+0xc2>
 8007214:	f04f 0800 	mov.w	r8, #0
 8007218:	f104 091a 	add.w	r9, r4, #26
 800721c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721e:	3b01      	subs	r3, #1
 8007220:	4543      	cmp	r3, r8
 8007222:	dc09      	bgt.n	8007238 <_printf_float+0x264>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	079b      	lsls	r3, r3, #30
 8007228:	f100 8105 	bmi.w	8007436 <_printf_float+0x462>
 800722c:	68e0      	ldr	r0, [r4, #12]
 800722e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007230:	4298      	cmp	r0, r3
 8007232:	bfb8      	it	lt
 8007234:	4618      	movlt	r0, r3
 8007236:	e730      	b.n	800709a <_printf_float+0xc6>
 8007238:	2301      	movs	r3, #1
 800723a:	464a      	mov	r2, r9
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f af27 	beq.w	8007096 <_printf_float+0xc2>
 8007248:	f108 0801 	add.w	r8, r8, #1
 800724c:	e7e6      	b.n	800721c <_printf_float+0x248>
 800724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	dc39      	bgt.n	80072c8 <_printf_float+0x2f4>
 8007254:	4a1b      	ldr	r2, [pc, #108]	; (80072c4 <_printf_float+0x2f0>)
 8007256:	2301      	movs	r3, #1
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f af19 	beq.w	8007096 <_printf_float+0xc2>
 8007264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007268:	4313      	orrs	r3, r2
 800726a:	d102      	bne.n	8007272 <_printf_float+0x29e>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	07d9      	lsls	r1, r3, #31
 8007270:	d5d8      	bpl.n	8007224 <_printf_float+0x250>
 8007272:	ee18 3a10 	vmov	r3, s16
 8007276:	4652      	mov	r2, sl
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af09 	beq.w	8007096 <_printf_float+0xc2>
 8007284:	f04f 0900 	mov.w	r9, #0
 8007288:	f104 0a1a 	add.w	sl, r4, #26
 800728c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728e:	425b      	negs	r3, r3
 8007290:	454b      	cmp	r3, r9
 8007292:	dc01      	bgt.n	8007298 <_printf_float+0x2c4>
 8007294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007296:	e792      	b.n	80071be <_printf_float+0x1ea>
 8007298:	2301      	movs	r3, #1
 800729a:	4652      	mov	r2, sl
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f aef7 	beq.w	8007096 <_printf_float+0xc2>
 80072a8:	f109 0901 	add.w	r9, r9, #1
 80072ac:	e7ee      	b.n	800728c <_printf_float+0x2b8>
 80072ae:	bf00      	nop
 80072b0:	7fefffff 	.word	0x7fefffff
 80072b4:	0800e470 	.word	0x0800e470
 80072b8:	0800e474 	.word	0x0800e474
 80072bc:	0800e47c 	.word	0x0800e47c
 80072c0:	0800e478 	.word	0x0800e478
 80072c4:	0800e480 	.word	0x0800e480
 80072c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072cc:	429a      	cmp	r2, r3
 80072ce:	bfa8      	it	ge
 80072d0:	461a      	movge	r2, r3
 80072d2:	2a00      	cmp	r2, #0
 80072d4:	4691      	mov	r9, r2
 80072d6:	dc37      	bgt.n	8007348 <_printf_float+0x374>
 80072d8:	f04f 0b00 	mov.w	fp, #0
 80072dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e0:	f104 021a 	add.w	r2, r4, #26
 80072e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072e6:	9305      	str	r3, [sp, #20]
 80072e8:	eba3 0309 	sub.w	r3, r3, r9
 80072ec:	455b      	cmp	r3, fp
 80072ee:	dc33      	bgt.n	8007358 <_printf_float+0x384>
 80072f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072f4:	429a      	cmp	r2, r3
 80072f6:	db3b      	blt.n	8007370 <_printf_float+0x39c>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	07da      	lsls	r2, r3, #31
 80072fc:	d438      	bmi.n	8007370 <_printf_float+0x39c>
 80072fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007300:	9b05      	ldr	r3, [sp, #20]
 8007302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	eba2 0901 	sub.w	r9, r2, r1
 800730a:	4599      	cmp	r9, r3
 800730c:	bfa8      	it	ge
 800730e:	4699      	movge	r9, r3
 8007310:	f1b9 0f00 	cmp.w	r9, #0
 8007314:	dc35      	bgt.n	8007382 <_printf_float+0x3ae>
 8007316:	f04f 0800 	mov.w	r8, #0
 800731a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800731e:	f104 0a1a 	add.w	sl, r4, #26
 8007322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007326:	1a9b      	subs	r3, r3, r2
 8007328:	eba3 0309 	sub.w	r3, r3, r9
 800732c:	4543      	cmp	r3, r8
 800732e:	f77f af79 	ble.w	8007224 <_printf_float+0x250>
 8007332:	2301      	movs	r3, #1
 8007334:	4652      	mov	r2, sl
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f aeaa 	beq.w	8007096 <_printf_float+0xc2>
 8007342:	f108 0801 	add.w	r8, r8, #1
 8007346:	e7ec      	b.n	8007322 <_printf_float+0x34e>
 8007348:	4613      	mov	r3, r2
 800734a:	4631      	mov	r1, r6
 800734c:	4642      	mov	r2, r8
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	d1c0      	bne.n	80072d8 <_printf_float+0x304>
 8007356:	e69e      	b.n	8007096 <_printf_float+0xc2>
 8007358:	2301      	movs	r3, #1
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	9205      	str	r2, [sp, #20]
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f ae97 	beq.w	8007096 <_printf_float+0xc2>
 8007368:	9a05      	ldr	r2, [sp, #20]
 800736a:	f10b 0b01 	add.w	fp, fp, #1
 800736e:	e7b9      	b.n	80072e4 <_printf_float+0x310>
 8007370:	ee18 3a10 	vmov	r3, s16
 8007374:	4652      	mov	r2, sl
 8007376:	4631      	mov	r1, r6
 8007378:	4628      	mov	r0, r5
 800737a:	47b8      	blx	r7
 800737c:	3001      	adds	r0, #1
 800737e:	d1be      	bne.n	80072fe <_printf_float+0x32a>
 8007380:	e689      	b.n	8007096 <_printf_float+0xc2>
 8007382:	9a05      	ldr	r2, [sp, #20]
 8007384:	464b      	mov	r3, r9
 8007386:	4442      	add	r2, r8
 8007388:	4631      	mov	r1, r6
 800738a:	4628      	mov	r0, r5
 800738c:	47b8      	blx	r7
 800738e:	3001      	adds	r0, #1
 8007390:	d1c1      	bne.n	8007316 <_printf_float+0x342>
 8007392:	e680      	b.n	8007096 <_printf_float+0xc2>
 8007394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007396:	2a01      	cmp	r2, #1
 8007398:	dc01      	bgt.n	800739e <_printf_float+0x3ca>
 800739a:	07db      	lsls	r3, r3, #31
 800739c:	d538      	bpl.n	8007410 <_printf_float+0x43c>
 800739e:	2301      	movs	r3, #1
 80073a0:	4642      	mov	r2, r8
 80073a2:	4631      	mov	r1, r6
 80073a4:	4628      	mov	r0, r5
 80073a6:	47b8      	blx	r7
 80073a8:	3001      	adds	r0, #1
 80073aa:	f43f ae74 	beq.w	8007096 <_printf_float+0xc2>
 80073ae:	ee18 3a10 	vmov	r3, s16
 80073b2:	4652      	mov	r2, sl
 80073b4:	4631      	mov	r1, r6
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	f43f ae6b 	beq.w	8007096 <_printf_float+0xc2>
 80073c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073c4:	2200      	movs	r2, #0
 80073c6:	2300      	movs	r3, #0
 80073c8:	f7f9 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80073cc:	b9d8      	cbnz	r0, 8007406 <_printf_float+0x432>
 80073ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d0:	f108 0201 	add.w	r2, r8, #1
 80073d4:	3b01      	subs	r3, #1
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	d10e      	bne.n	80073fe <_printf_float+0x42a>
 80073e0:	e659      	b.n	8007096 <_printf_float+0xc2>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4652      	mov	r2, sl
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f ae52 	beq.w	8007096 <_printf_float+0xc2>
 80073f2:	f108 0801 	add.w	r8, r8, #1
 80073f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f8:	3b01      	subs	r3, #1
 80073fa:	4543      	cmp	r3, r8
 80073fc:	dcf1      	bgt.n	80073e2 <_printf_float+0x40e>
 80073fe:	464b      	mov	r3, r9
 8007400:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007404:	e6dc      	b.n	80071c0 <_printf_float+0x1ec>
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	f104 0a1a 	add.w	sl, r4, #26
 800740e:	e7f2      	b.n	80073f6 <_printf_float+0x422>
 8007410:	2301      	movs	r3, #1
 8007412:	4642      	mov	r2, r8
 8007414:	e7df      	b.n	80073d6 <_printf_float+0x402>
 8007416:	2301      	movs	r3, #1
 8007418:	464a      	mov	r2, r9
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f ae38 	beq.w	8007096 <_printf_float+0xc2>
 8007426:	f108 0801 	add.w	r8, r8, #1
 800742a:	68e3      	ldr	r3, [r4, #12]
 800742c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800742e:	1a5b      	subs	r3, r3, r1
 8007430:	4543      	cmp	r3, r8
 8007432:	dcf0      	bgt.n	8007416 <_printf_float+0x442>
 8007434:	e6fa      	b.n	800722c <_printf_float+0x258>
 8007436:	f04f 0800 	mov.w	r8, #0
 800743a:	f104 0919 	add.w	r9, r4, #25
 800743e:	e7f4      	b.n	800742a <_printf_float+0x456>

08007440 <_printf_common>:
 8007440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007444:	4616      	mov	r6, r2
 8007446:	4699      	mov	r9, r3
 8007448:	688a      	ldr	r2, [r1, #8]
 800744a:	690b      	ldr	r3, [r1, #16]
 800744c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007450:	4293      	cmp	r3, r2
 8007452:	bfb8      	it	lt
 8007454:	4613      	movlt	r3, r2
 8007456:	6033      	str	r3, [r6, #0]
 8007458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800745c:	4607      	mov	r7, r0
 800745e:	460c      	mov	r4, r1
 8007460:	b10a      	cbz	r2, 8007466 <_printf_common+0x26>
 8007462:	3301      	adds	r3, #1
 8007464:	6033      	str	r3, [r6, #0]
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	0699      	lsls	r1, r3, #26
 800746a:	bf42      	ittt	mi
 800746c:	6833      	ldrmi	r3, [r6, #0]
 800746e:	3302      	addmi	r3, #2
 8007470:	6033      	strmi	r3, [r6, #0]
 8007472:	6825      	ldr	r5, [r4, #0]
 8007474:	f015 0506 	ands.w	r5, r5, #6
 8007478:	d106      	bne.n	8007488 <_printf_common+0x48>
 800747a:	f104 0a19 	add.w	sl, r4, #25
 800747e:	68e3      	ldr	r3, [r4, #12]
 8007480:	6832      	ldr	r2, [r6, #0]
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	42ab      	cmp	r3, r5
 8007486:	dc26      	bgt.n	80074d6 <_printf_common+0x96>
 8007488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800748c:	1e13      	subs	r3, r2, #0
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	bf18      	it	ne
 8007492:	2301      	movne	r3, #1
 8007494:	0692      	lsls	r2, r2, #26
 8007496:	d42b      	bmi.n	80074f0 <_printf_common+0xb0>
 8007498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800749c:	4649      	mov	r1, r9
 800749e:	4638      	mov	r0, r7
 80074a0:	47c0      	blx	r8
 80074a2:	3001      	adds	r0, #1
 80074a4:	d01e      	beq.n	80074e4 <_printf_common+0xa4>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	68e5      	ldr	r5, [r4, #12]
 80074aa:	6832      	ldr	r2, [r6, #0]
 80074ac:	f003 0306 	and.w	r3, r3, #6
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	bf08      	it	eq
 80074b4:	1aad      	subeq	r5, r5, r2
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	6922      	ldr	r2, [r4, #16]
 80074ba:	bf0c      	ite	eq
 80074bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c0:	2500      	movne	r5, #0
 80074c2:	4293      	cmp	r3, r2
 80074c4:	bfc4      	itt	gt
 80074c6:	1a9b      	subgt	r3, r3, r2
 80074c8:	18ed      	addgt	r5, r5, r3
 80074ca:	2600      	movs	r6, #0
 80074cc:	341a      	adds	r4, #26
 80074ce:	42b5      	cmp	r5, r6
 80074d0:	d11a      	bne.n	8007508 <_printf_common+0xc8>
 80074d2:	2000      	movs	r0, #0
 80074d4:	e008      	b.n	80074e8 <_printf_common+0xa8>
 80074d6:	2301      	movs	r3, #1
 80074d8:	4652      	mov	r2, sl
 80074da:	4649      	mov	r1, r9
 80074dc:	4638      	mov	r0, r7
 80074de:	47c0      	blx	r8
 80074e0:	3001      	adds	r0, #1
 80074e2:	d103      	bne.n	80074ec <_printf_common+0xac>
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ec:	3501      	adds	r5, #1
 80074ee:	e7c6      	b.n	800747e <_printf_common+0x3e>
 80074f0:	18e1      	adds	r1, r4, r3
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	2030      	movs	r0, #48	; 0x30
 80074f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074fa:	4422      	add	r2, r4
 80074fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007504:	3302      	adds	r3, #2
 8007506:	e7c7      	b.n	8007498 <_printf_common+0x58>
 8007508:	2301      	movs	r3, #1
 800750a:	4622      	mov	r2, r4
 800750c:	4649      	mov	r1, r9
 800750e:	4638      	mov	r0, r7
 8007510:	47c0      	blx	r8
 8007512:	3001      	adds	r0, #1
 8007514:	d0e6      	beq.n	80074e4 <_printf_common+0xa4>
 8007516:	3601      	adds	r6, #1
 8007518:	e7d9      	b.n	80074ce <_printf_common+0x8e>
	...

0800751c <_printf_i>:
 800751c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007520:	460c      	mov	r4, r1
 8007522:	4691      	mov	r9, r2
 8007524:	7e27      	ldrb	r7, [r4, #24]
 8007526:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007528:	2f78      	cmp	r7, #120	; 0x78
 800752a:	4680      	mov	r8, r0
 800752c:	469a      	mov	sl, r3
 800752e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007532:	d807      	bhi.n	8007544 <_printf_i+0x28>
 8007534:	2f62      	cmp	r7, #98	; 0x62
 8007536:	d80a      	bhi.n	800754e <_printf_i+0x32>
 8007538:	2f00      	cmp	r7, #0
 800753a:	f000 80d8 	beq.w	80076ee <_printf_i+0x1d2>
 800753e:	2f58      	cmp	r7, #88	; 0x58
 8007540:	f000 80a3 	beq.w	800768a <_printf_i+0x16e>
 8007544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800754c:	e03a      	b.n	80075c4 <_printf_i+0xa8>
 800754e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007552:	2b15      	cmp	r3, #21
 8007554:	d8f6      	bhi.n	8007544 <_printf_i+0x28>
 8007556:	a001      	add	r0, pc, #4	; (adr r0, 800755c <_printf_i+0x40>)
 8007558:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800755c:	080075b5 	.word	0x080075b5
 8007560:	080075c9 	.word	0x080075c9
 8007564:	08007545 	.word	0x08007545
 8007568:	08007545 	.word	0x08007545
 800756c:	08007545 	.word	0x08007545
 8007570:	08007545 	.word	0x08007545
 8007574:	080075c9 	.word	0x080075c9
 8007578:	08007545 	.word	0x08007545
 800757c:	08007545 	.word	0x08007545
 8007580:	08007545 	.word	0x08007545
 8007584:	08007545 	.word	0x08007545
 8007588:	080076d5 	.word	0x080076d5
 800758c:	080075f9 	.word	0x080075f9
 8007590:	080076b7 	.word	0x080076b7
 8007594:	08007545 	.word	0x08007545
 8007598:	08007545 	.word	0x08007545
 800759c:	080076f7 	.word	0x080076f7
 80075a0:	08007545 	.word	0x08007545
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	08007545 	.word	0x08007545
 80075ac:	08007545 	.word	0x08007545
 80075b0:	080076bf 	.word	0x080076bf
 80075b4:	680b      	ldr	r3, [r1, #0]
 80075b6:	1d1a      	adds	r2, r3, #4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	600a      	str	r2, [r1, #0]
 80075bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0a3      	b.n	8007710 <_printf_i+0x1f4>
 80075c8:	6825      	ldr	r5, [r4, #0]
 80075ca:	6808      	ldr	r0, [r1, #0]
 80075cc:	062e      	lsls	r6, r5, #24
 80075ce:	f100 0304 	add.w	r3, r0, #4
 80075d2:	d50a      	bpl.n	80075ea <_printf_i+0xce>
 80075d4:	6805      	ldr	r5, [r0, #0]
 80075d6:	600b      	str	r3, [r1, #0]
 80075d8:	2d00      	cmp	r5, #0
 80075da:	da03      	bge.n	80075e4 <_printf_i+0xc8>
 80075dc:	232d      	movs	r3, #45	; 0x2d
 80075de:	426d      	negs	r5, r5
 80075e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e4:	485e      	ldr	r0, [pc, #376]	; (8007760 <_printf_i+0x244>)
 80075e6:	230a      	movs	r3, #10
 80075e8:	e019      	b.n	800761e <_printf_i+0x102>
 80075ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075ee:	6805      	ldr	r5, [r0, #0]
 80075f0:	600b      	str	r3, [r1, #0]
 80075f2:	bf18      	it	ne
 80075f4:	b22d      	sxthne	r5, r5
 80075f6:	e7ef      	b.n	80075d8 <_printf_i+0xbc>
 80075f8:	680b      	ldr	r3, [r1, #0]
 80075fa:	6825      	ldr	r5, [r4, #0]
 80075fc:	1d18      	adds	r0, r3, #4
 80075fe:	6008      	str	r0, [r1, #0]
 8007600:	0628      	lsls	r0, r5, #24
 8007602:	d501      	bpl.n	8007608 <_printf_i+0xec>
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	e002      	b.n	800760e <_printf_i+0xf2>
 8007608:	0669      	lsls	r1, r5, #25
 800760a:	d5fb      	bpl.n	8007604 <_printf_i+0xe8>
 800760c:	881d      	ldrh	r5, [r3, #0]
 800760e:	4854      	ldr	r0, [pc, #336]	; (8007760 <_printf_i+0x244>)
 8007610:	2f6f      	cmp	r7, #111	; 0x6f
 8007612:	bf0c      	ite	eq
 8007614:	2308      	moveq	r3, #8
 8007616:	230a      	movne	r3, #10
 8007618:	2100      	movs	r1, #0
 800761a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800761e:	6866      	ldr	r6, [r4, #4]
 8007620:	60a6      	str	r6, [r4, #8]
 8007622:	2e00      	cmp	r6, #0
 8007624:	bfa2      	ittt	ge
 8007626:	6821      	ldrge	r1, [r4, #0]
 8007628:	f021 0104 	bicge.w	r1, r1, #4
 800762c:	6021      	strge	r1, [r4, #0]
 800762e:	b90d      	cbnz	r5, 8007634 <_printf_i+0x118>
 8007630:	2e00      	cmp	r6, #0
 8007632:	d04d      	beq.n	80076d0 <_printf_i+0x1b4>
 8007634:	4616      	mov	r6, r2
 8007636:	fbb5 f1f3 	udiv	r1, r5, r3
 800763a:	fb03 5711 	mls	r7, r3, r1, r5
 800763e:	5dc7      	ldrb	r7, [r0, r7]
 8007640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007644:	462f      	mov	r7, r5
 8007646:	42bb      	cmp	r3, r7
 8007648:	460d      	mov	r5, r1
 800764a:	d9f4      	bls.n	8007636 <_printf_i+0x11a>
 800764c:	2b08      	cmp	r3, #8
 800764e:	d10b      	bne.n	8007668 <_printf_i+0x14c>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	07df      	lsls	r7, r3, #31
 8007654:	d508      	bpl.n	8007668 <_printf_i+0x14c>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	6861      	ldr	r1, [r4, #4]
 800765a:	4299      	cmp	r1, r3
 800765c:	bfde      	ittt	le
 800765e:	2330      	movle	r3, #48	; 0x30
 8007660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007664:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007668:	1b92      	subs	r2, r2, r6
 800766a:	6122      	str	r2, [r4, #16]
 800766c:	f8cd a000 	str.w	sl, [sp]
 8007670:	464b      	mov	r3, r9
 8007672:	aa03      	add	r2, sp, #12
 8007674:	4621      	mov	r1, r4
 8007676:	4640      	mov	r0, r8
 8007678:	f7ff fee2 	bl	8007440 <_printf_common>
 800767c:	3001      	adds	r0, #1
 800767e:	d14c      	bne.n	800771a <_printf_i+0x1fe>
 8007680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007684:	b004      	add	sp, #16
 8007686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768a:	4835      	ldr	r0, [pc, #212]	; (8007760 <_printf_i+0x244>)
 800768c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	680e      	ldr	r6, [r1, #0]
 8007694:	061f      	lsls	r7, r3, #24
 8007696:	f856 5b04 	ldr.w	r5, [r6], #4
 800769a:	600e      	str	r6, [r1, #0]
 800769c:	d514      	bpl.n	80076c8 <_printf_i+0x1ac>
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	bf44      	itt	mi
 80076a2:	f043 0320 	orrmi.w	r3, r3, #32
 80076a6:	6023      	strmi	r3, [r4, #0]
 80076a8:	b91d      	cbnz	r5, 80076b2 <_printf_i+0x196>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	f023 0320 	bic.w	r3, r3, #32
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	2310      	movs	r3, #16
 80076b4:	e7b0      	b.n	8007618 <_printf_i+0xfc>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	f043 0320 	orr.w	r3, r3, #32
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	2378      	movs	r3, #120	; 0x78
 80076c0:	4828      	ldr	r0, [pc, #160]	; (8007764 <_printf_i+0x248>)
 80076c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076c6:	e7e3      	b.n	8007690 <_printf_i+0x174>
 80076c8:	065e      	lsls	r6, r3, #25
 80076ca:	bf48      	it	mi
 80076cc:	b2ad      	uxthmi	r5, r5
 80076ce:	e7e6      	b.n	800769e <_printf_i+0x182>
 80076d0:	4616      	mov	r6, r2
 80076d2:	e7bb      	b.n	800764c <_printf_i+0x130>
 80076d4:	680b      	ldr	r3, [r1, #0]
 80076d6:	6826      	ldr	r6, [r4, #0]
 80076d8:	6960      	ldr	r0, [r4, #20]
 80076da:	1d1d      	adds	r5, r3, #4
 80076dc:	600d      	str	r5, [r1, #0]
 80076de:	0635      	lsls	r5, r6, #24
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0x1cc>
 80076e4:	6018      	str	r0, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0x1d2>
 80076e8:	0671      	lsls	r1, r6, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0x1c8>
 80076ec:	8018      	strh	r0, [r3, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	4616      	mov	r6, r2
 80076f4:	e7ba      	b.n	800766c <_printf_i+0x150>
 80076f6:	680b      	ldr	r3, [r1, #0]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	600a      	str	r2, [r1, #0]
 80076fc:	681e      	ldr	r6, [r3, #0]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	2100      	movs	r1, #0
 8007702:	4630      	mov	r0, r6
 8007704:	f7f8 fd6c 	bl	80001e0 <memchr>
 8007708:	b108      	cbz	r0, 800770e <_printf_i+0x1f2>
 800770a:	1b80      	subs	r0, r0, r6
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	6863      	ldr	r3, [r4, #4]
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	2300      	movs	r3, #0
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007718:	e7a8      	b.n	800766c <_printf_i+0x150>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	4632      	mov	r2, r6
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d0ab      	beq.n	8007680 <_printf_i+0x164>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	d413      	bmi.n	8007756 <_printf_i+0x23a>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	4298      	cmp	r0, r3
 8007734:	bfb8      	it	lt
 8007736:	4618      	movlt	r0, r3
 8007738:	e7a4      	b.n	8007684 <_printf_i+0x168>
 800773a:	2301      	movs	r3, #1
 800773c:	4632      	mov	r2, r6
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d09b      	beq.n	8007680 <_printf_i+0x164>
 8007748:	3501      	adds	r5, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	42ab      	cmp	r3, r5
 8007752:	dcf2      	bgt.n	800773a <_printf_i+0x21e>
 8007754:	e7eb      	b.n	800772e <_printf_i+0x212>
 8007756:	2500      	movs	r5, #0
 8007758:	f104 0619 	add.w	r6, r4, #25
 800775c:	e7f5      	b.n	800774a <_printf_i+0x22e>
 800775e:	bf00      	nop
 8007760:	0800e482 	.word	0x0800e482
 8007764:	0800e493 	.word	0x0800e493

08007768 <_scanf_float>:
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	b087      	sub	sp, #28
 800776e:	4617      	mov	r7, r2
 8007770:	9303      	str	r3, [sp, #12]
 8007772:	688b      	ldr	r3, [r1, #8]
 8007774:	1e5a      	subs	r2, r3, #1
 8007776:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800777a:	bf83      	ittte	hi
 800777c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007780:	195b      	addhi	r3, r3, r5
 8007782:	9302      	strhi	r3, [sp, #8]
 8007784:	2300      	movls	r3, #0
 8007786:	bf86      	itte	hi
 8007788:	f240 135d 	movwhi	r3, #349	; 0x15d
 800778c:	608b      	strhi	r3, [r1, #8]
 800778e:	9302      	strls	r3, [sp, #8]
 8007790:	680b      	ldr	r3, [r1, #0]
 8007792:	468b      	mov	fp, r1
 8007794:	2500      	movs	r5, #0
 8007796:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800779a:	f84b 3b1c 	str.w	r3, [fp], #28
 800779e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077a2:	4680      	mov	r8, r0
 80077a4:	460c      	mov	r4, r1
 80077a6:	465e      	mov	r6, fp
 80077a8:	46aa      	mov	sl, r5
 80077aa:	46a9      	mov	r9, r5
 80077ac:	9501      	str	r5, [sp, #4]
 80077ae:	68a2      	ldr	r2, [r4, #8]
 80077b0:	b152      	cbz	r2, 80077c8 <_scanf_float+0x60>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b4e      	cmp	r3, #78	; 0x4e
 80077b8:	d864      	bhi.n	8007884 <_scanf_float+0x11c>
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d83c      	bhi.n	8007838 <_scanf_float+0xd0>
 80077be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80077c2:	b2c8      	uxtb	r0, r1
 80077c4:	280e      	cmp	r0, #14
 80077c6:	d93a      	bls.n	800783e <_scanf_float+0xd6>
 80077c8:	f1b9 0f00 	cmp.w	r9, #0
 80077cc:	d003      	beq.n	80077d6 <_scanf_float+0x6e>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80077da:	f1ba 0f01 	cmp.w	sl, #1
 80077de:	f200 8113 	bhi.w	8007a08 <_scanf_float+0x2a0>
 80077e2:	455e      	cmp	r6, fp
 80077e4:	f200 8105 	bhi.w	80079f2 <_scanf_float+0x28a>
 80077e8:	2501      	movs	r5, #1
 80077ea:	4628      	mov	r0, r5
 80077ec:	b007      	add	sp, #28
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80077f6:	2a0d      	cmp	r2, #13
 80077f8:	d8e6      	bhi.n	80077c8 <_scanf_float+0x60>
 80077fa:	a101      	add	r1, pc, #4	; (adr r1, 8007800 <_scanf_float+0x98>)
 80077fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007800:	0800793f 	.word	0x0800793f
 8007804:	080077c9 	.word	0x080077c9
 8007808:	080077c9 	.word	0x080077c9
 800780c:	080077c9 	.word	0x080077c9
 8007810:	0800799f 	.word	0x0800799f
 8007814:	08007977 	.word	0x08007977
 8007818:	080077c9 	.word	0x080077c9
 800781c:	080077c9 	.word	0x080077c9
 8007820:	0800794d 	.word	0x0800794d
 8007824:	080077c9 	.word	0x080077c9
 8007828:	080077c9 	.word	0x080077c9
 800782c:	080077c9 	.word	0x080077c9
 8007830:	080077c9 	.word	0x080077c9
 8007834:	08007905 	.word	0x08007905
 8007838:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800783c:	e7db      	b.n	80077f6 <_scanf_float+0x8e>
 800783e:	290e      	cmp	r1, #14
 8007840:	d8c2      	bhi.n	80077c8 <_scanf_float+0x60>
 8007842:	a001      	add	r0, pc, #4	; (adr r0, 8007848 <_scanf_float+0xe0>)
 8007844:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007848:	080078f7 	.word	0x080078f7
 800784c:	080077c9 	.word	0x080077c9
 8007850:	080078f7 	.word	0x080078f7
 8007854:	0800798b 	.word	0x0800798b
 8007858:	080077c9 	.word	0x080077c9
 800785c:	080078a5 	.word	0x080078a5
 8007860:	080078e1 	.word	0x080078e1
 8007864:	080078e1 	.word	0x080078e1
 8007868:	080078e1 	.word	0x080078e1
 800786c:	080078e1 	.word	0x080078e1
 8007870:	080078e1 	.word	0x080078e1
 8007874:	080078e1 	.word	0x080078e1
 8007878:	080078e1 	.word	0x080078e1
 800787c:	080078e1 	.word	0x080078e1
 8007880:	080078e1 	.word	0x080078e1
 8007884:	2b6e      	cmp	r3, #110	; 0x6e
 8007886:	d809      	bhi.n	800789c <_scanf_float+0x134>
 8007888:	2b60      	cmp	r3, #96	; 0x60
 800788a:	d8b2      	bhi.n	80077f2 <_scanf_float+0x8a>
 800788c:	2b54      	cmp	r3, #84	; 0x54
 800788e:	d077      	beq.n	8007980 <_scanf_float+0x218>
 8007890:	2b59      	cmp	r3, #89	; 0x59
 8007892:	d199      	bne.n	80077c8 <_scanf_float+0x60>
 8007894:	2d07      	cmp	r5, #7
 8007896:	d197      	bne.n	80077c8 <_scanf_float+0x60>
 8007898:	2508      	movs	r5, #8
 800789a:	e029      	b.n	80078f0 <_scanf_float+0x188>
 800789c:	2b74      	cmp	r3, #116	; 0x74
 800789e:	d06f      	beq.n	8007980 <_scanf_float+0x218>
 80078a0:	2b79      	cmp	r3, #121	; 0x79
 80078a2:	e7f6      	b.n	8007892 <_scanf_float+0x12a>
 80078a4:	6821      	ldr	r1, [r4, #0]
 80078a6:	05c8      	lsls	r0, r1, #23
 80078a8:	d51a      	bpl.n	80078e0 <_scanf_float+0x178>
 80078aa:	9b02      	ldr	r3, [sp, #8]
 80078ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80078b0:	6021      	str	r1, [r4, #0]
 80078b2:	f109 0901 	add.w	r9, r9, #1
 80078b6:	b11b      	cbz	r3, 80078c0 <_scanf_float+0x158>
 80078b8:	3b01      	subs	r3, #1
 80078ba:	3201      	adds	r2, #1
 80078bc:	9302      	str	r3, [sp, #8]
 80078be:	60a2      	str	r2, [r4, #8]
 80078c0:	68a3      	ldr	r3, [r4, #8]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	60a3      	str	r3, [r4, #8]
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	3301      	adds	r3, #1
 80078ca:	6123      	str	r3, [r4, #16]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	f340 8084 	ble.w	80079e0 <_scanf_float+0x278>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	e766      	b.n	80077ae <_scanf_float+0x46>
 80078e0:	eb1a 0f05 	cmn.w	sl, r5
 80078e4:	f47f af70 	bne.w	80077c8 <_scanf_float+0x60>
 80078e8:	6822      	ldr	r2, [r4, #0]
 80078ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80078ee:	6022      	str	r2, [r4, #0]
 80078f0:	f806 3b01 	strb.w	r3, [r6], #1
 80078f4:	e7e4      	b.n	80078c0 <_scanf_float+0x158>
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	0610      	lsls	r0, r2, #24
 80078fa:	f57f af65 	bpl.w	80077c8 <_scanf_float+0x60>
 80078fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007902:	e7f4      	b.n	80078ee <_scanf_float+0x186>
 8007904:	f1ba 0f00 	cmp.w	sl, #0
 8007908:	d10e      	bne.n	8007928 <_scanf_float+0x1c0>
 800790a:	f1b9 0f00 	cmp.w	r9, #0
 800790e:	d10e      	bne.n	800792e <_scanf_float+0x1c6>
 8007910:	6822      	ldr	r2, [r4, #0]
 8007912:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007916:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800791a:	d108      	bne.n	800792e <_scanf_float+0x1c6>
 800791c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007920:	6022      	str	r2, [r4, #0]
 8007922:	f04f 0a01 	mov.w	sl, #1
 8007926:	e7e3      	b.n	80078f0 <_scanf_float+0x188>
 8007928:	f1ba 0f02 	cmp.w	sl, #2
 800792c:	d055      	beq.n	80079da <_scanf_float+0x272>
 800792e:	2d01      	cmp	r5, #1
 8007930:	d002      	beq.n	8007938 <_scanf_float+0x1d0>
 8007932:	2d04      	cmp	r5, #4
 8007934:	f47f af48 	bne.w	80077c8 <_scanf_float+0x60>
 8007938:	3501      	adds	r5, #1
 800793a:	b2ed      	uxtb	r5, r5
 800793c:	e7d8      	b.n	80078f0 <_scanf_float+0x188>
 800793e:	f1ba 0f01 	cmp.w	sl, #1
 8007942:	f47f af41 	bne.w	80077c8 <_scanf_float+0x60>
 8007946:	f04f 0a02 	mov.w	sl, #2
 800794a:	e7d1      	b.n	80078f0 <_scanf_float+0x188>
 800794c:	b97d      	cbnz	r5, 800796e <_scanf_float+0x206>
 800794e:	f1b9 0f00 	cmp.w	r9, #0
 8007952:	f47f af3c 	bne.w	80077ce <_scanf_float+0x66>
 8007956:	6822      	ldr	r2, [r4, #0]
 8007958:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800795c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007960:	f47f af39 	bne.w	80077d6 <_scanf_float+0x6e>
 8007964:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007968:	6022      	str	r2, [r4, #0]
 800796a:	2501      	movs	r5, #1
 800796c:	e7c0      	b.n	80078f0 <_scanf_float+0x188>
 800796e:	2d03      	cmp	r5, #3
 8007970:	d0e2      	beq.n	8007938 <_scanf_float+0x1d0>
 8007972:	2d05      	cmp	r5, #5
 8007974:	e7de      	b.n	8007934 <_scanf_float+0x1cc>
 8007976:	2d02      	cmp	r5, #2
 8007978:	f47f af26 	bne.w	80077c8 <_scanf_float+0x60>
 800797c:	2503      	movs	r5, #3
 800797e:	e7b7      	b.n	80078f0 <_scanf_float+0x188>
 8007980:	2d06      	cmp	r5, #6
 8007982:	f47f af21 	bne.w	80077c8 <_scanf_float+0x60>
 8007986:	2507      	movs	r5, #7
 8007988:	e7b2      	b.n	80078f0 <_scanf_float+0x188>
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	0591      	lsls	r1, r2, #22
 800798e:	f57f af1b 	bpl.w	80077c8 <_scanf_float+0x60>
 8007992:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	f8cd 9004 	str.w	r9, [sp, #4]
 800799c:	e7a8      	b.n	80078f0 <_scanf_float+0x188>
 800799e:	6822      	ldr	r2, [r4, #0]
 80079a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80079a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80079a8:	d006      	beq.n	80079b8 <_scanf_float+0x250>
 80079aa:	0550      	lsls	r0, r2, #21
 80079ac:	f57f af0c 	bpl.w	80077c8 <_scanf_float+0x60>
 80079b0:	f1b9 0f00 	cmp.w	r9, #0
 80079b4:	f43f af0f 	beq.w	80077d6 <_scanf_float+0x6e>
 80079b8:	0591      	lsls	r1, r2, #22
 80079ba:	bf58      	it	pl
 80079bc:	9901      	ldrpl	r1, [sp, #4]
 80079be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079c2:	bf58      	it	pl
 80079c4:	eba9 0101 	subpl.w	r1, r9, r1
 80079c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80079cc:	bf58      	it	pl
 80079ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80079d2:	6022      	str	r2, [r4, #0]
 80079d4:	f04f 0900 	mov.w	r9, #0
 80079d8:	e78a      	b.n	80078f0 <_scanf_float+0x188>
 80079da:	f04f 0a03 	mov.w	sl, #3
 80079de:	e787      	b.n	80078f0 <_scanf_float+0x188>
 80079e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079e4:	4639      	mov	r1, r7
 80079e6:	4640      	mov	r0, r8
 80079e8:	4798      	blx	r3
 80079ea:	2800      	cmp	r0, #0
 80079ec:	f43f aedf 	beq.w	80077ae <_scanf_float+0x46>
 80079f0:	e6ea      	b.n	80077c8 <_scanf_float+0x60>
 80079f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079fa:	463a      	mov	r2, r7
 80079fc:	4640      	mov	r0, r8
 80079fe:	4798      	blx	r3
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	6123      	str	r3, [r4, #16]
 8007a06:	e6ec      	b.n	80077e2 <_scanf_float+0x7a>
 8007a08:	1e6b      	subs	r3, r5, #1
 8007a0a:	2b06      	cmp	r3, #6
 8007a0c:	d825      	bhi.n	8007a5a <_scanf_float+0x2f2>
 8007a0e:	2d02      	cmp	r5, #2
 8007a10:	d836      	bhi.n	8007a80 <_scanf_float+0x318>
 8007a12:	455e      	cmp	r6, fp
 8007a14:	f67f aee8 	bls.w	80077e8 <_scanf_float+0x80>
 8007a18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a20:	463a      	mov	r2, r7
 8007a22:	4640      	mov	r0, r8
 8007a24:	4798      	blx	r3
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	6123      	str	r3, [r4, #16]
 8007a2c:	e7f1      	b.n	8007a12 <_scanf_float+0x2aa>
 8007a2e:	9802      	ldr	r0, [sp, #8]
 8007a30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a34:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a38:	9002      	str	r0, [sp, #8]
 8007a3a:	463a      	mov	r2, r7
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	4798      	blx	r3
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007a4a:	fa5f fa8a 	uxtb.w	sl, sl
 8007a4e:	f1ba 0f02 	cmp.w	sl, #2
 8007a52:	d1ec      	bne.n	8007a2e <_scanf_float+0x2c6>
 8007a54:	3d03      	subs	r5, #3
 8007a56:	b2ed      	uxtb	r5, r5
 8007a58:	1b76      	subs	r6, r6, r5
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	05da      	lsls	r2, r3, #23
 8007a5e:	d52f      	bpl.n	8007ac0 <_scanf_float+0x358>
 8007a60:	055b      	lsls	r3, r3, #21
 8007a62:	d510      	bpl.n	8007a86 <_scanf_float+0x31e>
 8007a64:	455e      	cmp	r6, fp
 8007a66:	f67f aebf 	bls.w	80077e8 <_scanf_float+0x80>
 8007a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a72:	463a      	mov	r2, r7
 8007a74:	4640      	mov	r0, r8
 8007a76:	4798      	blx	r3
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	6123      	str	r3, [r4, #16]
 8007a7e:	e7f1      	b.n	8007a64 <_scanf_float+0x2fc>
 8007a80:	46aa      	mov	sl, r5
 8007a82:	9602      	str	r6, [sp, #8]
 8007a84:	e7df      	b.n	8007a46 <_scanf_float+0x2de>
 8007a86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	2965      	cmp	r1, #101	; 0x65
 8007a8e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007a92:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	d00c      	beq.n	8007ab4 <_scanf_float+0x34c>
 8007a9a:	2945      	cmp	r1, #69	; 0x45
 8007a9c:	d00a      	beq.n	8007ab4 <_scanf_float+0x34c>
 8007a9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aa2:	463a      	mov	r2, r7
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	4798      	blx	r3
 8007aa8:	6923      	ldr	r3, [r4, #16]
 8007aaa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	1eb5      	subs	r5, r6, #2
 8007ab2:	6123      	str	r3, [r4, #16]
 8007ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ab8:	463a      	mov	r2, r7
 8007aba:	4640      	mov	r0, r8
 8007abc:	4798      	blx	r3
 8007abe:	462e      	mov	r6, r5
 8007ac0:	6825      	ldr	r5, [r4, #0]
 8007ac2:	f015 0510 	ands.w	r5, r5, #16
 8007ac6:	d158      	bne.n	8007b7a <_scanf_float+0x412>
 8007ac8:	7035      	strb	r5, [r6, #0]
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad4:	d11c      	bne.n	8007b10 <_scanf_float+0x3a8>
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	454b      	cmp	r3, r9
 8007ada:	eba3 0209 	sub.w	r2, r3, r9
 8007ade:	d124      	bne.n	8007b2a <_scanf_float+0x3c2>
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4659      	mov	r1, fp
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	f000 fead 	bl	8008844 <_strtod_r>
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	6821      	ldr	r1, [r4, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f011 0f02 	tst.w	r1, #2
 8007af4:	ec57 6b10 	vmov	r6, r7, d0
 8007af8:	f103 0204 	add.w	r2, r3, #4
 8007afc:	d020      	beq.n	8007b40 <_scanf_float+0x3d8>
 8007afe:	9903      	ldr	r1, [sp, #12]
 8007b00:	600a      	str	r2, [r1, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	e9c3 6700 	strd	r6, r7, [r3]
 8007b08:	68e3      	ldr	r3, [r4, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	60e3      	str	r3, [r4, #12]
 8007b0e:	e66c      	b.n	80077ea <_scanf_float+0x82>
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0e4      	beq.n	8007ae0 <_scanf_float+0x378>
 8007b16:	9905      	ldr	r1, [sp, #20]
 8007b18:	230a      	movs	r3, #10
 8007b1a:	462a      	mov	r2, r5
 8007b1c:	3101      	adds	r1, #1
 8007b1e:	4640      	mov	r0, r8
 8007b20:	f000 ff1a 	bl	8008958 <_strtol_r>
 8007b24:	9b04      	ldr	r3, [sp, #16]
 8007b26:	9e05      	ldr	r6, [sp, #20]
 8007b28:	1ac2      	subs	r2, r0, r3
 8007b2a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b2e:	429e      	cmp	r6, r3
 8007b30:	bf28      	it	cs
 8007b32:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b36:	4912      	ldr	r1, [pc, #72]	; (8007b80 <_scanf_float+0x418>)
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f000 f83b 	bl	8007bb4 <siprintf>
 8007b3e:	e7cf      	b.n	8007ae0 <_scanf_float+0x378>
 8007b40:	f011 0f04 	tst.w	r1, #4
 8007b44:	9903      	ldr	r1, [sp, #12]
 8007b46:	600a      	str	r2, [r1, #0]
 8007b48:	d1db      	bne.n	8007b02 <_scanf_float+0x39a>
 8007b4a:	f8d3 8000 	ldr.w	r8, [r3]
 8007b4e:	ee10 2a10 	vmov	r2, s0
 8007b52:	ee10 0a10 	vmov	r0, s0
 8007b56:	463b      	mov	r3, r7
 8007b58:	4639      	mov	r1, r7
 8007b5a:	f7f8 ffe7 	bl	8000b2c <__aeabi_dcmpun>
 8007b5e:	b128      	cbz	r0, 8007b6c <_scanf_float+0x404>
 8007b60:	4808      	ldr	r0, [pc, #32]	; (8007b84 <_scanf_float+0x41c>)
 8007b62:	f000 f821 	bl	8007ba8 <nanf>
 8007b66:	ed88 0a00 	vstr	s0, [r8]
 8007b6a:	e7cd      	b.n	8007b08 <_scanf_float+0x3a0>
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f9 f83a 	bl	8000be8 <__aeabi_d2f>
 8007b74:	f8c8 0000 	str.w	r0, [r8]
 8007b78:	e7c6      	b.n	8007b08 <_scanf_float+0x3a0>
 8007b7a:	2500      	movs	r5, #0
 8007b7c:	e635      	b.n	80077ea <_scanf_float+0x82>
 8007b7e:	bf00      	nop
 8007b80:	0800e4a4 	.word	0x0800e4a4
 8007b84:	0800e8c0 	.word	0x0800e8c0

08007b88 <_sbrk_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d06      	ldr	r5, [pc, #24]	; (8007ba4 <_sbrk_r+0x1c>)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4608      	mov	r0, r1
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	f7fa fb94 	bl	80022c0 <_sbrk>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_sbrk_r+0x1a>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_sbrk_r+0x1a>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	200057bc 	.word	0x200057bc

08007ba8 <nanf>:
 8007ba8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007bb0 <nanf+0x8>
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	7fc00000 	.word	0x7fc00000

08007bb4 <siprintf>:
 8007bb4:	b40e      	push	{r1, r2, r3}
 8007bb6:	b500      	push	{lr}
 8007bb8:	b09c      	sub	sp, #112	; 0x70
 8007bba:	ab1d      	add	r3, sp, #116	; 0x74
 8007bbc:	9002      	str	r0, [sp, #8]
 8007bbe:	9006      	str	r0, [sp, #24]
 8007bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bc4:	4809      	ldr	r0, [pc, #36]	; (8007bec <siprintf+0x38>)
 8007bc6:	9107      	str	r1, [sp, #28]
 8007bc8:	9104      	str	r1, [sp, #16]
 8007bca:	4909      	ldr	r1, [pc, #36]	; (8007bf0 <siprintf+0x3c>)
 8007bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd0:	9105      	str	r1, [sp, #20]
 8007bd2:	6800      	ldr	r0, [r0, #0]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	a902      	add	r1, sp, #8
 8007bd8:	f002 fe18 	bl	800a80c <_svfiprintf_r>
 8007bdc:	9b02      	ldr	r3, [sp, #8]
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	b01c      	add	sp, #112	; 0x70
 8007be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be8:	b003      	add	sp, #12
 8007bea:	4770      	bx	lr
 8007bec:	20000410 	.word	0x20000410
 8007bf0:	ffff0208 	.word	0xffff0208

08007bf4 <sulp>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	ec45 4b10 	vmov	d0, r4, r5
 8007bfe:	4616      	mov	r6, r2
 8007c00:	f002 fc24 	bl	800a44c <__ulp>
 8007c04:	ec51 0b10 	vmov	r0, r1, d0
 8007c08:	b17e      	cbz	r6, 8007c2a <sulp+0x36>
 8007c0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dd09      	ble.n	8007c2a <sulp+0x36>
 8007c16:	051b      	lsls	r3, r3, #20
 8007c18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c1c:	2400      	movs	r4, #0
 8007c1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c22:	4622      	mov	r2, r4
 8007c24:	462b      	mov	r3, r5
 8007c26:	f7f8 fce7 	bl	80005f8 <__aeabi_dmul>
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	0000      	movs	r0, r0
	...

08007c30 <_strtod_l>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	b0a3      	sub	sp, #140	; 0x8c
 8007c36:	461f      	mov	r7, r3
 8007c38:	2300      	movs	r3, #0
 8007c3a:	931e      	str	r3, [sp, #120]	; 0x78
 8007c3c:	4ba4      	ldr	r3, [pc, #656]	; (8007ed0 <_strtod_l+0x2a0>)
 8007c3e:	9219      	str	r2, [sp, #100]	; 0x64
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	9307      	str	r3, [sp, #28]
 8007c44:	4604      	mov	r4, r0
 8007c46:	4618      	mov	r0, r3
 8007c48:	4688      	mov	r8, r1
 8007c4a:	f7f8 fac1 	bl	80001d0 <strlen>
 8007c4e:	f04f 0a00 	mov.w	sl, #0
 8007c52:	4605      	mov	r5, r0
 8007c54:	f04f 0b00 	mov.w	fp, #0
 8007c58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007c5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c5e:	781a      	ldrb	r2, [r3, #0]
 8007c60:	2a2b      	cmp	r2, #43	; 0x2b
 8007c62:	d04c      	beq.n	8007cfe <_strtod_l+0xce>
 8007c64:	d839      	bhi.n	8007cda <_strtod_l+0xaa>
 8007c66:	2a0d      	cmp	r2, #13
 8007c68:	d832      	bhi.n	8007cd0 <_strtod_l+0xa0>
 8007c6a:	2a08      	cmp	r2, #8
 8007c6c:	d832      	bhi.n	8007cd4 <_strtod_l+0xa4>
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	d03c      	beq.n	8007cec <_strtod_l+0xbc>
 8007c72:	2300      	movs	r3, #0
 8007c74:	930e      	str	r3, [sp, #56]	; 0x38
 8007c76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007c78:	7833      	ldrb	r3, [r6, #0]
 8007c7a:	2b30      	cmp	r3, #48	; 0x30
 8007c7c:	f040 80b4 	bne.w	8007de8 <_strtod_l+0x1b8>
 8007c80:	7873      	ldrb	r3, [r6, #1]
 8007c82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c86:	2b58      	cmp	r3, #88	; 0x58
 8007c88:	d16c      	bne.n	8007d64 <_strtod_l+0x134>
 8007c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	ab1e      	add	r3, sp, #120	; 0x78
 8007c90:	9702      	str	r7, [sp, #8]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4a8f      	ldr	r2, [pc, #572]	; (8007ed4 <_strtod_l+0x2a4>)
 8007c96:	ab1f      	add	r3, sp, #124	; 0x7c
 8007c98:	a91d      	add	r1, sp, #116	; 0x74
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f001 fd40 	bl	8009720 <__gethex>
 8007ca0:	f010 0707 	ands.w	r7, r0, #7
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	d005      	beq.n	8007cb4 <_strtod_l+0x84>
 8007ca8:	2f06      	cmp	r7, #6
 8007caa:	d12a      	bne.n	8007d02 <_strtod_l+0xd2>
 8007cac:	3601      	adds	r6, #1
 8007cae:	2300      	movs	r3, #0
 8007cb0:	961d      	str	r6, [sp, #116]	; 0x74
 8007cb2:	930e      	str	r3, [sp, #56]	; 0x38
 8007cb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 8596 	bne.w	80087e8 <_strtod_l+0xbb8>
 8007cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cbe:	b1db      	cbz	r3, 8007cf8 <_strtod_l+0xc8>
 8007cc0:	4652      	mov	r2, sl
 8007cc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007cc6:	ec43 2b10 	vmov	d0, r2, r3
 8007cca:	b023      	add	sp, #140	; 0x8c
 8007ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd0:	2a20      	cmp	r2, #32
 8007cd2:	d1ce      	bne.n	8007c72 <_strtod_l+0x42>
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	931d      	str	r3, [sp, #116]	; 0x74
 8007cd8:	e7c0      	b.n	8007c5c <_strtod_l+0x2c>
 8007cda:	2a2d      	cmp	r2, #45	; 0x2d
 8007cdc:	d1c9      	bne.n	8007c72 <_strtod_l+0x42>
 8007cde:	2201      	movs	r2, #1
 8007ce0:	920e      	str	r2, [sp, #56]	; 0x38
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	921d      	str	r2, [sp, #116]	; 0x74
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1c4      	bne.n	8007c76 <_strtod_l+0x46>
 8007cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f040 8576 	bne.w	80087e4 <_strtod_l+0xbb4>
 8007cf8:	4652      	mov	r2, sl
 8007cfa:	465b      	mov	r3, fp
 8007cfc:	e7e3      	b.n	8007cc6 <_strtod_l+0x96>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	e7ee      	b.n	8007ce0 <_strtod_l+0xb0>
 8007d02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d04:	b13a      	cbz	r2, 8007d16 <_strtod_l+0xe6>
 8007d06:	2135      	movs	r1, #53	; 0x35
 8007d08:	a820      	add	r0, sp, #128	; 0x80
 8007d0a:	f002 fcaa 	bl	800a662 <__copybits>
 8007d0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d10:	4620      	mov	r0, r4
 8007d12:	f002 f86f 	bl	8009df4 <_Bfree>
 8007d16:	3f01      	subs	r7, #1
 8007d18:	2f05      	cmp	r7, #5
 8007d1a:	d807      	bhi.n	8007d2c <_strtod_l+0xfc>
 8007d1c:	e8df f007 	tbb	[pc, r7]
 8007d20:	1d180b0e 	.word	0x1d180b0e
 8007d24:	030e      	.short	0x030e
 8007d26:	f04f 0b00 	mov.w	fp, #0
 8007d2a:	46da      	mov	sl, fp
 8007d2c:	0728      	lsls	r0, r5, #28
 8007d2e:	d5c1      	bpl.n	8007cb4 <_strtod_l+0x84>
 8007d30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007d34:	e7be      	b.n	8007cb4 <_strtod_l+0x84>
 8007d36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007d3a:	e7f7      	b.n	8007d2c <_strtod_l+0xfc>
 8007d3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007d40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007d42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d4e:	e7ed      	b.n	8007d2c <_strtod_l+0xfc>
 8007d50:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007ed8 <_strtod_l+0x2a8>
 8007d54:	f04f 0a00 	mov.w	sl, #0
 8007d58:	e7e8      	b.n	8007d2c <_strtod_l+0xfc>
 8007d5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007d5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007d62:	e7e3      	b.n	8007d2c <_strtod_l+0xfc>
 8007d64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	921d      	str	r2, [sp, #116]	; 0x74
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b30      	cmp	r3, #48	; 0x30
 8007d6e:	d0f9      	beq.n	8007d64 <_strtod_l+0x134>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d09f      	beq.n	8007cb4 <_strtod_l+0x84>
 8007d74:	2301      	movs	r3, #1
 8007d76:	f04f 0900 	mov.w	r9, #0
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d84:	464f      	mov	r7, r9
 8007d86:	220a      	movs	r2, #10
 8007d88:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007d8a:	7806      	ldrb	r6, [r0, #0]
 8007d8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007d90:	b2d9      	uxtb	r1, r3
 8007d92:	2909      	cmp	r1, #9
 8007d94:	d92a      	bls.n	8007dec <_strtod_l+0x1bc>
 8007d96:	9907      	ldr	r1, [sp, #28]
 8007d98:	462a      	mov	r2, r5
 8007d9a:	f002 fe41 	bl	800aa20 <strncmp>
 8007d9e:	b398      	cbz	r0, 8007e08 <_strtod_l+0x1d8>
 8007da0:	2000      	movs	r0, #0
 8007da2:	4633      	mov	r3, r6
 8007da4:	463d      	mov	r5, r7
 8007da6:	9007      	str	r0, [sp, #28]
 8007da8:	4602      	mov	r2, r0
 8007daa:	2b65      	cmp	r3, #101	; 0x65
 8007dac:	d001      	beq.n	8007db2 <_strtod_l+0x182>
 8007dae:	2b45      	cmp	r3, #69	; 0x45
 8007db0:	d118      	bne.n	8007de4 <_strtod_l+0x1b4>
 8007db2:	b91d      	cbnz	r5, 8007dbc <_strtod_l+0x18c>
 8007db4:	9b04      	ldr	r3, [sp, #16]
 8007db6:	4303      	orrs	r3, r0
 8007db8:	d098      	beq.n	8007cec <_strtod_l+0xbc>
 8007dba:	2500      	movs	r5, #0
 8007dbc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007dc0:	f108 0301 	add.w	r3, r8, #1
 8007dc4:	931d      	str	r3, [sp, #116]	; 0x74
 8007dc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007dca:	2b2b      	cmp	r3, #43	; 0x2b
 8007dcc:	d075      	beq.n	8007eba <_strtod_l+0x28a>
 8007dce:	2b2d      	cmp	r3, #45	; 0x2d
 8007dd0:	d07b      	beq.n	8007eca <_strtod_l+0x29a>
 8007dd2:	f04f 0c00 	mov.w	ip, #0
 8007dd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007dda:	2909      	cmp	r1, #9
 8007ddc:	f240 8082 	bls.w	8007ee4 <_strtod_l+0x2b4>
 8007de0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007de4:	2600      	movs	r6, #0
 8007de6:	e09d      	b.n	8007f24 <_strtod_l+0x2f4>
 8007de8:	2300      	movs	r3, #0
 8007dea:	e7c4      	b.n	8007d76 <_strtod_l+0x146>
 8007dec:	2f08      	cmp	r7, #8
 8007dee:	bfd8      	it	le
 8007df0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007df2:	f100 0001 	add.w	r0, r0, #1
 8007df6:	bfda      	itte	le
 8007df8:	fb02 3301 	mlale	r3, r2, r1, r3
 8007dfc:	9309      	strle	r3, [sp, #36]	; 0x24
 8007dfe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e02:	3701      	adds	r7, #1
 8007e04:	901d      	str	r0, [sp, #116]	; 0x74
 8007e06:	e7bf      	b.n	8007d88 <_strtod_l+0x158>
 8007e08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e0a:	195a      	adds	r2, r3, r5
 8007e0c:	921d      	str	r2, [sp, #116]	; 0x74
 8007e0e:	5d5b      	ldrb	r3, [r3, r5]
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	d037      	beq.n	8007e84 <_strtod_l+0x254>
 8007e14:	9007      	str	r0, [sp, #28]
 8007e16:	463d      	mov	r5, r7
 8007e18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007e1c:	2a09      	cmp	r2, #9
 8007e1e:	d912      	bls.n	8007e46 <_strtod_l+0x216>
 8007e20:	2201      	movs	r2, #1
 8007e22:	e7c2      	b.n	8007daa <_strtod_l+0x17a>
 8007e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	921d      	str	r2, [sp, #116]	; 0x74
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	2b30      	cmp	r3, #48	; 0x30
 8007e30:	d0f8      	beq.n	8007e24 <_strtod_l+0x1f4>
 8007e32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007e36:	2a08      	cmp	r2, #8
 8007e38:	f200 84db 	bhi.w	80087f2 <_strtod_l+0xbc2>
 8007e3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007e3e:	9007      	str	r0, [sp, #28]
 8007e40:	2000      	movs	r0, #0
 8007e42:	920a      	str	r2, [sp, #40]	; 0x28
 8007e44:	4605      	mov	r5, r0
 8007e46:	3b30      	subs	r3, #48	; 0x30
 8007e48:	f100 0201 	add.w	r2, r0, #1
 8007e4c:	d014      	beq.n	8007e78 <_strtod_l+0x248>
 8007e4e:	9907      	ldr	r1, [sp, #28]
 8007e50:	4411      	add	r1, r2
 8007e52:	9107      	str	r1, [sp, #28]
 8007e54:	462a      	mov	r2, r5
 8007e56:	eb00 0e05 	add.w	lr, r0, r5
 8007e5a:	210a      	movs	r1, #10
 8007e5c:	4572      	cmp	r2, lr
 8007e5e:	d113      	bne.n	8007e88 <_strtod_l+0x258>
 8007e60:	182a      	adds	r2, r5, r0
 8007e62:	2a08      	cmp	r2, #8
 8007e64:	f105 0501 	add.w	r5, r5, #1
 8007e68:	4405      	add	r5, r0
 8007e6a:	dc1c      	bgt.n	8007ea6 <_strtod_l+0x276>
 8007e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e6e:	220a      	movs	r2, #10
 8007e70:	fb02 3301 	mla	r3, r2, r1, r3
 8007e74:	9309      	str	r3, [sp, #36]	; 0x24
 8007e76:	2200      	movs	r2, #0
 8007e78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e7a:	1c59      	adds	r1, r3, #1
 8007e7c:	911d      	str	r1, [sp, #116]	; 0x74
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	4610      	mov	r0, r2
 8007e82:	e7c9      	b.n	8007e18 <_strtod_l+0x1e8>
 8007e84:	4638      	mov	r0, r7
 8007e86:	e7d2      	b.n	8007e2e <_strtod_l+0x1fe>
 8007e88:	2a08      	cmp	r2, #8
 8007e8a:	dc04      	bgt.n	8007e96 <_strtod_l+0x266>
 8007e8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e8e:	434e      	muls	r6, r1
 8007e90:	9609      	str	r6, [sp, #36]	; 0x24
 8007e92:	3201      	adds	r2, #1
 8007e94:	e7e2      	b.n	8007e5c <_strtod_l+0x22c>
 8007e96:	f102 0c01 	add.w	ip, r2, #1
 8007e9a:	f1bc 0f10 	cmp.w	ip, #16
 8007e9e:	bfd8      	it	le
 8007ea0:	fb01 f909 	mulle.w	r9, r1, r9
 8007ea4:	e7f5      	b.n	8007e92 <_strtod_l+0x262>
 8007ea6:	2d10      	cmp	r5, #16
 8007ea8:	bfdc      	itt	le
 8007eaa:	220a      	movle	r2, #10
 8007eac:	fb02 3909 	mlale	r9, r2, r9, r3
 8007eb0:	e7e1      	b.n	8007e76 <_strtod_l+0x246>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	e77c      	b.n	8007db4 <_strtod_l+0x184>
 8007eba:	f04f 0c00 	mov.w	ip, #0
 8007ebe:	f108 0302 	add.w	r3, r8, #2
 8007ec2:	931d      	str	r3, [sp, #116]	; 0x74
 8007ec4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007ec8:	e785      	b.n	8007dd6 <_strtod_l+0x1a6>
 8007eca:	f04f 0c01 	mov.w	ip, #1
 8007ece:	e7f6      	b.n	8007ebe <_strtod_l+0x28e>
 8007ed0:	0800e700 	.word	0x0800e700
 8007ed4:	0800e4ac 	.word	0x0800e4ac
 8007ed8:	7ff00000 	.word	0x7ff00000
 8007edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ede:	1c59      	adds	r1, r3, #1
 8007ee0:	911d      	str	r1, [sp, #116]	; 0x74
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b30      	cmp	r3, #48	; 0x30
 8007ee6:	d0f9      	beq.n	8007edc <_strtod_l+0x2ac>
 8007ee8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007eec:	2908      	cmp	r1, #8
 8007eee:	f63f af79 	bhi.w	8007de4 <_strtod_l+0x1b4>
 8007ef2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007ef6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ef8:	9308      	str	r3, [sp, #32]
 8007efa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007efc:	1c59      	adds	r1, r3, #1
 8007efe:	911d      	str	r1, [sp, #116]	; 0x74
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007f06:	2e09      	cmp	r6, #9
 8007f08:	d937      	bls.n	8007f7a <_strtod_l+0x34a>
 8007f0a:	9e08      	ldr	r6, [sp, #32]
 8007f0c:	1b89      	subs	r1, r1, r6
 8007f0e:	2908      	cmp	r1, #8
 8007f10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007f14:	dc02      	bgt.n	8007f1c <_strtod_l+0x2ec>
 8007f16:	4576      	cmp	r6, lr
 8007f18:	bfa8      	it	ge
 8007f1a:	4676      	movge	r6, lr
 8007f1c:	f1bc 0f00 	cmp.w	ip, #0
 8007f20:	d000      	beq.n	8007f24 <_strtod_l+0x2f4>
 8007f22:	4276      	negs	r6, r6
 8007f24:	2d00      	cmp	r5, #0
 8007f26:	d14f      	bne.n	8007fc8 <_strtod_l+0x398>
 8007f28:	9904      	ldr	r1, [sp, #16]
 8007f2a:	4301      	orrs	r1, r0
 8007f2c:	f47f aec2 	bne.w	8007cb4 <_strtod_l+0x84>
 8007f30:	2a00      	cmp	r2, #0
 8007f32:	f47f aedb 	bne.w	8007cec <_strtod_l+0xbc>
 8007f36:	2b69      	cmp	r3, #105	; 0x69
 8007f38:	d027      	beq.n	8007f8a <_strtod_l+0x35a>
 8007f3a:	dc24      	bgt.n	8007f86 <_strtod_l+0x356>
 8007f3c:	2b49      	cmp	r3, #73	; 0x49
 8007f3e:	d024      	beq.n	8007f8a <_strtod_l+0x35a>
 8007f40:	2b4e      	cmp	r3, #78	; 0x4e
 8007f42:	f47f aed3 	bne.w	8007cec <_strtod_l+0xbc>
 8007f46:	499e      	ldr	r1, [pc, #632]	; (80081c0 <_strtod_l+0x590>)
 8007f48:	a81d      	add	r0, sp, #116	; 0x74
 8007f4a:	f001 fe41 	bl	8009bd0 <__match>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	f43f aecc 	beq.w	8007cec <_strtod_l+0xbc>
 8007f54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b28      	cmp	r3, #40	; 0x28
 8007f5a:	d12d      	bne.n	8007fb8 <_strtod_l+0x388>
 8007f5c:	4999      	ldr	r1, [pc, #612]	; (80081c4 <_strtod_l+0x594>)
 8007f5e:	aa20      	add	r2, sp, #128	; 0x80
 8007f60:	a81d      	add	r0, sp, #116	; 0x74
 8007f62:	f001 fe49 	bl	8009bf8 <__hexnan>
 8007f66:	2805      	cmp	r0, #5
 8007f68:	d126      	bne.n	8007fb8 <_strtod_l+0x388>
 8007f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007f70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007f74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007f78:	e69c      	b.n	8007cb4 <_strtod_l+0x84>
 8007f7a:	210a      	movs	r1, #10
 8007f7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007f80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007f84:	e7b9      	b.n	8007efa <_strtod_l+0x2ca>
 8007f86:	2b6e      	cmp	r3, #110	; 0x6e
 8007f88:	e7db      	b.n	8007f42 <_strtod_l+0x312>
 8007f8a:	498f      	ldr	r1, [pc, #572]	; (80081c8 <_strtod_l+0x598>)
 8007f8c:	a81d      	add	r0, sp, #116	; 0x74
 8007f8e:	f001 fe1f 	bl	8009bd0 <__match>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f43f aeaa 	beq.w	8007cec <_strtod_l+0xbc>
 8007f98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f9a:	498c      	ldr	r1, [pc, #560]	; (80081cc <_strtod_l+0x59c>)
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	a81d      	add	r0, sp, #116	; 0x74
 8007fa0:	931d      	str	r3, [sp, #116]	; 0x74
 8007fa2:	f001 fe15 	bl	8009bd0 <__match>
 8007fa6:	b910      	cbnz	r0, 8007fae <_strtod_l+0x37e>
 8007fa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007faa:	3301      	adds	r3, #1
 8007fac:	931d      	str	r3, [sp, #116]	; 0x74
 8007fae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80081dc <_strtod_l+0x5ac>
 8007fb2:	f04f 0a00 	mov.w	sl, #0
 8007fb6:	e67d      	b.n	8007cb4 <_strtod_l+0x84>
 8007fb8:	4885      	ldr	r0, [pc, #532]	; (80081d0 <_strtod_l+0x5a0>)
 8007fba:	f002 fd29 	bl	800aa10 <nan>
 8007fbe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007fc2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007fc6:	e675      	b.n	8007cb4 <_strtod_l+0x84>
 8007fc8:	9b07      	ldr	r3, [sp, #28]
 8007fca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fcc:	1af3      	subs	r3, r6, r3
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	bf08      	it	eq
 8007fd2:	462f      	moveq	r7, r5
 8007fd4:	2d10      	cmp	r5, #16
 8007fd6:	9308      	str	r3, [sp, #32]
 8007fd8:	46a8      	mov	r8, r5
 8007fda:	bfa8      	it	ge
 8007fdc:	f04f 0810 	movge.w	r8, #16
 8007fe0:	f7f8 fa90 	bl	8000504 <__aeabi_ui2d>
 8007fe4:	2d09      	cmp	r5, #9
 8007fe6:	4682      	mov	sl, r0
 8007fe8:	468b      	mov	fp, r1
 8007fea:	dd13      	ble.n	8008014 <_strtod_l+0x3e4>
 8007fec:	4b79      	ldr	r3, [pc, #484]	; (80081d4 <_strtod_l+0x5a4>)
 8007fee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ff2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ff6:	f7f8 faff 	bl	80005f8 <__aeabi_dmul>
 8007ffa:	4682      	mov	sl, r0
 8007ffc:	4648      	mov	r0, r9
 8007ffe:	468b      	mov	fp, r1
 8008000:	f7f8 fa80 	bl	8000504 <__aeabi_ui2d>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4650      	mov	r0, sl
 800800a:	4659      	mov	r1, fp
 800800c:	f7f8 f93e 	bl	800028c <__adddf3>
 8008010:	4682      	mov	sl, r0
 8008012:	468b      	mov	fp, r1
 8008014:	2d0f      	cmp	r5, #15
 8008016:	dc38      	bgt.n	800808a <_strtod_l+0x45a>
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f43f ae4a 	beq.w	8007cb4 <_strtod_l+0x84>
 8008020:	dd24      	ble.n	800806c <_strtod_l+0x43c>
 8008022:	2b16      	cmp	r3, #22
 8008024:	dc0b      	bgt.n	800803e <_strtod_l+0x40e>
 8008026:	4d6b      	ldr	r5, [pc, #428]	; (80081d4 <_strtod_l+0x5a4>)
 8008028:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800802c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008030:	4652      	mov	r2, sl
 8008032:	465b      	mov	r3, fp
 8008034:	f7f8 fae0 	bl	80005f8 <__aeabi_dmul>
 8008038:	4682      	mov	sl, r0
 800803a:	468b      	mov	fp, r1
 800803c:	e63a      	b.n	8007cb4 <_strtod_l+0x84>
 800803e:	9a08      	ldr	r2, [sp, #32]
 8008040:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008044:	4293      	cmp	r3, r2
 8008046:	db20      	blt.n	800808a <_strtod_l+0x45a>
 8008048:	4c62      	ldr	r4, [pc, #392]	; (80081d4 <_strtod_l+0x5a4>)
 800804a:	f1c5 050f 	rsb	r5, r5, #15
 800804e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800805a:	f7f8 facd 	bl	80005f8 <__aeabi_dmul>
 800805e:	9b08      	ldr	r3, [sp, #32]
 8008060:	1b5d      	subs	r5, r3, r5
 8008062:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008066:	e9d4 2300 	ldrd	r2, r3, [r4]
 800806a:	e7e3      	b.n	8008034 <_strtod_l+0x404>
 800806c:	9b08      	ldr	r3, [sp, #32]
 800806e:	3316      	adds	r3, #22
 8008070:	db0b      	blt.n	800808a <_strtod_l+0x45a>
 8008072:	9b07      	ldr	r3, [sp, #28]
 8008074:	4a57      	ldr	r2, [pc, #348]	; (80081d4 <_strtod_l+0x5a4>)
 8008076:	1b9e      	subs	r6, r3, r6
 8008078:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800807c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008080:	4650      	mov	r0, sl
 8008082:	4659      	mov	r1, fp
 8008084:	f7f8 fbe2 	bl	800084c <__aeabi_ddiv>
 8008088:	e7d6      	b.n	8008038 <_strtod_l+0x408>
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	eba5 0808 	sub.w	r8, r5, r8
 8008090:	4498      	add	r8, r3
 8008092:	f1b8 0f00 	cmp.w	r8, #0
 8008096:	dd71      	ble.n	800817c <_strtod_l+0x54c>
 8008098:	f018 030f 	ands.w	r3, r8, #15
 800809c:	d00a      	beq.n	80080b4 <_strtod_l+0x484>
 800809e:	494d      	ldr	r1, [pc, #308]	; (80081d4 <_strtod_l+0x5a4>)
 80080a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080a4:	4652      	mov	r2, sl
 80080a6:	465b      	mov	r3, fp
 80080a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ac:	f7f8 faa4 	bl	80005f8 <__aeabi_dmul>
 80080b0:	4682      	mov	sl, r0
 80080b2:	468b      	mov	fp, r1
 80080b4:	f038 080f 	bics.w	r8, r8, #15
 80080b8:	d04d      	beq.n	8008156 <_strtod_l+0x526>
 80080ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80080be:	dd22      	ble.n	8008106 <_strtod_l+0x4d6>
 80080c0:	2500      	movs	r5, #0
 80080c2:	462e      	mov	r6, r5
 80080c4:	9509      	str	r5, [sp, #36]	; 0x24
 80080c6:	9507      	str	r5, [sp, #28]
 80080c8:	2322      	movs	r3, #34	; 0x22
 80080ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80081dc <_strtod_l+0x5ac>
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	f04f 0a00 	mov.w	sl, #0
 80080d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f43f adec 	beq.w	8007cb4 <_strtod_l+0x84>
 80080dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80080de:	4620      	mov	r0, r4
 80080e0:	f001 fe88 	bl	8009df4 <_Bfree>
 80080e4:	9907      	ldr	r1, [sp, #28]
 80080e6:	4620      	mov	r0, r4
 80080e8:	f001 fe84 	bl	8009df4 <_Bfree>
 80080ec:	4631      	mov	r1, r6
 80080ee:	4620      	mov	r0, r4
 80080f0:	f001 fe80 	bl	8009df4 <_Bfree>
 80080f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080f6:	4620      	mov	r0, r4
 80080f8:	f001 fe7c 	bl	8009df4 <_Bfree>
 80080fc:	4629      	mov	r1, r5
 80080fe:	4620      	mov	r0, r4
 8008100:	f001 fe78 	bl	8009df4 <_Bfree>
 8008104:	e5d6      	b.n	8007cb4 <_strtod_l+0x84>
 8008106:	2300      	movs	r3, #0
 8008108:	ea4f 1828 	mov.w	r8, r8, asr #4
 800810c:	4650      	mov	r0, sl
 800810e:	4659      	mov	r1, fp
 8008110:	4699      	mov	r9, r3
 8008112:	f1b8 0f01 	cmp.w	r8, #1
 8008116:	dc21      	bgt.n	800815c <_strtod_l+0x52c>
 8008118:	b10b      	cbz	r3, 800811e <_strtod_l+0x4ee>
 800811a:	4682      	mov	sl, r0
 800811c:	468b      	mov	fp, r1
 800811e:	4b2e      	ldr	r3, [pc, #184]	; (80081d8 <_strtod_l+0x5a8>)
 8008120:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008124:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008128:	4652      	mov	r2, sl
 800812a:	465b      	mov	r3, fp
 800812c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008130:	f7f8 fa62 	bl	80005f8 <__aeabi_dmul>
 8008134:	4b29      	ldr	r3, [pc, #164]	; (80081dc <_strtod_l+0x5ac>)
 8008136:	460a      	mov	r2, r1
 8008138:	400b      	ands	r3, r1
 800813a:	4929      	ldr	r1, [pc, #164]	; (80081e0 <_strtod_l+0x5b0>)
 800813c:	428b      	cmp	r3, r1
 800813e:	4682      	mov	sl, r0
 8008140:	d8be      	bhi.n	80080c0 <_strtod_l+0x490>
 8008142:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008146:	428b      	cmp	r3, r1
 8008148:	bf86      	itte	hi
 800814a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80081e4 <_strtod_l+0x5b4>
 800814e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008152:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008156:	2300      	movs	r3, #0
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	e081      	b.n	8008260 <_strtod_l+0x630>
 800815c:	f018 0f01 	tst.w	r8, #1
 8008160:	d007      	beq.n	8008172 <_strtod_l+0x542>
 8008162:	4b1d      	ldr	r3, [pc, #116]	; (80081d8 <_strtod_l+0x5a8>)
 8008164:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 fa44 	bl	80005f8 <__aeabi_dmul>
 8008170:	2301      	movs	r3, #1
 8008172:	f109 0901 	add.w	r9, r9, #1
 8008176:	ea4f 0868 	mov.w	r8, r8, asr #1
 800817a:	e7ca      	b.n	8008112 <_strtod_l+0x4e2>
 800817c:	d0eb      	beq.n	8008156 <_strtod_l+0x526>
 800817e:	f1c8 0800 	rsb	r8, r8, #0
 8008182:	f018 020f 	ands.w	r2, r8, #15
 8008186:	d00a      	beq.n	800819e <_strtod_l+0x56e>
 8008188:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <_strtod_l+0x5a4>)
 800818a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800818e:	4650      	mov	r0, sl
 8008190:	4659      	mov	r1, fp
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f7f8 fb59 	bl	800084c <__aeabi_ddiv>
 800819a:	4682      	mov	sl, r0
 800819c:	468b      	mov	fp, r1
 800819e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80081a2:	d0d8      	beq.n	8008156 <_strtod_l+0x526>
 80081a4:	f1b8 0f1f 	cmp.w	r8, #31
 80081a8:	dd1e      	ble.n	80081e8 <_strtod_l+0x5b8>
 80081aa:	2500      	movs	r5, #0
 80081ac:	462e      	mov	r6, r5
 80081ae:	9509      	str	r5, [sp, #36]	; 0x24
 80081b0:	9507      	str	r5, [sp, #28]
 80081b2:	2322      	movs	r3, #34	; 0x22
 80081b4:	f04f 0a00 	mov.w	sl, #0
 80081b8:	f04f 0b00 	mov.w	fp, #0
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	e789      	b.n	80080d4 <_strtod_l+0x4a4>
 80081c0:	0800e47d 	.word	0x0800e47d
 80081c4:	0800e4c0 	.word	0x0800e4c0
 80081c8:	0800e475 	.word	0x0800e475
 80081cc:	0800e604 	.word	0x0800e604
 80081d0:	0800e8c0 	.word	0x0800e8c0
 80081d4:	0800e7a0 	.word	0x0800e7a0
 80081d8:	0800e778 	.word	0x0800e778
 80081dc:	7ff00000 	.word	0x7ff00000
 80081e0:	7ca00000 	.word	0x7ca00000
 80081e4:	7fefffff 	.word	0x7fefffff
 80081e8:	f018 0310 	ands.w	r3, r8, #16
 80081ec:	bf18      	it	ne
 80081ee:	236a      	movne	r3, #106	; 0x6a
 80081f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80085a8 <_strtod_l+0x978>
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	4650      	mov	r0, sl
 80081f8:	4659      	mov	r1, fp
 80081fa:	2300      	movs	r3, #0
 80081fc:	f018 0f01 	tst.w	r8, #1
 8008200:	d004      	beq.n	800820c <_strtod_l+0x5dc>
 8008202:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008206:	f7f8 f9f7 	bl	80005f8 <__aeabi_dmul>
 800820a:	2301      	movs	r3, #1
 800820c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008210:	f109 0908 	add.w	r9, r9, #8
 8008214:	d1f2      	bne.n	80081fc <_strtod_l+0x5cc>
 8008216:	b10b      	cbz	r3, 800821c <_strtod_l+0x5ec>
 8008218:	4682      	mov	sl, r0
 800821a:	468b      	mov	fp, r1
 800821c:	9b04      	ldr	r3, [sp, #16]
 800821e:	b1bb      	cbz	r3, 8008250 <_strtod_l+0x620>
 8008220:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008224:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008228:	2b00      	cmp	r3, #0
 800822a:	4659      	mov	r1, fp
 800822c:	dd10      	ble.n	8008250 <_strtod_l+0x620>
 800822e:	2b1f      	cmp	r3, #31
 8008230:	f340 8128 	ble.w	8008484 <_strtod_l+0x854>
 8008234:	2b34      	cmp	r3, #52	; 0x34
 8008236:	bfde      	ittt	le
 8008238:	3b20      	suble	r3, #32
 800823a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800823e:	fa02 f303 	lslle.w	r3, r2, r3
 8008242:	f04f 0a00 	mov.w	sl, #0
 8008246:	bfcc      	ite	gt
 8008248:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800824c:	ea03 0b01 	andle.w	fp, r3, r1
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	4650      	mov	r0, sl
 8008256:	4659      	mov	r1, fp
 8008258:	f7f8 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800825c:	2800      	cmp	r0, #0
 800825e:	d1a4      	bne.n	80081aa <_strtod_l+0x57a>
 8008260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008266:	462b      	mov	r3, r5
 8008268:	463a      	mov	r2, r7
 800826a:	4620      	mov	r0, r4
 800826c:	f001 fe2e 	bl	8009ecc <__s2b>
 8008270:	9009      	str	r0, [sp, #36]	; 0x24
 8008272:	2800      	cmp	r0, #0
 8008274:	f43f af24 	beq.w	80080c0 <_strtod_l+0x490>
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	1b9e      	subs	r6, r3, r6
 800827c:	9b08      	ldr	r3, [sp, #32]
 800827e:	2b00      	cmp	r3, #0
 8008280:	bfb4      	ite	lt
 8008282:	4633      	movlt	r3, r6
 8008284:	2300      	movge	r3, #0
 8008286:	9310      	str	r3, [sp, #64]	; 0x40
 8008288:	9b08      	ldr	r3, [sp, #32]
 800828a:	2500      	movs	r5, #0
 800828c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008290:	9318      	str	r3, [sp, #96]	; 0x60
 8008292:	462e      	mov	r6, r5
 8008294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008296:	4620      	mov	r0, r4
 8008298:	6859      	ldr	r1, [r3, #4]
 800829a:	f001 fd6b 	bl	8009d74 <_Balloc>
 800829e:	9007      	str	r0, [sp, #28]
 80082a0:	2800      	cmp	r0, #0
 80082a2:	f43f af11 	beq.w	80080c8 <_strtod_l+0x498>
 80082a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	3202      	adds	r2, #2
 80082ac:	f103 010c 	add.w	r1, r3, #12
 80082b0:	0092      	lsls	r2, r2, #2
 80082b2:	300c      	adds	r0, #12
 80082b4:	f7fe fd2e 	bl	8006d14 <memcpy>
 80082b8:	ec4b ab10 	vmov	d0, sl, fp
 80082bc:	aa20      	add	r2, sp, #128	; 0x80
 80082be:	a91f      	add	r1, sp, #124	; 0x7c
 80082c0:	4620      	mov	r0, r4
 80082c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80082c6:	f002 f93d 	bl	800a544 <__d2b>
 80082ca:	901e      	str	r0, [sp, #120]	; 0x78
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f43f aefb 	beq.w	80080c8 <_strtod_l+0x498>
 80082d2:	2101      	movs	r1, #1
 80082d4:	4620      	mov	r0, r4
 80082d6:	f001 fe93 	bl	800a000 <__i2b>
 80082da:	4606      	mov	r6, r0
 80082dc:	2800      	cmp	r0, #0
 80082de:	f43f aef3 	beq.w	80080c8 <_strtod_l+0x498>
 80082e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082e4:	9904      	ldr	r1, [sp, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfab      	itete	ge
 80082ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80082ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80082ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80082f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80082f4:	bfac      	ite	ge
 80082f6:	eb03 0902 	addge.w	r9, r3, r2
 80082fa:	1ad7      	sublt	r7, r2, r3
 80082fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082fe:	eba3 0801 	sub.w	r8, r3, r1
 8008302:	4490      	add	r8, r2
 8008304:	4ba3      	ldr	r3, [pc, #652]	; (8008594 <_strtod_l+0x964>)
 8008306:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800830a:	4598      	cmp	r8, r3
 800830c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008310:	f280 80cc 	bge.w	80084ac <_strtod_l+0x87c>
 8008314:	eba3 0308 	sub.w	r3, r3, r8
 8008318:	2b1f      	cmp	r3, #31
 800831a:	eba2 0203 	sub.w	r2, r2, r3
 800831e:	f04f 0101 	mov.w	r1, #1
 8008322:	f300 80b6 	bgt.w	8008492 <_strtod_l+0x862>
 8008326:	fa01 f303 	lsl.w	r3, r1, r3
 800832a:	9311      	str	r3, [sp, #68]	; 0x44
 800832c:	2300      	movs	r3, #0
 800832e:	930c      	str	r3, [sp, #48]	; 0x30
 8008330:	eb09 0802 	add.w	r8, r9, r2
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	45c1      	cmp	r9, r8
 8008338:	4417      	add	r7, r2
 800833a:	441f      	add	r7, r3
 800833c:	464b      	mov	r3, r9
 800833e:	bfa8      	it	ge
 8008340:	4643      	movge	r3, r8
 8008342:	42bb      	cmp	r3, r7
 8008344:	bfa8      	it	ge
 8008346:	463b      	movge	r3, r7
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfc2      	ittt	gt
 800834c:	eba8 0803 	subgt.w	r8, r8, r3
 8008350:	1aff      	subgt	r7, r7, r3
 8008352:	eba9 0903 	subgt.w	r9, r9, r3
 8008356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008358:	2b00      	cmp	r3, #0
 800835a:	dd17      	ble.n	800838c <_strtod_l+0x75c>
 800835c:	4631      	mov	r1, r6
 800835e:	461a      	mov	r2, r3
 8008360:	4620      	mov	r0, r4
 8008362:	f001 ff09 	bl	800a178 <__pow5mult>
 8008366:	4606      	mov	r6, r0
 8008368:	2800      	cmp	r0, #0
 800836a:	f43f aead 	beq.w	80080c8 <_strtod_l+0x498>
 800836e:	4601      	mov	r1, r0
 8008370:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008372:	4620      	mov	r0, r4
 8008374:	f001 fe5a 	bl	800a02c <__multiply>
 8008378:	900f      	str	r0, [sp, #60]	; 0x3c
 800837a:	2800      	cmp	r0, #0
 800837c:	f43f aea4 	beq.w	80080c8 <_strtod_l+0x498>
 8008380:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008382:	4620      	mov	r0, r4
 8008384:	f001 fd36 	bl	8009df4 <_Bfree>
 8008388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800838a:	931e      	str	r3, [sp, #120]	; 0x78
 800838c:	f1b8 0f00 	cmp.w	r8, #0
 8008390:	f300 8091 	bgt.w	80084b6 <_strtod_l+0x886>
 8008394:	9b08      	ldr	r3, [sp, #32]
 8008396:	2b00      	cmp	r3, #0
 8008398:	dd08      	ble.n	80083ac <_strtod_l+0x77c>
 800839a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800839c:	9907      	ldr	r1, [sp, #28]
 800839e:	4620      	mov	r0, r4
 80083a0:	f001 feea 	bl	800a178 <__pow5mult>
 80083a4:	9007      	str	r0, [sp, #28]
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f43f ae8e 	beq.w	80080c8 <_strtod_l+0x498>
 80083ac:	2f00      	cmp	r7, #0
 80083ae:	dd08      	ble.n	80083c2 <_strtod_l+0x792>
 80083b0:	9907      	ldr	r1, [sp, #28]
 80083b2:	463a      	mov	r2, r7
 80083b4:	4620      	mov	r0, r4
 80083b6:	f001 ff39 	bl	800a22c <__lshift>
 80083ba:	9007      	str	r0, [sp, #28]
 80083bc:	2800      	cmp	r0, #0
 80083be:	f43f ae83 	beq.w	80080c8 <_strtod_l+0x498>
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	dd08      	ble.n	80083da <_strtod_l+0x7aa>
 80083c8:	4631      	mov	r1, r6
 80083ca:	464a      	mov	r2, r9
 80083cc:	4620      	mov	r0, r4
 80083ce:	f001 ff2d 	bl	800a22c <__lshift>
 80083d2:	4606      	mov	r6, r0
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f43f ae77 	beq.w	80080c8 <_strtod_l+0x498>
 80083da:	9a07      	ldr	r2, [sp, #28]
 80083dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80083de:	4620      	mov	r0, r4
 80083e0:	f001 ffac 	bl	800a33c <__mdiff>
 80083e4:	4605      	mov	r5, r0
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f43f ae6e 	beq.w	80080c8 <_strtod_l+0x498>
 80083ec:	68c3      	ldr	r3, [r0, #12]
 80083ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80083f0:	2300      	movs	r3, #0
 80083f2:	60c3      	str	r3, [r0, #12]
 80083f4:	4631      	mov	r1, r6
 80083f6:	f001 ff85 	bl	800a304 <__mcmp>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	da65      	bge.n	80084ca <_strtod_l+0x89a>
 80083fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008400:	ea53 030a 	orrs.w	r3, r3, sl
 8008404:	f040 8087 	bne.w	8008516 <_strtod_l+0x8e6>
 8008408:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800840c:	2b00      	cmp	r3, #0
 800840e:	f040 8082 	bne.w	8008516 <_strtod_l+0x8e6>
 8008412:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008416:	0d1b      	lsrs	r3, r3, #20
 8008418:	051b      	lsls	r3, r3, #20
 800841a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800841e:	d97a      	bls.n	8008516 <_strtod_l+0x8e6>
 8008420:	696b      	ldr	r3, [r5, #20]
 8008422:	b913      	cbnz	r3, 800842a <_strtod_l+0x7fa>
 8008424:	692b      	ldr	r3, [r5, #16]
 8008426:	2b01      	cmp	r3, #1
 8008428:	dd75      	ble.n	8008516 <_strtod_l+0x8e6>
 800842a:	4629      	mov	r1, r5
 800842c:	2201      	movs	r2, #1
 800842e:	4620      	mov	r0, r4
 8008430:	f001 fefc 	bl	800a22c <__lshift>
 8008434:	4631      	mov	r1, r6
 8008436:	4605      	mov	r5, r0
 8008438:	f001 ff64 	bl	800a304 <__mcmp>
 800843c:	2800      	cmp	r0, #0
 800843e:	dd6a      	ble.n	8008516 <_strtod_l+0x8e6>
 8008440:	9904      	ldr	r1, [sp, #16]
 8008442:	4a55      	ldr	r2, [pc, #340]	; (8008598 <_strtod_l+0x968>)
 8008444:	465b      	mov	r3, fp
 8008446:	2900      	cmp	r1, #0
 8008448:	f000 8085 	beq.w	8008556 <_strtod_l+0x926>
 800844c:	ea02 010b 	and.w	r1, r2, fp
 8008450:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008454:	dc7f      	bgt.n	8008556 <_strtod_l+0x926>
 8008456:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800845a:	f77f aeaa 	ble.w	80081b2 <_strtod_l+0x582>
 800845e:	4a4f      	ldr	r2, [pc, #316]	; (800859c <_strtod_l+0x96c>)
 8008460:	2300      	movs	r3, #0
 8008462:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008466:	4650      	mov	r0, sl
 8008468:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800846c:	4659      	mov	r1, fp
 800846e:	f7f8 f8c3 	bl	80005f8 <__aeabi_dmul>
 8008472:	460b      	mov	r3, r1
 8008474:	4303      	orrs	r3, r0
 8008476:	bf08      	it	eq
 8008478:	2322      	moveq	r3, #34	; 0x22
 800847a:	4682      	mov	sl, r0
 800847c:	468b      	mov	fp, r1
 800847e:	bf08      	it	eq
 8008480:	6023      	streq	r3, [r4, #0]
 8008482:	e62b      	b.n	80080dc <_strtod_l+0x4ac>
 8008484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008488:	fa02 f303 	lsl.w	r3, r2, r3
 800848c:	ea03 0a0a 	and.w	sl, r3, sl
 8008490:	e6de      	b.n	8008250 <_strtod_l+0x620>
 8008492:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008496:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800849a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800849e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80084a2:	fa01 f308 	lsl.w	r3, r1, r8
 80084a6:	930c      	str	r3, [sp, #48]	; 0x30
 80084a8:	9111      	str	r1, [sp, #68]	; 0x44
 80084aa:	e741      	b.n	8008330 <_strtod_l+0x700>
 80084ac:	2300      	movs	r3, #0
 80084ae:	930c      	str	r3, [sp, #48]	; 0x30
 80084b0:	2301      	movs	r3, #1
 80084b2:	9311      	str	r3, [sp, #68]	; 0x44
 80084b4:	e73c      	b.n	8008330 <_strtod_l+0x700>
 80084b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80084b8:	4642      	mov	r2, r8
 80084ba:	4620      	mov	r0, r4
 80084bc:	f001 feb6 	bl	800a22c <__lshift>
 80084c0:	901e      	str	r0, [sp, #120]	; 0x78
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f47f af66 	bne.w	8008394 <_strtod_l+0x764>
 80084c8:	e5fe      	b.n	80080c8 <_strtod_l+0x498>
 80084ca:	465f      	mov	r7, fp
 80084cc:	d16e      	bne.n	80085ac <_strtod_l+0x97c>
 80084ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084d4:	b342      	cbz	r2, 8008528 <_strtod_l+0x8f8>
 80084d6:	4a32      	ldr	r2, [pc, #200]	; (80085a0 <_strtod_l+0x970>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d128      	bne.n	800852e <_strtod_l+0x8fe>
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	4650      	mov	r0, sl
 80084e0:	b1eb      	cbz	r3, 800851e <_strtod_l+0x8ee>
 80084e2:	4a2d      	ldr	r2, [pc, #180]	; (8008598 <_strtod_l+0x968>)
 80084e4:	403a      	ands	r2, r7
 80084e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80084ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80084ee:	d819      	bhi.n	8008524 <_strtod_l+0x8f4>
 80084f0:	0d12      	lsrs	r2, r2, #20
 80084f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80084f6:	fa01 f303 	lsl.w	r3, r1, r3
 80084fa:	4298      	cmp	r0, r3
 80084fc:	d117      	bne.n	800852e <_strtod_l+0x8fe>
 80084fe:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <_strtod_l+0x974>)
 8008500:	429f      	cmp	r7, r3
 8008502:	d102      	bne.n	800850a <_strtod_l+0x8da>
 8008504:	3001      	adds	r0, #1
 8008506:	f43f addf 	beq.w	80080c8 <_strtod_l+0x498>
 800850a:	4b23      	ldr	r3, [pc, #140]	; (8008598 <_strtod_l+0x968>)
 800850c:	403b      	ands	r3, r7
 800850e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008512:	f04f 0a00 	mov.w	sl, #0
 8008516:	9b04      	ldr	r3, [sp, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1a0      	bne.n	800845e <_strtod_l+0x82e>
 800851c:	e5de      	b.n	80080dc <_strtod_l+0x4ac>
 800851e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008522:	e7ea      	b.n	80084fa <_strtod_l+0x8ca>
 8008524:	460b      	mov	r3, r1
 8008526:	e7e8      	b.n	80084fa <_strtod_l+0x8ca>
 8008528:	ea53 030a 	orrs.w	r3, r3, sl
 800852c:	d088      	beq.n	8008440 <_strtod_l+0x810>
 800852e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008530:	b1db      	cbz	r3, 800856a <_strtod_l+0x93a>
 8008532:	423b      	tst	r3, r7
 8008534:	d0ef      	beq.n	8008516 <_strtod_l+0x8e6>
 8008536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008538:	9a04      	ldr	r2, [sp, #16]
 800853a:	4650      	mov	r0, sl
 800853c:	4659      	mov	r1, fp
 800853e:	b1c3      	cbz	r3, 8008572 <_strtod_l+0x942>
 8008540:	f7ff fb58 	bl	8007bf4 <sulp>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800854c:	f7f7 fe9e 	bl	800028c <__adddf3>
 8008550:	4682      	mov	sl, r0
 8008552:	468b      	mov	fp, r1
 8008554:	e7df      	b.n	8008516 <_strtod_l+0x8e6>
 8008556:	4013      	ands	r3, r2
 8008558:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800855c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008560:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008564:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008568:	e7d5      	b.n	8008516 <_strtod_l+0x8e6>
 800856a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800856c:	ea13 0f0a 	tst.w	r3, sl
 8008570:	e7e0      	b.n	8008534 <_strtod_l+0x904>
 8008572:	f7ff fb3f 	bl	8007bf4 <sulp>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800857e:	f7f7 fe83 	bl	8000288 <__aeabi_dsub>
 8008582:	2200      	movs	r2, #0
 8008584:	2300      	movs	r3, #0
 8008586:	4682      	mov	sl, r0
 8008588:	468b      	mov	fp, r1
 800858a:	f7f8 fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800858e:	2800      	cmp	r0, #0
 8008590:	d0c1      	beq.n	8008516 <_strtod_l+0x8e6>
 8008592:	e60e      	b.n	80081b2 <_strtod_l+0x582>
 8008594:	fffffc02 	.word	0xfffffc02
 8008598:	7ff00000 	.word	0x7ff00000
 800859c:	39500000 	.word	0x39500000
 80085a0:	000fffff 	.word	0x000fffff
 80085a4:	7fefffff 	.word	0x7fefffff
 80085a8:	0800e4d8 	.word	0x0800e4d8
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	f002 f824 	bl	800a5fc <__ratio>
 80085b4:	ec59 8b10 	vmov	r8, r9, d0
 80085b8:	ee10 0a10 	vmov	r0, s0
 80085bc:	2200      	movs	r2, #0
 80085be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085c2:	4649      	mov	r1, r9
 80085c4:	f7f8 fa94 	bl	8000af0 <__aeabi_dcmple>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d07c      	beq.n	80086c6 <_strtod_l+0xa96>
 80085cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d04c      	beq.n	800866c <_strtod_l+0xa3c>
 80085d2:	4b95      	ldr	r3, [pc, #596]	; (8008828 <_strtod_l+0xbf8>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80085da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008828 <_strtod_l+0xbf8>
 80085de:	f04f 0800 	mov.w	r8, #0
 80085e2:	4b92      	ldr	r3, [pc, #584]	; (800882c <_strtod_l+0xbfc>)
 80085e4:	403b      	ands	r3, r7
 80085e6:	9311      	str	r3, [sp, #68]	; 0x44
 80085e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085ea:	4b91      	ldr	r3, [pc, #580]	; (8008830 <_strtod_l+0xc00>)
 80085ec:	429a      	cmp	r2, r3
 80085ee:	f040 80b2 	bne.w	8008756 <_strtod_l+0xb26>
 80085f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80085fe:	ec4b ab10 	vmov	d0, sl, fp
 8008602:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008606:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800860a:	f001 ff1f 	bl	800a44c <__ulp>
 800860e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008612:	ec53 2b10 	vmov	r2, r3, d0
 8008616:	f7f7 ffef 	bl	80005f8 <__aeabi_dmul>
 800861a:	4652      	mov	r2, sl
 800861c:	465b      	mov	r3, fp
 800861e:	f7f7 fe35 	bl	800028c <__adddf3>
 8008622:	460b      	mov	r3, r1
 8008624:	4981      	ldr	r1, [pc, #516]	; (800882c <_strtod_l+0xbfc>)
 8008626:	4a83      	ldr	r2, [pc, #524]	; (8008834 <_strtod_l+0xc04>)
 8008628:	4019      	ands	r1, r3
 800862a:	4291      	cmp	r1, r2
 800862c:	4682      	mov	sl, r0
 800862e:	d95e      	bls.n	80086ee <_strtod_l+0xabe>
 8008630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008632:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008636:	4293      	cmp	r3, r2
 8008638:	d103      	bne.n	8008642 <_strtod_l+0xa12>
 800863a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800863c:	3301      	adds	r3, #1
 800863e:	f43f ad43 	beq.w	80080c8 <_strtod_l+0x498>
 8008642:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008840 <_strtod_l+0xc10>
 8008646:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800864a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800864c:	4620      	mov	r0, r4
 800864e:	f001 fbd1 	bl	8009df4 <_Bfree>
 8008652:	9907      	ldr	r1, [sp, #28]
 8008654:	4620      	mov	r0, r4
 8008656:	f001 fbcd 	bl	8009df4 <_Bfree>
 800865a:	4631      	mov	r1, r6
 800865c:	4620      	mov	r0, r4
 800865e:	f001 fbc9 	bl	8009df4 <_Bfree>
 8008662:	4629      	mov	r1, r5
 8008664:	4620      	mov	r0, r4
 8008666:	f001 fbc5 	bl	8009df4 <_Bfree>
 800866a:	e613      	b.n	8008294 <_strtod_l+0x664>
 800866c:	f1ba 0f00 	cmp.w	sl, #0
 8008670:	d11b      	bne.n	80086aa <_strtod_l+0xa7a>
 8008672:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008676:	b9f3      	cbnz	r3, 80086b6 <_strtod_l+0xa86>
 8008678:	4b6b      	ldr	r3, [pc, #428]	; (8008828 <_strtod_l+0xbf8>)
 800867a:	2200      	movs	r2, #0
 800867c:	4640      	mov	r0, r8
 800867e:	4649      	mov	r1, r9
 8008680:	f7f8 fa2c 	bl	8000adc <__aeabi_dcmplt>
 8008684:	b9d0      	cbnz	r0, 80086bc <_strtod_l+0xa8c>
 8008686:	4640      	mov	r0, r8
 8008688:	4649      	mov	r1, r9
 800868a:	4b6b      	ldr	r3, [pc, #428]	; (8008838 <_strtod_l+0xc08>)
 800868c:	2200      	movs	r2, #0
 800868e:	f7f7 ffb3 	bl	80005f8 <__aeabi_dmul>
 8008692:	4680      	mov	r8, r0
 8008694:	4689      	mov	r9, r1
 8008696:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800869a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800869e:	931b      	str	r3, [sp, #108]	; 0x6c
 80086a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80086a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80086a8:	e79b      	b.n	80085e2 <_strtod_l+0x9b2>
 80086aa:	f1ba 0f01 	cmp.w	sl, #1
 80086ae:	d102      	bne.n	80086b6 <_strtod_l+0xa86>
 80086b0:	2f00      	cmp	r7, #0
 80086b2:	f43f ad7e 	beq.w	80081b2 <_strtod_l+0x582>
 80086b6:	4b61      	ldr	r3, [pc, #388]	; (800883c <_strtod_l+0xc0c>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	e78c      	b.n	80085d6 <_strtod_l+0x9a6>
 80086bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008838 <_strtod_l+0xc08>
 80086c0:	f04f 0800 	mov.w	r8, #0
 80086c4:	e7e7      	b.n	8008696 <_strtod_l+0xa66>
 80086c6:	4b5c      	ldr	r3, [pc, #368]	; (8008838 <_strtod_l+0xc08>)
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	2200      	movs	r2, #0
 80086ce:	f7f7 ff93 	bl	80005f8 <__aeabi_dmul>
 80086d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d4:	4680      	mov	r8, r0
 80086d6:	4689      	mov	r9, r1
 80086d8:	b933      	cbnz	r3, 80086e8 <_strtod_l+0xab8>
 80086da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086de:	9012      	str	r0, [sp, #72]	; 0x48
 80086e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80086e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80086e6:	e7dd      	b.n	80086a4 <_strtod_l+0xa74>
 80086e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80086ec:	e7f9      	b.n	80086e2 <_strtod_l+0xab2>
 80086ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1a8      	bne.n	800864a <_strtod_l+0xa1a>
 80086f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086fe:	0d1b      	lsrs	r3, r3, #20
 8008700:	051b      	lsls	r3, r3, #20
 8008702:	429a      	cmp	r2, r3
 8008704:	d1a1      	bne.n	800864a <_strtod_l+0xa1a>
 8008706:	4640      	mov	r0, r8
 8008708:	4649      	mov	r1, r9
 800870a:	f7f8 fad5 	bl	8000cb8 <__aeabi_d2lz>
 800870e:	f7f7 ff45 	bl	800059c <__aeabi_l2d>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4640      	mov	r0, r8
 8008718:	4649      	mov	r1, r9
 800871a:	f7f7 fdb5 	bl	8000288 <__aeabi_dsub>
 800871e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008724:	ea43 030a 	orr.w	r3, r3, sl
 8008728:	4313      	orrs	r3, r2
 800872a:	4680      	mov	r8, r0
 800872c:	4689      	mov	r9, r1
 800872e:	d053      	beq.n	80087d8 <_strtod_l+0xba8>
 8008730:	a335      	add	r3, pc, #212	; (adr r3, 8008808 <_strtod_l+0xbd8>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f7f8 f9d1 	bl	8000adc <__aeabi_dcmplt>
 800873a:	2800      	cmp	r0, #0
 800873c:	f47f acce 	bne.w	80080dc <_strtod_l+0x4ac>
 8008740:	a333      	add	r3, pc, #204	; (adr r3, 8008810 <_strtod_l+0xbe0>)
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	f7f8 f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f af7b 	beq.w	800864a <_strtod_l+0xa1a>
 8008754:	e4c2      	b.n	80080dc <_strtod_l+0x4ac>
 8008756:	9b04      	ldr	r3, [sp, #16]
 8008758:	b333      	cbz	r3, 80087a8 <_strtod_l+0xb78>
 800875a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800875c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008760:	d822      	bhi.n	80087a8 <_strtod_l+0xb78>
 8008762:	a32d      	add	r3, pc, #180	; (adr r3, 8008818 <_strtod_l+0xbe8>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f8 f9c0 	bl	8000af0 <__aeabi_dcmple>
 8008770:	b1a0      	cbz	r0, 800879c <_strtod_l+0xb6c>
 8008772:	4649      	mov	r1, r9
 8008774:	4640      	mov	r0, r8
 8008776:	f7f8 fa17 	bl	8000ba8 <__aeabi_d2uiz>
 800877a:	2801      	cmp	r0, #1
 800877c:	bf38      	it	cc
 800877e:	2001      	movcc	r0, #1
 8008780:	f7f7 fec0 	bl	8000504 <__aeabi_ui2d>
 8008784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008786:	4680      	mov	r8, r0
 8008788:	4689      	mov	r9, r1
 800878a:	bb13      	cbnz	r3, 80087d2 <_strtod_l+0xba2>
 800878c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008790:	9014      	str	r0, [sp, #80]	; 0x50
 8008792:	9315      	str	r3, [sp, #84]	; 0x54
 8008794:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008798:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800879c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800879e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	930d      	str	r3, [sp, #52]	; 0x34
 80087a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80087b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087b4:	f001 fe4a 	bl	800a44c <__ulp>
 80087b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087bc:	ec53 2b10 	vmov	r2, r3, d0
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087c8:	f7f7 fd60 	bl	800028c <__adddf3>
 80087cc:	4682      	mov	sl, r0
 80087ce:	468b      	mov	fp, r1
 80087d0:	e78f      	b.n	80086f2 <_strtod_l+0xac2>
 80087d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80087d6:	e7dd      	b.n	8008794 <_strtod_l+0xb64>
 80087d8:	a311      	add	r3, pc, #68	; (adr r3, 8008820 <_strtod_l+0xbf0>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f8 f97d 	bl	8000adc <__aeabi_dcmplt>
 80087e2:	e7b4      	b.n	800874e <_strtod_l+0xb1e>
 80087e4:	2300      	movs	r3, #0
 80087e6:	930e      	str	r3, [sp, #56]	; 0x38
 80087e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80087ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	f7ff ba65 	b.w	8007cbc <_strtod_l+0x8c>
 80087f2:	2b65      	cmp	r3, #101	; 0x65
 80087f4:	f43f ab5d 	beq.w	8007eb2 <_strtod_l+0x282>
 80087f8:	2b45      	cmp	r3, #69	; 0x45
 80087fa:	f43f ab5a 	beq.w	8007eb2 <_strtod_l+0x282>
 80087fe:	2201      	movs	r2, #1
 8008800:	f7ff bb92 	b.w	8007f28 <_strtod_l+0x2f8>
 8008804:	f3af 8000 	nop.w
 8008808:	94a03595 	.word	0x94a03595
 800880c:	3fdfffff 	.word	0x3fdfffff
 8008810:	35afe535 	.word	0x35afe535
 8008814:	3fe00000 	.word	0x3fe00000
 8008818:	ffc00000 	.word	0xffc00000
 800881c:	41dfffff 	.word	0x41dfffff
 8008820:	94a03595 	.word	0x94a03595
 8008824:	3fcfffff 	.word	0x3fcfffff
 8008828:	3ff00000 	.word	0x3ff00000
 800882c:	7ff00000 	.word	0x7ff00000
 8008830:	7fe00000 	.word	0x7fe00000
 8008834:	7c9fffff 	.word	0x7c9fffff
 8008838:	3fe00000 	.word	0x3fe00000
 800883c:	bff00000 	.word	0xbff00000
 8008840:	7fefffff 	.word	0x7fefffff

08008844 <_strtod_r>:
 8008844:	4b01      	ldr	r3, [pc, #4]	; (800884c <_strtod_r+0x8>)
 8008846:	f7ff b9f3 	b.w	8007c30 <_strtod_l>
 800884a:	bf00      	nop
 800884c:	20000478 	.word	0x20000478

08008850 <_strtol_l.isra.0>:
 8008850:	2b01      	cmp	r3, #1
 8008852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008856:	d001      	beq.n	800885c <_strtol_l.isra.0+0xc>
 8008858:	2b24      	cmp	r3, #36	; 0x24
 800885a:	d906      	bls.n	800886a <_strtol_l.isra.0+0x1a>
 800885c:	f7fe fa28 	bl	8006cb0 <__errno>
 8008860:	2316      	movs	r3, #22
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	2000      	movs	r0, #0
 8008866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886a:	4f3a      	ldr	r7, [pc, #232]	; (8008954 <_strtol_l.isra.0+0x104>)
 800886c:	468e      	mov	lr, r1
 800886e:	4676      	mov	r6, lr
 8008870:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008874:	5de5      	ldrb	r5, [r4, r7]
 8008876:	f015 0508 	ands.w	r5, r5, #8
 800887a:	d1f8      	bne.n	800886e <_strtol_l.isra.0+0x1e>
 800887c:	2c2d      	cmp	r4, #45	; 0x2d
 800887e:	d134      	bne.n	80088ea <_strtol_l.isra.0+0x9a>
 8008880:	f89e 4000 	ldrb.w	r4, [lr]
 8008884:	f04f 0801 	mov.w	r8, #1
 8008888:	f106 0e02 	add.w	lr, r6, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d05c      	beq.n	800894a <_strtol_l.isra.0+0xfa>
 8008890:	2b10      	cmp	r3, #16
 8008892:	d10c      	bne.n	80088ae <_strtol_l.isra.0+0x5e>
 8008894:	2c30      	cmp	r4, #48	; 0x30
 8008896:	d10a      	bne.n	80088ae <_strtol_l.isra.0+0x5e>
 8008898:	f89e 4000 	ldrb.w	r4, [lr]
 800889c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80088a0:	2c58      	cmp	r4, #88	; 0x58
 80088a2:	d14d      	bne.n	8008940 <_strtol_l.isra.0+0xf0>
 80088a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80088a8:	2310      	movs	r3, #16
 80088aa:	f10e 0e02 	add.w	lr, lr, #2
 80088ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80088b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80088b6:	2600      	movs	r6, #0
 80088b8:	fbbc f9f3 	udiv	r9, ip, r3
 80088bc:	4635      	mov	r5, r6
 80088be:	fb03 ca19 	mls	sl, r3, r9, ip
 80088c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80088c6:	2f09      	cmp	r7, #9
 80088c8:	d818      	bhi.n	80088fc <_strtol_l.isra.0+0xac>
 80088ca:	463c      	mov	r4, r7
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	dd24      	ble.n	800891a <_strtol_l.isra.0+0xca>
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	db1f      	blt.n	8008914 <_strtol_l.isra.0+0xc4>
 80088d4:	45a9      	cmp	r9, r5
 80088d6:	d31d      	bcc.n	8008914 <_strtol_l.isra.0+0xc4>
 80088d8:	d101      	bne.n	80088de <_strtol_l.isra.0+0x8e>
 80088da:	45a2      	cmp	sl, r4
 80088dc:	db1a      	blt.n	8008914 <_strtol_l.isra.0+0xc4>
 80088de:	fb05 4503 	mla	r5, r5, r3, r4
 80088e2:	2601      	movs	r6, #1
 80088e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80088e8:	e7eb      	b.n	80088c2 <_strtol_l.isra.0+0x72>
 80088ea:	2c2b      	cmp	r4, #43	; 0x2b
 80088ec:	bf08      	it	eq
 80088ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80088f2:	46a8      	mov	r8, r5
 80088f4:	bf08      	it	eq
 80088f6:	f106 0e02 	addeq.w	lr, r6, #2
 80088fa:	e7c7      	b.n	800888c <_strtol_l.isra.0+0x3c>
 80088fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008900:	2f19      	cmp	r7, #25
 8008902:	d801      	bhi.n	8008908 <_strtol_l.isra.0+0xb8>
 8008904:	3c37      	subs	r4, #55	; 0x37
 8008906:	e7e1      	b.n	80088cc <_strtol_l.isra.0+0x7c>
 8008908:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800890c:	2f19      	cmp	r7, #25
 800890e:	d804      	bhi.n	800891a <_strtol_l.isra.0+0xca>
 8008910:	3c57      	subs	r4, #87	; 0x57
 8008912:	e7db      	b.n	80088cc <_strtol_l.isra.0+0x7c>
 8008914:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008918:	e7e4      	b.n	80088e4 <_strtol_l.isra.0+0x94>
 800891a:	2e00      	cmp	r6, #0
 800891c:	da05      	bge.n	800892a <_strtol_l.isra.0+0xda>
 800891e:	2322      	movs	r3, #34	; 0x22
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	4665      	mov	r5, ip
 8008924:	b942      	cbnz	r2, 8008938 <_strtol_l.isra.0+0xe8>
 8008926:	4628      	mov	r0, r5
 8008928:	e79d      	b.n	8008866 <_strtol_l.isra.0+0x16>
 800892a:	f1b8 0f00 	cmp.w	r8, #0
 800892e:	d000      	beq.n	8008932 <_strtol_l.isra.0+0xe2>
 8008930:	426d      	negs	r5, r5
 8008932:	2a00      	cmp	r2, #0
 8008934:	d0f7      	beq.n	8008926 <_strtol_l.isra.0+0xd6>
 8008936:	b10e      	cbz	r6, 800893c <_strtol_l.isra.0+0xec>
 8008938:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800893c:	6011      	str	r1, [r2, #0]
 800893e:	e7f2      	b.n	8008926 <_strtol_l.isra.0+0xd6>
 8008940:	2430      	movs	r4, #48	; 0x30
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1b3      	bne.n	80088ae <_strtol_l.isra.0+0x5e>
 8008946:	2308      	movs	r3, #8
 8008948:	e7b1      	b.n	80088ae <_strtol_l.isra.0+0x5e>
 800894a:	2c30      	cmp	r4, #48	; 0x30
 800894c:	d0a4      	beq.n	8008898 <_strtol_l.isra.0+0x48>
 800894e:	230a      	movs	r3, #10
 8008950:	e7ad      	b.n	80088ae <_strtol_l.isra.0+0x5e>
 8008952:	bf00      	nop
 8008954:	0800e501 	.word	0x0800e501

08008958 <_strtol_r>:
 8008958:	f7ff bf7a 	b.w	8008850 <_strtol_l.isra.0>

0800895c <quorem>:
 800895c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	6903      	ldr	r3, [r0, #16]
 8008962:	690c      	ldr	r4, [r1, #16]
 8008964:	42a3      	cmp	r3, r4
 8008966:	4607      	mov	r7, r0
 8008968:	f2c0 8081 	blt.w	8008a6e <quorem+0x112>
 800896c:	3c01      	subs	r4, #1
 800896e:	f101 0814 	add.w	r8, r1, #20
 8008972:	f100 0514 	add.w	r5, r0, #20
 8008976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008980:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008984:	3301      	adds	r3, #1
 8008986:	429a      	cmp	r2, r3
 8008988:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800898c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008990:	fbb2 f6f3 	udiv	r6, r2, r3
 8008994:	d331      	bcc.n	80089fa <quorem+0x9e>
 8008996:	f04f 0e00 	mov.w	lr, #0
 800899a:	4640      	mov	r0, r8
 800899c:	46ac      	mov	ip, r5
 800899e:	46f2      	mov	sl, lr
 80089a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80089a4:	b293      	uxth	r3, r2
 80089a6:	fb06 e303 	mla	r3, r6, r3, lr
 80089aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	ebaa 0303 	sub.w	r3, sl, r3
 80089b4:	0c12      	lsrs	r2, r2, #16
 80089b6:	f8dc a000 	ldr.w	sl, [ip]
 80089ba:	fb06 e202 	mla	r2, r6, r2, lr
 80089be:	fa13 f38a 	uxtah	r3, r3, sl
 80089c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089c6:	fa1f fa82 	uxth.w	sl, r2
 80089ca:	f8dc 2000 	ldr.w	r2, [ip]
 80089ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80089d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089dc:	4581      	cmp	r9, r0
 80089de:	f84c 3b04 	str.w	r3, [ip], #4
 80089e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089e6:	d2db      	bcs.n	80089a0 <quorem+0x44>
 80089e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80089ec:	b92b      	cbnz	r3, 80089fa <quorem+0x9e>
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	3b04      	subs	r3, #4
 80089f2:	429d      	cmp	r5, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	d32e      	bcc.n	8008a56 <quorem+0xfa>
 80089f8:	613c      	str	r4, [r7, #16]
 80089fa:	4638      	mov	r0, r7
 80089fc:	f001 fc82 	bl	800a304 <__mcmp>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	db24      	blt.n	8008a4e <quorem+0xf2>
 8008a04:	3601      	adds	r6, #1
 8008a06:	4628      	mov	r0, r5
 8008a08:	f04f 0c00 	mov.w	ip, #0
 8008a0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a10:	f8d0 e000 	ldr.w	lr, [r0]
 8008a14:	b293      	uxth	r3, r2
 8008a16:	ebac 0303 	sub.w	r3, ip, r3
 8008a1a:	0c12      	lsrs	r2, r2, #16
 8008a1c:	fa13 f38e 	uxtah	r3, r3, lr
 8008a20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2e:	45c1      	cmp	r9, r8
 8008a30:	f840 3b04 	str.w	r3, [r0], #4
 8008a34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a38:	d2e8      	bcs.n	8008a0c <quorem+0xb0>
 8008a3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a42:	b922      	cbnz	r2, 8008a4e <quorem+0xf2>
 8008a44:	3b04      	subs	r3, #4
 8008a46:	429d      	cmp	r5, r3
 8008a48:	461a      	mov	r2, r3
 8008a4a:	d30a      	bcc.n	8008a62 <quorem+0x106>
 8008a4c:	613c      	str	r4, [r7, #16]
 8008a4e:	4630      	mov	r0, r6
 8008a50:	b003      	add	sp, #12
 8008a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a56:	6812      	ldr	r2, [r2, #0]
 8008a58:	3b04      	subs	r3, #4
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	d1cc      	bne.n	80089f8 <quorem+0x9c>
 8008a5e:	3c01      	subs	r4, #1
 8008a60:	e7c7      	b.n	80089f2 <quorem+0x96>
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	2a00      	cmp	r2, #0
 8008a68:	d1f0      	bne.n	8008a4c <quorem+0xf0>
 8008a6a:	3c01      	subs	r4, #1
 8008a6c:	e7eb      	b.n	8008a46 <quorem+0xea>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	e7ee      	b.n	8008a50 <quorem+0xf4>
 8008a72:	0000      	movs	r0, r0
 8008a74:	0000      	movs	r0, r0
	...

08008a78 <_dtoa_r>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	ed2d 8b02 	vpush	{d8}
 8008a80:	ec57 6b10 	vmov	r6, r7, d0
 8008a84:	b095      	sub	sp, #84	; 0x54
 8008a86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a8c:	9105      	str	r1, [sp, #20]
 8008a8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008a92:	4604      	mov	r4, r0
 8008a94:	9209      	str	r2, [sp, #36]	; 0x24
 8008a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a98:	b975      	cbnz	r5, 8008ab8 <_dtoa_r+0x40>
 8008a9a:	2010      	movs	r0, #16
 8008a9c:	f7fe f932 	bl	8006d04 <malloc>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6260      	str	r0, [r4, #36]	; 0x24
 8008aa4:	b920      	cbnz	r0, 8008ab0 <_dtoa_r+0x38>
 8008aa6:	4bb2      	ldr	r3, [pc, #712]	; (8008d70 <_dtoa_r+0x2f8>)
 8008aa8:	21ea      	movs	r1, #234	; 0xea
 8008aaa:	48b2      	ldr	r0, [pc, #712]	; (8008d74 <_dtoa_r+0x2fc>)
 8008aac:	f001 ffd8 	bl	800aa60 <__assert_func>
 8008ab0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ab4:	6005      	str	r5, [r0, #0]
 8008ab6:	60c5      	str	r5, [r0, #12]
 8008ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aba:	6819      	ldr	r1, [r3, #0]
 8008abc:	b151      	cbz	r1, 8008ad4 <_dtoa_r+0x5c>
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	604a      	str	r2, [r1, #4]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4093      	lsls	r3, r2
 8008ac6:	608b      	str	r3, [r1, #8]
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f001 f993 	bl	8009df4 <_Bfree>
 8008ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	1e3b      	subs	r3, r7, #0
 8008ad6:	bfb9      	ittee	lt
 8008ad8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008adc:	9303      	strlt	r3, [sp, #12]
 8008ade:	2300      	movge	r3, #0
 8008ae0:	f8c8 3000 	strge.w	r3, [r8]
 8008ae4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ae8:	4ba3      	ldr	r3, [pc, #652]	; (8008d78 <_dtoa_r+0x300>)
 8008aea:	bfbc      	itt	lt
 8008aec:	2201      	movlt	r2, #1
 8008aee:	f8c8 2000 	strlt.w	r2, [r8]
 8008af2:	ea33 0309 	bics.w	r3, r3, r9
 8008af6:	d11b      	bne.n	8008b30 <_dtoa_r+0xb8>
 8008af8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008afa:	f242 730f 	movw	r3, #9999	; 0x270f
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b04:	4333      	orrs	r3, r6
 8008b06:	f000 857a 	beq.w	80095fe <_dtoa_r+0xb86>
 8008b0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b0c:	b963      	cbnz	r3, 8008b28 <_dtoa_r+0xb0>
 8008b0e:	4b9b      	ldr	r3, [pc, #620]	; (8008d7c <_dtoa_r+0x304>)
 8008b10:	e024      	b.n	8008b5c <_dtoa_r+0xe4>
 8008b12:	4b9b      	ldr	r3, [pc, #620]	; (8008d80 <_dtoa_r+0x308>)
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	3308      	adds	r3, #8
 8008b18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	9800      	ldr	r0, [sp, #0]
 8008b1e:	b015      	add	sp, #84	; 0x54
 8008b20:	ecbd 8b02 	vpop	{d8}
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	4b94      	ldr	r3, [pc, #592]	; (8008d7c <_dtoa_r+0x304>)
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	3303      	adds	r3, #3
 8008b2e:	e7f3      	b.n	8008b18 <_dtoa_r+0xa0>
 8008b30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	ec51 0b17 	vmov	r0, r1, d7
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008b40:	f7f7 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b44:	4680      	mov	r8, r0
 8008b46:	b158      	cbz	r0, 8008b60 <_dtoa_r+0xe8>
 8008b48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8551 	beq.w	80095f8 <_dtoa_r+0xb80>
 8008b56:	488b      	ldr	r0, [pc, #556]	; (8008d84 <_dtoa_r+0x30c>)
 8008b58:	6018      	str	r0, [r3, #0]
 8008b5a:	1e43      	subs	r3, r0, #1
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	e7dd      	b.n	8008b1c <_dtoa_r+0xa4>
 8008b60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008b64:	aa12      	add	r2, sp, #72	; 0x48
 8008b66:	a913      	add	r1, sp, #76	; 0x4c
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f001 fceb 	bl	800a544 <__d2b>
 8008b6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b72:	4683      	mov	fp, r0
 8008b74:	2d00      	cmp	r5, #0
 8008b76:	d07c      	beq.n	8008c72 <_dtoa_r+0x1fa>
 8008b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008b7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008b86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b92:	4b7d      	ldr	r3, [pc, #500]	; (8008d88 <_dtoa_r+0x310>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 fb75 	bl	8000288 <__aeabi_dsub>
 8008b9e:	a36e      	add	r3, pc, #440	; (adr r3, 8008d58 <_dtoa_r+0x2e0>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fd28 	bl	80005f8 <__aeabi_dmul>
 8008ba8:	a36d      	add	r3, pc, #436	; (adr r3, 8008d60 <_dtoa_r+0x2e8>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 fb6d 	bl	800028c <__adddf3>
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	460f      	mov	r7, r1
 8008bb8:	f7f7 fcb4 	bl	8000524 <__aeabi_i2d>
 8008bbc:	a36a      	add	r3, pc, #424	; (adr r3, 8008d68 <_dtoa_r+0x2f0>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fd19 	bl	80005f8 <__aeabi_dmul>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4630      	mov	r0, r6
 8008bcc:	4639      	mov	r1, r7
 8008bce:	f7f7 fb5d 	bl	800028c <__adddf3>
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	f7f7 ffbf 	bl	8000b58 <__aeabi_d2iz>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	4682      	mov	sl, r0
 8008bde:	2300      	movs	r3, #0
 8008be0:	4630      	mov	r0, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	f7f7 ff7a 	bl	8000adc <__aeabi_dcmplt>
 8008be8:	b148      	cbz	r0, 8008bfe <_dtoa_r+0x186>
 8008bea:	4650      	mov	r0, sl
 8008bec:	f7f7 fc9a 	bl	8000524 <__aeabi_i2d>
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	f7f7 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bf8:	b908      	cbnz	r0, 8008bfe <_dtoa_r+0x186>
 8008bfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008bfe:	f1ba 0f16 	cmp.w	sl, #22
 8008c02:	d854      	bhi.n	8008cae <_dtoa_r+0x236>
 8008c04:	4b61      	ldr	r3, [pc, #388]	; (8008d8c <_dtoa_r+0x314>)
 8008c06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c12:	f7f7 ff63 	bl	8000adc <__aeabi_dcmplt>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d04b      	beq.n	8008cb2 <_dtoa_r+0x23a>
 8008c1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008c1e:	2300      	movs	r3, #0
 8008c20:	930e      	str	r3, [sp, #56]	; 0x38
 8008c22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c24:	1b5d      	subs	r5, r3, r5
 8008c26:	1e6b      	subs	r3, r5, #1
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	bf43      	ittte	mi
 8008c2c:	2300      	movmi	r3, #0
 8008c2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c32:	9304      	strmi	r3, [sp, #16]
 8008c34:	f04f 0800 	movpl.w	r8, #0
 8008c38:	f1ba 0f00 	cmp.w	sl, #0
 8008c3c:	db3b      	blt.n	8008cb6 <_dtoa_r+0x23e>
 8008c3e:	9b04      	ldr	r3, [sp, #16]
 8008c40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c44:	4453      	add	r3, sl
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9306      	str	r3, [sp, #24]
 8008c4c:	9b05      	ldr	r3, [sp, #20]
 8008c4e:	2b09      	cmp	r3, #9
 8008c50:	d869      	bhi.n	8008d26 <_dtoa_r+0x2ae>
 8008c52:	2b05      	cmp	r3, #5
 8008c54:	bfc4      	itt	gt
 8008c56:	3b04      	subgt	r3, #4
 8008c58:	9305      	strgt	r3, [sp, #20]
 8008c5a:	9b05      	ldr	r3, [sp, #20]
 8008c5c:	f1a3 0302 	sub.w	r3, r3, #2
 8008c60:	bfcc      	ite	gt
 8008c62:	2500      	movgt	r5, #0
 8008c64:	2501      	movle	r5, #1
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d869      	bhi.n	8008d3e <_dtoa_r+0x2c6>
 8008c6a:	e8df f003 	tbb	[pc, r3]
 8008c6e:	4e2c      	.short	0x4e2c
 8008c70:	5a4c      	.short	0x5a4c
 8008c72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008c76:	441d      	add	r5, r3
 8008c78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	bfc1      	itttt	gt
 8008c80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c88:	fa09 f303 	lslgt.w	r3, r9, r3
 8008c8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c90:	bfda      	itte	le
 8008c92:	f1c3 0320 	rsble	r3, r3, #32
 8008c96:	fa06 f003 	lslle.w	r0, r6, r3
 8008c9a:	4318      	orrgt	r0, r3
 8008c9c:	f7f7 fc32 	bl	8000504 <__aeabi_ui2d>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ca8:	3d01      	subs	r5, #1
 8008caa:	9310      	str	r3, [sp, #64]	; 0x40
 8008cac:	e771      	b.n	8008b92 <_dtoa_r+0x11a>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e7b6      	b.n	8008c20 <_dtoa_r+0x1a8>
 8008cb2:	900e      	str	r0, [sp, #56]	; 0x38
 8008cb4:	e7b5      	b.n	8008c22 <_dtoa_r+0x1aa>
 8008cb6:	f1ca 0300 	rsb	r3, sl, #0
 8008cba:	9306      	str	r3, [sp, #24]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	eba8 080a 	sub.w	r8, r8, sl
 8008cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8008cc4:	e7c2      	b.n	8008c4c <_dtoa_r+0x1d4>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	9308      	str	r3, [sp, #32]
 8008cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	dc39      	bgt.n	8008d44 <_dtoa_r+0x2cc>
 8008cd0:	f04f 0901 	mov.w	r9, #1
 8008cd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cd8:	464b      	mov	r3, r9
 8008cda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008cde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	6042      	str	r2, [r0, #4]
 8008ce4:	2204      	movs	r2, #4
 8008ce6:	f102 0614 	add.w	r6, r2, #20
 8008cea:	429e      	cmp	r6, r3
 8008cec:	6841      	ldr	r1, [r0, #4]
 8008cee:	d92f      	bls.n	8008d50 <_dtoa_r+0x2d8>
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 f83f 	bl	8009d74 <_Balloc>
 8008cf6:	9000      	str	r0, [sp, #0]
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d14b      	bne.n	8008d94 <_dtoa_r+0x31c>
 8008cfc:	4b24      	ldr	r3, [pc, #144]	; (8008d90 <_dtoa_r+0x318>)
 8008cfe:	4602      	mov	r2, r0
 8008d00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d04:	e6d1      	b.n	8008aaa <_dtoa_r+0x32>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e7de      	b.n	8008cc8 <_dtoa_r+0x250>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9308      	str	r3, [sp, #32]
 8008d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d10:	eb0a 0903 	add.w	r9, sl, r3
 8008d14:	f109 0301 	add.w	r3, r9, #1
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	9301      	str	r3, [sp, #4]
 8008d1c:	bfb8      	it	lt
 8008d1e:	2301      	movlt	r3, #1
 8008d20:	e7dd      	b.n	8008cde <_dtoa_r+0x266>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e7f2      	b.n	8008d0c <_dtoa_r+0x294>
 8008d26:	2501      	movs	r5, #1
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9305      	str	r3, [sp, #20]
 8008d2c:	9508      	str	r5, [sp, #32]
 8008d2e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d38:	2312      	movs	r3, #18
 8008d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d3c:	e7cf      	b.n	8008cde <_dtoa_r+0x266>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	9308      	str	r3, [sp, #32]
 8008d42:	e7f4      	b.n	8008d2e <_dtoa_r+0x2b6>
 8008d44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d48:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	e7c6      	b.n	8008cde <_dtoa_r+0x266>
 8008d50:	3101      	adds	r1, #1
 8008d52:	6041      	str	r1, [r0, #4]
 8008d54:	0052      	lsls	r2, r2, #1
 8008d56:	e7c6      	b.n	8008ce6 <_dtoa_r+0x26e>
 8008d58:	636f4361 	.word	0x636f4361
 8008d5c:	3fd287a7 	.word	0x3fd287a7
 8008d60:	8b60c8b3 	.word	0x8b60c8b3
 8008d64:	3fc68a28 	.word	0x3fc68a28
 8008d68:	509f79fb 	.word	0x509f79fb
 8008d6c:	3fd34413 	.word	0x3fd34413
 8008d70:	0800e60e 	.word	0x0800e60e
 8008d74:	0800e625 	.word	0x0800e625
 8008d78:	7ff00000 	.word	0x7ff00000
 8008d7c:	0800e60a 	.word	0x0800e60a
 8008d80:	0800e601 	.word	0x0800e601
 8008d84:	0800e481 	.word	0x0800e481
 8008d88:	3ff80000 	.word	0x3ff80000
 8008d8c:	0800e7a0 	.word	0x0800e7a0
 8008d90:	0800e684 	.word	0x0800e684
 8008d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d96:	9a00      	ldr	r2, [sp, #0]
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	2b0e      	cmp	r3, #14
 8008d9e:	f200 80ad 	bhi.w	8008efc <_dtoa_r+0x484>
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	f000 80aa 	beq.w	8008efc <_dtoa_r+0x484>
 8008da8:	f1ba 0f00 	cmp.w	sl, #0
 8008dac:	dd36      	ble.n	8008e1c <_dtoa_r+0x3a4>
 8008dae:	4ac3      	ldr	r2, [pc, #780]	; (80090bc <_dtoa_r+0x644>)
 8008db0:	f00a 030f 	and.w	r3, sl, #15
 8008db4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008db8:	ed93 7b00 	vldr	d7, [r3]
 8008dbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008dc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008dc4:	eeb0 8a47 	vmov.f32	s16, s14
 8008dc8:	eef0 8a67 	vmov.f32	s17, s15
 8008dcc:	d016      	beq.n	8008dfc <_dtoa_r+0x384>
 8008dce:	4bbc      	ldr	r3, [pc, #752]	; (80090c0 <_dtoa_r+0x648>)
 8008dd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dd8:	f7f7 fd38 	bl	800084c <__aeabi_ddiv>
 8008ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de0:	f007 070f 	and.w	r7, r7, #15
 8008de4:	2503      	movs	r5, #3
 8008de6:	4eb6      	ldr	r6, [pc, #728]	; (80090c0 <_dtoa_r+0x648>)
 8008de8:	b957      	cbnz	r7, 8008e00 <_dtoa_r+0x388>
 8008dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dee:	ec53 2b18 	vmov	r2, r3, d8
 8008df2:	f7f7 fd2b 	bl	800084c <__aeabi_ddiv>
 8008df6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dfa:	e029      	b.n	8008e50 <_dtoa_r+0x3d8>
 8008dfc:	2502      	movs	r5, #2
 8008dfe:	e7f2      	b.n	8008de6 <_dtoa_r+0x36e>
 8008e00:	07f9      	lsls	r1, r7, #31
 8008e02:	d508      	bpl.n	8008e16 <_dtoa_r+0x39e>
 8008e04:	ec51 0b18 	vmov	r0, r1, d8
 8008e08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e0c:	f7f7 fbf4 	bl	80005f8 <__aeabi_dmul>
 8008e10:	ec41 0b18 	vmov	d8, r0, r1
 8008e14:	3501      	adds	r5, #1
 8008e16:	107f      	asrs	r7, r7, #1
 8008e18:	3608      	adds	r6, #8
 8008e1a:	e7e5      	b.n	8008de8 <_dtoa_r+0x370>
 8008e1c:	f000 80a6 	beq.w	8008f6c <_dtoa_r+0x4f4>
 8008e20:	f1ca 0600 	rsb	r6, sl, #0
 8008e24:	4ba5      	ldr	r3, [pc, #660]	; (80090bc <_dtoa_r+0x644>)
 8008e26:	4fa6      	ldr	r7, [pc, #664]	; (80090c0 <_dtoa_r+0x648>)
 8008e28:	f006 020f 	and.w	r2, r6, #15
 8008e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e38:	f7f7 fbde 	bl	80005f8 <__aeabi_dmul>
 8008e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e40:	1136      	asrs	r6, r6, #4
 8008e42:	2300      	movs	r3, #0
 8008e44:	2502      	movs	r5, #2
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	f040 8085 	bne.w	8008f56 <_dtoa_r+0x4de>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1d2      	bne.n	8008df6 <_dtoa_r+0x37e>
 8008e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 808c 	beq.w	8008f70 <_dtoa_r+0x4f8>
 8008e58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e5c:	4b99      	ldr	r3, [pc, #612]	; (80090c4 <_dtoa_r+0x64c>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 fe3a 	bl	8000adc <__aeabi_dcmplt>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f000 8081 	beq.w	8008f70 <_dtoa_r+0x4f8>
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d07d      	beq.n	8008f70 <_dtoa_r+0x4f8>
 8008e74:	f1b9 0f00 	cmp.w	r9, #0
 8008e78:	dd3c      	ble.n	8008ef4 <_dtoa_r+0x47c>
 8008e7a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008e7e:	9307      	str	r3, [sp, #28]
 8008e80:	2200      	movs	r2, #0
 8008e82:	4b91      	ldr	r3, [pc, #580]	; (80090c8 <_dtoa_r+0x650>)
 8008e84:	4630      	mov	r0, r6
 8008e86:	4639      	mov	r1, r7
 8008e88:	f7f7 fbb6 	bl	80005f8 <__aeabi_dmul>
 8008e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e90:	3501      	adds	r5, #1
 8008e92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008e96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7f7 fb42 	bl	8000524 <__aeabi_i2d>
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	f7f7 fba8 	bl	80005f8 <__aeabi_dmul>
 8008ea8:	4b88      	ldr	r3, [pc, #544]	; (80090cc <_dtoa_r+0x654>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f7f7 f9ee 	bl	800028c <__adddf3>
 8008eb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d15c      	bne.n	8008f7a <_dtoa_r+0x502>
 8008ec0:	4b83      	ldr	r3, [pc, #524]	; (80090d0 <_dtoa_r+0x658>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 f9de 	bl	8000288 <__aeabi_dsub>
 8008ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	460f      	mov	r7, r1
 8008ed4:	f7f7 fe20 	bl	8000b18 <__aeabi_dcmpgt>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	f040 8296 	bne.w	800940a <_dtoa_r+0x992>
 8008ede:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ee8:	4639      	mov	r1, r7
 8008eea:	f7f7 fdf7 	bl	8000adc <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f040 8288 	bne.w	8009404 <_dtoa_r+0x98c>
 8008ef4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ef8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008efc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f2c0 8158 	blt.w	80091b4 <_dtoa_r+0x73c>
 8008f04:	f1ba 0f0e 	cmp.w	sl, #14
 8008f08:	f300 8154 	bgt.w	80091b4 <_dtoa_r+0x73c>
 8008f0c:	4b6b      	ldr	r3, [pc, #428]	; (80090bc <_dtoa_r+0x644>)
 8008f0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f280 80e3 	bge.w	80090e4 <_dtoa_r+0x66c>
 8008f1e:	9b01      	ldr	r3, [sp, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f300 80df 	bgt.w	80090e4 <_dtoa_r+0x66c>
 8008f26:	f040 826d 	bne.w	8009404 <_dtoa_r+0x98c>
 8008f2a:	4b69      	ldr	r3, [pc, #420]	; (80090d0 <_dtoa_r+0x658>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4649      	mov	r1, r9
 8008f32:	f7f7 fb61 	bl	80005f8 <__aeabi_dmul>
 8008f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f3a:	f7f7 fde3 	bl	8000b04 <__aeabi_dcmpge>
 8008f3e:	9e01      	ldr	r6, [sp, #4]
 8008f40:	4637      	mov	r7, r6
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f040 8243 	bne.w	80093ce <_dtoa_r+0x956>
 8008f48:	9d00      	ldr	r5, [sp, #0]
 8008f4a:	2331      	movs	r3, #49	; 0x31
 8008f4c:	f805 3b01 	strb.w	r3, [r5], #1
 8008f50:	f10a 0a01 	add.w	sl, sl, #1
 8008f54:	e23f      	b.n	80093d6 <_dtoa_r+0x95e>
 8008f56:	07f2      	lsls	r2, r6, #31
 8008f58:	d505      	bpl.n	8008f66 <_dtoa_r+0x4ee>
 8008f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5e:	f7f7 fb4b 	bl	80005f8 <__aeabi_dmul>
 8008f62:	3501      	adds	r5, #1
 8008f64:	2301      	movs	r3, #1
 8008f66:	1076      	asrs	r6, r6, #1
 8008f68:	3708      	adds	r7, #8
 8008f6a:	e76c      	b.n	8008e46 <_dtoa_r+0x3ce>
 8008f6c:	2502      	movs	r5, #2
 8008f6e:	e76f      	b.n	8008e50 <_dtoa_r+0x3d8>
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f76:	930c      	str	r3, [sp, #48]	; 0x30
 8008f78:	e78d      	b.n	8008e96 <_dtoa_r+0x41e>
 8008f7a:	9900      	ldr	r1, [sp, #0]
 8008f7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f80:	4b4e      	ldr	r3, [pc, #312]	; (80090bc <_dtoa_r+0x644>)
 8008f82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f86:	4401      	add	r1, r0
 8008f88:	9102      	str	r1, [sp, #8]
 8008f8a:	9908      	ldr	r1, [sp, #32]
 8008f8c:	eeb0 8a47 	vmov.f32	s16, s14
 8008f90:	eef0 8a67 	vmov.f32	s17, s15
 8008f94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	d045      	beq.n	800902c <_dtoa_r+0x5b4>
 8008fa0:	494c      	ldr	r1, [pc, #304]	; (80090d4 <_dtoa_r+0x65c>)
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	f7f7 fc52 	bl	800084c <__aeabi_ddiv>
 8008fa8:	ec53 2b18 	vmov	r2, r3, d8
 8008fac:	f7f7 f96c 	bl	8000288 <__aeabi_dsub>
 8008fb0:	9d00      	ldr	r5, [sp, #0]
 8008fb2:	ec41 0b18 	vmov	d8, r0, r1
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7f7 fdcd 	bl	8000b58 <__aeabi_d2iz>
 8008fbe:	900c      	str	r0, [sp, #48]	; 0x30
 8008fc0:	f7f7 fab0 	bl	8000524 <__aeabi_i2d>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4630      	mov	r0, r6
 8008fca:	4639      	mov	r1, r7
 8008fcc:	f7f7 f95c 	bl	8000288 <__aeabi_dsub>
 8008fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd2:	3330      	adds	r3, #48	; 0x30
 8008fd4:	f805 3b01 	strb.w	r3, [r5], #1
 8008fd8:	ec53 2b18 	vmov	r2, r3, d8
 8008fdc:	4606      	mov	r6, r0
 8008fde:	460f      	mov	r7, r1
 8008fe0:	f7f7 fd7c 	bl	8000adc <__aeabi_dcmplt>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d165      	bne.n	80090b4 <_dtoa_r+0x63c>
 8008fe8:	4632      	mov	r2, r6
 8008fea:	463b      	mov	r3, r7
 8008fec:	4935      	ldr	r1, [pc, #212]	; (80090c4 <_dtoa_r+0x64c>)
 8008fee:	2000      	movs	r0, #0
 8008ff0:	f7f7 f94a 	bl	8000288 <__aeabi_dsub>
 8008ff4:	ec53 2b18 	vmov	r2, r3, d8
 8008ff8:	f7f7 fd70 	bl	8000adc <__aeabi_dcmplt>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f040 80b9 	bne.w	8009174 <_dtoa_r+0x6fc>
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	429d      	cmp	r5, r3
 8009006:	f43f af75 	beq.w	8008ef4 <_dtoa_r+0x47c>
 800900a:	4b2f      	ldr	r3, [pc, #188]	; (80090c8 <_dtoa_r+0x650>)
 800900c:	ec51 0b18 	vmov	r0, r1, d8
 8009010:	2200      	movs	r2, #0
 8009012:	f7f7 faf1 	bl	80005f8 <__aeabi_dmul>
 8009016:	4b2c      	ldr	r3, [pc, #176]	; (80090c8 <_dtoa_r+0x650>)
 8009018:	ec41 0b18 	vmov	d8, r0, r1
 800901c:	2200      	movs	r2, #0
 800901e:	4630      	mov	r0, r6
 8009020:	4639      	mov	r1, r7
 8009022:	f7f7 fae9 	bl	80005f8 <__aeabi_dmul>
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	e7c4      	b.n	8008fb6 <_dtoa_r+0x53e>
 800902c:	ec51 0b17 	vmov	r0, r1, d7
 8009030:	f7f7 fae2 	bl	80005f8 <__aeabi_dmul>
 8009034:	9b02      	ldr	r3, [sp, #8]
 8009036:	9d00      	ldr	r5, [sp, #0]
 8009038:	930c      	str	r3, [sp, #48]	; 0x30
 800903a:	ec41 0b18 	vmov	d8, r0, r1
 800903e:	4639      	mov	r1, r7
 8009040:	4630      	mov	r0, r6
 8009042:	f7f7 fd89 	bl	8000b58 <__aeabi_d2iz>
 8009046:	9011      	str	r0, [sp, #68]	; 0x44
 8009048:	f7f7 fa6c 	bl	8000524 <__aeabi_i2d>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 f918 	bl	8000288 <__aeabi_dsub>
 8009058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800905a:	3330      	adds	r3, #48	; 0x30
 800905c:	f805 3b01 	strb.w	r3, [r5], #1
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	429d      	cmp	r5, r3
 8009064:	4606      	mov	r6, r0
 8009066:	460f      	mov	r7, r1
 8009068:	f04f 0200 	mov.w	r2, #0
 800906c:	d134      	bne.n	80090d8 <_dtoa_r+0x660>
 800906e:	4b19      	ldr	r3, [pc, #100]	; (80090d4 <_dtoa_r+0x65c>)
 8009070:	ec51 0b18 	vmov	r0, r1, d8
 8009074:	f7f7 f90a 	bl	800028c <__adddf3>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4630      	mov	r0, r6
 800907e:	4639      	mov	r1, r7
 8009080:	f7f7 fd4a 	bl	8000b18 <__aeabi_dcmpgt>
 8009084:	2800      	cmp	r0, #0
 8009086:	d175      	bne.n	8009174 <_dtoa_r+0x6fc>
 8009088:	ec53 2b18 	vmov	r2, r3, d8
 800908c:	4911      	ldr	r1, [pc, #68]	; (80090d4 <_dtoa_r+0x65c>)
 800908e:	2000      	movs	r0, #0
 8009090:	f7f7 f8fa 	bl	8000288 <__aeabi_dsub>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 fd1e 	bl	8000adc <__aeabi_dcmplt>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	f43f af27 	beq.w	8008ef4 <_dtoa_r+0x47c>
 80090a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090a8:	1e6b      	subs	r3, r5, #1
 80090aa:	930c      	str	r3, [sp, #48]	; 0x30
 80090ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090b0:	2b30      	cmp	r3, #48	; 0x30
 80090b2:	d0f8      	beq.n	80090a6 <_dtoa_r+0x62e>
 80090b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090b8:	e04a      	b.n	8009150 <_dtoa_r+0x6d8>
 80090ba:	bf00      	nop
 80090bc:	0800e7a0 	.word	0x0800e7a0
 80090c0:	0800e778 	.word	0x0800e778
 80090c4:	3ff00000 	.word	0x3ff00000
 80090c8:	40240000 	.word	0x40240000
 80090cc:	401c0000 	.word	0x401c0000
 80090d0:	40140000 	.word	0x40140000
 80090d4:	3fe00000 	.word	0x3fe00000
 80090d8:	4baf      	ldr	r3, [pc, #700]	; (8009398 <_dtoa_r+0x920>)
 80090da:	f7f7 fa8d 	bl	80005f8 <__aeabi_dmul>
 80090de:	4606      	mov	r6, r0
 80090e0:	460f      	mov	r7, r1
 80090e2:	e7ac      	b.n	800903e <_dtoa_r+0x5c6>
 80090e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090e8:	9d00      	ldr	r5, [sp, #0]
 80090ea:	4642      	mov	r2, r8
 80090ec:	464b      	mov	r3, r9
 80090ee:	4630      	mov	r0, r6
 80090f0:	4639      	mov	r1, r7
 80090f2:	f7f7 fbab 	bl	800084c <__aeabi_ddiv>
 80090f6:	f7f7 fd2f 	bl	8000b58 <__aeabi_d2iz>
 80090fa:	9002      	str	r0, [sp, #8]
 80090fc:	f7f7 fa12 	bl	8000524 <__aeabi_i2d>
 8009100:	4642      	mov	r2, r8
 8009102:	464b      	mov	r3, r9
 8009104:	f7f7 fa78 	bl	80005f8 <__aeabi_dmul>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4630      	mov	r0, r6
 800910e:	4639      	mov	r1, r7
 8009110:	f7f7 f8ba 	bl	8000288 <__aeabi_dsub>
 8009114:	9e02      	ldr	r6, [sp, #8]
 8009116:	9f01      	ldr	r7, [sp, #4]
 8009118:	3630      	adds	r6, #48	; 0x30
 800911a:	f805 6b01 	strb.w	r6, [r5], #1
 800911e:	9e00      	ldr	r6, [sp, #0]
 8009120:	1bae      	subs	r6, r5, r6
 8009122:	42b7      	cmp	r7, r6
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	d137      	bne.n	800919a <_dtoa_r+0x722>
 800912a:	f7f7 f8af 	bl	800028c <__adddf3>
 800912e:	4642      	mov	r2, r8
 8009130:	464b      	mov	r3, r9
 8009132:	4606      	mov	r6, r0
 8009134:	460f      	mov	r7, r1
 8009136:	f7f7 fcef 	bl	8000b18 <__aeabi_dcmpgt>
 800913a:	b9c8      	cbnz	r0, 8009170 <_dtoa_r+0x6f8>
 800913c:	4642      	mov	r2, r8
 800913e:	464b      	mov	r3, r9
 8009140:	4630      	mov	r0, r6
 8009142:	4639      	mov	r1, r7
 8009144:	f7f7 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009148:	b110      	cbz	r0, 8009150 <_dtoa_r+0x6d8>
 800914a:	9b02      	ldr	r3, [sp, #8]
 800914c:	07d9      	lsls	r1, r3, #31
 800914e:	d40f      	bmi.n	8009170 <_dtoa_r+0x6f8>
 8009150:	4620      	mov	r0, r4
 8009152:	4659      	mov	r1, fp
 8009154:	f000 fe4e 	bl	8009df4 <_Bfree>
 8009158:	2300      	movs	r3, #0
 800915a:	702b      	strb	r3, [r5, #0]
 800915c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800915e:	f10a 0001 	add.w	r0, sl, #1
 8009162:	6018      	str	r0, [r3, #0]
 8009164:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009166:	2b00      	cmp	r3, #0
 8009168:	f43f acd8 	beq.w	8008b1c <_dtoa_r+0xa4>
 800916c:	601d      	str	r5, [r3, #0]
 800916e:	e4d5      	b.n	8008b1c <_dtoa_r+0xa4>
 8009170:	f8cd a01c 	str.w	sl, [sp, #28]
 8009174:	462b      	mov	r3, r5
 8009176:	461d      	mov	r5, r3
 8009178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800917c:	2a39      	cmp	r2, #57	; 0x39
 800917e:	d108      	bne.n	8009192 <_dtoa_r+0x71a>
 8009180:	9a00      	ldr	r2, [sp, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d1f7      	bne.n	8009176 <_dtoa_r+0x6fe>
 8009186:	9a07      	ldr	r2, [sp, #28]
 8009188:	9900      	ldr	r1, [sp, #0]
 800918a:	3201      	adds	r2, #1
 800918c:	9207      	str	r2, [sp, #28]
 800918e:	2230      	movs	r2, #48	; 0x30
 8009190:	700a      	strb	r2, [r1, #0]
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	3201      	adds	r2, #1
 8009196:	701a      	strb	r2, [r3, #0]
 8009198:	e78c      	b.n	80090b4 <_dtoa_r+0x63c>
 800919a:	4b7f      	ldr	r3, [pc, #508]	; (8009398 <_dtoa_r+0x920>)
 800919c:	2200      	movs	r2, #0
 800919e:	f7f7 fa2b 	bl	80005f8 <__aeabi_dmul>
 80091a2:	2200      	movs	r2, #0
 80091a4:	2300      	movs	r3, #0
 80091a6:	4606      	mov	r6, r0
 80091a8:	460f      	mov	r7, r1
 80091aa:	f7f7 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d09b      	beq.n	80090ea <_dtoa_r+0x672>
 80091b2:	e7cd      	b.n	8009150 <_dtoa_r+0x6d8>
 80091b4:	9a08      	ldr	r2, [sp, #32]
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	f000 80c4 	beq.w	8009344 <_dtoa_r+0x8cc>
 80091bc:	9a05      	ldr	r2, [sp, #20]
 80091be:	2a01      	cmp	r2, #1
 80091c0:	f300 80a8 	bgt.w	8009314 <_dtoa_r+0x89c>
 80091c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091c6:	2a00      	cmp	r2, #0
 80091c8:	f000 80a0 	beq.w	800930c <_dtoa_r+0x894>
 80091cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091d0:	9e06      	ldr	r6, [sp, #24]
 80091d2:	4645      	mov	r5, r8
 80091d4:	9a04      	ldr	r2, [sp, #16]
 80091d6:	2101      	movs	r1, #1
 80091d8:	441a      	add	r2, r3
 80091da:	4620      	mov	r0, r4
 80091dc:	4498      	add	r8, r3
 80091de:	9204      	str	r2, [sp, #16]
 80091e0:	f000 ff0e 	bl	800a000 <__i2b>
 80091e4:	4607      	mov	r7, r0
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	dd0b      	ble.n	8009202 <_dtoa_r+0x78a>
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	dd08      	ble.n	8009202 <_dtoa_r+0x78a>
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	9a04      	ldr	r2, [sp, #16]
 80091f4:	bfa8      	it	ge
 80091f6:	462b      	movge	r3, r5
 80091f8:	eba8 0803 	sub.w	r8, r8, r3
 80091fc:	1aed      	subs	r5, r5, r3
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	b1fb      	cbz	r3, 8009246 <_dtoa_r+0x7ce>
 8009206:	9b08      	ldr	r3, [sp, #32]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 809f 	beq.w	800934c <_dtoa_r+0x8d4>
 800920e:	2e00      	cmp	r6, #0
 8009210:	dd11      	ble.n	8009236 <_dtoa_r+0x7be>
 8009212:	4639      	mov	r1, r7
 8009214:	4632      	mov	r2, r6
 8009216:	4620      	mov	r0, r4
 8009218:	f000 ffae 	bl	800a178 <__pow5mult>
 800921c:	465a      	mov	r2, fp
 800921e:	4601      	mov	r1, r0
 8009220:	4607      	mov	r7, r0
 8009222:	4620      	mov	r0, r4
 8009224:	f000 ff02 	bl	800a02c <__multiply>
 8009228:	4659      	mov	r1, fp
 800922a:	9007      	str	r0, [sp, #28]
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fde1 	bl	8009df4 <_Bfree>
 8009232:	9b07      	ldr	r3, [sp, #28]
 8009234:	469b      	mov	fp, r3
 8009236:	9b06      	ldr	r3, [sp, #24]
 8009238:	1b9a      	subs	r2, r3, r6
 800923a:	d004      	beq.n	8009246 <_dtoa_r+0x7ce>
 800923c:	4659      	mov	r1, fp
 800923e:	4620      	mov	r0, r4
 8009240:	f000 ff9a 	bl	800a178 <__pow5mult>
 8009244:	4683      	mov	fp, r0
 8009246:	2101      	movs	r1, #1
 8009248:	4620      	mov	r0, r4
 800924a:	f000 fed9 	bl	800a000 <__i2b>
 800924e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009250:	2b00      	cmp	r3, #0
 8009252:	4606      	mov	r6, r0
 8009254:	dd7c      	ble.n	8009350 <_dtoa_r+0x8d8>
 8009256:	461a      	mov	r2, r3
 8009258:	4601      	mov	r1, r0
 800925a:	4620      	mov	r0, r4
 800925c:	f000 ff8c 	bl	800a178 <__pow5mult>
 8009260:	9b05      	ldr	r3, [sp, #20]
 8009262:	2b01      	cmp	r3, #1
 8009264:	4606      	mov	r6, r0
 8009266:	dd76      	ble.n	8009356 <_dtoa_r+0x8de>
 8009268:	2300      	movs	r3, #0
 800926a:	9306      	str	r3, [sp, #24]
 800926c:	6933      	ldr	r3, [r6, #16]
 800926e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009272:	6918      	ldr	r0, [r3, #16]
 8009274:	f000 fe74 	bl	8009f60 <__hi0bits>
 8009278:	f1c0 0020 	rsb	r0, r0, #32
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	4418      	add	r0, r3
 8009280:	f010 001f 	ands.w	r0, r0, #31
 8009284:	f000 8086 	beq.w	8009394 <_dtoa_r+0x91c>
 8009288:	f1c0 0320 	rsb	r3, r0, #32
 800928c:	2b04      	cmp	r3, #4
 800928e:	dd7f      	ble.n	8009390 <_dtoa_r+0x918>
 8009290:	f1c0 001c 	rsb	r0, r0, #28
 8009294:	9b04      	ldr	r3, [sp, #16]
 8009296:	4403      	add	r3, r0
 8009298:	4480      	add	r8, r0
 800929a:	4405      	add	r5, r0
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	f1b8 0f00 	cmp.w	r8, #0
 80092a2:	dd05      	ble.n	80092b0 <_dtoa_r+0x838>
 80092a4:	4659      	mov	r1, fp
 80092a6:	4642      	mov	r2, r8
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 ffbf 	bl	800a22c <__lshift>
 80092ae:	4683      	mov	fp, r0
 80092b0:	9b04      	ldr	r3, [sp, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dd05      	ble.n	80092c2 <_dtoa_r+0x84a>
 80092b6:	4631      	mov	r1, r6
 80092b8:	461a      	mov	r2, r3
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 ffb6 	bl	800a22c <__lshift>
 80092c0:	4606      	mov	r6, r0
 80092c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d069      	beq.n	800939c <_dtoa_r+0x924>
 80092c8:	4631      	mov	r1, r6
 80092ca:	4658      	mov	r0, fp
 80092cc:	f001 f81a 	bl	800a304 <__mcmp>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	da63      	bge.n	800939c <_dtoa_r+0x924>
 80092d4:	2300      	movs	r3, #0
 80092d6:	4659      	mov	r1, fp
 80092d8:	220a      	movs	r2, #10
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 fdac 	bl	8009e38 <__multadd>
 80092e0:	9b08      	ldr	r3, [sp, #32]
 80092e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80092e6:	4683      	mov	fp, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 818f 	beq.w	800960c <_dtoa_r+0xb94>
 80092ee:	4639      	mov	r1, r7
 80092f0:	2300      	movs	r3, #0
 80092f2:	220a      	movs	r2, #10
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fd9f 	bl	8009e38 <__multadd>
 80092fa:	f1b9 0f00 	cmp.w	r9, #0
 80092fe:	4607      	mov	r7, r0
 8009300:	f300 808e 	bgt.w	8009420 <_dtoa_r+0x9a8>
 8009304:	9b05      	ldr	r3, [sp, #20]
 8009306:	2b02      	cmp	r3, #2
 8009308:	dc50      	bgt.n	80093ac <_dtoa_r+0x934>
 800930a:	e089      	b.n	8009420 <_dtoa_r+0x9a8>
 800930c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800930e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009312:	e75d      	b.n	80091d0 <_dtoa_r+0x758>
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	1e5e      	subs	r6, r3, #1
 8009318:	9b06      	ldr	r3, [sp, #24]
 800931a:	42b3      	cmp	r3, r6
 800931c:	bfbf      	itttt	lt
 800931e:	9b06      	ldrlt	r3, [sp, #24]
 8009320:	9606      	strlt	r6, [sp, #24]
 8009322:	1af2      	sublt	r2, r6, r3
 8009324:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009326:	bfb6      	itet	lt
 8009328:	189b      	addlt	r3, r3, r2
 800932a:	1b9e      	subge	r6, r3, r6
 800932c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800932e:	9b01      	ldr	r3, [sp, #4]
 8009330:	bfb8      	it	lt
 8009332:	2600      	movlt	r6, #0
 8009334:	2b00      	cmp	r3, #0
 8009336:	bfb5      	itete	lt
 8009338:	eba8 0503 	sublt.w	r5, r8, r3
 800933c:	9b01      	ldrge	r3, [sp, #4]
 800933e:	2300      	movlt	r3, #0
 8009340:	4645      	movge	r5, r8
 8009342:	e747      	b.n	80091d4 <_dtoa_r+0x75c>
 8009344:	9e06      	ldr	r6, [sp, #24]
 8009346:	9f08      	ldr	r7, [sp, #32]
 8009348:	4645      	mov	r5, r8
 800934a:	e74c      	b.n	80091e6 <_dtoa_r+0x76e>
 800934c:	9a06      	ldr	r2, [sp, #24]
 800934e:	e775      	b.n	800923c <_dtoa_r+0x7c4>
 8009350:	9b05      	ldr	r3, [sp, #20]
 8009352:	2b01      	cmp	r3, #1
 8009354:	dc18      	bgt.n	8009388 <_dtoa_r+0x910>
 8009356:	9b02      	ldr	r3, [sp, #8]
 8009358:	b9b3      	cbnz	r3, 8009388 <_dtoa_r+0x910>
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009360:	b9a3      	cbnz	r3, 800938c <_dtoa_r+0x914>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009368:	0d1b      	lsrs	r3, r3, #20
 800936a:	051b      	lsls	r3, r3, #20
 800936c:	b12b      	cbz	r3, 800937a <_dtoa_r+0x902>
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	3301      	adds	r3, #1
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	f108 0801 	add.w	r8, r8, #1
 8009378:	2301      	movs	r3, #1
 800937a:	9306      	str	r3, [sp, #24]
 800937c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800937e:	2b00      	cmp	r3, #0
 8009380:	f47f af74 	bne.w	800926c <_dtoa_r+0x7f4>
 8009384:	2001      	movs	r0, #1
 8009386:	e779      	b.n	800927c <_dtoa_r+0x804>
 8009388:	2300      	movs	r3, #0
 800938a:	e7f6      	b.n	800937a <_dtoa_r+0x902>
 800938c:	9b02      	ldr	r3, [sp, #8]
 800938e:	e7f4      	b.n	800937a <_dtoa_r+0x902>
 8009390:	d085      	beq.n	800929e <_dtoa_r+0x826>
 8009392:	4618      	mov	r0, r3
 8009394:	301c      	adds	r0, #28
 8009396:	e77d      	b.n	8009294 <_dtoa_r+0x81c>
 8009398:	40240000 	.word	0x40240000
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	dc38      	bgt.n	8009414 <_dtoa_r+0x99c>
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	dd35      	ble.n	8009414 <_dtoa_r+0x99c>
 80093a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80093ac:	f1b9 0f00 	cmp.w	r9, #0
 80093b0:	d10d      	bne.n	80093ce <_dtoa_r+0x956>
 80093b2:	4631      	mov	r1, r6
 80093b4:	464b      	mov	r3, r9
 80093b6:	2205      	movs	r2, #5
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fd3d 	bl	8009e38 <__multadd>
 80093be:	4601      	mov	r1, r0
 80093c0:	4606      	mov	r6, r0
 80093c2:	4658      	mov	r0, fp
 80093c4:	f000 ff9e 	bl	800a304 <__mcmp>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f73f adbd 	bgt.w	8008f48 <_dtoa_r+0x4d0>
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	9d00      	ldr	r5, [sp, #0]
 80093d2:	ea6f 0a03 	mvn.w	sl, r3
 80093d6:	f04f 0800 	mov.w	r8, #0
 80093da:	4631      	mov	r1, r6
 80093dc:	4620      	mov	r0, r4
 80093de:	f000 fd09 	bl	8009df4 <_Bfree>
 80093e2:	2f00      	cmp	r7, #0
 80093e4:	f43f aeb4 	beq.w	8009150 <_dtoa_r+0x6d8>
 80093e8:	f1b8 0f00 	cmp.w	r8, #0
 80093ec:	d005      	beq.n	80093fa <_dtoa_r+0x982>
 80093ee:	45b8      	cmp	r8, r7
 80093f0:	d003      	beq.n	80093fa <_dtoa_r+0x982>
 80093f2:	4641      	mov	r1, r8
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 fcfd 	bl	8009df4 <_Bfree>
 80093fa:	4639      	mov	r1, r7
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fcf9 	bl	8009df4 <_Bfree>
 8009402:	e6a5      	b.n	8009150 <_dtoa_r+0x6d8>
 8009404:	2600      	movs	r6, #0
 8009406:	4637      	mov	r7, r6
 8009408:	e7e1      	b.n	80093ce <_dtoa_r+0x956>
 800940a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800940c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009410:	4637      	mov	r7, r6
 8009412:	e599      	b.n	8008f48 <_dtoa_r+0x4d0>
 8009414:	9b08      	ldr	r3, [sp, #32]
 8009416:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 80fd 	beq.w	800961a <_dtoa_r+0xba2>
 8009420:	2d00      	cmp	r5, #0
 8009422:	dd05      	ble.n	8009430 <_dtoa_r+0x9b8>
 8009424:	4639      	mov	r1, r7
 8009426:	462a      	mov	r2, r5
 8009428:	4620      	mov	r0, r4
 800942a:	f000 feff 	bl	800a22c <__lshift>
 800942e:	4607      	mov	r7, r0
 8009430:	9b06      	ldr	r3, [sp, #24]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d05c      	beq.n	80094f0 <_dtoa_r+0xa78>
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4620      	mov	r0, r4
 800943a:	f000 fc9b 	bl	8009d74 <_Balloc>
 800943e:	4605      	mov	r5, r0
 8009440:	b928      	cbnz	r0, 800944e <_dtoa_r+0x9d6>
 8009442:	4b80      	ldr	r3, [pc, #512]	; (8009644 <_dtoa_r+0xbcc>)
 8009444:	4602      	mov	r2, r0
 8009446:	f240 21ea 	movw	r1, #746	; 0x2ea
 800944a:	f7ff bb2e 	b.w	8008aaa <_dtoa_r+0x32>
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	3202      	adds	r2, #2
 8009452:	0092      	lsls	r2, r2, #2
 8009454:	f107 010c 	add.w	r1, r7, #12
 8009458:	300c      	adds	r0, #12
 800945a:	f7fd fc5b 	bl	8006d14 <memcpy>
 800945e:	2201      	movs	r2, #1
 8009460:	4629      	mov	r1, r5
 8009462:	4620      	mov	r0, r4
 8009464:	f000 fee2 	bl	800a22c <__lshift>
 8009468:	9b00      	ldr	r3, [sp, #0]
 800946a:	3301      	adds	r3, #1
 800946c:	9301      	str	r3, [sp, #4]
 800946e:	9b00      	ldr	r3, [sp, #0]
 8009470:	444b      	add	r3, r9
 8009472:	9307      	str	r3, [sp, #28]
 8009474:	9b02      	ldr	r3, [sp, #8]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	46b8      	mov	r8, r7
 800947c:	9306      	str	r3, [sp, #24]
 800947e:	4607      	mov	r7, r0
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	4631      	mov	r1, r6
 8009484:	3b01      	subs	r3, #1
 8009486:	4658      	mov	r0, fp
 8009488:	9302      	str	r3, [sp, #8]
 800948a:	f7ff fa67 	bl	800895c <quorem>
 800948e:	4603      	mov	r3, r0
 8009490:	3330      	adds	r3, #48	; 0x30
 8009492:	9004      	str	r0, [sp, #16]
 8009494:	4641      	mov	r1, r8
 8009496:	4658      	mov	r0, fp
 8009498:	9308      	str	r3, [sp, #32]
 800949a:	f000 ff33 	bl	800a304 <__mcmp>
 800949e:	463a      	mov	r2, r7
 80094a0:	4681      	mov	r9, r0
 80094a2:	4631      	mov	r1, r6
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 ff49 	bl	800a33c <__mdiff>
 80094aa:	68c2      	ldr	r2, [r0, #12]
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	4605      	mov	r5, r0
 80094b0:	bb02      	cbnz	r2, 80094f4 <_dtoa_r+0xa7c>
 80094b2:	4601      	mov	r1, r0
 80094b4:	4658      	mov	r0, fp
 80094b6:	f000 ff25 	bl	800a304 <__mcmp>
 80094ba:	9b08      	ldr	r3, [sp, #32]
 80094bc:	4602      	mov	r2, r0
 80094be:	4629      	mov	r1, r5
 80094c0:	4620      	mov	r0, r4
 80094c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80094c6:	f000 fc95 	bl	8009df4 <_Bfree>
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ce:	9d01      	ldr	r5, [sp, #4]
 80094d0:	ea43 0102 	orr.w	r1, r3, r2
 80094d4:	9b06      	ldr	r3, [sp, #24]
 80094d6:	430b      	orrs	r3, r1
 80094d8:	9b08      	ldr	r3, [sp, #32]
 80094da:	d10d      	bne.n	80094f8 <_dtoa_r+0xa80>
 80094dc:	2b39      	cmp	r3, #57	; 0x39
 80094de:	d029      	beq.n	8009534 <_dtoa_r+0xabc>
 80094e0:	f1b9 0f00 	cmp.w	r9, #0
 80094e4:	dd01      	ble.n	80094ea <_dtoa_r+0xa72>
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	3331      	adds	r3, #49	; 0x31
 80094ea:	9a02      	ldr	r2, [sp, #8]
 80094ec:	7013      	strb	r3, [r2, #0]
 80094ee:	e774      	b.n	80093da <_dtoa_r+0x962>
 80094f0:	4638      	mov	r0, r7
 80094f2:	e7b9      	b.n	8009468 <_dtoa_r+0x9f0>
 80094f4:	2201      	movs	r2, #1
 80094f6:	e7e2      	b.n	80094be <_dtoa_r+0xa46>
 80094f8:	f1b9 0f00 	cmp.w	r9, #0
 80094fc:	db06      	blt.n	800950c <_dtoa_r+0xa94>
 80094fe:	9905      	ldr	r1, [sp, #20]
 8009500:	ea41 0909 	orr.w	r9, r1, r9
 8009504:	9906      	ldr	r1, [sp, #24]
 8009506:	ea59 0101 	orrs.w	r1, r9, r1
 800950a:	d120      	bne.n	800954e <_dtoa_r+0xad6>
 800950c:	2a00      	cmp	r2, #0
 800950e:	ddec      	ble.n	80094ea <_dtoa_r+0xa72>
 8009510:	4659      	mov	r1, fp
 8009512:	2201      	movs	r2, #1
 8009514:	4620      	mov	r0, r4
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	f000 fe88 	bl	800a22c <__lshift>
 800951c:	4631      	mov	r1, r6
 800951e:	4683      	mov	fp, r0
 8009520:	f000 fef0 	bl	800a304 <__mcmp>
 8009524:	2800      	cmp	r0, #0
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	dc02      	bgt.n	8009530 <_dtoa_r+0xab8>
 800952a:	d1de      	bne.n	80094ea <_dtoa_r+0xa72>
 800952c:	07da      	lsls	r2, r3, #31
 800952e:	d5dc      	bpl.n	80094ea <_dtoa_r+0xa72>
 8009530:	2b39      	cmp	r3, #57	; 0x39
 8009532:	d1d8      	bne.n	80094e6 <_dtoa_r+0xa6e>
 8009534:	9a02      	ldr	r2, [sp, #8]
 8009536:	2339      	movs	r3, #57	; 0x39
 8009538:	7013      	strb	r3, [r2, #0]
 800953a:	462b      	mov	r3, r5
 800953c:	461d      	mov	r5, r3
 800953e:	3b01      	subs	r3, #1
 8009540:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009544:	2a39      	cmp	r2, #57	; 0x39
 8009546:	d050      	beq.n	80095ea <_dtoa_r+0xb72>
 8009548:	3201      	adds	r2, #1
 800954a:	701a      	strb	r2, [r3, #0]
 800954c:	e745      	b.n	80093da <_dtoa_r+0x962>
 800954e:	2a00      	cmp	r2, #0
 8009550:	dd03      	ble.n	800955a <_dtoa_r+0xae2>
 8009552:	2b39      	cmp	r3, #57	; 0x39
 8009554:	d0ee      	beq.n	8009534 <_dtoa_r+0xabc>
 8009556:	3301      	adds	r3, #1
 8009558:	e7c7      	b.n	80094ea <_dtoa_r+0xa72>
 800955a:	9a01      	ldr	r2, [sp, #4]
 800955c:	9907      	ldr	r1, [sp, #28]
 800955e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009562:	428a      	cmp	r2, r1
 8009564:	d02a      	beq.n	80095bc <_dtoa_r+0xb44>
 8009566:	4659      	mov	r1, fp
 8009568:	2300      	movs	r3, #0
 800956a:	220a      	movs	r2, #10
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fc63 	bl	8009e38 <__multadd>
 8009572:	45b8      	cmp	r8, r7
 8009574:	4683      	mov	fp, r0
 8009576:	f04f 0300 	mov.w	r3, #0
 800957a:	f04f 020a 	mov.w	r2, #10
 800957e:	4641      	mov	r1, r8
 8009580:	4620      	mov	r0, r4
 8009582:	d107      	bne.n	8009594 <_dtoa_r+0xb1c>
 8009584:	f000 fc58 	bl	8009e38 <__multadd>
 8009588:	4680      	mov	r8, r0
 800958a:	4607      	mov	r7, r0
 800958c:	9b01      	ldr	r3, [sp, #4]
 800958e:	3301      	adds	r3, #1
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	e775      	b.n	8009480 <_dtoa_r+0xa08>
 8009594:	f000 fc50 	bl	8009e38 <__multadd>
 8009598:	4639      	mov	r1, r7
 800959a:	4680      	mov	r8, r0
 800959c:	2300      	movs	r3, #0
 800959e:	220a      	movs	r2, #10
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fc49 	bl	8009e38 <__multadd>
 80095a6:	4607      	mov	r7, r0
 80095a8:	e7f0      	b.n	800958c <_dtoa_r+0xb14>
 80095aa:	f1b9 0f00 	cmp.w	r9, #0
 80095ae:	9a00      	ldr	r2, [sp, #0]
 80095b0:	bfcc      	ite	gt
 80095b2:	464d      	movgt	r5, r9
 80095b4:	2501      	movle	r5, #1
 80095b6:	4415      	add	r5, r2
 80095b8:	f04f 0800 	mov.w	r8, #0
 80095bc:	4659      	mov	r1, fp
 80095be:	2201      	movs	r2, #1
 80095c0:	4620      	mov	r0, r4
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	f000 fe32 	bl	800a22c <__lshift>
 80095c8:	4631      	mov	r1, r6
 80095ca:	4683      	mov	fp, r0
 80095cc:	f000 fe9a 	bl	800a304 <__mcmp>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	dcb2      	bgt.n	800953a <_dtoa_r+0xac2>
 80095d4:	d102      	bne.n	80095dc <_dtoa_r+0xb64>
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	07db      	lsls	r3, r3, #31
 80095da:	d4ae      	bmi.n	800953a <_dtoa_r+0xac2>
 80095dc:	462b      	mov	r3, r5
 80095de:	461d      	mov	r5, r3
 80095e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095e4:	2a30      	cmp	r2, #48	; 0x30
 80095e6:	d0fa      	beq.n	80095de <_dtoa_r+0xb66>
 80095e8:	e6f7      	b.n	80093da <_dtoa_r+0x962>
 80095ea:	9a00      	ldr	r2, [sp, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d1a5      	bne.n	800953c <_dtoa_r+0xac4>
 80095f0:	f10a 0a01 	add.w	sl, sl, #1
 80095f4:	2331      	movs	r3, #49	; 0x31
 80095f6:	e779      	b.n	80094ec <_dtoa_r+0xa74>
 80095f8:	4b13      	ldr	r3, [pc, #76]	; (8009648 <_dtoa_r+0xbd0>)
 80095fa:	f7ff baaf 	b.w	8008b5c <_dtoa_r+0xe4>
 80095fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009600:	2b00      	cmp	r3, #0
 8009602:	f47f aa86 	bne.w	8008b12 <_dtoa_r+0x9a>
 8009606:	4b11      	ldr	r3, [pc, #68]	; (800964c <_dtoa_r+0xbd4>)
 8009608:	f7ff baa8 	b.w	8008b5c <_dtoa_r+0xe4>
 800960c:	f1b9 0f00 	cmp.w	r9, #0
 8009610:	dc03      	bgt.n	800961a <_dtoa_r+0xba2>
 8009612:	9b05      	ldr	r3, [sp, #20]
 8009614:	2b02      	cmp	r3, #2
 8009616:	f73f aec9 	bgt.w	80093ac <_dtoa_r+0x934>
 800961a:	9d00      	ldr	r5, [sp, #0]
 800961c:	4631      	mov	r1, r6
 800961e:	4658      	mov	r0, fp
 8009620:	f7ff f99c 	bl	800895c <quorem>
 8009624:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009628:	f805 3b01 	strb.w	r3, [r5], #1
 800962c:	9a00      	ldr	r2, [sp, #0]
 800962e:	1aaa      	subs	r2, r5, r2
 8009630:	4591      	cmp	r9, r2
 8009632:	ddba      	ble.n	80095aa <_dtoa_r+0xb32>
 8009634:	4659      	mov	r1, fp
 8009636:	2300      	movs	r3, #0
 8009638:	220a      	movs	r2, #10
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fbfc 	bl	8009e38 <__multadd>
 8009640:	4683      	mov	fp, r0
 8009642:	e7eb      	b.n	800961c <_dtoa_r+0xba4>
 8009644:	0800e684 	.word	0x0800e684
 8009648:	0800e480 	.word	0x0800e480
 800964c:	0800e601 	.word	0x0800e601

08009650 <rshift>:
 8009650:	6903      	ldr	r3, [r0, #16]
 8009652:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009656:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800965a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800965e:	f100 0414 	add.w	r4, r0, #20
 8009662:	dd45      	ble.n	80096f0 <rshift+0xa0>
 8009664:	f011 011f 	ands.w	r1, r1, #31
 8009668:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800966c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009670:	d10c      	bne.n	800968c <rshift+0x3c>
 8009672:	f100 0710 	add.w	r7, r0, #16
 8009676:	4629      	mov	r1, r5
 8009678:	42b1      	cmp	r1, r6
 800967a:	d334      	bcc.n	80096e6 <rshift+0x96>
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	1eea      	subs	r2, r5, #3
 8009682:	4296      	cmp	r6, r2
 8009684:	bf38      	it	cc
 8009686:	2300      	movcc	r3, #0
 8009688:	4423      	add	r3, r4
 800968a:	e015      	b.n	80096b8 <rshift+0x68>
 800968c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009690:	f1c1 0820 	rsb	r8, r1, #32
 8009694:	40cf      	lsrs	r7, r1
 8009696:	f105 0e04 	add.w	lr, r5, #4
 800969a:	46a1      	mov	r9, r4
 800969c:	4576      	cmp	r6, lr
 800969e:	46f4      	mov	ip, lr
 80096a0:	d815      	bhi.n	80096ce <rshift+0x7e>
 80096a2:	1a9b      	subs	r3, r3, r2
 80096a4:	009a      	lsls	r2, r3, #2
 80096a6:	3a04      	subs	r2, #4
 80096a8:	3501      	adds	r5, #1
 80096aa:	42ae      	cmp	r6, r5
 80096ac:	bf38      	it	cc
 80096ae:	2200      	movcc	r2, #0
 80096b0:	18a3      	adds	r3, r4, r2
 80096b2:	50a7      	str	r7, [r4, r2]
 80096b4:	b107      	cbz	r7, 80096b8 <rshift+0x68>
 80096b6:	3304      	adds	r3, #4
 80096b8:	1b1a      	subs	r2, r3, r4
 80096ba:	42a3      	cmp	r3, r4
 80096bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096c0:	bf08      	it	eq
 80096c2:	2300      	moveq	r3, #0
 80096c4:	6102      	str	r2, [r0, #16]
 80096c6:	bf08      	it	eq
 80096c8:	6143      	streq	r3, [r0, #20]
 80096ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ce:	f8dc c000 	ldr.w	ip, [ip]
 80096d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80096d6:	ea4c 0707 	orr.w	r7, ip, r7
 80096da:	f849 7b04 	str.w	r7, [r9], #4
 80096de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096e2:	40cf      	lsrs	r7, r1
 80096e4:	e7da      	b.n	800969c <rshift+0x4c>
 80096e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80096ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80096ee:	e7c3      	b.n	8009678 <rshift+0x28>
 80096f0:	4623      	mov	r3, r4
 80096f2:	e7e1      	b.n	80096b8 <rshift+0x68>

080096f4 <__hexdig_fun>:
 80096f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096f8:	2b09      	cmp	r3, #9
 80096fa:	d802      	bhi.n	8009702 <__hexdig_fun+0xe>
 80096fc:	3820      	subs	r0, #32
 80096fe:	b2c0      	uxtb	r0, r0
 8009700:	4770      	bx	lr
 8009702:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009706:	2b05      	cmp	r3, #5
 8009708:	d801      	bhi.n	800970e <__hexdig_fun+0x1a>
 800970a:	3847      	subs	r0, #71	; 0x47
 800970c:	e7f7      	b.n	80096fe <__hexdig_fun+0xa>
 800970e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009712:	2b05      	cmp	r3, #5
 8009714:	d801      	bhi.n	800971a <__hexdig_fun+0x26>
 8009716:	3827      	subs	r0, #39	; 0x27
 8009718:	e7f1      	b.n	80096fe <__hexdig_fun+0xa>
 800971a:	2000      	movs	r0, #0
 800971c:	4770      	bx	lr
	...

08009720 <__gethex>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	ed2d 8b02 	vpush	{d8}
 8009728:	b089      	sub	sp, #36	; 0x24
 800972a:	ee08 0a10 	vmov	s16, r0
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	4bbc      	ldr	r3, [pc, #752]	; (8009a24 <__gethex+0x304>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	4618      	mov	r0, r3
 8009738:	468b      	mov	fp, r1
 800973a:	4690      	mov	r8, r2
 800973c:	f7f6 fd48 	bl	80001d0 <strlen>
 8009740:	9b01      	ldr	r3, [sp, #4]
 8009742:	f8db 2000 	ldr.w	r2, [fp]
 8009746:	4403      	add	r3, r0
 8009748:	4682      	mov	sl, r0
 800974a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800974e:	9305      	str	r3, [sp, #20]
 8009750:	1c93      	adds	r3, r2, #2
 8009752:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009756:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800975a:	32fe      	adds	r2, #254	; 0xfe
 800975c:	18d1      	adds	r1, r2, r3
 800975e:	461f      	mov	r7, r3
 8009760:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009764:	9100      	str	r1, [sp, #0]
 8009766:	2830      	cmp	r0, #48	; 0x30
 8009768:	d0f8      	beq.n	800975c <__gethex+0x3c>
 800976a:	f7ff ffc3 	bl	80096f4 <__hexdig_fun>
 800976e:	4604      	mov	r4, r0
 8009770:	2800      	cmp	r0, #0
 8009772:	d13a      	bne.n	80097ea <__gethex+0xca>
 8009774:	9901      	ldr	r1, [sp, #4]
 8009776:	4652      	mov	r2, sl
 8009778:	4638      	mov	r0, r7
 800977a:	f001 f951 	bl	800aa20 <strncmp>
 800977e:	4605      	mov	r5, r0
 8009780:	2800      	cmp	r0, #0
 8009782:	d168      	bne.n	8009856 <__gethex+0x136>
 8009784:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009788:	eb07 060a 	add.w	r6, r7, sl
 800978c:	f7ff ffb2 	bl	80096f4 <__hexdig_fun>
 8009790:	2800      	cmp	r0, #0
 8009792:	d062      	beq.n	800985a <__gethex+0x13a>
 8009794:	4633      	mov	r3, r6
 8009796:	7818      	ldrb	r0, [r3, #0]
 8009798:	2830      	cmp	r0, #48	; 0x30
 800979a:	461f      	mov	r7, r3
 800979c:	f103 0301 	add.w	r3, r3, #1
 80097a0:	d0f9      	beq.n	8009796 <__gethex+0x76>
 80097a2:	f7ff ffa7 	bl	80096f4 <__hexdig_fun>
 80097a6:	2301      	movs	r3, #1
 80097a8:	fab0 f480 	clz	r4, r0
 80097ac:	0964      	lsrs	r4, r4, #5
 80097ae:	4635      	mov	r5, r6
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	463a      	mov	r2, r7
 80097b4:	4616      	mov	r6, r2
 80097b6:	3201      	adds	r2, #1
 80097b8:	7830      	ldrb	r0, [r6, #0]
 80097ba:	f7ff ff9b 	bl	80096f4 <__hexdig_fun>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d1f8      	bne.n	80097b4 <__gethex+0x94>
 80097c2:	9901      	ldr	r1, [sp, #4]
 80097c4:	4652      	mov	r2, sl
 80097c6:	4630      	mov	r0, r6
 80097c8:	f001 f92a 	bl	800aa20 <strncmp>
 80097cc:	b980      	cbnz	r0, 80097f0 <__gethex+0xd0>
 80097ce:	b94d      	cbnz	r5, 80097e4 <__gethex+0xc4>
 80097d0:	eb06 050a 	add.w	r5, r6, sl
 80097d4:	462a      	mov	r2, r5
 80097d6:	4616      	mov	r6, r2
 80097d8:	3201      	adds	r2, #1
 80097da:	7830      	ldrb	r0, [r6, #0]
 80097dc:	f7ff ff8a 	bl	80096f4 <__hexdig_fun>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d1f8      	bne.n	80097d6 <__gethex+0xb6>
 80097e4:	1bad      	subs	r5, r5, r6
 80097e6:	00ad      	lsls	r5, r5, #2
 80097e8:	e004      	b.n	80097f4 <__gethex+0xd4>
 80097ea:	2400      	movs	r4, #0
 80097ec:	4625      	mov	r5, r4
 80097ee:	e7e0      	b.n	80097b2 <__gethex+0x92>
 80097f0:	2d00      	cmp	r5, #0
 80097f2:	d1f7      	bne.n	80097e4 <__gethex+0xc4>
 80097f4:	7833      	ldrb	r3, [r6, #0]
 80097f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097fa:	2b50      	cmp	r3, #80	; 0x50
 80097fc:	d13b      	bne.n	8009876 <__gethex+0x156>
 80097fe:	7873      	ldrb	r3, [r6, #1]
 8009800:	2b2b      	cmp	r3, #43	; 0x2b
 8009802:	d02c      	beq.n	800985e <__gethex+0x13e>
 8009804:	2b2d      	cmp	r3, #45	; 0x2d
 8009806:	d02e      	beq.n	8009866 <__gethex+0x146>
 8009808:	1c71      	adds	r1, r6, #1
 800980a:	f04f 0900 	mov.w	r9, #0
 800980e:	7808      	ldrb	r0, [r1, #0]
 8009810:	f7ff ff70 	bl	80096f4 <__hexdig_fun>
 8009814:	1e43      	subs	r3, r0, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b18      	cmp	r3, #24
 800981a:	d82c      	bhi.n	8009876 <__gethex+0x156>
 800981c:	f1a0 0210 	sub.w	r2, r0, #16
 8009820:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009824:	f7ff ff66 	bl	80096f4 <__hexdig_fun>
 8009828:	1e43      	subs	r3, r0, #1
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b18      	cmp	r3, #24
 800982e:	d91d      	bls.n	800986c <__gethex+0x14c>
 8009830:	f1b9 0f00 	cmp.w	r9, #0
 8009834:	d000      	beq.n	8009838 <__gethex+0x118>
 8009836:	4252      	negs	r2, r2
 8009838:	4415      	add	r5, r2
 800983a:	f8cb 1000 	str.w	r1, [fp]
 800983e:	b1e4      	cbz	r4, 800987a <__gethex+0x15a>
 8009840:	9b00      	ldr	r3, [sp, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	bf14      	ite	ne
 8009846:	2700      	movne	r7, #0
 8009848:	2706      	moveq	r7, #6
 800984a:	4638      	mov	r0, r7
 800984c:	b009      	add	sp, #36	; 0x24
 800984e:	ecbd 8b02 	vpop	{d8}
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	463e      	mov	r6, r7
 8009858:	4625      	mov	r5, r4
 800985a:	2401      	movs	r4, #1
 800985c:	e7ca      	b.n	80097f4 <__gethex+0xd4>
 800985e:	f04f 0900 	mov.w	r9, #0
 8009862:	1cb1      	adds	r1, r6, #2
 8009864:	e7d3      	b.n	800980e <__gethex+0xee>
 8009866:	f04f 0901 	mov.w	r9, #1
 800986a:	e7fa      	b.n	8009862 <__gethex+0x142>
 800986c:	230a      	movs	r3, #10
 800986e:	fb03 0202 	mla	r2, r3, r2, r0
 8009872:	3a10      	subs	r2, #16
 8009874:	e7d4      	b.n	8009820 <__gethex+0x100>
 8009876:	4631      	mov	r1, r6
 8009878:	e7df      	b.n	800983a <__gethex+0x11a>
 800987a:	1bf3      	subs	r3, r6, r7
 800987c:	3b01      	subs	r3, #1
 800987e:	4621      	mov	r1, r4
 8009880:	2b07      	cmp	r3, #7
 8009882:	dc0b      	bgt.n	800989c <__gethex+0x17c>
 8009884:	ee18 0a10 	vmov	r0, s16
 8009888:	f000 fa74 	bl	8009d74 <_Balloc>
 800988c:	4604      	mov	r4, r0
 800988e:	b940      	cbnz	r0, 80098a2 <__gethex+0x182>
 8009890:	4b65      	ldr	r3, [pc, #404]	; (8009a28 <__gethex+0x308>)
 8009892:	4602      	mov	r2, r0
 8009894:	21de      	movs	r1, #222	; 0xde
 8009896:	4865      	ldr	r0, [pc, #404]	; (8009a2c <__gethex+0x30c>)
 8009898:	f001 f8e2 	bl	800aa60 <__assert_func>
 800989c:	3101      	adds	r1, #1
 800989e:	105b      	asrs	r3, r3, #1
 80098a0:	e7ee      	b.n	8009880 <__gethex+0x160>
 80098a2:	f100 0914 	add.w	r9, r0, #20
 80098a6:	f04f 0b00 	mov.w	fp, #0
 80098aa:	f1ca 0301 	rsb	r3, sl, #1
 80098ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80098b2:	f8cd b000 	str.w	fp, [sp]
 80098b6:	9306      	str	r3, [sp, #24]
 80098b8:	42b7      	cmp	r7, r6
 80098ba:	d340      	bcc.n	800993e <__gethex+0x21e>
 80098bc:	9802      	ldr	r0, [sp, #8]
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	f840 3b04 	str.w	r3, [r0], #4
 80098c4:	eba0 0009 	sub.w	r0, r0, r9
 80098c8:	1080      	asrs	r0, r0, #2
 80098ca:	0146      	lsls	r6, r0, #5
 80098cc:	6120      	str	r0, [r4, #16]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fb46 	bl	8009f60 <__hi0bits>
 80098d4:	1a30      	subs	r0, r6, r0
 80098d6:	f8d8 6000 	ldr.w	r6, [r8]
 80098da:	42b0      	cmp	r0, r6
 80098dc:	dd63      	ble.n	80099a6 <__gethex+0x286>
 80098de:	1b87      	subs	r7, r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 fee0 	bl	800a6a8 <__any_on>
 80098e8:	4682      	mov	sl, r0
 80098ea:	b1a8      	cbz	r0, 8009918 <__gethex+0x1f8>
 80098ec:	1e7b      	subs	r3, r7, #1
 80098ee:	1159      	asrs	r1, r3, #5
 80098f0:	f003 021f 	and.w	r2, r3, #31
 80098f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80098f8:	f04f 0a01 	mov.w	sl, #1
 80098fc:	fa0a f202 	lsl.w	r2, sl, r2
 8009900:	420a      	tst	r2, r1
 8009902:	d009      	beq.n	8009918 <__gethex+0x1f8>
 8009904:	4553      	cmp	r3, sl
 8009906:	dd05      	ble.n	8009914 <__gethex+0x1f4>
 8009908:	1eb9      	subs	r1, r7, #2
 800990a:	4620      	mov	r0, r4
 800990c:	f000 fecc 	bl	800a6a8 <__any_on>
 8009910:	2800      	cmp	r0, #0
 8009912:	d145      	bne.n	80099a0 <__gethex+0x280>
 8009914:	f04f 0a02 	mov.w	sl, #2
 8009918:	4639      	mov	r1, r7
 800991a:	4620      	mov	r0, r4
 800991c:	f7ff fe98 	bl	8009650 <rshift>
 8009920:	443d      	add	r5, r7
 8009922:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009926:	42ab      	cmp	r3, r5
 8009928:	da4c      	bge.n	80099c4 <__gethex+0x2a4>
 800992a:	ee18 0a10 	vmov	r0, s16
 800992e:	4621      	mov	r1, r4
 8009930:	f000 fa60 	bl	8009df4 <_Bfree>
 8009934:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009936:	2300      	movs	r3, #0
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	27a3      	movs	r7, #163	; 0xa3
 800993c:	e785      	b.n	800984a <__gethex+0x12a>
 800993e:	1e73      	subs	r3, r6, #1
 8009940:	9a05      	ldr	r2, [sp, #20]
 8009942:	9303      	str	r3, [sp, #12]
 8009944:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009948:	4293      	cmp	r3, r2
 800994a:	d019      	beq.n	8009980 <__gethex+0x260>
 800994c:	f1bb 0f20 	cmp.w	fp, #32
 8009950:	d107      	bne.n	8009962 <__gethex+0x242>
 8009952:	9b02      	ldr	r3, [sp, #8]
 8009954:	9a00      	ldr	r2, [sp, #0]
 8009956:	f843 2b04 	str.w	r2, [r3], #4
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	2300      	movs	r3, #0
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	469b      	mov	fp, r3
 8009962:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009966:	f7ff fec5 	bl	80096f4 <__hexdig_fun>
 800996a:	9b00      	ldr	r3, [sp, #0]
 800996c:	f000 000f 	and.w	r0, r0, #15
 8009970:	fa00 f00b 	lsl.w	r0, r0, fp
 8009974:	4303      	orrs	r3, r0
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	f10b 0b04 	add.w	fp, fp, #4
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	e00d      	b.n	800999c <__gethex+0x27c>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	9a06      	ldr	r2, [sp, #24]
 8009984:	4413      	add	r3, r2
 8009986:	42bb      	cmp	r3, r7
 8009988:	d3e0      	bcc.n	800994c <__gethex+0x22c>
 800998a:	4618      	mov	r0, r3
 800998c:	9901      	ldr	r1, [sp, #4]
 800998e:	9307      	str	r3, [sp, #28]
 8009990:	4652      	mov	r2, sl
 8009992:	f001 f845 	bl	800aa20 <strncmp>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	2800      	cmp	r0, #0
 800999a:	d1d7      	bne.n	800994c <__gethex+0x22c>
 800999c:	461e      	mov	r6, r3
 800999e:	e78b      	b.n	80098b8 <__gethex+0x198>
 80099a0:	f04f 0a03 	mov.w	sl, #3
 80099a4:	e7b8      	b.n	8009918 <__gethex+0x1f8>
 80099a6:	da0a      	bge.n	80099be <__gethex+0x29e>
 80099a8:	1a37      	subs	r7, r6, r0
 80099aa:	4621      	mov	r1, r4
 80099ac:	ee18 0a10 	vmov	r0, s16
 80099b0:	463a      	mov	r2, r7
 80099b2:	f000 fc3b 	bl	800a22c <__lshift>
 80099b6:	1bed      	subs	r5, r5, r7
 80099b8:	4604      	mov	r4, r0
 80099ba:	f100 0914 	add.w	r9, r0, #20
 80099be:	f04f 0a00 	mov.w	sl, #0
 80099c2:	e7ae      	b.n	8009922 <__gethex+0x202>
 80099c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80099c8:	42a8      	cmp	r0, r5
 80099ca:	dd72      	ble.n	8009ab2 <__gethex+0x392>
 80099cc:	1b45      	subs	r5, r0, r5
 80099ce:	42ae      	cmp	r6, r5
 80099d0:	dc36      	bgt.n	8009a40 <__gethex+0x320>
 80099d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d02a      	beq.n	8009a30 <__gethex+0x310>
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d02c      	beq.n	8009a38 <__gethex+0x318>
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d115      	bne.n	8009a0e <__gethex+0x2ee>
 80099e2:	42ae      	cmp	r6, r5
 80099e4:	d113      	bne.n	8009a0e <__gethex+0x2ee>
 80099e6:	2e01      	cmp	r6, #1
 80099e8:	d10b      	bne.n	8009a02 <__gethex+0x2e2>
 80099ea:	9a04      	ldr	r2, [sp, #16]
 80099ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	2301      	movs	r3, #1
 80099f4:	6123      	str	r3, [r4, #16]
 80099f6:	f8c9 3000 	str.w	r3, [r9]
 80099fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099fc:	2762      	movs	r7, #98	; 0x62
 80099fe:	601c      	str	r4, [r3, #0]
 8009a00:	e723      	b.n	800984a <__gethex+0x12a>
 8009a02:	1e71      	subs	r1, r6, #1
 8009a04:	4620      	mov	r0, r4
 8009a06:	f000 fe4f 	bl	800a6a8 <__any_on>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d1ed      	bne.n	80099ea <__gethex+0x2ca>
 8009a0e:	ee18 0a10 	vmov	r0, s16
 8009a12:	4621      	mov	r1, r4
 8009a14:	f000 f9ee 	bl	8009df4 <_Bfree>
 8009a18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	2750      	movs	r7, #80	; 0x50
 8009a20:	e713      	b.n	800984a <__gethex+0x12a>
 8009a22:	bf00      	nop
 8009a24:	0800e700 	.word	0x0800e700
 8009a28:	0800e684 	.word	0x0800e684
 8009a2c:	0800e695 	.word	0x0800e695
 8009a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1eb      	bne.n	8009a0e <__gethex+0x2ee>
 8009a36:	e7d8      	b.n	80099ea <__gethex+0x2ca>
 8009a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1d5      	bne.n	80099ea <__gethex+0x2ca>
 8009a3e:	e7e6      	b.n	8009a0e <__gethex+0x2ee>
 8009a40:	1e6f      	subs	r7, r5, #1
 8009a42:	f1ba 0f00 	cmp.w	sl, #0
 8009a46:	d131      	bne.n	8009aac <__gethex+0x38c>
 8009a48:	b127      	cbz	r7, 8009a54 <__gethex+0x334>
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 fe2b 	bl	800a6a8 <__any_on>
 8009a52:	4682      	mov	sl, r0
 8009a54:	117b      	asrs	r3, r7, #5
 8009a56:	2101      	movs	r1, #1
 8009a58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009a5c:	f007 071f 	and.w	r7, r7, #31
 8009a60:	fa01 f707 	lsl.w	r7, r1, r7
 8009a64:	421f      	tst	r7, r3
 8009a66:	4629      	mov	r1, r5
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bf18      	it	ne
 8009a6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a70:	1b76      	subs	r6, r6, r5
 8009a72:	f7ff fded 	bl	8009650 <rshift>
 8009a76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a7a:	2702      	movs	r7, #2
 8009a7c:	f1ba 0f00 	cmp.w	sl, #0
 8009a80:	d048      	beq.n	8009b14 <__gethex+0x3f4>
 8009a82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d015      	beq.n	8009ab6 <__gethex+0x396>
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d017      	beq.n	8009abe <__gethex+0x39e>
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d109      	bne.n	8009aa6 <__gethex+0x386>
 8009a92:	f01a 0f02 	tst.w	sl, #2
 8009a96:	d006      	beq.n	8009aa6 <__gethex+0x386>
 8009a98:	f8d9 0000 	ldr.w	r0, [r9]
 8009a9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009aa0:	f01a 0f01 	tst.w	sl, #1
 8009aa4:	d10e      	bne.n	8009ac4 <__gethex+0x3a4>
 8009aa6:	f047 0710 	orr.w	r7, r7, #16
 8009aaa:	e033      	b.n	8009b14 <__gethex+0x3f4>
 8009aac:	f04f 0a01 	mov.w	sl, #1
 8009ab0:	e7d0      	b.n	8009a54 <__gethex+0x334>
 8009ab2:	2701      	movs	r7, #1
 8009ab4:	e7e2      	b.n	8009a7c <__gethex+0x35c>
 8009ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ab8:	f1c3 0301 	rsb	r3, r3, #1
 8009abc:	9315      	str	r3, [sp, #84]	; 0x54
 8009abe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0f0      	beq.n	8009aa6 <__gethex+0x386>
 8009ac4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ac8:	f104 0314 	add.w	r3, r4, #20
 8009acc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ad0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ad4:	f04f 0c00 	mov.w	ip, #0
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ade:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009ae2:	d01c      	beq.n	8009b1e <__gethex+0x3fe>
 8009ae4:	3201      	adds	r2, #1
 8009ae6:	6002      	str	r2, [r0, #0]
 8009ae8:	2f02      	cmp	r7, #2
 8009aea:	f104 0314 	add.w	r3, r4, #20
 8009aee:	d13f      	bne.n	8009b70 <__gethex+0x450>
 8009af0:	f8d8 2000 	ldr.w	r2, [r8]
 8009af4:	3a01      	subs	r2, #1
 8009af6:	42b2      	cmp	r2, r6
 8009af8:	d10a      	bne.n	8009b10 <__gethex+0x3f0>
 8009afa:	1171      	asrs	r1, r6, #5
 8009afc:	2201      	movs	r2, #1
 8009afe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b02:	f006 061f 	and.w	r6, r6, #31
 8009b06:	fa02 f606 	lsl.w	r6, r2, r6
 8009b0a:	421e      	tst	r6, r3
 8009b0c:	bf18      	it	ne
 8009b0e:	4617      	movne	r7, r2
 8009b10:	f047 0720 	orr.w	r7, r7, #32
 8009b14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b16:	601c      	str	r4, [r3, #0]
 8009b18:	9b04      	ldr	r3, [sp, #16]
 8009b1a:	601d      	str	r5, [r3, #0]
 8009b1c:	e695      	b.n	800984a <__gethex+0x12a>
 8009b1e:	4299      	cmp	r1, r3
 8009b20:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b24:	d8d8      	bhi.n	8009ad8 <__gethex+0x3b8>
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	459b      	cmp	fp, r3
 8009b2a:	db19      	blt.n	8009b60 <__gethex+0x440>
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	ee18 0a10 	vmov	r0, s16
 8009b32:	3101      	adds	r1, #1
 8009b34:	f000 f91e 	bl	8009d74 <_Balloc>
 8009b38:	4681      	mov	r9, r0
 8009b3a:	b918      	cbnz	r0, 8009b44 <__gethex+0x424>
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ba8 <__gethex+0x488>)
 8009b3e:	4602      	mov	r2, r0
 8009b40:	2184      	movs	r1, #132	; 0x84
 8009b42:	e6a8      	b.n	8009896 <__gethex+0x176>
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	3202      	adds	r2, #2
 8009b48:	f104 010c 	add.w	r1, r4, #12
 8009b4c:	0092      	lsls	r2, r2, #2
 8009b4e:	300c      	adds	r0, #12
 8009b50:	f7fd f8e0 	bl	8006d14 <memcpy>
 8009b54:	4621      	mov	r1, r4
 8009b56:	ee18 0a10 	vmov	r0, s16
 8009b5a:	f000 f94b 	bl	8009df4 <_Bfree>
 8009b5e:	464c      	mov	r4, r9
 8009b60:	6923      	ldr	r3, [r4, #16]
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b68:	6122      	str	r2, [r4, #16]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	615a      	str	r2, [r3, #20]
 8009b6e:	e7bb      	b.n	8009ae8 <__gethex+0x3c8>
 8009b70:	6922      	ldr	r2, [r4, #16]
 8009b72:	455a      	cmp	r2, fp
 8009b74:	dd0b      	ble.n	8009b8e <__gethex+0x46e>
 8009b76:	2101      	movs	r1, #1
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff fd69 	bl	8009650 <rshift>
 8009b7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b82:	3501      	adds	r5, #1
 8009b84:	42ab      	cmp	r3, r5
 8009b86:	f6ff aed0 	blt.w	800992a <__gethex+0x20a>
 8009b8a:	2701      	movs	r7, #1
 8009b8c:	e7c0      	b.n	8009b10 <__gethex+0x3f0>
 8009b8e:	f016 061f 	ands.w	r6, r6, #31
 8009b92:	d0fa      	beq.n	8009b8a <__gethex+0x46a>
 8009b94:	449a      	add	sl, r3
 8009b96:	f1c6 0620 	rsb	r6, r6, #32
 8009b9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009b9e:	f000 f9df 	bl	8009f60 <__hi0bits>
 8009ba2:	42b0      	cmp	r0, r6
 8009ba4:	dbe7      	blt.n	8009b76 <__gethex+0x456>
 8009ba6:	e7f0      	b.n	8009b8a <__gethex+0x46a>
 8009ba8:	0800e684 	.word	0x0800e684

08009bac <L_shift>:
 8009bac:	f1c2 0208 	rsb	r2, r2, #8
 8009bb0:	0092      	lsls	r2, r2, #2
 8009bb2:	b570      	push	{r4, r5, r6, lr}
 8009bb4:	f1c2 0620 	rsb	r6, r2, #32
 8009bb8:	6843      	ldr	r3, [r0, #4]
 8009bba:	6804      	ldr	r4, [r0, #0]
 8009bbc:	fa03 f506 	lsl.w	r5, r3, r6
 8009bc0:	432c      	orrs	r4, r5
 8009bc2:	40d3      	lsrs	r3, r2
 8009bc4:	6004      	str	r4, [r0, #0]
 8009bc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bca:	4288      	cmp	r0, r1
 8009bcc:	d3f4      	bcc.n	8009bb8 <L_shift+0xc>
 8009bce:	bd70      	pop	{r4, r5, r6, pc}

08009bd0 <__match>:
 8009bd0:	b530      	push	{r4, r5, lr}
 8009bd2:	6803      	ldr	r3, [r0, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bda:	b914      	cbnz	r4, 8009be2 <__match+0x12>
 8009bdc:	6003      	str	r3, [r0, #0]
 8009bde:	2001      	movs	r0, #1
 8009be0:	bd30      	pop	{r4, r5, pc}
 8009be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009bea:	2d19      	cmp	r5, #25
 8009bec:	bf98      	it	ls
 8009bee:	3220      	addls	r2, #32
 8009bf0:	42a2      	cmp	r2, r4
 8009bf2:	d0f0      	beq.n	8009bd6 <__match+0x6>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e7f3      	b.n	8009be0 <__match+0x10>

08009bf8 <__hexnan>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	680b      	ldr	r3, [r1, #0]
 8009bfe:	6801      	ldr	r1, [r0, #0]
 8009c00:	115e      	asrs	r6, r3, #5
 8009c02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c06:	f013 031f 	ands.w	r3, r3, #31
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	bf18      	it	ne
 8009c0e:	3604      	addne	r6, #4
 8009c10:	2500      	movs	r5, #0
 8009c12:	1f37      	subs	r7, r6, #4
 8009c14:	4682      	mov	sl, r0
 8009c16:	4690      	mov	r8, r2
 8009c18:	9301      	str	r3, [sp, #4]
 8009c1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c1e:	46b9      	mov	r9, r7
 8009c20:	463c      	mov	r4, r7
 8009c22:	9502      	str	r5, [sp, #8]
 8009c24:	46ab      	mov	fp, r5
 8009c26:	784a      	ldrb	r2, [r1, #1]
 8009c28:	1c4b      	adds	r3, r1, #1
 8009c2a:	9303      	str	r3, [sp, #12]
 8009c2c:	b342      	cbz	r2, 8009c80 <__hexnan+0x88>
 8009c2e:	4610      	mov	r0, r2
 8009c30:	9105      	str	r1, [sp, #20]
 8009c32:	9204      	str	r2, [sp, #16]
 8009c34:	f7ff fd5e 	bl	80096f4 <__hexdig_fun>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d14f      	bne.n	8009cdc <__hexnan+0xe4>
 8009c3c:	9a04      	ldr	r2, [sp, #16]
 8009c3e:	9905      	ldr	r1, [sp, #20]
 8009c40:	2a20      	cmp	r2, #32
 8009c42:	d818      	bhi.n	8009c76 <__hexnan+0x7e>
 8009c44:	9b02      	ldr	r3, [sp, #8]
 8009c46:	459b      	cmp	fp, r3
 8009c48:	dd13      	ble.n	8009c72 <__hexnan+0x7a>
 8009c4a:	454c      	cmp	r4, r9
 8009c4c:	d206      	bcs.n	8009c5c <__hexnan+0x64>
 8009c4e:	2d07      	cmp	r5, #7
 8009c50:	dc04      	bgt.n	8009c5c <__hexnan+0x64>
 8009c52:	462a      	mov	r2, r5
 8009c54:	4649      	mov	r1, r9
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7ff ffa8 	bl	8009bac <L_shift>
 8009c5c:	4544      	cmp	r4, r8
 8009c5e:	d950      	bls.n	8009d02 <__hexnan+0x10a>
 8009c60:	2300      	movs	r3, #0
 8009c62:	f1a4 0904 	sub.w	r9, r4, #4
 8009c66:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c6a:	f8cd b008 	str.w	fp, [sp, #8]
 8009c6e:	464c      	mov	r4, r9
 8009c70:	461d      	mov	r5, r3
 8009c72:	9903      	ldr	r1, [sp, #12]
 8009c74:	e7d7      	b.n	8009c26 <__hexnan+0x2e>
 8009c76:	2a29      	cmp	r2, #41	; 0x29
 8009c78:	d156      	bne.n	8009d28 <__hexnan+0x130>
 8009c7a:	3102      	adds	r1, #2
 8009c7c:	f8ca 1000 	str.w	r1, [sl]
 8009c80:	f1bb 0f00 	cmp.w	fp, #0
 8009c84:	d050      	beq.n	8009d28 <__hexnan+0x130>
 8009c86:	454c      	cmp	r4, r9
 8009c88:	d206      	bcs.n	8009c98 <__hexnan+0xa0>
 8009c8a:	2d07      	cmp	r5, #7
 8009c8c:	dc04      	bgt.n	8009c98 <__hexnan+0xa0>
 8009c8e:	462a      	mov	r2, r5
 8009c90:	4649      	mov	r1, r9
 8009c92:	4620      	mov	r0, r4
 8009c94:	f7ff ff8a 	bl	8009bac <L_shift>
 8009c98:	4544      	cmp	r4, r8
 8009c9a:	d934      	bls.n	8009d06 <__hexnan+0x10e>
 8009c9c:	f1a8 0204 	sub.w	r2, r8, #4
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ca6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009caa:	429f      	cmp	r7, r3
 8009cac:	d2f9      	bcs.n	8009ca2 <__hexnan+0xaa>
 8009cae:	1b3b      	subs	r3, r7, r4
 8009cb0:	f023 0303 	bic.w	r3, r3, #3
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	3401      	adds	r4, #1
 8009cb8:	3e03      	subs	r6, #3
 8009cba:	42b4      	cmp	r4, r6
 8009cbc:	bf88      	it	hi
 8009cbe:	2304      	movhi	r3, #4
 8009cc0:	4443      	add	r3, r8
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f843 2b04 	str.w	r2, [r3], #4
 8009cc8:	429f      	cmp	r7, r3
 8009cca:	d2fb      	bcs.n	8009cc4 <__hexnan+0xcc>
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	b91b      	cbnz	r3, 8009cd8 <__hexnan+0xe0>
 8009cd0:	4547      	cmp	r7, r8
 8009cd2:	d127      	bne.n	8009d24 <__hexnan+0x12c>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	2005      	movs	r0, #5
 8009cda:	e026      	b.n	8009d2a <__hexnan+0x132>
 8009cdc:	3501      	adds	r5, #1
 8009cde:	2d08      	cmp	r5, #8
 8009ce0:	f10b 0b01 	add.w	fp, fp, #1
 8009ce4:	dd06      	ble.n	8009cf4 <__hexnan+0xfc>
 8009ce6:	4544      	cmp	r4, r8
 8009ce8:	d9c3      	bls.n	8009c72 <__hexnan+0x7a>
 8009cea:	2300      	movs	r3, #0
 8009cec:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cf0:	2501      	movs	r5, #1
 8009cf2:	3c04      	subs	r4, #4
 8009cf4:	6822      	ldr	r2, [r4, #0]
 8009cf6:	f000 000f 	and.w	r0, r0, #15
 8009cfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009cfe:	6022      	str	r2, [r4, #0]
 8009d00:	e7b7      	b.n	8009c72 <__hexnan+0x7a>
 8009d02:	2508      	movs	r5, #8
 8009d04:	e7b5      	b.n	8009c72 <__hexnan+0x7a>
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0df      	beq.n	8009ccc <__hexnan+0xd4>
 8009d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d10:	f1c3 0320 	rsb	r3, r3, #32
 8009d14:	fa22 f303 	lsr.w	r3, r2, r3
 8009d18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d1c:	401a      	ands	r2, r3
 8009d1e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d22:	e7d3      	b.n	8009ccc <__hexnan+0xd4>
 8009d24:	3f04      	subs	r7, #4
 8009d26:	e7d1      	b.n	8009ccc <__hexnan+0xd4>
 8009d28:	2004      	movs	r0, #4
 8009d2a:	b007      	add	sp, #28
 8009d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d30 <_localeconv_r>:
 8009d30:	4800      	ldr	r0, [pc, #0]	; (8009d34 <_localeconv_r+0x4>)
 8009d32:	4770      	bx	lr
 8009d34:	20000568 	.word	0x20000568

08009d38 <__ascii_mbtowc>:
 8009d38:	b082      	sub	sp, #8
 8009d3a:	b901      	cbnz	r1, 8009d3e <__ascii_mbtowc+0x6>
 8009d3c:	a901      	add	r1, sp, #4
 8009d3e:	b142      	cbz	r2, 8009d52 <__ascii_mbtowc+0x1a>
 8009d40:	b14b      	cbz	r3, 8009d56 <__ascii_mbtowc+0x1e>
 8009d42:	7813      	ldrb	r3, [r2, #0]
 8009d44:	600b      	str	r3, [r1, #0]
 8009d46:	7812      	ldrb	r2, [r2, #0]
 8009d48:	1e10      	subs	r0, r2, #0
 8009d4a:	bf18      	it	ne
 8009d4c:	2001      	movne	r0, #1
 8009d4e:	b002      	add	sp, #8
 8009d50:	4770      	bx	lr
 8009d52:	4610      	mov	r0, r2
 8009d54:	e7fb      	b.n	8009d4e <__ascii_mbtowc+0x16>
 8009d56:	f06f 0001 	mvn.w	r0, #1
 8009d5a:	e7f8      	b.n	8009d4e <__ascii_mbtowc+0x16>

08009d5c <__malloc_lock>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__malloc_lock+0x8>)
 8009d5e:	f000 beb0 	b.w	800aac2 <__retarget_lock_acquire_recursive>
 8009d62:	bf00      	nop
 8009d64:	200057c4 	.word	0x200057c4

08009d68 <__malloc_unlock>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__malloc_unlock+0x8>)
 8009d6a:	f000 beab 	b.w	800aac4 <__retarget_lock_release_recursive>
 8009d6e:	bf00      	nop
 8009d70:	200057c4 	.word	0x200057c4

08009d74 <_Balloc>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d78:	4604      	mov	r4, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	b976      	cbnz	r6, 8009d9c <_Balloc+0x28>
 8009d7e:	2010      	movs	r0, #16
 8009d80:	f7fc ffc0 	bl	8006d04 <malloc>
 8009d84:	4602      	mov	r2, r0
 8009d86:	6260      	str	r0, [r4, #36]	; 0x24
 8009d88:	b920      	cbnz	r0, 8009d94 <_Balloc+0x20>
 8009d8a:	4b18      	ldr	r3, [pc, #96]	; (8009dec <_Balloc+0x78>)
 8009d8c:	4818      	ldr	r0, [pc, #96]	; (8009df0 <_Balloc+0x7c>)
 8009d8e:	2166      	movs	r1, #102	; 0x66
 8009d90:	f000 fe66 	bl	800aa60 <__assert_func>
 8009d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d98:	6006      	str	r6, [r0, #0]
 8009d9a:	60c6      	str	r6, [r0, #12]
 8009d9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d9e:	68f3      	ldr	r3, [r6, #12]
 8009da0:	b183      	cbz	r3, 8009dc4 <_Balloc+0x50>
 8009da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009daa:	b9b8      	cbnz	r0, 8009ddc <_Balloc+0x68>
 8009dac:	2101      	movs	r1, #1
 8009dae:	fa01 f605 	lsl.w	r6, r1, r5
 8009db2:	1d72      	adds	r2, r6, #5
 8009db4:	0092      	lsls	r2, r2, #2
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 fc97 	bl	800a6ea <_calloc_r>
 8009dbc:	b160      	cbz	r0, 8009dd8 <_Balloc+0x64>
 8009dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dc2:	e00e      	b.n	8009de2 <_Balloc+0x6e>
 8009dc4:	2221      	movs	r2, #33	; 0x21
 8009dc6:	2104      	movs	r1, #4
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 fc8e 	bl	800a6ea <_calloc_r>
 8009dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd0:	60f0      	str	r0, [r6, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e4      	bne.n	8009da2 <_Balloc+0x2e>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	6802      	ldr	r2, [r0, #0]
 8009dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009de2:	2300      	movs	r3, #0
 8009de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009de8:	e7f7      	b.n	8009dda <_Balloc+0x66>
 8009dea:	bf00      	nop
 8009dec:	0800e60e 	.word	0x0800e60e
 8009df0:	0800e714 	.word	0x0800e714

08009df4 <_Bfree>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009df8:	4605      	mov	r5, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	b976      	cbnz	r6, 8009e1c <_Bfree+0x28>
 8009dfe:	2010      	movs	r0, #16
 8009e00:	f7fc ff80 	bl	8006d04 <malloc>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6268      	str	r0, [r5, #36]	; 0x24
 8009e08:	b920      	cbnz	r0, 8009e14 <_Bfree+0x20>
 8009e0a:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <_Bfree+0x3c>)
 8009e0c:	4809      	ldr	r0, [pc, #36]	; (8009e34 <_Bfree+0x40>)
 8009e0e:	218a      	movs	r1, #138	; 0x8a
 8009e10:	f000 fe26 	bl	800aa60 <__assert_func>
 8009e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e18:	6006      	str	r6, [r0, #0]
 8009e1a:	60c6      	str	r6, [r0, #12]
 8009e1c:	b13c      	cbz	r4, 8009e2e <_Bfree+0x3a>
 8009e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e20:	6862      	ldr	r2, [r4, #4]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e28:	6021      	str	r1, [r4, #0]
 8009e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	0800e60e 	.word	0x0800e60e
 8009e34:	0800e714 	.word	0x0800e714

08009e38 <__multadd>:
 8009e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3c:	690e      	ldr	r6, [r1, #16]
 8009e3e:	4607      	mov	r7, r0
 8009e40:	4698      	mov	r8, r3
 8009e42:	460c      	mov	r4, r1
 8009e44:	f101 0014 	add.w	r0, r1, #20
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6805      	ldr	r5, [r0, #0]
 8009e4c:	b2a9      	uxth	r1, r5
 8009e4e:	fb02 8101 	mla	r1, r2, r1, r8
 8009e52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009e56:	0c2d      	lsrs	r5, r5, #16
 8009e58:	fb02 c505 	mla	r5, r2, r5, ip
 8009e5c:	b289      	uxth	r1, r1
 8009e5e:	3301      	adds	r3, #1
 8009e60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009e64:	429e      	cmp	r6, r3
 8009e66:	f840 1b04 	str.w	r1, [r0], #4
 8009e6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009e6e:	dcec      	bgt.n	8009e4a <__multadd+0x12>
 8009e70:	f1b8 0f00 	cmp.w	r8, #0
 8009e74:	d022      	beq.n	8009ebc <__multadd+0x84>
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	42b3      	cmp	r3, r6
 8009e7a:	dc19      	bgt.n	8009eb0 <__multadd+0x78>
 8009e7c:	6861      	ldr	r1, [r4, #4]
 8009e7e:	4638      	mov	r0, r7
 8009e80:	3101      	adds	r1, #1
 8009e82:	f7ff ff77 	bl	8009d74 <_Balloc>
 8009e86:	4605      	mov	r5, r0
 8009e88:	b928      	cbnz	r0, 8009e96 <__multadd+0x5e>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <__multadd+0x8c>)
 8009e8e:	480e      	ldr	r0, [pc, #56]	; (8009ec8 <__multadd+0x90>)
 8009e90:	21b5      	movs	r1, #181	; 0xb5
 8009e92:	f000 fde5 	bl	800aa60 <__assert_func>
 8009e96:	6922      	ldr	r2, [r4, #16]
 8009e98:	3202      	adds	r2, #2
 8009e9a:	f104 010c 	add.w	r1, r4, #12
 8009e9e:	0092      	lsls	r2, r2, #2
 8009ea0:	300c      	adds	r0, #12
 8009ea2:	f7fc ff37 	bl	8006d14 <memcpy>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f7ff ffa3 	bl	8009df4 <_Bfree>
 8009eae:	462c      	mov	r4, r5
 8009eb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009eb4:	3601      	adds	r6, #1
 8009eb6:	f8c3 8014 	str.w	r8, [r3, #20]
 8009eba:	6126      	str	r6, [r4, #16]
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0800e684 	.word	0x0800e684
 8009ec8:	0800e714 	.word	0x0800e714

08009ecc <__s2b>:
 8009ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	4615      	mov	r5, r2
 8009ed4:	461f      	mov	r7, r3
 8009ed6:	2209      	movs	r2, #9
 8009ed8:	3308      	adds	r3, #8
 8009eda:	4606      	mov	r6, r0
 8009edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	db09      	blt.n	8009efc <__s2b+0x30>
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff ff43 	bl	8009d74 <_Balloc>
 8009eee:	b940      	cbnz	r0, 8009f02 <__s2b+0x36>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <__s2b+0x8c>)
 8009ef4:	4819      	ldr	r0, [pc, #100]	; (8009f5c <__s2b+0x90>)
 8009ef6:	21ce      	movs	r1, #206	; 0xce
 8009ef8:	f000 fdb2 	bl	800aa60 <__assert_func>
 8009efc:	0052      	lsls	r2, r2, #1
 8009efe:	3101      	adds	r1, #1
 8009f00:	e7f0      	b.n	8009ee4 <__s2b+0x18>
 8009f02:	9b08      	ldr	r3, [sp, #32]
 8009f04:	6143      	str	r3, [r0, #20]
 8009f06:	2d09      	cmp	r5, #9
 8009f08:	f04f 0301 	mov.w	r3, #1
 8009f0c:	6103      	str	r3, [r0, #16]
 8009f0e:	dd16      	ble.n	8009f3e <__s2b+0x72>
 8009f10:	f104 0909 	add.w	r9, r4, #9
 8009f14:	46c8      	mov	r8, r9
 8009f16:	442c      	add	r4, r5
 8009f18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f1c:	4601      	mov	r1, r0
 8009f1e:	3b30      	subs	r3, #48	; 0x30
 8009f20:	220a      	movs	r2, #10
 8009f22:	4630      	mov	r0, r6
 8009f24:	f7ff ff88 	bl	8009e38 <__multadd>
 8009f28:	45a0      	cmp	r8, r4
 8009f2a:	d1f5      	bne.n	8009f18 <__s2b+0x4c>
 8009f2c:	f1a5 0408 	sub.w	r4, r5, #8
 8009f30:	444c      	add	r4, r9
 8009f32:	1b2d      	subs	r5, r5, r4
 8009f34:	1963      	adds	r3, r4, r5
 8009f36:	42bb      	cmp	r3, r7
 8009f38:	db04      	blt.n	8009f44 <__s2b+0x78>
 8009f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f3e:	340a      	adds	r4, #10
 8009f40:	2509      	movs	r5, #9
 8009f42:	e7f6      	b.n	8009f32 <__s2b+0x66>
 8009f44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f48:	4601      	mov	r1, r0
 8009f4a:	3b30      	subs	r3, #48	; 0x30
 8009f4c:	220a      	movs	r2, #10
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7ff ff72 	bl	8009e38 <__multadd>
 8009f54:	e7ee      	b.n	8009f34 <__s2b+0x68>
 8009f56:	bf00      	nop
 8009f58:	0800e684 	.word	0x0800e684
 8009f5c:	0800e714 	.word	0x0800e714

08009f60 <__hi0bits>:
 8009f60:	0c03      	lsrs	r3, r0, #16
 8009f62:	041b      	lsls	r3, r3, #16
 8009f64:	b9d3      	cbnz	r3, 8009f9c <__hi0bits+0x3c>
 8009f66:	0400      	lsls	r0, r0, #16
 8009f68:	2310      	movs	r3, #16
 8009f6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f6e:	bf04      	itt	eq
 8009f70:	0200      	lsleq	r0, r0, #8
 8009f72:	3308      	addeq	r3, #8
 8009f74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f78:	bf04      	itt	eq
 8009f7a:	0100      	lsleq	r0, r0, #4
 8009f7c:	3304      	addeq	r3, #4
 8009f7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f82:	bf04      	itt	eq
 8009f84:	0080      	lsleq	r0, r0, #2
 8009f86:	3302      	addeq	r3, #2
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	db05      	blt.n	8009f98 <__hi0bits+0x38>
 8009f8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f90:	f103 0301 	add.w	r3, r3, #1
 8009f94:	bf08      	it	eq
 8009f96:	2320      	moveq	r3, #32
 8009f98:	4618      	mov	r0, r3
 8009f9a:	4770      	bx	lr
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e7e4      	b.n	8009f6a <__hi0bits+0xa>

08009fa0 <__lo0bits>:
 8009fa0:	6803      	ldr	r3, [r0, #0]
 8009fa2:	f013 0207 	ands.w	r2, r3, #7
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	d00b      	beq.n	8009fc2 <__lo0bits+0x22>
 8009faa:	07da      	lsls	r2, r3, #31
 8009fac:	d424      	bmi.n	8009ff8 <__lo0bits+0x58>
 8009fae:	0798      	lsls	r0, r3, #30
 8009fb0:	bf49      	itett	mi
 8009fb2:	085b      	lsrmi	r3, r3, #1
 8009fb4:	089b      	lsrpl	r3, r3, #2
 8009fb6:	2001      	movmi	r0, #1
 8009fb8:	600b      	strmi	r3, [r1, #0]
 8009fba:	bf5c      	itt	pl
 8009fbc:	600b      	strpl	r3, [r1, #0]
 8009fbe:	2002      	movpl	r0, #2
 8009fc0:	4770      	bx	lr
 8009fc2:	b298      	uxth	r0, r3
 8009fc4:	b9b0      	cbnz	r0, 8009ff4 <__lo0bits+0x54>
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	2010      	movs	r0, #16
 8009fca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009fce:	bf04      	itt	eq
 8009fd0:	0a1b      	lsreq	r3, r3, #8
 8009fd2:	3008      	addeq	r0, #8
 8009fd4:	071a      	lsls	r2, r3, #28
 8009fd6:	bf04      	itt	eq
 8009fd8:	091b      	lsreq	r3, r3, #4
 8009fda:	3004      	addeq	r0, #4
 8009fdc:	079a      	lsls	r2, r3, #30
 8009fde:	bf04      	itt	eq
 8009fe0:	089b      	lsreq	r3, r3, #2
 8009fe2:	3002      	addeq	r0, #2
 8009fe4:	07da      	lsls	r2, r3, #31
 8009fe6:	d403      	bmi.n	8009ff0 <__lo0bits+0x50>
 8009fe8:	085b      	lsrs	r3, r3, #1
 8009fea:	f100 0001 	add.w	r0, r0, #1
 8009fee:	d005      	beq.n	8009ffc <__lo0bits+0x5c>
 8009ff0:	600b      	str	r3, [r1, #0]
 8009ff2:	4770      	bx	lr
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	e7e8      	b.n	8009fca <__lo0bits+0x2a>
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	4770      	bx	lr
 8009ffc:	2020      	movs	r0, #32
 8009ffe:	4770      	bx	lr

0800a000 <__i2b>:
 800a000:	b510      	push	{r4, lr}
 800a002:	460c      	mov	r4, r1
 800a004:	2101      	movs	r1, #1
 800a006:	f7ff feb5 	bl	8009d74 <_Balloc>
 800a00a:	4602      	mov	r2, r0
 800a00c:	b928      	cbnz	r0, 800a01a <__i2b+0x1a>
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <__i2b+0x24>)
 800a010:	4805      	ldr	r0, [pc, #20]	; (800a028 <__i2b+0x28>)
 800a012:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a016:	f000 fd23 	bl	800aa60 <__assert_func>
 800a01a:	2301      	movs	r3, #1
 800a01c:	6144      	str	r4, [r0, #20]
 800a01e:	6103      	str	r3, [r0, #16]
 800a020:	bd10      	pop	{r4, pc}
 800a022:	bf00      	nop
 800a024:	0800e684 	.word	0x0800e684
 800a028:	0800e714 	.word	0x0800e714

0800a02c <__multiply>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	4614      	mov	r4, r2
 800a032:	690a      	ldr	r2, [r1, #16]
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	429a      	cmp	r2, r3
 800a038:	bfb8      	it	lt
 800a03a:	460b      	movlt	r3, r1
 800a03c:	460d      	mov	r5, r1
 800a03e:	bfbc      	itt	lt
 800a040:	4625      	movlt	r5, r4
 800a042:	461c      	movlt	r4, r3
 800a044:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a048:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a04c:	68ab      	ldr	r3, [r5, #8]
 800a04e:	6869      	ldr	r1, [r5, #4]
 800a050:	eb0a 0709 	add.w	r7, sl, r9
 800a054:	42bb      	cmp	r3, r7
 800a056:	b085      	sub	sp, #20
 800a058:	bfb8      	it	lt
 800a05a:	3101      	addlt	r1, #1
 800a05c:	f7ff fe8a 	bl	8009d74 <_Balloc>
 800a060:	b930      	cbnz	r0, 800a070 <__multiply+0x44>
 800a062:	4602      	mov	r2, r0
 800a064:	4b42      	ldr	r3, [pc, #264]	; (800a170 <__multiply+0x144>)
 800a066:	4843      	ldr	r0, [pc, #268]	; (800a174 <__multiply+0x148>)
 800a068:	f240 115d 	movw	r1, #349	; 0x15d
 800a06c:	f000 fcf8 	bl	800aa60 <__assert_func>
 800a070:	f100 0614 	add.w	r6, r0, #20
 800a074:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a078:	4633      	mov	r3, r6
 800a07a:	2200      	movs	r2, #0
 800a07c:	4543      	cmp	r3, r8
 800a07e:	d31e      	bcc.n	800a0be <__multiply+0x92>
 800a080:	f105 0c14 	add.w	ip, r5, #20
 800a084:	f104 0314 	add.w	r3, r4, #20
 800a088:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a08c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a090:	9202      	str	r2, [sp, #8]
 800a092:	ebac 0205 	sub.w	r2, ip, r5
 800a096:	3a15      	subs	r2, #21
 800a098:	f022 0203 	bic.w	r2, r2, #3
 800a09c:	3204      	adds	r2, #4
 800a09e:	f105 0115 	add.w	r1, r5, #21
 800a0a2:	458c      	cmp	ip, r1
 800a0a4:	bf38      	it	cc
 800a0a6:	2204      	movcc	r2, #4
 800a0a8:	9201      	str	r2, [sp, #4]
 800a0aa:	9a02      	ldr	r2, [sp, #8]
 800a0ac:	9303      	str	r3, [sp, #12]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d808      	bhi.n	800a0c4 <__multiply+0x98>
 800a0b2:	2f00      	cmp	r7, #0
 800a0b4:	dc55      	bgt.n	800a162 <__multiply+0x136>
 800a0b6:	6107      	str	r7, [r0, #16]
 800a0b8:	b005      	add	sp, #20
 800a0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0be:	f843 2b04 	str.w	r2, [r3], #4
 800a0c2:	e7db      	b.n	800a07c <__multiply+0x50>
 800a0c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0c8:	f1ba 0f00 	cmp.w	sl, #0
 800a0cc:	d020      	beq.n	800a110 <__multiply+0xe4>
 800a0ce:	f105 0e14 	add.w	lr, r5, #20
 800a0d2:	46b1      	mov	r9, r6
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a0da:	f8d9 b000 	ldr.w	fp, [r9]
 800a0de:	b2a1      	uxth	r1, r4
 800a0e0:	fa1f fb8b 	uxth.w	fp, fp
 800a0e4:	fb0a b101 	mla	r1, sl, r1, fp
 800a0e8:	4411      	add	r1, r2
 800a0ea:	f8d9 2000 	ldr.w	r2, [r9]
 800a0ee:	0c24      	lsrs	r4, r4, #16
 800a0f0:	0c12      	lsrs	r2, r2, #16
 800a0f2:	fb0a 2404 	mla	r4, sl, r4, r2
 800a0f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a0fa:	b289      	uxth	r1, r1
 800a0fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a100:	45f4      	cmp	ip, lr
 800a102:	f849 1b04 	str.w	r1, [r9], #4
 800a106:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a10a:	d8e4      	bhi.n	800a0d6 <__multiply+0xaa>
 800a10c:	9901      	ldr	r1, [sp, #4]
 800a10e:	5072      	str	r2, [r6, r1]
 800a110:	9a03      	ldr	r2, [sp, #12]
 800a112:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a116:	3304      	adds	r3, #4
 800a118:	f1b9 0f00 	cmp.w	r9, #0
 800a11c:	d01f      	beq.n	800a15e <__multiply+0x132>
 800a11e:	6834      	ldr	r4, [r6, #0]
 800a120:	f105 0114 	add.w	r1, r5, #20
 800a124:	46b6      	mov	lr, r6
 800a126:	f04f 0a00 	mov.w	sl, #0
 800a12a:	880a      	ldrh	r2, [r1, #0]
 800a12c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a130:	fb09 b202 	mla	r2, r9, r2, fp
 800a134:	4492      	add	sl, r2
 800a136:	b2a4      	uxth	r4, r4
 800a138:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a13c:	f84e 4b04 	str.w	r4, [lr], #4
 800a140:	f851 4b04 	ldr.w	r4, [r1], #4
 800a144:	f8be 2000 	ldrh.w	r2, [lr]
 800a148:	0c24      	lsrs	r4, r4, #16
 800a14a:	fb09 2404 	mla	r4, r9, r4, r2
 800a14e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a152:	458c      	cmp	ip, r1
 800a154:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a158:	d8e7      	bhi.n	800a12a <__multiply+0xfe>
 800a15a:	9a01      	ldr	r2, [sp, #4]
 800a15c:	50b4      	str	r4, [r6, r2]
 800a15e:	3604      	adds	r6, #4
 800a160:	e7a3      	b.n	800a0aa <__multiply+0x7e>
 800a162:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1a5      	bne.n	800a0b6 <__multiply+0x8a>
 800a16a:	3f01      	subs	r7, #1
 800a16c:	e7a1      	b.n	800a0b2 <__multiply+0x86>
 800a16e:	bf00      	nop
 800a170:	0800e684 	.word	0x0800e684
 800a174:	0800e714 	.word	0x0800e714

0800a178 <__pow5mult>:
 800a178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a17c:	4615      	mov	r5, r2
 800a17e:	f012 0203 	ands.w	r2, r2, #3
 800a182:	4606      	mov	r6, r0
 800a184:	460f      	mov	r7, r1
 800a186:	d007      	beq.n	800a198 <__pow5mult+0x20>
 800a188:	4c25      	ldr	r4, [pc, #148]	; (800a220 <__pow5mult+0xa8>)
 800a18a:	3a01      	subs	r2, #1
 800a18c:	2300      	movs	r3, #0
 800a18e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a192:	f7ff fe51 	bl	8009e38 <__multadd>
 800a196:	4607      	mov	r7, r0
 800a198:	10ad      	asrs	r5, r5, #2
 800a19a:	d03d      	beq.n	800a218 <__pow5mult+0xa0>
 800a19c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a19e:	b97c      	cbnz	r4, 800a1c0 <__pow5mult+0x48>
 800a1a0:	2010      	movs	r0, #16
 800a1a2:	f7fc fdaf 	bl	8006d04 <malloc>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	6270      	str	r0, [r6, #36]	; 0x24
 800a1aa:	b928      	cbnz	r0, 800a1b8 <__pow5mult+0x40>
 800a1ac:	4b1d      	ldr	r3, [pc, #116]	; (800a224 <__pow5mult+0xac>)
 800a1ae:	481e      	ldr	r0, [pc, #120]	; (800a228 <__pow5mult+0xb0>)
 800a1b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1b4:	f000 fc54 	bl	800aa60 <__assert_func>
 800a1b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1bc:	6004      	str	r4, [r0, #0]
 800a1be:	60c4      	str	r4, [r0, #12]
 800a1c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1c8:	b94c      	cbnz	r4, 800a1de <__pow5mult+0x66>
 800a1ca:	f240 2171 	movw	r1, #625	; 0x271
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f7ff ff16 	bl	800a000 <__i2b>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1da:	4604      	mov	r4, r0
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	f04f 0900 	mov.w	r9, #0
 800a1e2:	07eb      	lsls	r3, r5, #31
 800a1e4:	d50a      	bpl.n	800a1fc <__pow5mult+0x84>
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7ff ff1e 	bl	800a02c <__multiply>
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	4680      	mov	r8, r0
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7ff fdfd 	bl	8009df4 <_Bfree>
 800a1fa:	4647      	mov	r7, r8
 800a1fc:	106d      	asrs	r5, r5, #1
 800a1fe:	d00b      	beq.n	800a218 <__pow5mult+0xa0>
 800a200:	6820      	ldr	r0, [r4, #0]
 800a202:	b938      	cbnz	r0, 800a214 <__pow5mult+0x9c>
 800a204:	4622      	mov	r2, r4
 800a206:	4621      	mov	r1, r4
 800a208:	4630      	mov	r0, r6
 800a20a:	f7ff ff0f 	bl	800a02c <__multiply>
 800a20e:	6020      	str	r0, [r4, #0]
 800a210:	f8c0 9000 	str.w	r9, [r0]
 800a214:	4604      	mov	r4, r0
 800a216:	e7e4      	b.n	800a1e2 <__pow5mult+0x6a>
 800a218:	4638      	mov	r0, r7
 800a21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21e:	bf00      	nop
 800a220:	0800e868 	.word	0x0800e868
 800a224:	0800e60e 	.word	0x0800e60e
 800a228:	0800e714 	.word	0x0800e714

0800a22c <__lshift>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	460c      	mov	r4, r1
 800a232:	6849      	ldr	r1, [r1, #4]
 800a234:	6923      	ldr	r3, [r4, #16]
 800a236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	4607      	mov	r7, r0
 800a23e:	4691      	mov	r9, r2
 800a240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a244:	f108 0601 	add.w	r6, r8, #1
 800a248:	42b3      	cmp	r3, r6
 800a24a:	db0b      	blt.n	800a264 <__lshift+0x38>
 800a24c:	4638      	mov	r0, r7
 800a24e:	f7ff fd91 	bl	8009d74 <_Balloc>
 800a252:	4605      	mov	r5, r0
 800a254:	b948      	cbnz	r0, 800a26a <__lshift+0x3e>
 800a256:	4602      	mov	r2, r0
 800a258:	4b28      	ldr	r3, [pc, #160]	; (800a2fc <__lshift+0xd0>)
 800a25a:	4829      	ldr	r0, [pc, #164]	; (800a300 <__lshift+0xd4>)
 800a25c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a260:	f000 fbfe 	bl	800aa60 <__assert_func>
 800a264:	3101      	adds	r1, #1
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	e7ee      	b.n	800a248 <__lshift+0x1c>
 800a26a:	2300      	movs	r3, #0
 800a26c:	f100 0114 	add.w	r1, r0, #20
 800a270:	f100 0210 	add.w	r2, r0, #16
 800a274:	4618      	mov	r0, r3
 800a276:	4553      	cmp	r3, sl
 800a278:	db33      	blt.n	800a2e2 <__lshift+0xb6>
 800a27a:	6920      	ldr	r0, [r4, #16]
 800a27c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a280:	f104 0314 	add.w	r3, r4, #20
 800a284:	f019 091f 	ands.w	r9, r9, #31
 800a288:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a28c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a290:	d02b      	beq.n	800a2ea <__lshift+0xbe>
 800a292:	f1c9 0e20 	rsb	lr, r9, #32
 800a296:	468a      	mov	sl, r1
 800a298:	2200      	movs	r2, #0
 800a29a:	6818      	ldr	r0, [r3, #0]
 800a29c:	fa00 f009 	lsl.w	r0, r0, r9
 800a2a0:	4302      	orrs	r2, r0
 800a2a2:	f84a 2b04 	str.w	r2, [sl], #4
 800a2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2aa:	459c      	cmp	ip, r3
 800a2ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2b0:	d8f3      	bhi.n	800a29a <__lshift+0x6e>
 800a2b2:	ebac 0304 	sub.w	r3, ip, r4
 800a2b6:	3b15      	subs	r3, #21
 800a2b8:	f023 0303 	bic.w	r3, r3, #3
 800a2bc:	3304      	adds	r3, #4
 800a2be:	f104 0015 	add.w	r0, r4, #21
 800a2c2:	4584      	cmp	ip, r0
 800a2c4:	bf38      	it	cc
 800a2c6:	2304      	movcc	r3, #4
 800a2c8:	50ca      	str	r2, [r1, r3]
 800a2ca:	b10a      	cbz	r2, 800a2d0 <__lshift+0xa4>
 800a2cc:	f108 0602 	add.w	r6, r8, #2
 800a2d0:	3e01      	subs	r6, #1
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	612e      	str	r6, [r5, #16]
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	f7ff fd8c 	bl	8009df4 <_Bfree>
 800a2dc:	4628      	mov	r0, r5
 800a2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	e7c5      	b.n	800a276 <__lshift+0x4a>
 800a2ea:	3904      	subs	r1, #4
 800a2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2f4:	459c      	cmp	ip, r3
 800a2f6:	d8f9      	bhi.n	800a2ec <__lshift+0xc0>
 800a2f8:	e7ea      	b.n	800a2d0 <__lshift+0xa4>
 800a2fa:	bf00      	nop
 800a2fc:	0800e684 	.word	0x0800e684
 800a300:	0800e714 	.word	0x0800e714

0800a304 <__mcmp>:
 800a304:	b530      	push	{r4, r5, lr}
 800a306:	6902      	ldr	r2, [r0, #16]
 800a308:	690c      	ldr	r4, [r1, #16]
 800a30a:	1b12      	subs	r2, r2, r4
 800a30c:	d10e      	bne.n	800a32c <__mcmp+0x28>
 800a30e:	f100 0314 	add.w	r3, r0, #20
 800a312:	3114      	adds	r1, #20
 800a314:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a318:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a31c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a320:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a324:	42a5      	cmp	r5, r4
 800a326:	d003      	beq.n	800a330 <__mcmp+0x2c>
 800a328:	d305      	bcc.n	800a336 <__mcmp+0x32>
 800a32a:	2201      	movs	r2, #1
 800a32c:	4610      	mov	r0, r2
 800a32e:	bd30      	pop	{r4, r5, pc}
 800a330:	4283      	cmp	r3, r0
 800a332:	d3f3      	bcc.n	800a31c <__mcmp+0x18>
 800a334:	e7fa      	b.n	800a32c <__mcmp+0x28>
 800a336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a33a:	e7f7      	b.n	800a32c <__mcmp+0x28>

0800a33c <__mdiff>:
 800a33c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	460c      	mov	r4, r1
 800a342:	4606      	mov	r6, r0
 800a344:	4611      	mov	r1, r2
 800a346:	4620      	mov	r0, r4
 800a348:	4617      	mov	r7, r2
 800a34a:	f7ff ffdb 	bl	800a304 <__mcmp>
 800a34e:	1e05      	subs	r5, r0, #0
 800a350:	d110      	bne.n	800a374 <__mdiff+0x38>
 800a352:	4629      	mov	r1, r5
 800a354:	4630      	mov	r0, r6
 800a356:	f7ff fd0d 	bl	8009d74 <_Balloc>
 800a35a:	b930      	cbnz	r0, 800a36a <__mdiff+0x2e>
 800a35c:	4b39      	ldr	r3, [pc, #228]	; (800a444 <__mdiff+0x108>)
 800a35e:	4602      	mov	r2, r0
 800a360:	f240 2132 	movw	r1, #562	; 0x232
 800a364:	4838      	ldr	r0, [pc, #224]	; (800a448 <__mdiff+0x10c>)
 800a366:	f000 fb7b 	bl	800aa60 <__assert_func>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a374:	bfa4      	itt	ge
 800a376:	463b      	movge	r3, r7
 800a378:	4627      	movge	r7, r4
 800a37a:	4630      	mov	r0, r6
 800a37c:	6879      	ldr	r1, [r7, #4]
 800a37e:	bfa6      	itte	ge
 800a380:	461c      	movge	r4, r3
 800a382:	2500      	movge	r5, #0
 800a384:	2501      	movlt	r5, #1
 800a386:	f7ff fcf5 	bl	8009d74 <_Balloc>
 800a38a:	b920      	cbnz	r0, 800a396 <__mdiff+0x5a>
 800a38c:	4b2d      	ldr	r3, [pc, #180]	; (800a444 <__mdiff+0x108>)
 800a38e:	4602      	mov	r2, r0
 800a390:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a394:	e7e6      	b.n	800a364 <__mdiff+0x28>
 800a396:	693e      	ldr	r6, [r7, #16]
 800a398:	60c5      	str	r5, [r0, #12]
 800a39a:	6925      	ldr	r5, [r4, #16]
 800a39c:	f107 0114 	add.w	r1, r7, #20
 800a3a0:	f104 0914 	add.w	r9, r4, #20
 800a3a4:	f100 0e14 	add.w	lr, r0, #20
 800a3a8:	f107 0210 	add.w	r2, r7, #16
 800a3ac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a3b0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a3b4:	46f2      	mov	sl, lr
 800a3b6:	2700      	movs	r7, #0
 800a3b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3c0:	fa1f f883 	uxth.w	r8, r3
 800a3c4:	fa17 f78b 	uxtah	r7, r7, fp
 800a3c8:	0c1b      	lsrs	r3, r3, #16
 800a3ca:	eba7 0808 	sub.w	r8, r7, r8
 800a3ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a3d6:	fa1f f888 	uxth.w	r8, r8
 800a3da:	141f      	asrs	r7, r3, #16
 800a3dc:	454d      	cmp	r5, r9
 800a3de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a3e2:	f84a 3b04 	str.w	r3, [sl], #4
 800a3e6:	d8e7      	bhi.n	800a3b8 <__mdiff+0x7c>
 800a3e8:	1b2b      	subs	r3, r5, r4
 800a3ea:	3b15      	subs	r3, #21
 800a3ec:	f023 0303 	bic.w	r3, r3, #3
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	3415      	adds	r4, #21
 800a3f4:	42a5      	cmp	r5, r4
 800a3f6:	bf38      	it	cc
 800a3f8:	2304      	movcc	r3, #4
 800a3fa:	4419      	add	r1, r3
 800a3fc:	4473      	add	r3, lr
 800a3fe:	469e      	mov	lr, r3
 800a400:	460d      	mov	r5, r1
 800a402:	4565      	cmp	r5, ip
 800a404:	d30e      	bcc.n	800a424 <__mdiff+0xe8>
 800a406:	f10c 0203 	add.w	r2, ip, #3
 800a40a:	1a52      	subs	r2, r2, r1
 800a40c:	f022 0203 	bic.w	r2, r2, #3
 800a410:	3903      	subs	r1, #3
 800a412:	458c      	cmp	ip, r1
 800a414:	bf38      	it	cc
 800a416:	2200      	movcc	r2, #0
 800a418:	441a      	add	r2, r3
 800a41a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a41e:	b17b      	cbz	r3, 800a440 <__mdiff+0x104>
 800a420:	6106      	str	r6, [r0, #16]
 800a422:	e7a5      	b.n	800a370 <__mdiff+0x34>
 800a424:	f855 8b04 	ldr.w	r8, [r5], #4
 800a428:	fa17 f488 	uxtah	r4, r7, r8
 800a42c:	1422      	asrs	r2, r4, #16
 800a42e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a432:	b2a4      	uxth	r4, r4
 800a434:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a438:	f84e 4b04 	str.w	r4, [lr], #4
 800a43c:	1417      	asrs	r7, r2, #16
 800a43e:	e7e0      	b.n	800a402 <__mdiff+0xc6>
 800a440:	3e01      	subs	r6, #1
 800a442:	e7ea      	b.n	800a41a <__mdiff+0xde>
 800a444:	0800e684 	.word	0x0800e684
 800a448:	0800e714 	.word	0x0800e714

0800a44c <__ulp>:
 800a44c:	b082      	sub	sp, #8
 800a44e:	ed8d 0b00 	vstr	d0, [sp]
 800a452:	9b01      	ldr	r3, [sp, #4]
 800a454:	4912      	ldr	r1, [pc, #72]	; (800a4a0 <__ulp+0x54>)
 800a456:	4019      	ands	r1, r3
 800a458:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a45c:	2900      	cmp	r1, #0
 800a45e:	dd05      	ble.n	800a46c <__ulp+0x20>
 800a460:	2200      	movs	r2, #0
 800a462:	460b      	mov	r3, r1
 800a464:	ec43 2b10 	vmov	d0, r2, r3
 800a468:	b002      	add	sp, #8
 800a46a:	4770      	bx	lr
 800a46c:	4249      	negs	r1, r1
 800a46e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a472:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a476:	f04f 0200 	mov.w	r2, #0
 800a47a:	f04f 0300 	mov.w	r3, #0
 800a47e:	da04      	bge.n	800a48a <__ulp+0x3e>
 800a480:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a484:	fa41 f300 	asr.w	r3, r1, r0
 800a488:	e7ec      	b.n	800a464 <__ulp+0x18>
 800a48a:	f1a0 0114 	sub.w	r1, r0, #20
 800a48e:	291e      	cmp	r1, #30
 800a490:	bfda      	itte	le
 800a492:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a496:	fa20 f101 	lsrle.w	r1, r0, r1
 800a49a:	2101      	movgt	r1, #1
 800a49c:	460a      	mov	r2, r1
 800a49e:	e7e1      	b.n	800a464 <__ulp+0x18>
 800a4a0:	7ff00000 	.word	0x7ff00000

0800a4a4 <__b2d>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	6905      	ldr	r5, [r0, #16]
 800a4a8:	f100 0714 	add.w	r7, r0, #20
 800a4ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a4b0:	1f2e      	subs	r6, r5, #4
 800a4b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f7ff fd52 	bl	8009f60 <__hi0bits>
 800a4bc:	f1c0 0320 	rsb	r3, r0, #32
 800a4c0:	280a      	cmp	r0, #10
 800a4c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a540 <__b2d+0x9c>
 800a4c6:	600b      	str	r3, [r1, #0]
 800a4c8:	dc14      	bgt.n	800a4f4 <__b2d+0x50>
 800a4ca:	f1c0 0e0b 	rsb	lr, r0, #11
 800a4ce:	fa24 f10e 	lsr.w	r1, r4, lr
 800a4d2:	42b7      	cmp	r7, r6
 800a4d4:	ea41 030c 	orr.w	r3, r1, ip
 800a4d8:	bf34      	ite	cc
 800a4da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a4de:	2100      	movcs	r1, #0
 800a4e0:	3015      	adds	r0, #21
 800a4e2:	fa04 f000 	lsl.w	r0, r4, r0
 800a4e6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a4ea:	ea40 0201 	orr.w	r2, r0, r1
 800a4ee:	ec43 2b10 	vmov	d0, r2, r3
 800a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f4:	42b7      	cmp	r7, r6
 800a4f6:	bf3a      	itte	cc
 800a4f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a4fc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a500:	2100      	movcs	r1, #0
 800a502:	380b      	subs	r0, #11
 800a504:	d017      	beq.n	800a536 <__b2d+0x92>
 800a506:	f1c0 0c20 	rsb	ip, r0, #32
 800a50a:	fa04 f500 	lsl.w	r5, r4, r0
 800a50e:	42be      	cmp	r6, r7
 800a510:	fa21 f40c 	lsr.w	r4, r1, ip
 800a514:	ea45 0504 	orr.w	r5, r5, r4
 800a518:	bf8c      	ite	hi
 800a51a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a51e:	2400      	movls	r4, #0
 800a520:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a524:	fa01 f000 	lsl.w	r0, r1, r0
 800a528:	fa24 f40c 	lsr.w	r4, r4, ip
 800a52c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a530:	ea40 0204 	orr.w	r2, r0, r4
 800a534:	e7db      	b.n	800a4ee <__b2d+0x4a>
 800a536:	ea44 030c 	orr.w	r3, r4, ip
 800a53a:	460a      	mov	r2, r1
 800a53c:	e7d7      	b.n	800a4ee <__b2d+0x4a>
 800a53e:	bf00      	nop
 800a540:	3ff00000 	.word	0x3ff00000

0800a544 <__d2b>:
 800a544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a548:	4689      	mov	r9, r1
 800a54a:	2101      	movs	r1, #1
 800a54c:	ec57 6b10 	vmov	r6, r7, d0
 800a550:	4690      	mov	r8, r2
 800a552:	f7ff fc0f 	bl	8009d74 <_Balloc>
 800a556:	4604      	mov	r4, r0
 800a558:	b930      	cbnz	r0, 800a568 <__d2b+0x24>
 800a55a:	4602      	mov	r2, r0
 800a55c:	4b25      	ldr	r3, [pc, #148]	; (800a5f4 <__d2b+0xb0>)
 800a55e:	4826      	ldr	r0, [pc, #152]	; (800a5f8 <__d2b+0xb4>)
 800a560:	f240 310a 	movw	r1, #778	; 0x30a
 800a564:	f000 fa7c 	bl	800aa60 <__assert_func>
 800a568:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a56c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a570:	bb35      	cbnz	r5, 800a5c0 <__d2b+0x7c>
 800a572:	2e00      	cmp	r6, #0
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	d028      	beq.n	800a5ca <__d2b+0x86>
 800a578:	4668      	mov	r0, sp
 800a57a:	9600      	str	r6, [sp, #0]
 800a57c:	f7ff fd10 	bl	8009fa0 <__lo0bits>
 800a580:	9900      	ldr	r1, [sp, #0]
 800a582:	b300      	cbz	r0, 800a5c6 <__d2b+0x82>
 800a584:	9a01      	ldr	r2, [sp, #4]
 800a586:	f1c0 0320 	rsb	r3, r0, #32
 800a58a:	fa02 f303 	lsl.w	r3, r2, r3
 800a58e:	430b      	orrs	r3, r1
 800a590:	40c2      	lsrs	r2, r0
 800a592:	6163      	str	r3, [r4, #20]
 800a594:	9201      	str	r2, [sp, #4]
 800a596:	9b01      	ldr	r3, [sp, #4]
 800a598:	61a3      	str	r3, [r4, #24]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bf14      	ite	ne
 800a59e:	2202      	movne	r2, #2
 800a5a0:	2201      	moveq	r2, #1
 800a5a2:	6122      	str	r2, [r4, #16]
 800a5a4:	b1d5      	cbz	r5, 800a5dc <__d2b+0x98>
 800a5a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5aa:	4405      	add	r5, r0
 800a5ac:	f8c9 5000 	str.w	r5, [r9]
 800a5b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5b4:	f8c8 0000 	str.w	r0, [r8]
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	b003      	add	sp, #12
 800a5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5c4:	e7d5      	b.n	800a572 <__d2b+0x2e>
 800a5c6:	6161      	str	r1, [r4, #20]
 800a5c8:	e7e5      	b.n	800a596 <__d2b+0x52>
 800a5ca:	a801      	add	r0, sp, #4
 800a5cc:	f7ff fce8 	bl	8009fa0 <__lo0bits>
 800a5d0:	9b01      	ldr	r3, [sp, #4]
 800a5d2:	6163      	str	r3, [r4, #20]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	6122      	str	r2, [r4, #16]
 800a5d8:	3020      	adds	r0, #32
 800a5da:	e7e3      	b.n	800a5a4 <__d2b+0x60>
 800a5dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5e4:	f8c9 0000 	str.w	r0, [r9]
 800a5e8:	6918      	ldr	r0, [r3, #16]
 800a5ea:	f7ff fcb9 	bl	8009f60 <__hi0bits>
 800a5ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5f2:	e7df      	b.n	800a5b4 <__d2b+0x70>
 800a5f4:	0800e684 	.word	0x0800e684
 800a5f8:	0800e714 	.word	0x0800e714

0800a5fc <__ratio>:
 800a5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	4688      	mov	r8, r1
 800a602:	4669      	mov	r1, sp
 800a604:	4681      	mov	r9, r0
 800a606:	f7ff ff4d 	bl	800a4a4 <__b2d>
 800a60a:	a901      	add	r1, sp, #4
 800a60c:	4640      	mov	r0, r8
 800a60e:	ec55 4b10 	vmov	r4, r5, d0
 800a612:	f7ff ff47 	bl	800a4a4 <__b2d>
 800a616:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a61a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a61e:	eba3 0c02 	sub.w	ip, r3, r2
 800a622:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a626:	1a9b      	subs	r3, r3, r2
 800a628:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a62c:	ec51 0b10 	vmov	r0, r1, d0
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfd6      	itet	le
 800a634:	460a      	movle	r2, r1
 800a636:	462a      	movgt	r2, r5
 800a638:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a63c:	468b      	mov	fp, r1
 800a63e:	462f      	mov	r7, r5
 800a640:	bfd4      	ite	le
 800a642:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a646:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a64a:	4620      	mov	r0, r4
 800a64c:	ee10 2a10 	vmov	r2, s0
 800a650:	465b      	mov	r3, fp
 800a652:	4639      	mov	r1, r7
 800a654:	f7f6 f8fa 	bl	800084c <__aeabi_ddiv>
 800a658:	ec41 0b10 	vmov	d0, r0, r1
 800a65c:	b003      	add	sp, #12
 800a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a662 <__copybits>:
 800a662:	3901      	subs	r1, #1
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	1149      	asrs	r1, r1, #5
 800a668:	6914      	ldr	r4, [r2, #16]
 800a66a:	3101      	adds	r1, #1
 800a66c:	f102 0314 	add.w	r3, r2, #20
 800a670:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a674:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a678:	1f05      	subs	r5, r0, #4
 800a67a:	42a3      	cmp	r3, r4
 800a67c:	d30c      	bcc.n	800a698 <__copybits+0x36>
 800a67e:	1aa3      	subs	r3, r4, r2
 800a680:	3b11      	subs	r3, #17
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	3211      	adds	r2, #17
 800a688:	42a2      	cmp	r2, r4
 800a68a:	bf88      	it	hi
 800a68c:	2300      	movhi	r3, #0
 800a68e:	4418      	add	r0, r3
 800a690:	2300      	movs	r3, #0
 800a692:	4288      	cmp	r0, r1
 800a694:	d305      	bcc.n	800a6a2 <__copybits+0x40>
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	f853 6b04 	ldr.w	r6, [r3], #4
 800a69c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6a0:	e7eb      	b.n	800a67a <__copybits+0x18>
 800a6a2:	f840 3b04 	str.w	r3, [r0], #4
 800a6a6:	e7f4      	b.n	800a692 <__copybits+0x30>

0800a6a8 <__any_on>:
 800a6a8:	f100 0214 	add.w	r2, r0, #20
 800a6ac:	6900      	ldr	r0, [r0, #16]
 800a6ae:	114b      	asrs	r3, r1, #5
 800a6b0:	4298      	cmp	r0, r3
 800a6b2:	b510      	push	{r4, lr}
 800a6b4:	db11      	blt.n	800a6da <__any_on+0x32>
 800a6b6:	dd0a      	ble.n	800a6ce <__any_on+0x26>
 800a6b8:	f011 011f 	ands.w	r1, r1, #31
 800a6bc:	d007      	beq.n	800a6ce <__any_on+0x26>
 800a6be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6c2:	fa24 f001 	lsr.w	r0, r4, r1
 800a6c6:	fa00 f101 	lsl.w	r1, r0, r1
 800a6ca:	428c      	cmp	r4, r1
 800a6cc:	d10b      	bne.n	800a6e6 <__any_on+0x3e>
 800a6ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d803      	bhi.n	800a6de <__any_on+0x36>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	bd10      	pop	{r4, pc}
 800a6da:	4603      	mov	r3, r0
 800a6dc:	e7f7      	b.n	800a6ce <__any_on+0x26>
 800a6de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6e2:	2900      	cmp	r1, #0
 800a6e4:	d0f5      	beq.n	800a6d2 <__any_on+0x2a>
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	e7f6      	b.n	800a6d8 <__any_on+0x30>

0800a6ea <_calloc_r>:
 800a6ea:	b513      	push	{r0, r1, r4, lr}
 800a6ec:	434a      	muls	r2, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	9201      	str	r2, [sp, #4]
 800a6f2:	f7fc fb75 	bl	8006de0 <_malloc_r>
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	b118      	cbz	r0, 800a702 <_calloc_r+0x18>
 800a6fa:	9a01      	ldr	r2, [sp, #4]
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	f7fc fb17 	bl	8006d30 <memset>
 800a702:	4620      	mov	r0, r4
 800a704:	b002      	add	sp, #8
 800a706:	bd10      	pop	{r4, pc}

0800a708 <_realloc_r>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	4607      	mov	r7, r0
 800a70c:	4614      	mov	r4, r2
 800a70e:	460e      	mov	r6, r1
 800a710:	b921      	cbnz	r1, 800a71c <_realloc_r+0x14>
 800a712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a716:	4611      	mov	r1, r2
 800a718:	f7fc bb62 	b.w	8006de0 <_malloc_r>
 800a71c:	b922      	cbnz	r2, 800a728 <_realloc_r+0x20>
 800a71e:	f7fc fb0f 	bl	8006d40 <_free_r>
 800a722:	4625      	mov	r5, r4
 800a724:	4628      	mov	r0, r5
 800a726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a728:	f000 f9e7 	bl	800aafa <_malloc_usable_size_r>
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d20f      	bcs.n	800a750 <_realloc_r+0x48>
 800a730:	4621      	mov	r1, r4
 800a732:	4638      	mov	r0, r7
 800a734:	f7fc fb54 	bl	8006de0 <_malloc_r>
 800a738:	4605      	mov	r5, r0
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0f2      	beq.n	800a724 <_realloc_r+0x1c>
 800a73e:	4631      	mov	r1, r6
 800a740:	4622      	mov	r2, r4
 800a742:	f7fc fae7 	bl	8006d14 <memcpy>
 800a746:	4631      	mov	r1, r6
 800a748:	4638      	mov	r0, r7
 800a74a:	f7fc faf9 	bl	8006d40 <_free_r>
 800a74e:	e7e9      	b.n	800a724 <_realloc_r+0x1c>
 800a750:	4635      	mov	r5, r6
 800a752:	e7e7      	b.n	800a724 <_realloc_r+0x1c>

0800a754 <__ssputs_r>:
 800a754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a758:	688e      	ldr	r6, [r1, #8]
 800a75a:	429e      	cmp	r6, r3
 800a75c:	4682      	mov	sl, r0
 800a75e:	460c      	mov	r4, r1
 800a760:	4690      	mov	r8, r2
 800a762:	461f      	mov	r7, r3
 800a764:	d838      	bhi.n	800a7d8 <__ssputs_r+0x84>
 800a766:	898a      	ldrh	r2, [r1, #12]
 800a768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a76c:	d032      	beq.n	800a7d4 <__ssputs_r+0x80>
 800a76e:	6825      	ldr	r5, [r4, #0]
 800a770:	6909      	ldr	r1, [r1, #16]
 800a772:	eba5 0901 	sub.w	r9, r5, r1
 800a776:	6965      	ldr	r5, [r4, #20]
 800a778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a780:	3301      	adds	r3, #1
 800a782:	444b      	add	r3, r9
 800a784:	106d      	asrs	r5, r5, #1
 800a786:	429d      	cmp	r5, r3
 800a788:	bf38      	it	cc
 800a78a:	461d      	movcc	r5, r3
 800a78c:	0553      	lsls	r3, r2, #21
 800a78e:	d531      	bpl.n	800a7f4 <__ssputs_r+0xa0>
 800a790:	4629      	mov	r1, r5
 800a792:	f7fc fb25 	bl	8006de0 <_malloc_r>
 800a796:	4606      	mov	r6, r0
 800a798:	b950      	cbnz	r0, 800a7b0 <__ssputs_r+0x5c>
 800a79a:	230c      	movs	r3, #12
 800a79c:	f8ca 3000 	str.w	r3, [sl]
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a6:	81a3      	strh	r3, [r4, #12]
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b0:	6921      	ldr	r1, [r4, #16]
 800a7b2:	464a      	mov	r2, r9
 800a7b4:	f7fc faae 	bl	8006d14 <memcpy>
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	6126      	str	r6, [r4, #16]
 800a7c6:	6165      	str	r5, [r4, #20]
 800a7c8:	444e      	add	r6, r9
 800a7ca:	eba5 0509 	sub.w	r5, r5, r9
 800a7ce:	6026      	str	r6, [r4, #0]
 800a7d0:	60a5      	str	r5, [r4, #8]
 800a7d2:	463e      	mov	r6, r7
 800a7d4:	42be      	cmp	r6, r7
 800a7d6:	d900      	bls.n	800a7da <__ssputs_r+0x86>
 800a7d8:	463e      	mov	r6, r7
 800a7da:	4632      	mov	r2, r6
 800a7dc:	6820      	ldr	r0, [r4, #0]
 800a7de:	4641      	mov	r1, r8
 800a7e0:	f000 f971 	bl	800aac6 <memmove>
 800a7e4:	68a3      	ldr	r3, [r4, #8]
 800a7e6:	6822      	ldr	r2, [r4, #0]
 800a7e8:	1b9b      	subs	r3, r3, r6
 800a7ea:	4432      	add	r2, r6
 800a7ec:	60a3      	str	r3, [r4, #8]
 800a7ee:	6022      	str	r2, [r4, #0]
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e7db      	b.n	800a7ac <__ssputs_r+0x58>
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	f7ff ff87 	bl	800a708 <_realloc_r>
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d1e1      	bne.n	800a7c4 <__ssputs_r+0x70>
 800a800:	6921      	ldr	r1, [r4, #16]
 800a802:	4650      	mov	r0, sl
 800a804:	f7fc fa9c 	bl	8006d40 <_free_r>
 800a808:	e7c7      	b.n	800a79a <__ssputs_r+0x46>
	...

0800a80c <_svfiprintf_r>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	4698      	mov	r8, r3
 800a812:	898b      	ldrh	r3, [r1, #12]
 800a814:	061b      	lsls	r3, r3, #24
 800a816:	b09d      	sub	sp, #116	; 0x74
 800a818:	4607      	mov	r7, r0
 800a81a:	460d      	mov	r5, r1
 800a81c:	4614      	mov	r4, r2
 800a81e:	d50e      	bpl.n	800a83e <_svfiprintf_r+0x32>
 800a820:	690b      	ldr	r3, [r1, #16]
 800a822:	b963      	cbnz	r3, 800a83e <_svfiprintf_r+0x32>
 800a824:	2140      	movs	r1, #64	; 0x40
 800a826:	f7fc fadb 	bl	8006de0 <_malloc_r>
 800a82a:	6028      	str	r0, [r5, #0]
 800a82c:	6128      	str	r0, [r5, #16]
 800a82e:	b920      	cbnz	r0, 800a83a <_svfiprintf_r+0x2e>
 800a830:	230c      	movs	r3, #12
 800a832:	603b      	str	r3, [r7, #0]
 800a834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a838:	e0d1      	b.n	800a9de <_svfiprintf_r+0x1d2>
 800a83a:	2340      	movs	r3, #64	; 0x40
 800a83c:	616b      	str	r3, [r5, #20]
 800a83e:	2300      	movs	r3, #0
 800a840:	9309      	str	r3, [sp, #36]	; 0x24
 800a842:	2320      	movs	r3, #32
 800a844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a848:	f8cd 800c 	str.w	r8, [sp, #12]
 800a84c:	2330      	movs	r3, #48	; 0x30
 800a84e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a9f8 <_svfiprintf_r+0x1ec>
 800a852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a856:	f04f 0901 	mov.w	r9, #1
 800a85a:	4623      	mov	r3, r4
 800a85c:	469a      	mov	sl, r3
 800a85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a862:	b10a      	cbz	r2, 800a868 <_svfiprintf_r+0x5c>
 800a864:	2a25      	cmp	r2, #37	; 0x25
 800a866:	d1f9      	bne.n	800a85c <_svfiprintf_r+0x50>
 800a868:	ebba 0b04 	subs.w	fp, sl, r4
 800a86c:	d00b      	beq.n	800a886 <_svfiprintf_r+0x7a>
 800a86e:	465b      	mov	r3, fp
 800a870:	4622      	mov	r2, r4
 800a872:	4629      	mov	r1, r5
 800a874:	4638      	mov	r0, r7
 800a876:	f7ff ff6d 	bl	800a754 <__ssputs_r>
 800a87a:	3001      	adds	r0, #1
 800a87c:	f000 80aa 	beq.w	800a9d4 <_svfiprintf_r+0x1c8>
 800a880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a882:	445a      	add	r2, fp
 800a884:	9209      	str	r2, [sp, #36]	; 0x24
 800a886:	f89a 3000 	ldrb.w	r3, [sl]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 80a2 	beq.w	800a9d4 <_svfiprintf_r+0x1c8>
 800a890:	2300      	movs	r3, #0
 800a892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a89a:	f10a 0a01 	add.w	sl, sl, #1
 800a89e:	9304      	str	r3, [sp, #16]
 800a8a0:	9307      	str	r3, [sp, #28]
 800a8a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a8a8:	4654      	mov	r4, sl
 800a8aa:	2205      	movs	r2, #5
 800a8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b0:	4851      	ldr	r0, [pc, #324]	; (800a9f8 <_svfiprintf_r+0x1ec>)
 800a8b2:	f7f5 fc95 	bl	80001e0 <memchr>
 800a8b6:	9a04      	ldr	r2, [sp, #16]
 800a8b8:	b9d8      	cbnz	r0, 800a8f2 <_svfiprintf_r+0xe6>
 800a8ba:	06d0      	lsls	r0, r2, #27
 800a8bc:	bf44      	itt	mi
 800a8be:	2320      	movmi	r3, #32
 800a8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8c4:	0711      	lsls	r1, r2, #28
 800a8c6:	bf44      	itt	mi
 800a8c8:	232b      	movmi	r3, #43	; 0x2b
 800a8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d4:	d015      	beq.n	800a902 <_svfiprintf_r+0xf6>
 800a8d6:	9a07      	ldr	r2, [sp, #28]
 800a8d8:	4654      	mov	r4, sl
 800a8da:	2000      	movs	r0, #0
 800a8dc:	f04f 0c0a 	mov.w	ip, #10
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8e6:	3b30      	subs	r3, #48	; 0x30
 800a8e8:	2b09      	cmp	r3, #9
 800a8ea:	d94e      	bls.n	800a98a <_svfiprintf_r+0x17e>
 800a8ec:	b1b0      	cbz	r0, 800a91c <_svfiprintf_r+0x110>
 800a8ee:	9207      	str	r2, [sp, #28]
 800a8f0:	e014      	b.n	800a91c <_svfiprintf_r+0x110>
 800a8f2:	eba0 0308 	sub.w	r3, r0, r8
 800a8f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	9304      	str	r3, [sp, #16]
 800a8fe:	46a2      	mov	sl, r4
 800a900:	e7d2      	b.n	800a8a8 <_svfiprintf_r+0x9c>
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	1d19      	adds	r1, r3, #4
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	9103      	str	r1, [sp, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	bfbb      	ittet	lt
 800a90e:	425b      	neglt	r3, r3
 800a910:	f042 0202 	orrlt.w	r2, r2, #2
 800a914:	9307      	strge	r3, [sp, #28]
 800a916:	9307      	strlt	r3, [sp, #28]
 800a918:	bfb8      	it	lt
 800a91a:	9204      	strlt	r2, [sp, #16]
 800a91c:	7823      	ldrb	r3, [r4, #0]
 800a91e:	2b2e      	cmp	r3, #46	; 0x2e
 800a920:	d10c      	bne.n	800a93c <_svfiprintf_r+0x130>
 800a922:	7863      	ldrb	r3, [r4, #1]
 800a924:	2b2a      	cmp	r3, #42	; 0x2a
 800a926:	d135      	bne.n	800a994 <_svfiprintf_r+0x188>
 800a928:	9b03      	ldr	r3, [sp, #12]
 800a92a:	1d1a      	adds	r2, r3, #4
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	9203      	str	r2, [sp, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	bfb8      	it	lt
 800a934:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a938:	3402      	adds	r4, #2
 800a93a:	9305      	str	r3, [sp, #20]
 800a93c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa08 <_svfiprintf_r+0x1fc>
 800a940:	7821      	ldrb	r1, [r4, #0]
 800a942:	2203      	movs	r2, #3
 800a944:	4650      	mov	r0, sl
 800a946:	f7f5 fc4b 	bl	80001e0 <memchr>
 800a94a:	b140      	cbz	r0, 800a95e <_svfiprintf_r+0x152>
 800a94c:	2340      	movs	r3, #64	; 0x40
 800a94e:	eba0 000a 	sub.w	r0, r0, sl
 800a952:	fa03 f000 	lsl.w	r0, r3, r0
 800a956:	9b04      	ldr	r3, [sp, #16]
 800a958:	4303      	orrs	r3, r0
 800a95a:	3401      	adds	r4, #1
 800a95c:	9304      	str	r3, [sp, #16]
 800a95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a962:	4826      	ldr	r0, [pc, #152]	; (800a9fc <_svfiprintf_r+0x1f0>)
 800a964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a968:	2206      	movs	r2, #6
 800a96a:	f7f5 fc39 	bl	80001e0 <memchr>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d038      	beq.n	800a9e4 <_svfiprintf_r+0x1d8>
 800a972:	4b23      	ldr	r3, [pc, #140]	; (800aa00 <_svfiprintf_r+0x1f4>)
 800a974:	bb1b      	cbnz	r3, 800a9be <_svfiprintf_r+0x1b2>
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	3307      	adds	r3, #7
 800a97a:	f023 0307 	bic.w	r3, r3, #7
 800a97e:	3308      	adds	r3, #8
 800a980:	9303      	str	r3, [sp, #12]
 800a982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a984:	4433      	add	r3, r6
 800a986:	9309      	str	r3, [sp, #36]	; 0x24
 800a988:	e767      	b.n	800a85a <_svfiprintf_r+0x4e>
 800a98a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a98e:	460c      	mov	r4, r1
 800a990:	2001      	movs	r0, #1
 800a992:	e7a5      	b.n	800a8e0 <_svfiprintf_r+0xd4>
 800a994:	2300      	movs	r3, #0
 800a996:	3401      	adds	r4, #1
 800a998:	9305      	str	r3, [sp, #20]
 800a99a:	4619      	mov	r1, r3
 800a99c:	f04f 0c0a 	mov.w	ip, #10
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9a6:	3a30      	subs	r2, #48	; 0x30
 800a9a8:	2a09      	cmp	r2, #9
 800a9aa:	d903      	bls.n	800a9b4 <_svfiprintf_r+0x1a8>
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0c5      	beq.n	800a93c <_svfiprintf_r+0x130>
 800a9b0:	9105      	str	r1, [sp, #20]
 800a9b2:	e7c3      	b.n	800a93c <_svfiprintf_r+0x130>
 800a9b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e7f0      	b.n	800a9a0 <_svfiprintf_r+0x194>
 800a9be:	ab03      	add	r3, sp, #12
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <_svfiprintf_r+0x1f8>)
 800a9c6:	a904      	add	r1, sp, #16
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f7fc fb03 	bl	8006fd4 <_printf_float>
 800a9ce:	1c42      	adds	r2, r0, #1
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	d1d6      	bne.n	800a982 <_svfiprintf_r+0x176>
 800a9d4:	89ab      	ldrh	r3, [r5, #12]
 800a9d6:	065b      	lsls	r3, r3, #25
 800a9d8:	f53f af2c 	bmi.w	800a834 <_svfiprintf_r+0x28>
 800a9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9de:	b01d      	add	sp, #116	; 0x74
 800a9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e4:	ab03      	add	r3, sp, #12
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	462a      	mov	r2, r5
 800a9ea:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <_svfiprintf_r+0x1f8>)
 800a9ec:	a904      	add	r1, sp, #16
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	f7fc fd94 	bl	800751c <_printf_i>
 800a9f4:	e7eb      	b.n	800a9ce <_svfiprintf_r+0x1c2>
 800a9f6:	bf00      	nop
 800a9f8:	0800e874 	.word	0x0800e874
 800a9fc:	0800e87e 	.word	0x0800e87e
 800aa00:	08006fd5 	.word	0x08006fd5
 800aa04:	0800a755 	.word	0x0800a755
 800aa08:	0800e87a 	.word	0x0800e87a
 800aa0c:	00000000 	.word	0x00000000

0800aa10 <nan>:
 800aa10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa18 <nan+0x8>
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	00000000 	.word	0x00000000
 800aa1c:	7ff80000 	.word	0x7ff80000

0800aa20 <strncmp>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	b16a      	cbz	r2, 800aa40 <strncmp+0x20>
 800aa24:	3901      	subs	r1, #1
 800aa26:	1884      	adds	r4, r0, r2
 800aa28:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d103      	bne.n	800aa3c <strncmp+0x1c>
 800aa34:	42a0      	cmp	r0, r4
 800aa36:	d001      	beq.n	800aa3c <strncmp+0x1c>
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1f5      	bne.n	800aa28 <strncmp+0x8>
 800aa3c:	1a98      	subs	r0, r3, r2
 800aa3e:	bd10      	pop	{r4, pc}
 800aa40:	4610      	mov	r0, r2
 800aa42:	e7fc      	b.n	800aa3e <strncmp+0x1e>

0800aa44 <__ascii_wctomb>:
 800aa44:	b149      	cbz	r1, 800aa5a <__ascii_wctomb+0x16>
 800aa46:	2aff      	cmp	r2, #255	; 0xff
 800aa48:	bf85      	ittet	hi
 800aa4a:	238a      	movhi	r3, #138	; 0x8a
 800aa4c:	6003      	strhi	r3, [r0, #0]
 800aa4e:	700a      	strbls	r2, [r1, #0]
 800aa50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aa54:	bf98      	it	ls
 800aa56:	2001      	movls	r0, #1
 800aa58:	4770      	bx	lr
 800aa5a:	4608      	mov	r0, r1
 800aa5c:	4770      	bx	lr
	...

0800aa60 <__assert_func>:
 800aa60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa62:	4614      	mov	r4, r2
 800aa64:	461a      	mov	r2, r3
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <__assert_func+0x2c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	68d8      	ldr	r0, [r3, #12]
 800aa6e:	b14c      	cbz	r4, 800aa84 <__assert_func+0x24>
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <__assert_func+0x30>)
 800aa72:	9100      	str	r1, [sp, #0]
 800aa74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa78:	4906      	ldr	r1, [pc, #24]	; (800aa94 <__assert_func+0x34>)
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	f000 f80e 	bl	800aa9c <fiprintf>
 800aa80:	f000 fa5c 	bl	800af3c <abort>
 800aa84:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <__assert_func+0x38>)
 800aa86:	461c      	mov	r4, r3
 800aa88:	e7f3      	b.n	800aa72 <__assert_func+0x12>
 800aa8a:	bf00      	nop
 800aa8c:	20000410 	.word	0x20000410
 800aa90:	0800e885 	.word	0x0800e885
 800aa94:	0800e892 	.word	0x0800e892
 800aa98:	0800e8c0 	.word	0x0800e8c0

0800aa9c <fiprintf>:
 800aa9c:	b40e      	push	{r1, r2, r3}
 800aa9e:	b503      	push	{r0, r1, lr}
 800aaa0:	4601      	mov	r1, r0
 800aaa2:	ab03      	add	r3, sp, #12
 800aaa4:	4805      	ldr	r0, [pc, #20]	; (800aabc <fiprintf+0x20>)
 800aaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaaa:	6800      	ldr	r0, [r0, #0]
 800aaac:	9301      	str	r3, [sp, #4]
 800aaae:	f000 f855 	bl	800ab5c <_vfiprintf_r>
 800aab2:	b002      	add	sp, #8
 800aab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aab8:	b003      	add	sp, #12
 800aaba:	4770      	bx	lr
 800aabc:	20000410 	.word	0x20000410

0800aac0 <__retarget_lock_init_recursive>:
 800aac0:	4770      	bx	lr

0800aac2 <__retarget_lock_acquire_recursive>:
 800aac2:	4770      	bx	lr

0800aac4 <__retarget_lock_release_recursive>:
 800aac4:	4770      	bx	lr

0800aac6 <memmove>:
 800aac6:	4288      	cmp	r0, r1
 800aac8:	b510      	push	{r4, lr}
 800aaca:	eb01 0402 	add.w	r4, r1, r2
 800aace:	d902      	bls.n	800aad6 <memmove+0x10>
 800aad0:	4284      	cmp	r4, r0
 800aad2:	4623      	mov	r3, r4
 800aad4:	d807      	bhi.n	800aae6 <memmove+0x20>
 800aad6:	1e43      	subs	r3, r0, #1
 800aad8:	42a1      	cmp	r1, r4
 800aada:	d008      	beq.n	800aaee <memmove+0x28>
 800aadc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aae0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aae4:	e7f8      	b.n	800aad8 <memmove+0x12>
 800aae6:	4402      	add	r2, r0
 800aae8:	4601      	mov	r1, r0
 800aaea:	428a      	cmp	r2, r1
 800aaec:	d100      	bne.n	800aaf0 <memmove+0x2a>
 800aaee:	bd10      	pop	{r4, pc}
 800aaf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaf4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaf8:	e7f7      	b.n	800aaea <memmove+0x24>

0800aafa <_malloc_usable_size_r>:
 800aafa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aafe:	1f18      	subs	r0, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bfbc      	itt	lt
 800ab04:	580b      	ldrlt	r3, [r1, r0]
 800ab06:	18c0      	addlt	r0, r0, r3
 800ab08:	4770      	bx	lr

0800ab0a <__sfputc_r>:
 800ab0a:	6893      	ldr	r3, [r2, #8]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	b410      	push	{r4}
 800ab12:	6093      	str	r3, [r2, #8]
 800ab14:	da08      	bge.n	800ab28 <__sfputc_r+0x1e>
 800ab16:	6994      	ldr	r4, [r2, #24]
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	db01      	blt.n	800ab20 <__sfputc_r+0x16>
 800ab1c:	290a      	cmp	r1, #10
 800ab1e:	d103      	bne.n	800ab28 <__sfputc_r+0x1e>
 800ab20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab24:	f000 b94a 	b.w	800adbc <__swbuf_r>
 800ab28:	6813      	ldr	r3, [r2, #0]
 800ab2a:	1c58      	adds	r0, r3, #1
 800ab2c:	6010      	str	r0, [r2, #0]
 800ab2e:	7019      	strb	r1, [r3, #0]
 800ab30:	4608      	mov	r0, r1
 800ab32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <__sfputs_r>:
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	4614      	mov	r4, r2
 800ab40:	18d5      	adds	r5, r2, r3
 800ab42:	42ac      	cmp	r4, r5
 800ab44:	d101      	bne.n	800ab4a <__sfputs_r+0x12>
 800ab46:	2000      	movs	r0, #0
 800ab48:	e007      	b.n	800ab5a <__sfputs_r+0x22>
 800ab4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4e:	463a      	mov	r2, r7
 800ab50:	4630      	mov	r0, r6
 800ab52:	f7ff ffda 	bl	800ab0a <__sfputc_r>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	d1f3      	bne.n	800ab42 <__sfputs_r+0xa>
 800ab5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab5c <_vfiprintf_r>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	460d      	mov	r5, r1
 800ab62:	b09d      	sub	sp, #116	; 0x74
 800ab64:	4614      	mov	r4, r2
 800ab66:	4698      	mov	r8, r3
 800ab68:	4606      	mov	r6, r0
 800ab6a:	b118      	cbz	r0, 800ab74 <_vfiprintf_r+0x18>
 800ab6c:	6983      	ldr	r3, [r0, #24]
 800ab6e:	b90b      	cbnz	r3, 800ab74 <_vfiprintf_r+0x18>
 800ab70:	f000 fb06 	bl	800b180 <__sinit>
 800ab74:	4b89      	ldr	r3, [pc, #548]	; (800ad9c <_vfiprintf_r+0x240>)
 800ab76:	429d      	cmp	r5, r3
 800ab78:	d11b      	bne.n	800abb2 <_vfiprintf_r+0x56>
 800ab7a:	6875      	ldr	r5, [r6, #4]
 800ab7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab7e:	07d9      	lsls	r1, r3, #31
 800ab80:	d405      	bmi.n	800ab8e <_vfiprintf_r+0x32>
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	059a      	lsls	r2, r3, #22
 800ab86:	d402      	bmi.n	800ab8e <_vfiprintf_r+0x32>
 800ab88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab8a:	f7ff ff9a 	bl	800aac2 <__retarget_lock_acquire_recursive>
 800ab8e:	89ab      	ldrh	r3, [r5, #12]
 800ab90:	071b      	lsls	r3, r3, #28
 800ab92:	d501      	bpl.n	800ab98 <_vfiprintf_r+0x3c>
 800ab94:	692b      	ldr	r3, [r5, #16]
 800ab96:	b9eb      	cbnz	r3, 800abd4 <_vfiprintf_r+0x78>
 800ab98:	4629      	mov	r1, r5
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f000 f960 	bl	800ae60 <__swsetup_r>
 800aba0:	b1c0      	cbz	r0, 800abd4 <_vfiprintf_r+0x78>
 800aba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aba4:	07dc      	lsls	r4, r3, #31
 800aba6:	d50e      	bpl.n	800abc6 <_vfiprintf_r+0x6a>
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abac:	b01d      	add	sp, #116	; 0x74
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	4b7b      	ldr	r3, [pc, #492]	; (800ada0 <_vfiprintf_r+0x244>)
 800abb4:	429d      	cmp	r5, r3
 800abb6:	d101      	bne.n	800abbc <_vfiprintf_r+0x60>
 800abb8:	68b5      	ldr	r5, [r6, #8]
 800abba:	e7df      	b.n	800ab7c <_vfiprintf_r+0x20>
 800abbc:	4b79      	ldr	r3, [pc, #484]	; (800ada4 <_vfiprintf_r+0x248>)
 800abbe:	429d      	cmp	r5, r3
 800abc0:	bf08      	it	eq
 800abc2:	68f5      	ldreq	r5, [r6, #12]
 800abc4:	e7da      	b.n	800ab7c <_vfiprintf_r+0x20>
 800abc6:	89ab      	ldrh	r3, [r5, #12]
 800abc8:	0598      	lsls	r0, r3, #22
 800abca:	d4ed      	bmi.n	800aba8 <_vfiprintf_r+0x4c>
 800abcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abce:	f7ff ff79 	bl	800aac4 <__retarget_lock_release_recursive>
 800abd2:	e7e9      	b.n	800aba8 <_vfiprintf_r+0x4c>
 800abd4:	2300      	movs	r3, #0
 800abd6:	9309      	str	r3, [sp, #36]	; 0x24
 800abd8:	2320      	movs	r3, #32
 800abda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abde:	f8cd 800c 	str.w	r8, [sp, #12]
 800abe2:	2330      	movs	r3, #48	; 0x30
 800abe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ada8 <_vfiprintf_r+0x24c>
 800abe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abec:	f04f 0901 	mov.w	r9, #1
 800abf0:	4623      	mov	r3, r4
 800abf2:	469a      	mov	sl, r3
 800abf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abf8:	b10a      	cbz	r2, 800abfe <_vfiprintf_r+0xa2>
 800abfa:	2a25      	cmp	r2, #37	; 0x25
 800abfc:	d1f9      	bne.n	800abf2 <_vfiprintf_r+0x96>
 800abfe:	ebba 0b04 	subs.w	fp, sl, r4
 800ac02:	d00b      	beq.n	800ac1c <_vfiprintf_r+0xc0>
 800ac04:	465b      	mov	r3, fp
 800ac06:	4622      	mov	r2, r4
 800ac08:	4629      	mov	r1, r5
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f7ff ff94 	bl	800ab38 <__sfputs_r>
 800ac10:	3001      	adds	r0, #1
 800ac12:	f000 80aa 	beq.w	800ad6a <_vfiprintf_r+0x20e>
 800ac16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac18:	445a      	add	r2, fp
 800ac1a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 80a2 	beq.w	800ad6a <_vfiprintf_r+0x20e>
 800ac26:	2300      	movs	r3, #0
 800ac28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac30:	f10a 0a01 	add.w	sl, sl, #1
 800ac34:	9304      	str	r3, [sp, #16]
 800ac36:	9307      	str	r3, [sp, #28]
 800ac38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac3c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac3e:	4654      	mov	r4, sl
 800ac40:	2205      	movs	r2, #5
 800ac42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac46:	4858      	ldr	r0, [pc, #352]	; (800ada8 <_vfiprintf_r+0x24c>)
 800ac48:	f7f5 faca 	bl	80001e0 <memchr>
 800ac4c:	9a04      	ldr	r2, [sp, #16]
 800ac4e:	b9d8      	cbnz	r0, 800ac88 <_vfiprintf_r+0x12c>
 800ac50:	06d1      	lsls	r1, r2, #27
 800ac52:	bf44      	itt	mi
 800ac54:	2320      	movmi	r3, #32
 800ac56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac5a:	0713      	lsls	r3, r2, #28
 800ac5c:	bf44      	itt	mi
 800ac5e:	232b      	movmi	r3, #43	; 0x2b
 800ac60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac64:	f89a 3000 	ldrb.w	r3, [sl]
 800ac68:	2b2a      	cmp	r3, #42	; 0x2a
 800ac6a:	d015      	beq.n	800ac98 <_vfiprintf_r+0x13c>
 800ac6c:	9a07      	ldr	r2, [sp, #28]
 800ac6e:	4654      	mov	r4, sl
 800ac70:	2000      	movs	r0, #0
 800ac72:	f04f 0c0a 	mov.w	ip, #10
 800ac76:	4621      	mov	r1, r4
 800ac78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac7c:	3b30      	subs	r3, #48	; 0x30
 800ac7e:	2b09      	cmp	r3, #9
 800ac80:	d94e      	bls.n	800ad20 <_vfiprintf_r+0x1c4>
 800ac82:	b1b0      	cbz	r0, 800acb2 <_vfiprintf_r+0x156>
 800ac84:	9207      	str	r2, [sp, #28]
 800ac86:	e014      	b.n	800acb2 <_vfiprintf_r+0x156>
 800ac88:	eba0 0308 	sub.w	r3, r0, r8
 800ac8c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac90:	4313      	orrs	r3, r2
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	46a2      	mov	sl, r4
 800ac96:	e7d2      	b.n	800ac3e <_vfiprintf_r+0xe2>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	1d19      	adds	r1, r3, #4
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	9103      	str	r1, [sp, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bfbb      	ittet	lt
 800aca4:	425b      	neglt	r3, r3
 800aca6:	f042 0202 	orrlt.w	r2, r2, #2
 800acaa:	9307      	strge	r3, [sp, #28]
 800acac:	9307      	strlt	r3, [sp, #28]
 800acae:	bfb8      	it	lt
 800acb0:	9204      	strlt	r2, [sp, #16]
 800acb2:	7823      	ldrb	r3, [r4, #0]
 800acb4:	2b2e      	cmp	r3, #46	; 0x2e
 800acb6:	d10c      	bne.n	800acd2 <_vfiprintf_r+0x176>
 800acb8:	7863      	ldrb	r3, [r4, #1]
 800acba:	2b2a      	cmp	r3, #42	; 0x2a
 800acbc:	d135      	bne.n	800ad2a <_vfiprintf_r+0x1ce>
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	1d1a      	adds	r2, r3, #4
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	9203      	str	r2, [sp, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bfb8      	it	lt
 800acca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800acce:	3402      	adds	r4, #2
 800acd0:	9305      	str	r3, [sp, #20]
 800acd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800adb8 <_vfiprintf_r+0x25c>
 800acd6:	7821      	ldrb	r1, [r4, #0]
 800acd8:	2203      	movs	r2, #3
 800acda:	4650      	mov	r0, sl
 800acdc:	f7f5 fa80 	bl	80001e0 <memchr>
 800ace0:	b140      	cbz	r0, 800acf4 <_vfiprintf_r+0x198>
 800ace2:	2340      	movs	r3, #64	; 0x40
 800ace4:	eba0 000a 	sub.w	r0, r0, sl
 800ace8:	fa03 f000 	lsl.w	r0, r3, r0
 800acec:	9b04      	ldr	r3, [sp, #16]
 800acee:	4303      	orrs	r3, r0
 800acf0:	3401      	adds	r4, #1
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf8:	482c      	ldr	r0, [pc, #176]	; (800adac <_vfiprintf_r+0x250>)
 800acfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acfe:	2206      	movs	r2, #6
 800ad00:	f7f5 fa6e 	bl	80001e0 <memchr>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d03f      	beq.n	800ad88 <_vfiprintf_r+0x22c>
 800ad08:	4b29      	ldr	r3, [pc, #164]	; (800adb0 <_vfiprintf_r+0x254>)
 800ad0a:	bb1b      	cbnz	r3, 800ad54 <_vfiprintf_r+0x1f8>
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	3307      	adds	r3, #7
 800ad10:	f023 0307 	bic.w	r3, r3, #7
 800ad14:	3308      	adds	r3, #8
 800ad16:	9303      	str	r3, [sp, #12]
 800ad18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1a:	443b      	add	r3, r7
 800ad1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad1e:	e767      	b.n	800abf0 <_vfiprintf_r+0x94>
 800ad20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad24:	460c      	mov	r4, r1
 800ad26:	2001      	movs	r0, #1
 800ad28:	e7a5      	b.n	800ac76 <_vfiprintf_r+0x11a>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	3401      	adds	r4, #1
 800ad2e:	9305      	str	r3, [sp, #20]
 800ad30:	4619      	mov	r1, r3
 800ad32:	f04f 0c0a 	mov.w	ip, #10
 800ad36:	4620      	mov	r0, r4
 800ad38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad3c:	3a30      	subs	r2, #48	; 0x30
 800ad3e:	2a09      	cmp	r2, #9
 800ad40:	d903      	bls.n	800ad4a <_vfiprintf_r+0x1ee>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0c5      	beq.n	800acd2 <_vfiprintf_r+0x176>
 800ad46:	9105      	str	r1, [sp, #20]
 800ad48:	e7c3      	b.n	800acd2 <_vfiprintf_r+0x176>
 800ad4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad4e:	4604      	mov	r4, r0
 800ad50:	2301      	movs	r3, #1
 800ad52:	e7f0      	b.n	800ad36 <_vfiprintf_r+0x1da>
 800ad54:	ab03      	add	r3, sp, #12
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	462a      	mov	r2, r5
 800ad5a:	4b16      	ldr	r3, [pc, #88]	; (800adb4 <_vfiprintf_r+0x258>)
 800ad5c:	a904      	add	r1, sp, #16
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7fc f938 	bl	8006fd4 <_printf_float>
 800ad64:	4607      	mov	r7, r0
 800ad66:	1c78      	adds	r0, r7, #1
 800ad68:	d1d6      	bne.n	800ad18 <_vfiprintf_r+0x1bc>
 800ad6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad6c:	07d9      	lsls	r1, r3, #31
 800ad6e:	d405      	bmi.n	800ad7c <_vfiprintf_r+0x220>
 800ad70:	89ab      	ldrh	r3, [r5, #12]
 800ad72:	059a      	lsls	r2, r3, #22
 800ad74:	d402      	bmi.n	800ad7c <_vfiprintf_r+0x220>
 800ad76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad78:	f7ff fea4 	bl	800aac4 <__retarget_lock_release_recursive>
 800ad7c:	89ab      	ldrh	r3, [r5, #12]
 800ad7e:	065b      	lsls	r3, r3, #25
 800ad80:	f53f af12 	bmi.w	800aba8 <_vfiprintf_r+0x4c>
 800ad84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad86:	e711      	b.n	800abac <_vfiprintf_r+0x50>
 800ad88:	ab03      	add	r3, sp, #12
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	462a      	mov	r2, r5
 800ad8e:	4b09      	ldr	r3, [pc, #36]	; (800adb4 <_vfiprintf_r+0x258>)
 800ad90:	a904      	add	r1, sp, #16
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7fc fbc2 	bl	800751c <_printf_i>
 800ad98:	e7e4      	b.n	800ad64 <_vfiprintf_r+0x208>
 800ad9a:	bf00      	nop
 800ad9c:	0800e8e4 	.word	0x0800e8e4
 800ada0:	0800e904 	.word	0x0800e904
 800ada4:	0800e8c4 	.word	0x0800e8c4
 800ada8:	0800e874 	.word	0x0800e874
 800adac:	0800e87e 	.word	0x0800e87e
 800adb0:	08006fd5 	.word	0x08006fd5
 800adb4:	0800ab39 	.word	0x0800ab39
 800adb8:	0800e87a 	.word	0x0800e87a

0800adbc <__swbuf_r>:
 800adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbe:	460e      	mov	r6, r1
 800adc0:	4614      	mov	r4, r2
 800adc2:	4605      	mov	r5, r0
 800adc4:	b118      	cbz	r0, 800adce <__swbuf_r+0x12>
 800adc6:	6983      	ldr	r3, [r0, #24]
 800adc8:	b90b      	cbnz	r3, 800adce <__swbuf_r+0x12>
 800adca:	f000 f9d9 	bl	800b180 <__sinit>
 800adce:	4b21      	ldr	r3, [pc, #132]	; (800ae54 <__swbuf_r+0x98>)
 800add0:	429c      	cmp	r4, r3
 800add2:	d12b      	bne.n	800ae2c <__swbuf_r+0x70>
 800add4:	686c      	ldr	r4, [r5, #4]
 800add6:	69a3      	ldr	r3, [r4, #24]
 800add8:	60a3      	str	r3, [r4, #8]
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	071a      	lsls	r2, r3, #28
 800adde:	d52f      	bpl.n	800ae40 <__swbuf_r+0x84>
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	b36b      	cbz	r3, 800ae40 <__swbuf_r+0x84>
 800ade4:	6923      	ldr	r3, [r4, #16]
 800ade6:	6820      	ldr	r0, [r4, #0]
 800ade8:	1ac0      	subs	r0, r0, r3
 800adea:	6963      	ldr	r3, [r4, #20]
 800adec:	b2f6      	uxtb	r6, r6
 800adee:	4283      	cmp	r3, r0
 800adf0:	4637      	mov	r7, r6
 800adf2:	dc04      	bgt.n	800adfe <__swbuf_r+0x42>
 800adf4:	4621      	mov	r1, r4
 800adf6:	4628      	mov	r0, r5
 800adf8:	f000 f92e 	bl	800b058 <_fflush_r>
 800adfc:	bb30      	cbnz	r0, 800ae4c <__swbuf_r+0x90>
 800adfe:	68a3      	ldr	r3, [r4, #8]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	60a3      	str	r3, [r4, #8]
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	6022      	str	r2, [r4, #0]
 800ae0a:	701e      	strb	r6, [r3, #0]
 800ae0c:	6963      	ldr	r3, [r4, #20]
 800ae0e:	3001      	adds	r0, #1
 800ae10:	4283      	cmp	r3, r0
 800ae12:	d004      	beq.n	800ae1e <__swbuf_r+0x62>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	07db      	lsls	r3, r3, #31
 800ae18:	d506      	bpl.n	800ae28 <__swbuf_r+0x6c>
 800ae1a:	2e0a      	cmp	r6, #10
 800ae1c:	d104      	bne.n	800ae28 <__swbuf_r+0x6c>
 800ae1e:	4621      	mov	r1, r4
 800ae20:	4628      	mov	r0, r5
 800ae22:	f000 f919 	bl	800b058 <_fflush_r>
 800ae26:	b988      	cbnz	r0, 800ae4c <__swbuf_r+0x90>
 800ae28:	4638      	mov	r0, r7
 800ae2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	; (800ae58 <__swbuf_r+0x9c>)
 800ae2e:	429c      	cmp	r4, r3
 800ae30:	d101      	bne.n	800ae36 <__swbuf_r+0x7a>
 800ae32:	68ac      	ldr	r4, [r5, #8]
 800ae34:	e7cf      	b.n	800add6 <__swbuf_r+0x1a>
 800ae36:	4b09      	ldr	r3, [pc, #36]	; (800ae5c <__swbuf_r+0xa0>)
 800ae38:	429c      	cmp	r4, r3
 800ae3a:	bf08      	it	eq
 800ae3c:	68ec      	ldreq	r4, [r5, #12]
 800ae3e:	e7ca      	b.n	800add6 <__swbuf_r+0x1a>
 800ae40:	4621      	mov	r1, r4
 800ae42:	4628      	mov	r0, r5
 800ae44:	f000 f80c 	bl	800ae60 <__swsetup_r>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d0cb      	beq.n	800ade4 <__swbuf_r+0x28>
 800ae4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ae50:	e7ea      	b.n	800ae28 <__swbuf_r+0x6c>
 800ae52:	bf00      	nop
 800ae54:	0800e8e4 	.word	0x0800e8e4
 800ae58:	0800e904 	.word	0x0800e904
 800ae5c:	0800e8c4 	.word	0x0800e8c4

0800ae60 <__swsetup_r>:
 800ae60:	4b32      	ldr	r3, [pc, #200]	; (800af2c <__swsetup_r+0xcc>)
 800ae62:	b570      	push	{r4, r5, r6, lr}
 800ae64:	681d      	ldr	r5, [r3, #0]
 800ae66:	4606      	mov	r6, r0
 800ae68:	460c      	mov	r4, r1
 800ae6a:	b125      	cbz	r5, 800ae76 <__swsetup_r+0x16>
 800ae6c:	69ab      	ldr	r3, [r5, #24]
 800ae6e:	b913      	cbnz	r3, 800ae76 <__swsetup_r+0x16>
 800ae70:	4628      	mov	r0, r5
 800ae72:	f000 f985 	bl	800b180 <__sinit>
 800ae76:	4b2e      	ldr	r3, [pc, #184]	; (800af30 <__swsetup_r+0xd0>)
 800ae78:	429c      	cmp	r4, r3
 800ae7a:	d10f      	bne.n	800ae9c <__swsetup_r+0x3c>
 800ae7c:	686c      	ldr	r4, [r5, #4]
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae84:	0719      	lsls	r1, r3, #28
 800ae86:	d42c      	bmi.n	800aee2 <__swsetup_r+0x82>
 800ae88:	06dd      	lsls	r5, r3, #27
 800ae8a:	d411      	bmi.n	800aeb0 <__swsetup_r+0x50>
 800ae8c:	2309      	movs	r3, #9
 800ae8e:	6033      	str	r3, [r6, #0]
 800ae90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae94:	81a3      	strh	r3, [r4, #12]
 800ae96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae9a:	e03e      	b.n	800af1a <__swsetup_r+0xba>
 800ae9c:	4b25      	ldr	r3, [pc, #148]	; (800af34 <__swsetup_r+0xd4>)
 800ae9e:	429c      	cmp	r4, r3
 800aea0:	d101      	bne.n	800aea6 <__swsetup_r+0x46>
 800aea2:	68ac      	ldr	r4, [r5, #8]
 800aea4:	e7eb      	b.n	800ae7e <__swsetup_r+0x1e>
 800aea6:	4b24      	ldr	r3, [pc, #144]	; (800af38 <__swsetup_r+0xd8>)
 800aea8:	429c      	cmp	r4, r3
 800aeaa:	bf08      	it	eq
 800aeac:	68ec      	ldreq	r4, [r5, #12]
 800aeae:	e7e6      	b.n	800ae7e <__swsetup_r+0x1e>
 800aeb0:	0758      	lsls	r0, r3, #29
 800aeb2:	d512      	bpl.n	800aeda <__swsetup_r+0x7a>
 800aeb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeb6:	b141      	cbz	r1, 800aeca <__swsetup_r+0x6a>
 800aeb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aebc:	4299      	cmp	r1, r3
 800aebe:	d002      	beq.n	800aec6 <__swsetup_r+0x66>
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7fb ff3d 	bl	8006d40 <_free_r>
 800aec6:	2300      	movs	r3, #0
 800aec8:	6363      	str	r3, [r4, #52]	; 0x34
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	2300      	movs	r3, #0
 800aed4:	6063      	str	r3, [r4, #4]
 800aed6:	6923      	ldr	r3, [r4, #16]
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f043 0308 	orr.w	r3, r3, #8
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	b94b      	cbnz	r3, 800aefa <__swsetup_r+0x9a>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aeec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aef0:	d003      	beq.n	800aefa <__swsetup_r+0x9a>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4630      	mov	r0, r6
 800aef6:	f000 fa05 	bl	800b304 <__smakebuf_r>
 800aefa:	89a0      	ldrh	r0, [r4, #12]
 800aefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af00:	f010 0301 	ands.w	r3, r0, #1
 800af04:	d00a      	beq.n	800af1c <__swsetup_r+0xbc>
 800af06:	2300      	movs	r3, #0
 800af08:	60a3      	str	r3, [r4, #8]
 800af0a:	6963      	ldr	r3, [r4, #20]
 800af0c:	425b      	negs	r3, r3
 800af0e:	61a3      	str	r3, [r4, #24]
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	b943      	cbnz	r3, 800af26 <__swsetup_r+0xc6>
 800af14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af18:	d1ba      	bne.n	800ae90 <__swsetup_r+0x30>
 800af1a:	bd70      	pop	{r4, r5, r6, pc}
 800af1c:	0781      	lsls	r1, r0, #30
 800af1e:	bf58      	it	pl
 800af20:	6963      	ldrpl	r3, [r4, #20]
 800af22:	60a3      	str	r3, [r4, #8]
 800af24:	e7f4      	b.n	800af10 <__swsetup_r+0xb0>
 800af26:	2000      	movs	r0, #0
 800af28:	e7f7      	b.n	800af1a <__swsetup_r+0xba>
 800af2a:	bf00      	nop
 800af2c:	20000410 	.word	0x20000410
 800af30:	0800e8e4 	.word	0x0800e8e4
 800af34:	0800e904 	.word	0x0800e904
 800af38:	0800e8c4 	.word	0x0800e8c4

0800af3c <abort>:
 800af3c:	b508      	push	{r3, lr}
 800af3e:	2006      	movs	r0, #6
 800af40:	f000 fa48 	bl	800b3d4 <raise>
 800af44:	2001      	movs	r0, #1
 800af46:	f003 f941 	bl	800e1cc <_exit>
	...

0800af4c <__sflush_r>:
 800af4c:	898a      	ldrh	r2, [r1, #12]
 800af4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af52:	4605      	mov	r5, r0
 800af54:	0710      	lsls	r0, r2, #28
 800af56:	460c      	mov	r4, r1
 800af58:	d458      	bmi.n	800b00c <__sflush_r+0xc0>
 800af5a:	684b      	ldr	r3, [r1, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dc05      	bgt.n	800af6c <__sflush_r+0x20>
 800af60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	dc02      	bgt.n	800af6c <__sflush_r+0x20>
 800af66:	2000      	movs	r0, #0
 800af68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af6e:	2e00      	cmp	r6, #0
 800af70:	d0f9      	beq.n	800af66 <__sflush_r+0x1a>
 800af72:	2300      	movs	r3, #0
 800af74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af78:	682f      	ldr	r7, [r5, #0]
 800af7a:	602b      	str	r3, [r5, #0]
 800af7c:	d032      	beq.n	800afe4 <__sflush_r+0x98>
 800af7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	075a      	lsls	r2, r3, #29
 800af84:	d505      	bpl.n	800af92 <__sflush_r+0x46>
 800af86:	6863      	ldr	r3, [r4, #4]
 800af88:	1ac0      	subs	r0, r0, r3
 800af8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af8c:	b10b      	cbz	r3, 800af92 <__sflush_r+0x46>
 800af8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af90:	1ac0      	subs	r0, r0, r3
 800af92:	2300      	movs	r3, #0
 800af94:	4602      	mov	r2, r0
 800af96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af98:	6a21      	ldr	r1, [r4, #32]
 800af9a:	4628      	mov	r0, r5
 800af9c:	47b0      	blx	r6
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	d106      	bne.n	800afb2 <__sflush_r+0x66>
 800afa4:	6829      	ldr	r1, [r5, #0]
 800afa6:	291d      	cmp	r1, #29
 800afa8:	d82c      	bhi.n	800b004 <__sflush_r+0xb8>
 800afaa:	4a2a      	ldr	r2, [pc, #168]	; (800b054 <__sflush_r+0x108>)
 800afac:	40ca      	lsrs	r2, r1
 800afae:	07d6      	lsls	r6, r2, #31
 800afb0:	d528      	bpl.n	800b004 <__sflush_r+0xb8>
 800afb2:	2200      	movs	r2, #0
 800afb4:	6062      	str	r2, [r4, #4]
 800afb6:	04d9      	lsls	r1, r3, #19
 800afb8:	6922      	ldr	r2, [r4, #16]
 800afba:	6022      	str	r2, [r4, #0]
 800afbc:	d504      	bpl.n	800afc8 <__sflush_r+0x7c>
 800afbe:	1c42      	adds	r2, r0, #1
 800afc0:	d101      	bne.n	800afc6 <__sflush_r+0x7a>
 800afc2:	682b      	ldr	r3, [r5, #0]
 800afc4:	b903      	cbnz	r3, 800afc8 <__sflush_r+0x7c>
 800afc6:	6560      	str	r0, [r4, #84]	; 0x54
 800afc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afca:	602f      	str	r7, [r5, #0]
 800afcc:	2900      	cmp	r1, #0
 800afce:	d0ca      	beq.n	800af66 <__sflush_r+0x1a>
 800afd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afd4:	4299      	cmp	r1, r3
 800afd6:	d002      	beq.n	800afde <__sflush_r+0x92>
 800afd8:	4628      	mov	r0, r5
 800afda:	f7fb feb1 	bl	8006d40 <_free_r>
 800afde:	2000      	movs	r0, #0
 800afe0:	6360      	str	r0, [r4, #52]	; 0x34
 800afe2:	e7c1      	b.n	800af68 <__sflush_r+0x1c>
 800afe4:	6a21      	ldr	r1, [r4, #32]
 800afe6:	2301      	movs	r3, #1
 800afe8:	4628      	mov	r0, r5
 800afea:	47b0      	blx	r6
 800afec:	1c41      	adds	r1, r0, #1
 800afee:	d1c7      	bne.n	800af80 <__sflush_r+0x34>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0c4      	beq.n	800af80 <__sflush_r+0x34>
 800aff6:	2b1d      	cmp	r3, #29
 800aff8:	d001      	beq.n	800affe <__sflush_r+0xb2>
 800affa:	2b16      	cmp	r3, #22
 800affc:	d101      	bne.n	800b002 <__sflush_r+0xb6>
 800affe:	602f      	str	r7, [r5, #0]
 800b000:	e7b1      	b.n	800af66 <__sflush_r+0x1a>
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	e7ad      	b.n	800af68 <__sflush_r+0x1c>
 800b00c:	690f      	ldr	r7, [r1, #16]
 800b00e:	2f00      	cmp	r7, #0
 800b010:	d0a9      	beq.n	800af66 <__sflush_r+0x1a>
 800b012:	0793      	lsls	r3, r2, #30
 800b014:	680e      	ldr	r6, [r1, #0]
 800b016:	bf08      	it	eq
 800b018:	694b      	ldreq	r3, [r1, #20]
 800b01a:	600f      	str	r7, [r1, #0]
 800b01c:	bf18      	it	ne
 800b01e:	2300      	movne	r3, #0
 800b020:	eba6 0807 	sub.w	r8, r6, r7
 800b024:	608b      	str	r3, [r1, #8]
 800b026:	f1b8 0f00 	cmp.w	r8, #0
 800b02a:	dd9c      	ble.n	800af66 <__sflush_r+0x1a>
 800b02c:	6a21      	ldr	r1, [r4, #32]
 800b02e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b030:	4643      	mov	r3, r8
 800b032:	463a      	mov	r2, r7
 800b034:	4628      	mov	r0, r5
 800b036:	47b0      	blx	r6
 800b038:	2800      	cmp	r0, #0
 800b03a:	dc06      	bgt.n	800b04a <__sflush_r+0xfe>
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b042:	81a3      	strh	r3, [r4, #12]
 800b044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b048:	e78e      	b.n	800af68 <__sflush_r+0x1c>
 800b04a:	4407      	add	r7, r0
 800b04c:	eba8 0800 	sub.w	r8, r8, r0
 800b050:	e7e9      	b.n	800b026 <__sflush_r+0xda>
 800b052:	bf00      	nop
 800b054:	20400001 	.word	0x20400001

0800b058 <_fflush_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	690b      	ldr	r3, [r1, #16]
 800b05c:	4605      	mov	r5, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	b913      	cbnz	r3, 800b068 <_fflush_r+0x10>
 800b062:	2500      	movs	r5, #0
 800b064:	4628      	mov	r0, r5
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	b118      	cbz	r0, 800b072 <_fflush_r+0x1a>
 800b06a:	6983      	ldr	r3, [r0, #24]
 800b06c:	b90b      	cbnz	r3, 800b072 <_fflush_r+0x1a>
 800b06e:	f000 f887 	bl	800b180 <__sinit>
 800b072:	4b14      	ldr	r3, [pc, #80]	; (800b0c4 <_fflush_r+0x6c>)
 800b074:	429c      	cmp	r4, r3
 800b076:	d11b      	bne.n	800b0b0 <_fflush_r+0x58>
 800b078:	686c      	ldr	r4, [r5, #4]
 800b07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0ef      	beq.n	800b062 <_fflush_r+0xa>
 800b082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b084:	07d0      	lsls	r0, r2, #31
 800b086:	d404      	bmi.n	800b092 <_fflush_r+0x3a>
 800b088:	0599      	lsls	r1, r3, #22
 800b08a:	d402      	bmi.n	800b092 <_fflush_r+0x3a>
 800b08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b08e:	f7ff fd18 	bl	800aac2 <__retarget_lock_acquire_recursive>
 800b092:	4628      	mov	r0, r5
 800b094:	4621      	mov	r1, r4
 800b096:	f7ff ff59 	bl	800af4c <__sflush_r>
 800b09a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b09c:	07da      	lsls	r2, r3, #31
 800b09e:	4605      	mov	r5, r0
 800b0a0:	d4e0      	bmi.n	800b064 <_fflush_r+0xc>
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	059b      	lsls	r3, r3, #22
 800b0a6:	d4dd      	bmi.n	800b064 <_fflush_r+0xc>
 800b0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0aa:	f7ff fd0b 	bl	800aac4 <__retarget_lock_release_recursive>
 800b0ae:	e7d9      	b.n	800b064 <_fflush_r+0xc>
 800b0b0:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <_fflush_r+0x70>)
 800b0b2:	429c      	cmp	r4, r3
 800b0b4:	d101      	bne.n	800b0ba <_fflush_r+0x62>
 800b0b6:	68ac      	ldr	r4, [r5, #8]
 800b0b8:	e7df      	b.n	800b07a <_fflush_r+0x22>
 800b0ba:	4b04      	ldr	r3, [pc, #16]	; (800b0cc <_fflush_r+0x74>)
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	bf08      	it	eq
 800b0c0:	68ec      	ldreq	r4, [r5, #12]
 800b0c2:	e7da      	b.n	800b07a <_fflush_r+0x22>
 800b0c4:	0800e8e4 	.word	0x0800e8e4
 800b0c8:	0800e904 	.word	0x0800e904
 800b0cc:	0800e8c4 	.word	0x0800e8c4

0800b0d0 <std>:
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	b510      	push	{r4, lr}
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0de:	6083      	str	r3, [r0, #8]
 800b0e0:	8181      	strh	r1, [r0, #12]
 800b0e2:	6643      	str	r3, [r0, #100]	; 0x64
 800b0e4:	81c2      	strh	r2, [r0, #14]
 800b0e6:	6183      	str	r3, [r0, #24]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	2208      	movs	r2, #8
 800b0ec:	305c      	adds	r0, #92	; 0x5c
 800b0ee:	f7fb fe1f 	bl	8006d30 <memset>
 800b0f2:	4b05      	ldr	r3, [pc, #20]	; (800b108 <std+0x38>)
 800b0f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b0f6:	4b05      	ldr	r3, [pc, #20]	; (800b10c <std+0x3c>)
 800b0f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <std+0x40>)
 800b0fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <std+0x44>)
 800b100:	6224      	str	r4, [r4, #32]
 800b102:	6323      	str	r3, [r4, #48]	; 0x30
 800b104:	bd10      	pop	{r4, pc}
 800b106:	bf00      	nop
 800b108:	0800b40d 	.word	0x0800b40d
 800b10c:	0800b42f 	.word	0x0800b42f
 800b110:	0800b467 	.word	0x0800b467
 800b114:	0800b48b 	.word	0x0800b48b

0800b118 <_cleanup_r>:
 800b118:	4901      	ldr	r1, [pc, #4]	; (800b120 <_cleanup_r+0x8>)
 800b11a:	f000 b8af 	b.w	800b27c <_fwalk_reent>
 800b11e:	bf00      	nop
 800b120:	0800b059 	.word	0x0800b059

0800b124 <__sfmoreglue>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	1e4a      	subs	r2, r1, #1
 800b128:	2568      	movs	r5, #104	; 0x68
 800b12a:	4355      	muls	r5, r2
 800b12c:	460e      	mov	r6, r1
 800b12e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b132:	f7fb fe55 	bl	8006de0 <_malloc_r>
 800b136:	4604      	mov	r4, r0
 800b138:	b140      	cbz	r0, 800b14c <__sfmoreglue+0x28>
 800b13a:	2100      	movs	r1, #0
 800b13c:	e9c0 1600 	strd	r1, r6, [r0]
 800b140:	300c      	adds	r0, #12
 800b142:	60a0      	str	r0, [r4, #8]
 800b144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b148:	f7fb fdf2 	bl	8006d30 <memset>
 800b14c:	4620      	mov	r0, r4
 800b14e:	bd70      	pop	{r4, r5, r6, pc}

0800b150 <__sfp_lock_acquire>:
 800b150:	4801      	ldr	r0, [pc, #4]	; (800b158 <__sfp_lock_acquire+0x8>)
 800b152:	f7ff bcb6 	b.w	800aac2 <__retarget_lock_acquire_recursive>
 800b156:	bf00      	nop
 800b158:	200057c8 	.word	0x200057c8

0800b15c <__sfp_lock_release>:
 800b15c:	4801      	ldr	r0, [pc, #4]	; (800b164 <__sfp_lock_release+0x8>)
 800b15e:	f7ff bcb1 	b.w	800aac4 <__retarget_lock_release_recursive>
 800b162:	bf00      	nop
 800b164:	200057c8 	.word	0x200057c8

0800b168 <__sinit_lock_acquire>:
 800b168:	4801      	ldr	r0, [pc, #4]	; (800b170 <__sinit_lock_acquire+0x8>)
 800b16a:	f7ff bcaa 	b.w	800aac2 <__retarget_lock_acquire_recursive>
 800b16e:	bf00      	nop
 800b170:	200057c3 	.word	0x200057c3

0800b174 <__sinit_lock_release>:
 800b174:	4801      	ldr	r0, [pc, #4]	; (800b17c <__sinit_lock_release+0x8>)
 800b176:	f7ff bca5 	b.w	800aac4 <__retarget_lock_release_recursive>
 800b17a:	bf00      	nop
 800b17c:	200057c3 	.word	0x200057c3

0800b180 <__sinit>:
 800b180:	b510      	push	{r4, lr}
 800b182:	4604      	mov	r4, r0
 800b184:	f7ff fff0 	bl	800b168 <__sinit_lock_acquire>
 800b188:	69a3      	ldr	r3, [r4, #24]
 800b18a:	b11b      	cbz	r3, 800b194 <__sinit+0x14>
 800b18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b190:	f7ff bff0 	b.w	800b174 <__sinit_lock_release>
 800b194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b198:	6523      	str	r3, [r4, #80]	; 0x50
 800b19a:	4b13      	ldr	r3, [pc, #76]	; (800b1e8 <__sinit+0x68>)
 800b19c:	4a13      	ldr	r2, [pc, #76]	; (800b1ec <__sinit+0x6c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1a2:	42a3      	cmp	r3, r4
 800b1a4:	bf04      	itt	eq
 800b1a6:	2301      	moveq	r3, #1
 800b1a8:	61a3      	streq	r3, [r4, #24]
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 f820 	bl	800b1f0 <__sfp>
 800b1b0:	6060      	str	r0, [r4, #4]
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 f81c 	bl	800b1f0 <__sfp>
 800b1b8:	60a0      	str	r0, [r4, #8]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 f818 	bl	800b1f0 <__sfp>
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	60e0      	str	r0, [r4, #12]
 800b1c4:	2104      	movs	r1, #4
 800b1c6:	6860      	ldr	r0, [r4, #4]
 800b1c8:	f7ff ff82 	bl	800b0d0 <std>
 800b1cc:	68a0      	ldr	r0, [r4, #8]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	2109      	movs	r1, #9
 800b1d2:	f7ff ff7d 	bl	800b0d0 <std>
 800b1d6:	68e0      	ldr	r0, [r4, #12]
 800b1d8:	2202      	movs	r2, #2
 800b1da:	2112      	movs	r1, #18
 800b1dc:	f7ff ff78 	bl	800b0d0 <std>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	61a3      	str	r3, [r4, #24]
 800b1e4:	e7d2      	b.n	800b18c <__sinit+0xc>
 800b1e6:	bf00      	nop
 800b1e8:	0800e46c 	.word	0x0800e46c
 800b1ec:	0800b119 	.word	0x0800b119

0800b1f0 <__sfp>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	4607      	mov	r7, r0
 800b1f4:	f7ff ffac 	bl	800b150 <__sfp_lock_acquire>
 800b1f8:	4b1e      	ldr	r3, [pc, #120]	; (800b274 <__sfp+0x84>)
 800b1fa:	681e      	ldr	r6, [r3, #0]
 800b1fc:	69b3      	ldr	r3, [r6, #24]
 800b1fe:	b913      	cbnz	r3, 800b206 <__sfp+0x16>
 800b200:	4630      	mov	r0, r6
 800b202:	f7ff ffbd 	bl	800b180 <__sinit>
 800b206:	3648      	adds	r6, #72	; 0x48
 800b208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	d503      	bpl.n	800b218 <__sfp+0x28>
 800b210:	6833      	ldr	r3, [r6, #0]
 800b212:	b30b      	cbz	r3, 800b258 <__sfp+0x68>
 800b214:	6836      	ldr	r6, [r6, #0]
 800b216:	e7f7      	b.n	800b208 <__sfp+0x18>
 800b218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b21c:	b9d5      	cbnz	r5, 800b254 <__sfp+0x64>
 800b21e:	4b16      	ldr	r3, [pc, #88]	; (800b278 <__sfp+0x88>)
 800b220:	60e3      	str	r3, [r4, #12]
 800b222:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b226:	6665      	str	r5, [r4, #100]	; 0x64
 800b228:	f7ff fc4a 	bl	800aac0 <__retarget_lock_init_recursive>
 800b22c:	f7ff ff96 	bl	800b15c <__sfp_lock_release>
 800b230:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b234:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b238:	6025      	str	r5, [r4, #0]
 800b23a:	61a5      	str	r5, [r4, #24]
 800b23c:	2208      	movs	r2, #8
 800b23e:	4629      	mov	r1, r5
 800b240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b244:	f7fb fd74 	bl	8006d30 <memset>
 800b248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b24c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b250:	4620      	mov	r0, r4
 800b252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b254:	3468      	adds	r4, #104	; 0x68
 800b256:	e7d9      	b.n	800b20c <__sfp+0x1c>
 800b258:	2104      	movs	r1, #4
 800b25a:	4638      	mov	r0, r7
 800b25c:	f7ff ff62 	bl	800b124 <__sfmoreglue>
 800b260:	4604      	mov	r4, r0
 800b262:	6030      	str	r0, [r6, #0]
 800b264:	2800      	cmp	r0, #0
 800b266:	d1d5      	bne.n	800b214 <__sfp+0x24>
 800b268:	f7ff ff78 	bl	800b15c <__sfp_lock_release>
 800b26c:	230c      	movs	r3, #12
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	e7ee      	b.n	800b250 <__sfp+0x60>
 800b272:	bf00      	nop
 800b274:	0800e46c 	.word	0x0800e46c
 800b278:	ffff0001 	.word	0xffff0001

0800b27c <_fwalk_reent>:
 800b27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b280:	4606      	mov	r6, r0
 800b282:	4688      	mov	r8, r1
 800b284:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b288:	2700      	movs	r7, #0
 800b28a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b28e:	f1b9 0901 	subs.w	r9, r9, #1
 800b292:	d505      	bpl.n	800b2a0 <_fwalk_reent+0x24>
 800b294:	6824      	ldr	r4, [r4, #0]
 800b296:	2c00      	cmp	r4, #0
 800b298:	d1f7      	bne.n	800b28a <_fwalk_reent+0xe>
 800b29a:	4638      	mov	r0, r7
 800b29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a0:	89ab      	ldrh	r3, [r5, #12]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d907      	bls.n	800b2b6 <_fwalk_reent+0x3a>
 800b2a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	d003      	beq.n	800b2b6 <_fwalk_reent+0x3a>
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	47c0      	blx	r8
 800b2b4:	4307      	orrs	r7, r0
 800b2b6:	3568      	adds	r5, #104	; 0x68
 800b2b8:	e7e9      	b.n	800b28e <_fwalk_reent+0x12>

0800b2ba <__swhatbuf_r>:
 800b2ba:	b570      	push	{r4, r5, r6, lr}
 800b2bc:	460e      	mov	r6, r1
 800b2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c2:	2900      	cmp	r1, #0
 800b2c4:	b096      	sub	sp, #88	; 0x58
 800b2c6:	4614      	mov	r4, r2
 800b2c8:	461d      	mov	r5, r3
 800b2ca:	da07      	bge.n	800b2dc <__swhatbuf_r+0x22>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	89b3      	ldrh	r3, [r6, #12]
 800b2d2:	061a      	lsls	r2, r3, #24
 800b2d4:	d410      	bmi.n	800b2f8 <__swhatbuf_r+0x3e>
 800b2d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2da:	e00e      	b.n	800b2fa <__swhatbuf_r+0x40>
 800b2dc:	466a      	mov	r2, sp
 800b2de:	f000 f8fb 	bl	800b4d8 <_fstat_r>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	dbf2      	blt.n	800b2cc <__swhatbuf_r+0x12>
 800b2e6:	9a01      	ldr	r2, [sp, #4]
 800b2e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2f0:	425a      	negs	r2, r3
 800b2f2:	415a      	adcs	r2, r3
 800b2f4:	602a      	str	r2, [r5, #0]
 800b2f6:	e7ee      	b.n	800b2d6 <__swhatbuf_r+0x1c>
 800b2f8:	2340      	movs	r3, #64	; 0x40
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	b016      	add	sp, #88	; 0x58
 800b300:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b304 <__smakebuf_r>:
 800b304:	898b      	ldrh	r3, [r1, #12]
 800b306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b308:	079d      	lsls	r5, r3, #30
 800b30a:	4606      	mov	r6, r0
 800b30c:	460c      	mov	r4, r1
 800b30e:	d507      	bpl.n	800b320 <__smakebuf_r+0x1c>
 800b310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	6123      	str	r3, [r4, #16]
 800b318:	2301      	movs	r3, #1
 800b31a:	6163      	str	r3, [r4, #20]
 800b31c:	b002      	add	sp, #8
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	ab01      	add	r3, sp, #4
 800b322:	466a      	mov	r2, sp
 800b324:	f7ff ffc9 	bl	800b2ba <__swhatbuf_r>
 800b328:	9900      	ldr	r1, [sp, #0]
 800b32a:	4605      	mov	r5, r0
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7fb fd57 	bl	8006de0 <_malloc_r>
 800b332:	b948      	cbnz	r0, 800b348 <__smakebuf_r+0x44>
 800b334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b338:	059a      	lsls	r2, r3, #22
 800b33a:	d4ef      	bmi.n	800b31c <__smakebuf_r+0x18>
 800b33c:	f023 0303 	bic.w	r3, r3, #3
 800b340:	f043 0302 	orr.w	r3, r3, #2
 800b344:	81a3      	strh	r3, [r4, #12]
 800b346:	e7e3      	b.n	800b310 <__smakebuf_r+0xc>
 800b348:	4b0d      	ldr	r3, [pc, #52]	; (800b380 <__smakebuf_r+0x7c>)
 800b34a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	6020      	str	r0, [r4, #0]
 800b350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b354:	81a3      	strh	r3, [r4, #12]
 800b356:	9b00      	ldr	r3, [sp, #0]
 800b358:	6163      	str	r3, [r4, #20]
 800b35a:	9b01      	ldr	r3, [sp, #4]
 800b35c:	6120      	str	r0, [r4, #16]
 800b35e:	b15b      	cbz	r3, 800b378 <__smakebuf_r+0x74>
 800b360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b364:	4630      	mov	r0, r6
 800b366:	f000 f8c9 	bl	800b4fc <_isatty_r>
 800b36a:	b128      	cbz	r0, 800b378 <__smakebuf_r+0x74>
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	f023 0303 	bic.w	r3, r3, #3
 800b372:	f043 0301 	orr.w	r3, r3, #1
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	89a0      	ldrh	r0, [r4, #12]
 800b37a:	4305      	orrs	r5, r0
 800b37c:	81a5      	strh	r5, [r4, #12]
 800b37e:	e7cd      	b.n	800b31c <__smakebuf_r+0x18>
 800b380:	0800b119 	.word	0x0800b119

0800b384 <_raise_r>:
 800b384:	291f      	cmp	r1, #31
 800b386:	b538      	push	{r3, r4, r5, lr}
 800b388:	4604      	mov	r4, r0
 800b38a:	460d      	mov	r5, r1
 800b38c:	d904      	bls.n	800b398 <_raise_r+0x14>
 800b38e:	2316      	movs	r3, #22
 800b390:	6003      	str	r3, [r0, #0]
 800b392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b39a:	b112      	cbz	r2, 800b3a2 <_raise_r+0x1e>
 800b39c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3a0:	b94b      	cbnz	r3, 800b3b6 <_raise_r+0x32>
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f000 f830 	bl	800b408 <_getpid_r>
 800b3a8:	462a      	mov	r2, r5
 800b3aa:	4601      	mov	r1, r0
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b2:	f000 b817 	b.w	800b3e4 <_kill_r>
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d00a      	beq.n	800b3d0 <_raise_r+0x4c>
 800b3ba:	1c59      	adds	r1, r3, #1
 800b3bc:	d103      	bne.n	800b3c6 <_raise_r+0x42>
 800b3be:	2316      	movs	r3, #22
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	e7e7      	b.n	800b396 <_raise_r+0x12>
 800b3c6:	2400      	movs	r4, #0
 800b3c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	4798      	blx	r3
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e7e0      	b.n	800b396 <_raise_r+0x12>

0800b3d4 <raise>:
 800b3d4:	4b02      	ldr	r3, [pc, #8]	; (800b3e0 <raise+0xc>)
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	f7ff bfd3 	b.w	800b384 <_raise_r>
 800b3de:	bf00      	nop
 800b3e0:	20000410 	.word	0x20000410

0800b3e4 <_kill_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4d07      	ldr	r5, [pc, #28]	; (800b404 <_kill_r+0x20>)
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	602b      	str	r3, [r5, #0]
 800b3f2:	f002 fecb 	bl	800e18c <_kill>
 800b3f6:	1c43      	adds	r3, r0, #1
 800b3f8:	d102      	bne.n	800b400 <_kill_r+0x1c>
 800b3fa:	682b      	ldr	r3, [r5, #0]
 800b3fc:	b103      	cbz	r3, 800b400 <_kill_r+0x1c>
 800b3fe:	6023      	str	r3, [r4, #0]
 800b400:	bd38      	pop	{r3, r4, r5, pc}
 800b402:	bf00      	nop
 800b404:	200057bc 	.word	0x200057bc

0800b408 <_getpid_r>:
 800b408:	f002 beb0 	b.w	800e16c <_getpid>

0800b40c <__sread>:
 800b40c:	b510      	push	{r4, lr}
 800b40e:	460c      	mov	r4, r1
 800b410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b414:	f000 f894 	bl	800b540 <_read_r>
 800b418:	2800      	cmp	r0, #0
 800b41a:	bfab      	itete	ge
 800b41c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b41e:	89a3      	ldrhlt	r3, [r4, #12]
 800b420:	181b      	addge	r3, r3, r0
 800b422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b426:	bfac      	ite	ge
 800b428:	6563      	strge	r3, [r4, #84]	; 0x54
 800b42a:	81a3      	strhlt	r3, [r4, #12]
 800b42c:	bd10      	pop	{r4, pc}

0800b42e <__swrite>:
 800b42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b432:	461f      	mov	r7, r3
 800b434:	898b      	ldrh	r3, [r1, #12]
 800b436:	05db      	lsls	r3, r3, #23
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	4616      	mov	r6, r2
 800b43e:	d505      	bpl.n	800b44c <__swrite+0x1e>
 800b440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b444:	2302      	movs	r3, #2
 800b446:	2200      	movs	r2, #0
 800b448:	f000 f868 	bl	800b51c <_lseek_r>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	4632      	mov	r2, r6
 800b45a:	463b      	mov	r3, r7
 800b45c:	4628      	mov	r0, r5
 800b45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b462:	f000 b817 	b.w	800b494 <_write_r>

0800b466 <__sseek>:
 800b466:	b510      	push	{r4, lr}
 800b468:	460c      	mov	r4, r1
 800b46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46e:	f000 f855 	bl	800b51c <_lseek_r>
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	bf15      	itete	ne
 800b478:	6560      	strne	r0, [r4, #84]	; 0x54
 800b47a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b47e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b482:	81a3      	strheq	r3, [r4, #12]
 800b484:	bf18      	it	ne
 800b486:	81a3      	strhne	r3, [r4, #12]
 800b488:	bd10      	pop	{r4, pc}

0800b48a <__sclose>:
 800b48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48e:	f000 b813 	b.w	800b4b8 <_close_r>
	...

0800b494 <_write_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4d07      	ldr	r5, [pc, #28]	; (800b4b4 <_write_r+0x20>)
 800b498:	4604      	mov	r4, r0
 800b49a:	4608      	mov	r0, r1
 800b49c:	4611      	mov	r1, r2
 800b49e:	2200      	movs	r2, #0
 800b4a0:	602a      	str	r2, [r5, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f002 fe8a 	bl	800e1bc <_write>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d102      	bne.n	800b4b2 <_write_r+0x1e>
 800b4ac:	682b      	ldr	r3, [r5, #0]
 800b4ae:	b103      	cbz	r3, 800b4b2 <_write_r+0x1e>
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	bd38      	pop	{r3, r4, r5, pc}
 800b4b4:	200057bc 	.word	0x200057bc

0800b4b8 <_close_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4d06      	ldr	r5, [pc, #24]	; (800b4d4 <_close_r+0x1c>)
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4604      	mov	r4, r0
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	602b      	str	r3, [r5, #0]
 800b4c4:	f002 fe42 	bl	800e14c <_close>
 800b4c8:	1c43      	adds	r3, r0, #1
 800b4ca:	d102      	bne.n	800b4d2 <_close_r+0x1a>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	b103      	cbz	r3, 800b4d2 <_close_r+0x1a>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	200057bc 	.word	0x200057bc

0800b4d8 <_fstat_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4d07      	ldr	r5, [pc, #28]	; (800b4f8 <_fstat_r+0x20>)
 800b4dc:	2300      	movs	r3, #0
 800b4de:	4604      	mov	r4, r0
 800b4e0:	4608      	mov	r0, r1
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	602b      	str	r3, [r5, #0]
 800b4e6:	f002 fe39 	bl	800e15c <_fstat>
 800b4ea:	1c43      	adds	r3, r0, #1
 800b4ec:	d102      	bne.n	800b4f4 <_fstat_r+0x1c>
 800b4ee:	682b      	ldr	r3, [r5, #0]
 800b4f0:	b103      	cbz	r3, 800b4f4 <_fstat_r+0x1c>
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	bd38      	pop	{r3, r4, r5, pc}
 800b4f6:	bf00      	nop
 800b4f8:	200057bc 	.word	0x200057bc

0800b4fc <_isatty_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d06      	ldr	r5, [pc, #24]	; (800b518 <_isatty_r+0x1c>)
 800b500:	2300      	movs	r3, #0
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	f002 fe38 	bl	800e17c <_isatty>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_isatty_r+0x1a>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_isatty_r+0x1a>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	200057bc 	.word	0x200057bc

0800b51c <_lseek_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d07      	ldr	r5, [pc, #28]	; (800b53c <_lseek_r+0x20>)
 800b520:	4604      	mov	r4, r0
 800b522:	4608      	mov	r0, r1
 800b524:	4611      	mov	r1, r2
 800b526:	2200      	movs	r2, #0
 800b528:	602a      	str	r2, [r5, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f002 fe36 	bl	800e19c <_lseek>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_lseek_r+0x1e>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_lseek_r+0x1e>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	200057bc 	.word	0x200057bc

0800b540 <_read_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	; (800b560 <_read_r+0x20>)
 800b544:	4604      	mov	r4, r0
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f002 fe2c 	bl	800e1ac <_read>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_read_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_read_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	200057bc 	.word	0x200057bc
 800b564:	00000000 	.word	0x00000000

0800b568 <cos>:
 800b568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b56a:	ec53 2b10 	vmov	r2, r3, d0
 800b56e:	4824      	ldr	r0, [pc, #144]	; (800b600 <cos+0x98>)
 800b570:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b574:	4281      	cmp	r1, r0
 800b576:	dc06      	bgt.n	800b586 <cos+0x1e>
 800b578:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b5f8 <cos+0x90>
 800b57c:	f001 fe9c 	bl	800d2b8 <__kernel_cos>
 800b580:	ec51 0b10 	vmov	r0, r1, d0
 800b584:	e007      	b.n	800b596 <cos+0x2e>
 800b586:	481f      	ldr	r0, [pc, #124]	; (800b604 <cos+0x9c>)
 800b588:	4281      	cmp	r1, r0
 800b58a:	dd09      	ble.n	800b5a0 <cos+0x38>
 800b58c:	ee10 0a10 	vmov	r0, s0
 800b590:	4619      	mov	r1, r3
 800b592:	f7f4 fe79 	bl	8000288 <__aeabi_dsub>
 800b596:	ec41 0b10 	vmov	d0, r0, r1
 800b59a:	b005      	add	sp, #20
 800b59c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5a0:	4668      	mov	r0, sp
 800b5a2:	f001 f905 	bl	800c7b0 <__ieee754_rem_pio2>
 800b5a6:	f000 0003 	and.w	r0, r0, #3
 800b5aa:	2801      	cmp	r0, #1
 800b5ac:	d007      	beq.n	800b5be <cos+0x56>
 800b5ae:	2802      	cmp	r0, #2
 800b5b0:	d012      	beq.n	800b5d8 <cos+0x70>
 800b5b2:	b9c0      	cbnz	r0, 800b5e6 <cos+0x7e>
 800b5b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5b8:	ed9d 0b00 	vldr	d0, [sp]
 800b5bc:	e7de      	b.n	800b57c <cos+0x14>
 800b5be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5c2:	ed9d 0b00 	vldr	d0, [sp]
 800b5c6:	f002 fa7f 	bl	800dac8 <__kernel_sin>
 800b5ca:	ec53 2b10 	vmov	r2, r3, d0
 800b5ce:	ee10 0a10 	vmov	r0, s0
 800b5d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b5d6:	e7de      	b.n	800b596 <cos+0x2e>
 800b5d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5dc:	ed9d 0b00 	vldr	d0, [sp]
 800b5e0:	f001 fe6a 	bl	800d2b8 <__kernel_cos>
 800b5e4:	e7f1      	b.n	800b5ca <cos+0x62>
 800b5e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5ea:	ed9d 0b00 	vldr	d0, [sp]
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	f002 fa6a 	bl	800dac8 <__kernel_sin>
 800b5f4:	e7c4      	b.n	800b580 <cos+0x18>
 800b5f6:	bf00      	nop
	...
 800b600:	3fe921fb 	.word	0x3fe921fb
 800b604:	7fefffff 	.word	0x7fefffff

0800b608 <fabsf>:
 800b608:	ee10 3a10 	vmov	r3, s0
 800b60c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b610:	ee00 3a10 	vmov	s0, r3
 800b614:	4770      	bx	lr
	...

0800b618 <roundf>:
 800b618:	ee10 0a10 	vmov	r0, s0
 800b61c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b620:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b624:	2a16      	cmp	r2, #22
 800b626:	dc15      	bgt.n	800b654 <roundf+0x3c>
 800b628:	2a00      	cmp	r2, #0
 800b62a:	da08      	bge.n	800b63e <roundf+0x26>
 800b62c:	3201      	adds	r2, #1
 800b62e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b632:	d101      	bne.n	800b638 <roundf+0x20>
 800b634:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b638:	ee00 3a10 	vmov	s0, r3
 800b63c:	4770      	bx	lr
 800b63e:	4908      	ldr	r1, [pc, #32]	; (800b660 <roundf+0x48>)
 800b640:	4111      	asrs	r1, r2
 800b642:	4208      	tst	r0, r1
 800b644:	d0fa      	beq.n	800b63c <roundf+0x24>
 800b646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b64a:	4113      	asrs	r3, r2
 800b64c:	4403      	add	r3, r0
 800b64e:	ea23 0301 	bic.w	r3, r3, r1
 800b652:	e7f1      	b.n	800b638 <roundf+0x20>
 800b654:	2a80      	cmp	r2, #128	; 0x80
 800b656:	d1f1      	bne.n	800b63c <roundf+0x24>
 800b658:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	007fffff 	.word	0x007fffff
 800b664:	00000000 	.word	0x00000000

0800b668 <log>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	ed2d 8b02 	vpush	{d8}
 800b66e:	ec55 4b10 	vmov	r4, r5, d0
 800b672:	f000 f9bd 	bl	800b9f0 <__ieee754_log>
 800b676:	4b1e      	ldr	r3, [pc, #120]	; (800b6f0 <log+0x88>)
 800b678:	eeb0 8a40 	vmov.f32	s16, s0
 800b67c:	eef0 8a60 	vmov.f32	s17, s1
 800b680:	f993 3000 	ldrsb.w	r3, [r3]
 800b684:	3301      	adds	r3, #1
 800b686:	d01a      	beq.n	800b6be <log+0x56>
 800b688:	4622      	mov	r2, r4
 800b68a:	462b      	mov	r3, r5
 800b68c:	4620      	mov	r0, r4
 800b68e:	4629      	mov	r1, r5
 800b690:	f7f5 fa4c 	bl	8000b2c <__aeabi_dcmpun>
 800b694:	b998      	cbnz	r0, 800b6be <log+0x56>
 800b696:	2200      	movs	r2, #0
 800b698:	2300      	movs	r3, #0
 800b69a:	4620      	mov	r0, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	f7f5 fa3b 	bl	8000b18 <__aeabi_dcmpgt>
 800b6a2:	b960      	cbnz	r0, 800b6be <log+0x56>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	f7f5 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6b0:	b160      	cbz	r0, 800b6cc <log+0x64>
 800b6b2:	f7fb fafd 	bl	8006cb0 <__errno>
 800b6b6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800b6e8 <log+0x80>
 800b6ba:	2322      	movs	r3, #34	; 0x22
 800b6bc:	6003      	str	r3, [r0, #0]
 800b6be:	eeb0 0a48 	vmov.f32	s0, s16
 800b6c2:	eef0 0a68 	vmov.f32	s1, s17
 800b6c6:	ecbd 8b02 	vpop	{d8}
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	f7fb faf0 	bl	8006cb0 <__errno>
 800b6d0:	ecbd 8b02 	vpop	{d8}
 800b6d4:	2321      	movs	r3, #33	; 0x21
 800b6d6:	6003      	str	r3, [r0, #0]
 800b6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6dc:	4805      	ldr	r0, [pc, #20]	; (800b6f4 <log+0x8c>)
 800b6de:	f7ff b997 	b.w	800aa10 <nan>
 800b6e2:	bf00      	nop
 800b6e4:	f3af 8000 	nop.w
 800b6e8:	00000000 	.word	0x00000000
 800b6ec:	fff00000 	.word	0xfff00000
 800b6f0:	200005e4 	.word	0x200005e4
 800b6f4:	0800e8c0 	.word	0x0800e8c0

0800b6f8 <pow>:
 800b6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6fc:	ec59 8b10 	vmov	r8, r9, d0
 800b700:	ec57 6b11 	vmov	r6, r7, d1
 800b704:	f000 fb30 	bl	800bd68 <__ieee754_pow>
 800b708:	4b4e      	ldr	r3, [pc, #312]	; (800b844 <pow+0x14c>)
 800b70a:	f993 3000 	ldrsb.w	r3, [r3]
 800b70e:	3301      	adds	r3, #1
 800b710:	ec55 4b10 	vmov	r4, r5, d0
 800b714:	d015      	beq.n	800b742 <pow+0x4a>
 800b716:	4632      	mov	r2, r6
 800b718:	463b      	mov	r3, r7
 800b71a:	4630      	mov	r0, r6
 800b71c:	4639      	mov	r1, r7
 800b71e:	f7f5 fa05 	bl	8000b2c <__aeabi_dcmpun>
 800b722:	b970      	cbnz	r0, 800b742 <pow+0x4a>
 800b724:	4642      	mov	r2, r8
 800b726:	464b      	mov	r3, r9
 800b728:	4640      	mov	r0, r8
 800b72a:	4649      	mov	r1, r9
 800b72c:	f7f5 f9fe 	bl	8000b2c <__aeabi_dcmpun>
 800b730:	2200      	movs	r2, #0
 800b732:	2300      	movs	r3, #0
 800b734:	b148      	cbz	r0, 800b74a <pow+0x52>
 800b736:	4630      	mov	r0, r6
 800b738:	4639      	mov	r1, r7
 800b73a:	f7f5 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d17d      	bne.n	800b83e <pow+0x146>
 800b742:	ec45 4b10 	vmov	d0, r4, r5
 800b746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b74a:	4640      	mov	r0, r8
 800b74c:	4649      	mov	r1, r9
 800b74e:	f7f5 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b752:	b1e0      	cbz	r0, 800b78e <pow+0x96>
 800b754:	2200      	movs	r2, #0
 800b756:	2300      	movs	r3, #0
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f5 f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b760:	2800      	cmp	r0, #0
 800b762:	d16c      	bne.n	800b83e <pow+0x146>
 800b764:	ec47 6b10 	vmov	d0, r6, r7
 800b768:	f002 fa75 	bl	800dc56 <finite>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d0e8      	beq.n	800b742 <pow+0x4a>
 800b770:	2200      	movs	r2, #0
 800b772:	2300      	movs	r3, #0
 800b774:	4630      	mov	r0, r6
 800b776:	4639      	mov	r1, r7
 800b778:	f7f5 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d0e0      	beq.n	800b742 <pow+0x4a>
 800b780:	f7fb fa96 	bl	8006cb0 <__errno>
 800b784:	2321      	movs	r3, #33	; 0x21
 800b786:	6003      	str	r3, [r0, #0]
 800b788:	2400      	movs	r4, #0
 800b78a:	4d2f      	ldr	r5, [pc, #188]	; (800b848 <pow+0x150>)
 800b78c:	e7d9      	b.n	800b742 <pow+0x4a>
 800b78e:	ec45 4b10 	vmov	d0, r4, r5
 800b792:	f002 fa60 	bl	800dc56 <finite>
 800b796:	bbb8      	cbnz	r0, 800b808 <pow+0x110>
 800b798:	ec49 8b10 	vmov	d0, r8, r9
 800b79c:	f002 fa5b 	bl	800dc56 <finite>
 800b7a0:	b390      	cbz	r0, 800b808 <pow+0x110>
 800b7a2:	ec47 6b10 	vmov	d0, r6, r7
 800b7a6:	f002 fa56 	bl	800dc56 <finite>
 800b7aa:	b368      	cbz	r0, 800b808 <pow+0x110>
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	462b      	mov	r3, r5
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	f7f5 f9ba 	bl	8000b2c <__aeabi_dcmpun>
 800b7b8:	b160      	cbz	r0, 800b7d4 <pow+0xdc>
 800b7ba:	f7fb fa79 	bl	8006cb0 <__errno>
 800b7be:	2321      	movs	r3, #33	; 0x21
 800b7c0:	6003      	str	r3, [r0, #0]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	f7f5 f83f 	bl	800084c <__aeabi_ddiv>
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	460d      	mov	r5, r1
 800b7d2:	e7b6      	b.n	800b742 <pow+0x4a>
 800b7d4:	f7fb fa6c 	bl	8006cb0 <__errno>
 800b7d8:	2322      	movs	r3, #34	; 0x22
 800b7da:	6003      	str	r3, [r0, #0]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2300      	movs	r3, #0
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	f7f5 f97a 	bl	8000adc <__aeabi_dcmplt>
 800b7e8:	2400      	movs	r4, #0
 800b7ea:	b158      	cbz	r0, 800b804 <pow+0x10c>
 800b7ec:	ec47 6b10 	vmov	d0, r6, r7
 800b7f0:	f002 fabe 	bl	800dd70 <rint>
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	ec51 0b10 	vmov	r0, r1, d0
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	f7f5 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 800b800:	2800      	cmp	r0, #0
 800b802:	d0c2      	beq.n	800b78a <pow+0x92>
 800b804:	4d11      	ldr	r5, [pc, #68]	; (800b84c <pow+0x154>)
 800b806:	e79c      	b.n	800b742 <pow+0x4a>
 800b808:	2200      	movs	r2, #0
 800b80a:	2300      	movs	r3, #0
 800b80c:	4620      	mov	r0, r4
 800b80e:	4629      	mov	r1, r5
 800b810:	f7f5 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b814:	2800      	cmp	r0, #0
 800b816:	d094      	beq.n	800b742 <pow+0x4a>
 800b818:	ec49 8b10 	vmov	d0, r8, r9
 800b81c:	f002 fa1b 	bl	800dc56 <finite>
 800b820:	2800      	cmp	r0, #0
 800b822:	d08e      	beq.n	800b742 <pow+0x4a>
 800b824:	ec47 6b10 	vmov	d0, r6, r7
 800b828:	f002 fa15 	bl	800dc56 <finite>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d088      	beq.n	800b742 <pow+0x4a>
 800b830:	f7fb fa3e 	bl	8006cb0 <__errno>
 800b834:	2322      	movs	r3, #34	; 0x22
 800b836:	6003      	str	r3, [r0, #0]
 800b838:	2400      	movs	r4, #0
 800b83a:	2500      	movs	r5, #0
 800b83c:	e781      	b.n	800b742 <pow+0x4a>
 800b83e:	4d04      	ldr	r5, [pc, #16]	; (800b850 <pow+0x158>)
 800b840:	2400      	movs	r4, #0
 800b842:	e77e      	b.n	800b742 <pow+0x4a>
 800b844:	200005e4 	.word	0x200005e4
 800b848:	fff00000 	.word	0xfff00000
 800b84c:	7ff00000 	.word	0x7ff00000
 800b850:	3ff00000 	.word	0x3ff00000

0800b854 <sqrt>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	ed2d 8b02 	vpush	{d8}
 800b85a:	ec55 4b10 	vmov	r4, r5, d0
 800b85e:	f001 f9b1 	bl	800cbc4 <__ieee754_sqrt>
 800b862:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <sqrt+0x64>)
 800b864:	eeb0 8a40 	vmov.f32	s16, s0
 800b868:	eef0 8a60 	vmov.f32	s17, s1
 800b86c:	f993 3000 	ldrsb.w	r3, [r3]
 800b870:	3301      	adds	r3, #1
 800b872:	d019      	beq.n	800b8a8 <sqrt+0x54>
 800b874:	4622      	mov	r2, r4
 800b876:	462b      	mov	r3, r5
 800b878:	4620      	mov	r0, r4
 800b87a:	4629      	mov	r1, r5
 800b87c:	f7f5 f956 	bl	8000b2c <__aeabi_dcmpun>
 800b880:	b990      	cbnz	r0, 800b8a8 <sqrt+0x54>
 800b882:	2200      	movs	r2, #0
 800b884:	2300      	movs	r3, #0
 800b886:	4620      	mov	r0, r4
 800b888:	4629      	mov	r1, r5
 800b88a:	f7f5 f927 	bl	8000adc <__aeabi_dcmplt>
 800b88e:	b158      	cbz	r0, 800b8a8 <sqrt+0x54>
 800b890:	f7fb fa0e 	bl	8006cb0 <__errno>
 800b894:	2321      	movs	r3, #33	; 0x21
 800b896:	6003      	str	r3, [r0, #0]
 800b898:	2200      	movs	r2, #0
 800b89a:	2300      	movs	r3, #0
 800b89c:	4610      	mov	r0, r2
 800b89e:	4619      	mov	r1, r3
 800b8a0:	f7f4 ffd4 	bl	800084c <__aeabi_ddiv>
 800b8a4:	ec41 0b18 	vmov	d8, r0, r1
 800b8a8:	eeb0 0a48 	vmov.f32	s0, s16
 800b8ac:	eef0 0a68 	vmov.f32	s1, s17
 800b8b0:	ecbd 8b02 	vpop	{d8}
 800b8b4:	bd38      	pop	{r3, r4, r5, pc}
 800b8b6:	bf00      	nop
 800b8b8:	200005e4 	.word	0x200005e4

0800b8bc <powf>:
 800b8bc:	b508      	push	{r3, lr}
 800b8be:	ed2d 8b04 	vpush	{d8-d9}
 800b8c2:	eeb0 9a40 	vmov.f32	s18, s0
 800b8c6:	eef0 8a60 	vmov.f32	s17, s1
 800b8ca:	f001 fa2f 	bl	800cd2c <__ieee754_powf>
 800b8ce:	4b43      	ldr	r3, [pc, #268]	; (800b9dc <powf+0x120>)
 800b8d0:	f993 3000 	ldrsb.w	r3, [r3]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	eeb0 8a40 	vmov.f32	s16, s0
 800b8da:	d012      	beq.n	800b902 <powf+0x46>
 800b8dc:	eef4 8a68 	vcmp.f32	s17, s17
 800b8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e4:	d60d      	bvs.n	800b902 <powf+0x46>
 800b8e6:	eeb4 9a49 	vcmp.f32	s18, s18
 800b8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ee:	d70d      	bvc.n	800b90c <powf+0x50>
 800b8f0:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b8fc:	bf08      	it	eq
 800b8fe:	eeb0 8a67 	vmoveq.f32	s16, s15
 800b902:	eeb0 0a48 	vmov.f32	s0, s16
 800b906:	ecbd 8b04 	vpop	{d8-d9}
 800b90a:	bd08      	pop	{r3, pc}
 800b90c:	eddf 9a34 	vldr	s19, [pc, #208]	; 800b9e0 <powf+0x124>
 800b910:	eeb4 9a69 	vcmp.f32	s18, s19
 800b914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b918:	d116      	bne.n	800b948 <powf+0x8c>
 800b91a:	eef4 8a69 	vcmp.f32	s17, s19
 800b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b922:	d057      	beq.n	800b9d4 <powf+0x118>
 800b924:	eeb0 0a68 	vmov.f32	s0, s17
 800b928:	f002 fb34 	bl	800df94 <finitef>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d0e8      	beq.n	800b902 <powf+0x46>
 800b930:	eef4 8ae9 	vcmpe.f32	s17, s19
 800b934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b938:	d5e3      	bpl.n	800b902 <powf+0x46>
 800b93a:	f7fb f9b9 	bl	8006cb0 <__errno>
 800b93e:	2321      	movs	r3, #33	; 0x21
 800b940:	6003      	str	r3, [r0, #0]
 800b942:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800b9e4 <powf+0x128>
 800b946:	e7dc      	b.n	800b902 <powf+0x46>
 800b948:	f002 fb24 	bl	800df94 <finitef>
 800b94c:	bb50      	cbnz	r0, 800b9a4 <powf+0xe8>
 800b94e:	eeb0 0a49 	vmov.f32	s0, s18
 800b952:	f002 fb1f 	bl	800df94 <finitef>
 800b956:	b328      	cbz	r0, 800b9a4 <powf+0xe8>
 800b958:	eeb0 0a68 	vmov.f32	s0, s17
 800b95c:	f002 fb1a 	bl	800df94 <finitef>
 800b960:	b300      	cbz	r0, 800b9a4 <powf+0xe8>
 800b962:	eeb4 8a48 	vcmp.f32	s16, s16
 800b966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b96a:	d706      	bvc.n	800b97a <powf+0xbe>
 800b96c:	f7fb f9a0 	bl	8006cb0 <__errno>
 800b970:	2321      	movs	r3, #33	; 0x21
 800b972:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800b976:	6003      	str	r3, [r0, #0]
 800b978:	e7c3      	b.n	800b902 <powf+0x46>
 800b97a:	f7fb f999 	bl	8006cb0 <__errno>
 800b97e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800b982:	2322      	movs	r3, #34	; 0x22
 800b984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b988:	6003      	str	r3, [r0, #0]
 800b98a:	d508      	bpl.n	800b99e <powf+0xe2>
 800b98c:	eeb0 0a68 	vmov.f32	s0, s17
 800b990:	f002 fb0e 	bl	800dfb0 <rintf>
 800b994:	eeb4 0a68 	vcmp.f32	s0, s17
 800b998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b99c:	d1d1      	bne.n	800b942 <powf+0x86>
 800b99e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800b9e8 <powf+0x12c>
 800b9a2:	e7ae      	b.n	800b902 <powf+0x46>
 800b9a4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ac:	d1a9      	bne.n	800b902 <powf+0x46>
 800b9ae:	eeb0 0a49 	vmov.f32	s0, s18
 800b9b2:	f002 faef 	bl	800df94 <finitef>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d0a3      	beq.n	800b902 <powf+0x46>
 800b9ba:	eeb0 0a68 	vmov.f32	s0, s17
 800b9be:	f002 fae9 	bl	800df94 <finitef>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d09d      	beq.n	800b902 <powf+0x46>
 800b9c6:	f7fb f973 	bl	8006cb0 <__errno>
 800b9ca:	2322      	movs	r3, #34	; 0x22
 800b9cc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800b9e0 <powf+0x124>
 800b9d0:	6003      	str	r3, [r0, #0]
 800b9d2:	e796      	b.n	800b902 <powf+0x46>
 800b9d4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b9d8:	e793      	b.n	800b902 <powf+0x46>
 800b9da:	bf00      	nop
 800b9dc:	200005e4 	.word	0x200005e4
 800b9e0:	00000000 	.word	0x00000000
 800b9e4:	ff800000 	.word	0xff800000
 800b9e8:	7f800000 	.word	0x7f800000
 800b9ec:	00000000 	.word	0x00000000

0800b9f0 <__ieee754_log>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	ec51 0b10 	vmov	r0, r1, d0
 800b9f8:	ed2d 8b04 	vpush	{d8-d9}
 800b9fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ba00:	b083      	sub	sp, #12
 800ba02:	460d      	mov	r5, r1
 800ba04:	da29      	bge.n	800ba5a <__ieee754_log+0x6a>
 800ba06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba0a:	4303      	orrs	r3, r0
 800ba0c:	ee10 2a10 	vmov	r2, s0
 800ba10:	d10c      	bne.n	800ba2c <__ieee754_log+0x3c>
 800ba12:	49cf      	ldr	r1, [pc, #828]	; (800bd50 <__ieee754_log+0x360>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	2300      	movs	r3, #0
 800ba18:	2000      	movs	r0, #0
 800ba1a:	f7f4 ff17 	bl	800084c <__aeabi_ddiv>
 800ba1e:	ec41 0b10 	vmov	d0, r0, r1
 800ba22:	b003      	add	sp, #12
 800ba24:	ecbd 8b04 	vpop	{d8-d9}
 800ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2c:	2900      	cmp	r1, #0
 800ba2e:	da05      	bge.n	800ba3c <__ieee754_log+0x4c>
 800ba30:	460b      	mov	r3, r1
 800ba32:	f7f4 fc29 	bl	8000288 <__aeabi_dsub>
 800ba36:	2200      	movs	r2, #0
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e7ee      	b.n	800ba1a <__ieee754_log+0x2a>
 800ba3c:	4bc5      	ldr	r3, [pc, #788]	; (800bd54 <__ieee754_log+0x364>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f7f4 fdda 	bl	80005f8 <__aeabi_dmul>
 800ba44:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ba48:	460d      	mov	r5, r1
 800ba4a:	4ac3      	ldr	r2, [pc, #780]	; (800bd58 <__ieee754_log+0x368>)
 800ba4c:	4295      	cmp	r5, r2
 800ba4e:	dd06      	ble.n	800ba5e <__ieee754_log+0x6e>
 800ba50:	4602      	mov	r2, r0
 800ba52:	460b      	mov	r3, r1
 800ba54:	f7f4 fc1a 	bl	800028c <__adddf3>
 800ba58:	e7e1      	b.n	800ba1e <__ieee754_log+0x2e>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e7f5      	b.n	800ba4a <__ieee754_log+0x5a>
 800ba5e:	152c      	asrs	r4, r5, #20
 800ba60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ba64:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ba68:	441c      	add	r4, r3
 800ba6a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ba6e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ba72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba76:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ba7a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ba7e:	ea42 0105 	orr.w	r1, r2, r5
 800ba82:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ba86:	2200      	movs	r2, #0
 800ba88:	4bb4      	ldr	r3, [pc, #720]	; (800bd5c <__ieee754_log+0x36c>)
 800ba8a:	f7f4 fbfd 	bl	8000288 <__aeabi_dsub>
 800ba8e:	1cab      	adds	r3, r5, #2
 800ba90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	4682      	mov	sl, r0
 800ba98:	468b      	mov	fp, r1
 800ba9a:	f04f 0200 	mov.w	r2, #0
 800ba9e:	dc53      	bgt.n	800bb48 <__ieee754_log+0x158>
 800baa0:	2300      	movs	r3, #0
 800baa2:	f7f5 f811 	bl	8000ac8 <__aeabi_dcmpeq>
 800baa6:	b1d0      	cbz	r0, 800bade <__ieee754_log+0xee>
 800baa8:	2c00      	cmp	r4, #0
 800baaa:	f000 8122 	beq.w	800bcf2 <__ieee754_log+0x302>
 800baae:	4620      	mov	r0, r4
 800bab0:	f7f4 fd38 	bl	8000524 <__aeabi_i2d>
 800bab4:	a390      	add	r3, pc, #576	; (adr r3, 800bcf8 <__ieee754_log+0x308>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	4606      	mov	r6, r0
 800babc:	460f      	mov	r7, r1
 800babe:	f7f4 fd9b 	bl	80005f8 <__aeabi_dmul>
 800bac2:	a38f      	add	r3, pc, #572	; (adr r3, 800bd00 <__ieee754_log+0x310>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	4604      	mov	r4, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	4630      	mov	r0, r6
 800bace:	4639      	mov	r1, r7
 800bad0:	f7f4 fd92 	bl	80005f8 <__aeabi_dmul>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4620      	mov	r0, r4
 800bada:	4629      	mov	r1, r5
 800badc:	e7ba      	b.n	800ba54 <__ieee754_log+0x64>
 800bade:	a38a      	add	r3, pc, #552	; (adr r3, 800bd08 <__ieee754_log+0x318>)
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	4650      	mov	r0, sl
 800bae6:	4659      	mov	r1, fp
 800bae8:	f7f4 fd86 	bl	80005f8 <__aeabi_dmul>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	2000      	movs	r0, #0
 800baf2:	499b      	ldr	r1, [pc, #620]	; (800bd60 <__ieee754_log+0x370>)
 800baf4:	f7f4 fbc8 	bl	8000288 <__aeabi_dsub>
 800baf8:	4652      	mov	r2, sl
 800bafa:	4606      	mov	r6, r0
 800bafc:	460f      	mov	r7, r1
 800bafe:	465b      	mov	r3, fp
 800bb00:	4650      	mov	r0, sl
 800bb02:	4659      	mov	r1, fp
 800bb04:	f7f4 fd78 	bl	80005f8 <__aeabi_dmul>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	4639      	mov	r1, r7
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	4606      	mov	r6, r0
 800bb16:	460f      	mov	r7, r1
 800bb18:	b914      	cbnz	r4, 800bb20 <__ieee754_log+0x130>
 800bb1a:	4632      	mov	r2, r6
 800bb1c:	463b      	mov	r3, r7
 800bb1e:	e0a2      	b.n	800bc66 <__ieee754_log+0x276>
 800bb20:	4620      	mov	r0, r4
 800bb22:	f7f4 fcff 	bl	8000524 <__aeabi_i2d>
 800bb26:	a374      	add	r3, pc, #464	; (adr r3, 800bcf8 <__ieee754_log+0x308>)
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	4680      	mov	r8, r0
 800bb2e:	4689      	mov	r9, r1
 800bb30:	f7f4 fd62 	bl	80005f8 <__aeabi_dmul>
 800bb34:	a372      	add	r3, pc, #456	; (adr r3, 800bd00 <__ieee754_log+0x310>)
 800bb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	460d      	mov	r5, r1
 800bb3e:	4640      	mov	r0, r8
 800bb40:	4649      	mov	r1, r9
 800bb42:	f7f4 fd59 	bl	80005f8 <__aeabi_dmul>
 800bb46:	e0a7      	b.n	800bc98 <__ieee754_log+0x2a8>
 800bb48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb4c:	f7f4 fb9e 	bl	800028c <__adddf3>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4650      	mov	r0, sl
 800bb56:	4659      	mov	r1, fp
 800bb58:	f7f4 fe78 	bl	800084c <__aeabi_ddiv>
 800bb5c:	ec41 0b18 	vmov	d8, r0, r1
 800bb60:	4620      	mov	r0, r4
 800bb62:	f7f4 fcdf 	bl	8000524 <__aeabi_i2d>
 800bb66:	ec53 2b18 	vmov	r2, r3, d8
 800bb6a:	ec41 0b19 	vmov	d9, r0, r1
 800bb6e:	ec51 0b18 	vmov	r0, r1, d8
 800bb72:	f7f4 fd41 	bl	80005f8 <__aeabi_dmul>
 800bb76:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800bb7a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800bb7e:	9301      	str	r3, [sp, #4]
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	f7f4 fd36 	bl	80005f8 <__aeabi_dmul>
 800bb8c:	a360      	add	r3, pc, #384	; (adr r3, 800bd10 <__ieee754_log+0x320>)
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	4606      	mov	r6, r0
 800bb94:	460f      	mov	r7, r1
 800bb96:	f7f4 fd2f 	bl	80005f8 <__aeabi_dmul>
 800bb9a:	a35f      	add	r3, pc, #380	; (adr r3, 800bd18 <__ieee754_log+0x328>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	f7f4 fb74 	bl	800028c <__adddf3>
 800bba4:	4632      	mov	r2, r6
 800bba6:	463b      	mov	r3, r7
 800bba8:	f7f4 fd26 	bl	80005f8 <__aeabi_dmul>
 800bbac:	a35c      	add	r3, pc, #368	; (adr r3, 800bd20 <__ieee754_log+0x330>)
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	f7f4 fb6b 	bl	800028c <__adddf3>
 800bbb6:	4632      	mov	r2, r6
 800bbb8:	463b      	mov	r3, r7
 800bbba:	f7f4 fd1d 	bl	80005f8 <__aeabi_dmul>
 800bbbe:	a35a      	add	r3, pc, #360	; (adr r3, 800bd28 <__ieee754_log+0x338>)
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f7f4 fb62 	bl	800028c <__adddf3>
 800bbc8:	4642      	mov	r2, r8
 800bbca:	464b      	mov	r3, r9
 800bbcc:	f7f4 fd14 	bl	80005f8 <__aeabi_dmul>
 800bbd0:	a357      	add	r3, pc, #348	; (adr r3, 800bd30 <__ieee754_log+0x340>)
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	4689      	mov	r9, r1
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fd0b 	bl	80005f8 <__aeabi_dmul>
 800bbe2:	a355      	add	r3, pc, #340	; (adr r3, 800bd38 <__ieee754_log+0x348>)
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	f7f4 fb50 	bl	800028c <__adddf3>
 800bbec:	4632      	mov	r2, r6
 800bbee:	463b      	mov	r3, r7
 800bbf0:	f7f4 fd02 	bl	80005f8 <__aeabi_dmul>
 800bbf4:	a352      	add	r3, pc, #328	; (adr r3, 800bd40 <__ieee754_log+0x350>)
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	f7f4 fb47 	bl	800028c <__adddf3>
 800bbfe:	4632      	mov	r2, r6
 800bc00:	463b      	mov	r3, r7
 800bc02:	f7f4 fcf9 	bl	80005f8 <__aeabi_dmul>
 800bc06:	460b      	mov	r3, r1
 800bc08:	4602      	mov	r2, r0
 800bc0a:	4649      	mov	r1, r9
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	f7f4 fb3d 	bl	800028c <__adddf3>
 800bc12:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800bc16:	9b01      	ldr	r3, [sp, #4]
 800bc18:	3551      	adds	r5, #81	; 0x51
 800bc1a:	431d      	orrs	r5, r3
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	4680      	mov	r8, r0
 800bc20:	4689      	mov	r9, r1
 800bc22:	dd48      	ble.n	800bcb6 <__ieee754_log+0x2c6>
 800bc24:	4b4e      	ldr	r3, [pc, #312]	; (800bd60 <__ieee754_log+0x370>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	4650      	mov	r0, sl
 800bc2a:	4659      	mov	r1, fp
 800bc2c:	f7f4 fce4 	bl	80005f8 <__aeabi_dmul>
 800bc30:	4652      	mov	r2, sl
 800bc32:	465b      	mov	r3, fp
 800bc34:	f7f4 fce0 	bl	80005f8 <__aeabi_dmul>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	460f      	mov	r7, r1
 800bc40:	4640      	mov	r0, r8
 800bc42:	4649      	mov	r1, r9
 800bc44:	f7f4 fb22 	bl	800028c <__adddf3>
 800bc48:	ec53 2b18 	vmov	r2, r3, d8
 800bc4c:	f7f4 fcd4 	bl	80005f8 <__aeabi_dmul>
 800bc50:	4680      	mov	r8, r0
 800bc52:	4689      	mov	r9, r1
 800bc54:	b964      	cbnz	r4, 800bc70 <__ieee754_log+0x280>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	f7f4 fb13 	bl	8000288 <__aeabi_dsub>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	4650      	mov	r0, sl
 800bc68:	4659      	mov	r1, fp
 800bc6a:	f7f4 fb0d 	bl	8000288 <__aeabi_dsub>
 800bc6e:	e6d6      	b.n	800ba1e <__ieee754_log+0x2e>
 800bc70:	a321      	add	r3, pc, #132	; (adr r3, 800bcf8 <__ieee754_log+0x308>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	ec51 0b19 	vmov	r0, r1, d9
 800bc7a:	f7f4 fcbd 	bl	80005f8 <__aeabi_dmul>
 800bc7e:	a320      	add	r3, pc, #128	; (adr r3, 800bd00 <__ieee754_log+0x310>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	4604      	mov	r4, r0
 800bc86:	460d      	mov	r5, r1
 800bc88:	ec51 0b19 	vmov	r0, r1, d9
 800bc8c:	f7f4 fcb4 	bl	80005f8 <__aeabi_dmul>
 800bc90:	4642      	mov	r2, r8
 800bc92:	464b      	mov	r3, r9
 800bc94:	f7f4 fafa 	bl	800028c <__adddf3>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	4639      	mov	r1, r7
 800bca0:	f7f4 faf2 	bl	8000288 <__aeabi_dsub>
 800bca4:	4652      	mov	r2, sl
 800bca6:	465b      	mov	r3, fp
 800bca8:	f7f4 faee 	bl	8000288 <__aeabi_dsub>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	e7d9      	b.n	800bc6a <__ieee754_log+0x27a>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4650      	mov	r0, sl
 800bcbc:	4659      	mov	r1, fp
 800bcbe:	f7f4 fae3 	bl	8000288 <__aeabi_dsub>
 800bcc2:	ec53 2b18 	vmov	r2, r3, d8
 800bcc6:	f7f4 fc97 	bl	80005f8 <__aeabi_dmul>
 800bcca:	4606      	mov	r6, r0
 800bccc:	460f      	mov	r7, r1
 800bcce:	2c00      	cmp	r4, #0
 800bcd0:	f43f af23 	beq.w	800bb1a <__ieee754_log+0x12a>
 800bcd4:	a308      	add	r3, pc, #32	; (adr r3, 800bcf8 <__ieee754_log+0x308>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	ec51 0b19 	vmov	r0, r1, d9
 800bcde:	f7f4 fc8b 	bl	80005f8 <__aeabi_dmul>
 800bce2:	a307      	add	r3, pc, #28	; (adr r3, 800bd00 <__ieee754_log+0x310>)
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	4604      	mov	r4, r0
 800bcea:	460d      	mov	r5, r1
 800bcec:	ec51 0b19 	vmov	r0, r1, d9
 800bcf0:	e727      	b.n	800bb42 <__ieee754_log+0x152>
 800bcf2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800bd48 <__ieee754_log+0x358>
 800bcf6:	e694      	b.n	800ba22 <__ieee754_log+0x32>
 800bcf8:	fee00000 	.word	0xfee00000
 800bcfc:	3fe62e42 	.word	0x3fe62e42
 800bd00:	35793c76 	.word	0x35793c76
 800bd04:	3dea39ef 	.word	0x3dea39ef
 800bd08:	55555555 	.word	0x55555555
 800bd0c:	3fd55555 	.word	0x3fd55555
 800bd10:	df3e5244 	.word	0xdf3e5244
 800bd14:	3fc2f112 	.word	0x3fc2f112
 800bd18:	96cb03de 	.word	0x96cb03de
 800bd1c:	3fc74664 	.word	0x3fc74664
 800bd20:	94229359 	.word	0x94229359
 800bd24:	3fd24924 	.word	0x3fd24924
 800bd28:	55555593 	.word	0x55555593
 800bd2c:	3fe55555 	.word	0x3fe55555
 800bd30:	d078c69f 	.word	0xd078c69f
 800bd34:	3fc39a09 	.word	0x3fc39a09
 800bd38:	1d8e78af 	.word	0x1d8e78af
 800bd3c:	3fcc71c5 	.word	0x3fcc71c5
 800bd40:	9997fa04 	.word	0x9997fa04
 800bd44:	3fd99999 	.word	0x3fd99999
	...
 800bd50:	c3500000 	.word	0xc3500000
 800bd54:	43500000 	.word	0x43500000
 800bd58:	7fefffff 	.word	0x7fefffff
 800bd5c:	3ff00000 	.word	0x3ff00000
 800bd60:	3fe00000 	.word	0x3fe00000
 800bd64:	00000000 	.word	0x00000000

0800bd68 <__ieee754_pow>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	ed2d 8b06 	vpush	{d8-d10}
 800bd70:	b08d      	sub	sp, #52	; 0x34
 800bd72:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bd76:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800bd7a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bd7e:	ea56 0100 	orrs.w	r1, r6, r0
 800bd82:	ec53 2b10 	vmov	r2, r3, d0
 800bd86:	f000 84d1 	beq.w	800c72c <__ieee754_pow+0x9c4>
 800bd8a:	497f      	ldr	r1, [pc, #508]	; (800bf88 <__ieee754_pow+0x220>)
 800bd8c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bd90:	428c      	cmp	r4, r1
 800bd92:	ee10 8a10 	vmov	r8, s0
 800bd96:	4699      	mov	r9, r3
 800bd98:	dc09      	bgt.n	800bdae <__ieee754_pow+0x46>
 800bd9a:	d103      	bne.n	800bda4 <__ieee754_pow+0x3c>
 800bd9c:	b97a      	cbnz	r2, 800bdbe <__ieee754_pow+0x56>
 800bd9e:	42a6      	cmp	r6, r4
 800bda0:	dd02      	ble.n	800bda8 <__ieee754_pow+0x40>
 800bda2:	e00c      	b.n	800bdbe <__ieee754_pow+0x56>
 800bda4:	428e      	cmp	r6, r1
 800bda6:	dc02      	bgt.n	800bdae <__ieee754_pow+0x46>
 800bda8:	428e      	cmp	r6, r1
 800bdaa:	d110      	bne.n	800bdce <__ieee754_pow+0x66>
 800bdac:	b178      	cbz	r0, 800bdce <__ieee754_pow+0x66>
 800bdae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bdb2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bdb6:	ea54 0308 	orrs.w	r3, r4, r8
 800bdba:	f000 84b7 	beq.w	800c72c <__ieee754_pow+0x9c4>
 800bdbe:	4873      	ldr	r0, [pc, #460]	; (800bf8c <__ieee754_pow+0x224>)
 800bdc0:	b00d      	add	sp, #52	; 0x34
 800bdc2:	ecbd 8b06 	vpop	{d8-d10}
 800bdc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdca:	f7fe be21 	b.w	800aa10 <nan>
 800bdce:	f1b9 0f00 	cmp.w	r9, #0
 800bdd2:	da36      	bge.n	800be42 <__ieee754_pow+0xda>
 800bdd4:	496e      	ldr	r1, [pc, #440]	; (800bf90 <__ieee754_pow+0x228>)
 800bdd6:	428e      	cmp	r6, r1
 800bdd8:	dc51      	bgt.n	800be7e <__ieee754_pow+0x116>
 800bdda:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800bdde:	428e      	cmp	r6, r1
 800bde0:	f340 84af 	ble.w	800c742 <__ieee754_pow+0x9da>
 800bde4:	1531      	asrs	r1, r6, #20
 800bde6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bdea:	2914      	cmp	r1, #20
 800bdec:	dd0f      	ble.n	800be0e <__ieee754_pow+0xa6>
 800bdee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800bdf2:	fa20 fc01 	lsr.w	ip, r0, r1
 800bdf6:	fa0c f101 	lsl.w	r1, ip, r1
 800bdfa:	4281      	cmp	r1, r0
 800bdfc:	f040 84a1 	bne.w	800c742 <__ieee754_pow+0x9da>
 800be00:	f00c 0c01 	and.w	ip, ip, #1
 800be04:	f1cc 0102 	rsb	r1, ip, #2
 800be08:	9100      	str	r1, [sp, #0]
 800be0a:	b180      	cbz	r0, 800be2e <__ieee754_pow+0xc6>
 800be0c:	e059      	b.n	800bec2 <__ieee754_pow+0x15a>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d155      	bne.n	800bebe <__ieee754_pow+0x156>
 800be12:	f1c1 0114 	rsb	r1, r1, #20
 800be16:	fa46 fc01 	asr.w	ip, r6, r1
 800be1a:	fa0c f101 	lsl.w	r1, ip, r1
 800be1e:	42b1      	cmp	r1, r6
 800be20:	f040 848c 	bne.w	800c73c <__ieee754_pow+0x9d4>
 800be24:	f00c 0c01 	and.w	ip, ip, #1
 800be28:	f1cc 0102 	rsb	r1, ip, #2
 800be2c:	9100      	str	r1, [sp, #0]
 800be2e:	4959      	ldr	r1, [pc, #356]	; (800bf94 <__ieee754_pow+0x22c>)
 800be30:	428e      	cmp	r6, r1
 800be32:	d12d      	bne.n	800be90 <__ieee754_pow+0x128>
 800be34:	2f00      	cmp	r7, #0
 800be36:	da79      	bge.n	800bf2c <__ieee754_pow+0x1c4>
 800be38:	4956      	ldr	r1, [pc, #344]	; (800bf94 <__ieee754_pow+0x22c>)
 800be3a:	2000      	movs	r0, #0
 800be3c:	f7f4 fd06 	bl	800084c <__aeabi_ddiv>
 800be40:	e016      	b.n	800be70 <__ieee754_pow+0x108>
 800be42:	2100      	movs	r1, #0
 800be44:	9100      	str	r1, [sp, #0]
 800be46:	2800      	cmp	r0, #0
 800be48:	d13b      	bne.n	800bec2 <__ieee754_pow+0x15a>
 800be4a:	494f      	ldr	r1, [pc, #316]	; (800bf88 <__ieee754_pow+0x220>)
 800be4c:	428e      	cmp	r6, r1
 800be4e:	d1ee      	bne.n	800be2e <__ieee754_pow+0xc6>
 800be50:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800be54:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800be58:	ea53 0308 	orrs.w	r3, r3, r8
 800be5c:	f000 8466 	beq.w	800c72c <__ieee754_pow+0x9c4>
 800be60:	4b4d      	ldr	r3, [pc, #308]	; (800bf98 <__ieee754_pow+0x230>)
 800be62:	429c      	cmp	r4, r3
 800be64:	dd0d      	ble.n	800be82 <__ieee754_pow+0x11a>
 800be66:	2f00      	cmp	r7, #0
 800be68:	f280 8464 	bge.w	800c734 <__ieee754_pow+0x9cc>
 800be6c:	2000      	movs	r0, #0
 800be6e:	2100      	movs	r1, #0
 800be70:	ec41 0b10 	vmov	d0, r0, r1
 800be74:	b00d      	add	sp, #52	; 0x34
 800be76:	ecbd 8b06 	vpop	{d8-d10}
 800be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7e:	2102      	movs	r1, #2
 800be80:	e7e0      	b.n	800be44 <__ieee754_pow+0xdc>
 800be82:	2f00      	cmp	r7, #0
 800be84:	daf2      	bge.n	800be6c <__ieee754_pow+0x104>
 800be86:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800be8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800be8e:	e7ef      	b.n	800be70 <__ieee754_pow+0x108>
 800be90:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800be94:	d104      	bne.n	800bea0 <__ieee754_pow+0x138>
 800be96:	4610      	mov	r0, r2
 800be98:	4619      	mov	r1, r3
 800be9a:	f7f4 fbad 	bl	80005f8 <__aeabi_dmul>
 800be9e:	e7e7      	b.n	800be70 <__ieee754_pow+0x108>
 800bea0:	493e      	ldr	r1, [pc, #248]	; (800bf9c <__ieee754_pow+0x234>)
 800bea2:	428f      	cmp	r7, r1
 800bea4:	d10d      	bne.n	800bec2 <__ieee754_pow+0x15a>
 800bea6:	f1b9 0f00 	cmp.w	r9, #0
 800beaa:	db0a      	blt.n	800bec2 <__ieee754_pow+0x15a>
 800beac:	ec43 2b10 	vmov	d0, r2, r3
 800beb0:	b00d      	add	sp, #52	; 0x34
 800beb2:	ecbd 8b06 	vpop	{d8-d10}
 800beb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beba:	f000 be83 	b.w	800cbc4 <__ieee754_sqrt>
 800bebe:	2100      	movs	r1, #0
 800bec0:	9100      	str	r1, [sp, #0]
 800bec2:	ec43 2b10 	vmov	d0, r2, r3
 800bec6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800beca:	f001 febb 	bl	800dc44 <fabs>
 800bece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bed2:	ec51 0b10 	vmov	r0, r1, d0
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	d12a      	bne.n	800bf32 <__ieee754_pow+0x1ca>
 800bedc:	b12c      	cbz	r4, 800beea <__ieee754_pow+0x182>
 800bede:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800bf94 <__ieee754_pow+0x22c>
 800bee2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800bee6:	45e6      	cmp	lr, ip
 800bee8:	d123      	bne.n	800bf32 <__ieee754_pow+0x1ca>
 800beea:	2f00      	cmp	r7, #0
 800beec:	da05      	bge.n	800befa <__ieee754_pow+0x192>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	2000      	movs	r0, #0
 800bef4:	4927      	ldr	r1, [pc, #156]	; (800bf94 <__ieee754_pow+0x22c>)
 800bef6:	f7f4 fca9 	bl	800084c <__aeabi_ddiv>
 800befa:	f1b9 0f00 	cmp.w	r9, #0
 800befe:	dab7      	bge.n	800be70 <__ieee754_pow+0x108>
 800bf00:	9b00      	ldr	r3, [sp, #0]
 800bf02:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bf06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bf0a:	4323      	orrs	r3, r4
 800bf0c:	d108      	bne.n	800bf20 <__ieee754_pow+0x1b8>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	4610      	mov	r0, r2
 800bf14:	4619      	mov	r1, r3
 800bf16:	f7f4 f9b7 	bl	8000288 <__aeabi_dsub>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	e78d      	b.n	800be3c <__ieee754_pow+0xd4>
 800bf20:	9b00      	ldr	r3, [sp, #0]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d1a4      	bne.n	800be70 <__ieee754_pow+0x108>
 800bf26:	4602      	mov	r2, r0
 800bf28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4619      	mov	r1, r3
 800bf30:	e79e      	b.n	800be70 <__ieee754_pow+0x108>
 800bf32:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800bf36:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800bf3a:	950a      	str	r5, [sp, #40]	; 0x28
 800bf3c:	9d00      	ldr	r5, [sp, #0]
 800bf3e:	46ac      	mov	ip, r5
 800bf40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bf42:	ea5c 0505 	orrs.w	r5, ip, r5
 800bf46:	d0e4      	beq.n	800bf12 <__ieee754_pow+0x1aa>
 800bf48:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <__ieee754_pow+0x238>)
 800bf4a:	429e      	cmp	r6, r3
 800bf4c:	f340 80fc 	ble.w	800c148 <__ieee754_pow+0x3e0>
 800bf50:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bf54:	429e      	cmp	r6, r3
 800bf56:	4b10      	ldr	r3, [pc, #64]	; (800bf98 <__ieee754_pow+0x230>)
 800bf58:	dd07      	ble.n	800bf6a <__ieee754_pow+0x202>
 800bf5a:	429c      	cmp	r4, r3
 800bf5c:	dc0a      	bgt.n	800bf74 <__ieee754_pow+0x20c>
 800bf5e:	2f00      	cmp	r7, #0
 800bf60:	da84      	bge.n	800be6c <__ieee754_pow+0x104>
 800bf62:	a307      	add	r3, pc, #28	; (adr r3, 800bf80 <__ieee754_pow+0x218>)
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	e795      	b.n	800be96 <__ieee754_pow+0x12e>
 800bf6a:	429c      	cmp	r4, r3
 800bf6c:	dbf7      	blt.n	800bf5e <__ieee754_pow+0x1f6>
 800bf6e:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <__ieee754_pow+0x22c>)
 800bf70:	429c      	cmp	r4, r3
 800bf72:	dd17      	ble.n	800bfa4 <__ieee754_pow+0x23c>
 800bf74:	2f00      	cmp	r7, #0
 800bf76:	dcf4      	bgt.n	800bf62 <__ieee754_pow+0x1fa>
 800bf78:	e778      	b.n	800be6c <__ieee754_pow+0x104>
 800bf7a:	bf00      	nop
 800bf7c:	f3af 8000 	nop.w
 800bf80:	8800759c 	.word	0x8800759c
 800bf84:	7e37e43c 	.word	0x7e37e43c
 800bf88:	7ff00000 	.word	0x7ff00000
 800bf8c:	0800e8c0 	.word	0x0800e8c0
 800bf90:	433fffff 	.word	0x433fffff
 800bf94:	3ff00000 	.word	0x3ff00000
 800bf98:	3fefffff 	.word	0x3fefffff
 800bf9c:	3fe00000 	.word	0x3fe00000
 800bfa0:	41e00000 	.word	0x41e00000
 800bfa4:	4b64      	ldr	r3, [pc, #400]	; (800c138 <__ieee754_pow+0x3d0>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f7f4 f96e 	bl	8000288 <__aeabi_dsub>
 800bfac:	a356      	add	r3, pc, #344	; (adr r3, 800c108 <__ieee754_pow+0x3a0>)
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	460d      	mov	r5, r1
 800bfb6:	f7f4 fb1f 	bl	80005f8 <__aeabi_dmul>
 800bfba:	a355      	add	r3, pc, #340	; (adr r3, 800c110 <__ieee754_pow+0x3a8>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	460f      	mov	r7, r1
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7f4 fb16 	bl	80005f8 <__aeabi_dmul>
 800bfcc:	4b5b      	ldr	r3, [pc, #364]	; (800c13c <__ieee754_pow+0x3d4>)
 800bfce:	4682      	mov	sl, r0
 800bfd0:	468b      	mov	fp, r1
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	f7f4 fb0e 	bl	80005f8 <__aeabi_dmul>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	a14d      	add	r1, pc, #308	; (adr r1, 800c118 <__ieee754_pow+0x3b0>)
 800bfe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfe6:	f7f4 f94f 	bl	8000288 <__aeabi_dsub>
 800bfea:	4622      	mov	r2, r4
 800bfec:	462b      	mov	r3, r5
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	2000      	movs	r0, #0
 800bff8:	4951      	ldr	r1, [pc, #324]	; (800c140 <__ieee754_pow+0x3d8>)
 800bffa:	f7f4 f945 	bl	8000288 <__aeabi_dsub>
 800bffe:	4622      	mov	r2, r4
 800c000:	4680      	mov	r8, r0
 800c002:	4689      	mov	r9, r1
 800c004:	462b      	mov	r3, r5
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 faf5 	bl	80005f8 <__aeabi_dmul>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	4640      	mov	r0, r8
 800c014:	4649      	mov	r1, r9
 800c016:	f7f4 faef 	bl	80005f8 <__aeabi_dmul>
 800c01a:	a341      	add	r3, pc, #260	; (adr r3, 800c120 <__ieee754_pow+0x3b8>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 faea 	bl	80005f8 <__aeabi_dmul>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4650      	mov	r0, sl
 800c02a:	4659      	mov	r1, fp
 800c02c:	f7f4 f92c 	bl	8000288 <__aeabi_dsub>
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4680      	mov	r8, r0
 800c036:	4689      	mov	r9, r1
 800c038:	4630      	mov	r0, r6
 800c03a:	4639      	mov	r1, r7
 800c03c:	f7f4 f926 	bl	800028c <__adddf3>
 800c040:	2400      	movs	r4, #0
 800c042:	4632      	mov	r2, r6
 800c044:	463b      	mov	r3, r7
 800c046:	4620      	mov	r0, r4
 800c048:	460d      	mov	r5, r1
 800c04a:	f7f4 f91d 	bl	8000288 <__aeabi_dsub>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4640      	mov	r0, r8
 800c054:	4649      	mov	r1, r9
 800c056:	f7f4 f917 	bl	8000288 <__aeabi_dsub>
 800c05a:	9b00      	ldr	r3, [sp, #0]
 800c05c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c05e:	3b01      	subs	r3, #1
 800c060:	4313      	orrs	r3, r2
 800c062:	4682      	mov	sl, r0
 800c064:	468b      	mov	fp, r1
 800c066:	f040 81f1 	bne.w	800c44c <__ieee754_pow+0x6e4>
 800c06a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c128 <__ieee754_pow+0x3c0>
 800c06e:	eeb0 8a47 	vmov.f32	s16, s14
 800c072:	eef0 8a67 	vmov.f32	s17, s15
 800c076:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c07a:	2600      	movs	r6, #0
 800c07c:	4632      	mov	r2, r6
 800c07e:	463b      	mov	r3, r7
 800c080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c084:	f7f4 f900 	bl	8000288 <__aeabi_dsub>
 800c088:	4622      	mov	r2, r4
 800c08a:	462b      	mov	r3, r5
 800c08c:	f7f4 fab4 	bl	80005f8 <__aeabi_dmul>
 800c090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c094:	4680      	mov	r8, r0
 800c096:	4689      	mov	r9, r1
 800c098:	4650      	mov	r0, sl
 800c09a:	4659      	mov	r1, fp
 800c09c:	f7f4 faac 	bl	80005f8 <__aeabi_dmul>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4640      	mov	r0, r8
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	f7f4 f8f0 	bl	800028c <__adddf3>
 800c0ac:	4632      	mov	r2, r6
 800c0ae:	463b      	mov	r3, r7
 800c0b0:	4680      	mov	r8, r0
 800c0b2:	4689      	mov	r9, r1
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	f7f4 fa9e 	bl	80005f8 <__aeabi_dmul>
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4604      	mov	r4, r0
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	f7f4 f8e0 	bl	800028c <__adddf3>
 800c0cc:	4b1d      	ldr	r3, [pc, #116]	; (800c144 <__ieee754_pow+0x3dc>)
 800c0ce:	4299      	cmp	r1, r3
 800c0d0:	ec45 4b19 	vmov	d9, r4, r5
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	460f      	mov	r7, r1
 800c0d8:	468b      	mov	fp, r1
 800c0da:	f340 82fe 	ble.w	800c6da <__ieee754_pow+0x972>
 800c0de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c0e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c0e6:	4303      	orrs	r3, r0
 800c0e8:	f000 81f0 	beq.w	800c4cc <__ieee754_pow+0x764>
 800c0ec:	a310      	add	r3, pc, #64	; (adr r3, 800c130 <__ieee754_pow+0x3c8>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	ec51 0b18 	vmov	r0, r1, d8
 800c0f6:	f7f4 fa7f 	bl	80005f8 <__aeabi_dmul>
 800c0fa:	a30d      	add	r3, pc, #52	; (adr r3, 800c130 <__ieee754_pow+0x3c8>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	e6cb      	b.n	800be9a <__ieee754_pow+0x132>
 800c102:	bf00      	nop
 800c104:	f3af 8000 	nop.w
 800c108:	60000000 	.word	0x60000000
 800c10c:	3ff71547 	.word	0x3ff71547
 800c110:	f85ddf44 	.word	0xf85ddf44
 800c114:	3e54ae0b 	.word	0x3e54ae0b
 800c118:	55555555 	.word	0x55555555
 800c11c:	3fd55555 	.word	0x3fd55555
 800c120:	652b82fe 	.word	0x652b82fe
 800c124:	3ff71547 	.word	0x3ff71547
 800c128:	00000000 	.word	0x00000000
 800c12c:	bff00000 	.word	0xbff00000
 800c130:	8800759c 	.word	0x8800759c
 800c134:	7e37e43c 	.word	0x7e37e43c
 800c138:	3ff00000 	.word	0x3ff00000
 800c13c:	3fd00000 	.word	0x3fd00000
 800c140:	3fe00000 	.word	0x3fe00000
 800c144:	408fffff 	.word	0x408fffff
 800c148:	4bd7      	ldr	r3, [pc, #860]	; (800c4a8 <__ieee754_pow+0x740>)
 800c14a:	ea03 0309 	and.w	r3, r3, r9
 800c14e:	2200      	movs	r2, #0
 800c150:	b92b      	cbnz	r3, 800c15e <__ieee754_pow+0x3f6>
 800c152:	4bd6      	ldr	r3, [pc, #856]	; (800c4ac <__ieee754_pow+0x744>)
 800c154:	f7f4 fa50 	bl	80005f8 <__aeabi_dmul>
 800c158:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c15c:	460c      	mov	r4, r1
 800c15e:	1523      	asrs	r3, r4, #20
 800c160:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c164:	4413      	add	r3, r2
 800c166:	9309      	str	r3, [sp, #36]	; 0x24
 800c168:	4bd1      	ldr	r3, [pc, #836]	; (800c4b0 <__ieee754_pow+0x748>)
 800c16a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c16e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c172:	429c      	cmp	r4, r3
 800c174:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c178:	dd08      	ble.n	800c18c <__ieee754_pow+0x424>
 800c17a:	4bce      	ldr	r3, [pc, #824]	; (800c4b4 <__ieee754_pow+0x74c>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	f340 8163 	ble.w	800c448 <__ieee754_pow+0x6e0>
 800c182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c184:	3301      	adds	r3, #1
 800c186:	9309      	str	r3, [sp, #36]	; 0x24
 800c188:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c18c:	2400      	movs	r4, #0
 800c18e:	00e3      	lsls	r3, r4, #3
 800c190:	930b      	str	r3, [sp, #44]	; 0x2c
 800c192:	4bc9      	ldr	r3, [pc, #804]	; (800c4b8 <__ieee754_pow+0x750>)
 800c194:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c198:	ed93 7b00 	vldr	d7, [r3]
 800c19c:	4629      	mov	r1, r5
 800c19e:	ec53 2b17 	vmov	r2, r3, d7
 800c1a2:	eeb0 8a47 	vmov.f32	s16, s14
 800c1a6:	eef0 8a67 	vmov.f32	s17, s15
 800c1aa:	4682      	mov	sl, r0
 800c1ac:	f7f4 f86c 	bl	8000288 <__aeabi_dsub>
 800c1b0:	4652      	mov	r2, sl
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	460f      	mov	r7, r1
 800c1b6:	462b      	mov	r3, r5
 800c1b8:	ec51 0b18 	vmov	r0, r1, d8
 800c1bc:	f7f4 f866 	bl	800028c <__adddf3>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	49bd      	ldr	r1, [pc, #756]	; (800c4bc <__ieee754_pow+0x754>)
 800c1c8:	f7f4 fb40 	bl	800084c <__aeabi_ddiv>
 800c1cc:	ec41 0b19 	vmov	d9, r0, r1
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	f7f4 fa0e 	bl	80005f8 <__aeabi_dmul>
 800c1dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	9304      	str	r3, [sp, #16]
 800c1ec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c1f0:	46ab      	mov	fp, r5
 800c1f2:	106d      	asrs	r5, r5, #1
 800c1f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c1f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c1fc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c200:	2200      	movs	r2, #0
 800c202:	4640      	mov	r0, r8
 800c204:	4649      	mov	r1, r9
 800c206:	4614      	mov	r4, r2
 800c208:	461d      	mov	r5, r3
 800c20a:	f7f4 f9f5 	bl	80005f8 <__aeabi_dmul>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	4630      	mov	r0, r6
 800c214:	4639      	mov	r1, r7
 800c216:	f7f4 f837 	bl	8000288 <__aeabi_dsub>
 800c21a:	ec53 2b18 	vmov	r2, r3, d8
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	4620      	mov	r0, r4
 800c224:	4629      	mov	r1, r5
 800c226:	f7f4 f82f 	bl	8000288 <__aeabi_dsub>
 800c22a:	4602      	mov	r2, r0
 800c22c:	460b      	mov	r3, r1
 800c22e:	4650      	mov	r0, sl
 800c230:	4659      	mov	r1, fp
 800c232:	f7f4 f829 	bl	8000288 <__aeabi_dsub>
 800c236:	4642      	mov	r2, r8
 800c238:	464b      	mov	r3, r9
 800c23a:	f7f4 f9dd 	bl	80005f8 <__aeabi_dmul>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4630      	mov	r0, r6
 800c244:	4639      	mov	r1, r7
 800c246:	f7f4 f81f 	bl	8000288 <__aeabi_dsub>
 800c24a:	ec53 2b19 	vmov	r2, r3, d9
 800c24e:	f7f4 f9d3 	bl	80005f8 <__aeabi_dmul>
 800c252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c256:	ec41 0b18 	vmov	d8, r0, r1
 800c25a:	4610      	mov	r0, r2
 800c25c:	4619      	mov	r1, r3
 800c25e:	f7f4 f9cb 	bl	80005f8 <__aeabi_dmul>
 800c262:	a37d      	add	r3, pc, #500	; (adr r3, 800c458 <__ieee754_pow+0x6f0>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	4604      	mov	r4, r0
 800c26a:	460d      	mov	r5, r1
 800c26c:	f7f4 f9c4 	bl	80005f8 <__aeabi_dmul>
 800c270:	a37b      	add	r3, pc, #492	; (adr r3, 800c460 <__ieee754_pow+0x6f8>)
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	f7f4 f809 	bl	800028c <__adddf3>
 800c27a:	4622      	mov	r2, r4
 800c27c:	462b      	mov	r3, r5
 800c27e:	f7f4 f9bb 	bl	80005f8 <__aeabi_dmul>
 800c282:	a379      	add	r3, pc, #484	; (adr r3, 800c468 <__ieee754_pow+0x700>)
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	f7f4 f800 	bl	800028c <__adddf3>
 800c28c:	4622      	mov	r2, r4
 800c28e:	462b      	mov	r3, r5
 800c290:	f7f4 f9b2 	bl	80005f8 <__aeabi_dmul>
 800c294:	a376      	add	r3, pc, #472	; (adr r3, 800c470 <__ieee754_pow+0x708>)
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	f7f3 fff7 	bl	800028c <__adddf3>
 800c29e:	4622      	mov	r2, r4
 800c2a0:	462b      	mov	r3, r5
 800c2a2:	f7f4 f9a9 	bl	80005f8 <__aeabi_dmul>
 800c2a6:	a374      	add	r3, pc, #464	; (adr r3, 800c478 <__ieee754_pow+0x710>)
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f7f3 ffee 	bl	800028c <__adddf3>
 800c2b0:	4622      	mov	r2, r4
 800c2b2:	462b      	mov	r3, r5
 800c2b4:	f7f4 f9a0 	bl	80005f8 <__aeabi_dmul>
 800c2b8:	a371      	add	r3, pc, #452	; (adr r3, 800c480 <__ieee754_pow+0x718>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f7f3 ffe5 	bl	800028c <__adddf3>
 800c2c2:	4622      	mov	r2, r4
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	460f      	mov	r7, r1
 800c2c8:	462b      	mov	r3, r5
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	f7f4 f993 	bl	80005f8 <__aeabi_dmul>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	4639      	mov	r1, r7
 800c2da:	f7f4 f98d 	bl	80005f8 <__aeabi_dmul>
 800c2de:	4642      	mov	r2, r8
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	464b      	mov	r3, r9
 800c2e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ea:	f7f3 ffcf 	bl	800028c <__adddf3>
 800c2ee:	ec53 2b18 	vmov	r2, r3, d8
 800c2f2:	f7f4 f981 	bl	80005f8 <__aeabi_dmul>
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	f7f3 ffc7 	bl	800028c <__adddf3>
 800c2fe:	4642      	mov	r2, r8
 800c300:	4682      	mov	sl, r0
 800c302:	468b      	mov	fp, r1
 800c304:	464b      	mov	r3, r9
 800c306:	4640      	mov	r0, r8
 800c308:	4649      	mov	r1, r9
 800c30a:	f7f4 f975 	bl	80005f8 <__aeabi_dmul>
 800c30e:	4b6c      	ldr	r3, [pc, #432]	; (800c4c0 <__ieee754_pow+0x758>)
 800c310:	2200      	movs	r2, #0
 800c312:	4606      	mov	r6, r0
 800c314:	460f      	mov	r7, r1
 800c316:	f7f3 ffb9 	bl	800028c <__adddf3>
 800c31a:	4652      	mov	r2, sl
 800c31c:	465b      	mov	r3, fp
 800c31e:	f7f3 ffb5 	bl	800028c <__adddf3>
 800c322:	9c04      	ldr	r4, [sp, #16]
 800c324:	460d      	mov	r5, r1
 800c326:	4622      	mov	r2, r4
 800c328:	460b      	mov	r3, r1
 800c32a:	4640      	mov	r0, r8
 800c32c:	4649      	mov	r1, r9
 800c32e:	f7f4 f963 	bl	80005f8 <__aeabi_dmul>
 800c332:	4b63      	ldr	r3, [pc, #396]	; (800c4c0 <__ieee754_pow+0x758>)
 800c334:	4680      	mov	r8, r0
 800c336:	4689      	mov	r9, r1
 800c338:	2200      	movs	r2, #0
 800c33a:	4620      	mov	r0, r4
 800c33c:	4629      	mov	r1, r5
 800c33e:	f7f3 ffa3 	bl	8000288 <__aeabi_dsub>
 800c342:	4632      	mov	r2, r6
 800c344:	463b      	mov	r3, r7
 800c346:	f7f3 ff9f 	bl	8000288 <__aeabi_dsub>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4650      	mov	r0, sl
 800c350:	4659      	mov	r1, fp
 800c352:	f7f3 ff99 	bl	8000288 <__aeabi_dsub>
 800c356:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c35a:	f7f4 f94d 	bl	80005f8 <__aeabi_dmul>
 800c35e:	4622      	mov	r2, r4
 800c360:	4606      	mov	r6, r0
 800c362:	460f      	mov	r7, r1
 800c364:	462b      	mov	r3, r5
 800c366:	ec51 0b18 	vmov	r0, r1, d8
 800c36a:	f7f4 f945 	bl	80005f8 <__aeabi_dmul>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4630      	mov	r0, r6
 800c374:	4639      	mov	r1, r7
 800c376:	f7f3 ff89 	bl	800028c <__adddf3>
 800c37a:	4606      	mov	r6, r0
 800c37c:	460f      	mov	r7, r1
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4640      	mov	r0, r8
 800c384:	4649      	mov	r1, r9
 800c386:	f7f3 ff81 	bl	800028c <__adddf3>
 800c38a:	9c04      	ldr	r4, [sp, #16]
 800c38c:	a33e      	add	r3, pc, #248	; (adr r3, 800c488 <__ieee754_pow+0x720>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	4620      	mov	r0, r4
 800c394:	460d      	mov	r5, r1
 800c396:	f7f4 f92f 	bl	80005f8 <__aeabi_dmul>
 800c39a:	4642      	mov	r2, r8
 800c39c:	ec41 0b18 	vmov	d8, r0, r1
 800c3a0:	464b      	mov	r3, r9
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	f7f3 ff6f 	bl	8000288 <__aeabi_dsub>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	4639      	mov	r1, r7
 800c3b2:	f7f3 ff69 	bl	8000288 <__aeabi_dsub>
 800c3b6:	a336      	add	r3, pc, #216	; (adr r3, 800c490 <__ieee754_pow+0x728>)
 800c3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3bc:	f7f4 f91c 	bl	80005f8 <__aeabi_dmul>
 800c3c0:	a335      	add	r3, pc, #212	; (adr r3, 800c498 <__ieee754_pow+0x730>)
 800c3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f7f4 f913 	bl	80005f8 <__aeabi_dmul>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	4639      	mov	r1, r7
 800c3da:	f7f3 ff57 	bl	800028c <__adddf3>
 800c3de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3e0:	4b38      	ldr	r3, [pc, #224]	; (800c4c4 <__ieee754_pow+0x75c>)
 800c3e2:	4413      	add	r3, r2
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f3 ff50 	bl	800028c <__adddf3>
 800c3ec:	4682      	mov	sl, r0
 800c3ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3f0:	468b      	mov	fp, r1
 800c3f2:	f7f4 f897 	bl	8000524 <__aeabi_i2d>
 800c3f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3f8:	4b33      	ldr	r3, [pc, #204]	; (800c4c8 <__ieee754_pow+0x760>)
 800c3fa:	4413      	add	r3, r2
 800c3fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c400:	4606      	mov	r6, r0
 800c402:	460f      	mov	r7, r1
 800c404:	4652      	mov	r2, sl
 800c406:	465b      	mov	r3, fp
 800c408:	ec51 0b18 	vmov	r0, r1, d8
 800c40c:	f7f3 ff3e 	bl	800028c <__adddf3>
 800c410:	4642      	mov	r2, r8
 800c412:	464b      	mov	r3, r9
 800c414:	f7f3 ff3a 	bl	800028c <__adddf3>
 800c418:	4632      	mov	r2, r6
 800c41a:	463b      	mov	r3, r7
 800c41c:	f7f3 ff36 	bl	800028c <__adddf3>
 800c420:	9c04      	ldr	r4, [sp, #16]
 800c422:	4632      	mov	r2, r6
 800c424:	463b      	mov	r3, r7
 800c426:	4620      	mov	r0, r4
 800c428:	460d      	mov	r5, r1
 800c42a:	f7f3 ff2d 	bl	8000288 <__aeabi_dsub>
 800c42e:	4642      	mov	r2, r8
 800c430:	464b      	mov	r3, r9
 800c432:	f7f3 ff29 	bl	8000288 <__aeabi_dsub>
 800c436:	ec53 2b18 	vmov	r2, r3, d8
 800c43a:	f7f3 ff25 	bl	8000288 <__aeabi_dsub>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4650      	mov	r0, sl
 800c444:	4659      	mov	r1, fp
 800c446:	e606      	b.n	800c056 <__ieee754_pow+0x2ee>
 800c448:	2401      	movs	r4, #1
 800c44a:	e6a0      	b.n	800c18e <__ieee754_pow+0x426>
 800c44c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c4a0 <__ieee754_pow+0x738>
 800c450:	e60d      	b.n	800c06e <__ieee754_pow+0x306>
 800c452:	bf00      	nop
 800c454:	f3af 8000 	nop.w
 800c458:	4a454eef 	.word	0x4a454eef
 800c45c:	3fca7e28 	.word	0x3fca7e28
 800c460:	93c9db65 	.word	0x93c9db65
 800c464:	3fcd864a 	.word	0x3fcd864a
 800c468:	a91d4101 	.word	0xa91d4101
 800c46c:	3fd17460 	.word	0x3fd17460
 800c470:	518f264d 	.word	0x518f264d
 800c474:	3fd55555 	.word	0x3fd55555
 800c478:	db6fabff 	.word	0xdb6fabff
 800c47c:	3fdb6db6 	.word	0x3fdb6db6
 800c480:	33333303 	.word	0x33333303
 800c484:	3fe33333 	.word	0x3fe33333
 800c488:	e0000000 	.word	0xe0000000
 800c48c:	3feec709 	.word	0x3feec709
 800c490:	dc3a03fd 	.word	0xdc3a03fd
 800c494:	3feec709 	.word	0x3feec709
 800c498:	145b01f5 	.word	0x145b01f5
 800c49c:	be3e2fe0 	.word	0xbe3e2fe0
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	3ff00000 	.word	0x3ff00000
 800c4a8:	7ff00000 	.word	0x7ff00000
 800c4ac:	43400000 	.word	0x43400000
 800c4b0:	0003988e 	.word	0x0003988e
 800c4b4:	000bb679 	.word	0x000bb679
 800c4b8:	0800e928 	.word	0x0800e928
 800c4bc:	3ff00000 	.word	0x3ff00000
 800c4c0:	40080000 	.word	0x40080000
 800c4c4:	0800e948 	.word	0x0800e948
 800c4c8:	0800e938 	.word	0x0800e938
 800c4cc:	a3b5      	add	r3, pc, #724	; (adr r3, 800c7a4 <__ieee754_pow+0xa3c>)
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	f7f3 fed9 	bl	800028c <__adddf3>
 800c4da:	4622      	mov	r2, r4
 800c4dc:	ec41 0b1a 	vmov	d10, r0, r1
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	4639      	mov	r1, r7
 800c4e6:	f7f3 fecf 	bl	8000288 <__aeabi_dsub>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	ec51 0b1a 	vmov	r0, r1, d10
 800c4f2:	f7f4 fb11 	bl	8000b18 <__aeabi_dcmpgt>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	f47f adf8 	bne.w	800c0ec <__ieee754_pow+0x384>
 800c4fc:	4aa4      	ldr	r2, [pc, #656]	; (800c790 <__ieee754_pow+0xa28>)
 800c4fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c502:	4293      	cmp	r3, r2
 800c504:	f340 810b 	ble.w	800c71e <__ieee754_pow+0x9b6>
 800c508:	151b      	asrs	r3, r3, #20
 800c50a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c50e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c512:	fa4a f303 	asr.w	r3, sl, r3
 800c516:	445b      	add	r3, fp
 800c518:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c51c:	4e9d      	ldr	r6, [pc, #628]	; (800c794 <__ieee754_pow+0xa2c>)
 800c51e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c522:	4116      	asrs	r6, r2
 800c524:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c528:	2000      	movs	r0, #0
 800c52a:	ea23 0106 	bic.w	r1, r3, r6
 800c52e:	f1c2 0214 	rsb	r2, r2, #20
 800c532:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c536:	fa4a fa02 	asr.w	sl, sl, r2
 800c53a:	f1bb 0f00 	cmp.w	fp, #0
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4620      	mov	r0, r4
 800c544:	4629      	mov	r1, r5
 800c546:	bfb8      	it	lt
 800c548:	f1ca 0a00 	rsblt	sl, sl, #0
 800c54c:	f7f3 fe9c 	bl	8000288 <__aeabi_dsub>
 800c550:	ec41 0b19 	vmov	d9, r0, r1
 800c554:	4642      	mov	r2, r8
 800c556:	464b      	mov	r3, r9
 800c558:	ec51 0b19 	vmov	r0, r1, d9
 800c55c:	f7f3 fe96 	bl	800028c <__adddf3>
 800c560:	2400      	movs	r4, #0
 800c562:	a379      	add	r3, pc, #484	; (adr r3, 800c748 <__ieee754_pow+0x9e0>)
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	4620      	mov	r0, r4
 800c56a:	460d      	mov	r5, r1
 800c56c:	f7f4 f844 	bl	80005f8 <__aeabi_dmul>
 800c570:	ec53 2b19 	vmov	r2, r3, d9
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	4620      	mov	r0, r4
 800c57a:	4629      	mov	r1, r5
 800c57c:	f7f3 fe84 	bl	8000288 <__aeabi_dsub>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4640      	mov	r0, r8
 800c586:	4649      	mov	r1, r9
 800c588:	f7f3 fe7e 	bl	8000288 <__aeabi_dsub>
 800c58c:	a370      	add	r3, pc, #448	; (adr r3, 800c750 <__ieee754_pow+0x9e8>)
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	f7f4 f831 	bl	80005f8 <__aeabi_dmul>
 800c596:	a370      	add	r3, pc, #448	; (adr r3, 800c758 <__ieee754_pow+0x9f0>)
 800c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59c:	4680      	mov	r8, r0
 800c59e:	4689      	mov	r9, r1
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	f7f4 f828 	bl	80005f8 <__aeabi_dmul>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4640      	mov	r0, r8
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	f7f3 fe6c 	bl	800028c <__adddf3>
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4630      	mov	r0, r6
 800c5be:	4639      	mov	r1, r7
 800c5c0:	f7f3 fe64 	bl	800028c <__adddf3>
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	463b      	mov	r3, r7
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	4689      	mov	r9, r1
 800c5cc:	f7f3 fe5c 	bl	8000288 <__aeabi_dsub>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7f3 fe56 	bl	8000288 <__aeabi_dsub>
 800c5dc:	4642      	mov	r2, r8
 800c5de:	4606      	mov	r6, r0
 800c5e0:	460f      	mov	r7, r1
 800c5e2:	464b      	mov	r3, r9
 800c5e4:	4640      	mov	r0, r8
 800c5e6:	4649      	mov	r1, r9
 800c5e8:	f7f4 f806 	bl	80005f8 <__aeabi_dmul>
 800c5ec:	a35c      	add	r3, pc, #368	; (adr r3, 800c760 <__ieee754_pow+0x9f8>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	460d      	mov	r5, r1
 800c5f6:	f7f3 ffff 	bl	80005f8 <__aeabi_dmul>
 800c5fa:	a35b      	add	r3, pc, #364	; (adr r3, 800c768 <__ieee754_pow+0xa00>)
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	f7f3 fe42 	bl	8000288 <__aeabi_dsub>
 800c604:	4622      	mov	r2, r4
 800c606:	462b      	mov	r3, r5
 800c608:	f7f3 fff6 	bl	80005f8 <__aeabi_dmul>
 800c60c:	a358      	add	r3, pc, #352	; (adr r3, 800c770 <__ieee754_pow+0xa08>)
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f7f3 fe3b 	bl	800028c <__adddf3>
 800c616:	4622      	mov	r2, r4
 800c618:	462b      	mov	r3, r5
 800c61a:	f7f3 ffed 	bl	80005f8 <__aeabi_dmul>
 800c61e:	a356      	add	r3, pc, #344	; (adr r3, 800c778 <__ieee754_pow+0xa10>)
 800c620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c624:	f7f3 fe30 	bl	8000288 <__aeabi_dsub>
 800c628:	4622      	mov	r2, r4
 800c62a:	462b      	mov	r3, r5
 800c62c:	f7f3 ffe4 	bl	80005f8 <__aeabi_dmul>
 800c630:	a353      	add	r3, pc, #332	; (adr r3, 800c780 <__ieee754_pow+0xa18>)
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	f7f3 fe29 	bl	800028c <__adddf3>
 800c63a:	4622      	mov	r2, r4
 800c63c:	462b      	mov	r3, r5
 800c63e:	f7f3 ffdb 	bl	80005f8 <__aeabi_dmul>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4640      	mov	r0, r8
 800c648:	4649      	mov	r1, r9
 800c64a:	f7f3 fe1d 	bl	8000288 <__aeabi_dsub>
 800c64e:	4604      	mov	r4, r0
 800c650:	460d      	mov	r5, r1
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4640      	mov	r0, r8
 800c658:	4649      	mov	r1, r9
 800c65a:	f7f3 ffcd 	bl	80005f8 <__aeabi_dmul>
 800c65e:	2200      	movs	r2, #0
 800c660:	ec41 0b19 	vmov	d9, r0, r1
 800c664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c668:	4620      	mov	r0, r4
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 fe0c 	bl	8000288 <__aeabi_dsub>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	ec51 0b19 	vmov	r0, r1, d9
 800c678:	f7f4 f8e8 	bl	800084c <__aeabi_ddiv>
 800c67c:	4632      	mov	r2, r6
 800c67e:	4604      	mov	r4, r0
 800c680:	460d      	mov	r5, r1
 800c682:	463b      	mov	r3, r7
 800c684:	4640      	mov	r0, r8
 800c686:	4649      	mov	r1, r9
 800c688:	f7f3 ffb6 	bl	80005f8 <__aeabi_dmul>
 800c68c:	4632      	mov	r2, r6
 800c68e:	463b      	mov	r3, r7
 800c690:	f7f3 fdfc 	bl	800028c <__adddf3>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4620      	mov	r0, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7f3 fdf4 	bl	8000288 <__aeabi_dsub>
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	464b      	mov	r3, r9
 800c6a4:	f7f3 fdf0 	bl	8000288 <__aeabi_dsub>
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	493a      	ldr	r1, [pc, #232]	; (800c798 <__ieee754_pow+0xa30>)
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	f7f3 fdea 	bl	8000288 <__aeabi_dsub>
 800c6b4:	e9cd 0100 	strd	r0, r1, [sp]
 800c6b8:	9b01      	ldr	r3, [sp, #4]
 800c6ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c6be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c2:	da2f      	bge.n	800c724 <__ieee754_pow+0x9bc>
 800c6c4:	4650      	mov	r0, sl
 800c6c6:	ed9d 0b00 	vldr	d0, [sp]
 800c6ca:	f001 fbdd 	bl	800de88 <scalbn>
 800c6ce:	ec51 0b10 	vmov	r0, r1, d0
 800c6d2:	ec53 2b18 	vmov	r2, r3, d8
 800c6d6:	f7ff bbe0 	b.w	800be9a <__ieee754_pow+0x132>
 800c6da:	4b30      	ldr	r3, [pc, #192]	; (800c79c <__ieee754_pow+0xa34>)
 800c6dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c6e0:	429e      	cmp	r6, r3
 800c6e2:	f77f af0b 	ble.w	800c4fc <__ieee754_pow+0x794>
 800c6e6:	4b2e      	ldr	r3, [pc, #184]	; (800c7a0 <__ieee754_pow+0xa38>)
 800c6e8:	440b      	add	r3, r1
 800c6ea:	4303      	orrs	r3, r0
 800c6ec:	d00b      	beq.n	800c706 <__ieee754_pow+0x99e>
 800c6ee:	a326      	add	r3, pc, #152	; (adr r3, 800c788 <__ieee754_pow+0xa20>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	ec51 0b18 	vmov	r0, r1, d8
 800c6f8:	f7f3 ff7e 	bl	80005f8 <__aeabi_dmul>
 800c6fc:	a322      	add	r3, pc, #136	; (adr r3, 800c788 <__ieee754_pow+0xa20>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7ff bbca 	b.w	800be9a <__ieee754_pow+0x132>
 800c706:	4622      	mov	r2, r4
 800c708:	462b      	mov	r3, r5
 800c70a:	f7f3 fdbd 	bl	8000288 <__aeabi_dsub>
 800c70e:	4642      	mov	r2, r8
 800c710:	464b      	mov	r3, r9
 800c712:	f7f4 f9f7 	bl	8000b04 <__aeabi_dcmpge>
 800c716:	2800      	cmp	r0, #0
 800c718:	f43f aef0 	beq.w	800c4fc <__ieee754_pow+0x794>
 800c71c:	e7e7      	b.n	800c6ee <__ieee754_pow+0x986>
 800c71e:	f04f 0a00 	mov.w	sl, #0
 800c722:	e717      	b.n	800c554 <__ieee754_pow+0x7ec>
 800c724:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c728:	4619      	mov	r1, r3
 800c72a:	e7d2      	b.n	800c6d2 <__ieee754_pow+0x96a>
 800c72c:	491a      	ldr	r1, [pc, #104]	; (800c798 <__ieee754_pow+0xa30>)
 800c72e:	2000      	movs	r0, #0
 800c730:	f7ff bb9e 	b.w	800be70 <__ieee754_pow+0x108>
 800c734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c738:	f7ff bb9a 	b.w	800be70 <__ieee754_pow+0x108>
 800c73c:	9000      	str	r0, [sp, #0]
 800c73e:	f7ff bb76 	b.w	800be2e <__ieee754_pow+0xc6>
 800c742:	2100      	movs	r1, #0
 800c744:	f7ff bb60 	b.w	800be08 <__ieee754_pow+0xa0>
 800c748:	00000000 	.word	0x00000000
 800c74c:	3fe62e43 	.word	0x3fe62e43
 800c750:	fefa39ef 	.word	0xfefa39ef
 800c754:	3fe62e42 	.word	0x3fe62e42
 800c758:	0ca86c39 	.word	0x0ca86c39
 800c75c:	be205c61 	.word	0xbe205c61
 800c760:	72bea4d0 	.word	0x72bea4d0
 800c764:	3e663769 	.word	0x3e663769
 800c768:	c5d26bf1 	.word	0xc5d26bf1
 800c76c:	3ebbbd41 	.word	0x3ebbbd41
 800c770:	af25de2c 	.word	0xaf25de2c
 800c774:	3f11566a 	.word	0x3f11566a
 800c778:	16bebd93 	.word	0x16bebd93
 800c77c:	3f66c16c 	.word	0x3f66c16c
 800c780:	5555553e 	.word	0x5555553e
 800c784:	3fc55555 	.word	0x3fc55555
 800c788:	c2f8f359 	.word	0xc2f8f359
 800c78c:	01a56e1f 	.word	0x01a56e1f
 800c790:	3fe00000 	.word	0x3fe00000
 800c794:	000fffff 	.word	0x000fffff
 800c798:	3ff00000 	.word	0x3ff00000
 800c79c:	4090cbff 	.word	0x4090cbff
 800c7a0:	3f6f3400 	.word	0x3f6f3400
 800c7a4:	652b82fe 	.word	0x652b82fe
 800c7a8:	3c971547 	.word	0x3c971547
 800c7ac:	00000000 	.word	0x00000000

0800c7b0 <__ieee754_rem_pio2>:
 800c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	ed2d 8b02 	vpush	{d8}
 800c7b8:	ec55 4b10 	vmov	r4, r5, d0
 800c7bc:	4bca      	ldr	r3, [pc, #808]	; (800cae8 <__ieee754_rem_pio2+0x338>)
 800c7be:	b08b      	sub	sp, #44	; 0x2c
 800c7c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c7c4:	4598      	cmp	r8, r3
 800c7c6:	4682      	mov	sl, r0
 800c7c8:	9502      	str	r5, [sp, #8]
 800c7ca:	dc08      	bgt.n	800c7de <__ieee754_rem_pio2+0x2e>
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	ed80 0b00 	vstr	d0, [r0]
 800c7d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c7d8:	f04f 0b00 	mov.w	fp, #0
 800c7dc:	e028      	b.n	800c830 <__ieee754_rem_pio2+0x80>
 800c7de:	4bc3      	ldr	r3, [pc, #780]	; (800caec <__ieee754_rem_pio2+0x33c>)
 800c7e0:	4598      	cmp	r8, r3
 800c7e2:	dc78      	bgt.n	800c8d6 <__ieee754_rem_pio2+0x126>
 800c7e4:	9b02      	ldr	r3, [sp, #8]
 800c7e6:	4ec2      	ldr	r6, [pc, #776]	; (800caf0 <__ieee754_rem_pio2+0x340>)
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	ee10 0a10 	vmov	r0, s0
 800c7ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800cab0 <__ieee754_rem_pio2+0x300>)
 800c7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	dd39      	ble.n	800c86c <__ieee754_rem_pio2+0xbc>
 800c7f8:	f7f3 fd46 	bl	8000288 <__aeabi_dsub>
 800c7fc:	45b0      	cmp	r8, r6
 800c7fe:	4604      	mov	r4, r0
 800c800:	460d      	mov	r5, r1
 800c802:	d01b      	beq.n	800c83c <__ieee754_rem_pio2+0x8c>
 800c804:	a3ac      	add	r3, pc, #688	; (adr r3, 800cab8 <__ieee754_rem_pio2+0x308>)
 800c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80a:	f7f3 fd3d 	bl	8000288 <__aeabi_dsub>
 800c80e:	4602      	mov	r2, r0
 800c810:	460b      	mov	r3, r1
 800c812:	e9ca 2300 	strd	r2, r3, [sl]
 800c816:	4620      	mov	r0, r4
 800c818:	4629      	mov	r1, r5
 800c81a:	f7f3 fd35 	bl	8000288 <__aeabi_dsub>
 800c81e:	a3a6      	add	r3, pc, #664	; (adr r3, 800cab8 <__ieee754_rem_pio2+0x308>)
 800c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c824:	f7f3 fd30 	bl	8000288 <__aeabi_dsub>
 800c828:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c82c:	f04f 0b01 	mov.w	fp, #1
 800c830:	4658      	mov	r0, fp
 800c832:	b00b      	add	sp, #44	; 0x2c
 800c834:	ecbd 8b02 	vpop	{d8}
 800c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83c:	a3a0      	add	r3, pc, #640	; (adr r3, 800cac0 <__ieee754_rem_pio2+0x310>)
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	f7f3 fd21 	bl	8000288 <__aeabi_dsub>
 800c846:	a3a0      	add	r3, pc, #640	; (adr r3, 800cac8 <__ieee754_rem_pio2+0x318>)
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	4604      	mov	r4, r0
 800c84e:	460d      	mov	r5, r1
 800c850:	f7f3 fd1a 	bl	8000288 <__aeabi_dsub>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	e9ca 2300 	strd	r2, r3, [sl]
 800c85c:	4620      	mov	r0, r4
 800c85e:	4629      	mov	r1, r5
 800c860:	f7f3 fd12 	bl	8000288 <__aeabi_dsub>
 800c864:	a398      	add	r3, pc, #608	; (adr r3, 800cac8 <__ieee754_rem_pio2+0x318>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	e7db      	b.n	800c824 <__ieee754_rem_pio2+0x74>
 800c86c:	f7f3 fd0e 	bl	800028c <__adddf3>
 800c870:	45b0      	cmp	r8, r6
 800c872:	4604      	mov	r4, r0
 800c874:	460d      	mov	r5, r1
 800c876:	d016      	beq.n	800c8a6 <__ieee754_rem_pio2+0xf6>
 800c878:	a38f      	add	r3, pc, #572	; (adr r3, 800cab8 <__ieee754_rem_pio2+0x308>)
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f7f3 fd05 	bl	800028c <__adddf3>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	e9ca 2300 	strd	r2, r3, [sl]
 800c88a:	4620      	mov	r0, r4
 800c88c:	4629      	mov	r1, r5
 800c88e:	f7f3 fcfb 	bl	8000288 <__aeabi_dsub>
 800c892:	a389      	add	r3, pc, #548	; (adr r3, 800cab8 <__ieee754_rem_pio2+0x308>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fcf8 	bl	800028c <__adddf3>
 800c89c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c8a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c8a4:	e7c4      	b.n	800c830 <__ieee754_rem_pio2+0x80>
 800c8a6:	a386      	add	r3, pc, #536	; (adr r3, 800cac0 <__ieee754_rem_pio2+0x310>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f3 fcee 	bl	800028c <__adddf3>
 800c8b0:	a385      	add	r3, pc, #532	; (adr r3, 800cac8 <__ieee754_rem_pio2+0x318>)
 800c8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	460d      	mov	r5, r1
 800c8ba:	f7f3 fce7 	bl	800028c <__adddf3>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	e9ca 2300 	strd	r2, r3, [sl]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	f7f3 fcdd 	bl	8000288 <__aeabi_dsub>
 800c8ce:	a37e      	add	r3, pc, #504	; (adr r3, 800cac8 <__ieee754_rem_pio2+0x318>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	e7e0      	b.n	800c898 <__ieee754_rem_pio2+0xe8>
 800c8d6:	4b87      	ldr	r3, [pc, #540]	; (800caf4 <__ieee754_rem_pio2+0x344>)
 800c8d8:	4598      	cmp	r8, r3
 800c8da:	f300 80d9 	bgt.w	800ca90 <__ieee754_rem_pio2+0x2e0>
 800c8de:	f001 f9b1 	bl	800dc44 <fabs>
 800c8e2:	ec55 4b10 	vmov	r4, r5, d0
 800c8e6:	ee10 0a10 	vmov	r0, s0
 800c8ea:	a379      	add	r3, pc, #484	; (adr r3, 800cad0 <__ieee754_rem_pio2+0x320>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	f7f3 fe81 	bl	80005f8 <__aeabi_dmul>
 800c8f6:	4b80      	ldr	r3, [pc, #512]	; (800caf8 <__ieee754_rem_pio2+0x348>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f7f3 fcc7 	bl	800028c <__adddf3>
 800c8fe:	f7f4 f92b 	bl	8000b58 <__aeabi_d2iz>
 800c902:	4683      	mov	fp, r0
 800c904:	f7f3 fe0e 	bl	8000524 <__aeabi_i2d>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	ec43 2b18 	vmov	d8, r2, r3
 800c910:	a367      	add	r3, pc, #412	; (adr r3, 800cab0 <__ieee754_rem_pio2+0x300>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	f7f3 fe6f 	bl	80005f8 <__aeabi_dmul>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4620      	mov	r0, r4
 800c920:	4629      	mov	r1, r5
 800c922:	f7f3 fcb1 	bl	8000288 <__aeabi_dsub>
 800c926:	a364      	add	r3, pc, #400	; (adr r3, 800cab8 <__ieee754_rem_pio2+0x308>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	4606      	mov	r6, r0
 800c92e:	460f      	mov	r7, r1
 800c930:	ec51 0b18 	vmov	r0, r1, d8
 800c934:	f7f3 fe60 	bl	80005f8 <__aeabi_dmul>
 800c938:	f1bb 0f1f 	cmp.w	fp, #31
 800c93c:	4604      	mov	r4, r0
 800c93e:	460d      	mov	r5, r1
 800c940:	dc0d      	bgt.n	800c95e <__ieee754_rem_pio2+0x1ae>
 800c942:	4b6e      	ldr	r3, [pc, #440]	; (800cafc <__ieee754_rem_pio2+0x34c>)
 800c944:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c94c:	4543      	cmp	r3, r8
 800c94e:	d006      	beq.n	800c95e <__ieee754_rem_pio2+0x1ae>
 800c950:	4622      	mov	r2, r4
 800c952:	462b      	mov	r3, r5
 800c954:	4630      	mov	r0, r6
 800c956:	4639      	mov	r1, r7
 800c958:	f7f3 fc96 	bl	8000288 <__aeabi_dsub>
 800c95c:	e00f      	b.n	800c97e <__ieee754_rem_pio2+0x1ce>
 800c95e:	462b      	mov	r3, r5
 800c960:	4622      	mov	r2, r4
 800c962:	4630      	mov	r0, r6
 800c964:	4639      	mov	r1, r7
 800c966:	f7f3 fc8f 	bl	8000288 <__aeabi_dsub>
 800c96a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c96e:	9303      	str	r3, [sp, #12]
 800c970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c974:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c978:	f1b8 0f10 	cmp.w	r8, #16
 800c97c:	dc02      	bgt.n	800c984 <__ieee754_rem_pio2+0x1d4>
 800c97e:	e9ca 0100 	strd	r0, r1, [sl]
 800c982:	e039      	b.n	800c9f8 <__ieee754_rem_pio2+0x248>
 800c984:	a34e      	add	r3, pc, #312	; (adr r3, 800cac0 <__ieee754_rem_pio2+0x310>)
 800c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98a:	ec51 0b18 	vmov	r0, r1, d8
 800c98e:	f7f3 fe33 	bl	80005f8 <__aeabi_dmul>
 800c992:	4604      	mov	r4, r0
 800c994:	460d      	mov	r5, r1
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	4630      	mov	r0, r6
 800c99c:	4639      	mov	r1, r7
 800c99e:	f7f3 fc73 	bl	8000288 <__aeabi_dsub>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4680      	mov	r8, r0
 800c9a8:	4689      	mov	r9, r1
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	4639      	mov	r1, r7
 800c9ae:	f7f3 fc6b 	bl	8000288 <__aeabi_dsub>
 800c9b2:	4622      	mov	r2, r4
 800c9b4:	462b      	mov	r3, r5
 800c9b6:	f7f3 fc67 	bl	8000288 <__aeabi_dsub>
 800c9ba:	a343      	add	r3, pc, #268	; (adr r3, 800cac8 <__ieee754_rem_pio2+0x318>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	460d      	mov	r5, r1
 800c9c4:	ec51 0b18 	vmov	r0, r1, d8
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	462b      	mov	r3, r5
 800c9d0:	f7f3 fc5a 	bl	8000288 <__aeabi_dsub>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4604      	mov	r4, r0
 800c9da:	460d      	mov	r5, r1
 800c9dc:	4640      	mov	r0, r8
 800c9de:	4649      	mov	r1, r9
 800c9e0:	f7f3 fc52 	bl	8000288 <__aeabi_dsub>
 800c9e4:	9a03      	ldr	r2, [sp, #12]
 800c9e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	2b31      	cmp	r3, #49	; 0x31
 800c9ee:	dc24      	bgt.n	800ca3a <__ieee754_rem_pio2+0x28a>
 800c9f0:	e9ca 0100 	strd	r0, r1, [sl]
 800c9f4:	4646      	mov	r6, r8
 800c9f6:	464f      	mov	r7, r9
 800c9f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	4642      	mov	r2, r8
 800ca00:	464b      	mov	r3, r9
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f3 fc40 	bl	8000288 <__aeabi_dsub>
 800ca08:	462b      	mov	r3, r5
 800ca0a:	4622      	mov	r2, r4
 800ca0c:	f7f3 fc3c 	bl	8000288 <__aeabi_dsub>
 800ca10:	9b02      	ldr	r3, [sp, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ca18:	f6bf af0a 	bge.w	800c830 <__ieee754_rem_pio2+0x80>
 800ca1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ca20:	f8ca 3004 	str.w	r3, [sl, #4]
 800ca24:	f8ca 8000 	str.w	r8, [sl]
 800ca28:	f8ca 0008 	str.w	r0, [sl, #8]
 800ca2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca30:	f8ca 300c 	str.w	r3, [sl, #12]
 800ca34:	f1cb 0b00 	rsb	fp, fp, #0
 800ca38:	e6fa      	b.n	800c830 <__ieee754_rem_pio2+0x80>
 800ca3a:	a327      	add	r3, pc, #156	; (adr r3, 800cad8 <__ieee754_rem_pio2+0x328>)
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	ec51 0b18 	vmov	r0, r1, d8
 800ca44:	f7f3 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ca48:	4604      	mov	r4, r0
 800ca4a:	460d      	mov	r5, r1
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4640      	mov	r0, r8
 800ca52:	4649      	mov	r1, r9
 800ca54:	f7f3 fc18 	bl	8000288 <__aeabi_dsub>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4606      	mov	r6, r0
 800ca5e:	460f      	mov	r7, r1
 800ca60:	4640      	mov	r0, r8
 800ca62:	4649      	mov	r1, r9
 800ca64:	f7f3 fc10 	bl	8000288 <__aeabi_dsub>
 800ca68:	4622      	mov	r2, r4
 800ca6a:	462b      	mov	r3, r5
 800ca6c:	f7f3 fc0c 	bl	8000288 <__aeabi_dsub>
 800ca70:	a31b      	add	r3, pc, #108	; (adr r3, 800cae0 <__ieee754_rem_pio2+0x330>)
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	4604      	mov	r4, r0
 800ca78:	460d      	mov	r5, r1
 800ca7a:	ec51 0b18 	vmov	r0, r1, d8
 800ca7e:	f7f3 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ca82:	4622      	mov	r2, r4
 800ca84:	462b      	mov	r3, r5
 800ca86:	f7f3 fbff 	bl	8000288 <__aeabi_dsub>
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	460d      	mov	r5, r1
 800ca8e:	e75f      	b.n	800c950 <__ieee754_rem_pio2+0x1a0>
 800ca90:	4b1b      	ldr	r3, [pc, #108]	; (800cb00 <__ieee754_rem_pio2+0x350>)
 800ca92:	4598      	cmp	r8, r3
 800ca94:	dd36      	ble.n	800cb04 <__ieee754_rem_pio2+0x354>
 800ca96:	ee10 2a10 	vmov	r2, s0
 800ca9a:	462b      	mov	r3, r5
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	4629      	mov	r1, r5
 800caa0:	f7f3 fbf2 	bl	8000288 <__aeabi_dsub>
 800caa4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800caa8:	e9ca 0100 	strd	r0, r1, [sl]
 800caac:	e694      	b.n	800c7d8 <__ieee754_rem_pio2+0x28>
 800caae:	bf00      	nop
 800cab0:	54400000 	.word	0x54400000
 800cab4:	3ff921fb 	.word	0x3ff921fb
 800cab8:	1a626331 	.word	0x1a626331
 800cabc:	3dd0b461 	.word	0x3dd0b461
 800cac0:	1a600000 	.word	0x1a600000
 800cac4:	3dd0b461 	.word	0x3dd0b461
 800cac8:	2e037073 	.word	0x2e037073
 800cacc:	3ba3198a 	.word	0x3ba3198a
 800cad0:	6dc9c883 	.word	0x6dc9c883
 800cad4:	3fe45f30 	.word	0x3fe45f30
 800cad8:	2e000000 	.word	0x2e000000
 800cadc:	3ba3198a 	.word	0x3ba3198a
 800cae0:	252049c1 	.word	0x252049c1
 800cae4:	397b839a 	.word	0x397b839a
 800cae8:	3fe921fb 	.word	0x3fe921fb
 800caec:	4002d97b 	.word	0x4002d97b
 800caf0:	3ff921fb 	.word	0x3ff921fb
 800caf4:	413921fb 	.word	0x413921fb
 800caf8:	3fe00000 	.word	0x3fe00000
 800cafc:	0800e958 	.word	0x0800e958
 800cb00:	7fefffff 	.word	0x7fefffff
 800cb04:	ea4f 5428 	mov.w	r4, r8, asr #20
 800cb08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cb0c:	ee10 0a10 	vmov	r0, s0
 800cb10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800cb14:	ee10 6a10 	vmov	r6, s0
 800cb18:	460f      	mov	r7, r1
 800cb1a:	f7f4 f81d 	bl	8000b58 <__aeabi_d2iz>
 800cb1e:	f7f3 fd01 	bl	8000524 <__aeabi_i2d>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4630      	mov	r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb2e:	f7f3 fbab 	bl	8000288 <__aeabi_dsub>
 800cb32:	4b22      	ldr	r3, [pc, #136]	; (800cbbc <__ieee754_rem_pio2+0x40c>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	f7f3 fd5f 	bl	80005f8 <__aeabi_dmul>
 800cb3a:	460f      	mov	r7, r1
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	f7f4 f80b 	bl	8000b58 <__aeabi_d2iz>
 800cb42:	f7f3 fcef 	bl	8000524 <__aeabi_i2d>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb52:	f7f3 fb99 	bl	8000288 <__aeabi_dsub>
 800cb56:	4b19      	ldr	r3, [pc, #100]	; (800cbbc <__ieee754_rem_pio2+0x40c>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f7f3 fd4d 	bl	80005f8 <__aeabi_dmul>
 800cb5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb62:	ad04      	add	r5, sp, #16
 800cb64:	f04f 0803 	mov.w	r8, #3
 800cb68:	46a9      	mov	r9, r5
 800cb6a:	2600      	movs	r6, #0
 800cb6c:	2700      	movs	r7, #0
 800cb6e:	4632      	mov	r2, r6
 800cb70:	463b      	mov	r3, r7
 800cb72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800cb76:	46c3      	mov	fp, r8
 800cb78:	3d08      	subs	r5, #8
 800cb7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cb7e:	f7f3 ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d1f3      	bne.n	800cb6e <__ieee754_rem_pio2+0x3be>
 800cb86:	4b0e      	ldr	r3, [pc, #56]	; (800cbc0 <__ieee754_rem_pio2+0x410>)
 800cb88:	9301      	str	r3, [sp, #4]
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	9300      	str	r3, [sp, #0]
 800cb8e:	4622      	mov	r2, r4
 800cb90:	465b      	mov	r3, fp
 800cb92:	4651      	mov	r1, sl
 800cb94:	4648      	mov	r0, r9
 800cb96:	f000 fc57 	bl	800d448 <__kernel_rem_pio2>
 800cb9a:	9b02      	ldr	r3, [sp, #8]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	4683      	mov	fp, r0
 800cba0:	f6bf ae46 	bge.w	800c830 <__ieee754_rem_pio2+0x80>
 800cba4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cbac:	f8ca 3004 	str.w	r3, [sl, #4]
 800cbb0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cbb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cbb8:	e73a      	b.n	800ca30 <__ieee754_rem_pio2+0x280>
 800cbba:	bf00      	nop
 800cbbc:	41700000 	.word	0x41700000
 800cbc0:	0800e9d8 	.word	0x0800e9d8

0800cbc4 <__ieee754_sqrt>:
 800cbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc8:	ec55 4b10 	vmov	r4, r5, d0
 800cbcc:	4e56      	ldr	r6, [pc, #344]	; (800cd28 <__ieee754_sqrt+0x164>)
 800cbce:	43ae      	bics	r6, r5
 800cbd0:	ee10 0a10 	vmov	r0, s0
 800cbd4:	ee10 3a10 	vmov	r3, s0
 800cbd8:	4629      	mov	r1, r5
 800cbda:	462a      	mov	r2, r5
 800cbdc:	d110      	bne.n	800cc00 <__ieee754_sqrt+0x3c>
 800cbde:	ee10 2a10 	vmov	r2, s0
 800cbe2:	462b      	mov	r3, r5
 800cbe4:	f7f3 fd08 	bl	80005f8 <__aeabi_dmul>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	4620      	mov	r0, r4
 800cbee:	4629      	mov	r1, r5
 800cbf0:	f7f3 fb4c 	bl	800028c <__adddf3>
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	460d      	mov	r5, r1
 800cbf8:	ec45 4b10 	vmov	d0, r4, r5
 800cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc00:	2d00      	cmp	r5, #0
 800cc02:	dc10      	bgt.n	800cc26 <__ieee754_sqrt+0x62>
 800cc04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cc08:	4330      	orrs	r0, r6
 800cc0a:	d0f5      	beq.n	800cbf8 <__ieee754_sqrt+0x34>
 800cc0c:	b15d      	cbz	r5, 800cc26 <__ieee754_sqrt+0x62>
 800cc0e:	ee10 2a10 	vmov	r2, s0
 800cc12:	462b      	mov	r3, r5
 800cc14:	ee10 0a10 	vmov	r0, s0
 800cc18:	f7f3 fb36 	bl	8000288 <__aeabi_dsub>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	f7f3 fe14 	bl	800084c <__aeabi_ddiv>
 800cc24:	e7e6      	b.n	800cbf4 <__ieee754_sqrt+0x30>
 800cc26:	1509      	asrs	r1, r1, #20
 800cc28:	d076      	beq.n	800cd18 <__ieee754_sqrt+0x154>
 800cc2a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cc2e:	07ce      	lsls	r6, r1, #31
 800cc30:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cc34:	bf5e      	ittt	pl
 800cc36:	0fda      	lsrpl	r2, r3, #31
 800cc38:	005b      	lslpl	r3, r3, #1
 800cc3a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cc3e:	0fda      	lsrs	r2, r3, #31
 800cc40:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cc44:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cc48:	2000      	movs	r0, #0
 800cc4a:	106d      	asrs	r5, r5, #1
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	f04f 0e16 	mov.w	lr, #22
 800cc52:	4684      	mov	ip, r0
 800cc54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc58:	eb0c 0401 	add.w	r4, ip, r1
 800cc5c:	4294      	cmp	r4, r2
 800cc5e:	bfde      	ittt	le
 800cc60:	1b12      	suble	r2, r2, r4
 800cc62:	eb04 0c01 	addle.w	ip, r4, r1
 800cc66:	1840      	addle	r0, r0, r1
 800cc68:	0052      	lsls	r2, r2, #1
 800cc6a:	f1be 0e01 	subs.w	lr, lr, #1
 800cc6e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cc72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cc76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc7a:	d1ed      	bne.n	800cc58 <__ieee754_sqrt+0x94>
 800cc7c:	4671      	mov	r1, lr
 800cc7e:	2720      	movs	r7, #32
 800cc80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cc84:	4562      	cmp	r2, ip
 800cc86:	eb04 060e 	add.w	r6, r4, lr
 800cc8a:	dc02      	bgt.n	800cc92 <__ieee754_sqrt+0xce>
 800cc8c:	d113      	bne.n	800ccb6 <__ieee754_sqrt+0xf2>
 800cc8e:	429e      	cmp	r6, r3
 800cc90:	d811      	bhi.n	800ccb6 <__ieee754_sqrt+0xf2>
 800cc92:	2e00      	cmp	r6, #0
 800cc94:	eb06 0e04 	add.w	lr, r6, r4
 800cc98:	da43      	bge.n	800cd22 <__ieee754_sqrt+0x15e>
 800cc9a:	f1be 0f00 	cmp.w	lr, #0
 800cc9e:	db40      	blt.n	800cd22 <__ieee754_sqrt+0x15e>
 800cca0:	f10c 0801 	add.w	r8, ip, #1
 800cca4:	eba2 020c 	sub.w	r2, r2, ip
 800cca8:	429e      	cmp	r6, r3
 800ccaa:	bf88      	it	hi
 800ccac:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800ccb0:	1b9b      	subs	r3, r3, r6
 800ccb2:	4421      	add	r1, r4
 800ccb4:	46c4      	mov	ip, r8
 800ccb6:	0052      	lsls	r2, r2, #1
 800ccb8:	3f01      	subs	r7, #1
 800ccba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ccbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ccc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ccc6:	d1dd      	bne.n	800cc84 <__ieee754_sqrt+0xc0>
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	d006      	beq.n	800ccda <__ieee754_sqrt+0x116>
 800cccc:	1c4c      	adds	r4, r1, #1
 800ccce:	bf13      	iteet	ne
 800ccd0:	3101      	addne	r1, #1
 800ccd2:	3001      	addeq	r0, #1
 800ccd4:	4639      	moveq	r1, r7
 800ccd6:	f021 0101 	bicne.w	r1, r1, #1
 800ccda:	1043      	asrs	r3, r0, #1
 800ccdc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cce0:	0849      	lsrs	r1, r1, #1
 800cce2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cce6:	07c2      	lsls	r2, r0, #31
 800cce8:	bf48      	it	mi
 800ccea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ccee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	463d      	mov	r5, r7
 800ccf6:	e77f      	b.n	800cbf8 <__ieee754_sqrt+0x34>
 800ccf8:	0ada      	lsrs	r2, r3, #11
 800ccfa:	3815      	subs	r0, #21
 800ccfc:	055b      	lsls	r3, r3, #21
 800ccfe:	2a00      	cmp	r2, #0
 800cd00:	d0fa      	beq.n	800ccf8 <__ieee754_sqrt+0x134>
 800cd02:	02d7      	lsls	r7, r2, #11
 800cd04:	d50a      	bpl.n	800cd1c <__ieee754_sqrt+0x158>
 800cd06:	f1c1 0420 	rsb	r4, r1, #32
 800cd0a:	fa23 f404 	lsr.w	r4, r3, r4
 800cd0e:	1e4d      	subs	r5, r1, #1
 800cd10:	408b      	lsls	r3, r1
 800cd12:	4322      	orrs	r2, r4
 800cd14:	1b41      	subs	r1, r0, r5
 800cd16:	e788      	b.n	800cc2a <__ieee754_sqrt+0x66>
 800cd18:	4608      	mov	r0, r1
 800cd1a:	e7f0      	b.n	800ccfe <__ieee754_sqrt+0x13a>
 800cd1c:	0052      	lsls	r2, r2, #1
 800cd1e:	3101      	adds	r1, #1
 800cd20:	e7ef      	b.n	800cd02 <__ieee754_sqrt+0x13e>
 800cd22:	46e0      	mov	r8, ip
 800cd24:	e7be      	b.n	800cca4 <__ieee754_sqrt+0xe0>
 800cd26:	bf00      	nop
 800cd28:	7ff00000 	.word	0x7ff00000

0800cd2c <__ieee754_powf>:
 800cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd30:	ee10 5a90 	vmov	r5, s1
 800cd34:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800cd38:	ed2d 8b02 	vpush	{d8}
 800cd3c:	eeb0 8a40 	vmov.f32	s16, s0
 800cd40:	eef0 8a60 	vmov.f32	s17, s1
 800cd44:	f000 8291 	beq.w	800d26a <__ieee754_powf+0x53e>
 800cd48:	ee10 8a10 	vmov	r8, s0
 800cd4c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800cd50:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cd54:	dc06      	bgt.n	800cd64 <__ieee754_powf+0x38>
 800cd56:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cd5a:	dd0a      	ble.n	800cd72 <__ieee754_powf+0x46>
 800cd5c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cd60:	f000 8283 	beq.w	800d26a <__ieee754_powf+0x53e>
 800cd64:	ecbd 8b02 	vpop	{d8}
 800cd68:	48d8      	ldr	r0, [pc, #864]	; (800d0cc <__ieee754_powf+0x3a0>)
 800cd6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6e:	f7fa bf1b 	b.w	8007ba8 <nanf>
 800cd72:	f1b8 0f00 	cmp.w	r8, #0
 800cd76:	da1f      	bge.n	800cdb8 <__ieee754_powf+0x8c>
 800cd78:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800cd7c:	da2e      	bge.n	800cddc <__ieee754_powf+0xb0>
 800cd7e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cd82:	f2c0 827b 	blt.w	800d27c <__ieee754_powf+0x550>
 800cd86:	15fb      	asrs	r3, r7, #23
 800cd88:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cd8c:	fa47 f603 	asr.w	r6, r7, r3
 800cd90:	fa06 f303 	lsl.w	r3, r6, r3
 800cd94:	42bb      	cmp	r3, r7
 800cd96:	f040 8271 	bne.w	800d27c <__ieee754_powf+0x550>
 800cd9a:	f006 0601 	and.w	r6, r6, #1
 800cd9e:	f1c6 0602 	rsb	r6, r6, #2
 800cda2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cda6:	d120      	bne.n	800cdea <__ieee754_powf+0xbe>
 800cda8:	2d00      	cmp	r5, #0
 800cdaa:	f280 8264 	bge.w	800d276 <__ieee754_powf+0x54a>
 800cdae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cdb2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cdb6:	e00d      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800cdb8:	2600      	movs	r6, #0
 800cdba:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cdbe:	d1f0      	bne.n	800cda2 <__ieee754_powf+0x76>
 800cdc0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cdc4:	f000 8251 	beq.w	800d26a <__ieee754_powf+0x53e>
 800cdc8:	dd0a      	ble.n	800cde0 <__ieee754_powf+0xb4>
 800cdca:	2d00      	cmp	r5, #0
 800cdcc:	f280 8250 	bge.w	800d270 <__ieee754_powf+0x544>
 800cdd0:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800d0d0 <__ieee754_powf+0x3a4>
 800cdd4:	ecbd 8b02 	vpop	{d8}
 800cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cddc:	2602      	movs	r6, #2
 800cdde:	e7ec      	b.n	800cdba <__ieee754_powf+0x8e>
 800cde0:	2d00      	cmp	r5, #0
 800cde2:	daf5      	bge.n	800cdd0 <__ieee754_powf+0xa4>
 800cde4:	eeb1 0a68 	vneg.f32	s0, s17
 800cde8:	e7f4      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800cdea:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800cdee:	d102      	bne.n	800cdf6 <__ieee754_powf+0xca>
 800cdf0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cdf4:	e7ee      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800cdf6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800cdfa:	eeb0 0a48 	vmov.f32	s0, s16
 800cdfe:	d108      	bne.n	800ce12 <__ieee754_powf+0xe6>
 800ce00:	f1b8 0f00 	cmp.w	r8, #0
 800ce04:	db05      	blt.n	800ce12 <__ieee754_powf+0xe6>
 800ce06:	ecbd 8b02 	vpop	{d8}
 800ce0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0e:	f000 ba4d 	b.w	800d2ac <__ieee754_sqrtf>
 800ce12:	f7fe fbf9 	bl	800b608 <fabsf>
 800ce16:	b124      	cbz	r4, 800ce22 <__ieee754_powf+0xf6>
 800ce18:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800ce1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ce20:	d117      	bne.n	800ce52 <__ieee754_powf+0x126>
 800ce22:	2d00      	cmp	r5, #0
 800ce24:	bfbc      	itt	lt
 800ce26:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800ce2a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ce2e:	f1b8 0f00 	cmp.w	r8, #0
 800ce32:	dacf      	bge.n	800cdd4 <__ieee754_powf+0xa8>
 800ce34:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800ce38:	ea54 0306 	orrs.w	r3, r4, r6
 800ce3c:	d104      	bne.n	800ce48 <__ieee754_powf+0x11c>
 800ce3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ce42:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ce46:	e7c5      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800ce48:	2e01      	cmp	r6, #1
 800ce4a:	d1c3      	bne.n	800cdd4 <__ieee754_powf+0xa8>
 800ce4c:	eeb1 0a40 	vneg.f32	s0, s0
 800ce50:	e7c0      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800ce52:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800ce56:	3801      	subs	r0, #1
 800ce58:	ea56 0300 	orrs.w	r3, r6, r0
 800ce5c:	d104      	bne.n	800ce68 <__ieee754_powf+0x13c>
 800ce5e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ce62:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ce66:	e7b5      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800ce68:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800ce6c:	dd6b      	ble.n	800cf46 <__ieee754_powf+0x21a>
 800ce6e:	4b99      	ldr	r3, [pc, #612]	; (800d0d4 <__ieee754_powf+0x3a8>)
 800ce70:	429c      	cmp	r4, r3
 800ce72:	dc06      	bgt.n	800ce82 <__ieee754_powf+0x156>
 800ce74:	2d00      	cmp	r5, #0
 800ce76:	daab      	bge.n	800cdd0 <__ieee754_powf+0xa4>
 800ce78:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800d0d8 <__ieee754_powf+0x3ac>
 800ce7c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ce80:	e7a8      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800ce82:	4b96      	ldr	r3, [pc, #600]	; (800d0dc <__ieee754_powf+0x3b0>)
 800ce84:	429c      	cmp	r4, r3
 800ce86:	dd02      	ble.n	800ce8e <__ieee754_powf+0x162>
 800ce88:	2d00      	cmp	r5, #0
 800ce8a:	dcf5      	bgt.n	800ce78 <__ieee754_powf+0x14c>
 800ce8c:	e7a0      	b.n	800cdd0 <__ieee754_powf+0xa4>
 800ce8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ce92:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ce96:	eddf 6a92 	vldr	s13, [pc, #584]	; 800d0e0 <__ieee754_powf+0x3b4>
 800ce9a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ce9e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cea2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cea6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ceaa:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ceae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceb2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800d0e4 <__ieee754_powf+0x3b8>
 800ceb6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800ceba:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d0e8 <__ieee754_powf+0x3bc>
 800cebe:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cec2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d0ec <__ieee754_powf+0x3c0>
 800cec6:	eef0 6a67 	vmov.f32	s13, s15
 800ceca:	eee0 6a07 	vfma.f32	s13, s0, s14
 800cece:	ee16 3a90 	vmov	r3, s13
 800ced2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ced6:	f023 030f 	bic.w	r3, r3, #15
 800ceda:	ee00 3a90 	vmov	s1, r3
 800cede:	eee0 0a47 	vfms.f32	s1, s0, s14
 800cee2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cee6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800ceea:	f025 050f 	bic.w	r5, r5, #15
 800ceee:	ee07 5a10 	vmov	s14, r5
 800cef2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cef6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cefa:	ee07 3a90 	vmov	s15, r3
 800cefe:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cf02:	3e01      	subs	r6, #1
 800cf04:	ea56 0200 	orrs.w	r2, r6, r0
 800cf08:	ee07 5a10 	vmov	s14, r5
 800cf0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf10:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cf14:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cf18:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cf1c:	ee17 4a10 	vmov	r4, s14
 800cf20:	bf08      	it	eq
 800cf22:	eeb0 8a40 	vmoveq.f32	s16, s0
 800cf26:	2c00      	cmp	r4, #0
 800cf28:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cf2c:	f340 8184 	ble.w	800d238 <__ieee754_powf+0x50c>
 800cf30:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800cf34:	f340 80fc 	ble.w	800d130 <__ieee754_powf+0x404>
 800cf38:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d0d8 <__ieee754_powf+0x3ac>
 800cf3c:	ee28 0a27 	vmul.f32	s0, s16, s15
 800cf40:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cf44:	e746      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800cf46:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800cf4a:	bf01      	itttt	eq
 800cf4c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800d0f0 <__ieee754_powf+0x3c4>
 800cf50:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800cf54:	f06f 0217 	mvneq.w	r2, #23
 800cf58:	ee17 4a90 	vmoveq	r4, s15
 800cf5c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800cf60:	bf18      	it	ne
 800cf62:	2200      	movne	r2, #0
 800cf64:	3b7f      	subs	r3, #127	; 0x7f
 800cf66:	4413      	add	r3, r2
 800cf68:	4a62      	ldr	r2, [pc, #392]	; (800d0f4 <__ieee754_powf+0x3c8>)
 800cf6a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800cf6e:	4294      	cmp	r4, r2
 800cf70:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800cf74:	dd06      	ble.n	800cf84 <__ieee754_powf+0x258>
 800cf76:	4a60      	ldr	r2, [pc, #384]	; (800d0f8 <__ieee754_powf+0x3cc>)
 800cf78:	4294      	cmp	r4, r2
 800cf7a:	f340 80a4 	ble.w	800d0c6 <__ieee754_powf+0x39a>
 800cf7e:	3301      	adds	r3, #1
 800cf80:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cf84:	2400      	movs	r4, #0
 800cf86:	4a5d      	ldr	r2, [pc, #372]	; (800d0fc <__ieee754_powf+0x3d0>)
 800cf88:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800cf8c:	ee07 1a90 	vmov	s15, r1
 800cf90:	ed92 7a00 	vldr	s14, [r2]
 800cf94:	4a5a      	ldr	r2, [pc, #360]	; (800d100 <__ieee754_powf+0x3d4>)
 800cf96:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cf9a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cf9e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800cfa2:	1049      	asrs	r1, r1, #1
 800cfa4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800cfa8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800cfac:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800cfb0:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800cfb4:	ee06 1a10 	vmov	s12, r1
 800cfb8:	ee65 4a26 	vmul.f32	s9, s10, s13
 800cfbc:	ee36 7a47 	vsub.f32	s14, s12, s14
 800cfc0:	ee14 7a90 	vmov	r7, s9
 800cfc4:	4017      	ands	r7, r2
 800cfc6:	ee05 7a90 	vmov	s11, r7
 800cfca:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800cfce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfd2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d104 <__ieee754_powf+0x3d8>
 800cfd6:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800cfda:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800cfde:	ee25 6a26 	vmul.f32	s12, s10, s13
 800cfe2:	eddf 6a49 	vldr	s13, [pc, #292]	; 800d108 <__ieee754_powf+0x3dc>
 800cfe6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cfea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d10c <__ieee754_powf+0x3e0>
 800cfee:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cff2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800d0e0 <__ieee754_powf+0x3b4>
 800cff6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cffa:	eddf 6a45 	vldr	s13, [pc, #276]	; 800d110 <__ieee754_powf+0x3e4>
 800cffe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d002:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d114 <__ieee754_powf+0x3e8>
 800d006:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d00a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d00e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d012:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d016:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d01a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d01e:	eef0 7a45 	vmov.f32	s15, s10
 800d022:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d02a:	ee17 1a90 	vmov	r1, s15
 800d02e:	4011      	ands	r1, r2
 800d030:	ee07 1a90 	vmov	s15, r1
 800d034:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d038:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d03c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d040:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d044:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d048:	eeb0 6a47 	vmov.f32	s12, s14
 800d04c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d050:	ee16 1a10 	vmov	r1, s12
 800d054:	4011      	ands	r1, r2
 800d056:	ee06 1a90 	vmov	s13, r1
 800d05a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d05e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800d118 <__ieee754_powf+0x3ec>
 800d062:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d11c <__ieee754_powf+0x3f0>
 800d066:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d06a:	ee06 1a10 	vmov	s12, r1
 800d06e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d072:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d120 <__ieee754_powf+0x3f4>
 800d076:	492b      	ldr	r1, [pc, #172]	; (800d124 <__ieee754_powf+0x3f8>)
 800d078:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d07c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d080:	edd1 7a00 	vldr	s15, [r1]
 800d084:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d088:	ee07 3a90 	vmov	s15, r3
 800d08c:	4b26      	ldr	r3, [pc, #152]	; (800d128 <__ieee754_powf+0x3fc>)
 800d08e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d092:	eef0 7a47 	vmov.f32	s15, s14
 800d096:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d09a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d09e:	edd4 0a00 	vldr	s1, [r4]
 800d0a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0aa:	ee17 3a90 	vmov	r3, s15
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	ee07 3a90 	vmov	s15, r3
 800d0b4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d0b8:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d0bc:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d0c0:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d0c4:	e70f      	b.n	800cee6 <__ieee754_powf+0x1ba>
 800d0c6:	2401      	movs	r4, #1
 800d0c8:	e75d      	b.n	800cf86 <__ieee754_powf+0x25a>
 800d0ca:	bf00      	nop
 800d0cc:	0800e8c0 	.word	0x0800e8c0
 800d0d0:	00000000 	.word	0x00000000
 800d0d4:	3f7ffff7 	.word	0x3f7ffff7
 800d0d8:	7149f2ca 	.word	0x7149f2ca
 800d0dc:	3f800007 	.word	0x3f800007
 800d0e0:	3eaaaaab 	.word	0x3eaaaaab
 800d0e4:	3fb8aa3b 	.word	0x3fb8aa3b
 800d0e8:	36eca570 	.word	0x36eca570
 800d0ec:	3fb8aa00 	.word	0x3fb8aa00
 800d0f0:	4b800000 	.word	0x4b800000
 800d0f4:	001cc471 	.word	0x001cc471
 800d0f8:	005db3d6 	.word	0x005db3d6
 800d0fc:	0800eae0 	.word	0x0800eae0
 800d100:	fffff000 	.word	0xfffff000
 800d104:	3e6c3255 	.word	0x3e6c3255
 800d108:	3e53f142 	.word	0x3e53f142
 800d10c:	3e8ba305 	.word	0x3e8ba305
 800d110:	3edb6db7 	.word	0x3edb6db7
 800d114:	3f19999a 	.word	0x3f19999a
 800d118:	3f76384f 	.word	0x3f76384f
 800d11c:	3f763800 	.word	0x3f763800
 800d120:	369dc3a0 	.word	0x369dc3a0
 800d124:	0800eaf0 	.word	0x0800eaf0
 800d128:	0800eae8 	.word	0x0800eae8
 800d12c:	3338aa3c 	.word	0x3338aa3c
 800d130:	f040 8092 	bne.w	800d258 <__ieee754_powf+0x52c>
 800d134:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d12c <__ieee754_powf+0x400>
 800d138:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d13c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d140:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d148:	f73f aef6 	bgt.w	800cf38 <__ieee754_powf+0x20c>
 800d14c:	15db      	asrs	r3, r3, #23
 800d14e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d152:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d156:	4103      	asrs	r3, r0
 800d158:	4423      	add	r3, r4
 800d15a:	4949      	ldr	r1, [pc, #292]	; (800d280 <__ieee754_powf+0x554>)
 800d15c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d160:	3a7f      	subs	r2, #127	; 0x7f
 800d162:	4111      	asrs	r1, r2
 800d164:	ea23 0101 	bic.w	r1, r3, r1
 800d168:	ee07 1a10 	vmov	s14, r1
 800d16c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d170:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d174:	f1c2 0217 	rsb	r2, r2, #23
 800d178:	4110      	asrs	r0, r2
 800d17a:	2c00      	cmp	r4, #0
 800d17c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d180:	bfb8      	it	lt
 800d182:	4240      	neglt	r0, r0
 800d184:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d188:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800d284 <__ieee754_powf+0x558>
 800d18c:	ee17 3a10 	vmov	r3, s14
 800d190:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d194:	f023 030f 	bic.w	r3, r3, #15
 800d198:	ee07 3a10 	vmov	s14, r3
 800d19c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1a0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d1a4:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d288 <__ieee754_powf+0x55c>
 800d1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ac:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d1b0:	eddf 6a36 	vldr	s13, [pc, #216]	; 800d28c <__ieee754_powf+0x560>
 800d1b4:	eeb0 0a67 	vmov.f32	s0, s15
 800d1b8:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d1bc:	eeb0 6a40 	vmov.f32	s12, s0
 800d1c0:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d1c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d1c8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d1cc:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d290 <__ieee754_powf+0x564>
 800d1d0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800d294 <__ieee754_powf+0x568>
 800d1d4:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d1d8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d298 <__ieee754_powf+0x56c>
 800d1dc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d1e0:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800d29c <__ieee754_powf+0x570>
 800d1e4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d1e8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800d2a0 <__ieee754_powf+0x574>
 800d1ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d1f0:	eeb0 6a40 	vmov.f32	s12, s0
 800d1f4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d1f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d1fc:	eeb0 7a46 	vmov.f32	s14, s12
 800d200:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d204:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d208:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d20c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d210:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d214:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d218:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d21c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d220:	ee10 3a10 	vmov	r3, s0
 800d224:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d22c:	da1a      	bge.n	800d264 <__ieee754_powf+0x538>
 800d22e:	f000 ff1b 	bl	800e068 <scalbnf>
 800d232:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d236:	e5cd      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800d238:	4a1a      	ldr	r2, [pc, #104]	; (800d2a4 <__ieee754_powf+0x578>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	dd02      	ble.n	800d244 <__ieee754_powf+0x518>
 800d23e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800d2a8 <__ieee754_powf+0x57c>
 800d242:	e67b      	b.n	800cf3c <__ieee754_powf+0x210>
 800d244:	d108      	bne.n	800d258 <__ieee754_powf+0x52c>
 800d246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d24a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d252:	f6ff af7b 	blt.w	800d14c <__ieee754_powf+0x420>
 800d256:	e7f2      	b.n	800d23e <__ieee754_powf+0x512>
 800d258:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d25c:	f73f af76 	bgt.w	800d14c <__ieee754_powf+0x420>
 800d260:	2000      	movs	r0, #0
 800d262:	e78f      	b.n	800d184 <__ieee754_powf+0x458>
 800d264:	ee00 3a10 	vmov	s0, r3
 800d268:	e7e3      	b.n	800d232 <__ieee754_powf+0x506>
 800d26a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d26e:	e5b1      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800d270:	eeb0 0a68 	vmov.f32	s0, s17
 800d274:	e5ae      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800d276:	eeb0 0a48 	vmov.f32	s0, s16
 800d27a:	e5ab      	b.n	800cdd4 <__ieee754_powf+0xa8>
 800d27c:	2600      	movs	r6, #0
 800d27e:	e590      	b.n	800cda2 <__ieee754_powf+0x76>
 800d280:	007fffff 	.word	0x007fffff
 800d284:	3f317218 	.word	0x3f317218
 800d288:	35bfbe8c 	.word	0x35bfbe8c
 800d28c:	3f317200 	.word	0x3f317200
 800d290:	3331bb4c 	.word	0x3331bb4c
 800d294:	b5ddea0e 	.word	0xb5ddea0e
 800d298:	388ab355 	.word	0x388ab355
 800d29c:	bb360b61 	.word	0xbb360b61
 800d2a0:	3e2aaaab 	.word	0x3e2aaaab
 800d2a4:	43160000 	.word	0x43160000
 800d2a8:	0da24260 	.word	0x0da24260

0800d2ac <__ieee754_sqrtf>:
 800d2ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d2b0:	4770      	bx	lr
 800d2b2:	0000      	movs	r0, r0
 800d2b4:	0000      	movs	r0, r0
	...

0800d2b8 <__kernel_cos>:
 800d2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2bc:	ec57 6b10 	vmov	r6, r7, d0
 800d2c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d2c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d2c8:	ed8d 1b00 	vstr	d1, [sp]
 800d2cc:	da07      	bge.n	800d2de <__kernel_cos+0x26>
 800d2ce:	ee10 0a10 	vmov	r0, s0
 800d2d2:	4639      	mov	r1, r7
 800d2d4:	f7f3 fc40 	bl	8000b58 <__aeabi_d2iz>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	f000 8088 	beq.w	800d3ee <__kernel_cos+0x136>
 800d2de:	4632      	mov	r2, r6
 800d2e0:	463b      	mov	r3, r7
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	f7f3 f987 	bl	80005f8 <__aeabi_dmul>
 800d2ea:	4b51      	ldr	r3, [pc, #324]	; (800d430 <__kernel_cos+0x178>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	460d      	mov	r5, r1
 800d2f2:	f7f3 f981 	bl	80005f8 <__aeabi_dmul>
 800d2f6:	a340      	add	r3, pc, #256	; (adr r3, 800d3f8 <__kernel_cos+0x140>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	4682      	mov	sl, r0
 800d2fe:	468b      	mov	fp, r1
 800d300:	4620      	mov	r0, r4
 800d302:	4629      	mov	r1, r5
 800d304:	f7f3 f978 	bl	80005f8 <__aeabi_dmul>
 800d308:	a33d      	add	r3, pc, #244	; (adr r3, 800d400 <__kernel_cos+0x148>)
 800d30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30e:	f7f2 ffbd 	bl	800028c <__adddf3>
 800d312:	4622      	mov	r2, r4
 800d314:	462b      	mov	r3, r5
 800d316:	f7f3 f96f 	bl	80005f8 <__aeabi_dmul>
 800d31a:	a33b      	add	r3, pc, #236	; (adr r3, 800d408 <__kernel_cos+0x150>)
 800d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d320:	f7f2 ffb2 	bl	8000288 <__aeabi_dsub>
 800d324:	4622      	mov	r2, r4
 800d326:	462b      	mov	r3, r5
 800d328:	f7f3 f966 	bl	80005f8 <__aeabi_dmul>
 800d32c:	a338      	add	r3, pc, #224	; (adr r3, 800d410 <__kernel_cos+0x158>)
 800d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d332:	f7f2 ffab 	bl	800028c <__adddf3>
 800d336:	4622      	mov	r2, r4
 800d338:	462b      	mov	r3, r5
 800d33a:	f7f3 f95d 	bl	80005f8 <__aeabi_dmul>
 800d33e:	a336      	add	r3, pc, #216	; (adr r3, 800d418 <__kernel_cos+0x160>)
 800d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d344:	f7f2 ffa0 	bl	8000288 <__aeabi_dsub>
 800d348:	4622      	mov	r2, r4
 800d34a:	462b      	mov	r3, r5
 800d34c:	f7f3 f954 	bl	80005f8 <__aeabi_dmul>
 800d350:	a333      	add	r3, pc, #204	; (adr r3, 800d420 <__kernel_cos+0x168>)
 800d352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d356:	f7f2 ff99 	bl	800028c <__adddf3>
 800d35a:	4622      	mov	r2, r4
 800d35c:	462b      	mov	r3, r5
 800d35e:	f7f3 f94b 	bl	80005f8 <__aeabi_dmul>
 800d362:	4622      	mov	r2, r4
 800d364:	462b      	mov	r3, r5
 800d366:	f7f3 f947 	bl	80005f8 <__aeabi_dmul>
 800d36a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d36e:	4604      	mov	r4, r0
 800d370:	460d      	mov	r5, r1
 800d372:	4630      	mov	r0, r6
 800d374:	4639      	mov	r1, r7
 800d376:	f7f3 f93f 	bl	80005f8 <__aeabi_dmul>
 800d37a:	460b      	mov	r3, r1
 800d37c:	4602      	mov	r2, r0
 800d37e:	4629      	mov	r1, r5
 800d380:	4620      	mov	r0, r4
 800d382:	f7f2 ff81 	bl	8000288 <__aeabi_dsub>
 800d386:	4b2b      	ldr	r3, [pc, #172]	; (800d434 <__kernel_cos+0x17c>)
 800d388:	4598      	cmp	r8, r3
 800d38a:	4606      	mov	r6, r0
 800d38c:	460f      	mov	r7, r1
 800d38e:	dc10      	bgt.n	800d3b2 <__kernel_cos+0xfa>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4650      	mov	r0, sl
 800d396:	4659      	mov	r1, fp
 800d398:	f7f2 ff76 	bl	8000288 <__aeabi_dsub>
 800d39c:	460b      	mov	r3, r1
 800d39e:	4926      	ldr	r1, [pc, #152]	; (800d438 <__kernel_cos+0x180>)
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	f7f2 ff70 	bl	8000288 <__aeabi_dsub>
 800d3a8:	ec41 0b10 	vmov	d0, r0, r1
 800d3ac:	b003      	add	sp, #12
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	4b22      	ldr	r3, [pc, #136]	; (800d43c <__kernel_cos+0x184>)
 800d3b4:	4920      	ldr	r1, [pc, #128]	; (800d438 <__kernel_cos+0x180>)
 800d3b6:	4598      	cmp	r8, r3
 800d3b8:	bfcc      	ite	gt
 800d3ba:	4d21      	ldrgt	r5, [pc, #132]	; (800d440 <__kernel_cos+0x188>)
 800d3bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d3c0:	2400      	movs	r4, #0
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	f7f2 ff5e 	bl	8000288 <__aeabi_dsub>
 800d3cc:	4622      	mov	r2, r4
 800d3ce:	4680      	mov	r8, r0
 800d3d0:	4689      	mov	r9, r1
 800d3d2:	462b      	mov	r3, r5
 800d3d4:	4650      	mov	r0, sl
 800d3d6:	4659      	mov	r1, fp
 800d3d8:	f7f2 ff56 	bl	8000288 <__aeabi_dsub>
 800d3dc:	4632      	mov	r2, r6
 800d3de:	463b      	mov	r3, r7
 800d3e0:	f7f2 ff52 	bl	8000288 <__aeabi_dsub>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	4640      	mov	r0, r8
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	e7da      	b.n	800d3a4 <__kernel_cos+0xec>
 800d3ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d428 <__kernel_cos+0x170>
 800d3f2:	e7db      	b.n	800d3ac <__kernel_cos+0xf4>
 800d3f4:	f3af 8000 	nop.w
 800d3f8:	be8838d4 	.word	0xbe8838d4
 800d3fc:	bda8fae9 	.word	0xbda8fae9
 800d400:	bdb4b1c4 	.word	0xbdb4b1c4
 800d404:	3e21ee9e 	.word	0x3e21ee9e
 800d408:	809c52ad 	.word	0x809c52ad
 800d40c:	3e927e4f 	.word	0x3e927e4f
 800d410:	19cb1590 	.word	0x19cb1590
 800d414:	3efa01a0 	.word	0x3efa01a0
 800d418:	16c15177 	.word	0x16c15177
 800d41c:	3f56c16c 	.word	0x3f56c16c
 800d420:	5555554c 	.word	0x5555554c
 800d424:	3fa55555 	.word	0x3fa55555
 800d428:	00000000 	.word	0x00000000
 800d42c:	3ff00000 	.word	0x3ff00000
 800d430:	3fe00000 	.word	0x3fe00000
 800d434:	3fd33332 	.word	0x3fd33332
 800d438:	3ff00000 	.word	0x3ff00000
 800d43c:	3fe90000 	.word	0x3fe90000
 800d440:	3fd20000 	.word	0x3fd20000
 800d444:	00000000 	.word	0x00000000

0800d448 <__kernel_rem_pio2>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	ed2d 8b02 	vpush	{d8}
 800d450:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d454:	f112 0f14 	cmn.w	r2, #20
 800d458:	9308      	str	r3, [sp, #32]
 800d45a:	9101      	str	r1, [sp, #4]
 800d45c:	4bc6      	ldr	r3, [pc, #792]	; (800d778 <__kernel_rem_pio2+0x330>)
 800d45e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d460:	9009      	str	r0, [sp, #36]	; 0x24
 800d462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d466:	9304      	str	r3, [sp, #16]
 800d468:	9b08      	ldr	r3, [sp, #32]
 800d46a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d46e:	bfa8      	it	ge
 800d470:	1ed4      	subge	r4, r2, #3
 800d472:	9306      	str	r3, [sp, #24]
 800d474:	bfb2      	itee	lt
 800d476:	2400      	movlt	r4, #0
 800d478:	2318      	movge	r3, #24
 800d47a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d47e:	f06f 0317 	mvn.w	r3, #23
 800d482:	fb04 3303 	mla	r3, r4, r3, r3
 800d486:	eb03 0a02 	add.w	sl, r3, r2
 800d48a:	9b04      	ldr	r3, [sp, #16]
 800d48c:	9a06      	ldr	r2, [sp, #24]
 800d48e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d768 <__kernel_rem_pio2+0x320>
 800d492:	eb03 0802 	add.w	r8, r3, r2
 800d496:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d498:	1aa7      	subs	r7, r4, r2
 800d49a:	ae20      	add	r6, sp, #128	; 0x80
 800d49c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d4a0:	2500      	movs	r5, #0
 800d4a2:	4545      	cmp	r5, r8
 800d4a4:	dd18      	ble.n	800d4d8 <__kernel_rem_pio2+0x90>
 800d4a6:	9b08      	ldr	r3, [sp, #32]
 800d4a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d4ac:	aa20      	add	r2, sp, #128	; 0x80
 800d4ae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d768 <__kernel_rem_pio2+0x320>
 800d4b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d4b6:	f1c3 0301 	rsb	r3, r3, #1
 800d4ba:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d4be:	9307      	str	r3, [sp, #28]
 800d4c0:	9b07      	ldr	r3, [sp, #28]
 800d4c2:	9a04      	ldr	r2, [sp, #16]
 800d4c4:	4443      	add	r3, r8
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	db2f      	blt.n	800d52a <__kernel_rem_pio2+0xe2>
 800d4ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d4ce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d4d2:	462f      	mov	r7, r5
 800d4d4:	2600      	movs	r6, #0
 800d4d6:	e01b      	b.n	800d510 <__kernel_rem_pio2+0xc8>
 800d4d8:	42ef      	cmn	r7, r5
 800d4da:	d407      	bmi.n	800d4ec <__kernel_rem_pio2+0xa4>
 800d4dc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d4e0:	f7f3 f820 	bl	8000524 <__aeabi_i2d>
 800d4e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d4e8:	3501      	adds	r5, #1
 800d4ea:	e7da      	b.n	800d4a2 <__kernel_rem_pio2+0x5a>
 800d4ec:	ec51 0b18 	vmov	r0, r1, d8
 800d4f0:	e7f8      	b.n	800d4e4 <__kernel_rem_pio2+0x9c>
 800d4f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4f6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d4fa:	f7f3 f87d 	bl	80005f8 <__aeabi_dmul>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d506:	f7f2 fec1 	bl	800028c <__adddf3>
 800d50a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d50e:	3601      	adds	r6, #1
 800d510:	9b06      	ldr	r3, [sp, #24]
 800d512:	429e      	cmp	r6, r3
 800d514:	f1a7 0708 	sub.w	r7, r7, #8
 800d518:	ddeb      	ble.n	800d4f2 <__kernel_rem_pio2+0xaa>
 800d51a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d51e:	3508      	adds	r5, #8
 800d520:	ecab 7b02 	vstmia	fp!, {d7}
 800d524:	f108 0801 	add.w	r8, r8, #1
 800d528:	e7ca      	b.n	800d4c0 <__kernel_rem_pio2+0x78>
 800d52a:	9b04      	ldr	r3, [sp, #16]
 800d52c:	aa0c      	add	r2, sp, #48	; 0x30
 800d52e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d532:	930b      	str	r3, [sp, #44]	; 0x2c
 800d534:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d536:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d53a:	9c04      	ldr	r4, [sp, #16]
 800d53c:	930a      	str	r3, [sp, #40]	; 0x28
 800d53e:	ab98      	add	r3, sp, #608	; 0x260
 800d540:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d544:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d548:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d54c:	f8cd b008 	str.w	fp, [sp, #8]
 800d550:	4625      	mov	r5, r4
 800d552:	2d00      	cmp	r5, #0
 800d554:	dc78      	bgt.n	800d648 <__kernel_rem_pio2+0x200>
 800d556:	ec47 6b10 	vmov	d0, r6, r7
 800d55a:	4650      	mov	r0, sl
 800d55c:	f000 fc94 	bl	800de88 <scalbn>
 800d560:	ec57 6b10 	vmov	r6, r7, d0
 800d564:	2200      	movs	r2, #0
 800d566:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d56a:	ee10 0a10 	vmov	r0, s0
 800d56e:	4639      	mov	r1, r7
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	ec41 0b10 	vmov	d0, r0, r1
 800d578:	f000 fb7a 	bl	800dc70 <floor>
 800d57c:	4b7f      	ldr	r3, [pc, #508]	; (800d77c <__kernel_rem_pio2+0x334>)
 800d57e:	ec51 0b10 	vmov	r0, r1, d0
 800d582:	2200      	movs	r2, #0
 800d584:	f7f3 f838 	bl	80005f8 <__aeabi_dmul>
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	4630      	mov	r0, r6
 800d58e:	4639      	mov	r1, r7
 800d590:	f7f2 fe7a 	bl	8000288 <__aeabi_dsub>
 800d594:	460f      	mov	r7, r1
 800d596:	4606      	mov	r6, r0
 800d598:	f7f3 fade 	bl	8000b58 <__aeabi_d2iz>
 800d59c:	9007      	str	r0, [sp, #28]
 800d59e:	f7f2 ffc1 	bl	8000524 <__aeabi_i2d>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	4639      	mov	r1, r7
 800d5aa:	f7f2 fe6d 	bl	8000288 <__aeabi_dsub>
 800d5ae:	f1ba 0f00 	cmp.w	sl, #0
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	460f      	mov	r7, r1
 800d5b6:	dd70      	ble.n	800d69a <__kernel_rem_pio2+0x252>
 800d5b8:	1e62      	subs	r2, r4, #1
 800d5ba:	ab0c      	add	r3, sp, #48	; 0x30
 800d5bc:	9d07      	ldr	r5, [sp, #28]
 800d5be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d5c2:	f1ca 0118 	rsb	r1, sl, #24
 800d5c6:	fa40 f301 	asr.w	r3, r0, r1
 800d5ca:	441d      	add	r5, r3
 800d5cc:	408b      	lsls	r3, r1
 800d5ce:	1ac0      	subs	r0, r0, r3
 800d5d0:	ab0c      	add	r3, sp, #48	; 0x30
 800d5d2:	9507      	str	r5, [sp, #28]
 800d5d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d5d8:	f1ca 0317 	rsb	r3, sl, #23
 800d5dc:	fa40 f303 	asr.w	r3, r0, r3
 800d5e0:	9302      	str	r3, [sp, #8]
 800d5e2:	9b02      	ldr	r3, [sp, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	dd66      	ble.n	800d6b6 <__kernel_rem_pio2+0x26e>
 800d5e8:	9b07      	ldr	r3, [sp, #28]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	9307      	str	r3, [sp, #28]
 800d5f0:	4615      	mov	r5, r2
 800d5f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d5f6:	4294      	cmp	r4, r2
 800d5f8:	f300 8099 	bgt.w	800d72e <__kernel_rem_pio2+0x2e6>
 800d5fc:	f1ba 0f00 	cmp.w	sl, #0
 800d600:	dd07      	ble.n	800d612 <__kernel_rem_pio2+0x1ca>
 800d602:	f1ba 0f01 	cmp.w	sl, #1
 800d606:	f000 80a5 	beq.w	800d754 <__kernel_rem_pio2+0x30c>
 800d60a:	f1ba 0f02 	cmp.w	sl, #2
 800d60e:	f000 80c1 	beq.w	800d794 <__kernel_rem_pio2+0x34c>
 800d612:	9b02      	ldr	r3, [sp, #8]
 800d614:	2b02      	cmp	r3, #2
 800d616:	d14e      	bne.n	800d6b6 <__kernel_rem_pio2+0x26e>
 800d618:	4632      	mov	r2, r6
 800d61a:	463b      	mov	r3, r7
 800d61c:	4958      	ldr	r1, [pc, #352]	; (800d780 <__kernel_rem_pio2+0x338>)
 800d61e:	2000      	movs	r0, #0
 800d620:	f7f2 fe32 	bl	8000288 <__aeabi_dsub>
 800d624:	4606      	mov	r6, r0
 800d626:	460f      	mov	r7, r1
 800d628:	2d00      	cmp	r5, #0
 800d62a:	d044      	beq.n	800d6b6 <__kernel_rem_pio2+0x26e>
 800d62c:	4650      	mov	r0, sl
 800d62e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d770 <__kernel_rem_pio2+0x328>
 800d632:	f000 fc29 	bl	800de88 <scalbn>
 800d636:	4630      	mov	r0, r6
 800d638:	4639      	mov	r1, r7
 800d63a:	ec53 2b10 	vmov	r2, r3, d0
 800d63e:	f7f2 fe23 	bl	8000288 <__aeabi_dsub>
 800d642:	4606      	mov	r6, r0
 800d644:	460f      	mov	r7, r1
 800d646:	e036      	b.n	800d6b6 <__kernel_rem_pio2+0x26e>
 800d648:	4b4e      	ldr	r3, [pc, #312]	; (800d784 <__kernel_rem_pio2+0x33c>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	4630      	mov	r0, r6
 800d64e:	4639      	mov	r1, r7
 800d650:	f7f2 ffd2 	bl	80005f8 <__aeabi_dmul>
 800d654:	f7f3 fa80 	bl	8000b58 <__aeabi_d2iz>
 800d658:	f7f2 ff64 	bl	8000524 <__aeabi_i2d>
 800d65c:	4b4a      	ldr	r3, [pc, #296]	; (800d788 <__kernel_rem_pio2+0x340>)
 800d65e:	2200      	movs	r2, #0
 800d660:	4680      	mov	r8, r0
 800d662:	4689      	mov	r9, r1
 800d664:	f7f2 ffc8 	bl	80005f8 <__aeabi_dmul>
 800d668:	4602      	mov	r2, r0
 800d66a:	460b      	mov	r3, r1
 800d66c:	4630      	mov	r0, r6
 800d66e:	4639      	mov	r1, r7
 800d670:	f7f2 fe0a 	bl	8000288 <__aeabi_dsub>
 800d674:	f7f3 fa70 	bl	8000b58 <__aeabi_d2iz>
 800d678:	9b02      	ldr	r3, [sp, #8]
 800d67a:	f843 0b04 	str.w	r0, [r3], #4
 800d67e:	3d01      	subs	r5, #1
 800d680:	9302      	str	r3, [sp, #8]
 800d682:	ab70      	add	r3, sp, #448	; 0x1c0
 800d684:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68c:	4640      	mov	r0, r8
 800d68e:	4649      	mov	r1, r9
 800d690:	f7f2 fdfc 	bl	800028c <__adddf3>
 800d694:	4606      	mov	r6, r0
 800d696:	460f      	mov	r7, r1
 800d698:	e75b      	b.n	800d552 <__kernel_rem_pio2+0x10a>
 800d69a:	d105      	bne.n	800d6a8 <__kernel_rem_pio2+0x260>
 800d69c:	1e63      	subs	r3, r4, #1
 800d69e:	aa0c      	add	r2, sp, #48	; 0x30
 800d6a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d6a4:	15c3      	asrs	r3, r0, #23
 800d6a6:	e79b      	b.n	800d5e0 <__kernel_rem_pio2+0x198>
 800d6a8:	4b38      	ldr	r3, [pc, #224]	; (800d78c <__kernel_rem_pio2+0x344>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f7f3 fa2a 	bl	8000b04 <__aeabi_dcmpge>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d139      	bne.n	800d728 <__kernel_rem_pio2+0x2e0>
 800d6b4:	9002      	str	r0, [sp, #8]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	4639      	mov	r1, r7
 800d6be:	f7f3 fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	f000 80b4 	beq.w	800d830 <__kernel_rem_pio2+0x3e8>
 800d6c8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800d6cc:	465b      	mov	r3, fp
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	9904      	ldr	r1, [sp, #16]
 800d6d2:	428b      	cmp	r3, r1
 800d6d4:	da65      	bge.n	800d7a2 <__kernel_rem_pio2+0x35a>
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	d07b      	beq.n	800d7d2 <__kernel_rem_pio2+0x38a>
 800d6da:	ab0c      	add	r3, sp, #48	; 0x30
 800d6dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d6e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 80a0 	beq.w	800d82a <__kernel_rem_pio2+0x3e2>
 800d6ea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d770 <__kernel_rem_pio2+0x328>
 800d6ee:	4650      	mov	r0, sl
 800d6f0:	f000 fbca 	bl	800de88 <scalbn>
 800d6f4:	4f23      	ldr	r7, [pc, #140]	; (800d784 <__kernel_rem_pio2+0x33c>)
 800d6f6:	ec55 4b10 	vmov	r4, r5, d0
 800d6fa:	46d8      	mov	r8, fp
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	f1b8 0f00 	cmp.w	r8, #0
 800d702:	f280 80cf 	bge.w	800d8a4 <__kernel_rem_pio2+0x45c>
 800d706:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d768 <__kernel_rem_pio2+0x320>
 800d70a:	465f      	mov	r7, fp
 800d70c:	f04f 0800 	mov.w	r8, #0
 800d710:	2f00      	cmp	r7, #0
 800d712:	f2c0 80fd 	blt.w	800d910 <__kernel_rem_pio2+0x4c8>
 800d716:	ab70      	add	r3, sp, #448	; 0x1c0
 800d718:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d790 <__kernel_rem_pio2+0x348>
 800d71c:	ec55 4b18 	vmov	r4, r5, d8
 800d720:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d724:	2600      	movs	r6, #0
 800d726:	e0e5      	b.n	800d8f4 <__kernel_rem_pio2+0x4ac>
 800d728:	2302      	movs	r3, #2
 800d72a:	9302      	str	r3, [sp, #8]
 800d72c:	e75c      	b.n	800d5e8 <__kernel_rem_pio2+0x1a0>
 800d72e:	f8db 3000 	ldr.w	r3, [fp]
 800d732:	b955      	cbnz	r5, 800d74a <__kernel_rem_pio2+0x302>
 800d734:	b123      	cbz	r3, 800d740 <__kernel_rem_pio2+0x2f8>
 800d736:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d73a:	f8cb 3000 	str.w	r3, [fp]
 800d73e:	2301      	movs	r3, #1
 800d740:	3201      	adds	r2, #1
 800d742:	f10b 0b04 	add.w	fp, fp, #4
 800d746:	461d      	mov	r5, r3
 800d748:	e755      	b.n	800d5f6 <__kernel_rem_pio2+0x1ae>
 800d74a:	1acb      	subs	r3, r1, r3
 800d74c:	f8cb 3000 	str.w	r3, [fp]
 800d750:	462b      	mov	r3, r5
 800d752:	e7f5      	b.n	800d740 <__kernel_rem_pio2+0x2f8>
 800d754:	1e62      	subs	r2, r4, #1
 800d756:	ab0c      	add	r3, sp, #48	; 0x30
 800d758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d760:	a90c      	add	r1, sp, #48	; 0x30
 800d762:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d766:	e754      	b.n	800d612 <__kernel_rem_pio2+0x1ca>
	...
 800d774:	3ff00000 	.word	0x3ff00000
 800d778:	0800eb38 	.word	0x0800eb38
 800d77c:	40200000 	.word	0x40200000
 800d780:	3ff00000 	.word	0x3ff00000
 800d784:	3e700000 	.word	0x3e700000
 800d788:	41700000 	.word	0x41700000
 800d78c:	3fe00000 	.word	0x3fe00000
 800d790:	0800eaf8 	.word	0x0800eaf8
 800d794:	1e62      	subs	r2, r4, #1
 800d796:	ab0c      	add	r3, sp, #48	; 0x30
 800d798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d79c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7a0:	e7de      	b.n	800d760 <__kernel_rem_pio2+0x318>
 800d7a2:	a90c      	add	r1, sp, #48	; 0x30
 800d7a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d7a8:	3b01      	subs	r3, #1
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	e790      	b.n	800d6d0 <__kernel_rem_pio2+0x288>
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d7b4:	2900      	cmp	r1, #0
 800d7b6:	d0fa      	beq.n	800d7ae <__kernel_rem_pio2+0x366>
 800d7b8:	9a08      	ldr	r2, [sp, #32]
 800d7ba:	18e3      	adds	r3, r4, r3
 800d7bc:	18a6      	adds	r6, r4, r2
 800d7be:	aa20      	add	r2, sp, #128	; 0x80
 800d7c0:	1c65      	adds	r5, r4, #1
 800d7c2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d7c6:	9302      	str	r3, [sp, #8]
 800d7c8:	9b02      	ldr	r3, [sp, #8]
 800d7ca:	42ab      	cmp	r3, r5
 800d7cc:	da04      	bge.n	800d7d8 <__kernel_rem_pio2+0x390>
 800d7ce:	461c      	mov	r4, r3
 800d7d0:	e6b5      	b.n	800d53e <__kernel_rem_pio2+0xf6>
 800d7d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	e7eb      	b.n	800d7b0 <__kernel_rem_pio2+0x368>
 800d7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d7de:	f7f2 fea1 	bl	8000524 <__aeabi_i2d>
 800d7e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e8:	46b3      	mov	fp, r6
 800d7ea:	461c      	mov	r4, r3
 800d7ec:	2700      	movs	r7, #0
 800d7ee:	f04f 0800 	mov.w	r8, #0
 800d7f2:	f04f 0900 	mov.w	r9, #0
 800d7f6:	9b06      	ldr	r3, [sp, #24]
 800d7f8:	429f      	cmp	r7, r3
 800d7fa:	dd06      	ble.n	800d80a <__kernel_rem_pio2+0x3c2>
 800d7fc:	ab70      	add	r3, sp, #448	; 0x1c0
 800d7fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d802:	e9c3 8900 	strd	r8, r9, [r3]
 800d806:	3501      	adds	r5, #1
 800d808:	e7de      	b.n	800d7c8 <__kernel_rem_pio2+0x380>
 800d80a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d80e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d812:	f7f2 fef1 	bl	80005f8 <__aeabi_dmul>
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	4640      	mov	r0, r8
 800d81c:	4649      	mov	r1, r9
 800d81e:	f7f2 fd35 	bl	800028c <__adddf3>
 800d822:	3701      	adds	r7, #1
 800d824:	4680      	mov	r8, r0
 800d826:	4689      	mov	r9, r1
 800d828:	e7e5      	b.n	800d7f6 <__kernel_rem_pio2+0x3ae>
 800d82a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d82e:	e754      	b.n	800d6da <__kernel_rem_pio2+0x292>
 800d830:	ec47 6b10 	vmov	d0, r6, r7
 800d834:	f1ca 0000 	rsb	r0, sl, #0
 800d838:	f000 fb26 	bl	800de88 <scalbn>
 800d83c:	ec57 6b10 	vmov	r6, r7, d0
 800d840:	4b9f      	ldr	r3, [pc, #636]	; (800dac0 <__kernel_rem_pio2+0x678>)
 800d842:	ee10 0a10 	vmov	r0, s0
 800d846:	2200      	movs	r2, #0
 800d848:	4639      	mov	r1, r7
 800d84a:	f7f3 f95b 	bl	8000b04 <__aeabi_dcmpge>
 800d84e:	b300      	cbz	r0, 800d892 <__kernel_rem_pio2+0x44a>
 800d850:	4b9c      	ldr	r3, [pc, #624]	; (800dac4 <__kernel_rem_pio2+0x67c>)
 800d852:	2200      	movs	r2, #0
 800d854:	4630      	mov	r0, r6
 800d856:	4639      	mov	r1, r7
 800d858:	f7f2 fece 	bl	80005f8 <__aeabi_dmul>
 800d85c:	f7f3 f97c 	bl	8000b58 <__aeabi_d2iz>
 800d860:	4605      	mov	r5, r0
 800d862:	f7f2 fe5f 	bl	8000524 <__aeabi_i2d>
 800d866:	4b96      	ldr	r3, [pc, #600]	; (800dac0 <__kernel_rem_pio2+0x678>)
 800d868:	2200      	movs	r2, #0
 800d86a:	f7f2 fec5 	bl	80005f8 <__aeabi_dmul>
 800d86e:	460b      	mov	r3, r1
 800d870:	4602      	mov	r2, r0
 800d872:	4639      	mov	r1, r7
 800d874:	4630      	mov	r0, r6
 800d876:	f7f2 fd07 	bl	8000288 <__aeabi_dsub>
 800d87a:	f7f3 f96d 	bl	8000b58 <__aeabi_d2iz>
 800d87e:	f104 0b01 	add.w	fp, r4, #1
 800d882:	ab0c      	add	r3, sp, #48	; 0x30
 800d884:	f10a 0a18 	add.w	sl, sl, #24
 800d888:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d88c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d890:	e72b      	b.n	800d6ea <__kernel_rem_pio2+0x2a2>
 800d892:	4630      	mov	r0, r6
 800d894:	4639      	mov	r1, r7
 800d896:	f7f3 f95f 	bl	8000b58 <__aeabi_d2iz>
 800d89a:	ab0c      	add	r3, sp, #48	; 0x30
 800d89c:	46a3      	mov	fp, r4
 800d89e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d8a2:	e722      	b.n	800d6ea <__kernel_rem_pio2+0x2a2>
 800d8a4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d8a6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d8aa:	ab0c      	add	r3, sp, #48	; 0x30
 800d8ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d8b0:	f7f2 fe38 	bl	8000524 <__aeabi_i2d>
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	f7f2 fe9e 	bl	80005f8 <__aeabi_dmul>
 800d8bc:	4632      	mov	r2, r6
 800d8be:	e9c9 0100 	strd	r0, r1, [r9]
 800d8c2:	463b      	mov	r3, r7
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f7f2 fe96 	bl	80005f8 <__aeabi_dmul>
 800d8cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	460d      	mov	r5, r1
 800d8d4:	e713      	b.n	800d6fe <__kernel_rem_pio2+0x2b6>
 800d8d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d8da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d8de:	f7f2 fe8b 	bl	80005f8 <__aeabi_dmul>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	f7f2 fccf 	bl	800028c <__adddf3>
 800d8ee:	3601      	adds	r6, #1
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	460d      	mov	r5, r1
 800d8f4:	9b04      	ldr	r3, [sp, #16]
 800d8f6:	429e      	cmp	r6, r3
 800d8f8:	dc01      	bgt.n	800d8fe <__kernel_rem_pio2+0x4b6>
 800d8fa:	45b0      	cmp	r8, r6
 800d8fc:	daeb      	bge.n	800d8d6 <__kernel_rem_pio2+0x48e>
 800d8fe:	ab48      	add	r3, sp, #288	; 0x120
 800d900:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d904:	e9c3 4500 	strd	r4, r5, [r3]
 800d908:	3f01      	subs	r7, #1
 800d90a:	f108 0801 	add.w	r8, r8, #1
 800d90e:	e6ff      	b.n	800d710 <__kernel_rem_pio2+0x2c8>
 800d910:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d912:	2b02      	cmp	r3, #2
 800d914:	dc0b      	bgt.n	800d92e <__kernel_rem_pio2+0x4e6>
 800d916:	2b00      	cmp	r3, #0
 800d918:	dc6e      	bgt.n	800d9f8 <__kernel_rem_pio2+0x5b0>
 800d91a:	d045      	beq.n	800d9a8 <__kernel_rem_pio2+0x560>
 800d91c:	9b07      	ldr	r3, [sp, #28]
 800d91e:	f003 0007 	and.w	r0, r3, #7
 800d922:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d926:	ecbd 8b02 	vpop	{d8}
 800d92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d92e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d930:	2b03      	cmp	r3, #3
 800d932:	d1f3      	bne.n	800d91c <__kernel_rem_pio2+0x4d4>
 800d934:	ab48      	add	r3, sp, #288	; 0x120
 800d936:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d93a:	46d0      	mov	r8, sl
 800d93c:	46d9      	mov	r9, fp
 800d93e:	f1b9 0f00 	cmp.w	r9, #0
 800d942:	f1a8 0808 	sub.w	r8, r8, #8
 800d946:	dc64      	bgt.n	800da12 <__kernel_rem_pio2+0x5ca>
 800d948:	465c      	mov	r4, fp
 800d94a:	2c01      	cmp	r4, #1
 800d94c:	f1aa 0a08 	sub.w	sl, sl, #8
 800d950:	dc7e      	bgt.n	800da50 <__kernel_rem_pio2+0x608>
 800d952:	2000      	movs	r0, #0
 800d954:	2100      	movs	r1, #0
 800d956:	f1bb 0f01 	cmp.w	fp, #1
 800d95a:	f300 8097 	bgt.w	800da8c <__kernel_rem_pio2+0x644>
 800d95e:	9b02      	ldr	r3, [sp, #8]
 800d960:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d964:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f040 8099 	bne.w	800daa0 <__kernel_rem_pio2+0x658>
 800d96e:	9b01      	ldr	r3, [sp, #4]
 800d970:	e9c3 5600 	strd	r5, r6, [r3]
 800d974:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d978:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d97c:	e7ce      	b.n	800d91c <__kernel_rem_pio2+0x4d4>
 800d97e:	ab48      	add	r3, sp, #288	; 0x120
 800d980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	f7f2 fc80 	bl	800028c <__adddf3>
 800d98c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d990:	f1bb 0f00 	cmp.w	fp, #0
 800d994:	daf3      	bge.n	800d97e <__kernel_rem_pio2+0x536>
 800d996:	9b02      	ldr	r3, [sp, #8]
 800d998:	b113      	cbz	r3, 800d9a0 <__kernel_rem_pio2+0x558>
 800d99a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d99e:	4619      	mov	r1, r3
 800d9a0:	9b01      	ldr	r3, [sp, #4]
 800d9a2:	e9c3 0100 	strd	r0, r1, [r3]
 800d9a6:	e7b9      	b.n	800d91c <__kernel_rem_pio2+0x4d4>
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	e7f0      	b.n	800d990 <__kernel_rem_pio2+0x548>
 800d9ae:	ab48      	add	r3, sp, #288	; 0x120
 800d9b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fc68 	bl	800028c <__adddf3>
 800d9bc:	3c01      	subs	r4, #1
 800d9be:	2c00      	cmp	r4, #0
 800d9c0:	daf5      	bge.n	800d9ae <__kernel_rem_pio2+0x566>
 800d9c2:	9b02      	ldr	r3, [sp, #8]
 800d9c4:	b1e3      	cbz	r3, 800da00 <__kernel_rem_pio2+0x5b8>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9cc:	9c01      	ldr	r4, [sp, #4]
 800d9ce:	e9c4 2300 	strd	r2, r3, [r4]
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d9da:	f7f2 fc55 	bl	8000288 <__aeabi_dsub>
 800d9de:	ad4a      	add	r5, sp, #296	; 0x128
 800d9e0:	2401      	movs	r4, #1
 800d9e2:	45a3      	cmp	fp, r4
 800d9e4:	da0f      	bge.n	800da06 <__kernel_rem_pio2+0x5be>
 800d9e6:	9b02      	ldr	r3, [sp, #8]
 800d9e8:	b113      	cbz	r3, 800d9f0 <__kernel_rem_pio2+0x5a8>
 800d9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	9b01      	ldr	r3, [sp, #4]
 800d9f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d9f6:	e791      	b.n	800d91c <__kernel_rem_pio2+0x4d4>
 800d9f8:	465c      	mov	r4, fp
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	e7de      	b.n	800d9be <__kernel_rem_pio2+0x576>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	e7e2      	b.n	800d9cc <__kernel_rem_pio2+0x584>
 800da06:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800da0a:	f7f2 fc3f 	bl	800028c <__adddf3>
 800da0e:	3401      	adds	r4, #1
 800da10:	e7e7      	b.n	800d9e2 <__kernel_rem_pio2+0x59a>
 800da12:	e9d8 4500 	ldrd	r4, r5, [r8]
 800da16:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800da1a:	4620      	mov	r0, r4
 800da1c:	4632      	mov	r2, r6
 800da1e:	463b      	mov	r3, r7
 800da20:	4629      	mov	r1, r5
 800da22:	f7f2 fc33 	bl	800028c <__adddf3>
 800da26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da2a:	4602      	mov	r2, r0
 800da2c:	460b      	mov	r3, r1
 800da2e:	4620      	mov	r0, r4
 800da30:	4629      	mov	r1, r5
 800da32:	f7f2 fc29 	bl	8000288 <__aeabi_dsub>
 800da36:	4632      	mov	r2, r6
 800da38:	463b      	mov	r3, r7
 800da3a:	f7f2 fc27 	bl	800028c <__adddf3>
 800da3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800da42:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800da46:	ed88 7b00 	vstr	d7, [r8]
 800da4a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800da4e:	e776      	b.n	800d93e <__kernel_rem_pio2+0x4f6>
 800da50:	e9da 8900 	ldrd	r8, r9, [sl]
 800da54:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800da58:	4640      	mov	r0, r8
 800da5a:	4632      	mov	r2, r6
 800da5c:	463b      	mov	r3, r7
 800da5e:	4649      	mov	r1, r9
 800da60:	f7f2 fc14 	bl	800028c <__adddf3>
 800da64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da68:	4602      	mov	r2, r0
 800da6a:	460b      	mov	r3, r1
 800da6c:	4640      	mov	r0, r8
 800da6e:	4649      	mov	r1, r9
 800da70:	f7f2 fc0a 	bl	8000288 <__aeabi_dsub>
 800da74:	4632      	mov	r2, r6
 800da76:	463b      	mov	r3, r7
 800da78:	f7f2 fc08 	bl	800028c <__adddf3>
 800da7c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800da80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da84:	ed8a 7b00 	vstr	d7, [sl]
 800da88:	3c01      	subs	r4, #1
 800da8a:	e75e      	b.n	800d94a <__kernel_rem_pio2+0x502>
 800da8c:	ab48      	add	r3, sp, #288	; 0x120
 800da8e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da96:	f7f2 fbf9 	bl	800028c <__adddf3>
 800da9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da9e:	e75a      	b.n	800d956 <__kernel_rem_pio2+0x50e>
 800daa0:	9b01      	ldr	r3, [sp, #4]
 800daa2:	9a01      	ldr	r2, [sp, #4]
 800daa4:	601d      	str	r5, [r3, #0]
 800daa6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800daaa:	605c      	str	r4, [r3, #4]
 800daac:	609f      	str	r7, [r3, #8]
 800daae:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dab2:	60d3      	str	r3, [r2, #12]
 800dab4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dab8:	6110      	str	r0, [r2, #16]
 800daba:	6153      	str	r3, [r2, #20]
 800dabc:	e72e      	b.n	800d91c <__kernel_rem_pio2+0x4d4>
 800dabe:	bf00      	nop
 800dac0:	41700000 	.word	0x41700000
 800dac4:	3e700000 	.word	0x3e700000

0800dac8 <__kernel_sin>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	ed2d 8b04 	vpush	{d8-d9}
 800dad0:	eeb0 8a41 	vmov.f32	s16, s2
 800dad4:	eef0 8a61 	vmov.f32	s17, s3
 800dad8:	ec55 4b10 	vmov	r4, r5, d0
 800dadc:	b083      	sub	sp, #12
 800dade:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dae2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dae6:	9001      	str	r0, [sp, #4]
 800dae8:	da06      	bge.n	800daf8 <__kernel_sin+0x30>
 800daea:	ee10 0a10 	vmov	r0, s0
 800daee:	4629      	mov	r1, r5
 800daf0:	f7f3 f832 	bl	8000b58 <__aeabi_d2iz>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d051      	beq.n	800db9c <__kernel_sin+0xd4>
 800daf8:	4622      	mov	r2, r4
 800dafa:	462b      	mov	r3, r5
 800dafc:	4620      	mov	r0, r4
 800dafe:	4629      	mov	r1, r5
 800db00:	f7f2 fd7a 	bl	80005f8 <__aeabi_dmul>
 800db04:	4682      	mov	sl, r0
 800db06:	468b      	mov	fp, r1
 800db08:	4602      	mov	r2, r0
 800db0a:	460b      	mov	r3, r1
 800db0c:	4620      	mov	r0, r4
 800db0e:	4629      	mov	r1, r5
 800db10:	f7f2 fd72 	bl	80005f8 <__aeabi_dmul>
 800db14:	a341      	add	r3, pc, #260	; (adr r3, 800dc1c <__kernel_sin+0x154>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	4680      	mov	r8, r0
 800db1c:	4689      	mov	r9, r1
 800db1e:	4650      	mov	r0, sl
 800db20:	4659      	mov	r1, fp
 800db22:	f7f2 fd69 	bl	80005f8 <__aeabi_dmul>
 800db26:	a33f      	add	r3, pc, #252	; (adr r3, 800dc24 <__kernel_sin+0x15c>)
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	f7f2 fbac 	bl	8000288 <__aeabi_dsub>
 800db30:	4652      	mov	r2, sl
 800db32:	465b      	mov	r3, fp
 800db34:	f7f2 fd60 	bl	80005f8 <__aeabi_dmul>
 800db38:	a33c      	add	r3, pc, #240	; (adr r3, 800dc2c <__kernel_sin+0x164>)
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	f7f2 fba5 	bl	800028c <__adddf3>
 800db42:	4652      	mov	r2, sl
 800db44:	465b      	mov	r3, fp
 800db46:	f7f2 fd57 	bl	80005f8 <__aeabi_dmul>
 800db4a:	a33a      	add	r3, pc, #232	; (adr r3, 800dc34 <__kernel_sin+0x16c>)
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	f7f2 fb9a 	bl	8000288 <__aeabi_dsub>
 800db54:	4652      	mov	r2, sl
 800db56:	465b      	mov	r3, fp
 800db58:	f7f2 fd4e 	bl	80005f8 <__aeabi_dmul>
 800db5c:	a337      	add	r3, pc, #220	; (adr r3, 800dc3c <__kernel_sin+0x174>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	f7f2 fb93 	bl	800028c <__adddf3>
 800db66:	9b01      	ldr	r3, [sp, #4]
 800db68:	4606      	mov	r6, r0
 800db6a:	460f      	mov	r7, r1
 800db6c:	b9eb      	cbnz	r3, 800dbaa <__kernel_sin+0xe2>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4650      	mov	r0, sl
 800db74:	4659      	mov	r1, fp
 800db76:	f7f2 fd3f 	bl	80005f8 <__aeabi_dmul>
 800db7a:	a325      	add	r3, pc, #148	; (adr r3, 800dc10 <__kernel_sin+0x148>)
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f7f2 fb82 	bl	8000288 <__aeabi_dsub>
 800db84:	4642      	mov	r2, r8
 800db86:	464b      	mov	r3, r9
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	4620      	mov	r0, r4
 800db92:	4629      	mov	r1, r5
 800db94:	f7f2 fb7a 	bl	800028c <__adddf3>
 800db98:	4604      	mov	r4, r0
 800db9a:	460d      	mov	r5, r1
 800db9c:	ec45 4b10 	vmov	d0, r4, r5
 800dba0:	b003      	add	sp, #12
 800dba2:	ecbd 8b04 	vpop	{d8-d9}
 800dba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbaa:	4b1b      	ldr	r3, [pc, #108]	; (800dc18 <__kernel_sin+0x150>)
 800dbac:	ec51 0b18 	vmov	r0, r1, d8
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f7f2 fd21 	bl	80005f8 <__aeabi_dmul>
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	ec41 0b19 	vmov	d9, r0, r1
 800dbbc:	463b      	mov	r3, r7
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	f7f2 fd19 	bl	80005f8 <__aeabi_dmul>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	ec51 0b19 	vmov	r0, r1, d9
 800dbce:	f7f2 fb5b 	bl	8000288 <__aeabi_dsub>
 800dbd2:	4652      	mov	r2, sl
 800dbd4:	465b      	mov	r3, fp
 800dbd6:	f7f2 fd0f 	bl	80005f8 <__aeabi_dmul>
 800dbda:	ec53 2b18 	vmov	r2, r3, d8
 800dbde:	f7f2 fb53 	bl	8000288 <__aeabi_dsub>
 800dbe2:	a30b      	add	r3, pc, #44	; (adr r3, 800dc10 <__kernel_sin+0x148>)
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	4606      	mov	r6, r0
 800dbea:	460f      	mov	r7, r1
 800dbec:	4640      	mov	r0, r8
 800dbee:	4649      	mov	r1, r9
 800dbf0:	f7f2 fd02 	bl	80005f8 <__aeabi_dmul>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	4639      	mov	r1, r7
 800dbfc:	f7f2 fb46 	bl	800028c <__adddf3>
 800dc00:	4602      	mov	r2, r0
 800dc02:	460b      	mov	r3, r1
 800dc04:	4620      	mov	r0, r4
 800dc06:	4629      	mov	r1, r5
 800dc08:	f7f2 fb3e 	bl	8000288 <__aeabi_dsub>
 800dc0c:	e7c4      	b.n	800db98 <__kernel_sin+0xd0>
 800dc0e:	bf00      	nop
 800dc10:	55555549 	.word	0x55555549
 800dc14:	3fc55555 	.word	0x3fc55555
 800dc18:	3fe00000 	.word	0x3fe00000
 800dc1c:	5acfd57c 	.word	0x5acfd57c
 800dc20:	3de5d93a 	.word	0x3de5d93a
 800dc24:	8a2b9ceb 	.word	0x8a2b9ceb
 800dc28:	3e5ae5e6 	.word	0x3e5ae5e6
 800dc2c:	57b1fe7d 	.word	0x57b1fe7d
 800dc30:	3ec71de3 	.word	0x3ec71de3
 800dc34:	19c161d5 	.word	0x19c161d5
 800dc38:	3f2a01a0 	.word	0x3f2a01a0
 800dc3c:	1110f8a6 	.word	0x1110f8a6
 800dc40:	3f811111 	.word	0x3f811111

0800dc44 <fabs>:
 800dc44:	ec51 0b10 	vmov	r0, r1, d0
 800dc48:	ee10 2a10 	vmov	r2, s0
 800dc4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dc50:	ec43 2b10 	vmov	d0, r2, r3
 800dc54:	4770      	bx	lr

0800dc56 <finite>:
 800dc56:	b082      	sub	sp, #8
 800dc58:	ed8d 0b00 	vstr	d0, [sp]
 800dc5c:	9801      	ldr	r0, [sp, #4]
 800dc5e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800dc62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dc66:	0fc0      	lsrs	r0, r0, #31
 800dc68:	b002      	add	sp, #8
 800dc6a:	4770      	bx	lr
 800dc6c:	0000      	movs	r0, r0
	...

0800dc70 <floor>:
 800dc70:	ec51 0b10 	vmov	r0, r1, d0
 800dc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800dc7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800dc80:	2e13      	cmp	r6, #19
 800dc82:	ee10 5a10 	vmov	r5, s0
 800dc86:	ee10 8a10 	vmov	r8, s0
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	dc32      	bgt.n	800dcf4 <floor+0x84>
 800dc8e:	2e00      	cmp	r6, #0
 800dc90:	da14      	bge.n	800dcbc <floor+0x4c>
 800dc92:	a333      	add	r3, pc, #204	; (adr r3, 800dd60 <floor+0xf0>)
 800dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc98:	f7f2 faf8 	bl	800028c <__adddf3>
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f7f2 ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 800dca4:	b138      	cbz	r0, 800dcb6 <floor+0x46>
 800dca6:	2c00      	cmp	r4, #0
 800dca8:	da57      	bge.n	800dd5a <floor+0xea>
 800dcaa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dcae:	431d      	orrs	r5, r3
 800dcb0:	d001      	beq.n	800dcb6 <floor+0x46>
 800dcb2:	4c2d      	ldr	r4, [pc, #180]	; (800dd68 <floor+0xf8>)
 800dcb4:	2500      	movs	r5, #0
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	4628      	mov	r0, r5
 800dcba:	e025      	b.n	800dd08 <floor+0x98>
 800dcbc:	4f2b      	ldr	r7, [pc, #172]	; (800dd6c <floor+0xfc>)
 800dcbe:	4137      	asrs	r7, r6
 800dcc0:	ea01 0307 	and.w	r3, r1, r7
 800dcc4:	4303      	orrs	r3, r0
 800dcc6:	d01f      	beq.n	800dd08 <floor+0x98>
 800dcc8:	a325      	add	r3, pc, #148	; (adr r3, 800dd60 <floor+0xf0>)
 800dcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcce:	f7f2 fadd 	bl	800028c <__adddf3>
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	f7f2 ff1f 	bl	8000b18 <__aeabi_dcmpgt>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d0eb      	beq.n	800dcb6 <floor+0x46>
 800dcde:	2c00      	cmp	r4, #0
 800dce0:	bfbe      	ittt	lt
 800dce2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dce6:	fa43 f606 	asrlt.w	r6, r3, r6
 800dcea:	19a4      	addlt	r4, r4, r6
 800dcec:	ea24 0407 	bic.w	r4, r4, r7
 800dcf0:	2500      	movs	r5, #0
 800dcf2:	e7e0      	b.n	800dcb6 <floor+0x46>
 800dcf4:	2e33      	cmp	r6, #51	; 0x33
 800dcf6:	dd0b      	ble.n	800dd10 <floor+0xa0>
 800dcf8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dcfc:	d104      	bne.n	800dd08 <floor+0x98>
 800dcfe:	ee10 2a10 	vmov	r2, s0
 800dd02:	460b      	mov	r3, r1
 800dd04:	f7f2 fac2 	bl	800028c <__adddf3>
 800dd08:	ec41 0b10 	vmov	d0, r0, r1
 800dd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dd14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd18:	fa23 f707 	lsr.w	r7, r3, r7
 800dd1c:	4207      	tst	r7, r0
 800dd1e:	d0f3      	beq.n	800dd08 <floor+0x98>
 800dd20:	a30f      	add	r3, pc, #60	; (adr r3, 800dd60 <floor+0xf0>)
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	f7f2 fab1 	bl	800028c <__adddf3>
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f7f2 fef3 	bl	8000b18 <__aeabi_dcmpgt>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d0bf      	beq.n	800dcb6 <floor+0x46>
 800dd36:	2c00      	cmp	r4, #0
 800dd38:	da02      	bge.n	800dd40 <floor+0xd0>
 800dd3a:	2e14      	cmp	r6, #20
 800dd3c:	d103      	bne.n	800dd46 <floor+0xd6>
 800dd3e:	3401      	adds	r4, #1
 800dd40:	ea25 0507 	bic.w	r5, r5, r7
 800dd44:	e7b7      	b.n	800dcb6 <floor+0x46>
 800dd46:	2301      	movs	r3, #1
 800dd48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dd4c:	fa03 f606 	lsl.w	r6, r3, r6
 800dd50:	4435      	add	r5, r6
 800dd52:	4545      	cmp	r5, r8
 800dd54:	bf38      	it	cc
 800dd56:	18e4      	addcc	r4, r4, r3
 800dd58:	e7f2      	b.n	800dd40 <floor+0xd0>
 800dd5a:	2500      	movs	r5, #0
 800dd5c:	462c      	mov	r4, r5
 800dd5e:	e7aa      	b.n	800dcb6 <floor+0x46>
 800dd60:	8800759c 	.word	0x8800759c
 800dd64:	7e37e43c 	.word	0x7e37e43c
 800dd68:	bff00000 	.word	0xbff00000
 800dd6c:	000fffff 	.word	0x000fffff

0800dd70 <rint>:
 800dd70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd72:	ec51 0b10 	vmov	r0, r1, d0
 800dd76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dd7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dd7e:	2e13      	cmp	r6, #19
 800dd80:	ee10 4a10 	vmov	r4, s0
 800dd84:	460b      	mov	r3, r1
 800dd86:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800dd8a:	dc58      	bgt.n	800de3e <rint+0xce>
 800dd8c:	2e00      	cmp	r6, #0
 800dd8e:	da2b      	bge.n	800dde8 <rint+0x78>
 800dd90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800dd94:	4302      	orrs	r2, r0
 800dd96:	d023      	beq.n	800dde0 <rint+0x70>
 800dd98:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800dd9c:	4302      	orrs	r2, r0
 800dd9e:	4254      	negs	r4, r2
 800dda0:	4314      	orrs	r4, r2
 800dda2:	0c4b      	lsrs	r3, r1, #17
 800dda4:	0b24      	lsrs	r4, r4, #12
 800dda6:	045b      	lsls	r3, r3, #17
 800dda8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ddac:	ea44 0103 	orr.w	r1, r4, r3
 800ddb0:	4b32      	ldr	r3, [pc, #200]	; (800de7c <rint+0x10c>)
 800ddb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ddb6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ddba:	4602      	mov	r2, r0
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	4639      	mov	r1, r7
 800ddc2:	f7f2 fa63 	bl	800028c <__adddf3>
 800ddc6:	e9cd 0100 	strd	r0, r1, [sp]
 800ddca:	463b      	mov	r3, r7
 800ddcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	f7f2 fa59 	bl	8000288 <__aeabi_dsub>
 800ddd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ddda:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ddde:	4639      	mov	r1, r7
 800dde0:	ec41 0b10 	vmov	d0, r0, r1
 800dde4:	b003      	add	sp, #12
 800dde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dde8:	4a25      	ldr	r2, [pc, #148]	; (800de80 <rint+0x110>)
 800ddea:	4132      	asrs	r2, r6
 800ddec:	ea01 0702 	and.w	r7, r1, r2
 800ddf0:	4307      	orrs	r7, r0
 800ddf2:	d0f5      	beq.n	800dde0 <rint+0x70>
 800ddf4:	0851      	lsrs	r1, r2, #1
 800ddf6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ddfa:	4314      	orrs	r4, r2
 800ddfc:	d00c      	beq.n	800de18 <rint+0xa8>
 800ddfe:	ea23 0201 	bic.w	r2, r3, r1
 800de02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800de06:	2e13      	cmp	r6, #19
 800de08:	fa43 f606 	asr.w	r6, r3, r6
 800de0c:	bf0c      	ite	eq
 800de0e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800de12:	2400      	movne	r4, #0
 800de14:	ea42 0306 	orr.w	r3, r2, r6
 800de18:	4918      	ldr	r1, [pc, #96]	; (800de7c <rint+0x10c>)
 800de1a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800de1e:	4622      	mov	r2, r4
 800de20:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de24:	4620      	mov	r0, r4
 800de26:	4629      	mov	r1, r5
 800de28:	f7f2 fa30 	bl	800028c <__adddf3>
 800de2c:	e9cd 0100 	strd	r0, r1, [sp]
 800de30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de34:	4622      	mov	r2, r4
 800de36:	462b      	mov	r3, r5
 800de38:	f7f2 fa26 	bl	8000288 <__aeabi_dsub>
 800de3c:	e7d0      	b.n	800dde0 <rint+0x70>
 800de3e:	2e33      	cmp	r6, #51	; 0x33
 800de40:	dd07      	ble.n	800de52 <rint+0xe2>
 800de42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800de46:	d1cb      	bne.n	800dde0 <rint+0x70>
 800de48:	ee10 2a10 	vmov	r2, s0
 800de4c:	f7f2 fa1e 	bl	800028c <__adddf3>
 800de50:	e7c6      	b.n	800dde0 <rint+0x70>
 800de52:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800de56:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800de5a:	40d6      	lsrs	r6, r2
 800de5c:	4230      	tst	r0, r6
 800de5e:	d0bf      	beq.n	800dde0 <rint+0x70>
 800de60:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800de64:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800de68:	bf1f      	itttt	ne
 800de6a:	ea24 0101 	bicne.w	r1, r4, r1
 800de6e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800de72:	fa44 f202 	asrne.w	r2, r4, r2
 800de76:	ea41 0402 	orrne.w	r4, r1, r2
 800de7a:	e7cd      	b.n	800de18 <rint+0xa8>
 800de7c:	0800eb48 	.word	0x0800eb48
 800de80:	000fffff 	.word	0x000fffff
 800de84:	00000000 	.word	0x00000000

0800de88 <scalbn>:
 800de88:	b570      	push	{r4, r5, r6, lr}
 800de8a:	ec55 4b10 	vmov	r4, r5, d0
 800de8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800de92:	4606      	mov	r6, r0
 800de94:	462b      	mov	r3, r5
 800de96:	b99a      	cbnz	r2, 800dec0 <scalbn+0x38>
 800de98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800de9c:	4323      	orrs	r3, r4
 800de9e:	d036      	beq.n	800df0e <scalbn+0x86>
 800dea0:	4b39      	ldr	r3, [pc, #228]	; (800df88 <scalbn+0x100>)
 800dea2:	4629      	mov	r1, r5
 800dea4:	ee10 0a10 	vmov	r0, s0
 800dea8:	2200      	movs	r2, #0
 800deaa:	f7f2 fba5 	bl	80005f8 <__aeabi_dmul>
 800deae:	4b37      	ldr	r3, [pc, #220]	; (800df8c <scalbn+0x104>)
 800deb0:	429e      	cmp	r6, r3
 800deb2:	4604      	mov	r4, r0
 800deb4:	460d      	mov	r5, r1
 800deb6:	da10      	bge.n	800deda <scalbn+0x52>
 800deb8:	a32b      	add	r3, pc, #172	; (adr r3, 800df68 <scalbn+0xe0>)
 800deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debe:	e03a      	b.n	800df36 <scalbn+0xae>
 800dec0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dec4:	428a      	cmp	r2, r1
 800dec6:	d10c      	bne.n	800dee2 <scalbn+0x5a>
 800dec8:	ee10 2a10 	vmov	r2, s0
 800decc:	4620      	mov	r0, r4
 800dece:	4629      	mov	r1, r5
 800ded0:	f7f2 f9dc 	bl	800028c <__adddf3>
 800ded4:	4604      	mov	r4, r0
 800ded6:	460d      	mov	r5, r1
 800ded8:	e019      	b.n	800df0e <scalbn+0x86>
 800deda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dede:	460b      	mov	r3, r1
 800dee0:	3a36      	subs	r2, #54	; 0x36
 800dee2:	4432      	add	r2, r6
 800dee4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dee8:	428a      	cmp	r2, r1
 800deea:	dd08      	ble.n	800defe <scalbn+0x76>
 800deec:	2d00      	cmp	r5, #0
 800deee:	a120      	add	r1, pc, #128	; (adr r1, 800df70 <scalbn+0xe8>)
 800def0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800def4:	da1c      	bge.n	800df30 <scalbn+0xa8>
 800def6:	a120      	add	r1, pc, #128	; (adr r1, 800df78 <scalbn+0xf0>)
 800def8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800defc:	e018      	b.n	800df30 <scalbn+0xa8>
 800defe:	2a00      	cmp	r2, #0
 800df00:	dd08      	ble.n	800df14 <scalbn+0x8c>
 800df02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df0e:	ec45 4b10 	vmov	d0, r4, r5
 800df12:	bd70      	pop	{r4, r5, r6, pc}
 800df14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800df18:	da19      	bge.n	800df4e <scalbn+0xc6>
 800df1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800df1e:	429e      	cmp	r6, r3
 800df20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800df24:	dd0a      	ble.n	800df3c <scalbn+0xb4>
 800df26:	a112      	add	r1, pc, #72	; (adr r1, 800df70 <scalbn+0xe8>)
 800df28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1e2      	bne.n	800def6 <scalbn+0x6e>
 800df30:	a30f      	add	r3, pc, #60	; (adr r3, 800df70 <scalbn+0xe8>)
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	f7f2 fb5f 	bl	80005f8 <__aeabi_dmul>
 800df3a:	e7cb      	b.n	800ded4 <scalbn+0x4c>
 800df3c:	a10a      	add	r1, pc, #40	; (adr r1, 800df68 <scalbn+0xe0>)
 800df3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d0b8      	beq.n	800deb8 <scalbn+0x30>
 800df46:	a10e      	add	r1, pc, #56	; (adr r1, 800df80 <scalbn+0xf8>)
 800df48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df4c:	e7b4      	b.n	800deb8 <scalbn+0x30>
 800df4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df52:	3236      	adds	r2, #54	; 0x36
 800df54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800df5c:	4620      	mov	r0, r4
 800df5e:	4b0c      	ldr	r3, [pc, #48]	; (800df90 <scalbn+0x108>)
 800df60:	2200      	movs	r2, #0
 800df62:	e7e8      	b.n	800df36 <scalbn+0xae>
 800df64:	f3af 8000 	nop.w
 800df68:	c2f8f359 	.word	0xc2f8f359
 800df6c:	01a56e1f 	.word	0x01a56e1f
 800df70:	8800759c 	.word	0x8800759c
 800df74:	7e37e43c 	.word	0x7e37e43c
 800df78:	8800759c 	.word	0x8800759c
 800df7c:	fe37e43c 	.word	0xfe37e43c
 800df80:	c2f8f359 	.word	0xc2f8f359
 800df84:	81a56e1f 	.word	0x81a56e1f
 800df88:	43500000 	.word	0x43500000
 800df8c:	ffff3cb0 	.word	0xffff3cb0
 800df90:	3c900000 	.word	0x3c900000

0800df94 <finitef>:
 800df94:	b082      	sub	sp, #8
 800df96:	ed8d 0a01 	vstr	s0, [sp, #4]
 800df9a:	9801      	ldr	r0, [sp, #4]
 800df9c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dfa0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800dfa4:	bfac      	ite	ge
 800dfa6:	2000      	movge	r0, #0
 800dfa8:	2001      	movlt	r0, #1
 800dfaa:	b002      	add	sp, #8
 800dfac:	4770      	bx	lr
	...

0800dfb0 <rintf>:
 800dfb0:	ee10 2a10 	vmov	r2, s0
 800dfb4:	b513      	push	{r0, r1, r4, lr}
 800dfb6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800dfba:	397f      	subs	r1, #127	; 0x7f
 800dfbc:	2916      	cmp	r1, #22
 800dfbe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800dfc2:	dc47      	bgt.n	800e054 <rintf+0xa4>
 800dfc4:	b32b      	cbz	r3, 800e012 <rintf+0x62>
 800dfc6:	2900      	cmp	r1, #0
 800dfc8:	ee10 3a10 	vmov	r3, s0
 800dfcc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800dfd0:	da21      	bge.n	800e016 <rintf+0x66>
 800dfd2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800dfd6:	425b      	negs	r3, r3
 800dfd8:	4921      	ldr	r1, [pc, #132]	; (800e060 <rintf+0xb0>)
 800dfda:	0a5b      	lsrs	r3, r3, #9
 800dfdc:	0d12      	lsrs	r2, r2, #20
 800dfde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfe2:	0512      	lsls	r2, r2, #20
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800dfea:	ee07 3a90 	vmov	s15, r3
 800dfee:	edd1 6a00 	vldr	s13, [r1]
 800dff2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800dff6:	ed8d 7a01 	vstr	s14, [sp, #4]
 800dffa:	eddd 7a01 	vldr	s15, [sp, #4]
 800dffe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e002:	ee17 3a90 	vmov	r3, s15
 800e006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e00a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e00e:	ee00 3a10 	vmov	s0, r3
 800e012:	b002      	add	sp, #8
 800e014:	bd10      	pop	{r4, pc}
 800e016:	4a13      	ldr	r2, [pc, #76]	; (800e064 <rintf+0xb4>)
 800e018:	410a      	asrs	r2, r1
 800e01a:	4213      	tst	r3, r2
 800e01c:	d0f9      	beq.n	800e012 <rintf+0x62>
 800e01e:	0854      	lsrs	r4, r2, #1
 800e020:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800e024:	d006      	beq.n	800e034 <rintf+0x84>
 800e026:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e02a:	ea23 0304 	bic.w	r3, r3, r4
 800e02e:	fa42 f101 	asr.w	r1, r2, r1
 800e032:	430b      	orrs	r3, r1
 800e034:	4a0a      	ldr	r2, [pc, #40]	; (800e060 <rintf+0xb0>)
 800e036:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800e03a:	ed90 7a00 	vldr	s14, [r0]
 800e03e:	ee07 3a90 	vmov	s15, r3
 800e042:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e046:	edcd 7a01 	vstr	s15, [sp, #4]
 800e04a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e04e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e052:	e7de      	b.n	800e012 <rintf+0x62>
 800e054:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e058:	d3db      	bcc.n	800e012 <rintf+0x62>
 800e05a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e05e:	e7d8      	b.n	800e012 <rintf+0x62>
 800e060:	0800eb58 	.word	0x0800eb58
 800e064:	007fffff 	.word	0x007fffff

0800e068 <scalbnf>:
 800e068:	ee10 3a10 	vmov	r3, s0
 800e06c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e070:	d025      	beq.n	800e0be <scalbnf+0x56>
 800e072:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e076:	d302      	bcc.n	800e07e <scalbnf+0x16>
 800e078:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e07c:	4770      	bx	lr
 800e07e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e082:	d122      	bne.n	800e0ca <scalbnf+0x62>
 800e084:	4b2a      	ldr	r3, [pc, #168]	; (800e130 <scalbnf+0xc8>)
 800e086:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e134 <scalbnf+0xcc>
 800e08a:	4298      	cmp	r0, r3
 800e08c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e090:	db16      	blt.n	800e0c0 <scalbnf+0x58>
 800e092:	ee10 3a10 	vmov	r3, s0
 800e096:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e09a:	3a19      	subs	r2, #25
 800e09c:	4402      	add	r2, r0
 800e09e:	2afe      	cmp	r2, #254	; 0xfe
 800e0a0:	dd15      	ble.n	800e0ce <scalbnf+0x66>
 800e0a2:	ee10 3a10 	vmov	r3, s0
 800e0a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e138 <scalbnf+0xd0>
 800e0aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e13c <scalbnf+0xd4>
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	eeb0 7a67 	vmov.f32	s14, s15
 800e0b4:	bfb8      	it	lt
 800e0b6:	eef0 7a66 	vmovlt.f32	s15, s13
 800e0ba:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e0be:	4770      	bx	lr
 800e0c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e140 <scalbnf+0xd8>
 800e0c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e0c8:	4770      	bx	lr
 800e0ca:	0dd2      	lsrs	r2, r2, #23
 800e0cc:	e7e6      	b.n	800e09c <scalbnf+0x34>
 800e0ce:	2a00      	cmp	r2, #0
 800e0d0:	dd06      	ble.n	800e0e0 <scalbnf+0x78>
 800e0d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e0da:	ee00 3a10 	vmov	s0, r3
 800e0de:	4770      	bx	lr
 800e0e0:	f112 0f16 	cmn.w	r2, #22
 800e0e4:	da1a      	bge.n	800e11c <scalbnf+0xb4>
 800e0e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e0ea:	4298      	cmp	r0, r3
 800e0ec:	ee10 3a10 	vmov	r3, s0
 800e0f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0f4:	dd0a      	ble.n	800e10c <scalbnf+0xa4>
 800e0f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e138 <scalbnf+0xd0>
 800e0fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e13c <scalbnf+0xd4>
 800e0fe:	eef0 7a40 	vmov.f32	s15, s0
 800e102:	2b00      	cmp	r3, #0
 800e104:	bf18      	it	ne
 800e106:	eeb0 0a47 	vmovne.f32	s0, s14
 800e10a:	e7db      	b.n	800e0c4 <scalbnf+0x5c>
 800e10c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e140 <scalbnf+0xd8>
 800e110:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e144 <scalbnf+0xdc>
 800e114:	eef0 7a40 	vmov.f32	s15, s0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	e7f3      	b.n	800e104 <scalbnf+0x9c>
 800e11c:	3219      	adds	r2, #25
 800e11e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e122:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e126:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e148 <scalbnf+0xe0>
 800e12a:	ee07 3a10 	vmov	s14, r3
 800e12e:	e7c4      	b.n	800e0ba <scalbnf+0x52>
 800e130:	ffff3cb0 	.word	0xffff3cb0
 800e134:	4c000000 	.word	0x4c000000
 800e138:	7149f2ca 	.word	0x7149f2ca
 800e13c:	f149f2ca 	.word	0xf149f2ca
 800e140:	0da24260 	.word	0x0da24260
 800e144:	8da24260 	.word	0x8da24260
 800e148:	33000000 	.word	0x33000000

0800e14c <_close>:
 800e14c:	4b02      	ldr	r3, [pc, #8]	; (800e158 <_close+0xc>)
 800e14e:	2258      	movs	r2, #88	; 0x58
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e156:	4770      	bx	lr
 800e158:	200057bc 	.word	0x200057bc

0800e15c <_fstat>:
 800e15c:	4b02      	ldr	r3, [pc, #8]	; (800e168 <_fstat+0xc>)
 800e15e:	2258      	movs	r2, #88	; 0x58
 800e160:	601a      	str	r2, [r3, #0]
 800e162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e166:	4770      	bx	lr
 800e168:	200057bc 	.word	0x200057bc

0800e16c <_getpid>:
 800e16c:	4b02      	ldr	r3, [pc, #8]	; (800e178 <_getpid+0xc>)
 800e16e:	2258      	movs	r2, #88	; 0x58
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e176:	4770      	bx	lr
 800e178:	200057bc 	.word	0x200057bc

0800e17c <_isatty>:
 800e17c:	4b02      	ldr	r3, [pc, #8]	; (800e188 <_isatty+0xc>)
 800e17e:	2258      	movs	r2, #88	; 0x58
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	2000      	movs	r0, #0
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	200057bc 	.word	0x200057bc

0800e18c <_kill>:
 800e18c:	4b02      	ldr	r3, [pc, #8]	; (800e198 <_kill+0xc>)
 800e18e:	2258      	movs	r2, #88	; 0x58
 800e190:	601a      	str	r2, [r3, #0]
 800e192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e196:	4770      	bx	lr
 800e198:	200057bc 	.word	0x200057bc

0800e19c <_lseek>:
 800e19c:	4b02      	ldr	r3, [pc, #8]	; (800e1a8 <_lseek+0xc>)
 800e19e:	2258      	movs	r2, #88	; 0x58
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1a6:	4770      	bx	lr
 800e1a8:	200057bc 	.word	0x200057bc

0800e1ac <_read>:
 800e1ac:	4b02      	ldr	r3, [pc, #8]	; (800e1b8 <_read+0xc>)
 800e1ae:	2258      	movs	r2, #88	; 0x58
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1b6:	4770      	bx	lr
 800e1b8:	200057bc 	.word	0x200057bc

0800e1bc <_write>:
 800e1bc:	4b02      	ldr	r3, [pc, #8]	; (800e1c8 <_write+0xc>)
 800e1be:	2258      	movs	r2, #88	; 0x58
 800e1c0:	601a      	str	r2, [r3, #0]
 800e1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1c6:	4770      	bx	lr
 800e1c8:	200057bc 	.word	0x200057bc

0800e1cc <_exit>:
 800e1cc:	e7fe      	b.n	800e1cc <_exit>
	...

0800e1d0 <_init>:
 800e1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d2:	bf00      	nop
 800e1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d6:	bc08      	pop	{r3}
 800e1d8:	469e      	mov	lr, r3
 800e1da:	4770      	bx	lr

0800e1dc <_fini>:
 800e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1de:	bf00      	nop
 800e1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1e2:	bc08      	pop	{r3}
 800e1e4:	469e      	mov	lr, r3
 800e1e6:	4770      	bx	lr
