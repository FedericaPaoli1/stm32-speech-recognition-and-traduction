
stm32-speech-recognition-and-traduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00049268  08016e60  08016e60  00026e60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080600c8  080600c8  000810b8  2**0
                  CONTENTS
  4 .ARM          00000008  080600c8  080600c8  000700c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080600d0  080600d0  000810b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080600d0  080600d0  000700d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080600d4  080600d4  000700d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010b8  20000000  080600d8  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012c78  200010b8  08061190  000810b8  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20013d30  08061190  00083d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000810b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002db44  00000000  00000000  000810e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005960  00000000  00000000  000aec2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  000b4590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  000b59f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028842  00000000  00000000  000b6c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022ea3  00000000  00000000  000df452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddb5a  00000000  00000000  001022f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000014d  00000000  00000000  001dfe4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab4  00000000  00000000  001dff9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001e6a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001e6b1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200010b8 	.word	0x200010b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016e30 	.word	0x08016e30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200010bc 	.word	0x200010bc
 80001cc:	08016e30 	.word	0x08016e30

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <audio_record>:
 *
 * @param  None
 *
 * @retval None
 */
void audio_record(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	dma_transfer_state = OFFSET_NONE;
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <audio_record+0x104>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]

	/* Initialize audio peripheral */
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ,
 8001016:	2201      	movs	r2, #1
 8001018:	2110      	movs	r1, #16
 800101a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800101e:	f001 fc0d 	bl	800283c <BSP_AUDIO_IN_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <audio_record+0x20>
	DEFAULT_AUDIO_IN_BIT_RESOLUTION,
	DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK) {
		Error_Handler();
 8001028:	f001 f86e 	bl	8002108 <Error_Handler>
	}

	/* Start the audio input record */
	if (BSP_AUDIO_IN_Record((uint16_t*) &pdm_buffer[0],
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	4839      	ldr	r0, [pc, #228]	; (8001114 <audio_record+0x108>)
 8001030:	f001 fc2e 	bl	8002890 <BSP_AUDIO_IN_Record>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <audio_record+0x32>
	PDM_BUFFER_SIZE) != AUDIO_OK) {
		Error_Handler();
 800103a:	f001 f865 	bl	8002108 <Error_Handler>
	}

	data_ready = 0;
 800103e:	4b36      	ldr	r3, [pc, #216]	; (8001118 <audio_record+0x10c>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]

	/* Wait for the data to be ready in the PCM form */
	while (data_ready != 1) {
 8001044:	e056      	b.n	80010f4 <audio_record+0xe8>
		if (dma_transfer_state == OFFSET_HALF) {
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <audio_record+0x104>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d12a      	bne.n	80010a4 <audio_record+0x98>
			/* PDM to PCM data conversion */
			BSP_AUDIO_IN_PDMToPCM((uint16_t*) &pdm_buffer[0],
 800104e:	4933      	ldr	r1, [pc, #204]	; (800111c <audio_record+0x110>)
 8001050:	4830      	ldr	r0, [pc, #192]	; (8001114 <audio_record+0x108>)
 8001052:	f001 fc47 	bl	80028e4 <BSP_AUDIO_IN_PDMToPCM>

			/* Copy of PCM data into the final buffer. It copies PCM_OUT_SIZE * 2
			 * because they are uint16_t, which are 2 bytes long and memcpy
			 * expects a size in bytes.
			 */
			memcpy((uint16_t*) &pcm_buffer[pcm_offset * PCM_OUT_SIZE],
 8001056:	4b32      	ldr	r3, [pc, #200]	; (8001120 <audio_record+0x114>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	4a30      	ldr	r2, [pc, #192]	; (8001124 <audio_record+0x118>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	099b      	lsrs	r3, r3, #6
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <audio_record+0x11c>)
 800106e:	4413      	add	r3, r2
 8001070:	2220      	movs	r2, #32
 8001072:	492a      	ldr	r1, [pc, #168]	; (800111c <audio_record+0x110>)
 8001074:	4618      	mov	r0, r3
 8001076:	f00f fa37 	bl	80104e8 <memcpy>
					pdmtopcm_buffer,
					PCM_OUT_SIZE * 2);

			dma_transfer_state = OFFSET_NONE;
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <audio_record+0x104>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]

			/* if the buffer is full, audio acquisition is done */
			if (pcm_offset == (PCM_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <audio_record+0x114>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001088:	4293      	cmp	r3, r2
 800108a:	d106      	bne.n	800109a <audio_record+0x8e>
				data_ready = 1;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <audio_record+0x10c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
				pcm_offset = 0;
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <audio_record+0x114>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e004      	b.n	80010a4 <audio_record+0x98>
			} else {
				pcm_offset++;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <audio_record+0x114>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <audio_record+0x114>)
 80010a2:	6013      	str	r3, [r2, #0]
			}

		}

		if (dma_transfer_state == OFFSET_FULL) {
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <audio_record+0x104>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <audio_record+0xe8>
			/* PDM to PCM data convert */
			BSP_AUDIO_IN_PDMToPCM((uint16_t*) &pdm_buffer[PDM_BUFFER_SIZE / 2],
 80010ac:	491b      	ldr	r1, [pc, #108]	; (800111c <audio_record+0x110>)
 80010ae:	481f      	ldr	r0, [pc, #124]	; (800112c <audio_record+0x120>)
 80010b0:	f001 fc18 	bl	80028e4 <BSP_AUDIO_IN_PDMToPCM>

			/* Copy of PCM data into the final buffer. It copies PCM_OUT_SIZE * 2
			 * because they are uint16_t, which are 2 bytes long and memcpy
			 * expects a size in bytes.
			 */
			memcpy((uint16_t*) &pcm_buffer[pcm_offset * (PCM_OUT_SIZE)],
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <audio_record+0x114>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <audio_record+0x11c>)
 80010be:	4413      	add	r3, r2
 80010c0:	2220      	movs	r2, #32
 80010c2:	4916      	ldr	r1, [pc, #88]	; (800111c <audio_record+0x110>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00f fa0f 	bl	80104e8 <memcpy>
					pdmtopcm_buffer,
					PCM_OUT_SIZE * 2);

			dma_transfer_state = OFFSET_NONE;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <audio_record+0x104>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]

			/* if the buffer is full, audio acquisition is done */
			if (pcm_offset == (PCM_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <audio_record+0x114>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80010d8:	4293      	cmp	r3, r2
 80010da:	d106      	bne.n	80010ea <audio_record+0xde>
				data_ready = 1;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <audio_record+0x10c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
				pcm_offset = 0;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <audio_record+0x114>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e004      	b.n	80010f4 <audio_record+0xe8>
			} else {
				pcm_offset++;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <audio_record+0x114>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <audio_record+0x114>)
 80010f2:	6013      	str	r3, [r2, #0]
	while (data_ready != 1) {
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <audio_record+0x10c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d1a4      	bne.n	8001046 <audio_record+0x3a>
			}
		}
	}

	/* Stop audio record */
	if (BSP_AUDIO_IN_Stop() != AUDIO_OK) {
 80010fc:	f001 fbe0 	bl	80028c0 <BSP_AUDIO_IN_Stop>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <audio_record+0xfe>
		Error_Handler();
 8001106:	f000 ffff 	bl	8002108 <Error_Handler>
	}
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000132c 	.word	0x2000132c
 8001114:	200010f8 	.word	0x200010f8
 8001118:	200011fc 	.word	0x200011fc
 800111c:	200010d8 	.word	0x200010d8
 8001120:	200011f8 	.word	0x200011f8
 8001124:	10624dd3 	.word	0x10624dd3
 8001128:	20001330 	.word	0x20001330
 800112c:	20001178 	.word	0x20001178

08001130 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
 * @brief Manages the DMA Transfer complete interrupt
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	dma_transfer_state = OFFSET_FULL;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8001136:	2202      	movs	r2, #2
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	2000132c 	.word	0x2000132c

08001148 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
 * @brief  Manages the DMA Half Transfer complete interrupt
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	dma_transfer_state = OFFSET_HALF;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	2000132c 	.word	0x2000132c

08001160 <BSP_AUDIO_IN_Error_Callback>:
/**
 * @brief  Audio IN Error callback function
 * @param  pData
 * @retval None
 */
void BSP_AUDIO_IN_Error_Callback(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	Error_Handler();
 8001164:	f000 ffd0 	bl	8002108 <Error_Handler>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <argmax>:
 * @param  arr   output array of neural network predictions
 * @param  size  arr size. It must be positive and less than `DICTIONARY_SIZE`
 *
 * @retval idx:  arr maximum value index
 */
uint8_t argmax(const ai_float arr[], uint8_t size) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	assert(size > 0 && size <= DICTIONARY_SIZE);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <argmax+0x18>
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2b26      	cmp	r3, #38	; 0x26
 8001182:	d905      	bls.n	8001190 <argmax+0x24>
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <argmax+0x74>)
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <argmax+0x78>)
 8001188:	2154      	movs	r1, #84	; 0x54
 800118a:	4817      	ldr	r0, [pc, #92]	; (80011e8 <argmax+0x7c>)
 800118c:	f00f f94a 	bl	8010424 <__assert_func>
	uint8_t idx = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	75fb      	strb	r3, [r7, #23]
	ai_float max = arr[0];
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	613b      	str	r3, [r7, #16]
	ai_float tmp;

	for (uint8_t i = 1; i < size; i++) {
 800119a:	2301      	movs	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e015      	b.n	80011cc <argmax+0x60>
		tmp = arr[i];
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	60bb      	str	r3, [r7, #8]
		if (tmp > max) {
 80011ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	dd03      	ble.n	80011c6 <argmax+0x5a>
			max = tmp;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	613b      	str	r3, [r7, #16]
			idx = i;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 1; i < size; i++) {
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	3301      	adds	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3e5      	bcc.n	80011a0 <argmax+0x34>
		}
	}

	return idx;
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	08016e60 	.word	0x08016e60
 80011e4:	08017200 	.word	0x08017200
 80011e8:	08016e84 	.word	0x08016e84

080011ec <get_word>:
 *
 * @param  idx   word index. It must be less than `DICTIONARY_SIZE`
 *
 * @retval       the dictionary word corresponding to the input index
 */
char* get_word(uint8_t idx) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	assert(idx < DICTIONARY_SIZE);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b25      	cmp	r3, #37	; 0x25
 80011fa:	d905      	bls.n	8001208 <get_word+0x1c>
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <get_word+0x2c>)
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <get_word+0x30>)
 8001200:	216d      	movs	r1, #109	; 0x6d
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <get_word+0x34>)
 8001204:	f00f f90e 	bl	8010424 <__assert_func>
	return dictionary[idx];
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4a06      	ldr	r2, [pc, #24]	; (8001224 <get_word+0x38>)
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	08016e9c 	.word	0x08016e9c
 800121c:	08017208 	.word	0x08017208
 8001220:	08016e84 	.word	0x08016e84
 8001224:	20000400 	.word	0x20000400

08001228 <execution_time_init>:
 *
 * @param  None
 *
 * @retval None
 */
void execution_time_init(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	uint32_t i;

	if (ARM_CM_DWT_CTRL != 0) {
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <execution_time_init+0x50>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00e      	beq.n	8001254 <execution_time_init+0x2c>
		ARM_CM_DEMCR |= 1 << 24; /* enable DWT and set bit 24 */
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <execution_time_init+0x54>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <execution_time_init+0x54>)
 800123c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001240:	6013      	str	r3, [r2, #0]
		ARM_CM_DWT_CYCCNT = 0; /* clear DWT cycle counter   */
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <execution_time_init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
		ARM_CM_DWT_CTRL |= 1; /* enable DWT cycle counter  */
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <execution_time_init+0x50>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <execution_time_init+0x50>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6013      	str	r3, [r2, #0]
	}

	for (i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	e005      	b.n	8001266 <execution_time_init+0x3e>
		execution_time_clear(i);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f85e 	bl	800131c <execution_time_clear>
	for (i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3301      	adds	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d9f6      	bls.n	800125a <execution_time_init+0x32>
	}
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e0001000 	.word	0xe0001000
 800127c:	e000edfc 	.word	0xe000edfc
 8001280:	e0001004 	.word	0xe0001004

08001284 <execution_time_start>:
 * @param  i   number of the code block to measure. It must be less than
 * 			   `EXECUTION_TIME_MAX_SECTIONS`.
 *
 * @retval None
 */
void execution_time_start(uint32_t i) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if (i < EXECUTION_TIME_MAX_SECTIONS)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d806      	bhi.n	80012a0 <execution_time_start+0x1c>
		time_statistics_blocks[i].start = ARM_CM_DWT_CYCCNT;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <execution_time_start+0x28>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4906      	ldr	r1, [pc, #24]	; (80012b0 <execution_time_start+0x2c>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	440b      	add	r3, r1
 800129e:	601a      	str	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e0001004 	.word	0xe0001004
 80012b0:	20009310 	.word	0x20009310

080012b4 <execution_time_stop>:
 * @param  i   number of the code block to measure. It must be less than
 * 			   `EXECUTION_TIME_MAX_SECTIONS`.
 *
 * @retval None
 */
void execution_time_stop(uint32_t i) {
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	if (i < EXECUTION_TIME_MAX_SECTIONS) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d821      	bhi.n	8001306 <execution_time_stop+0x52>
		uint32_t stop;
		Time_Statistics *p_tbl;

		stop = ARM_CM_DWT_CYCCNT;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <execution_time_stop+0x60>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60fb      	str	r3, [r7, #12]
		p_tbl = &time_statistics_blocks[i];
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <execution_time_stop+0x64>)
 80012ce:	4413      	add	r3, r2
 80012d0:	60bb      	str	r3, [r7, #8]
		p_tbl->elapsed = stop - p_tbl->start;
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	1ad2      	subs	r2, r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	605a      	str	r2, [r3, #4]
		if (p_tbl->max < p_tbl->elapsed) {
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d203      	bcs.n	80012f2 <execution_time_stop+0x3e>
			p_tbl->max = p_tbl->elapsed;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	609a      	str	r2, [r3, #8]
		}
		if (p_tbl->min > p_tbl->elapsed) {
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d903      	bls.n	8001306 <execution_time_stop+0x52>
			p_tbl->min = p_tbl->elapsed;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	60da      	str	r2, [r3, #12]
		}
	}
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e0001004 	.word	0xe0001004
 8001318:	20009310 	.word	0x20009310

0800131c <execution_time_clear>:
 * @param  i   number of the code block to measure. It must be less than
 * 			   `EXECUTION_TIME_MAX_SECTIONS`.
 *
 * @retval None
 */
void execution_time_clear(uint32_t i) {
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (i < EXECUTION_TIME_MAX_SECTIONS) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d811      	bhi.n	800134e <execution_time_clear+0x32>
		Time_Statistics *p_tbl;

		p_tbl = &time_statistics_blocks[i];
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <execution_time_clear+0x40>)
 8001330:	4413      	add	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
		p_tbl->start = 0;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
		p_tbl->elapsed = 0;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
		p_tbl->min = 0xFFFFFFFF;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001346:	60da      	str	r2, [r3, #12]
		p_tbl->max = 0;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
	}
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20009310 	.word	0x20009310

08001360 <preprocess_audio>:
 * @param  signal_len      length of the input signal
 *
 * @retval None
 */
void preprocess_audio(int16_t *input_signal, float32_t *out_mfcc,
		uint32_t signal_len) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]

	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e02a      	b.n	80013c8 <preprocess_audio+0x68>

		/* Convert 16-bit PCM into normalized floating point values */
		buf_to_float_normed(&input_signal[HOP_LEN * frame_index], frame_buffer,
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	029b      	lsls	r3, r3, #10
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137e:	4917      	ldr	r1, [pc, #92]	; (80013dc <preprocess_audio+0x7c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f008 fae7 	bl	8009954 <buf_to_float_normed>
		FRAME_LEN);

		MfccColumn(&mfcc, frame_buffer, mfcc_col_buffer);
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <preprocess_audio+0x80>)
 8001388:	4914      	ldr	r1, [pc, #80]	; (80013dc <preprocess_audio+0x7c>)
 800138a:	4816      	ldr	r0, [pc, #88]	; (80013e4 <preprocess_audio+0x84>)
 800138c:	f008 fc63 	bl	8009c56 <MfccColumn>

		/* Reshape column into `out_mfcc` */
		for (uint32_t i = 0; i < NUM_MFCC; i++) {
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	e012      	b.n	80013bc <preprocess_audio+0x5c>
			out_mfcc[i * num_frames + frame_index] = mfcc_col_buffer[i];
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <preprocess_audio+0x88>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	fb02 f203 	mul.w	r2, r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	490d      	ldr	r1, [pc, #52]	; (80013e0 <preprocess_audio+0x80>)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	440a      	add	r2, r1
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < NUM_MFCC; i++) {
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	3301      	adds	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d9e9      	bls.n	8001396 <preprocess_audio+0x36>
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <preprocess_audio+0x88>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3cf      	bcc.n	8001372 <preprocess_audio+0x12>
		}
	}
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200118d8 	.word	0x200118d8
 80013e0:	20009560 	.word	0x20009560
 80013e4:	200095a0 	.word	0x200095a0
 80013e8:	20000498 	.word	0x20000498

080013ec <recognize_commands>:
 *
 * @param  word*   a constant string to be recognized
 *
 * @retval None
 */
void recognize_commands(const char *word) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	/* Turn on green led and turn off the others */
	if (strcmp(word, ONE) == 0) {
 80013f4:	49a7      	ldr	r1, [pc, #668]	; (8001694 <recognize_commands+0x2a8>)
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7fe feea 	bl	80001d0 <strcmp>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d12a      	bne.n	8001458 <recognize_commands+0x6c>
		if (led_status != Green) {
 8001402:	4ba5      	ldr	r3, [pc, #660]	; (8001698 <recognize_commands+0x2ac>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	f000 820c 	beq.w	8001824 <recognize_commands+0x438>
			if (led_status == Blue) {
 800140c:	4ba2      	ldr	r3, [pc, #648]	; (8001698 <recognize_commands+0x2ac>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d105      	bne.n	8001420 <recognize_commands+0x34>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001418:	48a0      	ldr	r0, [pc, #640]	; (800169c <recognize_commands+0x2b0>)
 800141a:	f005 fb22 	bl	8006a62 <HAL_GPIO_TogglePin>
 800141e:	e012      	b.n	8001446 <recognize_commands+0x5a>
			} else if (led_status == Red) {
 8001420:	4b9d      	ldr	r3, [pc, #628]	; (8001698 <recognize_commands+0x2ac>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d105      	bne.n	8001434 <recognize_commands+0x48>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142c:	489b      	ldr	r0, [pc, #620]	; (800169c <recognize_commands+0x2b0>)
 800142e:	f005 fb18 	bl	8006a62 <HAL_GPIO_TogglePin>
 8001432:	e008      	b.n	8001446 <recognize_commands+0x5a>
			} else if (led_status == Orange) {
 8001434:	4b98      	ldr	r3, [pc, #608]	; (8001698 <recognize_commands+0x2ac>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d104      	bne.n	8001446 <recognize_commands+0x5a>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4896      	ldr	r0, [pc, #600]	; (800169c <recognize_commands+0x2b0>)
 8001442:	f005 fb0e 	bl	8006a62 <HAL_GPIO_TogglePin>
			}
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	4894      	ldr	r0, [pc, #592]	; (800169c <recognize_commands+0x2b0>)
 800144c:	f005 fb09 	bl	8006a62 <HAL_GPIO_TogglePin>
			led_status = Green;
 8001450:	4b91      	ldr	r3, [pc, #580]	; (8001698 <recognize_commands+0x2ac>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
				execution_time_clear(i);
			}
		}
	}
}
 8001456:	e1e5      	b.n	8001824 <recognize_commands+0x438>
	} else if (strcmp(word, TWO) == 0) {
 8001458:	4991      	ldr	r1, [pc, #580]	; (80016a0 <recognize_commands+0x2b4>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7fe feb8 	bl	80001d0 <strcmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d12a      	bne.n	80014bc <recognize_commands+0xd0>
		if (led_status != Blue) {
 8001466:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <recognize_commands+0x2ac>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b02      	cmp	r3, #2
 800146c:	f000 81da 	beq.w	8001824 <recognize_commands+0x438>
			if (led_status == Green) {
 8001470:	4b89      	ldr	r3, [pc, #548]	; (8001698 <recognize_commands+0x2ac>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <recognize_commands+0x98>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147c:	4887      	ldr	r0, [pc, #540]	; (800169c <recognize_commands+0x2b0>)
 800147e:	f005 faf0 	bl	8006a62 <HAL_GPIO_TogglePin>
 8001482:	e012      	b.n	80014aa <recognize_commands+0xbe>
			} else if (led_status == Red) {
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <recognize_commands+0x2ac>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d105      	bne.n	8001498 <recognize_commands+0xac>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800148c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001490:	4882      	ldr	r0, [pc, #520]	; (800169c <recognize_commands+0x2b0>)
 8001492:	f005 fae6 	bl	8006a62 <HAL_GPIO_TogglePin>
 8001496:	e008      	b.n	80014aa <recognize_commands+0xbe>
			} else if (led_status == Orange) {
 8001498:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <recognize_commands+0x2ac>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d104      	bne.n	80014aa <recognize_commands+0xbe>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80014a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a4:	487d      	ldr	r0, [pc, #500]	; (800169c <recognize_commands+0x2b0>)
 80014a6:	f005 fadc 	bl	8006a62 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80014aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ae:	487b      	ldr	r0, [pc, #492]	; (800169c <recognize_commands+0x2b0>)
 80014b0:	f005 fad7 	bl	8006a62 <HAL_GPIO_TogglePin>
			led_status = Blue;
 80014b4:	4b78      	ldr	r3, [pc, #480]	; (8001698 <recognize_commands+0x2ac>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	701a      	strb	r2, [r3, #0]
}
 80014ba:	e1b3      	b.n	8001824 <recognize_commands+0x438>
	} else if (strcmp(word, THREE) == 0) {
 80014bc:	4979      	ldr	r1, [pc, #484]	; (80016a4 <recognize_commands+0x2b8>)
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7fe fe86 	bl	80001d0 <strcmp>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d12a      	bne.n	8001520 <recognize_commands+0x134>
		if (led_status != Red) {
 80014ca:	4b73      	ldr	r3, [pc, #460]	; (8001698 <recognize_commands+0x2ac>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	f000 81a8 	beq.w	8001824 <recognize_commands+0x438>
			if (led_status == Green) {
 80014d4:	4b70      	ldr	r3, [pc, #448]	; (8001698 <recognize_commands+0x2ac>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <recognize_commands+0xfc>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80014dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e0:	486e      	ldr	r0, [pc, #440]	; (800169c <recognize_commands+0x2b0>)
 80014e2:	f005 fabe 	bl	8006a62 <HAL_GPIO_TogglePin>
 80014e6:	e012      	b.n	800150e <recognize_commands+0x122>
			} else if (led_status == Blue) {
 80014e8:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <recognize_commands+0x2ac>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d105      	bne.n	80014fc <recognize_commands+0x110>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80014f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f4:	4869      	ldr	r0, [pc, #420]	; (800169c <recognize_commands+0x2b0>)
 80014f6:	f005 fab4 	bl	8006a62 <HAL_GPIO_TogglePin>
 80014fa:	e008      	b.n	800150e <recognize_commands+0x122>
			} else if (led_status == Orange) {
 80014fc:	4b66      	ldr	r3, [pc, #408]	; (8001698 <recognize_commands+0x2ac>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d104      	bne.n	800150e <recognize_commands+0x122>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001508:	4864      	ldr	r0, [pc, #400]	; (800169c <recognize_commands+0x2b0>)
 800150a:	f005 faaa 	bl	8006a62 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800150e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001512:	4862      	ldr	r0, [pc, #392]	; (800169c <recognize_commands+0x2b0>)
 8001514:	f005 faa5 	bl	8006a62 <HAL_GPIO_TogglePin>
			led_status = Red;
 8001518:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <recognize_commands+0x2ac>)
 800151a:	2203      	movs	r2, #3
 800151c:	701a      	strb	r2, [r3, #0]
}
 800151e:	e181      	b.n	8001824 <recognize_commands+0x438>
	} else if (strcmp(word, FOUR) == 0) {
 8001520:	4961      	ldr	r1, [pc, #388]	; (80016a8 <recognize_commands+0x2bc>)
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7fe fe54 	bl	80001d0 <strcmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d12a      	bne.n	8001584 <recognize_commands+0x198>
		if (led_status != Orange) {
 800152e:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <recognize_commands+0x2ac>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b04      	cmp	r3, #4
 8001534:	f000 8176 	beq.w	8001824 <recognize_commands+0x438>
			if (led_status == Green) {
 8001538:	4b57      	ldr	r3, [pc, #348]	; (8001698 <recognize_commands+0x2ac>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <recognize_commands+0x160>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001544:	4855      	ldr	r0, [pc, #340]	; (800169c <recognize_commands+0x2b0>)
 8001546:	f005 fa8c 	bl	8006a62 <HAL_GPIO_TogglePin>
 800154a:	e012      	b.n	8001572 <recognize_commands+0x186>
			} else if (led_status == Blue) {
 800154c:	4b52      	ldr	r3, [pc, #328]	; (8001698 <recognize_commands+0x2ac>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d105      	bne.n	8001560 <recognize_commands+0x174>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001558:	4850      	ldr	r0, [pc, #320]	; (800169c <recognize_commands+0x2b0>)
 800155a:	f005 fa82 	bl	8006a62 <HAL_GPIO_TogglePin>
 800155e:	e008      	b.n	8001572 <recognize_commands+0x186>
			} else if (led_status == Red) {
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <recognize_commands+0x2ac>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d104      	bne.n	8001572 <recognize_commands+0x186>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156c:	484b      	ldr	r0, [pc, #300]	; (800169c <recognize_commands+0x2b0>)
 800156e:	f005 fa78 	bl	8006a62 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001576:	4849      	ldr	r0, [pc, #292]	; (800169c <recognize_commands+0x2b0>)
 8001578:	f005 fa73 	bl	8006a62 <HAL_GPIO_TogglePin>
			led_status = Orange;
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <recognize_commands+0x2ac>)
 800157e:	2204      	movs	r2, #4
 8001580:	701a      	strb	r2, [r3, #0]
}
 8001582:	e14f      	b.n	8001824 <recognize_commands+0x438>
		if (led_status == Green) {
 8001584:	4b44      	ldr	r3, [pc, #272]	; (8001698 <recognize_commands+0x2ac>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <recognize_commands+0x1ac>
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	4842      	ldr	r0, [pc, #264]	; (800169c <recognize_commands+0x2b0>)
 8001592:	f005 fa66 	bl	8006a62 <HAL_GPIO_TogglePin>
 8001596:	e01c      	b.n	80015d2 <recognize_commands+0x1e6>
		} else if (led_status == Blue) {
 8001598:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <recognize_commands+0x2ac>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d105      	bne.n	80015ac <recognize_commands+0x1c0>
			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80015a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a4:	483d      	ldr	r0, [pc, #244]	; (800169c <recognize_commands+0x2b0>)
 80015a6:	f005 fa5c 	bl	8006a62 <HAL_GPIO_TogglePin>
 80015aa:	e012      	b.n	80015d2 <recognize_commands+0x1e6>
		} else if (led_status == Red) {
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <recognize_commands+0x2ac>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d105      	bne.n	80015c0 <recognize_commands+0x1d4>
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80015b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b8:	4838      	ldr	r0, [pc, #224]	; (800169c <recognize_commands+0x2b0>)
 80015ba:	f005 fa52 	bl	8006a62 <HAL_GPIO_TogglePin>
 80015be:	e008      	b.n	80015d2 <recognize_commands+0x1e6>
		} else if (led_status == Orange) {
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <recognize_commands+0x2ac>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d104      	bne.n	80015d2 <recognize_commands+0x1e6>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80015c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015cc:	4833      	ldr	r0, [pc, #204]	; (800169c <recognize_commands+0x2b0>)
 80015ce:	f005 fa48 	bl	8006a62 <HAL_GPIO_TogglePin>
		led_status = Off;
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <recognize_commands+0x2ac>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
		if (strcmp(word, ON) == 0) {
 80015d8:	4934      	ldr	r1, [pc, #208]	; (80016ac <recognize_commands+0x2c0>)
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7fe fdf8 	bl	80001d0 <strcmp>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d129      	bne.n	800163a <recognize_commands+0x24e>
			print_words = 0;
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <recognize_commands+0x2c4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
			if (!display_words_enabled) {
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <recognize_commands+0x2c8>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10f      	bne.n	8001614 <recognize_commands+0x228>
				usart_buffer_length = sprintf(usart_buffer,
 80015f4:	4930      	ldr	r1, [pc, #192]	; (80016b8 <recognize_commands+0x2cc>)
 80015f6:	4831      	ldr	r0, [pc, #196]	; (80016bc <recognize_commands+0x2d0>)
 80015f8:	f010 f820 	bl	801163c <siprintf>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a30      	ldr	r2, [pc, #192]	; (80016c0 <recognize_commands+0x2d4>)
 8001600:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <recognize_commands+0x2d4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29a      	uxth	r2, r3
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	492c      	ldr	r1, [pc, #176]	; (80016bc <recognize_commands+0x2d0>)
 800160c:	482d      	ldr	r0, [pc, #180]	; (80016c4 <recognize_commands+0x2d8>)
 800160e:	f007 fa6c 	bl	8008aea <HAL_UART_Transmit>
 8001612:	e00e      	b.n	8001632 <recognize_commands+0x246>
				usart_buffer_length = sprintf(usart_buffer,
 8001614:	492c      	ldr	r1, [pc, #176]	; (80016c8 <recognize_commands+0x2dc>)
 8001616:	4829      	ldr	r0, [pc, #164]	; (80016bc <recognize_commands+0x2d0>)
 8001618:	f010 f810 	bl	801163c <siprintf>
 800161c:	4603      	mov	r3, r0
 800161e:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <recognize_commands+0x2d4>)
 8001620:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <recognize_commands+0x2d4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29a      	uxth	r2, r3
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	4924      	ldr	r1, [pc, #144]	; (80016bc <recognize_commands+0x2d0>)
 800162c:	4825      	ldr	r0, [pc, #148]	; (80016c4 <recognize_commands+0x2d8>)
 800162e:	f007 fa5c 	bl	8008aea <HAL_UART_Transmit>
			display_words_enabled = 1;
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <recognize_commands+0x2c8>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
}
 8001638:	e0f4      	b.n	8001824 <recognize_commands+0x438>
		} else if (strcmp(word, OFF) == 0) {
 800163a:	4924      	ldr	r1, [pc, #144]	; (80016cc <recognize_commands+0x2e0>)
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7fe fdc7 	bl	80001d0 <strcmp>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d117      	bne.n	8001678 <recognize_commands+0x28c>
			if (display_words_enabled) {
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <recognize_commands+0x2c8>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80e9 	beq.w	8001824 <recognize_commands+0x438>
				display_words_enabled = 0;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <recognize_commands+0x2c8>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
				usart_buffer_length = sprintf(usart_buffer,
 8001658:	491d      	ldr	r1, [pc, #116]	; (80016d0 <recognize_commands+0x2e4>)
 800165a:	4818      	ldr	r0, [pc, #96]	; (80016bc <recognize_commands+0x2d0>)
 800165c:	f00f ffee 	bl	801163c <siprintf>
 8001660:	4603      	mov	r3, r0
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <recognize_commands+0x2d4>)
 8001664:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <recognize_commands+0x2d4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29a      	uxth	r2, r3
 800166c:	2364      	movs	r3, #100	; 0x64
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <recognize_commands+0x2d0>)
 8001670:	4814      	ldr	r0, [pc, #80]	; (80016c4 <recognize_commands+0x2d8>)
 8001672:	f007 fa3a 	bl	8008aea <HAL_UART_Transmit>
}
 8001676:	e0d5      	b.n	8001824 <recognize_commands+0x438>
		} else if (strcmp(word, VISUAL) == 0) {
 8001678:	4916      	ldr	r1, [pc, #88]	; (80016d4 <recognize_commands+0x2e8>)
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe fda8 	bl	80001d0 <strcmp>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80a8 	bne.w	80017d8 <recognize_commands+0x3ec>
			print_words = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <recognize_commands+0x2c4>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	e09d      	b.n	80017d0 <recognize_commands+0x3e4>
 8001694:	080171a8 	.word	0x080171a8
 8001698:	20001205 	.word	0x20001205
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	080171e0 	.word	0x080171e0
 80016a4:	080171d0 	.word	0x080171d0
 80016a8:	08017160 	.word	0x08017160
 80016ac:	080171a4 	.word	0x080171a4
 80016b0:	2000049c 	.word	0x2000049c
 80016b4:	20001204 	.word	0x20001204
 80016b8:	08016eb4 	.word	0x08016eb4
 80016bc:	2000b86c 	.word	0x2000b86c
 80016c0:	20001200 	.word	0x20001200
 80016c4:	200138d8 	.word	0x200138d8
 80016c8:	08016ed8 	.word	0x08016ed8
 80016cc:	080171a0 	.word	0x080171a0
 80016d0:	08016efc 	.word	0x08016efc
 80016d4:	080171e8 	.word	0x080171e8
				switch (i) {
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d82a      	bhi.n	8001734 <recognize_commands+0x348>
 80016de:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <recognize_commands+0x2f8>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	080016f5 	.word	0x080016f5
 80016e8:	08001705 	.word	0x08001705
 80016ec:	08001715 	.word	0x08001715
 80016f0:	08001725 	.word	0x08001725
					usart_buffer_length = sprintf(usart_buffer,
 80016f4:	494d      	ldr	r1, [pc, #308]	; (800182c <recognize_commands+0x440>)
 80016f6:	484e      	ldr	r0, [pc, #312]	; (8001830 <recognize_commands+0x444>)
 80016f8:	f00f ffa0 	bl	801163c <siprintf>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a4d      	ldr	r2, [pc, #308]	; (8001834 <recognize_commands+0x448>)
 8001700:	6013      	str	r3, [r2, #0]
					break;
 8001702:	e018      	b.n	8001736 <recognize_commands+0x34a>
					usart_buffer_length = sprintf(usart_buffer,
 8001704:	494c      	ldr	r1, [pc, #304]	; (8001838 <recognize_commands+0x44c>)
 8001706:	484a      	ldr	r0, [pc, #296]	; (8001830 <recognize_commands+0x444>)
 8001708:	f00f ff98 	bl	801163c <siprintf>
 800170c:	4603      	mov	r3, r0
 800170e:	4a49      	ldr	r2, [pc, #292]	; (8001834 <recognize_commands+0x448>)
 8001710:	6013      	str	r3, [r2, #0]
					break;
 8001712:	e010      	b.n	8001736 <recognize_commands+0x34a>
					usart_buffer_length = sprintf(usart_buffer,
 8001714:	4949      	ldr	r1, [pc, #292]	; (800183c <recognize_commands+0x450>)
 8001716:	4846      	ldr	r0, [pc, #280]	; (8001830 <recognize_commands+0x444>)
 8001718:	f00f ff90 	bl	801163c <siprintf>
 800171c:	4603      	mov	r3, r0
 800171e:	4a45      	ldr	r2, [pc, #276]	; (8001834 <recognize_commands+0x448>)
 8001720:	6013      	str	r3, [r2, #0]
					break;
 8001722:	e008      	b.n	8001736 <recognize_commands+0x34a>
							sprintf(usart_buffer,
 8001724:	4946      	ldr	r1, [pc, #280]	; (8001840 <recognize_commands+0x454>)
 8001726:	4842      	ldr	r0, [pc, #264]	; (8001830 <recognize_commands+0x444>)
 8001728:	f00f ff88 	bl	801163c <siprintf>
 800172c:	4603      	mov	r3, r0
					usart_buffer_length =
 800172e:	4a41      	ldr	r2, [pc, #260]	; (8001834 <recognize_commands+0x448>)
 8001730:	6013      	str	r3, [r2, #0]
					break;
 8001732:	e000      	b.n	8001736 <recognize_commands+0x34a>
					break;
 8001734:	bf00      	nop
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <recognize_commands+0x448>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29a      	uxth	r2, r3
 800173c:	2364      	movs	r3, #100	; 0x64
 800173e:	493c      	ldr	r1, [pc, #240]	; (8001830 <recognize_commands+0x444>)
 8001740:	4840      	ldr	r0, [pc, #256]	; (8001844 <recognize_commands+0x458>)
 8001742:	f007 f9d2 	bl	8008aea <HAL_UART_Transmit>
				usart_buffer_length = sprintf(usart_buffer, "\telapsed=%lu\r\n",
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	4a3f      	ldr	r2, [pc, #252]	; (8001848 <recognize_commands+0x45c>)
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	3304      	adds	r3, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	493d      	ldr	r1, [pc, #244]	; (800184c <recognize_commands+0x460>)
 8001756:	4836      	ldr	r0, [pc, #216]	; (8001830 <recognize_commands+0x444>)
 8001758:	f00f ff70 	bl	801163c <siprintf>
 800175c:	4603      	mov	r3, r0
 800175e:	4a35      	ldr	r2, [pc, #212]	; (8001834 <recognize_commands+0x448>)
 8001760:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001762:	4b34      	ldr	r3, [pc, #208]	; (8001834 <recognize_commands+0x448>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b29a      	uxth	r2, r3
 8001768:	2364      	movs	r3, #100	; 0x64
 800176a:	4931      	ldr	r1, [pc, #196]	; (8001830 <recognize_commands+0x444>)
 800176c:	4835      	ldr	r0, [pc, #212]	; (8001844 <recognize_commands+0x458>)
 800176e:	f007 f9bc 	bl	8008aea <HAL_UART_Transmit>
				usart_buffer_length = sprintf(usart_buffer, "\tmax=%lu\r\n",
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	4a34      	ldr	r2, [pc, #208]	; (8001848 <recognize_commands+0x45c>)
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	4413      	add	r3, r2
 800177a:	3308      	adds	r3, #8
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4933      	ldr	r1, [pc, #204]	; (8001850 <recognize_commands+0x464>)
 8001782:	482b      	ldr	r0, [pc, #172]	; (8001830 <recognize_commands+0x444>)
 8001784:	f00f ff5a 	bl	801163c <siprintf>
 8001788:	4603      	mov	r3, r0
 800178a:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <recognize_commands+0x448>)
 800178c:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <recognize_commands+0x448>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29a      	uxth	r2, r3
 8001794:	2364      	movs	r3, #100	; 0x64
 8001796:	4926      	ldr	r1, [pc, #152]	; (8001830 <recognize_commands+0x444>)
 8001798:	482a      	ldr	r0, [pc, #168]	; (8001844 <recognize_commands+0x458>)
 800179a:	f007 f9a6 	bl	8008aea <HAL_UART_Transmit>
				usart_buffer_length = sprintf(usart_buffer, "\tmin=%lu\r\n",
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	4a29      	ldr	r2, [pc, #164]	; (8001848 <recognize_commands+0x45c>)
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	330c      	adds	r3, #12
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4929      	ldr	r1, [pc, #164]	; (8001854 <recognize_commands+0x468>)
 80017ae:	4820      	ldr	r0, [pc, #128]	; (8001830 <recognize_commands+0x444>)
 80017b0:	f00f ff44 	bl	801163c <siprintf>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a1f      	ldr	r2, [pc, #124]	; (8001834 <recognize_commands+0x448>)
 80017b8:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <recognize_commands+0x448>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	2364      	movs	r3, #100	; 0x64
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <recognize_commands+0x444>)
 80017c4:	481f      	ldr	r0, [pc, #124]	; (8001844 <recognize_commands+0x458>)
 80017c6:	f007 f990 	bl	8008aea <HAL_UART_Transmit>
			for (uint8_t i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	3301      	adds	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d980      	bls.n	80016d8 <recognize_commands+0x2ec>
}
 80017d6:	e025      	b.n	8001824 <recognize_commands+0x438>
		} else if (strcmp(word, STOP) == 0) {
 80017d8:	491f      	ldr	r1, [pc, #124]	; (8001858 <recognize_commands+0x46c>)
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fcf8 	bl	80001d0 <strcmp>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11e      	bne.n	8001824 <recognize_commands+0x438>
			print_words = 0;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <recognize_commands+0x470>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
			usart_buffer_length = sprintf(usart_buffer,
 80017ec:	491c      	ldr	r1, [pc, #112]	; (8001860 <recognize_commands+0x474>)
 80017ee:	4810      	ldr	r0, [pc, #64]	; (8001830 <recognize_commands+0x444>)
 80017f0:	f00f ff24 	bl	801163c <siprintf>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <recognize_commands+0x448>)
 80017f8:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <recognize_commands+0x448>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	490b      	ldr	r1, [pc, #44]	; (8001830 <recognize_commands+0x444>)
 8001804:	480f      	ldr	r0, [pc, #60]	; (8001844 <recognize_commands+0x458>)
 8001806:	f007 f970 	bl	8008aea <HAL_UART_Transmit>
			for (uint8_t i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 800180a:	2300      	movs	r3, #0
 800180c:	73bb      	strb	r3, [r7, #14]
 800180e:	e006      	b.n	800181e <recognize_commands+0x432>
				execution_time_clear(i);
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fd82 	bl	800131c <execution_time_clear>
			for (uint8_t i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	3301      	adds	r3, #1
 800181c:	73bb      	strb	r3, [r7, #14]
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d9f5      	bls.n	8001810 <recognize_commands+0x424>
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	08016f2c 	.word	0x08016f2c
 8001830:	2000b86c 	.word	0x2000b86c
 8001834:	20001200 	.word	0x20001200
 8001838:	08016f50 	.word	0x08016f50
 800183c:	08016f74 	.word	0x08016f74
 8001840:	08016f90 	.word	0x08016f90
 8001844:	200138d8 	.word	0x200138d8
 8001848:	20009310 	.word	0x20009310
 800184c:	08016fc0 	.word	0x08016fc0
 8001850:	08016fd0 	.word	0x08016fd0
 8001854:	08016fdc 	.word	0x08016fdc
 8001858:	080171c8 	.word	0x080171c8
 800185c:	2000049c 	.word	0x2000049c
 8001860:	08016fe8 	.word	0x08016fe8

08001864 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	f5ad 4da7 	sub.w	sp, sp, #21376	; 0x5380
 800186a:	b09e      	sub	sp, #120	; 0x78
 800186c:	af00      	add	r7, sp, #0
	/* Buffers used to store input and output tensors */
	AI_ALIGNED(4) ai_float in_data[AI_SPEECH_COMMANDS_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_float out_data[AI_SPEECH_COMMANDS_MODEL_OUT_1_SIZE_BYTES];

	/* Pointer to the neural network model */
	ai_handle speech_commands_model = AI_HANDLE_NULL;
 800186e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001872:	3b14      	subs	r3, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

	/* Initialize wrapper structs that hold info about the data (tensor height, width, channels) */
	ai_buffer ai_input[AI_SPEECH_COMMANDS_MODEL_IN_NUM] =
 8001878:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800187c:	3b2c      	subs	r3, #44	; 0x2c
 800187e:	4abb      	ldr	r2, [pc, #748]	; (8001b6c <main+0x308>)
 8001880:	461c      	mov	r4, r3
 8001882:	4615      	mov	r5, r2
 8001884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001888:	e895 0003 	ldmia.w	r5, {r0, r1}
 800188c:	e884 0003 	stmia.w	r4, {r0, r1}
	AI_SPEECH_COMMANDS_MODEL_IN;
	ai_buffer ai_output[AI_SPEECH_COMMANDS_MODEL_OUT_NUM] =
 8001890:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001894:	3b44      	subs	r3, #68	; 0x44
 8001896:	4ab6      	ldr	r2, [pc, #728]	; (8001b70 <main+0x30c>)
 8001898:	461c      	mov	r4, r3
 800189a:	4615      	mov	r5, r2
 800189c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018a4:	e884 0003 	stmia.w	r4, {r0, r1}
	AI_SPEECH_COMMANDS_MODEL_OUT;

	/* Allocate memory and get weights from the neural network model */
	ai_network_params ai_params =
 80018a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018ac:	3b74      	subs	r3, #116	; 0x74
 80018ae:	4ab1      	ldr	r2, [pc, #708]	; (8001b74 <main+0x310>)
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018b6:	3b74      	subs	r3, #116	; 0x74
 80018b8:	2201      	movs	r2, #1
 80018ba:	809a      	strh	r2, [r3, #4]
 80018bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018c0:	3b74      	subs	r3, #116	; 0x74
 80018c2:	2201      	movs	r2, #1
 80018c4:	80da      	strh	r2, [r3, #6]
 80018c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018ca:	3b74      	subs	r3, #116	; 0x74
 80018cc:	2201      	movs	r2, #1
 80018ce:	811a      	strh	r2, [r3, #8]
 80018d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018d4:	3b74      	subs	r3, #116	; 0x74
 80018d6:	4aa8      	ldr	r2, [pc, #672]	; (8001b78 <main+0x314>)
 80018d8:	60da      	str	r2, [r3, #12]
					AI_NETWORK_PARAMS_INIT(
 80018da:	f008 ff7b 	bl	800a7d4 <ai_speech_commands_model_data_weights_get>
 80018de:	4602      	mov	r2, r0
	ai_network_params ai_params =
 80018e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018e4:	3b74      	subs	r3, #116	; 0x74
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018ec:	3b74      	subs	r3, #116	; 0x74
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018f6:	3b74      	subs	r3, #116	; 0x74
 80018f8:	4aa0      	ldr	r2, [pc, #640]	; (8001b7c <main+0x318>)
 80018fa:	619a      	str	r2, [r3, #24]
 80018fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001900:	3b74      	subs	r3, #116	; 0x74
 8001902:	2201      	movs	r2, #1
 8001904:	839a      	strh	r2, [r3, #28]
 8001906:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800190a:	3b74      	subs	r3, #116	; 0x74
 800190c:	2201      	movs	r2, #1
 800190e:	83da      	strh	r2, [r3, #30]
 8001910:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001914:	3b74      	subs	r3, #116	; 0x74
 8001916:	2201      	movs	r2, #1
 8001918:	841a      	strh	r2, [r3, #32]
 800191a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800191e:	3b74      	subs	r3, #116	; 0x74
 8001920:	f243 5220 	movw	r2, #13600	; 0x3520
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
 8001926:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800192a:	3b74      	subs	r3, #116	; 0x74
 800192c:	f507 52f7 	add.w	r2, r7, #7904	; 0x1ee0
 8001930:	f102 0218 	add.w	r2, r2, #24
 8001934:	3a30      	subs	r2, #48	; 0x30
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
 8001938:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800193c:	3b74      	subs	r3, #116	; 0x74
 800193e:	2200      	movs	r2, #0
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
							AI_SPEECH_COMMANDS_MODEL_DATA_WEIGHTS(ai_speech_commands_model_data_weights_get()),
							AI_SPEECH_COMMANDS_MODEL_DATA_ACTIVATIONS(activations)
					);

	/* Set wrapper structs pointers to the data buffers */
	ai_input[0].n_batches = 1;
 8001942:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001946:	3b2c      	subs	r3, #44	; 0x2c
 8001948:	2201      	movs	r2, #1
 800194a:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800194c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001950:	3b2c      	subs	r3, #44	; 0x2c
 8001952:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8001956:	3a30      	subs	r2, #48	; 0x30
 8001958:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 800195a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800195e:	3b44      	subs	r3, #68	; 0x44
 8001960:	2201      	movs	r2, #1
 8001962:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001964:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001968:	3b44      	subs	r3, #68	; 0x44
 800196a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800196e:	3a10      	subs	r2, #16
 8001970:	611a      	str	r2, [r3, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001972:	f003 ffc7 	bl	8005904 <HAL_Init>

	/* USER CODE BEGIN Init */

	/* Initialize LEDs */
	BSP_LED_Init(LED3);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 fe70 	bl	800265c <BSP_LED_Init>
	BSP_LED_Init(LED4);
 800197c:	2000      	movs	r0, #0
 800197e:	f000 fe6d 	bl	800265c <BSP_LED_Init>
	BSP_LED_Init(LED5);
 8001982:	2002      	movs	r0, #2
 8001984:	f000 fe6a 	bl	800265c <BSP_LED_Init>
	BSP_LED_Init(LED6);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 fe67 	bl	800265c <BSP_LED_Init>

	preprocessing_init();
 800198e:	f000 fae9 	bl	8001f64 <preprocessing_init>

	execution_time_init();
 8001992:	f7ff fc49 	bl	8001228 <execution_time_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001996:	f000 f907 	bl	8001ba8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	/* Initialize button */
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800199a:	2101      	movs	r1, #1
 800199c:	2000      	movs	r0, #0
 800199e:	f000 fed5 	bl	800274c <BSP_PB_Init>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019a2:	f000 fa67 	bl	8001e74 <MX_GPIO_Init>
	MX_DMA_Init();
 80019a6:	f000 fa45 	bl	8001e34 <MX_DMA_Init>
	MX_I2S2_Init();
 80019aa:	f000 f9b5 	bl	8001d18 <MX_I2S2_Init>
	MX_CRC_Init();
 80019ae:	f000 f969 	bl	8001c84 <MX_CRC_Init>
	MX_PDM2PCM_Init();
 80019b2:	f008 fd29 	bl	800a408 <MX_PDM2PCM_Init>
	MX_USART2_UART_Init();
 80019b6:	f000 fa13 	bl	8001de0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80019ba:	f000 f97f 	bl	8001cbc <MX_I2C1_Init>
	MX_SPI1_Init();
 80019be:	f000 f9d9 	bl	8001d74 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* Create an instance of the neural network */
	ai_err = ai_speech_commands_model_create(&speech_commands_model,
 80019c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019c6:	3b14      	subs	r3, #20
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f008 fea0 	bl	800a710 <ai_speech_commands_model_create>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 80019d6:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80019da:	6013      	str	r3, [r2, #0]
	AI_SPEECH_COMMANDS_MODEL_DATA_CONFIG);
	if (ai_err.type != AI_ERROR_NONE) {
 80019dc:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80019e0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00f      	beq.n	8001a0a <main+0x1a6>
		usart_buffer_length = sprintf(usart_buffer,
 80019ea:	4965      	ldr	r1, [pc, #404]	; (8001b80 <main+0x31c>)
 80019ec:	4865      	ldr	r0, [pc, #404]	; (8001b84 <main+0x320>)
 80019ee:	f00f fe25 	bl	801163c <siprintf>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a64      	ldr	r2, [pc, #400]	; (8001b88 <main+0x324>)
 80019f6:	6013      	str	r3, [r2, #0]
				"Error: could not create NN instance\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer, usart_buffer_length,
 80019f8:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <main+0x324>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	4960      	ldr	r1, [pc, #384]	; (8001b84 <main+0x320>)
 8001a02:	4862      	ldr	r0, [pc, #392]	; (8001b8c <main+0x328>)
 8001a04:	f007 f871 	bl	8008aea <HAL_UART_Transmit>
				100);
		while (1)
 8001a08:	e7fe      	b.n	8001a08 <main+0x1a4>
			;
	}

	/* Initialize the neural network */
	if (!ai_speech_commands_model_init(speech_commands_model, &ai_params)) {
 8001a0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a0e:	3b14      	subs	r3, #20
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a16:	3b74      	subs	r3, #116	; 0x74
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f008 fe8e 	bl	800a73c <ai_speech_commands_model_init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f083 0301 	eor.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00f      	beq.n	8001a4c <main+0x1e8>
		usart_buffer_length = sprintf(usart_buffer,
 8001a2c:	4958      	ldr	r1, [pc, #352]	; (8001b90 <main+0x32c>)
 8001a2e:	4855      	ldr	r0, [pc, #340]	; (8001b84 <main+0x320>)
 8001a30:	f00f fe04 	bl	801163c <siprintf>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <main+0x324>)
 8001a38:	6013      	str	r3, [r2, #0]
				"Error: could not initialize NN\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer, usart_buffer_length,
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <main+0x324>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	2364      	movs	r3, #100	; 0x64
 8001a42:	4950      	ldr	r1, [pc, #320]	; (8001b84 <main+0x320>)
 8001a44:	4851      	ldr	r0, [pc, #324]	; (8001b8c <main+0x328>)
 8001a46:	f007 f850 	bl	8008aea <HAL_UART_Transmit>
				100);
		while (1)
 8001a4a:	e7fe      	b.n	8001a4a <main+0x1e6>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		stop_mode();
 8001a4c:	f000 fb48 	bl	80020e0 <stop_mode>

		execution_time_start(0);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fc17 	bl	8001284 <execution_time_start>
		/* Acquire audio signal and transform it to PCM data */
		audio_record();
 8001a56:	f7ff fad9 	bl	800100c <audio_record>
		execution_time_stop(0);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fc2a 	bl	80012b4 <execution_time_stop>

		execution_time_start(1);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fc0f 	bl	8001284 <execution_time_start>
		/* Preprocess audio signal to get the MFCCs */
		preprocess_audio((int16_t*) &pcm_buffer[0], (ai_float*) &in_data[0],
 8001a66:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001a6a:	3b30      	subs	r3, #48	; 0x30
 8001a6c:	f643 72f0 	movw	r2, #16368	; 0x3ff0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4848      	ldr	r0, [pc, #288]	; (8001b94 <main+0x330>)
 8001a74:	f7ff fc74 	bl	8001360 <preprocess_audio>
		PCM_BUFFER_SIZE);
		execution_time_stop(1);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff fc1b 	bl	80012b4 <execution_time_stop>

		execution_time_start(2);
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7ff fc00 	bl	8001284 <execution_time_start>
		/* Perform inference */
		nbatch = ai_speech_commands_model_run(speech_commands_model,
 8001a84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a88:	3b14      	subs	r3, #20
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a90:	3a44      	subs	r2, #68	; 0x44
 8001a92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a96:	3b2c      	subs	r3, #44	; 0x2c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f008 fe8b 	bl	800a7b4 <ai_speech_commands_model_run>
 8001a9e:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001aa2:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001aa6:	6018      	str	r0, [r3, #0]
				&ai_input[0], &ai_output[0]);
		execution_time_stop(2);
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7ff fc03 	bl	80012b4 <execution_time_stop>

		execution_time_start(3);
 8001aae:	2003      	movs	r0, #3
 8001ab0:	f7ff fbe8 	bl	8001284 <execution_time_start>
		if (nbatch != 1) {
 8001ab4:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001ab8:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d00f      	beq.n	8001ae2 <main+0x27e>
			usart_buffer_length = sprintf(usart_buffer,
 8001ac2:	4935      	ldr	r1, [pc, #212]	; (8001b98 <main+0x334>)
 8001ac4:	482f      	ldr	r0, [pc, #188]	; (8001b84 <main+0x320>)
 8001ac6:	f00f fdb9 	bl	801163c <siprintf>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <main+0x324>)
 8001ace:	6013      	str	r3, [r2, #0]
					"Error: could not run inference\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <main+0x324>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	2364      	movs	r3, #100	; 0x64
 8001ad8:	492a      	ldr	r1, [pc, #168]	; (8001b84 <main+0x320>)
 8001ada:	482c      	ldr	r0, [pc, #176]	; (8001b8c <main+0x328>)
 8001adc:	f007 f805 	bl	8008aea <HAL_UART_Transmit>
 8001ae0:	e03f      	b.n	8001b62 <main+0x2fe>
					usart_buffer_length, 100);
		} else {
			/* Get the predicted word */
			uint8_t idx = argmax(out_data, AI_SPEECH_COMMANDS_MODEL_OUT_1_SIZE);
 8001ae2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ae6:	3b10      	subs	r3, #16
 8001ae8:	2126      	movs	r1, #38	; 0x26
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fb3e 	bl	800116c <argmax>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8001af6:	f102 0273 	add.w	r2, r2, #115	; 0x73
 8001afa:	7013      	strb	r3, [r2, #0]
			char *word = get_word(idx);
 8001afc:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001b00:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fb70 	bl	80011ec <get_word>
 8001b0c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001b10:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001b14:	6018      	str	r0, [r3, #0]

			print_words = 1;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <main+0x338>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]

			recognize_commands(word);
 8001b1c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001b20:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	f7ff fc61 	bl	80013ec <recognize_commands>

			if (display_words_enabled) {
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <main+0x33c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d017      	beq.n	8001b62 <main+0x2fe>
				/* Print words for commands different from `ON`, `VISUAL` and `STOP` */
				if (print_words) {
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <main+0x338>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d013      	beq.n	8001b62 <main+0x2fe>
					/* Print the neural network output */
					usart_buffer_length = sprintf(usart_buffer, "%s\r\n", word);
 8001b3a:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001b3e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4917      	ldr	r1, [pc, #92]	; (8001ba4 <main+0x340>)
 8001b46:	480f      	ldr	r0, [pc, #60]	; (8001b84 <main+0x320>)
 8001b48:	f00f fd78 	bl	801163c <siprintf>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <main+0x324>)
 8001b50:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <main+0x324>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	2364      	movs	r3, #100	; 0x64
 8001b5a:	490a      	ldr	r1, [pc, #40]	; (8001b84 <main+0x320>)
 8001b5c:	480b      	ldr	r0, [pc, #44]	; (8001b8c <main+0x328>)
 8001b5e:	f006 ffc4 	bl	8008aea <HAL_UART_Transmit>
							usart_buffer_length, 100);
				}
			}
		}
		execution_time_stop(3);
 8001b62:	2003      	movs	r0, #3
 8001b64:	f7ff fba6 	bl	80012b4 <execution_time_stop>
		stop_mode();
 8001b68:	e770      	b.n	8001a4c <main+0x1e8>
 8001b6a:	bf00      	nop
 8001b6c:	08017080 	.word	0x08017080
 8001b70:	08017098 	.word	0x08017098
 8001b74:	40040440 	.word	0x40040440
 8001b78:	0002b2f8 	.word	0x0002b2f8
 8001b7c:	00040440 	.word	0x00040440
 8001b80:	08017008 	.word	0x08017008
 8001b84:	2000b86c 	.word	0x2000b86c
 8001b88:	20001200 	.word	0x20001200
 8001b8c:	200138d8 	.word	0x200138d8
 8001b90:	08017030 	.word	0x08017030
 8001b94:	20001330 	.word	0x20001330
 8001b98:	08017054 	.word	0x08017054
 8001b9c:	2000049c 	.word	0x2000049c
 8001ba0:	20001204 	.word	0x20001204
 8001ba4:	08017078 	.word	0x08017078

08001ba8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	2230      	movs	r2, #48	; 0x30
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00e fca4 	bl	8010504 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(10);
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bd6:	f043 030a 	orr.w	r3, r3, #10
 8001bda:	6053      	str	r3, [r2, #4]
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <SystemClock_Config+0xd4>)
 8001be2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001be6:	6053      	str	r3, [r2, #4]
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <SystemClock_Config+0xd8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <SystemClock_Config+0xd8>)
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <SystemClock_Config+0xd8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c20:	2302      	movs	r3, #2
 8001c22:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c28:	2310      	movs	r3, #16
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f006 f875 	bl	8007d28 <HAL_RCC_OscConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0xa0>
		Error_Handler();
 8001c44:	f000 fa60 	bl	8002108 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c48:	230f      	movs	r3, #15
 8001c4a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f006 fad8 	bl	8008218 <HAL_RCC_ClockConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0xca>
		Error_Handler();
 8001c6e:	f000 fa4b 	bl	8002108 <Error_Handler>
	}
}
 8001c72:	bf00      	nop
 8001c74:	3750      	adds	r7, #80	; 0x50
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000

08001c84 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <MX_CRC_Init+0x30>)
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <MX_CRC_Init+0x34>)
 8001c8c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001c8e:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <MX_CRC_Init+0x30>)
 8001c90:	f003 ffdb 	bl	8005c4a <HAL_CRC_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_CRC_Init+0x1a>
		Error_Handler();
 8001c9a:	f000 fa35 	bl	8002108 <Error_Handler>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <MX_CRC_Init+0x30>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <MX_CRC_Init+0x30>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20009604 	.word	0x20009604
 8001cb8:	40023000 	.word	0x40023000

08001cbc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cc2:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <MX_I2C1_Init+0x54>)
 8001cc4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_I2C1_Init+0x58>)
 8001cca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cde:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_I2C1_Init+0x50>)
 8001cfa:	f004 fef1 	bl	8006ae0 <HAL_I2C_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001d04:	f000 fa00 	bl	8002108 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200095b0 	.word	0x200095b0
 8001d10:	40005400 	.word	0x40005400
 8001d14:	000186a0 	.word	0x000186a0

08001d18 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <MX_I2S2_Init+0x58>)
 8001d20:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d28:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d32:	2203      	movs	r2, #3
 8001d34:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d3e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d42:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_I2S2_Init+0x54>)
 8001d58:	f005 f806 	bl	8006d68 <HAL_I2S_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_I2S2_Init+0x4e>
		Error_Handler();
 8001d62:	f000 f9d1 	bl	8002108 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20013b4c 	.word	0x20013b4c
 8001d70:	40003800 	.word	0x40003800

08001d74 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <MX_SPI1_Init+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d84:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dc6:	f006 fd8b 	bl	80088e0 <HAL_SPI_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001dd0:	f000 f99a 	bl	8002108 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20011880 	.word	0x20011880
 8001ddc:	40013000 	.word	0x40013000

08001de0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <MX_USART2_UART_Init+0x50>)
 8001de8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e06:	220c      	movs	r2, #12
 8001e08:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_USART2_UART_Init+0x4c>)
 8001e18:	f006 fdeb 	bl	80089f2 <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001e22:	f000 f971 	bl	8002108 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200138d8 	.word	0x200138d8
 8001e30:	40004400 	.word	0x40004400

08001e34 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_DMA_Init+0x3c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <MX_DMA_Init+0x3c>)
 8001e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_DMA_Init+0x3c>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	200e      	movs	r0, #14
 8001e5c:	f003 febf 	bl	8005bde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e60:	200e      	movs	r0, #14
 8001e62:	f003 fed8 	bl	8005c16 <HAL_NVIC_EnableIRQ>

}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_GPIO_Init+0xe4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001f00:	4816      	ldr	r0, [pc, #88]	; (8001f5c <MX_GPIO_Init+0xe8>)
 8001f02:	f004 fd95 	bl	8006a30 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f06:	2301      	movs	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4811      	ldr	r0, [pc, #68]	; (8001f60 <MX_GPIO_Init+0xec>)
 8001f1c:	f004 faf0 	bl	8006500 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 8001f20:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4808      	ldr	r0, [pc, #32]	; (8001f5c <MX_GPIO_Init+0xe8>)
 8001f3a:	f004 fae1 	bl	8006500 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2006      	movs	r0, #6
 8001f44:	f003 fe4b 	bl	8005bde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f48:	2006      	movs	r0, #6
 8001f4a:	f003 fe64 	bl	8005c16 <HAL_NVIC_EnableIRQ>

}
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	; 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	40020000 	.word	0x40020000

08001f64 <preprocessing_init>:
 *
 * @param  None
 *
 * @retval None
 */
void preprocessing_init(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	/* Init window function */
	if (Window_Init(window_func_buffer, FRAME_LEN, WINDOW_HANN) != 0) {
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f6e:	484e      	ldr	r0, [pc, #312]	; (80020a8 <preprocessing_init+0x144>)
 8001f70:	f008 f966 	bl	800a240 <Window_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d000      	beq.n	8001f7c <preprocessing_init+0x18>
		while (1)
 8001f7a:	e7fe      	b.n	8001f7a <preprocessing_init+0x16>
			;
	}

	/* Init RFFT */
	arm_rfft_fast_init_f32(&rfft, FFT_LEN);
 8001f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f80:	484a      	ldr	r0, [pc, #296]	; (80020ac <preprocessing_init+0x148>)
 8001f82:	f003 fc55 	bl	8005830 <arm_rfft_fast_init_f32>

	/* Init mel filterbank */
	mel_filter.pStartIndices = mel_filter_start_indices;
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <preprocessing_init+0x14c>)
 8001f88:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <preprocessing_init+0x150>)
 8001f8a:	601a      	str	r2, [r3, #0]
	mel_filter.pStopIndices = mel_filter_stop_indices;
 8001f8c:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <preprocessing_init+0x14c>)
 8001f8e:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <preprocessing_init+0x154>)
 8001f90:	605a      	str	r2, [r3, #4]
	mel_filter.pCoefficients = mel_filter_coefs;
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <preprocessing_init+0x14c>)
 8001f94:	4a49      	ldr	r2, [pc, #292]	; (80020bc <preprocessing_init+0x158>)
 8001f96:	609a      	str	r2, [r3, #8]
	mel_filter.NumMels = NUM_MELS;
 8001f98:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <preprocessing_init+0x14c>)
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	611a      	str	r2, [r3, #16]
	mel_filter.FFTLen = FFT_LEN;
 8001f9e:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <preprocessing_init+0x14c>)
 8001fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa4:	615a      	str	r2, [r3, #20]
	mel_filter.SampRate = SAMPLE_RATE;
 8001fa6:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <preprocessing_init+0x14c>)
 8001fa8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001fac:	619a      	str	r2, [r3, #24]
	mel_filter.FMin = 0.0;
 8001fae:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <preprocessing_init+0x14c>)
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
	mel_filter.FMax = mel_filter.SampRate / 2.0;
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <preprocessing_init+0x14c>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fab2 	bl	8000524 <__aeabi_ui2d>
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc8:	f7fe fc50 	bl	800086c <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f7fe fe18 	bl	8000c08 <__aeabi_d2f>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a35      	ldr	r2, [pc, #212]	; (80020b0 <preprocessing_init+0x14c>)
 8001fdc:	6213      	str	r3, [r2, #32]
	mel_filter.Formula = MEL_SLANEY;
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <preprocessing_init+0x14c>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mel_filter.Normalize = 1;
 8001fe6:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <preprocessing_init+0x14c>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
	mel_filter.Mel2F = 1;
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <preprocessing_init+0x14c>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
	MelFilterbank_Init(&mel_filter);
 8001ff2:	482f      	ldr	r0, [pc, #188]	; (80020b0 <preprocessing_init+0x14c>)
 8001ff4:	f007 fe4a 	bl	8009c8c <MelFilterbank_Init>
	if (mel_filter.CoefficientsLength != NUM_MEL_COEFS) {
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <preprocessing_init+0x14c>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8002000:	4293      	cmp	r3, r2
 8002002:	d000      	beq.n	8002006 <preprocessing_init+0xa2>
		while (1)
 8002004:	e7fe      	b.n	8002004 <preprocessing_init+0xa0>
			;
	}

	/* Init DCT operation */
	dct.NumFilters = NUM_MFCC;
 8002006:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <preprocessing_init+0x15c>)
 8002008:	2210      	movs	r2, #16
 800200a:	601a      	str	r2, [r3, #0]
	dct.NumInputs = NUM_MELS;
 800200c:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <preprocessing_init+0x15c>)
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	605a      	str	r2, [r3, #4]
	dct.Type = DCT_TYPE_II_ORTHO;
 8002012:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <preprocessing_init+0x15c>)
 8002014:	2202      	movs	r2, #2
 8002016:	721a      	strb	r2, [r3, #8]
	dct.RemoveDCTZero = 0;
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <preprocessing_init+0x15c>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
	dct.pDCTCoefs = dct_coefs_buffer;
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <preprocessing_init+0x15c>)
 8002020:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <preprocessing_init+0x160>)
 8002022:	611a      	str	r2, [r3, #16]
	if (DCT_Init(&dct) != 0) {
 8002024:	4826      	ldr	r0, [pc, #152]	; (80020c0 <preprocessing_init+0x15c>)
 8002026:	f007 f82b 	bl	8009080 <DCT_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d000      	beq.n	8002032 <preprocessing_init+0xce>
		while (1)
 8002030:	e7fe      	b.n	8002030 <preprocessing_init+0xcc>
			;
	}

	/* Init Spectrogram */
	spectrogram.pRfft = &rfft;
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <preprocessing_init+0x164>)
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <preprocessing_init+0x148>)
 8002036:	601a      	str	r2, [r3, #0]
	spectrogram.Type = SPECTRUM_TYPE_POWER;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <preprocessing_init+0x164>)
 800203a:	2201      	movs	r2, #1
 800203c:	711a      	strb	r2, [r3, #4]
	spectrogram.pWindow = window_func_buffer;
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <preprocessing_init+0x164>)
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <preprocessing_init+0x144>)
 8002042:	609a      	str	r2, [r3, #8]
	spectrogram.SampRate = SAMPLE_RATE;
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <preprocessing_init+0x164>)
 8002046:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800204a:	60da      	str	r2, [r3, #12]
	spectrogram.FrameLen = FRAME_LEN;
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <preprocessing_init+0x164>)
 800204e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002052:	611a      	str	r2, [r3, #16]
	spectrogram.FFTLen = FFT_LEN;
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <preprocessing_init+0x164>)
 8002056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800205a:	615a      	str	r2, [r3, #20]
	spectrogram.pScratch = spectrogram_scratch_buffer;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <preprocessing_init+0x164>)
 800205e:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <preprocessing_init+0x168>)
 8002060:	619a      	str	r2, [r3, #24]

	/* Init MelSpectrogram */
	mel_spectrogram.SpectrogramConf = &spectrogram;
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <preprocessing_init+0x16c>)
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <preprocessing_init+0x164>)
 8002066:	601a      	str	r2, [r3, #0]
	mel_spectrogram.MelFilter = &mel_filter;
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <preprocessing_init+0x16c>)
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <preprocessing_init+0x14c>)
 800206c:	605a      	str	r2, [r3, #4]

	/* Init LogMelSpectrogram */
	log_mel_spectrogram.MelSpectrogramConf = &mel_spectrogram;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <preprocessing_init+0x170>)
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <preprocessing_init+0x16c>)
 8002072:	601a      	str	r2, [r3, #0]
	log_mel_spectrogram.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <preprocessing_init+0x170>)
 8002076:	2200      	movs	r2, #0
 8002078:	711a      	strb	r2, [r3, #4]
	log_mel_spectrogram.Ref = 1.0;
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <preprocessing_init+0x170>)
 800207c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002080:	609a      	str	r2, [r3, #8]
	log_mel_spectrogram.TopdB = HUGE_VALF;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <preprocessing_init+0x170>)
 8002084:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8002088:	60da      	str	r2, [r3, #12]

	/* Init MFCC */
	mfcc.LogMelConf = &log_mel_spectrogram;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <preprocessing_init+0x174>)
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <preprocessing_init+0x170>)
 800208e:	601a      	str	r2, [r3, #0]
	mfcc.pDCT = &dct;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <preprocessing_init+0x174>)
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <preprocessing_init+0x15c>)
 8002094:	605a      	str	r2, [r3, #4]
	mfcc.NumMfccCoefs = NUM_MFCC;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <preprocessing_init+0x174>)
 8002098:	2210      	movs	r2, #16
 800209a:	609a      	str	r2, [r3, #8]
	mfcc.pScratch = mfcc_scratch_buffer;
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <preprocessing_init+0x174>)
 800209e:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <preprocessing_init+0x178>)
 80020a0:	60da      	str	r2, [r3, #12]
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000986c 	.word	0x2000986c
 80020ac:	2000b8d0 	.word	0x2000b8d0
 80020b0:	2000b8a0 	.word	0x2000b8a0
 80020b4:	20009360 	.word	0x20009360
 80020b8:	2000966c 	.word	0x2000966c
 80020bc:	2000f8f0 	.word	0x2000f8f0
 80020c0:	20013b38 	.word	0x20013b38
 80020c4:	2000d8f0 	.word	0x2000d8f0
 80020c8:	20013b1c 	.word	0x20013b1c
 80020cc:	2000b8f0 	.word	0x2000b8f0
 80020d0:	2000b8e8 	.word	0x2000b8e8
 80020d4:	20009350 	.word	0x20009350
 80020d8:	200095a0 	.word	0x200095a0
 80020dc:	2001391c 	.word	0x2001391c

080020e0 <stop_mode>:
 *
 * @param  None
 *
 * @retval None
 */
void stop_mode(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 80020e4:	4807      	ldr	r0, [pc, #28]	; (8002104 <stop_mode+0x24>)
 80020e6:	f006 fcd1 	bl	8008a8c <HAL_UART_DeInit>

	/* Suspend Tick increment to prevent wakeup by Systick interrupt, 
	 * otherwise the Systick interrupt will wake up the device within 
	 * 1ms (HAL time base)
	 */
	HAL_SuspendTick();
 80020ea:	f003 fc7d 	bl	80059e8 <HAL_SuspendTick>

	/* Request to enter STOP mode */
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80020ee:	2101      	movs	r1, #1
 80020f0:	2001      	movs	r0, #1
 80020f2:	f005 fded 	bl	8007cd0 <HAL_PWR_EnterSTOPMode>

	/* Resume Tick interrupt if disabled prior to sleep mode entry*/
	HAL_ResumeTick();
 80020f6:	f003 fc87 	bl	8005a08 <HAL_ResumeTick>

	/* Reinitialize UART2 */
	MX_USART2_UART_Init();
 80020fa:	f7ff fe71 	bl	8001de0 <MX_USART2_UART_Init>
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200138d8 	.word	0x200138d8

08002108 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002110:	e7fe      	b.n	8002110 <Error_Handler+0x8>
	...

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_MspInit+0x4c>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_MspInit+0x4c>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_MspInit+0x4c>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_MspInit+0x4c>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_MspInit+0x4c>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_MspInit+0x4c>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_CRC_MspInit+0x3c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10d      	bne.n	8002192 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_CRC_MspInit+0x40>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_CRC_MspInit+0x40>)
 8002180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_CRC_MspInit+0x40>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023000 	.word	0x40023000
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_I2C_MspInit+0x84>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d12b      	bne.n	8002222 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_I2C_MspInit+0x88>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_I2C_MspInit+0x88>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_I2C_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021e6:	23c0      	movs	r3, #192	; 0xc0
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ea:	2312      	movs	r3, #18
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f6:	2304      	movs	r3, #4
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	480c      	ldr	r0, [pc, #48]	; (8002234 <HAL_I2C_MspInit+0x8c>)
 8002202:	f004 f97d 	bl	8006500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_I2C_MspInit+0x88>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <HAL_I2C_MspInit+0x88>)
 8002210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_I2C_MspInit+0x88>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002222:	bf00      	nop
 8002224:	3728      	adds	r7, #40	; 0x28
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40005400 	.word	0x40005400
 8002230:	40023800 	.word	0x40023800
 8002234:	40020400 	.word	0x40020400

08002238 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	; 0x38
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a4a      	ldr	r2, [pc, #296]	; (800238c <HAL_I2S_MspInit+0x154>)
 8002264:	4293      	cmp	r3, r2
 8002266:	f040 808c 	bne.w	8002382 <HAL_I2S_MspInit+0x14a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800226a:	2301      	movs	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8002272:	2305      	movs	r3, #5
 8002274:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4618      	mov	r0, r3
 800227c:	f006 f9c6 	bl	800860c <HAL_RCCEx_PeriphCLKConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8002286:	f7ff ff3f 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_I2S_MspInit+0x158>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a3f      	ldr	r2, [pc, #252]	; (8002390 <HAL_I2S_MspInit+0x158>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_I2S_MspInit+0x158>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_I2S_MspInit+0x158>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a38      	ldr	r2, [pc, #224]	; (8002390 <HAL_I2S_MspInit+0x158>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_I2S_MspInit+0x158>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_I2S_MspInit+0x158>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a31      	ldr	r2, [pc, #196]	; (8002390 <HAL_I2S_MspInit+0x158>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_I2S_MspInit+0x158>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022de:	2308      	movs	r3, #8
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ee:	2305      	movs	r3, #5
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	4826      	ldr	r0, [pc, #152]	; (8002394 <HAL_I2S_MspInit+0x15c>)
 80022fa:	f004 f901 	bl	8006500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80022fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002310:	2305      	movs	r3, #5
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	481f      	ldr	r0, [pc, #124]	; (8002398 <HAL_I2S_MspInit+0x160>)
 800231c:	f004 f8f0 	bl	8006500 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_I2S_MspInit+0x164>)
 8002322:	4a1f      	ldr	r2, [pc, #124]	; (80023a0 <HAL_I2S_MspInit+0x168>)
 8002324:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_I2S_MspInit+0x164>)
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_I2S_MspInit+0x164>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_I2S_MspInit+0x164>)
 8002334:	2200      	movs	r2, #0
 8002336:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_I2S_MspInit+0x164>)
 800233a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_I2S_MspInit+0x164>)
 8002342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002346:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_I2S_MspInit+0x164>)
 800234a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_I2S_MspInit+0x164>)
 8002352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002356:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_I2S_MspInit+0x164>)
 800235a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_I2S_MspInit+0x164>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002366:	480d      	ldr	r0, [pc, #52]	; (800239c <HAL_I2S_MspInit+0x164>)
 8002368:	f003 fc8c 	bl	8005c84 <HAL_DMA_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8002372:	f7ff fec9 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_I2S_MspInit+0x164>)
 800237a:	63da      	str	r2, [r3, #60]	; 0x3c
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_I2S_MspInit+0x164>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3738      	adds	r7, #56	; 0x38
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40003800 	.word	0x40003800
 8002390:	40023800 	.word	0x40023800
 8002394:	40020800 	.word	0x40020800
 8002398:	40020400 	.word	0x40020400
 800239c:	2000960c 	.word	0x2000960c
 80023a0:	40026058 	.word	0x40026058

080023a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_SPI_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023fe:	23e0      	movs	r3, #224	; 0xe0
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800240e:	2305      	movs	r3, #5
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_SPI_MspInit+0x8c>)
 800241a:	f004 f871 	bl	8006500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40013000 	.word	0x40013000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_UART_MspInit+0x84>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d12b      	bne.n	80024ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_UART_MspInit+0x88>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_UART_MspInit+0x88>)
 8002460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_UART_MspInit+0x88>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_UART_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_UART_MspInit+0x88>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_UART_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800248e:	230c      	movs	r3, #12
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800249e:	2307      	movs	r3, #7
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <HAL_UART_MspInit+0x8c>)
 80024aa:	f004 f829 	bl	8006500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40004400 	.word	0x40004400
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000

080024c4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <HAL_UART_MspDeInit+0x30>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d109      	bne.n	80024ea <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_UART_MspDeInit+0x34>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_UART_MspDeInit+0x34>)
 80024dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80024e2:	210c      	movs	r1, #12
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <HAL_UART_MspDeInit+0x38>)
 80024e6:	f004 f9a7 	bl	8006838 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40004400 	.word	0x40004400
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <NMI_Handler+0x4>

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <UsageFault_Handler+0x4>

0800251e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254c:	f003 fa2c 	bl	80059a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002558:	2001      	movs	r0, #1
 800255a:	f004 fa9d 	bl	8006a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <DMA1_Stream3_IRQHandler+0x10>)
 800256a:	f003 fd5f 	bl	800602c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000960c 	.word	0x2000960c

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f00d ff5a 	bl	8010460 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20020000 	.word	0x20020000
 80025d8:	00000800 	.word	0x00000800
 80025dc:	20001208 	.word	0x20001208
 80025e0:	20013d30 	.word	0x20013d30

080025e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002624:	4c0b      	ldr	r4, [pc, #44]	; (8002654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002632:	f7ff ffd7 	bl	80025e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002636:	f00d ff2b 	bl	8010490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7ff f913 	bl	8001864 <main>
  bx  lr    
 800263e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	200010b8 	.word	0x200010b8
  ldr r2, =_sidata
 800264c:	080600d8 	.word	0x080600d8
  ldr r2, =_sbss
 8002650:	200010b8 	.word	0x200010b8
  ldr r4, =_ebss
 8002654:	20013d30 	.word	0x20013d30

08002658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC_IRQHandler>
	...

0800265c <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	; 0x30
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10e      	bne.n	800268a <BSP_LED_Init+0x2e>
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	4b33      	ldr	r3, [pc, #204]	; (8002740 <BSP_LED_Init+0xe4>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4a32      	ldr	r2, [pc, #200]	; (8002740 <BSP_LED_Init+0xe4>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <BSP_LED_Init+0xe4>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	e034      	b.n	80026f4 <BSP_LED_Init+0x98>
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10e      	bne.n	80026ae <BSP_LED_Init+0x52>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <BSP_LED_Init+0xe4>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4a29      	ldr	r2, [pc, #164]	; (8002740 <BSP_LED_Init+0xe4>)
 800269a:	f043 0308 	orr.w	r3, r3, #8
 800269e:	6313      	str	r3, [r2, #48]	; 0x30
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <BSP_LED_Init+0xe4>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	e022      	b.n	80026f4 <BSP_LED_Init+0x98>
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d10e      	bne.n	80026d2 <BSP_LED_Init+0x76>
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <BSP_LED_Init+0xe4>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4a20      	ldr	r2, [pc, #128]	; (8002740 <BSP_LED_Init+0xe4>)
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	6313      	str	r3, [r2, #48]	; 0x30
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <BSP_LED_Init+0xe4>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	e010      	b.n	80026f4 <BSP_LED_Init+0x98>
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d10d      	bne.n	80026f4 <BSP_LED_Init+0x98>
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <BSP_LED_Init+0xe4>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	4a17      	ldr	r2, [pc, #92]	; (8002740 <BSP_LED_Init+0xe4>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6313      	str	r3, [r2, #48]	; 0x30
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <BSP_LED_Init+0xe4>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <BSP_LED_Init+0xe8>)
 80026f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fe:	2301      	movs	r3, #1
 8002700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002702:	2301      	movs	r3, #1
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002706:	2302      	movs	r3, #2
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <BSP_LED_Init+0xec>)
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	f107 021c 	add.w	r2, r7, #28
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fef1 	bl	8006500 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	4a09      	ldr	r2, [pc, #36]	; (8002748 <BSP_LED_Init+0xec>)
 8002722:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <BSP_LED_Init+0xe8>)
 800272a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800272e:	2200      	movs	r2, #0
 8002730:	4619      	mov	r1, r3
 8002732:	f004 f97d 	bl	8006a30 <HAL_GPIO_WritePin>
}
 8002736:	bf00      	nop
 8002738:	3730      	adds	r7, #48	; 0x30
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	0801722c 	.word	0x0801722c
 8002748:	200004a4 	.word	0x200004a4

0800274c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Mode)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	460a      	mov	r2, r1
 8002756:	71fb      	strb	r3, [r7, #7]
 8002758:	4613      	mov	r3, r2
 800275a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <BSP_PB_Init+0x32>
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <BSP_PB_Init+0xa8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <BSP_PB_Init+0xa8>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <BSP_PB_Init+0xa8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
  
  if (Mode == BUTTON_MODE_GPIO)
 800277e:	79bb      	ldrb	r3, [r7, #6]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002784:	2301      	movs	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002790:	2302      	movs	r3, #2
 8002792:	61bb      	str	r3, [r7, #24]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <BSP_PB_Init+0xac>)
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	f107 020c 	add.w	r2, r7, #12
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 feac 	bl	8006500 <HAL_GPIO_Init>
  }
  
  if (Mode == BUTTON_MODE_EXTI)
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d11e      	bne.n	80027ec <BSP_PB_Init+0xa0>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80027ae:	2301      	movs	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80027ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027be:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <BSP_PB_Init+0xac>)
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	f107 020c 	add.w	r2, r7, #12
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fe96 	bl	8006500 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 80027d4:	2306      	movs	r3, #6
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	210f      	movs	r1, #15
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 f9fe 	bl	8005bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80027e2:	2306      	movs	r3, #6
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fa15 	bl	8005c16 <HAL_NVIC_EnableIRQ>
  }
}
 80027ec:	bf00      	nop
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	200004b4 	.word	0x200004b4

080027fc <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_I2S_TxCpltCallback+0x20>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_I2S_TxCpltCallback+0x16>
		/* Call the user function which will manage directly transfer complete */
		BSP_AUDIO_OUT_TransferComplete_CallBack();
 800280e:	f000 f807 	bl	8002820 <BSP_AUDIO_OUT_TransferComplete_CallBack>
	}
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40003c00 	.word	0x40003c00

08002820 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <BSP_AUDIO_OUT_Error_CallBack>:
}

/**
 * @brief  Manages the DMA FIFO error event.
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <BSP_AUDIO_IN_Init>:
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 * @param  BitRes: Audio frequency to be configured for the I2S peripheral.
 * @param  ChnlNbr: Audio frequency to be configured for the I2S peripheral.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]

	/* Configure PLL clock */
	BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8002848:	2200      	movs	r2, #0
 800284a:	68f9      	ldr	r1, [r7, #12]
 800284c:	480e      	ldr	r0, [pc, #56]	; (8002888 <BSP_AUDIO_IN_Init+0x4c>)
 800284e:	f000 f8b7 	bl	80029c0 <BSP_AUDIO_IN_ClockConfig>

	/* Configure the PDM library */
	/* On STM32F4-Discovery a single microphone is mounted, samples are duplicated
	 to make stereo audio streams */
	PDMDecoder_Init(AudioFreq, ChnlNbr, 1);
 8002852:	2201      	movs	r2, #1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f98c 	bl	8002b74 <PDMDecoder_Init>

	/* Configure the I2S peripheral */
	hAudioInI2s.Instance = I2S2;
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <BSP_AUDIO_IN_Init+0x4c>)
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <BSP_AUDIO_IN_Init+0x50>)
 8002860:	601a      	str	r2, [r3, #0]
	if (HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET) {
 8002862:	4809      	ldr	r0, [pc, #36]	; (8002888 <BSP_AUDIO_IN_Init+0x4c>)
 8002864:	f004 fe56 	bl	8007514 <HAL_I2S_GetState>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <BSP_AUDIO_IN_Init+0x3a>
		/* Initialize the I2S Msp: this __weak function can be rewritten by the application */
		BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 800286e:	2100      	movs	r1, #0
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <BSP_AUDIO_IN_Init+0x4c>)
 8002872:	f000 f8d1 	bl	8002a18 <BSP_AUDIO_IN_MspInit>
	}

	/* Configure the I2S2 */
	I2S2_Init(AudioFreq);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fa18 	bl	8002cac <I2S2_Init>

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20013c80 	.word	0x20013c80
 800288c:	40003800 	.word	0x40003800

08002890 <BSP_AUDIO_IN_Record>:
 * @brief  Starts audio recording.
 * @param  pbuf: Main buffer pointer for the recorded data storing
 * @param  size: Current size of the recorded buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Record(uint16_t *pbuf, uint32_t size) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	uint32_t ret = AUDIO_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	60fb      	str	r3, [r7, #12]

	/* Start the process receive DMA */
	HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <BSP_AUDIO_IN_Record+0x2c>)
 80028a8:	f004 fb9e 	bl	8006fe8 <HAL_I2S_Receive_DMA>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]

	return ret;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	b2db      	uxtb	r3, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20013c80 	.word	0x20013c80

080028c0 <BSP_AUDIO_IN_Stop>:

/**
 * @brief  Stops audio recording.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Stop(void) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
	uint32_t ret = AUDIO_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	607b      	str	r3, [r7, #4]

	/* Call the Media layer pause function */
	HAL_I2S_DMAStop(&hAudioInI2s);
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <BSP_AUDIO_IN_Stop+0x20>)
 80028cc:	f004 fc48 	bl	8007160 <HAL_I2S_DMAStop>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	607b      	str	r3, [r7, #4]

	return ret;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	b2db      	uxtb	r3, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20013c80 	.word	0x20013c80

080028e4 <BSP_AUDIO_IN_PDMToPCM>:
 * @brief  Converts audio format from PDM to PCM.
 * @param  PDMBuf: Pointer to data PDM buffer
 * @param  PCMBuf: Pointer to data PCM buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0a4      	sub	sp, #144	; 0x90
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	// INTERNAL_BUFF_SIZE / 2 = 128 / 2 = 64
	uint16_t AppPDM[PDM_BUFFER_SIZE / 2];
	uint32_t index = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/* PDM Demux */
	for (index = 0; index < PDM_BUFFER_SIZE / 2; index++) {
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80028fa:	e020      	b.n	800293e <BSP_AUDIO_IN_PDMToPCM+0x5a>
		AppPDM[index] = HTONS(PDMBuf[index]);
 80028fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	b29b      	uxth	r3, r3
 800290c:	b21a      	sxth	r2, r3
 800290e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	440b      	add	r3, r1
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	b21b      	sxth	r3, r3
 800291e:	4313      	orrs	r3, r2
 8002920:	b21b      	sxth	r3, r3
 8002922:	b29a      	uxth	r2, r3
 8002924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800292e:	440b      	add	r3, r1
 8002930:	f823 2c84 	strh.w	r2, [r3, #-132]
	for (index = 0; index < PDM_BUFFER_SIZE / 2; index++) {
 8002934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002938:	3301      	adds	r3, #1
 800293a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002942:	2b3f      	cmp	r3, #63	; 0x3f
 8002944:	d9da      	bls.n	80028fc <BSP_AUDIO_IN_PDMToPCM+0x18>
	}

	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800294c:	e019      	b.n	8002982 <BSP_AUDIO_IN_PDMToPCM+0x9e>
		/* PDM to PCM filter */
		PDM_Filter((uint8_t*) &AppPDM[index], (uint16_t*) &(PCMBuf[index]),
 800294e:	f107 020c 	add.w	r2, r7, #12
 8002952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	18d0      	adds	r0, r2, r3
 800295a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	18d1      	adds	r1, r2, r3
 8002964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002968:	224c      	movs	r2, #76	; 0x4c
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <BSP_AUDIO_IN_PDMToPCM+0xb0>)
 8002970:	4413      	add	r3, r2
 8002972:	461a      	mov	r2, r3
 8002974:	f009 fe04 	bl	800c580 <PDM_Filter>
	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
 8002978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800297c:	3301      	adds	r3, #1
 800297e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0e1      	beq.n	800294e <BSP_AUDIO_IN_PDMToPCM+0x6a>
	/*for (index = 0; index < PCM_OUT_SIZE; index++) {
		PCMBuf[(index << 1) + 1] = PCMBuf[index << 1];
	}*/

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3790      	adds	r7, #144	; 0x90
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20013ba0 	.word	0x20013ba0

08002998 <HAL_I2S_RxCpltCallback>:

/**
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s: I2S handle
 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	/* Call the record update function to get the next buffer to fill and its size (size is ignored) */
	BSP_AUDIO_IN_TransferComplete_CallBack();
 80029a0:	f7fe fbc6 	bl	8001130 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_I2S_RxHalfCpltCallback>:

/**
 * @brief  Rx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
	BSP_AUDIO_IN_HalfTransfer_CallBack();
 80029b4:	f7fe fbc8 	bl	8001148 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <BSP_AUDIO_IN_ClockConfig>:
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 * @note   This API is called by BSP_AUDIO_IN_Init()
 *         Being __weak it can be overwritten by the application
 */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s,
		uint32_t AudioFreq, void *Params) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rccclkinit;

	/*Enable PLLI2S clock*/
	HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	4618      	mov	r0, r3
 80029d2:	f005 fefd 	bl	80087d0 <HAL_RCCEx_GetPeriphCLKConfig>
	/* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	if ((AudioFreq & 0x7) == 0) {
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <BSP_AUDIO_IN_ClockConfig+0x38>
		/* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
		/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
		/* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80029e0:	2301      	movs	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
		rccclkinit.PLLI2S.PLLI2SN = 192;
 80029e4:	23c0      	movs	r3, #192	; 0xc0
 80029e6:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SR = 6;
 80029e8:	2306      	movs	r3, #6
 80029ea:	61bb      	str	r3, [r7, #24]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fe0b 	bl	800860c <HAL_RCCEx_PeriphCLKConfig>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
		rccclkinit.PLLI2S.PLLI2SN = 290;
		rccclkinit.PLLI2S.PLLI2SR = 2;
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
	}
}
 80029f6:	e00b      	b.n	8002a10 <BSP_AUDIO_IN_ClockConfig+0x50>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80029f8:	2301      	movs	r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
		rccclkinit.PLLI2S.PLLI2SN = 290;
 80029fc:	f44f 7391 	mov.w	r3, #290	; 0x122
 8002a00:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SR = 2;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8002a06:	f107 0310 	add.w	r3, r7, #16
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 fdfe 	bl	800860c <HAL_RCCEx_PeriphCLKConfig>
}
 8002a10:	bf00      	nop
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <BSP_AUDIO_IN_MspInit>:
/**
 * @brief  BSP AUDIO IN MSP Init.
 * @param  hi2s: I2S handle
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	; 0x30
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_i2sRx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the I2S2 peripheral clock */
	I2S2_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	4b4d      	ldr	r3, [pc, #308]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	4a4c      	ldr	r2, [pc, #304]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6413      	str	r3, [r2, #64]	; 0x40
 8002a32:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	69bb      	ldr	r3, [r7, #24]

	/* Enable I2S GPIO clocks */
	I2S2_SCK_GPIO_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a45      	ldr	r2, [pc, #276]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
	I2S2_MOSI_GPIO_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a3e      	ldr	r2, [pc, #248]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b3c      	ldr	r3, [pc, #240]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

	/* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28

	GPIO_InitStruct.Pin = I2S2_SCK_PIN;
 8002a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8002a88:	2305      	movs	r3, #5
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	4619      	mov	r1, r3
 8002a92:	4833      	ldr	r0, [pc, #204]	; (8002b60 <BSP_AUDIO_IN_MspInit+0x148>)
 8002a94:	f003 fd34 	bl	8006500 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S2_MOSI_PIN;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 8002a9c:	2305      	movs	r3, #5
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	482f      	ldr	r0, [pc, #188]	; (8002b64 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002aa8:	f003 fd2a 	bl	8006500 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	I2S2_DMAx_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4a29      	ldr	r2, [pc, #164]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aba:	6313      	str	r3, [r2, #48]	; 0x30
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <BSP_AUDIO_IN_MspInit+0x144>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]

	if (hi2s->Instance == I2S2) {
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <BSP_AUDIO_IN_MspInit+0x150>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d137      	bne.n	8002b42 <BSP_AUDIO_IN_MspInit+0x12a>
		/* Configure the hdma_i2sRx handle parameters */
		hdma_i2sRx.Init.Channel = I2S2_DMAx_CHANNEL;
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
		hdma_i2sRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
		hdma_i2sRx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
		hdma_i2sRx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aea:	611a      	str	r2, [r3, #16]
		hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 8002aec:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af2:	615a      	str	r2, [r3, #20]
		hdma_i2sRx.Init.MemDataAlignment = I2S2_DMAx_MEM_DATA_SIZE;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afa:	619a      	str	r2, [r3, #24]
		hdma_i2sRx.Init.Mode = DMA_CIRCULAR;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b02:	61da      	str	r2, [r3, #28]
		hdma_i2sRx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b0a:	621a      	str	r2, [r3, #32]
		hdma_i2sRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_i2sRx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b14:	2203      	movs	r2, #3
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_i2sRx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_i2sRx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <BSP_AUDIO_IN_MspInit+0x158>)
 8002b28:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b30:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sRx);
 8002b36:	480d      	ldr	r0, [pc, #52]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b38:	f003 f952 	bl	8005de0 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sRx);
 8002b3c:	480b      	ldr	r0, [pc, #44]	; (8002b6c <BSP_AUDIO_IN_MspInit+0x154>)
 8002b3e:	f003 f8a1 	bl	8005c84 <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	210f      	movs	r1, #15
 8002b46:	200e      	movs	r0, #14
 8002b48:	f003 f849 	bl	8005bde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ);
 8002b4c:	200e      	movs	r0, #14
 8002b4e:	f003 f862 	bl	8005c16 <HAL_NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3730      	adds	r7, #48	; 0x30
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40003800 	.word	0x40003800
 8002b6c:	2000120c 	.word	0x2000120c
 8002b70:	40026058 	.word	0x40026058

08002b74 <PDMDecoder_Init>:
 * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
 * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
 *         Number of audio channels (1: mono; 2: stereo)
 */
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn,
		uint32_t ChnlNbrOut) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

	/* Enable CRC peripheral to unlock the PDM library */
	__HAL_RCC_CRC_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <PDMDecoder_Init+0x124>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <PDMDecoder_Init+0x124>)
 8002b8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <PDMDecoder_Init+0x124>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]

	for (index = 0; index < ChnlNbrIn; index++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e06e      	b.n	8002c84 <PDMDecoder_Init+0x110>
		/* Init PDM filters */
		PDM_FilterHandler[index].bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <PDMDecoder_Init+0x128>)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	214c      	movs	r1, #76	; 0x4c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8002bb6:	4a39      	ldr	r2, [pc, #228]	; (8002c9c <PDMDecoder_Init+0x128>)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	214c      	movs	r1, #76	; 0x4c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8002bc8:	4a34      	ldr	r2, [pc, #208]	; (8002c9c <PDMDecoder_Init+0x128>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	214c      	movs	r1, #76	; 0x4c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <PDMDecoder_Init+0x12c>)
 8002bd8:	601a      	str	r2, [r3, #0]
		PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	b298      	uxth	r0, r3
 8002bde:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <PDMDecoder_Init+0x128>)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	214c      	movs	r1, #76	; 0x4c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	330a      	adds	r3, #10
 8002bec:	4602      	mov	r2, r0
 8002bee:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].in_ptr_channels = ChnlNbrIn;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	b298      	uxth	r0, r3
 8002bf4:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <PDMDecoder_Init+0x128>)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	214c      	movs	r1, #76	; 0x4c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3308      	adds	r3, #8
 8002c02:	4602      	mov	r2, r0
 8002c04:	801a      	strh	r2, [r3, #0]
		PDM_Filter_Init((PDM_Filter_Handler_t*) (&PDM_FilterHandler[index]));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	224c      	movs	r2, #76	; 0x4c
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <PDMDecoder_Init+0x128>)
 8002c10:	4413      	add	r3, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f009 fb38 	bl	800c288 <PDM_Filter_Init>

		/* PDM lib config phase */
		PDM_FilterConfig[index].output_samples_number = AudioFreq / 1000; //AudioFreq / 1000;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a22      	ldr	r2, [pc, #136]	; (8002ca4 <PDMDecoder_Init+0x130>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	b298      	uxth	r0, r3
 8002c24:	4920      	ldr	r1, [pc, #128]	; (8002ca8 <PDMDecoder_Init+0x134>)
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	440b      	add	r3, r1
 8002c32:	3302      	adds	r3, #2
 8002c34:	4602      	mov	r2, r0
 8002c36:	801a      	strh	r2, [r3, #0]
		PDM_FilterConfig[index].mic_gain = 24;
 8002c38:	491b      	ldr	r1, [pc, #108]	; (8002ca8 <PDMDecoder_Init+0x134>)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	440b      	add	r3, r1
 8002c46:	3304      	adds	r3, #4
 8002c48:	2218      	movs	r2, #24
 8002c4a:	801a      	strh	r2, [r3, #0]
		PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8002c4c:	4916      	ldr	r1, [pc, #88]	; (8002ca8 <PDMDecoder_Init+0x134>)
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	440b      	add	r3, r1
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	801a      	strh	r2, [r3, #0]
		PDM_Filter_setConfig((PDM_Filter_Handler_t*) &PDM_FilterHandler[index],
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	224c      	movs	r2, #76	; 0x4c
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <PDMDecoder_Init+0x128>)
 8002c68:	1898      	adds	r0, r3, r2
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <PDMDecoder_Init+0x134>)
 8002c76:	4413      	add	r3, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f009 fb8f 	bl	800c39c <PDM_Filter_setConfig>
	for (index = 0; index < ChnlNbrIn; index++) {
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3301      	adds	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d38c      	bcc.n	8002ba6 <PDMDecoder_Init+0x32>
				&PDM_FilterConfig[index]);
	}
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	20013ba0 	.word	0x20013ba0
 8002ca0:	7e809d48 	.word	0x7e809d48
 8002ca4:	10624dd3 	.word	0x10624dd3
 8002ca8:	20013b94 	.word	0x20013b94

08002cac <I2S2_Init>:
 * @note   This function assumes that the I2S input clock (through PLL_R in
 *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
 *         is already configured and ready to be used.
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S2_Init(uint32_t AudioFreq) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	/* Initialize the hAudioInI2s Instance parameter */
	hAudioInI2s.Instance = I2S2;
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <I2S2_Init+0x68>)
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <I2S2_Init+0x6c>)
 8002cb8:	601a      	str	r2, [r3, #0]

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hAudioInI2s);
 8002cba:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <I2S2_Init+0x68>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <I2S2_Init+0x68>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc8:	61da      	str	r2, [r3, #28]

	/* I2S2 peripheral configuration */
	hAudioInI2s.Init.AudioFreq = 2*AudioFreq;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <I2S2_Init+0x68>)
 8002cd0:	6153      	str	r3, [r2, #20]
	hAudioInI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <I2S2_Init+0x68>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	61da      	str	r2, [r3, #28]
	hAudioInI2s.Init.CPOL = I2S_CPOL_HIGH;
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <I2S2_Init+0x68>)
 8002cda:	2208      	movs	r2, #8
 8002cdc:	619a      	str	r2, [r3, #24]
	hAudioInI2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <I2S2_Init+0x68>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
	hAudioInI2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <I2S2_Init+0x68>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
	hAudioInI2s.Init.Mode = I2S_MODE_MASTER_RX;
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <I2S2_Init+0x68>)
 8002cec:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002cf0:	605a      	str	r2, [r3, #4]
	hAudioInI2s.Init.Standard = I2S_STANDARD_LSB;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <I2S2_Init+0x68>)
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	609a      	str	r2, [r3, #8]

	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK) {
 8002cf8:	4806      	ldr	r0, [pc, #24]	; (8002d14 <I2S2_Init+0x68>)
 8002cfa:	f004 f835 	bl	8006d68 <HAL_I2S_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <I2S2_Init+0x5c>
		return AUDIO_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <I2S2_Init+0x5e>
	} else {
		return AUDIO_OK;
 8002d08:	2300      	movs	r3, #0
	}
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20013c80 	.word	0x20013c80
 8002d18:	40003800 	.word	0x40003800

08002d1c <HAL_I2S_ErrorCallback>:

/**
 * @brief  I2S error callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	/* Manage the error generated on DMA FIFO: This function
	 should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
	if (hi2s->Instance == I2S3) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <HAL_I2S_ErrorCallback+0x2c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2S_ErrorCallback+0x16>
		BSP_AUDIO_OUT_Error_CallBack();
 8002d2e:	f7ff fd7e 	bl	800282e <BSP_AUDIO_OUT_Error_CallBack>
	}
	if (hi2s->Instance == I2S2) {
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <HAL_I2S_ErrorCallback+0x30>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2S_ErrorCallback+0x24>
		BSP_AUDIO_IN_Error_Callback();
 8002d3c:	f7fe fa10 	bl	8001160 <BSP_AUDIO_IN_Error_Callback>
	}
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40003c00 	.word	0x40003c00
 8002d4c:	40003800 	.word	0x40003800

08002d50 <arm_mult_f32>:
void arm_mult_f32(
  const float32_t * pSrcA,
  const float32_t * pSrcB,
        float32_t * pDst,
        uint32_t blockSize)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8002d62:	e013      	b.n	8002d8c <arm_mult_f32+0x3c>
  {
    /* C = A * B */

    /* Multiply input and store result in destination buffer. */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1d1a      	adds	r2, r3, #4
 8002d68:	60fa      	str	r2, [r7, #12]
 8002d6a:	ed93 7a00 	vldr	s14, [r3]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1d1a      	adds	r2, r3, #4
 8002d72:	60ba      	str	r2, [r7, #8]
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	1d1a      	adds	r2, r3, #4
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e8      	bne.n	8002d64 <arm_mult_f32+0x14>
  }

}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <arm_cmplx_mag_squared_f32>:
#else
void arm_cmplx_mag_squared_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8002db0:	e01b      	b.n	8002dea <arm_cmplx_mag_squared_f32+0x4a>
  {
    /* C[0] = (A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1d1a      	adds	r2, r3, #4
 8002db6:	60fa      	str	r2, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61bb      	str	r3, [r7, #24]
    imag = *pSrc++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1d1a      	adds	r2, r3, #4
 8002dc0:	60fa      	str	r2, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	617b      	str	r3, [r7, #20]

    /* store result in destination buffer. */
    *pDst++ = (real * real) + (imag * imag);
 8002dc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002dce:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1d1a      	adds	r2, r3, #4
 8002dda:	60ba      	str	r2, [r7, #8]
 8002ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de0:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e0      	bne.n	8002db2 <arm_cmplx_mag_squared_f32+0x12>
  }

}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b089      	sub	sp, #36	; 0x24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	460b      	mov	r3, r1
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e043      	b.n	8002e9a <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	441a      	add	r2, r3
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	440b      	add	r3, r1
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	3301      	adds	r3, #1
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3301      	adds	r3, #1
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	441a      	add	r2, r3
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	68f9      	ldr	r1, [r7, #12]
 8002e80:	440b      	add	r3, r1
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	601a      	str	r2, [r3, #0]

    i += 2;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	3302      	adds	r3, #2
 8002e98:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3b7      	bcc.n	8002e12 <arm_bitreversal_32+0x14>
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	3724      	adds	r7, #36	; 0x24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b0a0      	sub	sp, #128	; 0x80
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8002ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8002ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8002ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8002ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8002ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002eee:	4413      	add	r3, r2
 8002ef0:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8002ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ef8:	e1b6      	b.n	8003268 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8002f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8002f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8002f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8002f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8002f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8002f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8002f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8002f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8002f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8002f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8002f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8002f5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	1d1a      	adds	r2, r3, #4
 8002f66:	603a      	str	r2, [r7, #0]
 8002f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8002f70:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	1d1a      	adds	r2, r3, #4
 8002f7c:	603a      	str	r2, [r7, #0]
 8002f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f82:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8002f86:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	1d1a      	adds	r2, r3, #4
 8002f92:	603a      	str	r2, [r7, #0]
 8002f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f98:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8002f9c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002fa0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	1d1a      	adds	r2, r3, #4
 8002fa8:	603a      	str	r2, [r7, #0]
 8002faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fae:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8002fb2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002fb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8002fc2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002fc6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8002fd2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002fd6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fde:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8002fe2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002fe6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8002ff2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ffa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ffc:	1d1a      	adds	r2, r3, #4
 8002ffe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003004:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8003008:	ed97 7a07 	vldr	s14, [r7, #28]
 800300c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003010:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003012:	1d1a      	adds	r2, r3, #4
 8003014:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800301e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003022:	edd7 7a04 	vldr	s15, [r7, #16]
 8003026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003028:	1d1a      	adds	r2, r3, #4
 800302a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8003034:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003038:	edd7 7a05 	vldr	s15, [r7, #20]
 800303c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003046:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800304a:	ed97 7a02 	vldr	s14, [r7, #8]
 800304e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003056:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800305a:	ed97 7a03 	vldr	s14, [r7, #12]
 800305e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003066:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800306a:	ed97 7a04 	vldr	s14, [r7, #16]
 800306e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003076:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800307a:	ed97 7a05 	vldr	s14, [r7, #20]
 800307e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800308a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800308c:	1d1a      	adds	r2, r3, #4
 800308e:	673a      	str	r2, [r7, #112]	; 0x70
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8003094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	673a      	str	r2, [r7, #112]	; 0x70
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800309e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 80030ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80030b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 80030be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80030c2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80030ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030da:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80030de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e0:	1d1a      	adds	r2, r3, #4
 80030e2:	677a      	str	r2, [r7, #116]	; 0x74
 80030e4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80030e8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80030ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f0:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80030f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f6:	1d1a      	adds	r2, r3, #4
 80030f8:	677a      	str	r2, [r7, #116]	; 0x74
 80030fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80030fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003106:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800310a:	edd7 7a02 	vldr	s15, [r7, #8]
 800310e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800311a:	edd7 7a03 	vldr	s15, [r7, #12]
 800311e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003126:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800312a:	edd7 7a03 	vldr	s15, [r7, #12]
 800312e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800313a:	edd7 7a02 	vldr	s15, [r7, #8]
 800313e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800314a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314c:	1d1a      	adds	r2, r3, #4
 800314e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003150:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003154:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315c:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8003160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	67ba      	str	r2, [r7, #120]	; 0x78
 8003166:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800316a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800316e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003172:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8003176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003178:	1d1a      	adds	r2, r3, #4
 800317a:	673a      	str	r2, [r7, #112]	; 0x70
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8003180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003182:	1d1a      	adds	r2, r3, #4
 8003184:	673a      	str	r2, [r7, #112]	; 0x70
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800318a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800318e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800319a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800319e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 80031aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031ae:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 80031ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80031be:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80031ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	677a      	str	r2, [r7, #116]	; 0x74
 80031d0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80031d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80031d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031dc:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80031e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	677a      	str	r2, [r7, #116]	; 0x74
 80031e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80031ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80031ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f2:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80031f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80031fa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8003206:	edd7 7a05 	vldr	s15, [r7, #20]
 800320a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8003216:	edd7 7a05 	vldr	s15, [r7, #20]
 800321a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8003226:	edd7 7a04 	vldr	s15, [r7, #16]
 800322a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800322e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003232:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8003236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003238:	1d1a      	adds	r2, r3, #4
 800323a:	67ba      	str	r2, [r7, #120]	; 0x78
 800323c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003240:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003248:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800324c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324e:	1d1a      	adds	r2, r3, #4
 8003250:	67ba      	str	r2, [r7, #120]	; 0x78
 8003252:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003256:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003264:	3b01      	subs	r3, #1
 8003266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326a:	2b00      	cmp	r3, #0
 800326c:	f47f ae45 	bne.w	8002efa <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8003270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003272:	b299      	uxth	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	2302      	movs	r3, #2
 800327a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800327c:	f000 ffc4 	bl	8004208 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8003280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003282:	b299      	uxth	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	2302      	movs	r3, #2
 800328a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800328c:	f000 ffbc 	bl	8004208 <arm_radix8_butterfly_f32>
}
 8003290:	bf00      	nop
 8003292:	3780      	adds	r7, #128	; 0x80
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b0ac      	sub	sp, #176	; 0xb0
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80032ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80032bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80032c6:	4413      	add	r3, r2
 80032c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80032cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80032d6:	4413      	add	r3, r2
 80032d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80032e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032e4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80032e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ea:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80032ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032f0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80032f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032f6:	3b04      	subs	r3, #4
 80032f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80032fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003300:	3b04      	subs	r3, #4
 8003302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8003306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800330a:	3b04      	subs	r3, #4
 800330c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8003310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800331a:	4413      	add	r3, r2
 800331c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003328:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800332c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8003338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8003342:	2302      	movs	r3, #2
 8003344:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8003346:	2304      	movs	r3, #4
 8003348:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800334a:	2306      	movs	r3, #6
 800334c:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	ed93 7a00 	vldr	s14, [r3]
 8003354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003360:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	ed93 7a00 	vldr	s14, [r3]
 800336a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336e:	edd3 7a00 	vldr	s15, [r3]
 8003372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003376:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	3304      	adds	r3, #4
 800337e:	ed93 7a00 	vldr	s14, [r3]
 8003382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003386:	3304      	adds	r3, #4
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003390:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	3304      	adds	r3, #4
 8003398:	ed93 7a00 	vldr	s14, [r3]
 800339c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a0:	3304      	adds	r3, #4
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80033ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033b2:	3304      	adds	r3, #4
 80033b4:	ed93 7a00 	vldr	s14, [r3]
 80033b8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80033bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033c4:	3304      	adds	r3, #4
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80033d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80033de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033e6:	edd3 7a00 	vldr	s15, [r3]
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80033f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033f6:	edd3 7a00 	vldr	s15, [r3]
 80033fa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80033fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003402:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003412:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003416:	3304      	adds	r3, #4
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003428:	3304      	adds	r3, #4
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003432:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800343a:	3304      	adds	r3, #4
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003444:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800344c:	3304      	adds	r3, #4
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003456:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800345a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800345e:	ed93 7a00 	vldr	s14, [r3]
 8003462:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800346a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800346e:	edd3 7a00 	vldr	s15, [r3]
 8003472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003476:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800347a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800347e:	ed93 7a00 	vldr	s14, [r3]
 8003482:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	1d1a      	adds	r2, r3, #4
 8003496:	603a      	str	r2, [r7, #0]
 8003498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80034a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034a4:	3304      	adds	r3, #4
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80034ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034b6:	3304      	adds	r3, #4
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	603a      	str	r2, [r7, #0]
 80034c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c6:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80034ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034ce:	1d1a      	adds	r2, r3, #4
 80034d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80034d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80034d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034dc:	1d1a      	adds	r2, r3, #4
 80034de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80034e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80034e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ea:	1d1a      	adds	r2, r3, #4
 80034ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80034f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f8:	1d1a      	adds	r2, r3, #4
 80034fa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8003502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8003510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003526:	4413      	add	r3, r2
 8003528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800352c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003534:	4413      	add	r3, r2
 8003536:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800353a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003542:	4413      	add	r3, r2
 8003544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8003548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800354c:	3b02      	subs	r3, #2
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003554:	e31a      	b.n	8003b8c <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	ed93 7a00 	vldr	s14, [r3]
 800355c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003568:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	ed93 7a00 	vldr	s14, [r3]
 8003572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	ed93 7a00 	vldr	s14, [r3]
 800358a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800358e:	3304      	adds	r3, #4
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003598:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	3304      	adds	r3, #4
 80035a0:	ed93 7a00 	vldr	s14, [r3]
 80035a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a8:	3304      	adds	r3, #4
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 80035b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ba:	3304      	adds	r3, #4
 80035bc:	ed93 7a00 	vldr	s14, [r3]
 80035c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80035c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035cc:	3304      	adds	r3, #4
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80035da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80035e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ee:	edd3 7a00 	vldr	s15, [r3]
 80035f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80035fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800360a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800360e:	edd3 7a00 	vldr	s15, [r3]
 8003612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003616:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800361a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800361e:	3304      	adds	r3, #4
 8003620:	edd3 7a00 	vldr	s15, [r3]
 8003624:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003628:	ee37 7a67 	vsub.f32	s14, s14, s15
 800362c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003630:	3304      	adds	r3, #4
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363a:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800363e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003642:	3304      	adds	r3, #4
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800364c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003650:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003654:	3304      	adds	r3, #4
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365e:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003666:	ed93 7a00 	vldr	s14, [r3]
 800366a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800366e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367e:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003686:	ed93 7a00 	vldr	s14, [r3]
 800368a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800368e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003696:	edd3 7a00 	vldr	s15, [r3]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	603a      	str	r2, [r7, #0]
 80036a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a4:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80036a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036ac:	3304      	adds	r3, #4
 80036ae:	ed93 7a00 	vldr	s14, [r3]
 80036b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80036b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036be:	3304      	adds	r3, #4
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	603a      	str	r2, [r7, #0]
 80036ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ce:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80036d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036d6:	3b04      	subs	r3, #4
 80036d8:	ed93 7a00 	vldr	s14, [r3]
 80036dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036e0:	3b04      	subs	r3, #4
 80036e2:	edd3 7a00 	vldr	s15, [r3]
 80036e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ea:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80036ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036f2:	3b04      	subs	r3, #4
 80036f4:	ed93 7a00 	vldr	s14, [r3]
 80036f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036fc:	3b04      	subs	r3, #4
 80036fe:	edd3 7a00 	vldr	s15, [r3]
 8003702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003706:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800370a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800370e:	ed93 7a00 	vldr	s14, [r3]
 8003712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8003722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003726:	ed93 7a00 	vldr	s14, [r3]
 800372a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003736:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800373a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800373e:	ed93 7a00 	vldr	s14, [r3]
 8003742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800374e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003756:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800375a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800375e:	ed93 7a00 	vldr	s14, [r3]
 8003762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800376e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003772:	3b04      	subs	r3, #4
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800377c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003780:	3b04      	subs	r3, #4
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800378e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003792:	3b04      	subs	r3, #4
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800379c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037a4:	3b04      	subs	r3, #4
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 80037b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80037be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80037d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037d6:	ed93 7a00 	vldr	s14, [r3]
 80037da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037de:	edd3 7a00 	vldr	s15, [r3]
 80037e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037e6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80037ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ee:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80037f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037f6:	3b04      	subs	r3, #4
 80037f8:	ed93 7a00 	vldr	s14, [r3]
 80037fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003800:	3b04      	subs	r3, #4
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800380a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800380e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003812:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8003816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800381a:	ed93 7a00 	vldr	s14, [r3]
 800381e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003822:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003832:	1f1a      	subs	r2, r3, #4
 8003834:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8003840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003844:	3b04      	subs	r3, #4
 8003846:	ed93 7a00 	vldr	s14, [r3]
 800384a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800384e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003856:	3b04      	subs	r3, #4
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003860:	1f1a      	subs	r2, r3, #4
 8003862:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800386e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800387c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003880:	1d1a      	adds	r2, r3, #4
 8003882:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800388a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800388e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003896:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800389a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800389e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 80038aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80038ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 80038ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80038be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80038c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 80038ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80038d4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80038d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80038dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e0:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80038e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80038ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80038f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80038f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fa:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80038fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003902:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800390e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003912:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800391e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003922:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800392e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003932:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800393e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003942:	1f1a      	subs	r2, r3, #4
 8003944:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003948:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800394c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003954:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8003958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800395c:	1f1a      	subs	r2, r3, #4
 800395e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003962:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003966:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800396a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8003972:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800397a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8003982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800398a:	4413      	add	r3, r2
 800398c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8003990:	edd7 7a07 	vldr	s15, [r7, #28]
 8003994:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 80039a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80039a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80039a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 80039b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80039b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80039b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039bc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 80039c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80039c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80039c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 80039d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039d4:	1d1a      	adds	r2, r3, #4
 80039d6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039da:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80039de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e6:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80039ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ee:	1d1a      	adds	r2, r3, #4
 80039f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039f4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80039f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80039fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a00:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8003a04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a08:	eef1 7a67 	vneg.f32	s15, s15
 8003a0c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a14:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8003a18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a24:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8003a28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a2c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a34:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8003a38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a3c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a44:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8003a48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a4c:	1f1a      	subs	r2, r3, #4
 8003a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a52:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003a56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a5e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8003a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a66:	1f1a      	subs	r2, r3, #4
 8003a68:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a6c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a70:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a78:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8003a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8003a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8003a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a94:	4413      	add	r3, r2
 8003a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8003a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8003aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8003aba:	edd7 7a04 	vldr	s15, [r7, #16]
 8003abe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8003aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ace:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8003ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ade:	1d1a      	adds	r2, r3, #4
 8003ae0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ae4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003ae8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af0:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8003af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003af8:	1d1a      	adds	r2, r3, #4
 8003afa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003afe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b02:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b0a:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8003b0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b12:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8003b1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b22:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8003b2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8003b3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b42:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8003b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b52:	1f1a      	subs	r2, r3, #4
 8003b54:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8003b58:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003b5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b64:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8003b68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b6c:	1f1a      	subs	r2, r3, #4
 8003b6e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8003b72:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b76:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8003b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b86:	3b01      	subs	r3, #1
 8003b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f47f ace0 	bne.w	8003556 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	ed93 7a00 	vldr	s14, [r3]
 8003b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ba0:	edd3 7a00 	vldr	s15, [r3]
 8003ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	ed93 7a00 	vldr	s14, [r3]
 8003bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb6:	edd3 7a00 	vldr	s15, [r3]
 8003bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bbe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	ed93 7a00 	vldr	s14, [r3]
 8003bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bce:	3304      	adds	r3, #4
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	3304      	adds	r3, #4
 8003be0:	ed93 7a00 	vldr	s14, [r3]
 8003be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003be8:	3304      	adds	r3, #4
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	ed93 7a00 	vldr	s14, [r3]
 8003c00:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	edd3 7a00 	vldr	s15, [r3]
 8003c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c16:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003c26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c36:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003c46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c5e:	3304      	adds	r3, #4
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003c68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c70:	3304      	adds	r3, #4
 8003c72:	edd3 7a00 	vldr	s15, [r3]
 8003c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7a:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c82:	3304      	adds	r3, #4
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003c8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c94:	3304      	adds	r3, #4
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ca6:	ed93 7a00 	vldr	s14, [r3]
 8003caa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cbe:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cc6:	ed93 7a00 	vldr	s14, [r3]
 8003cca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd6:	edd3 7a00 	vldr	s15, [r3]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	603a      	str	r2, [r7, #0]
 8003ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cec:	3304      	adds	r3, #4
 8003cee:	ed93 7a00 	vldr	s14, [r3]
 8003cf2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cfe:	3304      	adds	r3, #4
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	603a      	str	r2, [r7, #0]
 8003d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0e:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8003d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8003d1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8003d22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003d26:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8003d32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003d36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8003d42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003d46:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8003d52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003d56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8003d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d66:	1d1a      	adds	r2, r3, #4
 8003d68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003d6c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003d70:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d78:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8003d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d80:	1d1a      	adds	r2, r3, #4
 8003d82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003d86:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003d8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d92:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8003d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8003d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8003da6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003daa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8003db6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8003dc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8003dd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8003de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003df0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003df4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfc:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8003e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e0a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003e0e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e16:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8003e1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8003e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8003e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e2e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8003e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8003e4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e4e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8003e5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e66:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8003e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e6e:	1d1a      	adds	r2, r3, #4
 8003e70:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e74:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003e78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e80:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8003e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e8e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003e92:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9a:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8003e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea2:	b299      	uxth	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003eac:	f000 f9ac 	bl	8004208 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8003eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003eb4:	b299      	uxth	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	2304      	movs	r3, #4
 8003ebc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003ebe:	f000 f9a3 	bl	8004208 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8003ec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ec6:	b299      	uxth	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	2304      	movs	r3, #4
 8003ece:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003ed0:	f000 f99a 	bl	8004208 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8003ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ed8:	b299      	uxth	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	2304      	movs	r3, #4
 8003ee0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003ee2:	f000 f991 	bl	8004208 <arm_radix8_butterfly_f32>
}
 8003ee6:	bf00      	nop
 8003ee8:	37b0      	adds	r7, #176	; 0xb0
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b088      	sub	sp, #32
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	461a      	mov	r2, r3
 8003efc:	460b      	mov	r3, r1
 8003efe:	71fb      	strb	r3, [r7, #7]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d117      	bne.n	8003f40 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3304      	adds	r3, #4
 8003f14:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	e00d      	b.n	8003f38 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	edd3 7a00 	vldr	s15, [r3]
 8003f22:	eef1 7a67 	vneg.f32	s15, s15
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3301      	adds	r3, #1
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d3ed      	bcc.n	8003f1c <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	d040      	beq.n	8003fca <arm_cfft_f32+0xdc>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4e:	d845      	bhi.n	8003fdc <arm_cfft_f32+0xee>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f56:	d033      	beq.n	8003fc0 <arm_cfft_f32+0xd2>
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5e:	d83d      	bhi.n	8003fdc <arm_cfft_f32+0xee>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d026      	beq.n	8003fb6 <arm_cfft_f32+0xc8>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d835      	bhi.n	8003fdc <arm_cfft_f32+0xee>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f76:	d028      	beq.n	8003fca <arm_cfft_f32+0xdc>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7e:	d82d      	bhi.n	8003fdc <arm_cfft_f32+0xee>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f86:	d01b      	beq.n	8003fc0 <arm_cfft_f32+0xd2>
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8e:	d825      	bhi.n	8003fdc <arm_cfft_f32+0xee>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d00f      	beq.n	8003fb6 <arm_cfft_f32+0xc8>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d81f      	bhi.n	8003fdc <arm_cfft_f32+0xee>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b40      	cmp	r3, #64	; 0x40
 8003fa0:	d013      	beq.n	8003fca <arm_cfft_f32+0xdc>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d819      	bhi.n	8003fdc <arm_cfft_f32+0xee>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d003      	beq.n	8003fb6 <arm_cfft_f32+0xc8>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d005      	beq.n	8003fc0 <arm_cfft_f32+0xd2>
 8003fb4:	e012      	b.n	8003fdc <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7fe ff79 	bl	8002eb0 <arm_cfft_radix8by2_f32>
    break;
 8003fbe:	e00d      	b.n	8003fdc <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff f968 	bl	8003298 <arm_cfft_radix8by4_f32>
    break;
 8003fc8:	e008      	b.n	8003fdc <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	b299      	uxth	r1, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f000 f917 	bl	8004208 <arm_radix8_butterfly_f32>
    break;
 8003fda:	bf00      	nop
  }

  if ( bitReverseFlag )
 8003fdc:	79bb      	ldrb	r3, [r7, #6]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8999      	ldrh	r1, [r3, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68b8      	ldr	r0, [r7, #8]
 8003fee:	f7fe ff06 	bl	8002dfe <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d130      	bne.n	800405a <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800400a:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e01c      	b.n	8004052 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1d1a      	adds	r2, r3, #4
 800401c:	61ba      	str	r2, [r7, #24]
 800401e:	ed93 7a00 	vldr	s14, [r3]
 8004022:	edd7 7a04 	vldr	s15, [r7, #16]
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	edd3 7a00 	vldr	s15, [r3]
 8004034:	eeb1 7a67 	vneg.f32	s14, s15
 8004038:	edd7 7a04 	vldr	s15, [r7, #16]
 800403c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	3304      	adds	r3, #4
 800404a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	3301      	adds	r3, #1
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	429a      	cmp	r2, r3
 8004058:	d3de      	bcc.n	8004018 <arm_cfft_f32+0x12a>
    }
  }
}
 800405a:	bf00      	nop
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8004070:	2300      	movs	r3, #0
 8004072:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004088:	d02c      	beq.n	80040e4 <arm_cfft_init_f32+0x80>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	f300 809e 	bgt.w	80041ce <arm_cfft_init_f32+0x16a>
 8004092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004096:	d032      	beq.n	80040fe <arm_cfft_init_f32+0x9a>
 8004098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409c:	f300 8097 	bgt.w	80041ce <arm_cfft_init_f32+0x16a>
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a4:	d038      	beq.n	8004118 <arm_cfft_init_f32+0xb4>
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	f300 8090 	bgt.w	80041ce <arm_cfft_init_f32+0x16a>
 80040ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b2:	d03e      	beq.n	8004132 <arm_cfft_init_f32+0xce>
 80040b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b8:	f300 8089 	bgt.w	80041ce <arm_cfft_init_f32+0x16a>
 80040bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c0:	d044      	beq.n	800414c <arm_cfft_init_f32+0xe8>
 80040c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c6:	f300 8082 	bgt.w	80041ce <arm_cfft_init_f32+0x16a>
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	d04b      	beq.n	8004166 <arm_cfft_init_f32+0x102>
 80040ce:	2b80      	cmp	r3, #128	; 0x80
 80040d0:	dc7d      	bgt.n	80041ce <arm_cfft_init_f32+0x16a>
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d054      	beq.n	8004180 <arm_cfft_init_f32+0x11c>
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	dc79      	bgt.n	80041ce <arm_cfft_init_f32+0x16a>
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d06a      	beq.n	80041b4 <arm_cfft_init_f32+0x150>
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d05b      	beq.n	800419a <arm_cfft_init_f32+0x136>
 80040e2:	e074      	b.n	80041ce <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 80040e4:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <arm_cfft_init_f32+0x180>)
 80040e6:	899a      	ldrh	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	819a      	strh	r2, [r3, #12]
 80040ec:	4b3d      	ldr	r3, [pc, #244]	; (80041e4 <arm_cfft_init_f32+0x180>)
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <arm_cfft_init_f32+0x180>)
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	605a      	str	r2, [r3, #4]
            break;
 80040fc:	e06a      	b.n	80041d4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 80040fe:	4b3a      	ldr	r3, [pc, #232]	; (80041e8 <arm_cfft_init_f32+0x184>)
 8004100:	899a      	ldrh	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	819a      	strh	r2, [r3, #12]
 8004106:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <arm_cfft_init_f32+0x184>)
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <arm_cfft_init_f32+0x184>)
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	605a      	str	r2, [r3, #4]

            break;
 8004116:	e05d      	b.n	80041d4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8004118:	4b34      	ldr	r3, [pc, #208]	; (80041ec <arm_cfft_init_f32+0x188>)
 800411a:	899a      	ldrh	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	819a      	strh	r2, [r3, #12]
 8004120:	4b32      	ldr	r3, [pc, #200]	; (80041ec <arm_cfft_init_f32+0x188>)
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	4b30      	ldr	r3, [pc, #192]	; (80041ec <arm_cfft_init_f32+0x188>)
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	605a      	str	r2, [r3, #4]

            break;
 8004130:	e050      	b.n	80041d4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 8004132:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <arm_cfft_init_f32+0x18c>)
 8004134:	899a      	ldrh	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	819a      	strh	r2, [r3, #12]
 800413a:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <arm_cfft_init_f32+0x18c>)
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <arm_cfft_init_f32+0x18c>)
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	605a      	str	r2, [r3, #4]
            break;
 800414a:	e043      	b.n	80041d4 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 800414c:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <arm_cfft_init_f32+0x190>)
 800414e:	899a      	ldrh	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	819a      	strh	r2, [r3, #12]
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <arm_cfft_init_f32+0x190>)
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <arm_cfft_init_f32+0x190>)
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]
            break;
 8004164:	e036      	b.n	80041d4 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <arm_cfft_init_f32+0x194>)
 8004168:	899a      	ldrh	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	819a      	strh	r2, [r3, #12]
 800416e:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <arm_cfft_init_f32+0x194>)
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <arm_cfft_init_f32+0x194>)
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	605a      	str	r2, [r3, #4]
            break;
 800417e:	e029      	b.n	80041d4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8004180:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <arm_cfft_init_f32+0x198>)
 8004182:	899a      	ldrh	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	819a      	strh	r2, [r3, #12]
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <arm_cfft_init_f32+0x198>)
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <arm_cfft_init_f32+0x198>)
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	605a      	str	r2, [r3, #4]
            break;
 8004198:	e01c      	b.n	80041d4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800419a:	4b19      	ldr	r3, [pc, #100]	; (8004200 <arm_cfft_init_f32+0x19c>)
 800419c:	899a      	ldrh	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	819a      	strh	r2, [r3, #12]
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <arm_cfft_init_f32+0x19c>)
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	4b15      	ldr	r3, [pc, #84]	; (8004200 <arm_cfft_init_f32+0x19c>)
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	605a      	str	r2, [r3, #4]
            break;
 80041b2:	e00f      	b.n	80041d4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 80041b4:	4b13      	ldr	r3, [pc, #76]	; (8004204 <arm_cfft_init_f32+0x1a0>)
 80041b6:	899a      	ldrh	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	819a      	strh	r2, [r3, #12]
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <arm_cfft_init_f32+0x1a0>)
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <arm_cfft_init_f32+0x1a0>)
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	605a      	str	r2, [r3, #4]
            break;
 80041cc:	e002      	b.n	80041d4 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 80041ce:	23ff      	movs	r3, #255	; 0xff
 80041d0:	73fb      	strb	r3, [r7, #15]
            break;
 80041d2:	bf00      	nop
        }


        return (status);
 80041d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	0803468c 	.word	0x0803468c
 80041e8:	0803467c 	.word	0x0803467c
 80041ec:	0803466c 	.word	0x0803466c
 80041f0:	0803465c 	.word	0x0803465c
 80041f4:	0803464c 	.word	0x0803464c
 80041f8:	0803463c 	.word	0x0803463c
 80041fc:	0803462c 	.word	0x0803462c
 8004200:	0803461c 	.word	0x0803461c
 8004204:	0803460c 	.word	0x0803460c

08004208 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8004208:	b480      	push	{r7}
 800420a:	b0bd      	sub	sp, #244	; 0xf4
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	461a      	mov	r2, r3
 8004214:	460b      	mov	r3, r1
 8004216:	817b      	strh	r3, [r7, #10]
 8004218:	4613      	mov	r3, r2
 800421a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <arm_radix8_butterfly_f32+0x3c>)
 800421e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8004222:	897b      	ldrh	r3, [r7, #10]
 8004224:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8004228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004234:	08db      	lsrs	r3, r3, #3
 8004236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004240:	e002      	b.n	8004248 <arm_radix8_butterfly_f32+0x40>
 8004242:	bf00      	nop
 8004244:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8004248:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	4413      	add	r3, r2
 8004252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8004256:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425e:	4413      	add	r3, r2
 8004260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8004264:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426c:	4413      	add	r3, r2
 800426e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8004272:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	4413      	add	r3, r2
 800427c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8004280:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004288:	4413      	add	r3, r2
 800428a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800428e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004296:	4413      	add	r3, r2
 8004298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800429c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a4:	4413      	add	r3, r2
 80042a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80042aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	ed93 7a00 	vldr	s14, [r3]
 80042b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	edd3 7a00 	vldr	s15, [r3]
 80042c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80042ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	ed93 7a00 	vldr	s14, [r3]
 80042dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	edd3 7a00 	vldr	s15, [r3]
 80042ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ee:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80042f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	ed93 7a00 	vldr	s14, [r3]
 8004300:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004312:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	ed93 7a00 	vldr	s14, [r3]
 8004324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	edd3 7a00 	vldr	s15, [r3]
 8004332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004336:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800433a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	ed93 7a00 	vldr	s14, [r3]
 8004348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	edd3 7a00 	vldr	s15, [r3]
 8004356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800435a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800435e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	ed93 7a00 	vldr	s14, [r3]
 800436c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800437e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004382:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	ed93 7a00 	vldr	s14, [r3]
 8004390:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80043a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	ed93 7a00 	vldr	s14, [r3]
 80043b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	edd3 7a00 	vldr	s15, [r3]
 80043c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80043ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80043ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80043d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80043da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80043de:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80043e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80043ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80043ee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80043f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80043fa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80043fe:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004406:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800440a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004418:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800441c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004420:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8004424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004432:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800443a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800443e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	3304      	adds	r3, #4
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	ed93 7a00 	vldr	s14, [r3]
 800444e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	3304      	adds	r3, #4
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4413      	add	r3, r2
 800445a:	edd3 7a00 	vldr	s15, [r3]
 800445e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004462:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	3304      	adds	r3, #4
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	ed93 7a00 	vldr	s14, [r3]
 8004476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	3304      	adds	r3, #4
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	edd3 7a00 	vldr	s15, [r3]
 8004486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800448a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800448e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	3304      	adds	r3, #4
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	ed93 7a00 	vldr	s14, [r3]
 800449e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3304      	adds	r3, #4
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	edd3 7a00 	vldr	s15, [r3]
 80044ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80044b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	3304      	adds	r3, #4
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	ed93 7a00 	vldr	s14, [r3]
 80044c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	3304      	adds	r3, #4
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	edd3 7a00 	vldr	s15, [r3]
 80044d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044da:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80044de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	3304      	adds	r3, #4
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	ed93 7a00 	vldr	s14, [r3]
 80044ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	3304      	adds	r3, #4
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	edd3 7a00 	vldr	s15, [r3]
 80044fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004502:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004506:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	3304      	adds	r3, #4
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	ed93 7a00 	vldr	s14, [r3]
 8004516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	3304      	adds	r3, #4
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	edd3 7a00 	vldr	s15, [r3]
 8004526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800452a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800452e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	3304      	adds	r3, #4
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	ed93 7a00 	vldr	s14, [r3]
 800453e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	3304      	adds	r3, #4
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004552:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004556:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	3304      	adds	r3, #4
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	ed93 7a00 	vldr	s14, [r3]
 8004566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	3304      	adds	r3, #4
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	edd3 7a00 	vldr	s15, [r3]
 8004576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800457a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800457e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004582:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800458a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800458e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004592:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800459a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800459e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80045a2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80045a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045aa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80045ae:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80045b2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80045b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ba:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80045be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	3304      	adds	r3, #4
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80045ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80045d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80045da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	3304      	adds	r3, #4
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80045ea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80045ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80045f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004604:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8004610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800461e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004626:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800462a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	3304      	adds	r3, #4
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800463a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800463e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004642:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8004646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	3304      	adds	r3, #4
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004656:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800465a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800465e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8004662:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004666:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800466a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800466e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800467a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800467e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004686:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8004692:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004696:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800469a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800469e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80046aa:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80046ae:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80046b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046b6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80046c2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80046c6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80046ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ce:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80046d2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80046d6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80046da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046de:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80046e2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80046e6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80046ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ee:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80046f2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80046f6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80046fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fe:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8004702:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004706:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800470a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800470e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8004712:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004716:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800471a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800471e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8004722:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004726:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800472a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8004732:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004736:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800473a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800473e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8004742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004750:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004758:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800475c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800476a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800476e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004772:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8004776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004784:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800478c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8004790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800479e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80047a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80047aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	3304      	adds	r3, #4
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80047ba:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80047be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047c2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80047c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	3304      	adds	r3, #4
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80047d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80047da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80047e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	3304      	adds	r3, #4
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80047f2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80047f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80047fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	3304      	adds	r3, #4
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800480e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004816:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800481a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800481e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004822:	4413      	add	r3, r2
 8004824:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8004828:	897b      	ldrh	r3, [r7, #10]
 800482a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800482e:	429a      	cmp	r2, r3
 8004830:	f4ff ad0a 	bcc.w	8004248 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004838:	2b07      	cmp	r3, #7
 800483a:	f240 84e3 	bls.w	8005204 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8004844:	2301      	movs	r3, #1
 8004846:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800484a:	893b      	ldrh	r3, [r7, #8]
 800484c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004850:	4413      	add	r3, r2
 8004852:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8004854:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800485a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800485e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004860:	4413      	add	r3, r2
 8004862:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8004864:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004868:	4413      	add	r3, r2
 800486a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800486c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800486e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004870:	4413      	add	r3, r2
 8004872:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8004874:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004878:	4413      	add	r3, r2
 800487a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800487c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800487e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004880:	4413      	add	r3, r2
 8004882:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8004884:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004888:	4413      	add	r3, r2
 800488a:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800488c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800489a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	4413      	add	r3, r2
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80048a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80048b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4413      	add	r3, r2
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80048be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80048ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80048d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80048e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	3304      	adds	r3, #4
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80048f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	3304      	adds	r3, #4
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4413      	add	r3, r2
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8004900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	3304      	adds	r3, #4
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800490e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	3304      	adds	r3, #4
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	4413      	add	r3, r2
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	3304      	adds	r3, #4
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800492a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	3304      	adds	r3, #4
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4413      	add	r3, r2
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8004938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	3304      	adds	r3, #4
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8004946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800494e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	4413      	add	r3, r2
 8004958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800495c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004964:	4413      	add	r3, r2
 8004966:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800496a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004972:	4413      	add	r3, r2
 8004974:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8004978:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800497c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004980:	4413      	add	r3, r2
 8004982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8004986:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	4413      	add	r3, r2
 8004990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8004994:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499c:	4413      	add	r3, r2
 800499e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80049a2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	4413      	add	r3, r2
 80049ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80049b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	ed93 7a00 	vldr	s14, [r3]
 80049be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80049d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	ed93 7a00 	vldr	s14, [r3]
 80049e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	edd3 7a00 	vldr	s15, [r3]
 80049f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049f4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80049f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	ed93 7a00 	vldr	s14, [r3]
 8004a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	edd3 7a00 	vldr	s15, [r3]
 8004a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a18:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	ed93 7a00 	vldr	s14, [r3]
 8004a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8004a40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4413      	add	r3, r2
 8004a4a:	ed93 7a00 	vldr	s14, [r3]
 8004a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	edd3 7a00 	vldr	s15, [r3]
 8004a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a60:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8004a64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	ed93 7a00 	vldr	s14, [r3]
 8004a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	edd3 7a00 	vldr	s15, [r3]
 8004a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a84:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004a88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	ed93 7a00 	vldr	s14, [r3]
 8004a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	edd3 7a00 	vldr	s15, [r3]
 8004aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aa8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8004aac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	ed93 7a00 	vldr	s14, [r3]
 8004aba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	edd3 7a00 	vldr	s15, [r3]
 8004ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004acc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8004ad0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004ad4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004adc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8004ae0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004ae4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aec:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8004af0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004af4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8004b00:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004b04:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b0c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8004b10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004b1e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b26:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8004b2a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004b2e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b36:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8004b3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	3304      	adds	r3, #4
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	ed93 7a00 	vldr	s14, [r3]
 8004b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	3304      	adds	r3, #4
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4413      	add	r3, r2
 8004b56:	edd3 7a00 	vldr	s15, [r3]
 8004b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004b62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3304      	adds	r3, #4
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	ed93 7a00 	vldr	s14, [r3]
 8004b72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	3304      	adds	r3, #4
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	edd3 7a00 	vldr	s15, [r3]
 8004b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b86:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8004b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	3304      	adds	r3, #4
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	ed93 7a00 	vldr	s14, [r3]
 8004b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8004bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	3304      	adds	r3, #4
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	ed93 7a00 	vldr	s14, [r3]
 8004bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	3304      	adds	r3, #4
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	edd3 7a00 	vldr	s15, [r3]
 8004bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8004bda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	3304      	adds	r3, #4
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	ed93 7a00 	vldr	s14, [r3]
 8004bea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	edd3 7a00 	vldr	s15, [r3]
 8004bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bfe:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004c02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	3304      	adds	r3, #4
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	ed93 7a00 	vldr	s14, [r3]
 8004c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	3304      	adds	r3, #4
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	edd3 7a00 	vldr	s15, [r3]
 8004c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c26:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8004c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	3304      	adds	r3, #4
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	ed93 7a00 	vldr	s14, [r3]
 8004c3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	3304      	adds	r3, #4
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	edd3 7a00 	vldr	s15, [r3]
 8004c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004c52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	3304      	adds	r3, #4
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	ed93 7a00 	vldr	s14, [r3]
 8004c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	3304      	adds	r3, #4
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	edd3 7a00 	vldr	s15, [r3]
 8004c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c76:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8004c7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004c7e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c86:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8004c8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004c8e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c96:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8004c9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8004caa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004cae:	edd7 7a08 	vldr	s15, [r7, #32]
 8004cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8004cba:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004cbe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8004cca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004cce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8004cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004cea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8004cf6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004cfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8004d06:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004d0a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d12:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8004d16:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004d1a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d22:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8004d26:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004d2a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d32:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8004d36:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004d3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8004d46:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004d4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8004d56:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004d5a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d62:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8004d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d74:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d7c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8004d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	3304      	adds	r3, #4
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d98:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8004d9c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004da0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8004dac:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004db0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8004dbc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004dc0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8004dcc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004dd0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8004ddc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dea:	edd7 7a06 	vldr	s15, [r7, #24]
 8004dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8004df6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8004e12:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e16:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8004e22:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004e26:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8004e32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e36:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8004e42:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004e46:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8004e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e60:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e68:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8004e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	3304      	adds	r3, #4
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e84:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8004e88:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004e8c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e94:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8004ea0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004ea4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eac:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8004eb8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004ebc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ec4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ecc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8004ed0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004ed4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004edc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8004ee8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004eec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ef4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8004ef8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004efc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f04:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8004f08:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004f0c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f14:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8004f18:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004f1c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f24:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8004f28:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004f2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f34:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8004f38:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004f3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f44:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8004f48:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004f4c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f54:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8004f58:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004f5c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f64:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8004f68:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004f6c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f74:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8004f78:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004f7c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f84:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8004f88:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004f8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f94:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8004f98:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004f9c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fa4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8004fa8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004fac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8004fb8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004fbc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8004fc8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004fcc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fd4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8004fd8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004fdc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fe4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8004fe8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004fec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8004ff8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004ffc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005004:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005008:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800500c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005014:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005018:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800501c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005024:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4413      	add	r3, r2
 8005032:	ed97 7a07 	vldr	s14, [r7, #28]
 8005036:	edd7 7a06 	vldr	s15, [r7, #24]
 800503a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800503e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	3304      	adds	r3, #4
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005052:	edd7 7a04 	vldr	s15, [r7, #16]
 8005056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800505a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800505e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005062:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800506e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005072:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800507e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005082:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800508e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005092:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800509e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80050ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80050b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050b4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80050b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	3304      	adds	r3, #4
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80050c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80050cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80050d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80050d8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80050dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80050e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80050e8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80050ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80050f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80050f8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80050fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005100:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005104:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005108:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800510c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005110:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005122:	edd7 7a06 	vldr	s15, [r7, #24]
 8005126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800512a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800512e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	3304      	adds	r3, #4
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	ed97 7a05 	vldr	s14, [r7, #20]
 800513e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005146:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800514a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800514e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005156:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800515a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800515e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800516a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800516e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800517a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800517e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800518a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	ed97 7a07 	vldr	s14, [r7, #28]
 8005198:	edd7 7a06 	vldr	s15, [r7, #24]
 800519c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051a0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80051a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	3304      	adds	r3, #4
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80051b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80051b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051bc:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80051c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80051c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051c8:	4413      	add	r3, r2
 80051ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80051d4:	429a      	cmp	r2, r3
 80051d6:	f4ff abba 	bcc.w	800494e <arm_radix8_butterfly_f32+0x746>

         j++;
 80051da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051de:	3301      	adds	r3, #1
 80051e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80051e4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ec:	429a      	cmp	r2, r3
 80051ee:	f4ff ab2c 	bcc.w	800484a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80051f2:	893b      	ldrh	r3, [r7, #8]
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80051f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fc:	2b07      	cmp	r3, #7
 80051fe:	f63f a813 	bhi.w	8004228 <arm_radix8_butterfly_f32+0x20>
}
 8005202:	e000      	b.n	8005206 <arm_radix8_butterfly_f32+0xffe>
         break;
 8005204:	bf00      	nop
}
 8005206:	bf00      	nop
 8005208:	37f4      	adds	r7, #244	; 0xf4
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop

08005214 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8005214:	b480      	push	{r7}
 8005216:	b095      	sub	sp, #84	; 0x54
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	3b01      	subs	r3, #1
 8005234:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8005236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800523c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8005242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8005248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800524e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	64ba      	str	r2, [r7, #72]	; 0x48
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8005258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525a:	1d1a      	adds	r2, r3, #4
 800525c:	64ba      	str	r2, [r7, #72]	; 0x48
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8005262:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005266:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800526a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800526e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8005272:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005276:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800527a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800527e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8005282:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005286:	edd7 7a08 	vldr	s15, [r7, #32]
 800528a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	1d1a      	adds	r2, r3, #4
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800529c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80052a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80052a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80052a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	1d1a      	adds	r2, r3, #4
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ba:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80052be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4413      	add	r3, r2
 80052c6:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80052c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ca:	3308      	adds	r3, #8
 80052cc:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80052ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80052da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80052e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80052e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e8:	1d1a      	adds	r2, r3, #4
 80052ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80052f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f2:	1d1a      	adds	r2, r3, #4
 80052f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80052fa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80052fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005306:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800530a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800530e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005316:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800531a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800531e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800532a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800532e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800533a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800533e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005346:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800534a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800534e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005356:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800535a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800535e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005366:	edd7 7a07 	vldr	s15, [r7, #28]
 800536a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800536e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1d1a      	adds	r2, r3, #4
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005384:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8005388:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800538c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005390:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005394:	edd7 7a06 	vldr	s15, [r7, #24]
 8005398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800539c:	edd7 7a05 	vldr	s15, [r7, #20]
 80053a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	1d1a      	adds	r2, r3, #4
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b2:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80053b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b8:	3308      	adds	r3, #8
 80053ba:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80053bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053be:	3b08      	subs	r3, #8
 80053c0:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	3b01      	subs	r3, #1
 80053c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 80053c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f73f af7f 	bgt.w	80052ce <stage_rfft_f32+0xba>
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3754      	adds	r7, #84	; 0x54
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80053de:	b480      	push	{r7}
 80053e0:	b095      	sub	sp, #84	; 0x54
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8005400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8005406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800540c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540e:	3308      	adds	r3, #8
 8005410:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8005412:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005416:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800541a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1d1a      	adds	r2, r3, #4
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800542c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8005430:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005434:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	1d1a      	adds	r2, r3, #4
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800544e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4413      	add	r3, r2
 8005456:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8005458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545a:	3308      	adds	r3, #8
 800545c:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 800545e:	e07c      	b.n	800555a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8005460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8005466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800546c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8005472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8005478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	64ba      	str	r2, [r7, #72]	; 0x48
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8005482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005484:	1d1a      	adds	r2, r3, #4
 8005486:	64ba      	str	r2, [r7, #72]	; 0x48
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800548c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005490:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005498:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800549c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80054a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80054a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a8:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80054ac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80054b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80054b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b8:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80054bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80054c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80054c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c8:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80054cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80054d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80054d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d8:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80054dc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80054e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80054e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e8:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80054ec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80054f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80054f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80054fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005500:	edd7 7a06 	vldr	s15, [r7, #24]
 8005504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005516:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800551a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800551e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005522:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005526:	edd7 7a05 	vldr	s15, [r7, #20]
 800552a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800552e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005544:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	3308      	adds	r3, #8
 800554c:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800554e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005550:	3b08      	subs	r3, #8
 8005552:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8005554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005556:	3b01      	subs	r3, #1
 8005558:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 800555a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555c:	2b00      	cmp	r3, #0
 800555e:	f73f af7f 	bgt.w	8005460 <merge_rfft_f32+0x82>
   }

}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	3754      	adds	r7, #84	; 0x54
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff ff26 	bl	80053de <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8005592:	78fa      	ldrb	r2, [r7, #3]
 8005594:	2301      	movs	r3, #1
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	f7fe fca8 	bl	8003eee <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800559e:	e00a      	b.n	80055b6 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	2301      	movs	r3, #1
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	6978      	ldr	r0, [r7, #20]
 80055a8:	f7fe fca1 	bl	8003eee <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f7ff fe2f 	bl	8005214 <stage_rfft_f32>
}
 80055b6:	bf00      	nop
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <arm_rfft_32_fast_init_f32+0x14>
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d2:	e014      	b.n	80055fe <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2110      	movs	r1, #16
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe fd43 	bl	8004064 <arm_cfft_init_f32>
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80055e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 80055ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ee:	e006      	b.n	80055fe <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a03      	ldr	r2, [pc, #12]	; (8005608 <arm_rfft_32_fast_init_f32+0x48>)
 80055fa:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	0802c68c 	.word	0x0802c68c

0800560c <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <arm_rfft_64_fast_init_f32+0x14>
 800561a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800561e:	e014      	b.n	800564a <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2120      	movs	r1, #32
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe fd1d 	bl	8004064 <arm_cfft_init_f32>
 800562a:	4603      	mov	r3, r0
 800562c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800562e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 8005636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563a:	e006      	b.n	800564a <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2240      	movs	r2, #64	; 0x40
 8005640:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a03      	ldr	r2, [pc, #12]	; (8005654 <arm_rfft_64_fast_init_f32+0x48>)
 8005646:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	0802c70c 	.word	0x0802c70c

08005658 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <arm_rfft_128_fast_init_f32+0x14>
 8005666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800566a:	e014      	b.n	8005696 <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2140      	movs	r1, #64	; 0x40
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fcf7 	bl	8004064 <arm_cfft_init_f32>
 8005676:	4603      	mov	r3, r0
 8005678:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800567a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 8005682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005686:	e006      	b.n	8005696 <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a03      	ldr	r2, [pc, #12]	; (80056a0 <arm_rfft_128_fast_init_f32+0x48>)
 8005692:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	0802c80c 	.word	0x0802c80c

080056a4 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <arm_rfft_256_fast_init_f32+0x14>
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b6:	e015      	b.n	80056e4 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fcd1 	bl	8004064 <arm_cfft_init_f32>
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80056c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 80056ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d2:	e007      	b.n	80056e4 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056da:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a03      	ldr	r2, [pc, #12]	; (80056ec <arm_rfft_256_fast_init_f32+0x48>)
 80056e0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	0802ca0c 	.word	0x0802ca0c

080056f0 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <arm_rfft_512_fast_init_f32+0x14>
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005702:	e016      	b.n	8005732 <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe fcaa 	bl	8004064 <arm_cfft_init_f32>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 800571c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005720:	e007      	b.n	8005732 <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a03      	ldr	r2, [pc, #12]	; (800573c <arm_rfft_512_fast_init_f32+0x4c>)
 800572e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	0802ce0c 	.word	0x0802ce0c

08005740 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <arm_rfft_1024_fast_init_f32+0x14>
 800574e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005752:	e016      	b.n	8005782 <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fc82 	bl	8004064 <arm_cfft_init_f32>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 800576c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005770:	e007      	b.n	8005782 <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005778:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a03      	ldr	r2, [pc, #12]	; (800578c <arm_rfft_1024_fast_init_f32+0x4c>)
 800577e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	0802d60c 	.word	0x0802d60c

08005790 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d102      	bne.n	80057a4 <arm_rfft_2048_fast_init_f32+0x14>
 800579e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a2:	e016      	b.n	80057d2 <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fc5a 	bl	8004064 <arm_cfft_init_f32>
 80057b0:	4603      	mov	r3, r0
 80057b2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80057b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 80057bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c0:	e007      	b.n	80057d2 <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a03      	ldr	r2, [pc, #12]	; (80057dc <arm_rfft_2048_fast_init_f32+0x4c>)
 80057ce:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	0802e60c 	.word	0x0802e60c

080057e0 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <arm_rfft_4096_fast_init_f32+0x14>
 80057ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f2:	e016      	b.n	8005822 <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fc32 	bl	8004064 <arm_cfft_init_f32>
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 800580c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005810:	e007      	b.n	8005822 <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005818:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a03      	ldr	r2, [pc, #12]	; (800582c <arm_rfft_4096_fast_init_f32+0x4c>)
 800581e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	0803060c 	.word	0x0803060c

08005830 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 8005840:	887b      	ldrh	r3, [r7, #2]
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005846:	d023      	beq.n	8005890 <arm_rfft_fast_init_f32+0x60>
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	dc38      	bgt.n	80058c0 <arm_rfft_fast_init_f32+0x90>
 800584e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005852:	d020      	beq.n	8005896 <arm_rfft_fast_init_f32+0x66>
 8005854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005858:	dc32      	bgt.n	80058c0 <arm_rfft_fast_init_f32+0x90>
 800585a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585e:	d01d      	beq.n	800589c <arm_rfft_fast_init_f32+0x6c>
 8005860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005864:	dc2c      	bgt.n	80058c0 <arm_rfft_fast_init_f32+0x90>
 8005866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586a:	d01a      	beq.n	80058a2 <arm_rfft_fast_init_f32+0x72>
 800586c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005870:	dc26      	bgt.n	80058c0 <arm_rfft_fast_init_f32+0x90>
 8005872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005876:	d017      	beq.n	80058a8 <arm_rfft_fast_init_f32+0x78>
 8005878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800587c:	dc20      	bgt.n	80058c0 <arm_rfft_fast_init_f32+0x90>
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d015      	beq.n	80058ae <arm_rfft_fast_init_f32+0x7e>
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	dc1c      	bgt.n	80058c0 <arm_rfft_fast_init_f32+0x90>
 8005886:	2b20      	cmp	r3, #32
 8005888:	d017      	beq.n	80058ba <arm_rfft_fast_init_f32+0x8a>
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d012      	beq.n	80058b4 <arm_rfft_fast_init_f32+0x84>
 800588e:	e017      	b.n	80058c0 <arm_rfft_fast_init_f32+0x90>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 8005890:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <arm_rfft_fast_init_f32+0xb4>)
 8005892:	60fb      	str	r3, [r7, #12]
    break;
 8005894:	e017      	b.n	80058c6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <arm_rfft_fast_init_f32+0xb8>)
 8005898:	60fb      	str	r3, [r7, #12]
    break;
 800589a:	e014      	b.n	80058c6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <arm_rfft_fast_init_f32+0xbc>)
 800589e:	60fb      	str	r3, [r7, #12]
    break;
 80058a0:	e011      	b.n	80058c6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <arm_rfft_fast_init_f32+0xc0>)
 80058a4:	60fb      	str	r3, [r7, #12]
    break;
 80058a6:	e00e      	b.n	80058c6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 80058a8:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <arm_rfft_fast_init_f32+0xc4>)
 80058aa:	60fb      	str	r3, [r7, #12]
    break;
 80058ac:	e00b      	b.n	80058c6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 80058ae:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <arm_rfft_fast_init_f32+0xc8>)
 80058b0:	60fb      	str	r3, [r7, #12]
    break;
 80058b2:	e008      	b.n	80058c6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <arm_rfft_fast_init_f32+0xcc>)
 80058b6:	60fb      	str	r3, [r7, #12]
    break;
 80058b8:	e005      	b.n	80058c6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <arm_rfft_fast_init_f32+0xd0>)
 80058bc:	60fb      	str	r3, [r7, #12]
    break;
 80058be:	e002      	b.n	80058c6 <arm_rfft_fast_init_f32+0x96>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 80058c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058c4:	e009      	b.n	80058da <arm_rfft_fast_init_f32+0xaa>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <arm_rfft_fast_init_f32+0xa2>
 80058cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058d0:	e003      	b.n	80058da <arm_rfft_fast_init_f32+0xaa>
  return fptr( S );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
 80058d8:	4603      	mov	r3, r0

}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	080057e1 	.word	0x080057e1
 80058e8:	08005791 	.word	0x08005791
 80058ec:	08005741 	.word	0x08005741
 80058f0:	080056f1 	.word	0x080056f1
 80058f4:	080056a5 	.word	0x080056a5
 80058f8:	08005659 	.word	0x08005659
 80058fc:	0800560d 	.word	0x0800560d
 8005900:	080055c1 	.word	0x080055c1

08005904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005908:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <HAL_Init+0x40>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a0d      	ldr	r2, [pc, #52]	; (8005944 <HAL_Init+0x40>)
 800590e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <HAL_Init+0x40>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <HAL_Init+0x40>)
 800591a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800591e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005920:	4b08      	ldr	r3, [pc, #32]	; (8005944 <HAL_Init+0x40>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a07      	ldr	r2, [pc, #28]	; (8005944 <HAL_Init+0x40>)
 8005926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800592c:	2003      	movs	r0, #3
 800592e:	f000 f94b 	bl	8005bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005932:	2000      	movs	r0, #0
 8005934:	f000 f808 	bl	8005948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005938:	f7fc fbec 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40023c00 	.word	0x40023c00

08005948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005950:	4b12      	ldr	r3, [pc, #72]	; (800599c <HAL_InitTick+0x54>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4b12      	ldr	r3, [pc, #72]	; (80059a0 <HAL_InitTick+0x58>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4619      	mov	r1, r3
 800595a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800595e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f963 	bl	8005c32 <HAL_SYSTICK_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e00e      	b.n	8005994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b0f      	cmp	r3, #15
 800597a:	d80a      	bhi.n	8005992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800597c:	2200      	movs	r2, #0
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005984:	f000 f92b 	bl	8005bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005988:	4a06      	ldr	r2, [pc, #24]	; (80059a4 <HAL_InitTick+0x5c>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200004a0 	.word	0x200004a0
 80059a0:	200004bc 	.word	0x200004bc
 80059a4:	200004b8 	.word	0x200004b8

080059a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_IncTick+0x20>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <HAL_IncTick+0x24>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4413      	add	r3, r2
 80059b8:	4a04      	ldr	r2, [pc, #16]	; (80059cc <HAL_IncTick+0x24>)
 80059ba:	6013      	str	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	200004bc 	.word	0x200004bc
 80059cc:	20013cc8 	.word	0x20013cc8

080059d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return uwTick;
 80059d4:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <HAL_GetTick+0x14>)
 80059d6:	681b      	ldr	r3, [r3, #0]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20013cc8 	.word	0x20013cc8

080059e8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <HAL_SuspendTick+0x1c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <HAL_SuspendTick+0x1c>)
 80059f2:	f023 0302 	bic.w	r3, r3, #2
 80059f6:	6013      	str	r3, [r2, #0]
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	e000e010 	.word	0xe000e010

08005a08 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <HAL_ResumeTick+0x1c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a04      	ldr	r2, [pc, #16]	; (8005a24 <HAL_ResumeTick+0x1c>)
 8005a12:	f043 0302 	orr.w	r3, r3, #2
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	e000e010 	.word	0xe000e010

08005a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <__NVIC_SetPriorityGrouping+0x44>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a44:	4013      	ands	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a5a:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <__NVIC_SetPriorityGrouping+0x44>)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	60d3      	str	r3, [r2, #12]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	e000ed00 	.word	0xe000ed00

08005a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <__NVIC_GetPriorityGrouping+0x18>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	f003 0307 	and.w	r3, r3, #7
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	db0b      	blt.n	8005ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	f003 021f 	and.w	r2, r3, #31
 8005aa4:	4907      	ldr	r1, [pc, #28]	; (8005ac4 <__NVIC_EnableIRQ+0x38>)
 8005aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2001      	movs	r0, #1
 8005aae:	fa00 f202 	lsl.w	r2, r0, r2
 8005ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e000e100 	.word	0xe000e100

08005ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	6039      	str	r1, [r7, #0]
 8005ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	db0a      	blt.n	8005af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	490c      	ldr	r1, [pc, #48]	; (8005b14 <__NVIC_SetPriority+0x4c>)
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	0112      	lsls	r2, r2, #4
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	440b      	add	r3, r1
 8005aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005af0:	e00a      	b.n	8005b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	4908      	ldr	r1, [pc, #32]	; (8005b18 <__NVIC_SetPriority+0x50>)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	3b04      	subs	r3, #4
 8005b00:	0112      	lsls	r2, r2, #4
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	440b      	add	r3, r1
 8005b06:	761a      	strb	r2, [r3, #24]
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	e000e100 	.word	0xe000e100
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	; 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f1c3 0307 	rsb	r3, r3, #7
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	bf28      	it	cs
 8005b3a:	2304      	movcs	r3, #4
 8005b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d902      	bls.n	8005b4c <NVIC_EncodePriority+0x30>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	3b03      	subs	r3, #3
 8005b4a:	e000      	b.n	8005b4e <NVIC_EncodePriority+0x32>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	401a      	ands	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	43d9      	mvns	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b74:	4313      	orrs	r3, r2
         );
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3724      	adds	r7, #36	; 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b94:	d301      	bcc.n	8005b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b96:	2301      	movs	r3, #1
 8005b98:	e00f      	b.n	8005bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <SysTick_Config+0x40>)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ba2:	210f      	movs	r1, #15
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba8:	f7ff ff8e 	bl	8005ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <SysTick_Config+0x40>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <SysTick_Config+0x40>)
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	e000e010 	.word	0xe000e010

08005bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff29 	bl	8005a28 <__NVIC_SetPriorityGrouping>
}
 8005bd6:	bf00      	nop
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	4603      	mov	r3, r0
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
 8005bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bf0:	f7ff ff3e 	bl	8005a70 <__NVIC_GetPriorityGrouping>
 8005bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f7ff ff8e 	bl	8005b1c <NVIC_EncodePriority>
 8005c00:	4602      	mov	r2, r0
 8005c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff ff5d 	bl	8005ac8 <__NVIC_SetPriority>
}
 8005c0e:	bf00      	nop
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff31 	bl	8005a8c <__NVIC_EnableIRQ>
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff ffa2 	bl	8005b84 <SysTick_Config>
 8005c40:	4603      	mov	r3, r0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e00e      	b.n	8005c7a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	795b      	ldrb	r3, [r3, #5]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fc fa79 	bl	8002164 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c90:	f7ff fe9e 	bl	80059d0 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e099      	b.n	8005dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc0:	e00f      	b.n	8005ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cc2:	f7ff fe85 	bl	80059d0 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b05      	cmp	r3, #5
 8005cce:	d908      	bls.n	8005ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2203      	movs	r2, #3
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e078      	b.n	8005dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e8      	bne.n	8005cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4b38      	ldr	r3, [pc, #224]	; (8005ddc <HAL_DMA_Init+0x158>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d107      	bne.n	8005d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	4313      	orrs	r3, r2
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 0307 	bic.w	r3, r3, #7
 8005d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d117      	bne.n	8005da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00e      	beq.n	8005da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fb3d 	bl	8006408 <DMA_CheckFifoParam>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005da2:	2301      	movs	r3, #1
 8005da4:	e016      	b.n	8005dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 faf4 	bl	800639c <DMA_CalcBaseAndBitshift>
 8005db4:	4603      	mov	r3, r0
 8005db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	223f      	movs	r2, #63	; 0x3f
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	f010803f 	.word	0xf010803f

08005de0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e050      	b.n	8005e94 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d101      	bne.n	8005e02 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e048      	b.n	8005e94 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0201 	bic.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2200      	movs	r2, #0
 8005e38:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2221      	movs	r2, #33	; 0x21
 8005e40:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 faaa 	bl	800639c <DMA_CalcBaseAndBitshift>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e74:	223f      	movs	r2, #63	; 0x3f
 8005e76:	409a      	lsls	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_DMA_Start_IT+0x26>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e040      	b.n	8005f44 <HAL_DMA_Start_IT+0xa8>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d12f      	bne.n	8005f36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fa28 	bl	8006340 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	223f      	movs	r2, #63	; 0x3f
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0216 	orr.w	r2, r2, #22
 8005f0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0208 	orr.w	r2, r2, #8
 8005f22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e005      	b.n	8005f42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f5a:	f7ff fd39 	bl	80059d0 <HAL_GetTick>
 8005f5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d008      	beq.n	8005f7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2280      	movs	r2, #128	; 0x80
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e052      	b.n	8006024 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0216 	bic.w	r2, r2, #22
 8005f8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <HAL_DMA_Abort+0x62>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0208 	bic.w	r2, r2, #8
 8005fbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fce:	e013      	b.n	8005ff8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fd0:	f7ff fcfe 	bl	80059d0 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d90c      	bls.n	8005ff8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e015      	b.n	8006024 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e4      	bne.n	8005fd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600a:	223f      	movs	r2, #63	; 0x3f
 800600c:	409a      	lsls	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006038:	4b92      	ldr	r3, [pc, #584]	; (8006284 <HAL_DMA_IRQHandler+0x258>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a92      	ldr	r2, [pc, #584]	; (8006288 <HAL_DMA_IRQHandler+0x25c>)
 800603e:	fba2 2303 	umull	r2, r3, r2, r3
 8006042:	0a9b      	lsrs	r3, r3, #10
 8006044:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006056:	2208      	movs	r2, #8
 8006058:	409a      	lsls	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4013      	ands	r3, r2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01a      	beq.n	8006098 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d013      	beq.n	8006098 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0204 	bic.w	r2, r2, #4
 800607e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006084:	2208      	movs	r2, #8
 8006086:	409a      	lsls	r2, r3
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006090:	f043 0201 	orr.w	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609c:	2201      	movs	r2, #1
 800609e:	409a      	lsls	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d012      	beq.n	80060ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ba:	2201      	movs	r2, #1
 80060bc:	409a      	lsls	r2, r3
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c6:	f043 0202 	orr.w	r2, r3, #2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d2:	2204      	movs	r2, #4
 80060d4:	409a      	lsls	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d012      	beq.n	8006104 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	2204      	movs	r2, #4
 80060f2:	409a      	lsls	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fc:	f043 0204 	orr.w	r2, r3, #4
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	2210      	movs	r2, #16
 800610a:	409a      	lsls	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d043      	beq.n	800619c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d03c      	beq.n	800619c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	2210      	movs	r2, #16
 8006128:	409a      	lsls	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d018      	beq.n	800616e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d108      	bne.n	800615c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d024      	beq.n	800619c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
 800615a:	e01f      	b.n	800619c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01b      	beq.n	800619c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
 800616c:	e016      	b.n	800619c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d107      	bne.n	800618c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0208 	bic.w	r2, r2, #8
 800618a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a0:	2220      	movs	r2, #32
 80061a2:	409a      	lsls	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4013      	ands	r3, r2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 808e 	beq.w	80062ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8086 	beq.w	80062ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c2:	2220      	movs	r2, #32
 80061c4:	409a      	lsls	r2, r3
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	d136      	bne.n	8006244 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0216 	bic.w	r2, r2, #22
 80061e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <HAL_DMA_IRQHandler+0x1da>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0208 	bic.w	r2, r2, #8
 8006214:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621a:	223f      	movs	r2, #63	; 0x3f
 800621c:	409a      	lsls	r2, r3
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006236:	2b00      	cmp	r3, #0
 8006238:	d07d      	beq.n	8006336 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	4798      	blx	r3
        }
        return;
 8006242:	e078      	b.n	8006336 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01c      	beq.n	800628c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d108      	bne.n	8006272 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006264:	2b00      	cmp	r3, #0
 8006266:	d030      	beq.n	80062ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
 8006270:	e02b      	b.n	80062ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d027      	beq.n	80062ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
 8006282:	e022      	b.n	80062ca <HAL_DMA_IRQHandler+0x29e>
 8006284:	200004a0 	.word	0x200004a0
 8006288:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10f      	bne.n	80062ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0210 	bic.w	r2, r2, #16
 80062a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d032      	beq.n	8006338 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d022      	beq.n	8006324 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2205      	movs	r2, #5
 80062e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	3301      	adds	r3, #1
 80062fa:	60bb      	str	r3, [r7, #8]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d307      	bcc.n	8006312 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f2      	bne.n	80062f6 <HAL_DMA_IRQHandler+0x2ca>
 8006310:	e000      	b.n	8006314 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006312:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
 8006334:	e000      	b.n	8006338 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006336:	bf00      	nop
    }
  }
}
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop

08006340 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800635c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d108      	bne.n	8006380 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800637e:	e007      	b.n	8006390 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	60da      	str	r2, [r3, #12]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	3b10      	subs	r3, #16
 80063ac:	4a14      	ldr	r2, [pc, #80]	; (8006400 <DMA_CalcBaseAndBitshift+0x64>)
 80063ae:	fba2 2303 	umull	r2, r3, r2, r3
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <DMA_CalcBaseAndBitshift+0x68>)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d909      	bls.n	80063de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063d2:	f023 0303 	bic.w	r3, r3, #3
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	659a      	str	r2, [r3, #88]	; 0x58
 80063dc:	e007      	b.n	80063ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	aaaaaaab 	.word	0xaaaaaaab
 8006404:	0803469c 	.word	0x0803469c

08006408 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d11f      	bne.n	8006462 <DMA_CheckFifoParam+0x5a>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b03      	cmp	r3, #3
 8006426:	d856      	bhi.n	80064d6 <DMA_CheckFifoParam+0xce>
 8006428:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <DMA_CheckFifoParam+0x28>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	08006441 	.word	0x08006441
 8006434:	08006453 	.word	0x08006453
 8006438:	08006441 	.word	0x08006441
 800643c:	080064d7 	.word	0x080064d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d046      	beq.n	80064da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006450:	e043      	b.n	80064da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800645a:	d140      	bne.n	80064de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006460:	e03d      	b.n	80064de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646a:	d121      	bne.n	80064b0 <DMA_CheckFifoParam+0xa8>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d837      	bhi.n	80064e2 <DMA_CheckFifoParam+0xda>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <DMA_CheckFifoParam+0x70>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	08006489 	.word	0x08006489
 800647c:	0800648f 	.word	0x0800648f
 8006480:	08006489 	.word	0x08006489
 8006484:	080064a1 	.word	0x080064a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
      break;
 800648c:	e030      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d025      	beq.n	80064e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800649e:	e022      	b.n	80064e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064a8:	d11f      	bne.n	80064ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064ae:	e01c      	b.n	80064ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d903      	bls.n	80064be <DMA_CheckFifoParam+0xb6>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d003      	beq.n	80064c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80064bc:	e018      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	73fb      	strb	r3, [r7, #15]
      break;
 80064c2:	e015      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	e00b      	b.n	80064ee <DMA_CheckFifoParam+0xe6>
      break;
 80064d6:	bf00      	nop
 80064d8:	e00a      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
      break;
 80064da:	bf00      	nop
 80064dc:	e008      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
      break;
 80064de:	bf00      	nop
 80064e0:	e006      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
      break;
 80064e2:	bf00      	nop
 80064e4:	e004      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
      break;
 80064e6:	bf00      	nop
 80064e8:	e002      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <DMA_CheckFifoParam+0xe8>
      break;
 80064ee:	bf00      	nop
    }
  } 
  
  return status; 
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop

08006500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006500:	b480      	push	{r7}
 8006502:	b089      	sub	sp, #36	; 0x24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800650e:	2300      	movs	r3, #0
 8006510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006512:	2300      	movs	r3, #0
 8006514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	e16b      	b.n	80067f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800651c:	2201      	movs	r2, #1
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4013      	ands	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	429a      	cmp	r2, r3
 8006536:	f040 815a 	bne.w	80067ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b01      	cmp	r3, #1
 8006544:	d005      	beq.n	8006552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800654e:	2b02      	cmp	r3, #2
 8006550:	d130      	bne.n	80065b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	2203      	movs	r2, #3
 800655e:	fa02 f303 	lsl.w	r3, r2, r3
 8006562:	43db      	mvns	r3, r3
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	4013      	ands	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006588:	2201      	movs	r2, #1
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	43db      	mvns	r3, r3
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	4013      	ands	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	091b      	lsrs	r3, r3, #4
 800659e:	f003 0201 	and.w	r2, r3, #1
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d017      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	2203      	movs	r2, #3
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4013      	ands	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d123      	bne.n	8006644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	08da      	lsrs	r2, r3, #3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3208      	adds	r2, #8
 8006604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	220f      	movs	r2, #15
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4313      	orrs	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	08da      	lsrs	r2, r3, #3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3208      	adds	r2, #8
 800663e:	69b9      	ldr	r1, [r7, #24]
 8006640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	2203      	movs	r2, #3
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	43db      	mvns	r3, r3
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	4013      	ands	r3, r2
 800665a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f003 0203 	and.w	r2, r3, #3
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4313      	orrs	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80b4 	beq.w	80067ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	4b60      	ldr	r3, [pc, #384]	; (800680c <HAL_GPIO_Init+0x30c>)
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	4a5f      	ldr	r2, [pc, #380]	; (800680c <HAL_GPIO_Init+0x30c>)
 8006690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006694:	6453      	str	r3, [r2, #68]	; 0x44
 8006696:	4b5d      	ldr	r3, [pc, #372]	; (800680c <HAL_GPIO_Init+0x30c>)
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066a2:	4a5b      	ldr	r2, [pc, #364]	; (8006810 <HAL_GPIO_Init+0x310>)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	3302      	adds	r3, #2
 80066aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	220f      	movs	r2, #15
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a52      	ldr	r2, [pc, #328]	; (8006814 <HAL_GPIO_Init+0x314>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d02b      	beq.n	8006726 <HAL_GPIO_Init+0x226>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a51      	ldr	r2, [pc, #324]	; (8006818 <HAL_GPIO_Init+0x318>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d025      	beq.n	8006722 <HAL_GPIO_Init+0x222>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a50      	ldr	r2, [pc, #320]	; (800681c <HAL_GPIO_Init+0x31c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01f      	beq.n	800671e <HAL_GPIO_Init+0x21e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a4f      	ldr	r2, [pc, #316]	; (8006820 <HAL_GPIO_Init+0x320>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d019      	beq.n	800671a <HAL_GPIO_Init+0x21a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a4e      	ldr	r2, [pc, #312]	; (8006824 <HAL_GPIO_Init+0x324>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <HAL_GPIO_Init+0x216>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a4d      	ldr	r2, [pc, #308]	; (8006828 <HAL_GPIO_Init+0x328>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00d      	beq.n	8006712 <HAL_GPIO_Init+0x212>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a4c      	ldr	r2, [pc, #304]	; (800682c <HAL_GPIO_Init+0x32c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d007      	beq.n	800670e <HAL_GPIO_Init+0x20e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a4b      	ldr	r2, [pc, #300]	; (8006830 <HAL_GPIO_Init+0x330>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d101      	bne.n	800670a <HAL_GPIO_Init+0x20a>
 8006706:	2307      	movs	r3, #7
 8006708:	e00e      	b.n	8006728 <HAL_GPIO_Init+0x228>
 800670a:	2308      	movs	r3, #8
 800670c:	e00c      	b.n	8006728 <HAL_GPIO_Init+0x228>
 800670e:	2306      	movs	r3, #6
 8006710:	e00a      	b.n	8006728 <HAL_GPIO_Init+0x228>
 8006712:	2305      	movs	r3, #5
 8006714:	e008      	b.n	8006728 <HAL_GPIO_Init+0x228>
 8006716:	2304      	movs	r3, #4
 8006718:	e006      	b.n	8006728 <HAL_GPIO_Init+0x228>
 800671a:	2303      	movs	r3, #3
 800671c:	e004      	b.n	8006728 <HAL_GPIO_Init+0x228>
 800671e:	2302      	movs	r3, #2
 8006720:	e002      	b.n	8006728 <HAL_GPIO_Init+0x228>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <HAL_GPIO_Init+0x228>
 8006726:	2300      	movs	r3, #0
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	f002 0203 	and.w	r2, r2, #3
 800672e:	0092      	lsls	r2, r2, #2
 8006730:	4093      	lsls	r3, r2
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	4313      	orrs	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006738:	4935      	ldr	r1, [pc, #212]	; (8006810 <HAL_GPIO_Init+0x310>)
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	089b      	lsrs	r3, r3, #2
 800673e:	3302      	adds	r3, #2
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006746:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <HAL_GPIO_Init+0x334>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	43db      	mvns	r3, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4013      	ands	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800676a:	4a32      	ldr	r2, [pc, #200]	; (8006834 <HAL_GPIO_Init+0x334>)
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006770:	4b30      	ldr	r3, [pc, #192]	; (8006834 <HAL_GPIO_Init+0x334>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	43db      	mvns	r3, r3
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	4013      	ands	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006794:	4a27      	ldr	r2, [pc, #156]	; (8006834 <HAL_GPIO_Init+0x334>)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <HAL_GPIO_Init+0x334>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	43db      	mvns	r3, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4013      	ands	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067be:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <HAL_GPIO_Init+0x334>)
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <HAL_GPIO_Init+0x334>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	4013      	ands	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067e8:	4a12      	ldr	r2, [pc, #72]	; (8006834 <HAL_GPIO_Init+0x334>)
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	3301      	adds	r3, #1
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	f67f ae90 	bls.w	800651c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	3724      	adds	r7, #36	; 0x24
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40023800 	.word	0x40023800
 8006810:	40013800 	.word	0x40013800
 8006814:	40020000 	.word	0x40020000
 8006818:	40020400 	.word	0x40020400
 800681c:	40020800 	.word	0x40020800
 8006820:	40020c00 	.word	0x40020c00
 8006824:	40021000 	.word	0x40021000
 8006828:	40021400 	.word	0x40021400
 800682c:	40021800 	.word	0x40021800
 8006830:	40021c00 	.word	0x40021c00
 8006834:	40013c00 	.word	0x40013c00

08006838 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e0cd      	b.n	80069f0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006854:	2201      	movs	r2, #1
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4013      	ands	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	f040 80bd 	bne.w	80069ea <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006870:	4a65      	ldr	r2, [pc, #404]	; (8006a08 <HAL_GPIO_DeInit+0x1d0>)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	089b      	lsrs	r3, r3, #2
 8006876:	3302      	adds	r3, #2
 8006878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	220f      	movs	r2, #15
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	4013      	ands	r3, r2
 8006890:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a5d      	ldr	r2, [pc, #372]	; (8006a0c <HAL_GPIO_DeInit+0x1d4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d02b      	beq.n	80068f2 <HAL_GPIO_DeInit+0xba>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a5c      	ldr	r2, [pc, #368]	; (8006a10 <HAL_GPIO_DeInit+0x1d8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d025      	beq.n	80068ee <HAL_GPIO_DeInit+0xb6>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a5b      	ldr	r2, [pc, #364]	; (8006a14 <HAL_GPIO_DeInit+0x1dc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d01f      	beq.n	80068ea <HAL_GPIO_DeInit+0xb2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a5a      	ldr	r2, [pc, #360]	; (8006a18 <HAL_GPIO_DeInit+0x1e0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d019      	beq.n	80068e6 <HAL_GPIO_DeInit+0xae>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a59      	ldr	r2, [pc, #356]	; (8006a1c <HAL_GPIO_DeInit+0x1e4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <HAL_GPIO_DeInit+0xaa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a58      	ldr	r2, [pc, #352]	; (8006a20 <HAL_GPIO_DeInit+0x1e8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00d      	beq.n	80068de <HAL_GPIO_DeInit+0xa6>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a57      	ldr	r2, [pc, #348]	; (8006a24 <HAL_GPIO_DeInit+0x1ec>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d007      	beq.n	80068da <HAL_GPIO_DeInit+0xa2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a56      	ldr	r2, [pc, #344]	; (8006a28 <HAL_GPIO_DeInit+0x1f0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <HAL_GPIO_DeInit+0x9e>
 80068d2:	2307      	movs	r3, #7
 80068d4:	e00e      	b.n	80068f4 <HAL_GPIO_DeInit+0xbc>
 80068d6:	2308      	movs	r3, #8
 80068d8:	e00c      	b.n	80068f4 <HAL_GPIO_DeInit+0xbc>
 80068da:	2306      	movs	r3, #6
 80068dc:	e00a      	b.n	80068f4 <HAL_GPIO_DeInit+0xbc>
 80068de:	2305      	movs	r3, #5
 80068e0:	e008      	b.n	80068f4 <HAL_GPIO_DeInit+0xbc>
 80068e2:	2304      	movs	r3, #4
 80068e4:	e006      	b.n	80068f4 <HAL_GPIO_DeInit+0xbc>
 80068e6:	2303      	movs	r3, #3
 80068e8:	e004      	b.n	80068f4 <HAL_GPIO_DeInit+0xbc>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e002      	b.n	80068f4 <HAL_GPIO_DeInit+0xbc>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <HAL_GPIO_DeInit+0xbc>
 80068f2:	2300      	movs	r3, #0
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	f002 0203 	and.w	r2, r2, #3
 80068fa:	0092      	lsls	r2, r2, #2
 80068fc:	4093      	lsls	r3, r2
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	429a      	cmp	r2, r3
 8006902:	d132      	bne.n	800696a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006904:	4b49      	ldr	r3, [pc, #292]	; (8006a2c <HAL_GPIO_DeInit+0x1f4>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	43db      	mvns	r3, r3
 800690c:	4947      	ldr	r1, [pc, #284]	; (8006a2c <HAL_GPIO_DeInit+0x1f4>)
 800690e:	4013      	ands	r3, r2
 8006910:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006912:	4b46      	ldr	r3, [pc, #280]	; (8006a2c <HAL_GPIO_DeInit+0x1f4>)
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	43db      	mvns	r3, r3
 800691a:	4944      	ldr	r1, [pc, #272]	; (8006a2c <HAL_GPIO_DeInit+0x1f4>)
 800691c:	4013      	ands	r3, r2
 800691e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006920:	4b42      	ldr	r3, [pc, #264]	; (8006a2c <HAL_GPIO_DeInit+0x1f4>)
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	43db      	mvns	r3, r3
 8006928:	4940      	ldr	r1, [pc, #256]	; (8006a2c <HAL_GPIO_DeInit+0x1f4>)
 800692a:	4013      	ands	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800692e:	4b3f      	ldr	r3, [pc, #252]	; (8006a2c <HAL_GPIO_DeInit+0x1f4>)
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	43db      	mvns	r3, r3
 8006936:	493d      	ldr	r1, [pc, #244]	; (8006a2c <HAL_GPIO_DeInit+0x1f4>)
 8006938:	4013      	ands	r3, r2
 800693a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	220f      	movs	r2, #15
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800694c:	4a2e      	ldr	r2, [pc, #184]	; (8006a08 <HAL_GPIO_DeInit+0x1d0>)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	089b      	lsrs	r3, r3, #2
 8006952:	3302      	adds	r3, #2
 8006954:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	43da      	mvns	r2, r3
 800695c:	482a      	ldr	r0, [pc, #168]	; (8006a08 <HAL_GPIO_DeInit+0x1d0>)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	089b      	lsrs	r3, r3, #2
 8006962:	400a      	ands	r2, r1
 8006964:	3302      	adds	r3, #2
 8006966:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	2103      	movs	r1, #3
 8006974:	fa01 f303 	lsl.w	r3, r1, r3
 8006978:	43db      	mvns	r3, r3
 800697a:	401a      	ands	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	08da      	lsrs	r2, r3, #3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3208      	adds	r2, #8
 8006988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	220f      	movs	r2, #15
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	43db      	mvns	r3, r3
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	08d2      	lsrs	r2, r2, #3
 80069a0:	4019      	ands	r1, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3208      	adds	r2, #8
 80069a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	2103      	movs	r1, #3
 80069b4:	fa01 f303 	lsl.w	r3, r1, r3
 80069b8:	43db      	mvns	r3, r3
 80069ba:	401a      	ands	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	2101      	movs	r1, #1
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	fa01 f303 	lsl.w	r3, r1, r3
 80069cc:	43db      	mvns	r3, r3
 80069ce:	401a      	ands	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	2103      	movs	r1, #3
 80069de:	fa01 f303 	lsl.w	r3, r1, r3
 80069e2:	43db      	mvns	r3, r3
 80069e4:	401a      	ands	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	3301      	adds	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b0f      	cmp	r3, #15
 80069f4:	f67f af2e 	bls.w	8006854 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40013800 	.word	0x40013800
 8006a0c:	40020000 	.word	0x40020000
 8006a10:	40020400 	.word	0x40020400
 8006a14:	40020800 	.word	0x40020800
 8006a18:	40020c00 	.word	0x40020c00
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	40021400 	.word	0x40021400
 8006a24:	40021800 	.word	0x40021800
 8006a28:	40021c00 	.word	0x40021c00
 8006a2c:	40013c00 	.word	0x40013c00

08006a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	807b      	strh	r3, [r7, #2]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a40:	787b      	ldrb	r3, [r7, #1]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a46:	887a      	ldrh	r2, [r7, #2]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a4c:	e003      	b.n	8006a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a4e:	887b      	ldrh	r3, [r7, #2]
 8006a50:	041a      	lsls	r2, r3, #16
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	619a      	str	r2, [r3, #24]
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a74:	887a      	ldrh	r2, [r7, #2]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	041a      	lsls	r2, r3, #16
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	43d9      	mvns	r1, r3
 8006a80:	887b      	ldrh	r3, [r7, #2]
 8006a82:	400b      	ands	r3, r1
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	619a      	str	r2, [r3, #24]
}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006aa2:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d006      	beq.n	8006abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006aae:	4a05      	ldr	r2, [pc, #20]	; (8006ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 f806 	bl	8006ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40013c00 	.word	0x40013c00

08006ac8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e12b      	b.n	8006d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fb fb4e 	bl	80021a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2224      	movs	r2, #36	; 0x24
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b44:	f001 fd3a 	bl	80085bc <HAL_RCC_GetPCLK1Freq>
 8006b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4a81      	ldr	r2, [pc, #516]	; (8006d54 <HAL_I2C_Init+0x274>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d807      	bhi.n	8006b64 <HAL_I2C_Init+0x84>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4a80      	ldr	r2, [pc, #512]	; (8006d58 <HAL_I2C_Init+0x278>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	bf94      	ite	ls
 8006b5c:	2301      	movls	r3, #1
 8006b5e:	2300      	movhi	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e006      	b.n	8006b72 <HAL_I2C_Init+0x92>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4a7d      	ldr	r2, [pc, #500]	; (8006d5c <HAL_I2C_Init+0x27c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	bf94      	ite	ls
 8006b6c:	2301      	movls	r3, #1
 8006b6e:	2300      	movhi	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e0e7      	b.n	8006d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4a78      	ldr	r2, [pc, #480]	; (8006d60 <HAL_I2C_Init+0x280>)
 8006b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b82:	0c9b      	lsrs	r3, r3, #18
 8006b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a6a      	ldr	r2, [pc, #424]	; (8006d54 <HAL_I2C_Init+0x274>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d802      	bhi.n	8006bb4 <HAL_I2C_Init+0xd4>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	e009      	b.n	8006bc8 <HAL_I2C_Init+0xe8>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	4a69      	ldr	r2, [pc, #420]	; (8006d64 <HAL_I2C_Init+0x284>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	099b      	lsrs	r3, r3, #6
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006bda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	495c      	ldr	r1, [pc, #368]	; (8006d54 <HAL_I2C_Init+0x274>)
 8006be4:	428b      	cmp	r3, r1
 8006be6:	d819      	bhi.n	8006c1c <HAL_I2C_Init+0x13c>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	1e59      	subs	r1, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006bfc:	400b      	ands	r3, r1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <HAL_I2C_Init+0x138>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	1e59      	subs	r1, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c10:	3301      	adds	r3, #1
 8006c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c16:	e051      	b.n	8006cbc <HAL_I2C_Init+0x1dc>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	e04f      	b.n	8006cbc <HAL_I2C_Init+0x1dc>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d111      	bne.n	8006c48 <HAL_I2C_Init+0x168>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	1e58      	subs	r0, r3, #1
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6859      	ldr	r1, [r3, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	440b      	add	r3, r1
 8006c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c36:	3301      	adds	r3, #1
 8006c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	e012      	b.n	8006c6e <HAL_I2C_Init+0x18e>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	1e58      	subs	r0, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6859      	ldr	r1, [r3, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	0099      	lsls	r1, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c5e:	3301      	adds	r3, #1
 8006c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <HAL_I2C_Init+0x196>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e022      	b.n	8006cbc <HAL_I2C_Init+0x1dc>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10e      	bne.n	8006c9c <HAL_I2C_Init+0x1bc>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1e58      	subs	r0, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	440b      	add	r3, r1
 8006c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c90:	3301      	adds	r3, #1
 8006c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9a:	e00f      	b.n	8006cbc <HAL_I2C_Init+0x1dc>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	1e58      	subs	r0, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6859      	ldr	r1, [r3, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	0099      	lsls	r1, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	6809      	ldr	r1, [r1, #0]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69da      	ldr	r2, [r3, #28]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6911      	ldr	r1, [r2, #16]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	68d2      	ldr	r2, [r2, #12]
 8006cf6:	4311      	orrs	r1, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695a      	ldr	r2, [r3, #20]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	000186a0 	.word	0x000186a0
 8006d58:	001e847f 	.word	0x001e847f
 8006d5c:	003d08ff 	.word	0x003d08ff
 8006d60:	431bde83 	.word	0x431bde83
 8006d64:	10624dd3 	.word	0x10624dd3

08006d68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e128      	b.n	8006fcc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d109      	bne.n	8006d9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a90      	ldr	r2, [pc, #576]	; (8006fd4 <HAL_I2S_Init+0x26c>)
 8006d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fb fa4f 	bl	8002238 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006db0:	f023 030f 	bic.w	r3, r3, #15
 8006db4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d060      	beq.n	8006e88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006dce:	2310      	movs	r3, #16
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e001      	b.n	8006dd8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006dd4:	2320      	movs	r3, #32
 8006dd6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d802      	bhi.n	8006de6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006de6:	2001      	movs	r0, #1
 8006de8:	f001 fd1e 	bl	8008828 <HAL_RCCEx_GetPeriphCLKFreq>
 8006dec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df6:	d125      	bne.n	8006e44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	3305      	adds	r3, #5
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	e01f      	b.n	8006e62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	461a      	mov	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3e:	3305      	adds	r3, #5
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	e00e      	b.n	8006e62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	461a      	mov	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5e:	3305      	adds	r3, #5
 8006e60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	4a5c      	ldr	r2, [pc, #368]	; (8006fd8 <HAL_I2S_Init+0x270>)
 8006e66:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6a:	08db      	lsrs	r3, r3, #3
 8006e6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	e003      	b.n	8006e90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d902      	bls.n	8006e9c <HAL_I2S_Init+0x134>
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2bff      	cmp	r3, #255	; 0xff
 8006e9a:	d907      	bls.n	8006eac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea0:	f043 0210 	orr.w	r2, r3, #16
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e08f      	b.n	8006fcc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	ea42 0103 	orr.w	r1, r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006eca:	f023 030f 	bic.w	r3, r3, #15
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6851      	ldr	r1, [r2, #4]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6892      	ldr	r2, [r2, #8]
 8006ed6:	4311      	orrs	r1, r2
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68d2      	ldr	r2, [r2, #12]
 8006edc:	4311      	orrs	r1, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6992      	ldr	r2, [r2, #24]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d161      	bne.n	8006fbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a38      	ldr	r2, [pc, #224]	; (8006fdc <HAL_I2S_Init+0x274>)
 8006efc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a37      	ldr	r2, [pc, #220]	; (8006fe0 <HAL_I2S_Init+0x278>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d101      	bne.n	8006f0c <HAL_I2S_Init+0x1a4>
 8006f08:	4b36      	ldr	r3, [pc, #216]	; (8006fe4 <HAL_I2S_Init+0x27c>)
 8006f0a:	e001      	b.n	8006f10 <HAL_I2S_Init+0x1a8>
 8006f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	4932      	ldr	r1, [pc, #200]	; (8006fe0 <HAL_I2S_Init+0x278>)
 8006f18:	428a      	cmp	r2, r1
 8006f1a:	d101      	bne.n	8006f20 <HAL_I2S_Init+0x1b8>
 8006f1c:	4a31      	ldr	r2, [pc, #196]	; (8006fe4 <HAL_I2S_Init+0x27c>)
 8006f1e:	e001      	b.n	8006f24 <HAL_I2S_Init+0x1bc>
 8006f20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006f24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006f28:	f023 030f 	bic.w	r3, r3, #15
 8006f2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a2b      	ldr	r2, [pc, #172]	; (8006fe0 <HAL_I2S_Init+0x278>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d101      	bne.n	8006f3c <HAL_I2S_Init+0x1d4>
 8006f38:	4b2a      	ldr	r3, [pc, #168]	; (8006fe4 <HAL_I2S_Init+0x27c>)
 8006f3a:	e001      	b.n	8006f40 <HAL_I2S_Init+0x1d8>
 8006f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f40:	2202      	movs	r2, #2
 8006f42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a25      	ldr	r2, [pc, #148]	; (8006fe0 <HAL_I2S_Init+0x278>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d101      	bne.n	8006f52 <HAL_I2S_Init+0x1ea>
 8006f4e:	4b25      	ldr	r3, [pc, #148]	; (8006fe4 <HAL_I2S_Init+0x27c>)
 8006f50:	e001      	b.n	8006f56 <HAL_I2S_Init+0x1ee>
 8006f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f62:	d003      	beq.n	8006f6c <HAL_I2S_Init+0x204>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d103      	bne.n	8006f74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	e001      	b.n	8006f78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006f74:	2300      	movs	r3, #0
 8006f76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006f82:	4313      	orrs	r3, r2
 8006f84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006f96:	4313      	orrs	r3, r2
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	897b      	ldrh	r3, [r7, #10]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fa4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a0d      	ldr	r2, [pc, #52]	; (8006fe0 <HAL_I2S_Init+0x278>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d101      	bne.n	8006fb4 <HAL_I2S_Init+0x24c>
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <HAL_I2S_Init+0x27c>)
 8006fb2:	e001      	b.n	8006fb8 <HAL_I2S_Init+0x250>
 8006fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fb8:	897a      	ldrh	r2, [r7, #10]
 8006fba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3720      	adds	r7, #32
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	08007695 	.word	0x08007695
 8006fd8:	cccccccd 	.word	0xcccccccd
 8006fdc:	0800781d 	.word	0x0800781d
 8006fe0:	40003800 	.word	0x40003800
 8006fe4:	40003400 	.word	0x40003400

08006fe8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <HAL_I2S_Receive_DMA+0x1a>
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e0a1      	b.n	800714a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_I2S_Receive_DMA+0x2e>
 8007012:	2302      	movs	r3, #2
 8007014:	e099      	b.n	800714a <HAL_I2S_Receive_DMA+0x162>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b01      	cmp	r3, #1
 8007028:	d005      	beq.n	8007036 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8007032:	2302      	movs	r3, #2
 8007034:	e089      	b.n	800714a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2204      	movs	r2, #4
 800703a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b03      	cmp	r3, #3
 800705a:	d002      	beq.n	8007062 <HAL_I2S_Receive_DMA+0x7a>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b05      	cmp	r3, #5
 8007060:	d10a      	bne.n	8007078 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	865a      	strh	r2, [r3, #50]	; 0x32
 8007076:	e005      	b.n	8007084 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007088:	4a32      	ldr	r2, [pc, #200]	; (8007154 <HAL_I2S_Receive_DMA+0x16c>)
 800708a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	4a31      	ldr	r2, [pc, #196]	; (8007158 <HAL_I2S_Receive_DMA+0x170>)
 8007092:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007098:	4a30      	ldr	r2, [pc, #192]	; (800715c <HAL_I2S_Receive_DMA+0x174>)
 800709a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070aa:	d10a      	bne.n	80070c2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80070ac:	2300      	movs	r3, #0
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	4619      	mov	r1, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80070d8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80070da:	f7fe fedf 	bl	8005e9c <HAL_DMA_Start_IT>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00f      	beq.n	8007104 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e8:	f043 0208 	orr.w	r2, r3, #8
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e022      	b.n	800714a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710e:	2b00      	cmp	r3, #0
 8007110:	d107      	bne.n	8007122 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007120:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	08007573 	.word	0x08007573
 8007158:	08007531 	.word	0x08007531
 800715c:	0800758f 	.word	0x0800758f

08007160 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007174:	d004      	beq.n	8007180 <HAL_I2S_DMAStop+0x20>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f040 80d1 	bne.w	8007322 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00f      	beq.n	80071a8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fedd 	bl	8005f4c <HAL_DMA_Abort>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	f043 0208 	orr.w	r2, r3, #8
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80071a8:	2364      	movs	r3, #100	; 0x64
 80071aa:	2201      	movs	r2, #1
 80071ac:	2102      	movs	r1, #2
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fafa 	bl	80077a8 <I2S_WaitFlagStateUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	f043 0201 	orr.w	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80071d2:	2364      	movs	r3, #100	; 0x64
 80071d4:	2200      	movs	r2, #0
 80071d6:	2180      	movs	r1, #128	; 0x80
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fae5 	bl	80077a8 <I2S_WaitFlagStateUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00b      	beq.n	80071fc <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e8:	f043 0201 	orr.w	r2, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69da      	ldr	r2, [r3, #28]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800720a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0202 	bic.w	r2, r2, #2
 8007228:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b05      	cmp	r3, #5
 8007234:	f040 8165 	bne.w	8007502 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00f      	beq.n	8007260 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fe81 	bl	8005f4c <HAL_DMA_Abort>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007254:	f043 0208 	orr.w	r2, r3, #8
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a8a      	ldr	r2, [pc, #552]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d101      	bne.n	800726e <HAL_I2S_DMAStop+0x10e>
 800726a:	4b8a      	ldr	r3, [pc, #552]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 800726c:	e001      	b.n	8007272 <HAL_I2S_DMAStop+0x112>
 800726e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007272:	69da      	ldr	r2, [r3, #28]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4985      	ldr	r1, [pc, #532]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 800727a:	428b      	cmp	r3, r1
 800727c:	d101      	bne.n	8007282 <HAL_I2S_DMAStop+0x122>
 800727e:	4b85      	ldr	r3, [pc, #532]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 8007280:	e001      	b.n	8007286 <HAL_I2S_DMAStop+0x126>
 8007282:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800728c:	2300      	movs	r3, #0
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a7e      	ldr	r2, [pc, #504]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d101      	bne.n	800729e <HAL_I2S_DMAStop+0x13e>
 800729a:	4b7e      	ldr	r3, [pc, #504]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 800729c:	e001      	b.n	80072a2 <HAL_I2S_DMAStop+0x142>
 800729e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	613b      	str	r3, [r7, #16]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a79      	ldr	r2, [pc, #484]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d101      	bne.n	80072b4 <HAL_I2S_DMAStop+0x154>
 80072b0:	4b78      	ldr	r3, [pc, #480]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 80072b2:	e001      	b.n	80072b8 <HAL_I2S_DMAStop+0x158>
 80072b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a73      	ldr	r2, [pc, #460]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d101      	bne.n	80072cc <HAL_I2S_DMAStop+0x16c>
 80072c8:	4b72      	ldr	r3, [pc, #456]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 80072ca:	e001      	b.n	80072d0 <HAL_I2S_DMAStop+0x170>
 80072cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	496e      	ldr	r1, [pc, #440]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 80072d8:	428b      	cmp	r3, r1
 80072da:	d101      	bne.n	80072e0 <HAL_I2S_DMAStop+0x180>
 80072dc:	4b6d      	ldr	r3, [pc, #436]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 80072de:	e001      	b.n	80072e4 <HAL_I2S_DMAStop+0x184>
 80072e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072e4:	f022 0201 	bic.w	r2, r2, #1
 80072e8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10c      	bne.n	800730c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800730a:	e0fa      	b.n	8007502 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a5f      	ldr	r2, [pc, #380]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d101      	bne.n	800731a <HAL_I2S_DMAStop+0x1ba>
 8007316:	4b5f      	ldr	r3, [pc, #380]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 8007318:	e001      	b.n	800731e <HAL_I2S_DMAStop+0x1be>
 800731a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800731e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007320:	e0ef      	b.n	8007502 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732a:	d005      	beq.n	8007338 <HAL_I2S_DMAStop+0x1d8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007334:	f040 80e5 	bne.w	8007502 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00f      	beq.n	8007360 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fe01 	bl	8005f4c <HAL_DMA_Abort>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007354:	f043 0208 	orr.w	r2, r3, #8
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b05      	cmp	r3, #5
 800736a:	f040 809a 	bne.w	80074a2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00f      	beq.n	8007396 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fde6 	bl	8005f4c <HAL_DMA_Abort>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	f043 0208 	orr.w	r2, r3, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8007396:	f7fe fb1b 	bl	80059d0 <HAL_GetTick>
 800739a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800739c:	e012      	b.n	80073c4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800739e:	f7fe fb17 	bl	80059d0 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b64      	cmp	r3, #100	; 0x64
 80073aa:	d90b      	bls.n	80073c4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	f043 0201 	orr.w	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a31      	ldr	r2, [pc, #196]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d101      	bne.n	80073d2 <HAL_I2S_DMAStop+0x272>
 80073ce:	4b31      	ldr	r3, [pc, #196]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 80073d0:	e001      	b.n	80073d6 <HAL_I2S_DMAStop+0x276>
 80073d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d1de      	bne.n	800739e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80073e0:	e012      	b.n	8007408 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80073e2:	f7fe faf5 	bl	80059d0 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b64      	cmp	r3, #100	; 0x64
 80073ee:	d90b      	bls.n	8007408 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f4:	f043 0201 	orr.w	r2, r3, #1
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a20      	ldr	r2, [pc, #128]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d101      	bne.n	8007416 <HAL_I2S_DMAStop+0x2b6>
 8007412:	4b20      	ldr	r3, [pc, #128]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 8007414:	e001      	b.n	800741a <HAL_I2S_DMAStop+0x2ba>
 8007416:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007420:	2b80      	cmp	r3, #128	; 0x80
 8007422:	d0de      	beq.n	80073e2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a19      	ldr	r2, [pc, #100]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d101      	bne.n	8007432 <HAL_I2S_DMAStop+0x2d2>
 800742e:	4b19      	ldr	r3, [pc, #100]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 8007430:	e001      	b.n	8007436 <HAL_I2S_DMAStop+0x2d6>
 8007432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4914      	ldr	r1, [pc, #80]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 800743e:	428b      	cmp	r3, r1
 8007440:	d101      	bne.n	8007446 <HAL_I2S_DMAStop+0x2e6>
 8007442:	4b14      	ldr	r3, [pc, #80]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 8007444:	e001      	b.n	800744a <HAL_I2S_DMAStop+0x2ea>
 8007446:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800744a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800744e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a0d      	ldr	r2, [pc, #52]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d101      	bne.n	8007462 <HAL_I2S_DMAStop+0x302>
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 8007460:	e001      	b.n	8007466 <HAL_I2S_DMAStop+0x306>
 8007462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a07      	ldr	r2, [pc, #28]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d101      	bne.n	800747a <HAL_I2S_DMAStop+0x31a>
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 8007478:	e001      	b.n	800747e <HAL_I2S_DMAStop+0x31e>
 800747a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4902      	ldr	r1, [pc, #8]	; (8007490 <HAL_I2S_DMAStop+0x330>)
 8007486:	428b      	cmp	r3, r1
 8007488:	d106      	bne.n	8007498 <HAL_I2S_DMAStop+0x338>
 800748a:	4b02      	ldr	r3, [pc, #8]	; (8007494 <HAL_I2S_DMAStop+0x334>)
 800748c:	e006      	b.n	800749c <HAL_I2S_DMAStop+0x33c>
 800748e:	bf00      	nop
 8007490:	40003800 	.word	0x40003800
 8007494:	40003400 	.word	0x40003400
 8007498:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800749c:	f022 0202 	bic.w	r2, r2, #2
 80074a0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80074b2:	2300      	movs	r3, #0
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	60bb      	str	r3, [r7, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	60bb      	str	r3, [r7, #8]
 80074c6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0201 	bic.w	r2, r2, #1
 80074d6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e0:	d10c      	bne.n	80074fc <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	77fb      	strb	r3, [r7, #31]
 80074fa:	e002      	b.n	8007502 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800750a:	7ffb      	ldrb	r3, [r7, #31]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007522:	b2db      	uxtb	r3, r3
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10e      	bne.n	8007564 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7fb fa17 	bl	8002998 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7fb fa13 	bl	80029ac <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0203 	bic.w	r2, r2, #3
 80075aa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c4:	f043 0208 	orr.w	r2, r3, #8
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f7fb fba5 	bl	8002d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	881a      	ldrh	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	1c9a      	adds	r2, r3, #2
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10e      	bne.n	800762e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800761e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7fb f8e7 	bl	80027fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	b292      	uxth	r2, r2
 800764a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	1c9a      	adds	r2, r3, #2
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10e      	bne.n	800768c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800767c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fb f986 	bl	8002998 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d13a      	bne.n	8007726 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d109      	bne.n	80076ce <I2S_IRQHandler+0x3a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c4:	2b40      	cmp	r3, #64	; 0x40
 80076c6:	d102      	bne.n	80076ce <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff ffb4 	bl	8007636 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b40      	cmp	r3, #64	; 0x40
 80076d6:	d126      	bne.n	8007726 <I2S_IRQHandler+0x92>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d11f      	bne.n	8007726 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80076f4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80076f6:	2300      	movs	r3, #0
 80076f8:	613b      	str	r3, [r7, #16]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	613b      	str	r3, [r7, #16]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007718:	f043 0202 	orr.w	r2, r3, #2
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7fb fafb 	bl	8002d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b03      	cmp	r3, #3
 8007730:	d136      	bne.n	80077a0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b02      	cmp	r3, #2
 800773a:	d109      	bne.n	8007750 <I2S_IRQHandler+0xbc>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007746:	2b80      	cmp	r3, #128	; 0x80
 8007748:	d102      	bne.n	8007750 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff ff45 	bl	80075da <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b08      	cmp	r3, #8
 8007758:	d122      	bne.n	80077a0 <I2S_IRQHandler+0x10c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b20      	cmp	r3, #32
 8007766:	d11b      	bne.n	80077a0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007776:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007792:	f043 0204 	orr.w	r2, r3, #4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fb fabe 	bl	8002d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077a0:	bf00      	nop
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	4613      	mov	r3, r2
 80077b6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80077b8:	f7fe f90a 	bl	80059d0 <HAL_GetTick>
 80077bc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80077be:	e018      	b.n	80077f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c6:	d014      	beq.n	80077f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80077c8:	f7fe f902 	bl	80059d0 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d902      	bls.n	80077de <I2S_WaitFlagStateUntilTimeout+0x36>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d109      	bne.n	80077f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e00f      	b.n	8007812 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4013      	ands	r3, r2
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	bf0c      	ite	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	2300      	movne	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	429a      	cmp	r2, r3
 800780e:	d1d7      	bne.n	80077c0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4aa2      	ldr	r2, [pc, #648]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d101      	bne.n	800783a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007836:	4ba2      	ldr	r3, [pc, #648]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007838:	e001      	b.n	800783e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800783a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a9b      	ldr	r2, [pc, #620]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d101      	bne.n	8007858 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007854:	4b9a      	ldr	r3, [pc, #616]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007856:	e001      	b.n	800785c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007868:	d004      	beq.n	8007874 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	f040 8099 	bne.w	80079a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b02      	cmp	r3, #2
 800787c:	d107      	bne.n	800788e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f925 	bl	8007ad8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b01      	cmp	r3, #1
 8007896:	d107      	bne.n	80078a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9c8 	bl	8007c38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d13a      	bne.n	8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d035      	beq.n	8007928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a7e      	ldr	r2, [pc, #504]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d101      	bne.n	80078ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80078c6:	4b7e      	ldr	r3, [pc, #504]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078c8:	e001      	b.n	80078ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80078ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4979      	ldr	r1, [pc, #484]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078d6:	428b      	cmp	r3, r1
 80078d8:	d101      	bne.n	80078de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80078da:	4b79      	ldr	r3, [pc, #484]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078dc:	e001      	b.n	80078e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80078de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791a:	f043 0202 	orr.w	r2, r3, #2
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fb f9fa 	bl	8002d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b08      	cmp	r3, #8
 8007930:	f040 80be 	bne.w	8007ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80b8 	beq.w	8007ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800794e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a59      	ldr	r2, [pc, #356]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d101      	bne.n	800795e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800795a:	4b59      	ldr	r3, [pc, #356]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800795c:	e001      	b.n	8007962 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800795e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4954      	ldr	r1, [pc, #336]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800796a:	428b      	cmp	r3, r1
 800796c:	d101      	bne.n	8007972 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800796e:	4b54      	ldr	r3, [pc, #336]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007970:	e001      	b.n	8007976 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800797a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800797c:	2300      	movs	r3, #0
 800797e:	60bb      	str	r3, [r7, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	60bb      	str	r3, [r7, #8]
 8007988:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	f043 0204 	orr.w	r2, r3, #4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fb f9bc 	bl	8002d1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079a4:	e084      	b.n	8007ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d107      	bne.n	80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8be 	bl	8007b3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d107      	bne.n	80079da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f8fd 	bl	8007bd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d12f      	bne.n	8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d02a      	beq.n	8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80079fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a2e      	ldr	r2, [pc, #184]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d101      	bne.n	8007a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007a08:	4b2d      	ldr	r3, [pc, #180]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a0a:	e001      	b.n	8007a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4929      	ldr	r1, [pc, #164]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	d101      	bne.n	8007a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007a1c:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a1e:	e001      	b.n	8007a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	f043 0202 	orr.w	r2, r3, #2
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7fb f96c 	bl	8002d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b08      	cmp	r3, #8
 8007a4c:	d131      	bne.n	8007ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02c      	beq.n	8007ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a17      	ldr	r2, [pc, #92]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d101      	bne.n	8007a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007a62:	4b17      	ldr	r3, [pc, #92]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a64:	e001      	b.n	8007a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4912      	ldr	r1, [pc, #72]	; (8007abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a72:	428b      	cmp	r3, r1
 8007a74:	d101      	bne.n	8007a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007a76:	4b12      	ldr	r3, [pc, #72]	; (8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a78:	e001      	b.n	8007a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a92:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa0:	f043 0204 	orr.w	r2, r3, #4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fb f937 	bl	8002d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007aae:	e000      	b.n	8007ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007ab0:	bf00      	nop
}
 8007ab2:	bf00      	nop
 8007ab4:	3720      	adds	r7, #32
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40003800 	.word	0x40003800
 8007ac0:	40003400 	.word	0x40003400

08007ac4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	1c99      	adds	r1, r3, #2
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6251      	str	r1, [r2, #36]	; 0x24
 8007aea:	881a      	ldrh	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d113      	bne.n	8007b32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ffc9 	bl	8007ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	1c99      	adds	r1, r3, #2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6251      	str	r1, [r2, #36]	; 0x24
 8007b4e:	8819      	ldrh	r1, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <I2SEx_TxISR_I2SExt+0x90>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d101      	bne.n	8007b5e <I2SEx_TxISR_I2SExt+0x22>
 8007b5a:	4b1d      	ldr	r3, [pc, #116]	; (8007bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8007b5c:	e001      	b.n	8007b62 <I2SEx_TxISR_I2SExt+0x26>
 8007b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b62:	460a      	mov	r2, r1
 8007b64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d121      	bne.n	8007bc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <I2SEx_TxISR_I2SExt+0x90>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d101      	bne.n	8007b8c <I2SEx_TxISR_I2SExt+0x50>
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8007b8a:	e001      	b.n	8007b90 <I2SEx_TxISR_I2SExt+0x54>
 8007b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	490d      	ldr	r1, [pc, #52]	; (8007bcc <I2SEx_TxISR_I2SExt+0x90>)
 8007b98:	428b      	cmp	r3, r1
 8007b9a:	d101      	bne.n	8007ba0 <I2SEx_TxISR_I2SExt+0x64>
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8007b9e:	e001      	b.n	8007ba4 <I2SEx_TxISR_I2SExt+0x68>
 8007ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ba8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d106      	bne.n	8007bc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ff81 	bl	8007ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	40003800 	.word	0x40003800
 8007bd0:	40003400 	.word	0x40003400

08007bd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68d8      	ldr	r0, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	1c99      	adds	r1, r3, #2
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007bec:	b282      	uxth	r2, r0
 8007bee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d113      	bne.n	8007c30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff ff4a 	bl	8007ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a20      	ldr	r2, [pc, #128]	; (8007cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <I2SEx_RxISR_I2SExt+0x16>
 8007c4a:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <I2SEx_RxISR_I2SExt+0x94>)
 8007c4c:	e001      	b.n	8007c52 <I2SEx_RxISR_I2SExt+0x1a>
 8007c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c52:	68d8      	ldr	r0, [r3, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	1c99      	adds	r1, r3, #2
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007c5e:	b282      	uxth	r2, r0
 8007c60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d121      	bne.n	8007cbe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a12      	ldr	r2, [pc, #72]	; (8007cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d101      	bne.n	8007c88 <I2SEx_RxISR_I2SExt+0x50>
 8007c84:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <I2SEx_RxISR_I2SExt+0x94>)
 8007c86:	e001      	b.n	8007c8c <I2SEx_RxISR_I2SExt+0x54>
 8007c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	490d      	ldr	r1, [pc, #52]	; (8007cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8007c94:	428b      	cmp	r3, r1
 8007c96:	d101      	bne.n	8007c9c <I2SEx_RxISR_I2SExt+0x64>
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <I2SEx_RxISR_I2SExt+0x94>)
 8007c9a:	e001      	b.n	8007ca0 <I2SEx_RxISR_I2SExt+0x68>
 8007c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ca0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ca4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d106      	bne.n	8007cbe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff ff03 	bl	8007ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40003800 	.word	0x40003800
 8007ccc:	40003400 	.word	0x40003400

08007cd0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8007cdc:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <HAL_PWR_EnterSTOPMode+0x50>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f023 0203 	bic.w	r2, r3, #3
 8007ce4:	490e      	ldr	r1, [pc, #56]	; (8007d20 <HAL_PWR_EnterSTOPMode+0x50>)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007cec:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <HAL_PWR_EnterSTOPMode+0x54>)
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	4a0c      	ldr	r2, [pc, #48]	; (8007d24 <HAL_PWR_EnterSTOPMode+0x54>)
 8007cf2:	f043 0304 	orr.w	r3, r3, #4
 8007cf6:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8007cfe:	bf30      	wfi
 8007d00:	e002      	b.n	8007d08 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007d02:	bf40      	sev
    __WFE();
 8007d04:	bf20      	wfe
    __WFE();
 8007d06:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <HAL_PWR_EnterSTOPMode+0x54>)
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	4a05      	ldr	r2, [pc, #20]	; (8007d24 <HAL_PWR_EnterSTOPMode+0x54>)
 8007d0e:	f023 0304 	bic.w	r3, r3, #4
 8007d12:	6113      	str	r3, [r2, #16]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	40007000 	.word	0x40007000
 8007d24:	e000ed00 	.word	0xe000ed00

08007d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e264      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d075      	beq.n	8007e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d46:	4ba3      	ldr	r3, [pc, #652]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d00c      	beq.n	8007d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d52:	4ba0      	ldr	r3, [pc, #640]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d112      	bne.n	8007d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d5e:	4b9d      	ldr	r3, [pc, #628]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d6a:	d10b      	bne.n	8007d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d6c:	4b99      	ldr	r3, [pc, #612]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d05b      	beq.n	8007e30 <HAL_RCC_OscConfig+0x108>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d157      	bne.n	8007e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e23f      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8c:	d106      	bne.n	8007d9c <HAL_RCC_OscConfig+0x74>
 8007d8e:	4b91      	ldr	r3, [pc, #580]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a90      	ldr	r2, [pc, #576]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	e01d      	b.n	8007dd8 <HAL_RCC_OscConfig+0xb0>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007da4:	d10c      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x98>
 8007da6:	4b8b      	ldr	r3, [pc, #556]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a8a      	ldr	r2, [pc, #552]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	4b88      	ldr	r3, [pc, #544]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a87      	ldr	r2, [pc, #540]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	e00b      	b.n	8007dd8 <HAL_RCC_OscConfig+0xb0>
 8007dc0:	4b84      	ldr	r3, [pc, #528]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a83      	ldr	r2, [pc, #524]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	4b81      	ldr	r3, [pc, #516]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a80      	ldr	r2, [pc, #512]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d013      	beq.n	8007e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de0:	f7fd fdf6 	bl	80059d0 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007de8:	f7fd fdf2 	bl	80059d0 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b64      	cmp	r3, #100	; 0x64
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e204      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dfa:	4b76      	ldr	r3, [pc, #472]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <HAL_RCC_OscConfig+0xc0>
 8007e06:	e014      	b.n	8007e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e08:	f7fd fde2 	bl	80059d0 <HAL_GetTick>
 8007e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e10:	f7fd fdde 	bl	80059d0 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b64      	cmp	r3, #100	; 0x64
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e1f0      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e22:	4b6c      	ldr	r3, [pc, #432]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f0      	bne.n	8007e10 <HAL_RCC_OscConfig+0xe8>
 8007e2e:	e000      	b.n	8007e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d063      	beq.n	8007f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e3e:	4b65      	ldr	r3, [pc, #404]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e4a:	4b62      	ldr	r3, [pc, #392]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	d11c      	bne.n	8007e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e56:	4b5f      	ldr	r3, [pc, #380]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d116      	bne.n	8007e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e62:	4b5c      	ldr	r3, [pc, #368]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <HAL_RCC_OscConfig+0x152>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d001      	beq.n	8007e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e1c4      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e7a:	4b56      	ldr	r3, [pc, #344]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	4952      	ldr	r1, [pc, #328]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e8e:	e03a      	b.n	8007f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d020      	beq.n	8007eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e98:	4b4f      	ldr	r3, [pc, #316]	; (8007fd8 <HAL_RCC_OscConfig+0x2b0>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9e:	f7fd fd97 	bl	80059d0 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ea6:	f7fd fd93 	bl	80059d0 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e1a5      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb8:	4b46      	ldr	r3, [pc, #280]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec4:	4b43      	ldr	r3, [pc, #268]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4940      	ldr	r1, [pc, #256]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	600b      	str	r3, [r1, #0]
 8007ed8:	e015      	b.n	8007f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eda:	4b3f      	ldr	r3, [pc, #252]	; (8007fd8 <HAL_RCC_OscConfig+0x2b0>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee0:	f7fd fd76 	bl	80059d0 <HAL_GetTick>
 8007ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ee8:	f7fd fd72 	bl	80059d0 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e184      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007efa:	4b36      	ldr	r3, [pc, #216]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f0      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d030      	beq.n	8007f74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d016      	beq.n	8007f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f1a:	4b30      	ldr	r3, [pc, #192]	; (8007fdc <HAL_RCC_OscConfig+0x2b4>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f20:	f7fd fd56 	bl	80059d0 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f28:	f7fd fd52 	bl	80059d0 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e164      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f3a:	4b26      	ldr	r3, [pc, #152]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0x200>
 8007f46:	e015      	b.n	8007f74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f48:	4b24      	ldr	r3, [pc, #144]	; (8007fdc <HAL_RCC_OscConfig+0x2b4>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f4e:	f7fd fd3f 	bl	80059d0 <HAL_GetTick>
 8007f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f54:	e008      	b.n	8007f68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f56:	f7fd fd3b 	bl	80059d0 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e14d      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f68:	4b1a      	ldr	r3, [pc, #104]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f0      	bne.n	8007f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 80a0 	beq.w	80080c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10f      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]
 8007f96:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	4a0e      	ldr	r2, [pc, #56]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <HAL_RCC_OscConfig+0x2ac>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb2:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <HAL_RCC_OscConfig+0x2b8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d121      	bne.n	8008002 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fbe:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <HAL_RCC_OscConfig+0x2b8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a07      	ldr	r2, [pc, #28]	; (8007fe0 <HAL_RCC_OscConfig+0x2b8>)
 8007fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fca:	f7fd fd01 	bl	80059d0 <HAL_GetTick>
 8007fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fd0:	e011      	b.n	8007ff6 <HAL_RCC_OscConfig+0x2ce>
 8007fd2:	bf00      	nop
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	42470000 	.word	0x42470000
 8007fdc:	42470e80 	.word	0x42470e80
 8007fe0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fe4:	f7fd fcf4 	bl	80059d0 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e106      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff6:	4b85      	ldr	r3, [pc, #532]	; (800820c <HAL_RCC_OscConfig+0x4e4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0f0      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d106      	bne.n	8008018 <HAL_RCC_OscConfig+0x2f0>
 800800a:	4b81      	ldr	r3, [pc, #516]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	4a80      	ldr	r2, [pc, #512]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008010:	f043 0301 	orr.w	r3, r3, #1
 8008014:	6713      	str	r3, [r2, #112]	; 0x70
 8008016:	e01c      	b.n	8008052 <HAL_RCC_OscConfig+0x32a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b05      	cmp	r3, #5
 800801e:	d10c      	bne.n	800803a <HAL_RCC_OscConfig+0x312>
 8008020:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008024:	4a7a      	ldr	r2, [pc, #488]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008026:	f043 0304 	orr.w	r3, r3, #4
 800802a:	6713      	str	r3, [r2, #112]	; 0x70
 800802c:	4b78      	ldr	r3, [pc, #480]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008030:	4a77      	ldr	r2, [pc, #476]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008032:	f043 0301 	orr.w	r3, r3, #1
 8008036:	6713      	str	r3, [r2, #112]	; 0x70
 8008038:	e00b      	b.n	8008052 <HAL_RCC_OscConfig+0x32a>
 800803a:	4b75      	ldr	r3, [pc, #468]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	4a74      	ldr	r2, [pc, #464]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008040:	f023 0301 	bic.w	r3, r3, #1
 8008044:	6713      	str	r3, [r2, #112]	; 0x70
 8008046:	4b72      	ldr	r3, [pc, #456]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	4a71      	ldr	r2, [pc, #452]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800804c:	f023 0304 	bic.w	r3, r3, #4
 8008050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d015      	beq.n	8008086 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800805a:	f7fd fcb9 	bl	80059d0 <HAL_GetTick>
 800805e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008060:	e00a      	b.n	8008078 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008062:	f7fd fcb5 	bl	80059d0 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008070:	4293      	cmp	r3, r2
 8008072:	d901      	bls.n	8008078 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e0c5      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008078:	4b65      	ldr	r3, [pc, #404]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 800807a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0ee      	beq.n	8008062 <HAL_RCC_OscConfig+0x33a>
 8008084:	e014      	b.n	80080b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008086:	f7fd fca3 	bl	80059d0 <HAL_GetTick>
 800808a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800808c:	e00a      	b.n	80080a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800808e:	f7fd fc9f 	bl	80059d0 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	f241 3288 	movw	r2, #5000	; 0x1388
 800809c:	4293      	cmp	r3, r2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e0af      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080a4:	4b5a      	ldr	r3, [pc, #360]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80080a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1ee      	bne.n	800808e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d105      	bne.n	80080c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080b6:	4b56      	ldr	r3, [pc, #344]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	4a55      	ldr	r2, [pc, #340]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80080bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 809b 	beq.w	8008202 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080cc:	4b50      	ldr	r3, [pc, #320]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 030c 	and.w	r3, r3, #12
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d05c      	beq.n	8008192 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d141      	bne.n	8008164 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e0:	4b4c      	ldr	r3, [pc, #304]	; (8008214 <HAL_RCC_OscConfig+0x4ec>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e6:	f7fd fc73 	bl	80059d0 <HAL_GetTick>
 80080ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ec:	e008      	b.n	8008100 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ee:	f7fd fc6f 	bl	80059d0 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d901      	bls.n	8008100 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e081      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008100:	4b43      	ldr	r3, [pc, #268]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1f0      	bne.n	80080ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	019b      	lsls	r3, r3, #6
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	085b      	lsrs	r3, r3, #1
 8008124:	3b01      	subs	r3, #1
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	431a      	orrs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	061b      	lsls	r3, r3, #24
 8008130:	4937      	ldr	r1, [pc, #220]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008132:	4313      	orrs	r3, r2
 8008134:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008136:	4b37      	ldr	r3, [pc, #220]	; (8008214 <HAL_RCC_OscConfig+0x4ec>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fd fc48 	bl	80059d0 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008144:	f7fd fc44 	bl	80059d0 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e056      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008156:	4b2e      	ldr	r3, [pc, #184]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <HAL_RCC_OscConfig+0x41c>
 8008162:	e04e      	b.n	8008202 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008164:	4b2b      	ldr	r3, [pc, #172]	; (8008214 <HAL_RCC_OscConfig+0x4ec>)
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800816a:	f7fd fc31 	bl	80059d0 <HAL_GetTick>
 800816e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008172:	f7fd fc2d 	bl	80059d0 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e03f      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008184:	4b22      	ldr	r3, [pc, #136]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <HAL_RCC_OscConfig+0x44a>
 8008190:	e037      	b.n	8008202 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e032      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800819e:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <HAL_RCC_OscConfig+0x4e8>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d028      	beq.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d121      	bne.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d11a      	bne.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081ce:	4013      	ands	r3, r2
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d111      	bne.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e4:	085b      	lsrs	r3, r3, #1
 80081e6:	3b01      	subs	r3, #1
 80081e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d107      	bne.n	80081fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d001      	beq.n	8008202 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e000      	b.n	8008204 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	40007000 	.word	0x40007000
 8008210:	40023800 	.word	0x40023800
 8008214:	42470060 	.word	0x42470060

08008218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0cc      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800822c:	4b68      	ldr	r3, [pc, #416]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d90c      	bls.n	8008254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800823a:	4b65      	ldr	r3, [pc, #404]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008242:	4b63      	ldr	r3, [pc, #396]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d001      	beq.n	8008254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0b8      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d020      	beq.n	80082a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800826c:	4b59      	ldr	r3, [pc, #356]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	4a58      	ldr	r2, [pc, #352]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008284:	4b53      	ldr	r3, [pc, #332]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4a52      	ldr	r2, [pc, #328]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800828a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800828e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008290:	4b50      	ldr	r3, [pc, #320]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	494d      	ldr	r1, [pc, #308]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d044      	beq.n	8008338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d107      	bne.n	80082c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082b6:	4b47      	ldr	r3, [pc, #284]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d119      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e07f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d003      	beq.n	80082d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d107      	bne.n	80082e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082d6:	4b3f      	ldr	r3, [pc, #252]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e06f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082e6:	4b3b      	ldr	r3, [pc, #236]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e067      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082f6:	4b37      	ldr	r3, [pc, #220]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f023 0203 	bic.w	r2, r3, #3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4934      	ldr	r1, [pc, #208]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008304:	4313      	orrs	r3, r2
 8008306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008308:	f7fd fb62 	bl	80059d0 <HAL_GetTick>
 800830c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800830e:	e00a      	b.n	8008326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008310:	f7fd fb5e 	bl	80059d0 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	f241 3288 	movw	r2, #5000	; 0x1388
 800831e:	4293      	cmp	r3, r2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e04f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008326:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 020c 	and.w	r2, r3, #12
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	429a      	cmp	r2, r3
 8008336:	d1eb      	bne.n	8008310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008338:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	429a      	cmp	r2, r3
 8008344:	d20c      	bcs.n	8008360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008346:	4b22      	ldr	r3, [pc, #136]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800834e:	4b20      	ldr	r3, [pc, #128]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d001      	beq.n	8008360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e032      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d008      	beq.n	800837e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800836c:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	4916      	ldr	r1, [pc, #88]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800837a:	4313      	orrs	r3, r2
 800837c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0308 	and.w	r3, r3, #8
 8008386:	2b00      	cmp	r3, #0
 8008388:	d009      	beq.n	800839e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	490e      	ldr	r1, [pc, #56]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800839a:	4313      	orrs	r3, r2
 800839c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800839e:	f000 f821 	bl	80083e4 <HAL_RCC_GetSysClockFreq>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	490a      	ldr	r1, [pc, #40]	; (80083d8 <HAL_RCC_ClockConfig+0x1c0>)
 80083b0:	5ccb      	ldrb	r3, [r1, r3]
 80083b2:	fa22 f303 	lsr.w	r3, r2, r3
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <HAL_RCC_ClockConfig+0x1c4>)
 80083b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <HAL_RCC_ClockConfig+0x1c8>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fd fac2 	bl	8005948 <HAL_InitTick>

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	40023c00 	.word	0x40023c00
 80083d4:	40023800 	.word	0x40023800
 80083d8:	08017214 	.word	0x08017214
 80083dc:	200004a0 	.word	0x200004a0
 80083e0:	200004b8 	.word	0x200004b8

080083e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	607b      	str	r3, [r7, #4]
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083fc:	4b67      	ldr	r3, [pc, #412]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 030c 	and.w	r3, r3, #12
 8008404:	2b08      	cmp	r3, #8
 8008406:	d00d      	beq.n	8008424 <HAL_RCC_GetSysClockFreq+0x40>
 8008408:	2b08      	cmp	r3, #8
 800840a:	f200 80bd 	bhi.w	8008588 <HAL_RCC_GetSysClockFreq+0x1a4>
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <HAL_RCC_GetSysClockFreq+0x34>
 8008412:	2b04      	cmp	r3, #4
 8008414:	d003      	beq.n	800841e <HAL_RCC_GetSysClockFreq+0x3a>
 8008416:	e0b7      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008418:	4b61      	ldr	r3, [pc, #388]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800841a:	60bb      	str	r3, [r7, #8]
       break;
 800841c:	e0b7      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800841e:	4b60      	ldr	r3, [pc, #384]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008420:	60bb      	str	r3, [r7, #8]
      break;
 8008422:	e0b4      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008424:	4b5d      	ldr	r3, [pc, #372]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800842c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800842e:	4b5b      	ldr	r3, [pc, #364]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d04d      	beq.n	80084d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800843a:	4b58      	ldr	r3, [pc, #352]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	099b      	lsrs	r3, r3, #6
 8008440:	461a      	mov	r2, r3
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	f240 10ff 	movw	r0, #511	; 0x1ff
 800844a:	f04f 0100 	mov.w	r1, #0
 800844e:	ea02 0800 	and.w	r8, r2, r0
 8008452:	ea03 0901 	and.w	r9, r3, r1
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	014b      	lsls	r3, r1, #5
 8008464:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008468:	0142      	lsls	r2, r0, #5
 800846a:	4610      	mov	r0, r2
 800846c:	4619      	mov	r1, r3
 800846e:	ebb0 0008 	subs.w	r0, r0, r8
 8008472:	eb61 0109 	sbc.w	r1, r1, r9
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	018b      	lsls	r3, r1, #6
 8008480:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008484:	0182      	lsls	r2, r0, #6
 8008486:	1a12      	subs	r2, r2, r0
 8008488:	eb63 0301 	sbc.w	r3, r3, r1
 800848c:	f04f 0000 	mov.w	r0, #0
 8008490:	f04f 0100 	mov.w	r1, #0
 8008494:	00d9      	lsls	r1, r3, #3
 8008496:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800849a:	00d0      	lsls	r0, r2, #3
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	eb12 0208 	adds.w	r2, r2, r8
 80084a4:	eb43 0309 	adc.w	r3, r3, r9
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	f04f 0100 	mov.w	r1, #0
 80084b0:	0299      	lsls	r1, r3, #10
 80084b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084b6:	0290      	lsls	r0, r2, #10
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4610      	mov	r0, r2
 80084be:	4619      	mov	r1, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	461a      	mov	r2, r3
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	f7f8 fbee 	bl	8000ca8 <__aeabi_uldivmod>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4613      	mov	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e04a      	b.n	800856c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084d6:	4b31      	ldr	r3, [pc, #196]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	099b      	lsrs	r3, r3, #6
 80084dc:	461a      	mov	r2, r3
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80084e6:	f04f 0100 	mov.w	r1, #0
 80084ea:	ea02 0400 	and.w	r4, r2, r0
 80084ee:	ea03 0501 	and.w	r5, r3, r1
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f04f 0200 	mov.w	r2, #0
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	014b      	lsls	r3, r1, #5
 8008500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008504:	0142      	lsls	r2, r0, #5
 8008506:	4610      	mov	r0, r2
 8008508:	4619      	mov	r1, r3
 800850a:	1b00      	subs	r0, r0, r4
 800850c:	eb61 0105 	sbc.w	r1, r1, r5
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	018b      	lsls	r3, r1, #6
 800851a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800851e:	0182      	lsls	r2, r0, #6
 8008520:	1a12      	subs	r2, r2, r0
 8008522:	eb63 0301 	sbc.w	r3, r3, r1
 8008526:	f04f 0000 	mov.w	r0, #0
 800852a:	f04f 0100 	mov.w	r1, #0
 800852e:	00d9      	lsls	r1, r3, #3
 8008530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008534:	00d0      	lsls	r0, r2, #3
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	1912      	adds	r2, r2, r4
 800853c:	eb45 0303 	adc.w	r3, r5, r3
 8008540:	f04f 0000 	mov.w	r0, #0
 8008544:	f04f 0100 	mov.w	r1, #0
 8008548:	0299      	lsls	r1, r3, #10
 800854a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800854e:	0290      	lsls	r0, r2, #10
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4610      	mov	r0, r2
 8008556:	4619      	mov	r1, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	461a      	mov	r2, r3
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	f7f8 fba2 	bl	8000ca8 <__aeabi_uldivmod>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4613      	mov	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	0c1b      	lsrs	r3, r3, #16
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	3301      	adds	r3, #1
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	fbb2 f3f3 	udiv	r3, r2, r3
 8008584:	60bb      	str	r3, [r7, #8]
      break;
 8008586:	e002      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800858a:	60bb      	str	r3, [r7, #8]
      break;
 800858c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800858e:	68bb      	ldr	r3, [r7, #8]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800859a:	bf00      	nop
 800859c:	40023800 	.word	0x40023800
 80085a0:	00f42400 	.word	0x00f42400

080085a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085a8:	4b03      	ldr	r3, [pc, #12]	; (80085b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80085aa:	681b      	ldr	r3, [r3, #0]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	200004a0 	.word	0x200004a0

080085bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085c0:	f7ff fff0 	bl	80085a4 <HAL_RCC_GetHCLKFreq>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	0a9b      	lsrs	r3, r3, #10
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	4903      	ldr	r1, [pc, #12]	; (80085e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085d2:	5ccb      	ldrb	r3, [r1, r3]
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d8:	4618      	mov	r0, r3
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40023800 	.word	0x40023800
 80085e0:	08017224 	.word	0x08017224

080085e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085e8:	f7ff ffdc 	bl	80085a4 <HAL_RCC_GetHCLKFreq>
 80085ec:	4602      	mov	r2, r0
 80085ee:	4b05      	ldr	r3, [pc, #20]	; (8008604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	0b5b      	lsrs	r3, r3, #13
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	4903      	ldr	r1, [pc, #12]	; (8008608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085fa:	5ccb      	ldrb	r3, [r1, r3]
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008600:	4618      	mov	r0, r3
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40023800 	.word	0x40023800
 8008608:	08017224 	.word	0x08017224

0800860c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	d105      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008630:	2b00      	cmp	r3, #0
 8008632:	d035      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008634:	4b62      	ldr	r3, [pc, #392]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800863a:	f7fd f9c9 	bl	80059d0 <HAL_GetTick>
 800863e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008640:	e008      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008642:	f7fd f9c5 	bl	80059d0 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d901      	bls.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e0b0      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008654:	4b5b      	ldr	r3, [pc, #364]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1f0      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	019a      	lsls	r2, r3, #6
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	071b      	lsls	r3, r3, #28
 800866c:	4955      	ldr	r1, [pc, #340]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008674:	4b52      	ldr	r3, [pc, #328]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800867a:	f7fd f9a9 	bl	80059d0 <HAL_GetTick>
 800867e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008680:	e008      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008682:	f7fd f9a5 	bl	80059d0 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e090      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008694:	4b4b      	ldr	r3, [pc, #300]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0f0      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8083 	beq.w	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	4b44      	ldr	r3, [pc, #272]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	4a43      	ldr	r2, [pc, #268]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086bc:	6413      	str	r3, [r2, #64]	; 0x40
 80086be:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086ca:	4b3f      	ldr	r3, [pc, #252]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a3e      	ldr	r2, [pc, #248]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086d6:	f7fd f97b 	bl	80059d0 <HAL_GetTick>
 80086da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086dc:	e008      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80086de:	f7fd f977 	bl	80059d0 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e062      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086f0:	4b35      	ldr	r3, [pc, #212]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f0      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086fc:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008704:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d02f      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	429a      	cmp	r2, r3
 8008718:	d028      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800871a:	4b2a      	ldr	r3, [pc, #168]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008722:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008724:	4b29      	ldr	r3, [pc, #164]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008726:	2201      	movs	r2, #1
 8008728:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800872a:	4b28      	ldr	r3, [pc, #160]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008730:	4a24      	ldr	r2, [pc, #144]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008736:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b01      	cmp	r3, #1
 8008740:	d114      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008742:	f7fd f945 	bl	80059d0 <HAL_GetTick>
 8008746:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008748:	e00a      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800874a:	f7fd f941 	bl	80059d0 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	f241 3288 	movw	r2, #5000	; 0x1388
 8008758:	4293      	cmp	r3, r2
 800875a:	d901      	bls.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e02a      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008760:	4b18      	ldr	r3, [pc, #96]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0ee      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008778:	d10d      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800877a:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800878a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878e:	490d      	ldr	r1, [pc, #52]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008790:	4313      	orrs	r3, r2
 8008792:	608b      	str	r3, [r1, #8]
 8008794:	e005      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008796:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800879c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087a0:	6093      	str	r3, [r2, #8]
 80087a2:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ae:	4905      	ldr	r1, [pc, #20]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	42470068 	.word	0x42470068
 80087c4:	40023800 	.word	0x40023800
 80087c8:	40007000 	.word	0x40007000
 80087cc:	42470e40 	.word	0x42470e40

080087d0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2203      	movs	r2, #3
 80087dc:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80087de:	4b11      	ldr	r3, [pc, #68]	; (8008824 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80087e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e4:	099b      	lsrs	r3, r3, #6
 80087e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087ee:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80087f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f4:	0f1b      	lsrs	r3, r3, #28
 80087f6:	f003 0207 	and.w	r2, r3, #7
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80087fe:	4b09      	ldr	r3, [pc, #36]	; (8008824 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008806:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008808:	4b06      	ldr	r3, [pc, #24]	; (8008824 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800880a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8008818:	bf00      	nop
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	40023800 	.word	0x40023800

08008828 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800883c:	2300      	movs	r3, #0
 800883e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d13e      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008846:	4b23      	ldr	r3, [pc, #140]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d12f      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800885c:	4b1e      	ldr	r3, [pc, #120]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800885e:	617b      	str	r3, [r7, #20]
          break;
 8008860:	e02f      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008862:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800886a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800886e:	d108      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008870:	4b18      	ldr	r3, [pc, #96]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008878:	4a18      	ldr	r2, [pc, #96]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800887a:	fbb2 f3f3 	udiv	r3, r2, r3
 800887e:	613b      	str	r3, [r7, #16]
 8008880:	e007      	b.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008882:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800888a:	4a14      	ldr	r2, [pc, #80]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800888c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008890:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008892:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008898:	099b      	lsrs	r3, r3, #6
 800889a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	fb02 f303 	mul.w	r3, r2, r3
 80088a4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80088a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ac:	0f1b      	lsrs	r3, r3, #28
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b8:	617b      	str	r3, [r7, #20]
          break;
 80088ba:	e002      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	617b      	str	r3, [r7, #20]
          break;
 80088c0:	bf00      	nop
        }
      }
      break;
 80088c2:	bf00      	nop
    }
  }
  return frequency;
 80088c4:	697b      	ldr	r3, [r7, #20]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	40023800 	.word	0x40023800
 80088d8:	00bb8000 	.word	0x00bb8000
 80088dc:	00f42400 	.word	0x00f42400

080088e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e07b      	b.n	80089ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d108      	bne.n	800890c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008902:	d009      	beq.n	8008918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	61da      	str	r2, [r3, #28]
 800890a:	e005      	b.n	8008918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7f9 fd36 	bl	80023a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800894e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008960:	431a      	orrs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	431a      	orrs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899c:	ea42 0103 	orr.w	r1, r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	0c1b      	lsrs	r3, r3, #16
 80089b6:	f003 0104 	and.w	r1, r3, #4
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	f003 0210 	and.w	r2, r3, #16
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	69da      	ldr	r2, [r3, #28]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e03f      	b.n	8008a84 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7f9 fd0b 	bl	8002434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2224      	movs	r2, #36	; 0x24
 8008a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68da      	ldr	r2, [r3, #12]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f958 	bl	8008cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	695a      	ldr	r2, [r3, #20]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e021      	b.n	8008ae2 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2224      	movs	r2, #36	; 0x24
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ab4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7f9 fd04 	bl	80024c4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b08a      	sub	sp, #40	; 0x28
 8008aee:	af02      	add	r7, sp, #8
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d17c      	bne.n	8008c04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <HAL_UART_Transmit+0x2c>
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e075      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d101      	bne.n	8008b28 <HAL_UART_Transmit+0x3e>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e06e      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2221      	movs	r2, #33	; 0x21
 8008b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b3e:	f7fc ff47 	bl	80059d0 <HAL_GetTick>
 8008b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	88fa      	ldrh	r2, [r7, #6]
 8008b48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	88fa      	ldrh	r2, [r7, #6]
 8008b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b58:	d108      	bne.n	8008b6c <HAL_UART_Transmit+0x82>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d104      	bne.n	8008b6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	61bb      	str	r3, [r7, #24]
 8008b6a:	e003      	b.n	8008b74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008b7c:	e02a      	b.n	8008bd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	2180      	movs	r1, #128	; 0x80
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f840 	bl	8008c0e <UART_WaitOnFlagUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e036      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10b      	bne.n	8008bb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	3302      	adds	r3, #2
 8008bb2:	61bb      	str	r3, [r7, #24]
 8008bb4:	e007      	b.n	8008bc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1cf      	bne.n	8008b7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2200      	movs	r2, #0
 8008be6:	2140      	movs	r1, #64	; 0x40
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f810 	bl	8008c0e <UART_WaitOnFlagUntilTimeout>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e006      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	e000      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c04:	2302      	movs	r3, #2
  }
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3720      	adds	r7, #32
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b090      	sub	sp, #64	; 0x40
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	603b      	str	r3, [r7, #0]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1e:	e050      	b.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c26:	d04c      	beq.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8008c2e:	f7fc fecf 	bl	80059d0 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d241      	bcs.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	330c      	adds	r3, #12
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	330c      	adds	r3, #12
 8008c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c5e:	637a      	str	r2, [r7, #52]	; 0x34
 8008c60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e5      	bne.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3314      	adds	r3, #20
 8008c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	613b      	str	r3, [r7, #16]
   return(result);
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f023 0301 	bic.w	r3, r3, #1
 8008c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3314      	adds	r3, #20
 8008c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c92:	623a      	str	r2, [r7, #32]
 8008c94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	69f9      	ldr	r1, [r7, #28]
 8008c98:	6a3a      	ldr	r2, [r7, #32]
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e5      	bne.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e00f      	b.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d09f      	beq.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3740      	adds	r7, #64	; 0x40
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	b09f      	sub	sp, #124	; 0x7c
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d02:	68d9      	ldr	r1, [r3, #12]
 8008d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	ea40 0301 	orr.w	r3, r0, r1
 8008d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	431a      	orrs	r2, r3
 8008d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d30:	f021 010c 	bic.w	r1, r1, #12
 8008d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4a:	6999      	ldr	r1, [r3, #24]
 8008d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	ea40 0301 	orr.w	r3, r0, r1
 8008d54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4bc5      	ldr	r3, [pc, #788]	; (8009070 <UART_SetConfig+0x384>)
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d004      	beq.n	8008d6a <UART_SetConfig+0x7e>
 8008d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	4bc3      	ldr	r3, [pc, #780]	; (8009074 <UART_SetConfig+0x388>)
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d103      	bne.n	8008d72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d6a:	f7ff fc3b 	bl	80085e4 <HAL_RCC_GetPCLK2Freq>
 8008d6e:	6778      	str	r0, [r7, #116]	; 0x74
 8008d70:	e002      	b.n	8008d78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d72:	f7ff fc23 	bl	80085bc <HAL_RCC_GetPCLK1Freq>
 8008d76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d80:	f040 80b6 	bne.w	8008ef0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d86:	461c      	mov	r4, r3
 8008d88:	f04f 0500 	mov.w	r5, #0
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	462b      	mov	r3, r5
 8008d90:	1891      	adds	r1, r2, r2
 8008d92:	6439      	str	r1, [r7, #64]	; 0x40
 8008d94:	415b      	adcs	r3, r3
 8008d96:	647b      	str	r3, [r7, #68]	; 0x44
 8008d98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d9c:	1912      	adds	r2, r2, r4
 8008d9e:	eb45 0303 	adc.w	r3, r5, r3
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f04f 0100 	mov.w	r1, #0
 8008daa:	00d9      	lsls	r1, r3, #3
 8008dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008db0:	00d0      	lsls	r0, r2, #3
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	1911      	adds	r1, r2, r4
 8008db8:	6639      	str	r1, [r7, #96]	; 0x60
 8008dba:	416b      	adcs	r3, r5
 8008dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	1891      	adds	r1, r2, r2
 8008dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dcc:	415b      	adcs	r3, r3
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008dd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008dd8:	f7f7 ff66 	bl	8000ca8 <__aeabi_uldivmod>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4ba5      	ldr	r3, [pc, #660]	; (8009078 <UART_SetConfig+0x38c>)
 8008de2:	fba3 2302 	umull	r2, r3, r3, r2
 8008de6:	095b      	lsrs	r3, r3, #5
 8008de8:	011e      	lsls	r6, r3, #4
 8008dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dec:	461c      	mov	r4, r3
 8008dee:	f04f 0500 	mov.w	r5, #0
 8008df2:	4622      	mov	r2, r4
 8008df4:	462b      	mov	r3, r5
 8008df6:	1891      	adds	r1, r2, r2
 8008df8:	6339      	str	r1, [r7, #48]	; 0x30
 8008dfa:	415b      	adcs	r3, r3
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8008dfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008e02:	1912      	adds	r2, r2, r4
 8008e04:	eb45 0303 	adc.w	r3, r5, r3
 8008e08:	f04f 0000 	mov.w	r0, #0
 8008e0c:	f04f 0100 	mov.w	r1, #0
 8008e10:	00d9      	lsls	r1, r3, #3
 8008e12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e16:	00d0      	lsls	r0, r2, #3
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	1911      	adds	r1, r2, r4
 8008e1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e20:	416b      	adcs	r3, r5
 8008e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	f04f 0300 	mov.w	r3, #0
 8008e2e:	1891      	adds	r1, r2, r2
 8008e30:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e32:	415b      	adcs	r3, r3
 8008e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e3e:	f7f7 ff33 	bl	8000ca8 <__aeabi_uldivmod>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4b8c      	ldr	r3, [pc, #560]	; (8009078 <UART_SetConfig+0x38c>)
 8008e48:	fba3 1302 	umull	r1, r3, r3, r2
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	2164      	movs	r1, #100	; 0x64
 8008e50:	fb01 f303 	mul.w	r3, r1, r3
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	3332      	adds	r3, #50	; 0x32
 8008e5a:	4a87      	ldr	r2, [pc, #540]	; (8009078 <UART_SetConfig+0x38c>)
 8008e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e60:	095b      	lsrs	r3, r3, #5
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e68:	441e      	add	r6, r3
 8008e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f04f 0100 	mov.w	r1, #0
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	1894      	adds	r4, r2, r2
 8008e78:	623c      	str	r4, [r7, #32]
 8008e7a:	415b      	adcs	r3, r3
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e82:	1812      	adds	r2, r2, r0
 8008e84:	eb41 0303 	adc.w	r3, r1, r3
 8008e88:	f04f 0400 	mov.w	r4, #0
 8008e8c:	f04f 0500 	mov.w	r5, #0
 8008e90:	00dd      	lsls	r5, r3, #3
 8008e92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e96:	00d4      	lsls	r4, r2, #3
 8008e98:	4622      	mov	r2, r4
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	1814      	adds	r4, r2, r0
 8008e9e:	653c      	str	r4, [r7, #80]	; 0x50
 8008ea0:	414b      	adcs	r3, r1
 8008ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	1891      	adds	r1, r2, r2
 8008eb0:	61b9      	str	r1, [r7, #24]
 8008eb2:	415b      	adcs	r3, r3
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ebe:	f7f7 fef3 	bl	8000ca8 <__aeabi_uldivmod>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4b6c      	ldr	r3, [pc, #432]	; (8009078 <UART_SetConfig+0x38c>)
 8008ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	2164      	movs	r1, #100	; 0x64
 8008ed0:	fb01 f303 	mul.w	r3, r1, r3
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	3332      	adds	r3, #50	; 0x32
 8008eda:	4a67      	ldr	r2, [pc, #412]	; (8009078 <UART_SetConfig+0x38c>)
 8008edc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee0:	095b      	lsrs	r3, r3, #5
 8008ee2:	f003 0207 	and.w	r2, r3, #7
 8008ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4432      	add	r2, r6
 8008eec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008eee:	e0b9      	b.n	8009064 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef2:	461c      	mov	r4, r3
 8008ef4:	f04f 0500 	mov.w	r5, #0
 8008ef8:	4622      	mov	r2, r4
 8008efa:	462b      	mov	r3, r5
 8008efc:	1891      	adds	r1, r2, r2
 8008efe:	6139      	str	r1, [r7, #16]
 8008f00:	415b      	adcs	r3, r3
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f08:	1912      	adds	r2, r2, r4
 8008f0a:	eb45 0303 	adc.w	r3, r5, r3
 8008f0e:	f04f 0000 	mov.w	r0, #0
 8008f12:	f04f 0100 	mov.w	r1, #0
 8008f16:	00d9      	lsls	r1, r3, #3
 8008f18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f1c:	00d0      	lsls	r0, r2, #3
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	eb12 0804 	adds.w	r8, r2, r4
 8008f26:	eb43 0905 	adc.w	r9, r3, r5
 8008f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f04f 0100 	mov.w	r1, #0
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	008b      	lsls	r3, r1, #2
 8008f3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f42:	0082      	lsls	r2, r0, #2
 8008f44:	4640      	mov	r0, r8
 8008f46:	4649      	mov	r1, r9
 8008f48:	f7f7 feae 	bl	8000ca8 <__aeabi_uldivmod>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4b49      	ldr	r3, [pc, #292]	; (8009078 <UART_SetConfig+0x38c>)
 8008f52:	fba3 2302 	umull	r2, r3, r3, r2
 8008f56:	095b      	lsrs	r3, r3, #5
 8008f58:	011e      	lsls	r6, r3, #4
 8008f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f04f 0100 	mov.w	r1, #0
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	1894      	adds	r4, r2, r2
 8008f68:	60bc      	str	r4, [r7, #8]
 8008f6a:	415b      	adcs	r3, r3
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f72:	1812      	adds	r2, r2, r0
 8008f74:	eb41 0303 	adc.w	r3, r1, r3
 8008f78:	f04f 0400 	mov.w	r4, #0
 8008f7c:	f04f 0500 	mov.w	r5, #0
 8008f80:	00dd      	lsls	r5, r3, #3
 8008f82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f86:	00d4      	lsls	r4, r2, #3
 8008f88:	4622      	mov	r2, r4
 8008f8a:	462b      	mov	r3, r5
 8008f8c:	1814      	adds	r4, r2, r0
 8008f8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008f90:	414b      	adcs	r3, r1
 8008f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f04f 0100 	mov.w	r1, #0
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	008b      	lsls	r3, r1, #2
 8008fa8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fac:	0082      	lsls	r2, r0, #2
 8008fae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008fb2:	f7f7 fe79 	bl	8000ca8 <__aeabi_uldivmod>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4b2f      	ldr	r3, [pc, #188]	; (8009078 <UART_SetConfig+0x38c>)
 8008fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	2164      	movs	r1, #100	; 0x64
 8008fc4:	fb01 f303 	mul.w	r3, r1, r3
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	3332      	adds	r3, #50	; 0x32
 8008fce:	4a2a      	ldr	r2, [pc, #168]	; (8009078 <UART_SetConfig+0x38c>)
 8008fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fda:	441e      	add	r6, r3
 8008fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f04f 0100 	mov.w	r1, #0
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	1894      	adds	r4, r2, r2
 8008fea:	603c      	str	r4, [r7, #0]
 8008fec:	415b      	adcs	r3, r3
 8008fee:	607b      	str	r3, [r7, #4]
 8008ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff4:	1812      	adds	r2, r2, r0
 8008ff6:	eb41 0303 	adc.w	r3, r1, r3
 8008ffa:	f04f 0400 	mov.w	r4, #0
 8008ffe:	f04f 0500 	mov.w	r5, #0
 8009002:	00dd      	lsls	r5, r3, #3
 8009004:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009008:	00d4      	lsls	r4, r2, #3
 800900a:	4622      	mov	r2, r4
 800900c:	462b      	mov	r3, r5
 800900e:	eb12 0a00 	adds.w	sl, r2, r0
 8009012:	eb43 0b01 	adc.w	fp, r3, r1
 8009016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	4618      	mov	r0, r3
 800901c:	f04f 0100 	mov.w	r1, #0
 8009020:	f04f 0200 	mov.w	r2, #0
 8009024:	f04f 0300 	mov.w	r3, #0
 8009028:	008b      	lsls	r3, r1, #2
 800902a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800902e:	0082      	lsls	r2, r0, #2
 8009030:	4650      	mov	r0, sl
 8009032:	4659      	mov	r1, fp
 8009034:	f7f7 fe38 	bl	8000ca8 <__aeabi_uldivmod>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <UART_SetConfig+0x38c>)
 800903e:	fba3 1302 	umull	r1, r3, r3, r2
 8009042:	095b      	lsrs	r3, r3, #5
 8009044:	2164      	movs	r1, #100	; 0x64
 8009046:	fb01 f303 	mul.w	r3, r1, r3
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	3332      	adds	r3, #50	; 0x32
 8009050:	4a09      	ldr	r2, [pc, #36]	; (8009078 <UART_SetConfig+0x38c>)
 8009052:	fba2 2303 	umull	r2, r3, r2, r3
 8009056:	095b      	lsrs	r3, r3, #5
 8009058:	f003 020f 	and.w	r2, r3, #15
 800905c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4432      	add	r2, r6
 8009062:	609a      	str	r2, [r3, #8]
}
 8009064:	bf00      	nop
 8009066:	377c      	adds	r7, #124	; 0x7c
 8009068:	46bd      	mov	sp, r7
 800906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	bf00      	nop
 8009070:	40011000 	.word	0x40011000
 8009074:	40011400 	.word	0x40011400
 8009078:	51eb851f 	.word	0x51eb851f
 800907c:	00000000 	.word	0x00000000

08009080 <DCT_Init>:
 *
 * @param      *S    points to an instance of the floating-point DCT structure.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t DCT_Init(DCT_InstanceTypeDef *S)
{
 8009080:	b5b0      	push	{r4, r5, r7, lr}
 8009082:	b098      	sub	sp, #96	; 0x60
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  int32_t status;
  uint32_t n_filters = S->NumFilters;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t n_inputs = S->NumInputs;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	623b      	str	r3, [r7, #32]
  float32_t *M = S->pDCTCoefs;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	61fb      	str	r3, [r7, #28]
  float64_t normalizer;

  uint32_t shift;

  /* RemoveDCTZero only implemented for DCT Type-III non-normalized with COS tables */
  if (S->RemoveDCTZero != 0)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <DCT_Init+0x3a>
  {
    if (S->Type != DCT_TYPE_III)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	7a1b      	ldrb	r3, [r3, #8]
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d004      	beq.n	80090b4 <DCT_Init+0x34>
    {
      status = -1;
 80090aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090ae:	65fb      	str	r3, [r7, #92]	; 0x5c
      return status;
 80090b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090b2:	e2af      	b.n	8009614 <DCT_Init+0x594>
    }
    shift = 1;
 80090b4:	2301      	movs	r3, #1
 80090b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80090b8:	e001      	b.n	80090be <DCT_Init+0x3e>
  }
  else
  {
    shift = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	65bb      	str	r3, [r7, #88]	; 0x58
  }

  /* Compute DCT matrix coefficients */
  switch (S->Type)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	7a1b      	ldrb	r3, [r3, #8]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	f200 82a0 	bhi.w	800960a <DCT_Init+0x58a>
 80090ca:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <DCT_Init+0x50>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	080090e5 	.word	0x080090e5
 80090d4:	080091a7 	.word	0x080091a7
 80090d8:	080092ff 	.word	0x080092ff
 80090dc:	080093ef 	.word	0x080093ef
 80090e0:	080094cb 	.word	0x080094cb
  {
    case DCT_TYPE_II:
      for (uint32_t i = 0; i < n_filters; i++)
 80090e4:	2300      	movs	r3, #0
 80090e6:	657b      	str	r3, [r7, #84]	; 0x54
 80090e8:	e056      	b.n	8009198 <DCT_Init+0x118>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 80090ea:	2300      	movs	r3, #0
 80090ec:	653b      	str	r3, [r7, #80]	; 0x50
 80090ee:	e04c      	b.n	800918a <DCT_Init+0x10a>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 80090f0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80090f2:	f7f7 fa17 	bl	8000524 <__aeabi_ui2d>
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	4bc1      	ldr	r3, [pc, #772]	; (8009400 <DCT_Init+0x380>)
 80090fc:	f7f7 f8d6 	bl	80002ac <__adddf3>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4610      	mov	r0, r2
 8009106:	4619      	mov	r1, r3
 8009108:	a3bb      	add	r3, pc, #748	; (adr r3, 80093f8 <DCT_Init+0x378>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 fa83 	bl	8000618 <__aeabi_dmul>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4614      	mov	r4, r2
 8009118:	461d      	mov	r5, r3
 800911a:	6a38      	ldr	r0, [r7, #32]
 800911c:	f7f7 fa02 	bl	8000524 <__aeabi_ui2d>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4620      	mov	r0, r4
 8009126:	4629      	mov	r1, r5
 8009128:	f7f7 fba0 	bl	800086c <__aeabi_ddiv>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = 2.0 * cos(sample * i);
 8009134:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009136:	f7f7 f9f5 	bl	8000524 <__aeabi_ui2d>
 800913a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800913e:	f7f7 fa6b 	bl	8000618 <__aeabi_dmul>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	ec43 2b17 	vmov	d7, r2, r3
 800914a:	eeb0 0a47 	vmov.f32	s0, s14
 800914e:	eef0 0a67 	vmov.f32	s1, s15
 8009152:	f00b fdbd 	bl	8014cd0 <cos>
 8009156:	ec51 0b10 	vmov	r0, r1, d0
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	f7f7 f8a5 	bl	80002ac <__adddf3>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4610      	mov	r0, r2
 8009168:	4619      	mov	r1, r3
 800916a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800916c:	6a3a      	ldr	r2, [r7, #32]
 800916e:	fb02 f203 	mul.w	r2, r2, r3
 8009172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	18d4      	adds	r4, r2, r3
 800917c:	f7f7 fd44 	bl	8000c08 <__aeabi_d2f>
 8009180:	4603      	mov	r3, r0
 8009182:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 8009184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009186:	3301      	adds	r3, #1
 8009188:	653b      	str	r3, [r7, #80]	; 0x50
 800918a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	429a      	cmp	r2, r3
 8009190:	d3ae      	bcc.n	80090f0 <DCT_Init+0x70>
      for (uint32_t i = 0; i < n_filters; i++)
 8009192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009194:	3301      	adds	r3, #1
 8009196:	657b      	str	r3, [r7, #84]	; 0x54
 8009198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	429a      	cmp	r2, r3
 800919e:	d3a4      	bcc.n	80090ea <DCT_Init+0x6a>
        }
      }
      status = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 80091a4:	e235      	b.n	8009612 <DCT_Init+0x592>

    case DCT_TYPE_II_ORTHO:
      normalizer = 2.0 * sqrt(1.0 / (4 * n_inputs));
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7f7 f9ba 	bl	8000524 <__aeabi_ui2d>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	f04f 0000 	mov.w	r0, #0
 80091b8:	4992      	ldr	r1, [pc, #584]	; (8009404 <DCT_Init+0x384>)
 80091ba:	f7f7 fb57 	bl	800086c <__aeabi_ddiv>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	ec43 2b17 	vmov	d7, r2, r3
 80091c6:	eeb0 0a47 	vmov.f32	s0, s14
 80091ca:	eef0 0a67 	vmov.f32	s1, s15
 80091ce:	f00b fdfd 	bl	8014dcc <sqrt>
 80091d2:	ec51 0b10 	vmov	r0, r1, d0
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	f7f7 f867 	bl	80002ac <__adddf3>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_inputs; i++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ea:	e00c      	b.n	8009206 <DCT_Init+0x186>
      {
        M[i] = normalizer;
 80091ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	18d4      	adds	r4, r2, r3
 80091f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80091f8:	f7f7 fd06 	bl	8000c08 <__aeabi_d2f>
 80091fc:	4603      	mov	r3, r0
 80091fe:	6023      	str	r3, [r4, #0]
      for (uint32_t i = 0; i < n_inputs; i++)
 8009200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009202:	3301      	adds	r3, #1
 8009204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	429a      	cmp	r2, r3
 800920c:	d3ee      	bcc.n	80091ec <DCT_Init+0x16c>
      }
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	4618      	mov	r0, r3
 8009214:	f7f7 f986 	bl	8000524 <__aeabi_ui2d>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	ec43 2b10 	vmov	d0, r2, r3
 8009220:	f00b fdd4 	bl	8014dcc <sqrt>
 8009224:	ec53 2b10 	vmov	r2, r3, d0
 8009228:	f04f 0000 	mov.w	r0, #0
 800922c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009230:	f7f7 fb1c 	bl	800086c <__aeabi_ddiv>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 1; i < n_filters; i++)
 800923c:	2301      	movs	r3, #1
 800923e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009240:	e056      	b.n	80092f0 <DCT_Init+0x270>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 8009242:	2300      	movs	r3, #0
 8009244:	647b      	str	r3, [r7, #68]	; 0x44
 8009246:	e04c      	b.n	80092e2 <DCT_Init+0x262>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 8009248:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800924a:	f7f7 f96b 	bl	8000524 <__aeabi_ui2d>
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	4b6b      	ldr	r3, [pc, #428]	; (8009400 <DCT_Init+0x380>)
 8009254:	f7f7 f82a 	bl	80002ac <__adddf3>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4610      	mov	r0, r2
 800925e:	4619      	mov	r1, r3
 8009260:	a365      	add	r3, pc, #404	; (adr r3, 80093f8 <DCT_Init+0x378>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f7 f9d7 	bl	8000618 <__aeabi_dmul>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4614      	mov	r4, r2
 8009270:	461d      	mov	r5, r3
 8009272:	6a38      	ldr	r0, [r7, #32]
 8009274:	f7f7 f956 	bl	8000524 <__aeabi_ui2d>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4620      	mov	r0, r4
 800927e:	4629      	mov	r1, r5
 8009280:	f7f7 faf4 	bl	800086c <__aeabi_ddiv>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 800928c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800928e:	f7f7 f949 	bl	8000524 <__aeabi_ui2d>
 8009292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009296:	f7f7 f9bf 	bl	8000618 <__aeabi_dmul>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	ec43 2b17 	vmov	d7, r2, r3
 80092a2:	eeb0 0a47 	vmov.f32	s0, s14
 80092a6:	eef0 0a67 	vmov.f32	s1, s15
 80092aa:	f00b fd11 	bl	8014cd0 <cos>
 80092ae:	ec51 0b10 	vmov	r0, r1, d0
 80092b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092b6:	f7f7 f9af 	bl	8000618 <__aeabi_dmul>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4610      	mov	r0, r2
 80092c0:	4619      	mov	r1, r3
 80092c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c4:	6a3a      	ldr	r2, [r7, #32]
 80092c6:	fb02 f203 	mul.w	r2, r2, r3
 80092ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	69fa      	ldr	r2, [r7, #28]
 80092d2:	18d4      	adds	r4, r2, r3
 80092d4:	f7f7 fc98 	bl	8000c08 <__aeabi_d2f>
 80092d8:	4603      	mov	r3, r0
 80092da:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 80092dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092de:	3301      	adds	r3, #1
 80092e0:	647b      	str	r3, [r7, #68]	; 0x44
 80092e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d3ae      	bcc.n	8009248 <DCT_Init+0x1c8>
      for (uint32_t i = 1; i < n_filters; i++)
 80092ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ec:	3301      	adds	r3, #1
 80092ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d3a4      	bcc.n	8009242 <DCT_Init+0x1c2>
        }
      }
      status = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 80092fc:	e189      	b.n	8009612 <DCT_Init+0x592>

    case DCT_TYPE_II_SCALED:
      normalizer = 2.0 / sqrt(2 * n_inputs);
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	4618      	mov	r0, r3
 8009304:	f7f7 f90e 	bl	8000524 <__aeabi_ui2d>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	ec43 2b10 	vmov	d0, r2, r3
 8009310:	f00b fd5c 	bl	8014dcc <sqrt>
 8009314:	ec53 2b10 	vmov	r2, r3, d0
 8009318:	f04f 0000 	mov.w	r0, #0
 800931c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009320:	f7f7 faa4 	bl	800086c <__aeabi_ddiv>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_filters; i++)
 800932c:	2300      	movs	r3, #0
 800932e:	643b      	str	r3, [r7, #64]	; 0x40
 8009330:	e056      	b.n	80093e0 <DCT_Init+0x360>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009336:	e04c      	b.n	80093d2 <DCT_Init+0x352>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 8009338:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800933a:	f7f7 f8f3 	bl	8000524 <__aeabi_ui2d>
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	4b2f      	ldr	r3, [pc, #188]	; (8009400 <DCT_Init+0x380>)
 8009344:	f7f6 ffb2 	bl	80002ac <__adddf3>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	4610      	mov	r0, r2
 800934e:	4619      	mov	r1, r3
 8009350:	a329      	add	r3, pc, #164	; (adr r3, 80093f8 <DCT_Init+0x378>)
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	f7f7 f95f 	bl	8000618 <__aeabi_dmul>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4614      	mov	r4, r2
 8009360:	461d      	mov	r5, r3
 8009362:	6a38      	ldr	r0, [r7, #32]
 8009364:	f7f7 f8de 	bl	8000524 <__aeabi_ui2d>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7f7 fa7c 	bl	800086c <__aeabi_ddiv>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 800937c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800937e:	f7f7 f8d1 	bl	8000524 <__aeabi_ui2d>
 8009382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009386:	f7f7 f947 	bl	8000618 <__aeabi_dmul>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	ec43 2b17 	vmov	d7, r2, r3
 8009392:	eeb0 0a47 	vmov.f32	s0, s14
 8009396:	eef0 0a67 	vmov.f32	s1, s15
 800939a:	f00b fc99 	bl	8014cd0 <cos>
 800939e:	ec51 0b10 	vmov	r0, r1, d0
 80093a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093a6:	f7f7 f937 	bl	8000618 <__aeabi_dmul>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4610      	mov	r0, r2
 80093b0:	4619      	mov	r1, r3
 80093b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b4:	6a3a      	ldr	r2, [r7, #32]
 80093b6:	fb02 f203 	mul.w	r2, r2, r3
 80093ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	18d4      	adds	r4, r2, r3
 80093c4:	f7f7 fc20 	bl	8000c08 <__aeabi_d2f>
 80093c8:	4603      	mov	r3, r0
 80093ca:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 80093cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ce:	3301      	adds	r3, #1
 80093d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d3ae      	bcc.n	8009338 <DCT_Init+0x2b8>
      for (uint32_t i = 0; i < n_filters; i++)
 80093da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093dc:	3301      	adds	r3, #1
 80093de:	643b      	str	r3, [r7, #64]	; 0x40
 80093e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d3a4      	bcc.n	8009332 <DCT_Init+0x2b2>
        }
      }
      status = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 80093ec:	e111      	b.n	8009612 <DCT_Init+0x592>

    case DCT_TYPE_III:
      for (uint32_t i = 0; i < n_filters; i++)
 80093ee:	2300      	movs	r3, #0
 80093f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80093f2:	e063      	b.n	80094bc <DCT_Init+0x43c>
 80093f4:	f3af 8000 	nop.w
 80093f8:	54442d18 	.word	0x54442d18
 80093fc:	400921fb 	.word	0x400921fb
 8009400:	3fe00000 	.word	0x3fe00000
 8009404:	3ff00000 	.word	0x3ff00000
      {
        sample = M_PI * (i + shift + 0.5) / n_inputs;
 8009408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800940a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800940c:	4413      	add	r3, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7f7 f888 	bl	8000524 <__aeabi_ui2d>
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	4b83      	ldr	r3, [pc, #524]	; (8009628 <DCT_Init+0x5a8>)
 800941a:	f7f6 ff47 	bl	80002ac <__adddf3>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4610      	mov	r0, r2
 8009424:	4619      	mov	r1, r3
 8009426:	a37e      	add	r3, pc, #504	; (adr r3, 8009620 <DCT_Init+0x5a0>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f7f7 f8f4 	bl	8000618 <__aeabi_dmul>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4614      	mov	r4, r2
 8009436:	461d      	mov	r5, r3
 8009438:	6a38      	ldr	r0, [r7, #32]
 800943a:	f7f7 f873 	bl	8000524 <__aeabi_ui2d>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4620      	mov	r0, r4
 8009444:	4629      	mov	r1, r5
 8009446:	f7f7 fa11 	bl	800086c <__aeabi_ddiv>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t j = 0; j < n_inputs; j++)
 8009452:	2300      	movs	r3, #0
 8009454:	637b      	str	r3, [r7, #52]	; 0x34
 8009456:	e02a      	b.n	80094ae <DCT_Init+0x42e>
        {
          M[i * n_inputs + j] = 2.0 * cos(sample * j);
 8009458:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800945a:	f7f7 f863 	bl	8000524 <__aeabi_ui2d>
 800945e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009462:	f7f7 f8d9 	bl	8000618 <__aeabi_dmul>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	ec43 2b17 	vmov	d7, r2, r3
 800946e:	eeb0 0a47 	vmov.f32	s0, s14
 8009472:	eef0 0a67 	vmov.f32	s1, s15
 8009476:	f00b fc2b 	bl	8014cd0 <cos>
 800947a:	ec51 0b10 	vmov	r0, r1, d0
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	f7f6 ff13 	bl	80002ac <__adddf3>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4610      	mov	r0, r2
 800948c:	4619      	mov	r1, r3
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	6a3a      	ldr	r2, [r7, #32]
 8009492:	fb02 f203 	mul.w	r2, r2, r3
 8009496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	18d4      	adds	r4, r2, r3
 80094a0:	f7f7 fbb2 	bl	8000c08 <__aeabi_d2f>
 80094a4:	4603      	mov	r3, r0
 80094a6:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 80094a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094aa:	3301      	adds	r3, #1
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
 80094ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d3d0      	bcc.n	8009458 <DCT_Init+0x3d8>
      for (uint32_t i = 0; i < n_filters; i++)
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	3301      	adds	r3, #1
 80094ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80094bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d3a1      	bcc.n	8009408 <DCT_Init+0x388>
        }
      }
      status = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 80094c8:	e0a3      	b.n	8009612 <DCT_Init+0x592>

    case DCT_TYPE_III_ORTHO:
      normalizer = 1.0 / sqrt(n_inputs);
 80094ca:	6a38      	ldr	r0, [r7, #32]
 80094cc:	f7f7 f82a 	bl	8000524 <__aeabi_ui2d>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	ec43 2b10 	vmov	d0, r2, r3
 80094d8:	f00b fc78 	bl	8014dcc <sqrt>
 80094dc:	ec53 2b10 	vmov	r2, r3, d0
 80094e0:	f04f 0000 	mov.w	r0, #0
 80094e4:	4951      	ldr	r1, [pc, #324]	; (800962c <DCT_Init+0x5ac>)
 80094e6:	f7f7 f9c1 	bl	800086c <__aeabi_ddiv>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_inputs; i++)
 80094f2:	2300      	movs	r3, #0
 80094f4:	633b      	str	r3, [r7, #48]	; 0x30
 80094f6:	e00c      	b.n	8009512 <DCT_Init+0x492>
      {
        M[i] = normalizer;
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	18d4      	adds	r4, r2, r3
 8009500:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009504:	f7f7 fb80 	bl	8000c08 <__aeabi_d2f>
 8009508:	4603      	mov	r3, r0
 800950a:	6023      	str	r3, [r4, #0]
      for (uint32_t i = 0; i < n_inputs; i++)
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	3301      	adds	r3, #1
 8009510:	633b      	str	r3, [r7, #48]	; 0x30
 8009512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	429a      	cmp	r2, r3
 8009518:	d3ee      	bcc.n	80094f8 <DCT_Init+0x478>
      }
      normalizer = sqrt(2.0 / n_inputs);
 800951a:	6a38      	ldr	r0, [r7, #32]
 800951c:	f7f7 f802 	bl	8000524 <__aeabi_ui2d>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	f04f 0000 	mov.w	r0, #0
 8009528:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800952c:	f7f7 f99e 	bl	800086c <__aeabi_ddiv>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	ec43 2b17 	vmov	d7, r2, r3
 8009538:	eeb0 0a47 	vmov.f32	s0, s14
 800953c:	eef0 0a67 	vmov.f32	s1, s15
 8009540:	f00b fc44 	bl	8014dcc <sqrt>
 8009544:	ed87 0b04 	vstr	d0, [r7, #16]
      for (uint32_t i = 0; i < n_filters; i++)
 8009548:	2300      	movs	r3, #0
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800954c:	e056      	b.n	80095fc <DCT_Init+0x57c>
      {
        for (uint32_t j = 1; j < n_inputs; j++)
 800954e:	2301      	movs	r3, #1
 8009550:	62bb      	str	r3, [r7, #40]	; 0x28
 8009552:	e04c      	b.n	80095ee <DCT_Init+0x56e>
        {
          sample = M_PI * (i + 0.5) / n_inputs;
 8009554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009556:	f7f6 ffe5 	bl	8000524 <__aeabi_ui2d>
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	4b32      	ldr	r3, [pc, #200]	; (8009628 <DCT_Init+0x5a8>)
 8009560:	f7f6 fea4 	bl	80002ac <__adddf3>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4610      	mov	r0, r2
 800956a:	4619      	mov	r1, r3
 800956c:	a32c      	add	r3, pc, #176	; (adr r3, 8009620 <DCT_Init+0x5a0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f7 f851 	bl	8000618 <__aeabi_dmul>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4614      	mov	r4, r2
 800957c:	461d      	mov	r5, r3
 800957e:	6a38      	ldr	r0, [r7, #32]
 8009580:	f7f6 ffd0 	bl	8000524 <__aeabi_ui2d>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4620      	mov	r0, r4
 800958a:	4629      	mov	r1, r5
 800958c:	f7f7 f96e 	bl	800086c <__aeabi_ddiv>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = cos(sample * j) * normalizer;
 8009598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800959a:	f7f6 ffc3 	bl	8000524 <__aeabi_ui2d>
 800959e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095a2:	f7f7 f839 	bl	8000618 <__aeabi_dmul>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	ec43 2b17 	vmov	d7, r2, r3
 80095ae:	eeb0 0a47 	vmov.f32	s0, s14
 80095b2:	eef0 0a67 	vmov.f32	s1, s15
 80095b6:	f00b fb8b 	bl	8014cd0 <cos>
 80095ba:	ec51 0b10 	vmov	r0, r1, d0
 80095be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095c2:	f7f7 f829 	bl	8000618 <__aeabi_dmul>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4610      	mov	r0, r2
 80095cc:	4619      	mov	r1, r3
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	6a3a      	ldr	r2, [r7, #32]
 80095d2:	fb02 f203 	mul.w	r2, r2, r3
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	18d4      	adds	r4, r2, r3
 80095e0:	f7f7 fb12 	bl	8000c08 <__aeabi_d2f>
 80095e4:	4603      	mov	r3, r0
 80095e6:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 1; j < n_inputs; j++)
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	3301      	adds	r3, #1
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d3ae      	bcc.n	8009554 <DCT_Init+0x4d4>
      for (uint32_t i = 0; i < n_filters; i++)
 80095f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f8:	3301      	adds	r3, #1
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	429a      	cmp	r2, r3
 8009602:	d3a4      	bcc.n	800954e <DCT_Init+0x4ce>
        }
      }
      status = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8009608:	e003      	b.n	8009612 <DCT_Init+0x592>

    default:
      /* Other DCT types not implemented or unsupported */
      status = -1;
 800960a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800960e:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8009610:	bf00      	nop
  }

  return status;
 8009612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8009614:	4618      	mov	r0, r3
 8009616:	3760      	adds	r7, #96	; 0x60
 8009618:	46bd      	mov	sp, r7
 800961a:	bdb0      	pop	{r4, r5, r7, pc}
 800961c:	f3af 8000 	nop.w
 8009620:	54442d18 	.word	0x54442d18
 8009624:	400921fb 	.word	0x400921fb
 8009628:	3fe00000 	.word	0x3fe00000
 800962c:	3ff00000 	.word	0x3ff00000

08009630 <DCT>:
 * @param      *pIn  points to state buffer.
 * @param      *pOut points to the output buffer.
 * @return none.
 */
void DCT(DCT_InstanceTypeDef *S, float32_t *pIn, float32_t *pOut)
{
 8009630:	b480      	push	{r7}
 8009632:	b095      	sub	sp, #84	; 0x54
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  float32_t sum;
  uint32_t n_inputs = S->NumInputs;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	61fb      	str	r3, [r7, #28]
  uint32_t n_filters = S->NumFilters;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	61bb      	str	r3, [r7, #24]

#ifndef USE_NAIVE_DCT
  float32_t *cosFact = S->pDCTCoefs;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	617b      	str	r3, [r7, #20]
#else
  float32_t normalizer;
#endif /* USE_NAIVE_DCT */

  /* Compute DCT matrix coefficients */
  switch (S->Type)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	7a1b      	ldrb	r3, [r3, #8]
 8009652:	3b01      	subs	r3, #1
 8009654:	2b04      	cmp	r3, #4
 8009656:	f200 8175 	bhi.w	8009944 <DCT+0x314>
 800965a:	a201      	add	r2, pc, #4	; (adr r2, 8009660 <DCT+0x30>)
 800965c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009660:	08009675 	.word	0x08009675
 8009664:	080096f3 	.word	0x080096f3
 8009668:	080097b7 	.word	0x080097b7
 800966c:	08009835 	.word	0x08009835
 8009670:	080098b5 	.word	0x080098b5
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = 2.0f * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 8009674:	2300      	movs	r3, #0
 8009676:	64bb      	str	r3, [r7, #72]	; 0x48
 8009678:	e036      	b.n	80096e8 <DCT+0xb8>
      {
        pOut[k] = 0.0f;
 800967a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	4413      	add	r3, r2
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 8009688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	fb02 f303 	mul.w	r3, r2, r3
 8009690:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 8009692:	2300      	movs	r3, #0
 8009694:	647b      	str	r3, [r7, #68]	; 0x44
 8009696:	e020      	b.n	80096da <DCT+0xaa>
        {
          // pOut[k] += pIn[n] * 2.0f * cos(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 8009698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	4413      	add	r3, r2
 80096a0:	ed93 7a00 	vldr	s14, [r3]
 80096a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	4413      	add	r3, r2
 80096ac:	edd3 6a00 	vldr	s13, [r3]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	4413      	add	r3, r2
 80096bc:	edd3 7a00 	vldr	s15, [r3]
 80096c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	4413      	add	r3, r2
 80096cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096d0:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 80096d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d6:	3301      	adds	r3, #1
 80096d8:	647b      	str	r3, [r7, #68]	; 0x44
 80096da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d3da      	bcc.n	8009698 <DCT+0x68>
      for (uint32_t k = 0; k < n_filters; k++)
 80096e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e4:	3301      	adds	r3, #1
 80096e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80096e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d3c4      	bcc.n	800967a <DCT+0x4a>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 80096f0:	e129      	b.n	8009946 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = normalizer * 2.0f * sum;
      }
    #else
      sum = 0.0f;
 80096f2:	f04f 0300 	mov.w	r3, #0
 80096f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      for (uint32_t n = 0; n < n_inputs; n++)
 80096f8:	2300      	movs	r3, #0
 80096fa:	643b      	str	r3, [r7, #64]	; 0x40
 80096fc:	e00e      	b.n	800971c <DCT+0xec>
      {
        sum += pIn[n];
 80096fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	4413      	add	r3, r2
 8009706:	edd3 7a00 	vldr	s15, [r3]
 800970a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800970e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009712:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      for (uint32_t n = 0; n < n_inputs; n++)
 8009716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009718:	3301      	adds	r3, #1
 800971a:	643b      	str	r3, [r7, #64]	; 0x40
 800971c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	429a      	cmp	r2, r3
 8009722:	d3ec      	bcc.n	80096fe <DCT+0xce>
      }
      pOut[0] = cosFact[0] * sum;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	ed93 7a00 	vldr	s14, [r3]
 800972a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800972e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t k = 1; k < n_filters; k++)
 8009738:	2301      	movs	r3, #1
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800973c:	e036      	b.n	80097ac <DCT+0x17c>
      {
        pOut[k] = 0.0f;
 800973e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	4413      	add	r3, r2
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 800974c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974e:	69fa      	ldr	r2, [r7, #28]
 8009750:	fb02 f303 	mul.w	r3, r2, r3
 8009754:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 8009756:	2300      	movs	r3, #0
 8009758:	63bb      	str	r3, [r7, #56]	; 0x38
 800975a:	e020      	b.n	800979e <DCT+0x16e>
        {
          // pOut[k] += 2.0f / sqrtf(2 * n_inputs) * pIn[n] * cosf(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 800975c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	4413      	add	r3, r2
 8009764:	ed93 7a00 	vldr	s14, [r3]
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	4413      	add	r3, r2
 8009770:	edd3 6a00 	vldr	s13, [r3]
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	4413      	add	r3, r2
 8009780:	edd3 7a00 	vldr	s15, [r3]
 8009784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	4413      	add	r3, r2
 8009790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009794:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	3301      	adds	r3, #1
 800979c:	63bb      	str	r3, [r7, #56]	; 0x38
 800979e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d3da      	bcc.n	800975c <DCT+0x12c>
      for (uint32_t k = 1; k < n_filters; k++)
 80097a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a8:	3301      	adds	r3, #1
 80097aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d3c4      	bcc.n	800973e <DCT+0x10e>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 80097b4:	e0c7      	b.n	8009946 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = normalizer * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 80097b6:	2300      	movs	r3, #0
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ba:	e036      	b.n	800982a <DCT+0x1fa>
      {
        pOut[k] = 0.0f;
 80097bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	4413      	add	r3, r2
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 80097ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 80097d4:	2300      	movs	r3, #0
 80097d6:	633b      	str	r3, [r7, #48]	; 0x30
 80097d8:	e020      	b.n	800981c <DCT+0x1ec>
        {
          // pOut[k] += pIn[n] * 2.0f * cos(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	4413      	add	r3, r2
 80097e2:	ed93 7a00 	vldr	s14, [r3]
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	edd3 6a00 	vldr	s13, [r3]
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	4413      	add	r3, r2
 80097fe:	edd3 7a00 	vldr	s15, [r3]
 8009802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	4413      	add	r3, r2
 800980e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009812:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	3301      	adds	r3, #1
 800981a:	633b      	str	r3, [r7, #48]	; 0x30
 800981c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	429a      	cmp	r2, r3
 8009822:	d3da      	bcc.n	80097da <DCT+0x1aa>
      for (uint32_t k = 0; k < n_filters; k++)
 8009824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009826:	3301      	adds	r3, #1
 8009828:	637b      	str	r3, [r7, #52]	; 0x34
 800982a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	429a      	cmp	r2, r3
 8009830:	d3c4      	bcc.n	80097bc <DCT+0x18c>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 8009832:	e088      	b.n	8009946 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
        }
        pOut[k] = pIn[0] + 2.0f * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 8009834:	2300      	movs	r3, #0
 8009836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009838:	e037      	b.n	80098aa <DCT+0x27a>
      {
        sum = 0.0f;
 800983a:	f04f 0300 	mov.w	r3, #0
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
        row = k * n_inputs;
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	fb02 f303 	mul.w	r3, r2, r3
 8009848:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 1; n < n_inputs; n++)
 800984a:	2301      	movs	r3, #1
 800984c:	62bb      	str	r3, [r7, #40]	; 0x28
 800984e:	e018      	b.n	8009882 <DCT+0x252>
        {
          // sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
          sum += pIn[n] * cosFact[row + n];
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	4413      	add	r3, r2
 8009858:	ed93 7a00 	vldr	s14, [r3]
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	4413      	add	r3, r2
 8009868:	edd3 7a00 	vldr	s15, [r3]
 800986c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009870:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009878:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        for (uint32_t n = 1; n < n_inputs; n++)
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	3301      	adds	r3, #1
 8009880:	62bb      	str	r3, [r7, #40]	; 0x28
 8009882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	429a      	cmp	r2, r3
 8009888:	d3e2      	bcc.n	8009850 <DCT+0x220>
        }
        pOut[k] = pIn[0] + sum;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	ed93 7a00 	vldr	s14, [r3]
 8009890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	4413      	add	r3, r2
 8009898:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800989c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098a0:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t k = 0; k < n_filters; k++)
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	3301      	adds	r3, #1
 80098a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d3c3      	bcc.n	800983a <DCT+0x20a>
      }
    #endif /* USE_NAIVE_DCT */
      break;
 80098b2:	e048      	b.n	8009946 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
        }
        pOut[k] = pIn[0] / sqrtf(n_inputs) + sqrtf(2.0 / n_inputs) * sum;
      }
    #else
      sum = pIn[0] * cosFact[0];
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	ed93 7a00 	vldr	s14, [r3]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	edd3 7a00 	vldr	s15, [r3]
 80098c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      for (uint32_t k = 0; k < n_filters; k++)
 80098c8:	2300      	movs	r3, #0
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24
 80098cc:	e035      	b.n	800993a <DCT+0x30a>
      {
        pOut[k] = sum;
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	4413      	add	r3, r2
 80098d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098d8:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	69fa      	ldr	r2, [r7, #28]
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 1; n < n_inputs; n++)
 80098e4:	2301      	movs	r3, #1
 80098e6:	623b      	str	r3, [r7, #32]
 80098e8:	e020      	b.n	800992c <DCT+0x2fc>
        {
          // pOut[k] += pIn[n] * sqrtf(2.0 / n_inputs) * cos(M_PI * (k + 0.5) * n / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	4413      	add	r3, r2
 80098f2:	ed93 7a00 	vldr	s14, [r3]
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	4413      	add	r3, r2
 80098fe:	edd3 6a00 	vldr	s13, [r3]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4413      	add	r3, r2
 800990e:	edd3 7a00 	vldr	s15, [r3]
 8009912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	4413      	add	r3, r2
 800991e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009922:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 1; n < n_inputs; n++)
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	3301      	adds	r3, #1
 800992a:	623b      	str	r3, [r7, #32]
 800992c:	6a3a      	ldr	r2, [r7, #32]
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	429a      	cmp	r2, r3
 8009932:	d3da      	bcc.n	80098ea <DCT+0x2ba>
      for (uint32_t k = 0; k < n_filters; k++)
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	3301      	adds	r3, #1
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
 800993a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	429a      	cmp	r2, r3
 8009940:	d3c5      	bcc.n	80098ce <DCT+0x29e>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 8009942:	e000      	b.n	8009946 <DCT+0x316>

    default:
      break;
 8009944:	bf00      	nop
  }
}
 8009946:	bf00      	nop
 8009948:	3754      	adds	r7, #84	; 0x54
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop

08009954 <buf_to_float_normed>:
 * @param      *pInSignal   points to input signal buffer
 * @param      *pOutSignal  points to output signal buffer
 * @param      len          signal length
 */
void buf_to_float_normed(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8009960:	2300      	movs	r3, #0
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	e016      	b.n	8009994 <buf_to_float_normed+0x40>
  {
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	4413      	add	r3, r2
 8009982:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80099ac <buf_to_float_normed+0x58>
 8009986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800998a:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	3301      	adds	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	429a      	cmp	r2, r3
 800999a:	d3e4      	bcc.n	8009966 <buf_to_float_normed+0x12>
  }
}
 800999c:	bf00      	nop
 800999e:	bf00      	nop
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	47000000 	.word	0x47000000

080099b0 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08c      	sub	sp, #48	; 0x30
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6899      	ldr	r1, [r3, #8]
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	68b8      	ldr	r0, [r7, #8]
 80099d8:	f7f9 f9ba 	bl	8002d50 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	18d0      	adds	r0, r2, r3
 80099e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	461a      	mov	r2, r3
 80099ec:	2100      	movs	r1, #0
 80099ee:	f006 fd89 	bl	8010504 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	2300      	movs	r3, #0
 80099f8:	6a3a      	ldr	r2, [r7, #32]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	f7fb fdb8 	bl	8005570 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	ed93 7a00 	vldr	s14, [r3]
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	edd3 7a00 	vldr	s15, [r3]
 8009a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a10:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	3304      	adds	r3, #4
 8009a18:	ed93 7a00 	vldr	s14, [r3]
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	edd3 7a00 	vldr	s15, [r3]
 8009a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a28:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f103 0008 	add.w	r0, r3, #8
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	1d19      	adds	r1, r3, #4
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	085b      	lsrs	r3, r3, #1
 8009a40:	3b01      	subs	r3, #1
 8009a42:	461a      	mov	r2, r3
 8009a44:	f7f9 f9ac 	bl	8002da0 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	085b      	lsrs	r3, r3, #1
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	69ba      	ldr	r2, [r7, #24]
 8009a54:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	791b      	ldrb	r3, [r3, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d12c      	bne.n	8009ab8 <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8009a5e:	2300      	movs	r3, #0
 8009a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a62:	e023      	b.n	8009aac <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	440b      	add	r3, r1
 8009a76:	617a      	str	r2, [r7, #20]
 8009a78:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8009a7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a86:	db09      	blt.n	8009a9c <SpectrogramColumn+0xec>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8009a88:	ed97 0a05 	vldr	s0, [r7, #20]
 8009a8c:	f00b fb14 	bl	80150b8 <sqrtf>
 8009a90:	eef0 7a40 	vmov.f32	s15, s0
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8009a9a:	e004      	b.n	8009aa6 <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f04f 0200 	mov.w	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8009aa4:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	085b      	lsrs	r3, r3, #1
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d3d5      	bcc.n	8009a64 <SpectrogramColumn+0xb4>
    }
  }
}
 8009ab8:	bf00      	nop
 8009aba:	3730      	adds	r7, #48	; 0x30
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8009ac0:	b590      	push	{r4, r7, lr}
 8009ac2:	b08f      	sub	sp, #60	; 0x3c
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff ff5a 	bl	80099b0 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6979      	ldr	r1, [r7, #20]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 fa64 	bl	8009fd4 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b10:	e012      	b.n	8009b38 <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 8009b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	4413      	add	r3, r2
 8009b1a:	edd3 6a00 	vldr	s13, [r3]
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	ed97 7a06 	vldr	s14, [r7, #24]
 8009b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b2e:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 8009b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b34:	3301      	adds	r3, #1
 8009b36:	637b      	str	r3, [r7, #52]	; 0x34
 8009b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d3e8      	bcc.n	8009b12 <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 8009b40:	2300      	movs	r3, #0
 8009b42:	633b      	str	r3, [r7, #48]	; 0x30
 8009b44:	e014      	b.n	8009b70 <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	edd3 7a00 	vldr	s15, [r3]
 8009b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b5a:	d806      	bhi.n	8009b6a <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	4413      	add	r3, r2
 8009b64:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009b68:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8009b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d3e6      	bcc.n	8009b46 <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	791b      	ldrb	r3, [r3, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d14a      	bne.n	8009c16 <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 8009b80:	2300      	movs	r3, #0
 8009b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b84:	e018      	b.n	8009bb8 <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	edd3 7a00 	vldr	s15, [r3]
 8009b92:	eeb0 0a67 	vmov.f32	s0, s15
 8009b96:	f00b f9c1 	bl	8014f1c <log10f>
 8009b9a:	eef0 7a40 	vmov.f32	s15, s0
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bae:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d3e2      	bcc.n	8009b86 <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bc4:	e022      	b.n	8009c0c <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8009bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	ed93 7a00 	vldr	s14, [r3]
 8009bd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8009bd6:	eef1 7a67 	vneg.f32	s15, s15
 8009bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be2:	d504      	bpl.n	8009bee <LogMelSpectrogramColumn+0x12e>
 8009be4:	edd7 7a07 	vldr	s15, [r7, #28]
 8009be8:	eef1 7a67 	vneg.f32	s15, s15
 8009bec:	e005      	b.n	8009bfa <LogMelSpectrogramColumn+0x13a>
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	edd3 7a00 	vldr	s15, [r3]
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	4413      	add	r3, r2
 8009c02:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	3301      	adds	r3, #1
 8009c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d3d8      	bcc.n	8009bc6 <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 8009c14:	e01b      	b.n	8009c4e <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 8009c16:	2300      	movs	r3, #0
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1a:	e014      	b.n	8009c46 <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	4413      	add	r3, r2
 8009c24:	edd3 7a00 	vldr	s15, [r3]
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	18d4      	adds	r4, r2, r3
 8009c30:	eeb0 0a67 	vmov.f32	s0, s15
 8009c34:	f00b f93c 	bl	8014eb0 <logf>
 8009c38:	eef0 7a40 	vmov.f32	s15, s0
 8009c3c:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	3301      	adds	r3, #1
 8009c44:	627b      	str	r3, [r7, #36]	; 0x24
 8009c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d3e6      	bcc.n	8009c1c <LogMelSpectrogramColumn+0x15c>
}
 8009c4e:	bf00      	nop
 8009c50:	373c      	adds	r7, #60	; 0x3c
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd90      	pop	{r4, r7, pc}

08009c56 <MfccColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output MFCC spectrogram column.
 * @return     None
 */
void MfccColumn(MfccTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	60b9      	str	r1, [r7, #8]
 8009c60:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->pScratch;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	617b      	str	r3, [r7, #20]

  LogMelSpectrogramColumn(S->LogMelConf, pInSignal, tmp_buffer);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff ff25 	bl	8009ac0 <LogMelSpectrogramColumn>

  /* DCT for computing MFCCs from spectrogram slice. */
  DCT(S->pDCT, tmp_buffer, pOutCol);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6979      	ldr	r1, [r7, #20]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fcd6 	bl	8009630 <DCT>
}
 8009c84:	bf00      	nop
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b0a4      	sub	sp, #144	; 0x90
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c98:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ca6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8009ce2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8009cec:	f000 f9c8 	bl	800a080 <MelScale>
 8009cf0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8009cf4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8009cfe:	f000 f9bf 	bl	800a080 <MelScale>
 8009d02:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8009d06:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009d0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009d0e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d14:	3301      	adds	r3, #1
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d22:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8009d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d3a:	085b      	lsrs	r3, r3, #1
 8009d3c:	ee07 3a90 	vmov	s15, r3
 8009d40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d48:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 8009d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8009d52:	2300      	movs	r3, #0
 8009d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d56:	e133      	b.n	8009fc0 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8009d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d044      	beq.n	8009de8 <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8009d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d60:	ee07 3a90 	vmov	s15, r3
 8009d64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d78:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d82:	f000 f9ed 	bl	800a160 <InverseMelScale>
 8009d86:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8009d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d96:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009da6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009daa:	4618      	mov	r0, r3
 8009dac:	eeb0 0a67 	vmov.f32	s0, s15
 8009db0:	f000 f9d6 	bl	800a160 <InverseMelScale>
 8009db4:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8009db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dba:	3302      	adds	r3, #2
 8009dbc:	ee07 3a90 	vmov	s15, r3
 8009dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009dc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009dd8:	4618      	mov	r0, r3
 8009dda:	eeb0 0a67 	vmov.f32	s0, s15
 8009dde:	f000 f9bf 	bl	800a160 <InverseMelScale>
 8009de2:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 8009de6:	e02e      	b.n	8009e46 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 8009de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009df2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e02:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 8009e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e08:	3301      	adds	r3, #1
 8009e0a:	ee07 3a90 	vmov	s15, r3
 8009e0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e1a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e22:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8009e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e28:	3302      	adds	r3, #2
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e42:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 8009e46:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8009e4a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 8009e56:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8009e5a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e62:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 8009e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 8009e76:	2300      	movs	r3, #0
 8009e78:	667b      	str	r3, [r7, #100]	; 0x64
 8009e7a:	e098      	b.n	8009fae <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 8009e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00b      	beq.n	8009e9a <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8009e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e84:	ee07 3a90 	vmov	s15, r3
 8009e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e94:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8009e98:	e011      	b.n	8009ebe <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8009e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e9c:	ee07 3a90 	vmov	s15, r3
 8009ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ea4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8009eb6:	f000 f8e3 	bl	800a080 <MelScale>
 8009eba:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 8009ebe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009ec2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eca:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 8009ece:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8009ed2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eda:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 8009ede:	edd7 7a07 	vldr	s15, [r7, #28]
 8009ee2:	eef1 6a67 	vneg.f32	s13, s15
 8009ee6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eee:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 8009ef2:	edd7 6a06 	vldr	s13, [r7, #24]
 8009ef6:	ed97 7a08 	vldr	s14, [r7, #32]
 8009efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009efe:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 8009f02:	ed97 7a05 	vldr	s14, [r7, #20]
 8009f06:	edd7 7a04 	vldr	s15, [r7, #16]
 8009f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f12:	d502      	bpl.n	8009f1a <MelFilterbank_Init+0x28e>
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	673b      	str	r3, [r7, #112]	; 0x70
 8009f18:	e001      	b.n	8009f1e <MelFilterbank_Init+0x292>
      else min = upper;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 8009f1e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009f22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2a:	dd2f      	ble.n	8009f8c <MelFilterbank_Init+0x300>
      {
        weight = min;
 8009f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 8009f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d013      	beq.n	8009f5e <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8009f36:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8009f3a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4a:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 8009f4e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8009f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 8009f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f62:	1d1a      	adds	r2, r3, #4
 8009f64:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009f68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f6a:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 8009f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f74:	d102      	bne.n	8009f7c <MelFilterbank_Init+0x2f0>
          start_index = j;
 8009f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 8009f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8009f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	1c5a      	adds	r2, r3, #1
 8009f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8a:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 8009f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f92:	4413      	add	r3, r2
 8009f94:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009f98:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 8009f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009fa6:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8009fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009faa:	3301      	adds	r3, #1
 8009fac:	667b      	str	r3, [r7, #100]	; 0x64
 8009fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb0:	085b      	lsrs	r3, r3, #1
 8009fb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	f4ff af61 	bcc.w	8009e7c <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 8009fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	f4ff aec7 	bcc.w	8009d58 <MelFilterbank_Init+0xcc>
    }
  }
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	3790      	adds	r7, #144	; 0x90
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b08d      	sub	sp, #52	; 0x34
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8009ffc:	e034      	b.n	800a068 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	4413      	add	r3, r2
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	69ba      	ldr	r2, [r7, #24]
 800a010:	4413      	add	r3, r2
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800a01c:	8a7b      	ldrh	r3, [r7, #18]
 800a01e:	623b      	str	r3, [r7, #32]
 800a020:	e015      	b.n	800a04e <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	4413      	add	r3, r2
 800a02a:	ed93 7a00 	vldr	s14, [r3]
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	1d1a      	adds	r2, r3, #4
 800a032:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a034:	edd3 7a00 	vldr	s15, [r3]
 800a038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a03c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a040:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a044:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	3301      	adds	r3, #1
 800a04c:	623b      	str	r3, [r7, #32]
 800a04e:	8a3b      	ldrh	r3, [r7, #16]
 800a050:	6a3a      	ldr	r2, [r7, #32]
 800a052:	429a      	cmp	r2, r3
 800a054:	d9e5      	bls.n	800a022 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	4413      	add	r3, r2
 800a05e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a060:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	3301      	adds	r3, #1
 800a066:	627b      	str	r3, [r7, #36]	; 0x24
 800a068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d3c6      	bcc.n	8009ffe <MelFilterbank+0x2a>
  }
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	3734      	adds	r7, #52	; 0x34
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
	...

0800a080 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af00      	add	r7, sp, #0
 800a086:	ed87 0a01 	vstr	s0, [r7, #4]
 800a08a:	4603      	mov	r3, r0
 800a08c:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d042      	beq.n	800a11a <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 800a094:	f04f 0300 	mov.w	r3, #0
 800a098:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800a09a:	4b2c      	ldr	r3, [pc, #176]	; (800a14c <MelScale+0xcc>)
 800a09c:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 800a09e:	ed97 7a01 	vldr	s14, [r7, #4]
 800a0a2:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a0aa:	ed97 7a05 	vldr	s14, [r7, #20]
 800a0ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b2:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800a0b6:	4b26      	ldr	r3, [pc, #152]	; (800a150 <MelScale+0xd0>)
 800a0b8:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800a0ba:	ed97 7a04 	vldr	s14, [r7, #16]
 800a0be:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a0c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800a0ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ce:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 800a0d2:	4b20      	ldr	r3, [pc, #128]	; (800a154 <MelScale+0xd4>)
 800a0d4:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 800a0d6:	ed97 7a01 	vldr	s14, [r7, #4]
 800a0da:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e6:	db15      	blt.n	800a114 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 800a0e8:	ed97 7a01 	vldr	s14, [r7, #4]
 800a0ec:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a0f4:	eeb0 0a66 	vmov.f32	s0, s13
 800a0f8:	f00a feda 	bl	8014eb0 <logf>
 800a0fc:	eef0 6a40 	vmov.f32	s13, s0
 800a100:	ed97 7a02 	vldr	s14, [r7, #8]
 800a104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a108:	ed97 7a03 	vldr	s14, [r7, #12]
 800a10c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a110:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 800a114:	edd7 7a07 	vldr	s15, [r7, #28]
 800a118:	e013      	b.n	800a142 <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 800a11a:	ed97 7a01 	vldr	s14, [r7, #4]
 800a11e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a158 <MelScale+0xd8>
 800a122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a12a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a12e:	eeb0 0a67 	vmov.f32	s0, s15
 800a132:	f00a febd 	bl	8014eb0 <logf>
 800a136:	eef0 7a40 	vmov.f32	s15, s0
 800a13a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800a15c <MelScale+0xdc>
 800a13e:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 800a142:	eeb0 0a67 	vmov.f32	s0, s15
 800a146:	3720      	adds	r7, #32
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	42855555 	.word	0x42855555
 800a150:	447a0000 	.word	0x447a0000
 800a154:	3d8ccdbb 	.word	0x3d8ccdbb
 800a158:	442f0000 	.word	0x442f0000
 800a15c:	448ce000 	.word	0x448ce000

0800a160 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	ed87 0a01 	vstr	s0, [r7, #4]
 800a16a:	4603      	mov	r3, r0
 800a16c:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d042      	beq.n	800a1fa <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 800a174:	f04f 0300 	mov.w	r3, #0
 800a178:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800a17a:	4b2c      	ldr	r3, [pc, #176]	; (800a22c <InverseMelScale+0xcc>)
 800a17c:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 800a17e:	ed97 7a05 	vldr	s14, [r7, #20]
 800a182:	edd7 7a01 	vldr	s15, [r7, #4]
 800a186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18a:	ed97 7a06 	vldr	s14, [r7, #24]
 800a18e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a192:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800a196:	4b26      	ldr	r3, [pc, #152]	; (800a230 <InverseMelScale+0xd0>)
 800a198:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800a19a:	ed97 7a04 	vldr	s14, [r7, #16]
 800a19e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a1a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a1a6:	ed97 7a05 	vldr	s14, [r7, #20]
 800a1aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ae:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 800a1b2:	4b20      	ldr	r3, [pc, #128]	; (800a234 <InverseMelScale+0xd4>)
 800a1b4:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 800a1b6:	ed97 7a01 	vldr	s14, [r7, #4]
 800a1ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c6:	db15      	blt.n	800a1f4 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 800a1c8:	ed97 7a01 	vldr	s14, [r7, #4]
 800a1cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1d4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1dc:	eeb0 0a67 	vmov.f32	s0, s15
 800a1e0:	f00a fe28 	bl	8014e34 <expf>
 800a1e4:	eeb0 7a40 	vmov.f32	s14, s0
 800a1e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1f0:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 800a1f4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a1f8:	e013      	b.n	800a222 <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 800a1fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1fe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a238 <InverseMelScale+0xd8>
 800a202:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a206:	eeb0 0a47 	vmov.f32	s0, s14
 800a20a:	f00a fe13 	bl	8014e34 <expf>
 800a20e:	eef0 7a40 	vmov.f32	s15, s0
 800a212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a21a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800a23c <InverseMelScale+0xdc>
 800a21e:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 800a222:	eeb0 0a67 	vmov.f32	s0, s15
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	42855555 	.word	0x42855555
 800a230:	447a0000 	.word	0x447a0000
 800a234:	3d8ccdbb 	.word	0x3d8ccdbb
 800a238:	448ce000 	.word	0x448ce000
 800a23c:	442f0000 	.word	0x442f0000

0800a240 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	4613      	mov	r3, r2
 800a24c:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]

  switch (type)
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	2b02      	cmp	r3, #2
 800a256:	d01c      	beq.n	800a292 <Window_Init+0x52>
 800a258:	2b02      	cmp	r3, #2
 800a25a:	dc25      	bgt.n	800a2a8 <Window_Init+0x68>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <Window_Init+0x26>
 800a260:	2b01      	cmp	r3, #1
 800a262:	d00b      	beq.n	800a27c <Window_Init+0x3c>
 800a264:	e020      	b.n	800a2a8 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 800a266:	ed9f 2b16 	vldr	d2, [pc, #88]	; 800a2c0 <Window_Init+0x80>
 800a26a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 800a2c8 <Window_Init+0x88>
 800a26e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 800a2c8 <Window_Init+0x88>
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f83b 	bl	800a2f0 <cosine_sum_window_create>
      break;
 800a27a:	e019      	b.n	800a2b0 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 800a27c:	ed9f 2b10 	vldr	d2, [pc, #64]	; 800a2c0 <Window_Init+0x80>
 800a280:	ed9f 1b13 	vldr	d1, [pc, #76]	; 800a2d0 <Window_Init+0x90>
 800a284:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800a2d8 <Window_Init+0x98>
 800a288:	68b9      	ldr	r1, [r7, #8]
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f000 f830 	bl	800a2f0 <cosine_sum_window_create>
      break;
 800a290:	e00e      	b.n	800a2b0 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 800a292:	ed9f 2b13 	vldr	d2, [pc, #76]	; 800a2e0 <Window_Init+0xa0>
 800a296:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800a2c8 <Window_Init+0x88>
 800a29a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 800a2e8 <Window_Init+0xa8>
 800a29e:	68b9      	ldr	r1, [r7, #8]
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 f825 	bl	800a2f0 <cosine_sum_window_create>
      break;
 800a2a6:	e003      	b.n	800a2b0 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2ac:	617b      	str	r3, [r7, #20]
      break;
 800a2ae:	bf00      	nop
  }

  return status;
 800a2b0:	697b      	ldr	r3, [r7, #20]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	f3af 8000 	nop.w
	...
 800a2cc:	3fe00000 	.word	0x3fe00000
 800a2d0:	d70a3d71 	.word	0xd70a3d71
 800a2d4:	3fdd70a3 	.word	0x3fdd70a3
 800a2d8:	147ae148 	.word	0x147ae148
 800a2dc:	3fe147ae 	.word	0x3fe147ae
 800a2e0:	47ae147b 	.word	0x47ae147b
 800a2e4:	3fb47ae1 	.word	0x3fb47ae1
 800a2e8:	ae147ae1 	.word	0xae147ae1
 800a2ec:	3fdae147 	.word	0x3fdae147

0800a2f0 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 800a2f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a2f4:	b08a      	sub	sp, #40	; 0x28
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	61f8      	str	r0, [r7, #28]
 800a2fa:	61b9      	str	r1, [r7, #24]
 800a2fc:	ed87 0b04 	vstr	d0, [r7, #16]
 800a300:	ed87 1b02 	vstr	d1, [r7, #8]
 800a304:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 800a308:	2300      	movs	r3, #0
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
 800a30c:	e067      	b.n	800a3de <cosine_sum_window_create+0xee>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800a30e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a310:	f7f6 f908 	bl	8000524 <__aeabi_ui2d>
 800a314:	a338      	add	r3, pc, #224	; (adr r3, 800a3f8 <cosine_sum_window_create+0x108>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	f7f6 f97d 	bl	8000618 <__aeabi_dmul>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	4614      	mov	r4, r2
 800a324:	461d      	mov	r5, r3
 800a326:	69b8      	ldr	r0, [r7, #24]
 800a328:	f7f6 f8fc 	bl	8000524 <__aeabi_ui2d>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f6 fa9a 	bl	800086c <__aeabi_ddiv>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	ec43 2b17 	vmov	d7, r2, r3
 800a340:	eeb0 0a47 	vmov.f32	s0, s14
 800a344:	eef0 0a67 	vmov.f32	s1, s15
 800a348:	f00a fcc2 	bl	8014cd0 <cos>
 800a34c:	ec51 0b10 	vmov	r0, r1, d0
 800a350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a354:	f7f6 f960 	bl	8000618 <__aeabi_dmul>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a360:	f7f5 ffa2 	bl	80002a8 <__aeabi_dsub>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4614      	mov	r4, r2
 800a36a:	461d      	mov	r5, r3
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800a36c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a36e:	f7f6 f8d9 	bl	8000524 <__aeabi_ui2d>
 800a372:	a323      	add	r3, pc, #140	; (adr r3, 800a400 <cosine_sum_window_create+0x110>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f6 f94e 	bl	8000618 <__aeabi_dmul>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4690      	mov	r8, r2
 800a382:	4699      	mov	r9, r3
 800a384:	69b8      	ldr	r0, [r7, #24]
 800a386:	f7f6 f8cd 	bl	8000524 <__aeabi_ui2d>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f6 fa6b 	bl	800086c <__aeabi_ddiv>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	ec43 2b17 	vmov	d7, r2, r3
 800a39e:	eeb0 0a47 	vmov.f32	s0, s14
 800a3a2:	eef0 0a67 	vmov.f32	s1, s15
 800a3a6:	f00a fc93 	bl	8014cd0 <cos>
 800a3aa:	ec51 0b10 	vmov	r0, r1, d0
 800a3ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b2:	f7f6 f931 	bl	8000618 <__aeabi_dmul>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7f5 ff75 	bl	80002ac <__adddf3>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	4619      	mov	r1, r3
    *pDst++ = a0
 800a3ca:	69fc      	ldr	r4, [r7, #28]
 800a3cc:	1d23      	adds	r3, r4, #4
 800a3ce:	61fb      	str	r3, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800a3d0:	f7f6 fc1a 	bl	8000c08 <__aeabi_d2f>
 800a3d4:	4603      	mov	r3, r0
    *pDst++ = a0
 800a3d6:	6023      	str	r3, [r4, #0]
  for (uint32_t i = 0; i < len; i++)
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	3301      	adds	r3, #1
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d393      	bcc.n	800a30e <cosine_sum_window_create+0x1e>
  }
}
 800a3e6:	bf00      	nop
 800a3e8:	bf00      	nop
 800a3ea:	3728      	adds	r7, #40	; 0x28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a3f2:	bf00      	nop
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	54442d18 	.word	0x54442d18
 800a3fc:	401921fb 	.word	0x401921fb
 800a400:	54442d18 	.word	0x54442d18
 800a404:	402921fb 	.word	0x402921fb

0800a408 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0
	  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);*/
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800a40c:	4b10      	ldr	r3, [pc, #64]	; (800a450 <MX_PDM2PCM_Init+0x48>)
 800a40e:	2200      	movs	r2, #0
 800a410:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800a412:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <MX_PDM2PCM_Init+0x48>)
 800a414:	2201      	movs	r2, #1
 800a416:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800a418:	4b0d      	ldr	r3, [pc, #52]	; (800a450 <MX_PDM2PCM_Init+0x48>)
 800a41a:	4a0e      	ldr	r2, [pc, #56]	; (800a454 <MX_PDM2PCM_Init+0x4c>)
 800a41c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800a41e:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <MX_PDM2PCM_Init+0x48>)
 800a420:	2201      	movs	r2, #1
 800a422:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800a424:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <MX_PDM2PCM_Init+0x48>)
 800a426:	2201      	movs	r2, #1
 800a428:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800a42a:	4809      	ldr	r0, [pc, #36]	; (800a450 <MX_PDM2PCM_Init+0x48>)
 800a42c:	f001 ff2c 	bl	800c288 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800a430:	4b09      	ldr	r3, [pc, #36]	; (800a458 <MX_PDM2PCM_Init+0x50>)
 800a432:	2202      	movs	r2, #2
 800a434:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800a436:	4b08      	ldr	r3, [pc, #32]	; (800a458 <MX_PDM2PCM_Init+0x50>)
 800a438:	2210      	movs	r2, #16
 800a43a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 800a43c:	4b06      	ldr	r3, [pc, #24]	; (800a458 <MX_PDM2PCM_Init+0x50>)
 800a43e:	2218      	movs	r2, #24
 800a440:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800a442:	4905      	ldr	r1, [pc, #20]	; (800a458 <MX_PDM2PCM_Init+0x50>)
 800a444:	4802      	ldr	r0, [pc, #8]	; (800a450 <MX_PDM2PCM_Init+0x48>)
 800a446:	f001 ffa9 	bl	800c39c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800a44a:	bf00      	nop
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	20013cd4 	.word	0x20013cd4
 800a454:	7d70a3d6 	.word	0x7d70a3d6
 800a458:	20013ccc 	.word	0x20013ccc

0800a45c <speech_commands_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool speech_commands_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800a466:	2300      	movs	r3, #0
 800a468:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800a46a:	f107 030c 	add.w	r3, r7, #12
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	2101      	movs	r1, #1
 800a472:	4618      	mov	r0, r3
 800a474:	f002 f916 	bl	800c6a4 <ai_platform_get_activations_map>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d053      	beq.n	800a526 <speech_commands_model_configure_activations+0xca>
    /* Updating activations (byte) offsets */
    serving_default_conv2d_21_input0_output_array.data = AI_PTR(NULL);
 800a47e:	4b2c      	ldr	r3, [pc, #176]	; (800a530 <speech_commands_model_configure_activations+0xd4>)
 800a480:	2200      	movs	r2, #0
 800a482:	609a      	str	r2, [r3, #8]
    serving_default_conv2d_21_input0_output_array.data_start = AI_PTR(NULL);
 800a484:	4b2a      	ldr	r3, [pc, #168]	; (800a530 <speech_commands_model_configure_activations+0xd4>)
 800a486:	2200      	movs	r2, #0
 800a488:	60da      	str	r2, [r3, #12]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 416);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a490:	4a28      	ldr	r2, [pc, #160]	; (800a534 <speech_commands_model_configure_activations+0xd8>)
 800a492:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 416);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a49a:	4a26      	ldr	r2, [pc, #152]	; (800a534 <speech_commands_model_configure_activations+0xd8>)
 800a49c:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(activations_map[0] + 0);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4a25      	ldr	r2, [pc, #148]	; (800a538 <speech_commands_model_configure_activations+0xdc>)
 800a4a2:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4a24      	ldr	r2, [pc, #144]	; (800a538 <speech_commands_model_configure_activations+0xdc>)
 800a4a8:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 2304);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b0:	4a22      	ldr	r2, [pc, #136]	; (800a53c <speech_commands_model_configure_activations+0xe0>)
 800a4b2:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 2304);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ba:	4a20      	ldr	r2, [pc, #128]	; (800a53c <speech_commands_model_configure_activations+0xe0>)
 800a4bc:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4a1f      	ldr	r2, [pc, #124]	; (800a540 <speech_commands_model_configure_activations+0xe4>)
 800a4c2:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4a1e      	ldr	r2, [pc, #120]	; (800a540 <speech_commands_model_configure_activations+0xe4>)
 800a4c8:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations_map[0] + 256);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a4d0:	4a1c      	ldr	r2, [pc, #112]	; (800a544 <speech_commands_model_configure_activations+0xe8>)
 800a4d2:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations_map[0] + 256);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a4da:	4a1a      	ldr	r2, [pc, #104]	; (800a544 <speech_commands_model_configure_activations+0xe8>)
 800a4dc:	60d3      	str	r3, [r2, #12]
    nl_5_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	4a19      	ldr	r2, [pc, #100]	; (800a548 <speech_commands_model_configure_activations+0xec>)
 800a4e2:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4a18      	ldr	r2, [pc, #96]	; (800a548 <speech_commands_model_configure_activations+0xec>)
 800a4e8:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(activations_map[0] + 256);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a4f0:	4a16      	ldr	r2, [pc, #88]	; (800a54c <speech_commands_model_configure_activations+0xf0>)
 800a4f2:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(activations_map[0] + 256);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a4fa:	4a14      	ldr	r2, [pc, #80]	; (800a54c <speech_commands_model_configure_activations+0xf0>)
 800a4fc:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(NULL);
 800a4fe:	4b14      	ldr	r3, [pc, #80]	; (800a550 <speech_commands_model_configure_activations+0xf4>)
 800a500:	2200      	movs	r2, #0
 800a502:	609a      	str	r2, [r3, #8]
    nl_7_output_array.data_start = AI_PTR(NULL);
 800a504:	4b12      	ldr	r3, [pc, #72]	; (800a550 <speech_commands_model_configure_activations+0xf4>)
 800a506:	2200      	movs	r2, #0
 800a508:	60da      	str	r2, [r3, #12]
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 12064);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800a510:	3320      	adds	r3, #32
 800a512:	4a10      	ldr	r2, [pc, #64]	; (800a554 <speech_commands_model_configure_activations+0xf8>)
 800a514:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 12064);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800a51c:	3320      	adds	r3, #32
 800a51e:	4a0d      	ldr	r2, [pc, #52]	; (800a554 <speech_commands_model_configure_activations+0xf8>)
 800a520:	60d3      	str	r3, [r2, #12]
    
    return true;
 800a522:	2301      	movs	r3, #1
 800a524:	e000      	b.n	800a528 <speech_commands_model_configure_activations+0xcc>
  }
  return false;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	200004c0 	.word	0x200004c0
 800a534:	200004d0 	.word	0x200004d0
 800a538:	200004e0 	.word	0x200004e0
 800a53c:	200004f0 	.word	0x200004f0
 800a540:	20000500 	.word	0x20000500
 800a544:	20000510 	.word	0x20000510
 800a548:	20000520 	.word	0x20000520
 800a54c:	20000530 	.word	0x20000530
 800a550:	20000540 	.word	0x20000540
 800a554:	200005f0 	.word	0x200005f0

0800a558 <speech_commands_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool speech_commands_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800a562:	2300      	movs	r3, #0
 800a564:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800a566:	f107 030c 	add.w	r3, r7, #12
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	2101      	movs	r1, #1
 800a56e:	4618      	mov	r0, r3
 800a570:	f002 f864 	bl	800c63c <ai_platform_get_weights_map>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80b0 	beq.w	800a6dc <speech_commands_model_configure_weights+0x184>
    /* Updating weights with array addresses */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800a57c:	4b5a      	ldr	r3, [pc, #360]	; (800a6e8 <speech_commands_model_configure_weights+0x190>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a584:	4a58      	ldr	r2, [pc, #352]	; (800a6e8 <speech_commands_model_configure_weights+0x190>)
 800a586:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4a57      	ldr	r2, [pc, #348]	; (800a6e8 <speech_commands_model_configure_weights+0x190>)
 800a58c:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	4a55      	ldr	r2, [pc, #340]	; (800a6e8 <speech_commands_model_configure_weights+0x190>)
 800a592:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800a594:	4b55      	ldr	r3, [pc, #340]	; (800a6ec <speech_commands_model_configure_weights+0x194>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a59c:	4a53      	ldr	r2, [pc, #332]	; (800a6ec <speech_commands_model_configure_weights+0x194>)
 800a59e:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 288);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a5a6:	4a51      	ldr	r2, [pc, #324]	; (800a6ec <speech_commands_model_configure_weights+0x194>)
 800a5a8:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 288);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a5b0:	4a4e      	ldr	r2, [pc, #312]	; (800a6ec <speech_commands_model_configure_weights+0x194>)
 800a5b2:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800a5b4:	4b4e      	ldr	r3, [pc, #312]	; (800a6f0 <speech_commands_model_configure_weights+0x198>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5bc:	4a4c      	ldr	r2, [pc, #304]	; (800a6f0 <speech_commands_model_configure_weights+0x198>)
 800a5be:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 320);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a5c6:	4a4a      	ldr	r2, [pc, #296]	; (800a6f0 <speech_commands_model_configure_weights+0x198>)
 800a5c8:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 320);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a5d0:	4a47      	ldr	r2, [pc, #284]	; (800a6f0 <speech_commands_model_configure_weights+0x198>)
 800a5d2:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800a5d4:	4b47      	ldr	r3, [pc, #284]	; (800a6f4 <speech_commands_model_configure_weights+0x19c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5dc:	4a45      	ldr	r2, [pc, #276]	; (800a6f4 <speech_commands_model_configure_weights+0x19c>)
 800a5de:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 2624);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800a5e6:	4a43      	ldr	r2, [pc, #268]	; (800a6f4 <speech_commands_model_configure_weights+0x19c>)
 800a5e8:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights_map[0] + 2624);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800a5f0:	4a40      	ldr	r2, [pc, #256]	; (800a6f4 <speech_commands_model_configure_weights+0x19c>)
 800a5f2:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800a5f4:	4b40      	ldr	r3, [pc, #256]	; (800a6f8 <speech_commands_model_configure_weights+0x1a0>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5fc:	4a3e      	ldr	r2, [pc, #248]	; (800a6f8 <speech_commands_model_configure_weights+0x1a0>)
 800a5fe:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights_map[0] + 2656);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 800a606:	4a3c      	ldr	r2, [pc, #240]	; (800a6f8 <speech_commands_model_configure_weights+0x1a0>)
 800a608:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights_map[0] + 2656);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 800a610:	4a39      	ldr	r2, [pc, #228]	; (800a6f8 <speech_commands_model_configure_weights+0x1a0>)
 800a612:	60d3      	str	r3, [r2, #12]
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800a614:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <speech_commands_model_configure_weights+0x1a4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a61c:	4a37      	ldr	r2, [pc, #220]	; (800a6fc <speech_commands_model_configure_weights+0x1a4>)
 800a61e:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights_map[0] + 150112);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800a626:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a62a:	4a34      	ldr	r2, [pc, #208]	; (800a6fc <speech_commands_model_configure_weights+0x1a4>)
 800a62c:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights_map[0] + 150112);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800a634:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a638:	4a30      	ldr	r2, [pc, #192]	; (800a6fc <speech_commands_model_configure_weights+0x1a4>)
 800a63a:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800a63c:	4b30      	ldr	r3, [pc, #192]	; (800a700 <speech_commands_model_configure_weights+0x1a8>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a644:	4a2e      	ldr	r2, [pc, #184]	; (800a700 <speech_commands_model_configure_weights+0x1a8>)
 800a646:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights_map[0] + 150368);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800a64e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800a652:	4a2b      	ldr	r2, [pc, #172]	; (800a700 <speech_commands_model_configure_weights+0x1a8>)
 800a654:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights_map[0] + 150368);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800a65c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800a660:	4a27      	ldr	r2, [pc, #156]	; (800a700 <speech_commands_model_configure_weights+0x1a8>)
 800a662:	60d3      	str	r3, [r2, #12]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800a664:	4b27      	ldr	r3, [pc, #156]	; (800a704 <speech_commands_model_configure_weights+0x1ac>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a66c:	4a25      	ldr	r2, [pc, #148]	; (800a704 <speech_commands_model_configure_weights+0x1ac>)
 800a66e:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights_map[0] + 166752);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f503 3322 	add.w	r3, r3, #165888	; 0x28800
 800a676:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800a67a:	4a22      	ldr	r2, [pc, #136]	; (800a704 <speech_commands_model_configure_weights+0x1ac>)
 800a67c:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights_map[0] + 166752);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f503 3322 	add.w	r3, r3, #165888	; 0x28800
 800a684:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800a688:	4a1e      	ldr	r2, [pc, #120]	; (800a704 <speech_commands_model_configure_weights+0x1ac>)
 800a68a:	60d3      	str	r3, [r2, #12]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800a68c:	4b1e      	ldr	r3, [pc, #120]	; (800a708 <speech_commands_model_configure_weights+0x1b0>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a694:	4a1c      	ldr	r2, [pc, #112]	; (800a708 <speech_commands_model_configure_weights+0x1b0>)
 800a696:	6013      	str	r3, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights_map[0] + 167008);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f503 3323 	add.w	r3, r3, #166912	; 0x28c00
 800a69e:	3360      	adds	r3, #96	; 0x60
 800a6a0:	4a19      	ldr	r2, [pc, #100]	; (800a708 <speech_commands_model_configure_weights+0x1b0>)
 800a6a2:	6093      	str	r3, [r2, #8]
    dense_6_weights_array.data_start = AI_PTR(weights_map[0] + 167008);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 3323 	add.w	r3, r3, #166912	; 0x28c00
 800a6aa:	3360      	adds	r3, #96	; 0x60
 800a6ac:	4a16      	ldr	r2, [pc, #88]	; (800a708 <speech_commands_model_configure_weights+0x1b0>)
 800a6ae:	60d3      	str	r3, [r2, #12]
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800a6b0:	4b16      	ldr	r3, [pc, #88]	; (800a70c <speech_commands_model_configure_weights+0x1b4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6b8:	4a14      	ldr	r2, [pc, #80]	; (800a70c <speech_commands_model_configure_weights+0x1b4>)
 800a6ba:	6013      	str	r3, [r2, #0]
    dense_6_bias_array.data = AI_PTR(weights_map[0] + 176736);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
 800a6c2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a6c6:	4a11      	ldr	r2, [pc, #68]	; (800a70c <speech_commands_model_configure_weights+0x1b4>)
 800a6c8:	6093      	str	r3, [r2, #8]
    dense_6_bias_array.data_start = AI_PTR(weights_map[0] + 176736);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
 800a6d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a6d4:	4a0d      	ldr	r2, [pc, #52]	; (800a70c <speech_commands_model_configure_weights+0x1b4>)
 800a6d6:	60d3      	str	r3, [r2, #12]
    return true;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e000      	b.n	800a6de <speech_commands_model_configure_weights+0x186>
  }
  return false;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000550 	.word	0x20000550
 800a6ec:	20000560 	.word	0x20000560
 800a6f0:	20000570 	.word	0x20000570
 800a6f4:	20000580 	.word	0x20000580
 800a6f8:	20000590 	.word	0x20000590
 800a6fc:	200005a0 	.word	0x200005a0
 800a700:	200005b0 	.word	0x200005b0
 800a704:	200005c0 	.word	0x200005c0
 800a708:	200005d0 	.word	0x200005d0
 800a70c:	200005e0 	.word	0x200005e0

0800a710 <ai_speech_commands_model_create>:
}

AI_API_ENTRY
ai_error ai_speech_commands_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af02      	add	r7, sp, #8
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800a71a:	2300      	movs	r3, #0
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	2304      	movs	r3, #4
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	2301      	movs	r3, #1
 800a724:	4a04      	ldr	r2, [pc, #16]	; (800a738 <ai_speech_commands_model_create+0x28>)
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f001 ffef 	bl	800c70c <ai_platform_network_create>
 800a72e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20000e98 	.word	0x20000e98

0800a73c <ai_speech_commands_model_init>:
}

AI_API_ENTRY
ai_bool ai_speech_commands_model_init(
  ai_handle network, const ai_network_params* params)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f002 f8b5 	bl	800c8b8 <ai_platform_network_init>
 800a74e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <ai_speech_commands_model_init+0x1e>
 800a756:	2300      	movs	r3, #0
 800a758:	e028      	b.n	800a7ac <ai_speech_commands_model_init+0x70>

  ai_bool ok = true;
 800a75a:	2301      	movs	r3, #1
 800a75c:	72fb      	strb	r3, [r7, #11]
  ok &= speech_commands_model_configure_weights(net_ctx, params);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7ff fef9 	bl	800a558 <speech_commands_model_configure_weights>
 800a766:	4603      	mov	r3, r0
 800a768:	461a      	mov	r2, r3
 800a76a:	7afb      	ldrb	r3, [r7, #11]
 800a76c:	4013      	ands	r3, r2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bf14      	ite	ne
 800a772:	2301      	movne	r3, #1
 800a774:	2300      	moveq	r3, #0
 800a776:	72fb      	strb	r3, [r7, #11]
  ok &= speech_commands_model_configure_activations(net_ctx, params);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7ff fe6e 	bl	800a45c <speech_commands_model_configure_activations>
 800a780:	4603      	mov	r3, r0
 800a782:	461a      	mov	r2, r3
 800a784:	7afb      	ldrb	r3, [r7, #11]
 800a786:	4013      	ands	r3, r2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bf14      	ite	ne
 800a78c:	2301      	movne	r3, #1
 800a78e:	2300      	moveq	r3, #0
 800a790:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f002 f9a2 	bl	800cadc <ai_platform_network_post_init>
 800a798:	4603      	mov	r3, r0
 800a79a:	461a      	mov	r2, r3
 800a79c:	7afb      	ldrb	r3, [r7, #11]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	bf14      	ite	ne
 800a7a4:	2301      	movne	r3, #1
 800a7a6:	2300      	moveq	r3, #0
 800a7a8:	72fb      	strb	r3, [r7, #11]

  return ok;
 800a7aa:	7afb      	ldrb	r3, [r7, #11]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <ai_speech_commands_model_run>:


AI_API_ENTRY
ai_i32 ai_speech_commands_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	68b9      	ldr	r1, [r7, #8]
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f002 fa1d 	bl	800cc04 <ai_platform_network_process>
 800a7ca:	4603      	mov	r3, r0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <ai_speech_commands_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_speech_commands_model_data_weights_get(void)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_speech_commands_model_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_speech_commands_model_weights_map);
 800a7d8:	4b02      	ldr	r3, [pc, #8]	; (800a7e4 <ai_speech_commands_model_data_weights_get+0x10>)

}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	0805f9f8 	.word	0x0805f9f8

0800a7e8 <D16_GENERIC>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	b089      	sub	sp, #36	; 0x24
 800a7ee:	68d4      	ldr	r4, [r2, #12]
 800a7f0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a7f2:	6993      	ldr	r3, [r2, #24]
 800a7f4:	9407      	str	r4, [sp, #28]
 800a7f6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a7f8:	9306      	str	r3, [sp, #24]
 800a7fa:	9402      	str	r4, [sp, #8]
 800a7fc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a800:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800a804:	69d3      	ldr	r3, [r2, #28]
 800a806:	6896      	ldr	r6, [r2, #8]
 800a808:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a80a:	9103      	str	r1, [sp, #12]
 800a80c:	2d00      	cmp	r5, #0
 800a80e:	d066      	beq.n	800a8de <D16_GENERIC+0xf6>
 800a810:	f004 0510 	and.w	r5, r4, #16
 800a814:	f004 0420 	and.w	r4, r4, #32
 800a818:	9504      	str	r5, [sp, #16]
 800a81a:	4938      	ldr	r1, [pc, #224]	; (800a8fc <D16_GENERIC+0x114>)
 800a81c:	9405      	str	r4, [sp, #20]
 800a81e:	f04f 0e00 	mov.w	lr, #0
 800a822:	4635      	mov	r5, r6
 800a824:	e04f      	b.n	800a8c6 <D16_GENERIC+0xde>
 800a826:	5d87      	ldrb	r7, [r0, r6]
 800a828:	7804      	ldrb	r4, [r0, #0]
 800a82a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a82e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800a832:	b2e6      	uxtb	r6, r4
 800a834:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a838:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a83c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a840:	4433      	add	r3, r6
 800a842:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800a846:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800a84a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a84e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800a852:	0aa3      	lsrs	r3, r4, #10
 800a854:	4c2a      	ldr	r4, [pc, #168]	; (800a900 <D16_GENERIC+0x118>)
 800a856:	fb26 5404 	smlad	r4, r6, r4, r5
 800a85a:	4d2a      	ldr	r5, [pc, #168]	; (800a904 <D16_GENERIC+0x11c>)
 800a85c:	fb26 f505 	smuad	r5, r6, r5
 800a860:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800a864:	eb04 080a 	add.w	r8, r4, sl
 800a868:	eba8 080b 	sub.w	r8, r8, fp
 800a86c:	4646      	mov	r6, r8
 800a86e:	17f7      	asrs	r7, r6, #31
 800a870:	e9cd 6700 	strd	r6, r7, [sp]
 800a874:	9e04      	ldr	r6, [sp, #16]
 800a876:	f10e 0c01 	add.w	ip, lr, #1
 800a87a:	b16e      	cbz	r6, 800a898 <D16_GENERIC+0xb0>
 800a87c:	6a16      	ldr	r6, [r2, #32]
 800a87e:	9f01      	ldr	r7, [sp, #4]
 800a880:	fba8 8906 	umull	r8, r9, r8, r6
 800a884:	fb06 9907 	mla	r9, r6, r7, r9
 800a888:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800a88c:	f149 0900 	adc.w	r9, r9, #0
 800a890:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800a894:	46a3      	mov	fp, r4
 800a896:	4654      	mov	r4, sl
 800a898:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a89a:	9f02      	ldr	r7, [sp, #8]
 800a89c:	0424      	lsls	r4, r4, #16
 800a89e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a8a2:	f04f 0900 	mov.w	r9, #0
 800a8a6:	fb0e fe06 	mul.w	lr, lr, r6
 800a8aa:	fbc7 8904 	smlal	r8, r9, r7, r4
 800a8ae:	9e03      	ldr	r6, [sp, #12]
 800a8b0:	464f      	mov	r7, r9
 800a8b2:	10bc      	asrs	r4, r7, #2
 800a8b4:	f304 040f 	ssat	r4, #16, r4
 800a8b8:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800a8bc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a8be:	fa1f fe8c 	uxth.w	lr, ip
 800a8c2:	4574      	cmp	r4, lr
 800a8c4:	d90a      	bls.n	800a8dc <D16_GENERIC+0xf4>
 800a8c6:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a8c8:	2c01      	cmp	r4, #1
 800a8ca:	b2e6      	uxtb	r6, r4
 800a8cc:	d1ab      	bne.n	800a826 <D16_GENERIC+0x3e>
 800a8ce:	9e05      	ldr	r6, [sp, #20]
 800a8d0:	f850 4b02 	ldr.w	r4, [r0], #2
 800a8d4:	2e00      	cmp	r6, #0
 800a8d6:	d0ac      	beq.n	800a832 <D16_GENERIC+0x4a>
 800a8d8:	ba64      	rev16	r4, r4
 800a8da:	e7aa      	b.n	800a832 <D16_GENERIC+0x4a>
 800a8dc:	462e      	mov	r6, r5
 800a8de:	9907      	ldr	r1, [sp, #28]
 800a8e0:	61d3      	str	r3, [r2, #28]
 800a8e2:	9b06      	ldr	r3, [sp, #24]
 800a8e4:	6096      	str	r6, [r2, #8]
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	60d1      	str	r1, [r2, #12]
 800a8ea:	f8c2 a010 	str.w	sl, [r2, #16]
 800a8ee:	f8c2 b014 	str.w	fp, [r2, #20]
 800a8f2:	6193      	str	r3, [r2, #24]
 800a8f4:	b009      	add	sp, #36	; 0x24
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000000 	.word	0x20000000
 800a900:	00030001 	.word	0x00030001
 800a904:	00010003 	.word	0x00010003

0800a908 <D24_GENERIC>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a90e:	6993      	ldr	r3, [r2, #24]
 800a910:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a912:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a916:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800a91a:	6894      	ldr	r4, [r2, #8]
 800a91c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800a920:	b089      	sub	sp, #36	; 0x24
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	9503      	str	r5, [sp, #12]
 800a926:	69d3      	ldr	r3, [r2, #28]
 800a928:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800a92a:	9104      	str	r1, [sp, #16]
 800a92c:	2e00      	cmp	r6, #0
 800a92e:	f000 8096 	beq.w	800aa5e <D24_GENERIC+0x156>
 800a932:	f005 0610 	and.w	r6, r5, #16
 800a936:	f005 0520 	and.w	r5, r5, #32
 800a93a:	4954      	ldr	r1, [pc, #336]	; (800aa8c <D24_GENERIC+0x184>)
 800a93c:	9605      	str	r6, [sp, #20]
 800a93e:	9506      	str	r5, [sp, #24]
 800a940:	f04f 0e00 	mov.w	lr, #0
 800a944:	f8cd 9008 	str.w	r9, [sp, #8]
 800a948:	e06a      	b.n	800aa20 <D24_GENERIC+0x118>
 800a94a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800a94e:	f810 8007 	ldrb.w	r8, [r0, r7]
 800a952:	f890 c000 	ldrb.w	ip, [r0]
 800a956:	042d      	lsls	r5, r5, #16
 800a958:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a95c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800a960:	44ac      	add	ip, r5
 800a962:	4438      	add	r0, r7
 800a964:	fa5f f68c 	uxtb.w	r6, ip
 800a968:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800a96c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a970:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800a974:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a978:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800a97c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a980:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800a984:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800a988:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a98c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a990:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800a994:	4d3e      	ldr	r5, [pc, #248]	; (800aa90 <D24_GENERIC+0x188>)
 800a996:	fb26 b705 	smlad	r7, r6, r5, fp
 800a99a:	4d3e      	ldr	r5, [pc, #248]	; (800aa94 <D24_GENERIC+0x18c>)
 800a99c:	fb26 4b05 	smlad	fp, r6, r5, r4
 800a9a0:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800a9a4:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800a9a8:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800a9ac:	2401      	movs	r4, #1
 800a9ae:	fb26 f604 	smuad	r6, r6, r4
 800a9b2:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800a9b6:	9f02      	ldr	r7, [sp, #8]
 800a9b8:	eb0e 0c04 	add.w	ip, lr, r4
 800a9bc:	eb08 0406 	add.w	r4, r8, r6
 800a9c0:	eb05 060a 	add.w	r6, r5, sl
 800a9c4:	1bf6      	subs	r6, r6, r7
 800a9c6:	4637      	mov	r7, r6
 800a9c8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800a9cc:	e9cd 7800 	strd	r7, r8, [sp]
 800a9d0:	9f05      	ldr	r7, [sp, #20]
 800a9d2:	b177      	cbz	r7, 800a9f2 <D24_GENERIC+0xea>
 800a9d4:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800a9d8:	9502      	str	r5, [sp, #8]
 800a9da:	fba6 9a08 	umull	r9, sl, r6, r8
 800a9de:	9e01      	ldr	r6, [sp, #4]
 800a9e0:	fb08 aa06 	mla	sl, r8, r6, sl
 800a9e4:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800a9e8:	f14a 0700 	adc.w	r7, sl, #0
 800a9ec:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800a9f0:	4655      	mov	r5, sl
 800a9f2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a9f4:	9f03      	ldr	r7, [sp, #12]
 800a9f6:	03ad      	lsls	r5, r5, #14
 800a9f8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a9fc:	f04f 0900 	mov.w	r9, #0
 800aa00:	fb0e fe06 	mul.w	lr, lr, r6
 800aa04:	fbc7 8905 	smlal	r8, r9, r7, r5
 800aa08:	9e04      	ldr	r6, [sp, #16]
 800aa0a:	464f      	mov	r7, r9
 800aa0c:	10bd      	asrs	r5, r7, #2
 800aa0e:	f305 050f 	ssat	r5, #16, r5
 800aa12:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800aa16:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aa18:	fa1f fe8c 	uxth.w	lr, ip
 800aa1c:	4575      	cmp	r5, lr
 800aa1e:	d91c      	bls.n	800aa5a <D24_GENERIC+0x152>
 800aa20:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800aa22:	b2ef      	uxtb	r7, r5
 800aa24:	2d01      	cmp	r5, #1
 800aa26:	b23e      	sxth	r6, r7
 800aa28:	d18f      	bne.n	800a94a <D24_GENERIC+0x42>
 800aa2a:	9d06      	ldr	r5, [sp, #24]
 800aa2c:	b15d      	cbz	r5, 800aa46 <D24_GENERIC+0x13e>
 800aa2e:	f01e 0f01 	tst.w	lr, #1
 800aa32:	d122      	bne.n	800aa7a <D24_GENERIC+0x172>
 800aa34:	7805      	ldrb	r5, [r0, #0]
 800aa36:	78c7      	ldrb	r7, [r0, #3]
 800aa38:	7846      	ldrb	r6, [r0, #1]
 800aa3a:	022d      	lsls	r5, r5, #8
 800aa3c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800aa40:	44b4      	add	ip, r6
 800aa42:	3002      	adds	r0, #2
 800aa44:	e78e      	b.n	800a964 <D24_GENERIC+0x5c>
 800aa46:	7846      	ldrb	r6, [r0, #1]
 800aa48:	f890 c002 	ldrb.w	ip, [r0, #2]
 800aa4c:	f810 5b03 	ldrb.w	r5, [r0], #3
 800aa50:	0236      	lsls	r6, r6, #8
 800aa52:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800aa56:	44ac      	add	ip, r5
 800aa58:	e784      	b.n	800a964 <D24_GENERIC+0x5c>
 800aa5a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800aa5e:	61d3      	str	r3, [r2, #28]
 800aa60:	9b07      	ldr	r3, [sp, #28]
 800aa62:	6094      	str	r4, [r2, #8]
 800aa64:	2000      	movs	r0, #0
 800aa66:	f8c2 b00c 	str.w	fp, [r2, #12]
 800aa6a:	f8c2 a010 	str.w	sl, [r2, #16]
 800aa6e:	f8c2 9014 	str.w	r9, [r2, #20]
 800aa72:	6193      	str	r3, [r2, #24]
 800aa74:	b009      	add	sp, #36	; 0x24
 800aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa7a:	78c5      	ldrb	r5, [r0, #3]
 800aa7c:	7887      	ldrb	r7, [r0, #2]
 800aa7e:	f810 6b04 	ldrb.w	r6, [r0], #4
 800aa82:	022d      	lsls	r5, r5, #8
 800aa84:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800aa88:	44b4      	add	ip, r6
 800aa8a:	e76b      	b.n	800a964 <D24_GENERIC+0x5c>
 800aa8c:	20000000 	.word	0x20000000
 800aa90:	00030001 	.word	0x00030001
 800aa94:	00060007 	.word	0x00060007

0800aa98 <D32_GENERIC>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aa9e:	6993      	ldr	r3, [r2, #24]
 800aaa0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800aaa2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800aaa6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800aaaa:	69d6      	ldr	r6, [r2, #28]
 800aaac:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800aab0:	b089      	sub	sp, #36	; 0x24
 800aab2:	9307      	str	r3, [sp, #28]
 800aab4:	9403      	str	r4, [sp, #12]
 800aab6:	6893      	ldr	r3, [r2, #8]
 800aab8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800aaba:	9104      	str	r1, [sp, #16]
 800aabc:	2d00      	cmp	r5, #0
 800aabe:	f000 809f 	beq.w	800ac00 <D32_GENERIC+0x168>
 800aac2:	f004 0510 	and.w	r5, r4, #16
 800aac6:	f004 0420 	and.w	r4, r4, #32
 800aaca:	9505      	str	r5, [sp, #20]
 800aacc:	4953      	ldr	r1, [pc, #332]	; (800ac1c <D32_GENERIC+0x184>)
 800aace:	9406      	str	r4, [sp, #24]
 800aad0:	f04f 0c00 	mov.w	ip, #0
 800aad4:	f8cd 9008 	str.w	r9, [sp, #8]
 800aad8:	461d      	mov	r5, r3
 800aada:	4617      	mov	r7, r2
 800aadc:	e077      	b.n	800abce <D32_GENERIC+0x136>
 800aade:	f818 3003 	ldrb.w	r3, [r8, r3]
 800aae2:	f810 800e 	ldrb.w	r8, [r0, lr]
 800aae6:	f810 e002 	ldrb.w	lr, [r0, r2]
 800aaea:	7800      	ldrb	r0, [r0, #0]
 800aaec:	041b      	lsls	r3, r3, #16
 800aaee:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800aaf2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800aaf6:	4403      	add	r3, r0
 800aaf8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800aafc:	b2dc      	uxtb	r4, r3
 800aafe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ab02:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800ab06:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800ab0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab0e:	0e1b      	lsrs	r3, r3, #24
 800ab10:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800ab14:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800ab18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab1c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800ab20:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800ab24:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800ab28:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800ab2c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ab30:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ab34:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ab38:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800ab3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab40:	4b37      	ldr	r3, [pc, #220]	; (800ac20 <D32_GENERIC+0x188>)
 800ab42:	fb22 b403 	smlad	r4, r2, r3, fp
 800ab46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab4a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800ab4e:	4b35      	ldr	r3, [pc, #212]	; (800ac24 <D32_GENERIC+0x18c>)
 800ab50:	fb22 5503 	smlad	r5, r2, r3, r5
 800ab54:	4b34      	ldr	r3, [pc, #208]	; (800ac28 <D32_GENERIC+0x190>)
 800ab56:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	fb22 f203 	smuad	r2, r2, r3
 800ab60:	4b32      	ldr	r3, [pc, #200]	; (800ac2c <D32_GENERIC+0x194>)
 800ab62:	fb2e 2503 	smlad	r5, lr, r3, r2
 800ab66:	9b02      	ldr	r3, [sp, #8]
 800ab68:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800ab6c:	eb04 080a 	add.w	r8, r4, sl
 800ab70:	eba8 0803 	sub.w	r8, r8, r3
 800ab74:	4642      	mov	r2, r8
 800ab76:	17d3      	asrs	r3, r2, #31
 800ab78:	e9cd 2300 	strd	r2, r3, [sp]
 800ab7c:	9b05      	ldr	r3, [sp, #20]
 800ab7e:	f10c 0e01 	add.w	lr, ip, #1
 800ab82:	b16b      	cbz	r3, 800aba0 <D32_GENERIC+0x108>
 800ab84:	6a3a      	ldr	r2, [r7, #32]
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	9402      	str	r4, [sp, #8]
 800ab8a:	fba8 8902 	umull	r8, r9, r8, r2
 800ab8e:	fb02 9903 	mla	r9, r2, r3, r9
 800ab92:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800ab96:	f149 0900 	adc.w	r9, r9, #0
 800ab9a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800ab9e:	4654      	mov	r4, sl
 800aba0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aba2:	9a04      	ldr	r2, [sp, #16]
 800aba4:	fb0c fc03 	mul.w	ip, ip, r3
 800aba8:	9b03      	ldr	r3, [sp, #12]
 800abaa:	0364      	lsls	r4, r4, #13
 800abac:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800abb0:	f04f 0900 	mov.w	r9, #0
 800abb4:	fbc3 8904 	smlal	r8, r9, r3, r4
 800abb8:	464b      	mov	r3, r9
 800abba:	109b      	asrs	r3, r3, #2
 800abbc:	f303 030f 	ssat	r3, #16, r3
 800abc0:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800abc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abc6:	fa1f fc8e 	uxth.w	ip, lr
 800abca:	4563      	cmp	r3, ip
 800abcc:	d914      	bls.n	800abf8 <D32_GENERIC+0x160>
 800abce:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800abd0:	b2e2      	uxtb	r2, r4
 800abd2:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800abd6:	eb00 080e 	add.w	r8, r0, lr
 800abda:	4253      	negs	r3, r2
 800abdc:	2c01      	cmp	r4, #1
 800abde:	eb08 0403 	add.w	r4, r8, r3
 800abe2:	f47f af7c 	bne.w	800aade <D32_GENERIC+0x46>
 800abe6:	1d02      	adds	r2, r0, #4
 800abe8:	6803      	ldr	r3, [r0, #0]
 800abea:	9806      	ldr	r0, [sp, #24]
 800abec:	b110      	cbz	r0, 800abf4 <D32_GENERIC+0x15c>
 800abee:	ba5b      	rev16	r3, r3
 800abf0:	4610      	mov	r0, r2
 800abf2:	e783      	b.n	800aafc <D32_GENERIC+0x64>
 800abf4:	4610      	mov	r0, r2
 800abf6:	e781      	b.n	800aafc <D32_GENERIC+0x64>
 800abf8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800abfc:	462b      	mov	r3, r5
 800abfe:	463a      	mov	r2, r7
 800ac00:	6093      	str	r3, [r2, #8]
 800ac02:	9b07      	ldr	r3, [sp, #28]
 800ac04:	f8c2 b00c 	str.w	fp, [r2, #12]
 800ac08:	2000      	movs	r0, #0
 800ac0a:	61d6      	str	r6, [r2, #28]
 800ac0c:	f8c2 a010 	str.w	sl, [r2, #16]
 800ac10:	f8c2 9014 	str.w	r9, [r2, #20]
 800ac14:	6193      	str	r3, [r2, #24]
 800ac16:	b009      	add	sp, #36	; 0x24
 800ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1c:	20000000 	.word	0x20000000
 800ac20:	00060003 	.word	0x00060003
 800ac24:	000a000c 	.word	0x000a000c
 800ac28:	000c000a 	.word	0x000c000a
 800ac2c:	00030006 	.word	0x00030006

0800ac30 <D48_GENERIC>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	b089      	sub	sp, #36	; 0x24
 800ac36:	6953      	ldr	r3, [r2, #20]
 800ac38:	68d4      	ldr	r4, [r2, #12]
 800ac3a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ac3c:	9302      	str	r3, [sp, #8]
 800ac3e:	9400      	str	r4, [sp, #0]
 800ac40:	6993      	ldr	r3, [r2, #24]
 800ac42:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ac44:	9307      	str	r3, [sp, #28]
 800ac46:	9403      	str	r4, [sp, #12]
 800ac48:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800ac4c:	69d6      	ldr	r6, [r2, #28]
 800ac4e:	6893      	ldr	r3, [r2, #8]
 800ac50:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ac52:	9104      	str	r1, [sp, #16]
 800ac54:	2d00      	cmp	r5, #0
 800ac56:	f000 80c5 	beq.w	800ade4 <D48_GENERIC+0x1b4>
 800ac5a:	f004 0510 	and.w	r5, r4, #16
 800ac5e:	f004 0420 	and.w	r4, r4, #32
 800ac62:	4967      	ldr	r1, [pc, #412]	; (800ae00 <D48_GENERIC+0x1d0>)
 800ac64:	9505      	str	r5, [sp, #20]
 800ac66:	9406      	str	r4, [sp, #24]
 800ac68:	f04f 0c00 	mov.w	ip, #0
 800ac6c:	4657      	mov	r7, sl
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	e09c      	b.n	800adac <D48_GENERIC+0x17c>
 800ac72:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800ac76:	f810 b009 	ldrb.w	fp, [r0, r9]
 800ac7a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800ac7e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800ac82:	7800      	ldrb	r0, [r0, #0]
 800ac84:	0424      	lsls	r4, r4, #16
 800ac86:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800ac8a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800ac8e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800ac92:	44a8      	add	r8, r5
 800ac94:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800ac98:	eb0b 0500 	add.w	r5, fp, r0
 800ac9c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800aca0:	fa5f f885 	uxtb.w	r8, r5
 800aca4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800aca8:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800acac:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800acb0:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800acb4:	0e2d      	lsrs	r5, r5, #24
 800acb6:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800acba:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800acbe:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800acc2:	b2e6      	uxtb	r6, r4
 800acc4:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800acc8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800accc:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800acd0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800acd4:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800acd8:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800acdc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800ace0:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800ace4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ace8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800acec:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800acf0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800acf4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800acf8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800acfc:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800ad00:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800ad04:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800ad08:	4c3e      	ldr	r4, [pc, #248]	; (800ae04 <D48_GENERIC+0x1d4>)
 800ad0a:	9d00      	ldr	r5, [sp, #0]
 800ad0c:	fb2a 5404 	smlad	r4, sl, r4, r5
 800ad10:	4d3d      	ldr	r5, [pc, #244]	; (800ae08 <D48_GENERIC+0x1d8>)
 800ad12:	fb28 4405 	smlad	r4, r8, r5, r4
 800ad16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad1a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800ad1e:	4c3b      	ldr	r4, [pc, #236]	; (800ae0c <D48_GENERIC+0x1dc>)
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	fb2a 3304 	smlad	r3, sl, r4, r3
 800ad26:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800ad2a:	fb28 3304 	smlad	r3, r8, r4, r3
 800ad2e:	4c38      	ldr	r4, [pc, #224]	; (800ae10 <D48_GENERIC+0x1e0>)
 800ad30:	fb2e 3304 	smlad	r3, lr, r4, r3
 800ad34:	2501      	movs	r5, #1
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	fb2a fa05 	smuad	sl, sl, r5
 800ad3c:	4b35      	ldr	r3, [pc, #212]	; (800ae14 <D48_GENERIC+0x1e4>)
 800ad3e:	fb28 a803 	smlad	r8, r8, r3, sl
 800ad42:	4b35      	ldr	r3, [pc, #212]	; (800ae18 <D48_GENERIC+0x1e8>)
 800ad44:	fb2e 8303 	smlad	r3, lr, r3, r8
 800ad48:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	eb04 0807 	add.w	r8, r4, r7
 800ad54:	eba8 0803 	sub.w	r8, r8, r3
 800ad58:	9b05      	ldr	r3, [sp, #20]
 800ad5a:	4465      	add	r5, ip
 800ad5c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800ad60:	b163      	cbz	r3, 800ad7c <D48_GENERIC+0x14c>
 800ad62:	6a17      	ldr	r7, [r2, #32]
 800ad64:	9402      	str	r4, [sp, #8]
 800ad66:	fba8 8907 	umull	r8, r9, r8, r7
 800ad6a:	fb07 990b 	mla	r9, r7, fp, r9
 800ad6e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800ad72:	f149 0900 	adc.w	r9, r9, #0
 800ad76:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800ad7a:	463c      	mov	r4, r7
 800ad7c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	02e4      	lsls	r4, r4, #11
 800ad84:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ad88:	f04f 0900 	mov.w	r9, #0
 800ad8c:	fb0c fc0e 	mul.w	ip, ip, lr
 800ad90:	fbc3 8904 	smlal	r8, r9, r3, r4
 800ad94:	9b04      	ldr	r3, [sp, #16]
 800ad96:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800ad9a:	f304 040f 	ssat	r4, #16, r4
 800ad9e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800ada2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ada4:	fa1f fc85 	uxth.w	ip, r5
 800ada8:	4564      	cmp	r4, ip
 800adaa:	d919      	bls.n	800ade0 <D48_GENERIC+0x1b0>
 800adac:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800adae:	fa5f fe84 	uxtb.w	lr, r4
 800adb2:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800adb6:	f1ce 0500 	rsb	r5, lr, #0
 800adba:	eb00 0b09 	add.w	fp, r0, r9
 800adbe:	eb0b 0a05 	add.w	sl, fp, r5
 800adc2:	2c01      	cmp	r4, #1
 800adc4:	eb0a 0809 	add.w	r8, sl, r9
 800adc8:	f47f af53 	bne.w	800ac72 <D48_GENERIC+0x42>
 800adcc:	9b06      	ldr	r3, [sp, #24]
 800adce:	6805      	ldr	r5, [r0, #0]
 800add0:	6844      	ldr	r4, [r0, #4]
 800add2:	3006      	adds	r0, #6
 800add4:	2b00      	cmp	r3, #0
 800add6:	f43f af63 	beq.w	800aca0 <D48_GENERIC+0x70>
 800adda:	ba6d      	rev16	r5, r5
 800addc:	ba64      	rev16	r4, r4
 800adde:	e75f      	b.n	800aca0 <D48_GENERIC+0x70>
 800ade0:	9b01      	ldr	r3, [sp, #4]
 800ade2:	46ba      	mov	sl, r7
 800ade4:	6093      	str	r3, [r2, #8]
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	60d3      	str	r3, [r2, #12]
 800adea:	9b02      	ldr	r3, [sp, #8]
 800adec:	6153      	str	r3, [r2, #20]
 800adee:	9b07      	ldr	r3, [sp, #28]
 800adf0:	61d6      	str	r6, [r2, #28]
 800adf2:	2000      	movs	r0, #0
 800adf4:	f8c2 a010 	str.w	sl, [r2, #16]
 800adf8:	6193      	str	r3, [r2, #24]
 800adfa:	b009      	add	sp, #36	; 0x24
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae00:	20000000 	.word	0x20000000
 800ae04:	000f000a 	.word	0x000f000a
 800ae08:	00060003 	.word	0x00060003
 800ae0c:	00150019 	.word	0x00150019
 800ae10:	00190015 	.word	0x00190015
 800ae14:	00030006 	.word	0x00030006
 800ae18:	000a000f 	.word	0x000a000f

0800ae1c <D64_GENERIC>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	b089      	sub	sp, #36	; 0x24
 800ae22:	6913      	ldr	r3, [r2, #16]
 800ae24:	6895      	ldr	r5, [r2, #8]
 800ae26:	9303      	str	r3, [sp, #12]
 800ae28:	9501      	str	r5, [sp, #4]
 800ae2a:	6953      	ldr	r3, [r2, #20]
 800ae2c:	68d5      	ldr	r5, [r2, #12]
 800ae2e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ae30:	9304      	str	r3, [sp, #16]
 800ae32:	9500      	str	r5, [sp, #0]
 800ae34:	6993      	ldr	r3, [r2, #24]
 800ae36:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ae38:	9307      	str	r3, [sp, #28]
 800ae3a:	9505      	str	r5, [sp, #20]
 800ae3c:	69d3      	ldr	r3, [r2, #28]
 800ae3e:	9106      	str	r1, [sp, #24]
 800ae40:	2c00      	cmp	r4, #0
 800ae42:	f000 80d9 	beq.w	800aff8 <D64_GENERIC+0x1dc>
 800ae46:	6a11      	ldr	r1, [r2, #32]
 800ae48:	9102      	str	r1, [sp, #8]
 800ae4a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800b038 <D64_GENERIC+0x21c>
 800ae4e:	f04f 0c00 	mov.w	ip, #0
 800ae52:	4681      	mov	r9, r0
 800ae54:	e0c1      	b.n	800afda <D64_GENERIC+0x1be>
 800ae56:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800ae5a:	4274      	negs	r4, r6
 800ae5c:	eb09 0708 	add.w	r7, r9, r8
 800ae60:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800ae64:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800ae68:	5d38      	ldrb	r0, [r7, r4]
 800ae6a:	5d29      	ldrb	r1, [r5, r4]
 800ae6c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800ae70:	f819 a008 	ldrb.w	sl, [r9, r8]
 800ae74:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800ae78:	f899 7000 	ldrb.w	r7, [r9]
 800ae7c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800ae80:	4425      	add	r5, r4
 800ae82:	0409      	lsls	r1, r1, #16
 800ae84:	0400      	lsls	r0, r0, #16
 800ae86:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800ae8a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800ae8e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800ae92:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800ae96:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800ae9a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800ae9e:	4459      	add	r1, fp
 800aea0:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800aea4:	4438      	add	r0, r7
 800aea6:	b2c5      	uxtb	r5, r0
 800aea8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800aeac:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800aeb0:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800aeb4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800aeb8:	0e00      	lsrs	r0, r0, #24
 800aeba:	eb03 0806 	add.w	r8, r3, r6
 800aebe:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800aec2:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800aec6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800aeca:	b2c8      	uxtb	r0, r1
 800aecc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800aed0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800aed4:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800aed8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800aedc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800aee0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800aee4:	0e09      	lsrs	r1, r1, #24
 800aee6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800aeea:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800aeee:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800aef2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800aef6:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800aefa:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800aefe:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800af02:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800af06:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800af0a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800af0e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800af12:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800af16:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800af1a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800af1e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800af22:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800af26:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800af2a:	0a8b      	lsrs	r3, r1, #10
 800af2c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800af30:	4939      	ldr	r1, [pc, #228]	; (800b018 <D64_GENERIC+0x1fc>)
 800af32:	9c00      	ldr	r4, [sp, #0]
 800af34:	fb28 4101 	smlad	r1, r8, r1, r4
 800af38:	4c38      	ldr	r4, [pc, #224]	; (800b01c <D64_GENERIC+0x200>)
 800af3a:	fb27 1104 	smlad	r1, r7, r4, r1
 800af3e:	4c38      	ldr	r4, [pc, #224]	; (800b020 <D64_GENERIC+0x204>)
 800af40:	fb20 1104 	smlad	r1, r0, r4, r1
 800af44:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800af48:	fb2a 1106 	smlad	r1, sl, r6, r1
 800af4c:	4c35      	ldr	r4, [pc, #212]	; (800b024 <D64_GENERIC+0x208>)
 800af4e:	9d01      	ldr	r5, [sp, #4]
 800af50:	fb28 5404 	smlad	r4, r8, r4, r5
 800af54:	4d33      	ldr	r5, [pc, #204]	; (800b024 <D64_GENERIC+0x208>)
 800af56:	fb2a 4415 	smladx	r4, sl, r5, r4
 800af5a:	4d33      	ldr	r5, [pc, #204]	; (800b028 <D64_GENERIC+0x20c>)
 800af5c:	fb27 4405 	smlad	r4, r7, r5, r4
 800af60:	fb20 4415 	smladx	r4, r0, r5, r4
 800af64:	2501      	movs	r5, #1
 800af66:	9400      	str	r4, [sp, #0]
 800af68:	fb28 f805 	smuad	r8, r8, r5
 800af6c:	4c2f      	ldr	r4, [pc, #188]	; (800b02c <D64_GENERIC+0x210>)
 800af6e:	fb27 8704 	smlad	r7, r7, r4, r8
 800af72:	4c2f      	ldr	r4, [pc, #188]	; (800b030 <D64_GENERIC+0x214>)
 800af74:	fb20 7004 	smlad	r0, r0, r4, r7
 800af78:	4c2e      	ldr	r4, [pc, #184]	; (800b034 <D64_GENERIC+0x218>)
 800af7a:	fb2a 0004 	smlad	r0, sl, r4, r0
 800af7e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800af82:	9902      	ldr	r1, [sp, #8]
 800af84:	9001      	str	r0, [sp, #4]
 800af86:	b189      	cbz	r1, 800afac <D64_GENERIC+0x190>
 800af88:	9803      	ldr	r0, [sp, #12]
 800af8a:	9c04      	ldr	r4, [sp, #16]
 800af8c:	9604      	str	r6, [sp, #16]
 800af8e:	4430      	add	r0, r6
 800af90:	1b00      	subs	r0, r0, r4
 800af92:	17c5      	asrs	r5, r0, #31
 800af94:	460f      	mov	r7, r1
 800af96:	fba0 0101 	umull	r0, r1, r0, r1
 800af9a:	fb07 1105 	mla	r1, r7, r5, r1
 800af9e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800afa2:	f141 0100 	adc.w	r1, r1, #0
 800afa6:	0049      	lsls	r1, r1, #1
 800afa8:	9103      	str	r1, [sp, #12]
 800afaa:	460e      	mov	r6, r1
 800afac:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800afae:	9905      	ldr	r1, [sp, #20]
 800afb0:	9806      	ldr	r0, [sp, #24]
 800afb2:	02b6      	lsls	r6, r6, #10
 800afb4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800afb8:	f04f 0800 	mov.w	r8, #0
 800afbc:	fb0c f404 	mul.w	r4, ip, r4
 800afc0:	fbc1 7806 	smlal	r7, r8, r1, r6
 800afc4:	4641      	mov	r1, r8
 800afc6:	1089      	asrs	r1, r1, #2
 800afc8:	f301 010f 	ssat	r1, #16, r1
 800afcc:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800afd0:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800afd2:	f10c 0c01 	add.w	ip, ip, #1
 800afd6:	4561      	cmp	r1, ip
 800afd8:	dd0e      	ble.n	800aff8 <D64_GENERIC+0x1dc>
 800afda:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800afdc:	2e01      	cmp	r6, #1
 800afde:	f47f af3a 	bne.w	800ae56 <D64_GENERIC+0x3a>
 800afe2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800afe4:	06b4      	lsls	r4, r6, #26
 800afe6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800afea:	f109 0908 	add.w	r9, r9, #8
 800afee:	f57f af5a 	bpl.w	800aea6 <D64_GENERIC+0x8a>
 800aff2:	ba40      	rev16	r0, r0
 800aff4:	ba49      	rev16	r1, r1
 800aff6:	e756      	b.n	800aea6 <D64_GENERIC+0x8a>
 800aff8:	61d3      	str	r3, [r2, #28]
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	9901      	ldr	r1, [sp, #4]
 800affe:	6113      	str	r3, [r2, #16]
 800b000:	9b04      	ldr	r3, [sp, #16]
 800b002:	6091      	str	r1, [r2, #8]
 800b004:	6153      	str	r3, [r2, #20]
 800b006:	9900      	ldr	r1, [sp, #0]
 800b008:	9b07      	ldr	r3, [sp, #28]
 800b00a:	60d1      	str	r1, [r2, #12]
 800b00c:	2000      	movs	r0, #0
 800b00e:	6193      	str	r3, [r2, #24]
 800b010:	b009      	add	sp, #36	; 0x24
 800b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b016:	bf00      	nop
 800b018:	001c0015 	.word	0x001c0015
 800b01c:	000f000a 	.word	0x000f000a
 800b020:	00060003 	.word	0x00060003
 800b024:	0024002a 	.word	0x0024002a
 800b028:	002e0030 	.word	0x002e0030
 800b02c:	00030006 	.word	0x00030006
 800b030:	000a000f 	.word	0x000a000f
 800b034:	0015001c 	.word	0x0015001c
 800b038:	20000000 	.word	0x20000000

0800b03c <D80_GENERIC>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	b08b      	sub	sp, #44	; 0x2c
 800b042:	6914      	ldr	r4, [r2, #16]
 800b044:	9404      	str	r4, [sp, #16]
 800b046:	6954      	ldr	r4, [r2, #20]
 800b048:	9405      	str	r4, [sp, #20]
 800b04a:	6994      	ldr	r4, [r2, #24]
 800b04c:	9409      	str	r4, [sp, #36]	; 0x24
 800b04e:	6894      	ldr	r4, [r2, #8]
 800b050:	9402      	str	r4, [sp, #8]
 800b052:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b054:	68d4      	ldr	r4, [r2, #12]
 800b056:	9401      	str	r4, [sp, #4]
 800b058:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b05a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800b05e:	9406      	str	r4, [sp, #24]
 800b060:	9107      	str	r1, [sp, #28]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 810f 	beq.w	800b286 <D80_GENERIC+0x24a>
 800b068:	6a13      	ldr	r3, [r2, #32]
 800b06a:	9308      	str	r3, [sp, #32]
 800b06c:	2300      	movs	r3, #0
 800b06e:	9200      	str	r2, [sp, #0]
 800b070:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800b2d8 <D80_GENERIC+0x29c>
 800b074:	f8cd b00c 	str.w	fp, [sp, #12]
 800b078:	461a      	mov	r2, r3
 800b07a:	e0ed      	b.n	800b258 <D80_GENERIC+0x21c>
 800b07c:	fa5f fc8c 	uxtb.w	ip, ip
 800b080:	fa0f f48c 	sxth.w	r4, ip
 800b084:	0066      	lsls	r6, r4, #1
 800b086:	eb06 0804 	add.w	r8, r6, r4
 800b08a:	f1cc 0500 	rsb	r5, ip, #0
 800b08e:	eb00 0108 	add.w	r1, r0, r8
 800b092:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b096:	194b      	adds	r3, r1, r5
 800b098:	5d49      	ldrb	r1, [r1, r5]
 800b09a:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b09e:	f813 b004 	ldrb.w	fp, [r3, r4]
 800b0a2:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800b0a6:	f890 8000 	ldrb.w	r8, [r0]
 800b0aa:	eb03 0e04 	add.w	lr, r3, r4
 800b0ae:	eb0e 0705 	add.w	r7, lr, r5
 800b0b2:	0409      	lsls	r1, r1, #16
 800b0b4:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b0b8:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b0bc:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b0c0:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800b0c4:	eb0a 0004 	add.w	r0, sl, r4
 800b0c8:	041b      	lsls	r3, r3, #16
 800b0ca:	f81a a004 	ldrb.w	sl, [sl, r4]
 800b0ce:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800b0d2:	5d44      	ldrb	r4, [r0, r5]
 800b0d4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b0d8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800b0dc:	4428      	add	r0, r5
 800b0de:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b0e2:	4441      	add	r1, r8
 800b0e4:	4430      	add	r0, r6
 800b0e6:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800b0ea:	441f      	add	r7, r3
 800b0ec:	b2cd      	uxtb	r5, r1
 800b0ee:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b0f2:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800b0f6:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800b100:	0e09      	lsrs	r1, r1, #24
 800b102:	4433      	add	r3, r6
 800b104:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800b108:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800b10c:	b2fd      	uxtb	r5, r7
 800b10e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800b112:	469b      	mov	fp, r3
 800b114:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800b118:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800b11c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800b120:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800b124:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800b128:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800b12c:	0e3b      	lsrs	r3, r7, #24
 800b12e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b132:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800b136:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b13a:	fa5f fe84 	uxtb.w	lr, r4
 800b13e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800b142:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b146:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800b14a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800b14e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800b152:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800b156:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800b15a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b15e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b166:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b16a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b16e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b172:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b176:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b17a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800b17e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800b182:	0aa3      	lsrs	r3, r4, #10
 800b184:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b188:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b18c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b190:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800b194:	9303      	str	r3, [sp, #12]
 800b196:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800b19a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800b19e:	4b42      	ldr	r3, [pc, #264]	; (800b2a8 <D80_GENERIC+0x26c>)
 800b1a0:	9901      	ldr	r1, [sp, #4]
 800b1a2:	fb2b 1303 	smlad	r3, fp, r3, r1
 800b1a6:	4941      	ldr	r1, [pc, #260]	; (800b2ac <D80_GENERIC+0x270>)
 800b1a8:	fb28 3301 	smlad	r3, r8, r1, r3
 800b1ac:	4940      	ldr	r1, [pc, #256]	; (800b2b0 <D80_GENERIC+0x274>)
 800b1ae:	fb2c 3301 	smlad	r3, ip, r1, r3
 800b1b2:	4940      	ldr	r1, [pc, #256]	; (800b2b4 <D80_GENERIC+0x278>)
 800b1b4:	fb27 3301 	smlad	r3, r7, r1, r3
 800b1b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b1bc:	fb2e 3301 	smlad	r3, lr, r1, r3
 800b1c0:	493d      	ldr	r1, [pc, #244]	; (800b2b8 <D80_GENERIC+0x27c>)
 800b1c2:	9c02      	ldr	r4, [sp, #8]
 800b1c4:	fb2b 4401 	smlad	r4, fp, r1, r4
 800b1c8:	493c      	ldr	r1, [pc, #240]	; (800b2bc <D80_GENERIC+0x280>)
 800b1ca:	fb28 4401 	smlad	r4, r8, r1, r4
 800b1ce:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800b1d2:	fb2c 4101 	smlad	r1, ip, r1, r4
 800b1d6:	4c3a      	ldr	r4, [pc, #232]	; (800b2c0 <D80_GENERIC+0x284>)
 800b1d8:	fb27 1104 	smlad	r1, r7, r4, r1
 800b1dc:	4c39      	ldr	r4, [pc, #228]	; (800b2c4 <D80_GENERIC+0x288>)
 800b1de:	fb2e 1104 	smlad	r1, lr, r4, r1
 800b1e2:	9101      	str	r1, [sp, #4]
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	fb2b fb01 	smuad	fp, fp, r1
 800b1ea:	4937      	ldr	r1, [pc, #220]	; (800b2c8 <D80_GENERIC+0x28c>)
 800b1ec:	fb28 b801 	smlad	r8, r8, r1, fp
 800b1f0:	4d36      	ldr	r5, [pc, #216]	; (800b2cc <D80_GENERIC+0x290>)
 800b1f2:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800b1f6:	4d36      	ldr	r5, [pc, #216]	; (800b2d0 <D80_GENERIC+0x294>)
 800b1f8:	fb27 c705 	smlad	r7, r7, r5, ip
 800b1fc:	4d35      	ldr	r5, [pc, #212]	; (800b2d4 <D80_GENERIC+0x298>)
 800b1fe:	fb2e 7105 	smlad	r1, lr, r5, r7
 800b202:	9102      	str	r1, [sp, #8]
 800b204:	9908      	ldr	r1, [sp, #32]
 800b206:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800b20a:	b181      	cbz	r1, 800b22e <D80_GENERIC+0x1f2>
 800b20c:	9c04      	ldr	r4, [sp, #16]
 800b20e:	9d05      	ldr	r5, [sp, #20]
 800b210:	9305      	str	r3, [sp, #20]
 800b212:	441c      	add	r4, r3
 800b214:	1b64      	subs	r4, r4, r5
 800b216:	17e7      	asrs	r7, r4, #31
 800b218:	fba4 4501 	umull	r4, r5, r4, r1
 800b21c:	fb01 5507 	mla	r5, r1, r7, r5
 800b220:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b224:	f145 0500 	adc.w	r5, r5, #0
 800b228:	0069      	lsls	r1, r5, #1
 800b22a:	9104      	str	r1, [sp, #16]
 800b22c:	460b      	mov	r3, r1
 800b22e:	9e00      	ldr	r6, [sp, #0]
 800b230:	9f06      	ldr	r7, [sp, #24]
 800b232:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800b234:	025b      	lsls	r3, r3, #9
 800b236:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b23a:	2500      	movs	r5, #0
 800b23c:	fb02 f101 	mul.w	r1, r2, r1
 800b240:	fbc7 4503 	smlal	r4, r5, r7, r3
 800b244:	9c07      	ldr	r4, [sp, #28]
 800b246:	10ab      	asrs	r3, r5, #2
 800b248:	f303 030f 	ssat	r3, #16, r3
 800b24c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800b250:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b252:	3201      	adds	r2, #1
 800b254:	4293      	cmp	r3, r2
 800b256:	dd13      	ble.n	800b280 <D80_GENERIC+0x244>
 800b258:	9b00      	ldr	r3, [sp, #0]
 800b25a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800b25e:	f1bc 0f01 	cmp.w	ip, #1
 800b262:	f47f af0b 	bne.w	800b07c <D80_GENERIC+0x40>
 800b266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b268:	6884      	ldr	r4, [r0, #8]
 800b26a:	069b      	lsls	r3, r3, #26
 800b26c:	e890 0082 	ldmia.w	r0, {r1, r7}
 800b270:	f100 000a 	add.w	r0, r0, #10
 800b274:	f57f af3a 	bpl.w	800b0ec <D80_GENERIC+0xb0>
 800b278:	ba49      	rev16	r1, r1
 800b27a:	ba7f      	rev16	r7, r7
 800b27c:	ba64      	rev16	r4, r4
 800b27e:	e735      	b.n	800b0ec <D80_GENERIC+0xb0>
 800b280:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b284:	4632      	mov	r2, r6
 800b286:	9b02      	ldr	r3, [sp, #8]
 800b288:	6093      	str	r3, [r2, #8]
 800b28a:	9b01      	ldr	r3, [sp, #4]
 800b28c:	60d3      	str	r3, [r2, #12]
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	6113      	str	r3, [r2, #16]
 800b292:	9b05      	ldr	r3, [sp, #20]
 800b294:	6153      	str	r3, [r2, #20]
 800b296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b298:	f8c2 b01c 	str.w	fp, [r2, #28]
 800b29c:	2000      	movs	r0, #0
 800b29e:	6193      	str	r3, [r2, #24]
 800b2a0:	b00b      	add	sp, #44	; 0x2c
 800b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a6:	bf00      	nop
 800b2a8:	002d0024 	.word	0x002d0024
 800b2ac:	001c0015 	.word	0x001c0015
 800b2b0:	000f000a 	.word	0x000f000a
 800b2b4:	00060003 	.word	0x00060003
 800b2b8:	0037003f 	.word	0x0037003f
 800b2bc:	00450049 	.word	0x00450049
 800b2c0:	00490045 	.word	0x00490045
 800b2c4:	003f0037 	.word	0x003f0037
 800b2c8:	00030006 	.word	0x00030006
 800b2cc:	000a000f 	.word	0x000a000f
 800b2d0:	0015001c 	.word	0x0015001c
 800b2d4:	0024002d 	.word	0x0024002d
 800b2d8:	20000000 	.word	0x20000000

0800b2dc <D128_GENERIC>:
 800b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	b093      	sub	sp, #76	; 0x4c
 800b2e2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b2e4:	9005      	str	r0, [sp, #20]
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	9201      	str	r2, [sp, #4]
 800b2ea:	6912      	ldr	r2, [r2, #16]
 800b2ec:	920c      	str	r2, [sp, #48]	; 0x30
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	6940      	ldr	r0, [r0, #20]
 800b2f2:	900d      	str	r0, [sp, #52]	; 0x34
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4614      	mov	r4, r2
 800b2f8:	6992      	ldr	r2, [r2, #24]
 800b2fa:	9211      	str	r2, [sp, #68]	; 0x44
 800b2fc:	69c2      	ldr	r2, [r0, #28]
 800b2fe:	9202      	str	r2, [sp, #8]
 800b300:	68e2      	ldr	r2, [r4, #12]
 800b302:	6880      	ldr	r0, [r0, #8]
 800b304:	9203      	str	r2, [sp, #12]
 800b306:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b308:	9004      	str	r0, [sp, #16]
 800b30a:	920e      	str	r2, [sp, #56]	; 0x38
 800b30c:	910f      	str	r1, [sp, #60]	; 0x3c
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 819b 	beq.w	800b64a <D128_GENERIC+0x36e>
 800b314:	6a23      	ldr	r3, [r4, #32]
 800b316:	9310      	str	r3, [sp, #64]	; 0x40
 800b318:	2300      	movs	r3, #0
 800b31a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800b6c4 <D128_GENERIC+0x3e8>
 800b31e:	9306      	str	r3, [sp, #24]
 800b320:	e17a      	b.n	800b618 <D128_GENERIC+0x33c>
 800b322:	b2d2      	uxtb	r2, r2
 800b324:	9d05      	ldr	r5, [sp, #20]
 800b326:	b214      	sxth	r4, r2
 800b328:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800b32c:	4250      	negs	r0, r2
 800b32e:	eb05 010a 	add.w	r1, r5, sl
 800b332:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b336:	eb01 0800 	add.w	r8, r1, r0
 800b33a:	eb0b 0c04 	add.w	ip, fp, r4
 800b33e:	eb08 070c 	add.w	r7, r8, ip
 800b342:	183b      	adds	r3, r7, r0
 800b344:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b348:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800b34c:	eb0e 0604 	add.w	r6, lr, r4
 800b350:	9307      	str	r3, [sp, #28]
 800b352:	1833      	adds	r3, r6, r0
 800b354:	9305      	str	r3, [sp, #20]
 800b356:	462b      	mov	r3, r5
 800b358:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800b35c:	f8cd a020 	str.w	sl, [sp, #32]
 800b360:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800b364:	f813 c002 	ldrb.w	ip, [r3, r2]
 800b368:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800b36c:	5c3a      	ldrb	r2, [r7, r0]
 800b36e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800b372:	781f      	ldrb	r7, [r3, #0]
 800b374:	9b07      	ldr	r3, [sp, #28]
 800b376:	9d05      	ldr	r5, [sp, #20]
 800b378:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800b37c:	5c09      	ldrb	r1, [r1, r0]
 800b37e:	9709      	str	r7, [sp, #36]	; 0x24
 800b380:	9307      	str	r3, [sp, #28]
 800b382:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800b386:	5c33      	ldrb	r3, [r6, r0]
 800b388:	0412      	lsls	r2, r2, #16
 800b38a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800b38e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800b392:	9d08      	ldr	r5, [sp, #32]
 800b394:	eb06 0a04 	add.w	sl, r6, r4
 800b398:	0409      	lsls	r1, r1, #16
 800b39a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800b39e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800b3a2:	5d36      	ldrb	r6, [r6, r4]
 800b3a4:	9c05      	ldr	r4, [sp, #20]
 800b3a6:	042d      	lsls	r5, r5, #16
 800b3a8:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800b3ac:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800b3b0:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800b3b4:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800b3b8:	eb0a 0c00 	add.w	ip, sl, r0
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800b3c2:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800b3c6:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800b3ca:	9d07      	ldr	r5, [sp, #28]
 800b3cc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800b3d0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800b3d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b3d6:	4458      	add	r0, fp
 800b3d8:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800b3dc:	9005      	str	r0, [sp, #20]
 800b3de:	4439      	add	r1, r7
 800b3e0:	442a      	add	r2, r5
 800b3e2:	44b2      	add	sl, r6
 800b3e4:	1918      	adds	r0, r3, r4
 800b3e6:	b2cb      	uxtb	r3, r1
 800b3e8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b3ec:	9e02      	ldr	r6, [sp, #8]
 800b3ee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b3f2:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800b3f6:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800b3fa:	441e      	add	r6, r3
 800b3fc:	0e09      	lsrs	r1, r1, #24
 800b3fe:	4633      	mov	r3, r6
 800b400:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b404:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800b408:	b2d4      	uxtb	r4, r2
 800b40a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b40e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b412:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800b416:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b41a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b41e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b422:	0e12      	lsrs	r2, r2, #24
 800b424:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800b428:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800b42c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b430:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800b434:	9702      	str	r7, [sp, #8]
 800b436:	b2c2      	uxtb	r2, r0
 800b438:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b43c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800b440:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800b444:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b448:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800b44c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800b450:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b454:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b458:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800b45c:	0e00      	lsrs	r0, r0, #24
 800b45e:	fa5f f68a 	uxtb.w	r6, sl
 800b462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b466:	9309      	str	r3, [sp, #36]	; 0x24
 800b468:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b46c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800b470:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800b474:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800b478:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b47c:	950a      	str	r5, [sp, #40]	; 0x28
 800b47e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800b482:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800b486:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800b48a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b48e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800b492:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b496:	920b      	str	r2, [sp, #44]	; 0x2c
 800b498:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800b49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b49e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800b4a2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b4a6:	9307      	str	r3, [sp, #28]
 800b4a8:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b4ac:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	f8cd c008 	str.w	ip, [sp, #8]
 800b4b6:	4694      	mov	ip, r2
 800b4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ba:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800b4be:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800b4c2:	9a02      	ldr	r2, [sp, #8]
 800b4c4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b4c8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b4cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b4d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4d2:	f8cd a020 	str.w	sl, [sp, #32]
 800b4d6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b4da:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800b4de:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b4e2:	9b07      	ldr	r3, [sp, #28]
 800b4e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b4e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800b4ec:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800b4f0:	9a08      	ldr	r2, [sp, #32]
 800b4f2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b4f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4fa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b4fe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b502:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800b506:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b50a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b50e:	0a96      	lsrs	r6, r2, #10
 800b510:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b514:	9602      	str	r6, [sp, #8]
 800b516:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b51a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800b51e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800b522:	4e53      	ldr	r6, [pc, #332]	; (800b670 <D128_GENERIC+0x394>)
 800b524:	9f03      	ldr	r7, [sp, #12]
 800b526:	fb2c 7606 	smlad	r6, ip, r6, r7
 800b52a:	4f52      	ldr	r7, [pc, #328]	; (800b674 <D128_GENERIC+0x398>)
 800b52c:	fb2a 6607 	smlad	r6, sl, r7, r6
 800b530:	4f51      	ldr	r7, [pc, #324]	; (800b678 <D128_GENERIC+0x39c>)
 800b532:	fb21 6607 	smlad	r6, r1, r7, r6
 800b536:	4f51      	ldr	r7, [pc, #324]	; (800b67c <D128_GENERIC+0x3a0>)
 800b538:	fb24 6607 	smlad	r6, r4, r7, r6
 800b53c:	4f50      	ldr	r7, [pc, #320]	; (800b680 <D128_GENERIC+0x3a4>)
 800b53e:	fb28 6607 	smlad	r6, r8, r7, r6
 800b542:	4f50      	ldr	r7, [pc, #320]	; (800b684 <D128_GENERIC+0x3a8>)
 800b544:	fb20 6607 	smlad	r6, r0, r7, r6
 800b548:	4f4f      	ldr	r7, [pc, #316]	; (800b688 <D128_GENERIC+0x3ac>)
 800b54a:	fb23 6607 	smlad	r6, r3, r7, r6
 800b54e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800b552:	fb25 6607 	smlad	r6, r5, r7, r6
 800b556:	4f4d      	ldr	r7, [pc, #308]	; (800b68c <D128_GENERIC+0x3b0>)
 800b558:	9a04      	ldr	r2, [sp, #16]
 800b55a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800b55e:	4a4c      	ldr	r2, [pc, #304]	; (800b690 <D128_GENERIC+0x3b4>)
 800b560:	fb2a ee02 	smlad	lr, sl, r2, lr
 800b564:	4f4b      	ldr	r7, [pc, #300]	; (800b694 <D128_GENERIC+0x3b8>)
 800b566:	fb21 ee07 	smlad	lr, r1, r7, lr
 800b56a:	4f4b      	ldr	r7, [pc, #300]	; (800b698 <D128_GENERIC+0x3bc>)
 800b56c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b570:	4f4a      	ldr	r7, [pc, #296]	; (800b69c <D128_GENERIC+0x3c0>)
 800b572:	fb28 ee07 	smlad	lr, r8, r7, lr
 800b576:	4f4a      	ldr	r7, [pc, #296]	; (800b6a0 <D128_GENERIC+0x3c4>)
 800b578:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b57c:	4f49      	ldr	r7, [pc, #292]	; (800b6a4 <D128_GENERIC+0x3c8>)
 800b57e:	fb23 e707 	smlad	r7, r3, r7, lr
 800b582:	f8df e144 	ldr.w	lr, [pc, #324]	; 800b6c8 <D128_GENERIC+0x3ec>
 800b586:	fb25 720e 	smlad	r2, r5, lr, r7
 800b58a:	f04f 0b01 	mov.w	fp, #1
 800b58e:	9203      	str	r2, [sp, #12]
 800b590:	fb2c fb0b 	smuad	fp, ip, fp
 800b594:	4f44      	ldr	r7, [pc, #272]	; (800b6a8 <D128_GENERIC+0x3cc>)
 800b596:	fb2a ba07 	smlad	sl, sl, r7, fp
 800b59a:	4f44      	ldr	r7, [pc, #272]	; (800b6ac <D128_GENERIC+0x3d0>)
 800b59c:	fb21 aa07 	smlad	sl, r1, r7, sl
 800b5a0:	4f43      	ldr	r7, [pc, #268]	; (800b6b0 <D128_GENERIC+0x3d4>)
 800b5a2:	fb24 aa07 	smlad	sl, r4, r7, sl
 800b5a6:	4f43      	ldr	r7, [pc, #268]	; (800b6b4 <D128_GENERIC+0x3d8>)
 800b5a8:	fb28 a707 	smlad	r7, r8, r7, sl
 800b5ac:	4a42      	ldr	r2, [pc, #264]	; (800b6b8 <D128_GENERIC+0x3dc>)
 800b5ae:	fb20 7702 	smlad	r7, r0, r2, r7
 800b5b2:	4a42      	ldr	r2, [pc, #264]	; (800b6bc <D128_GENERIC+0x3e0>)
 800b5b4:	fb23 7702 	smlad	r7, r3, r2, r7
 800b5b8:	4b41      	ldr	r3, [pc, #260]	; (800b6c0 <D128_GENERIC+0x3e4>)
 800b5ba:	fb25 7303 	smlad	r3, r5, r3, r7
 800b5be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b5c0:	9304      	str	r3, [sp, #16]
 800b5c2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800b5c6:	b185      	cbz	r5, 800b5ea <D128_GENERIC+0x30e>
 800b5c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b5cc:	960d      	str	r6, [sp, #52]	; 0x34
 800b5ce:	4432      	add	r2, r6
 800b5d0:	1a52      	subs	r2, r2, r1
 800b5d2:	17d1      	asrs	r1, r2, #31
 800b5d4:	fba2 2305 	umull	r2, r3, r2, r5
 800b5d8:	fb05 3301 	mla	r3, r5, r1, r3
 800b5dc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b5e0:	f143 0300 	adc.w	r3, r3, #0
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5e8:	461e      	mov	r6, r3
 800b5ea:	9801      	ldr	r0, [sp, #4]
 800b5ec:	9c06      	ldr	r4, [sp, #24]
 800b5ee:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800b5f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b5f2:	01f6      	lsls	r6, r6, #7
 800b5f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	fbc5 2306 	smlal	r2, r3, r5, r6
 800b5fe:	fb04 f101 	mul.w	r1, r4, r1
 800b602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b604:	109b      	asrs	r3, r3, #2
 800b606:	f303 030f 	ssat	r3, #16, r3
 800b60a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800b60e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800b610:	1c62      	adds	r2, r4, #1
 800b612:	4293      	cmp	r3, r2
 800b614:	9206      	str	r2, [sp, #24]
 800b616:	dd18      	ble.n	800b64a <D128_GENERIC+0x36e>
 800b618:	9b01      	ldr	r3, [sp, #4]
 800b61a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b61c:	2a01      	cmp	r2, #1
 800b61e:	f47f ae80 	bne.w	800b322 <D128_GENERIC+0x46>
 800b622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b624:	9d05      	ldr	r5, [sp, #20]
 800b626:	069b      	lsls	r3, r3, #26
 800b628:	6829      	ldr	r1, [r5, #0]
 800b62a:	686a      	ldr	r2, [r5, #4]
 800b62c:	68a8      	ldr	r0, [r5, #8]
 800b62e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b632:	f105 0410 	add.w	r4, r5, #16
 800b636:	d506      	bpl.n	800b646 <D128_GENERIC+0x36a>
 800b638:	ba49      	rev16	r1, r1
 800b63a:	ba52      	rev16	r2, r2
 800b63c:	ba40      	rev16	r0, r0
 800b63e:	fa9a fa9a 	rev16.w	sl, sl
 800b642:	9405      	str	r4, [sp, #20]
 800b644:	e6cf      	b.n	800b3e6 <D128_GENERIC+0x10a>
 800b646:	9405      	str	r4, [sp, #20]
 800b648:	e6cd      	b.n	800b3e6 <D128_GENERIC+0x10a>
 800b64a:	9a01      	ldr	r2, [sp, #4]
 800b64c:	9904      	ldr	r1, [sp, #16]
 800b64e:	6091      	str	r1, [r2, #8]
 800b650:	9903      	ldr	r1, [sp, #12]
 800b652:	60d1      	str	r1, [r2, #12]
 800b654:	9b02      	ldr	r3, [sp, #8]
 800b656:	61d3      	str	r3, [r2, #28]
 800b658:	4611      	mov	r1, r2
 800b65a:	4613      	mov	r3, r2
 800b65c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b65e:	610a      	str	r2, [r1, #16]
 800b660:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b662:	6159      	str	r1, [r3, #20]
 800b664:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b666:	6199      	str	r1, [r3, #24]
 800b668:	2000      	movs	r0, #0
 800b66a:	b013      	add	sp, #76	; 0x4c
 800b66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b670:	00780069 	.word	0x00780069
 800b674:	005b004e 	.word	0x005b004e
 800b678:	00420037 	.word	0x00420037
 800b67c:	002d0024 	.word	0x002d0024
 800b680:	001c0015 	.word	0x001c0015
 800b684:	000f000a 	.word	0x000f000a
 800b688:	00060003 	.word	0x00060003
 800b68c:	00880096 	.word	0x00880096
 800b690:	00a200ac 	.word	0x00a200ac
 800b694:	00b400ba 	.word	0x00b400ba
 800b698:	00be00c0 	.word	0x00be00c0
 800b69c:	00c000be 	.word	0x00c000be
 800b6a0:	00ba00b4 	.word	0x00ba00b4
 800b6a4:	00ac00a2 	.word	0x00ac00a2
 800b6a8:	00030006 	.word	0x00030006
 800b6ac:	000a000f 	.word	0x000a000f
 800b6b0:	0015001c 	.word	0x0015001c
 800b6b4:	0024002d 	.word	0x0024002d
 800b6b8:	00370042 	.word	0x00370042
 800b6bc:	004e005b 	.word	0x004e005b
 800b6c0:	00690078 	.word	0x00690078
 800b6c4:	20000000 	.word	0x20000000
 800b6c8:	00960088 	.word	0x00960088

0800b6cc <D16_1CH_HTONS_VOL_HP>:
 800b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d0:	4691      	mov	r9, r2
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b6d6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b6da:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	4680      	mov	r8, r0
 800b6e2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800b6e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b6ea:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b6ee:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800b6f2:	9401      	str	r4, [sp, #4]
 800b6f4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b6f8:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800b6fc:	2a00      	cmp	r2, #0
 800b6fe:	d04e      	beq.n	800b79e <D16_1CH_HTONS_VOL_HP+0xd2>
 800b700:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800b7ac <D16_1CH_HTONS_VOL_HP+0xe0>
 800b704:	1e8c      	subs	r4, r1, #2
 800b706:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800b70a:	f858 2b02 	ldr.w	r2, [r8], #2
 800b70e:	ba52      	rev16	r2, r2
 800b710:	b2d6      	uxtb	r6, r2
 800b712:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b716:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800b71a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b71e:	4413      	add	r3, r2
 800b720:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800b724:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800b728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b72c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b730:	0a93      	lsrs	r3, r2, #10
 800b732:	4a1c      	ldr	r2, [pc, #112]	; (800b7a4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800b734:	fb21 5202 	smlad	r2, r1, r2, r5
 800b738:	4d1b      	ldr	r5, [pc, #108]	; (800b7a8 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800b73a:	fb21 f505 	smuad	r5, r1, r5
 800b73e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800b742:	4410      	add	r0, r2
 800b744:	1bc0      	subs	r0, r0, r7
 800b746:	17c7      	asrs	r7, r0, #31
 800b748:	fba0 010e 	umull	r0, r1, r0, lr
 800b74c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b750:	fb0e 1107 	mla	r1, lr, r7, r1
 800b754:	f141 0100 	adc.w	r1, r1, #0
 800b758:	0448      	lsls	r0, r1, #17
 800b75a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b75e:	2700      	movs	r7, #0
 800b760:	fbc0 670a 	smlal	r6, r7, r0, sl
 800b764:	45d8      	cmp	r8, fp
 800b766:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800b76a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800b76e:	4617      	mov	r7, r2
 800b770:	f301 010f 	ssat	r1, #16, r1
 800b774:	f824 1f02 	strh.w	r1, [r4, #2]!
 800b778:	d1c7      	bne.n	800b70a <D16_1CH_HTONS_VOL_HP+0x3e>
 800b77a:	9901      	ldr	r1, [sp, #4]
 800b77c:	f8c9 301c 	str.w	r3, [r9, #28]
 800b780:	9b00      	ldr	r3, [sp, #0]
 800b782:	f8c9 0010 	str.w	r0, [r9, #16]
 800b786:	2000      	movs	r0, #0
 800b788:	f8c9 5008 	str.w	r5, [r9, #8]
 800b78c:	f8c9 100c 	str.w	r1, [r9, #12]
 800b790:	f8c9 2014 	str.w	r2, [r9, #20]
 800b794:	f8c9 3018 	str.w	r3, [r9, #24]
 800b798:	b003      	add	sp, #12
 800b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79e:	463a      	mov	r2, r7
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	e7eb      	b.n	800b77c <D16_1CH_HTONS_VOL_HP+0xb0>
 800b7a4:	00030001 	.word	0x00030001
 800b7a8:	00010003 	.word	0x00010003
 800b7ac:	20000000 	.word	0x20000000

0800b7b0 <D24_1CH_HTONS_VOL_HP>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	b089      	sub	sp, #36	; 0x24
 800b7b6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b7b8:	6996      	ldr	r6, [r2, #24]
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800b7be:	9207      	str	r2, [sp, #28]
 800b7c0:	6915      	ldr	r5, [r2, #16]
 800b7c2:	6954      	ldr	r4, [r2, #20]
 800b7c4:	9606      	str	r6, [sp, #24]
 800b7c6:	6893      	ldr	r3, [r2, #8]
 800b7c8:	69d6      	ldr	r6, [r2, #28]
 800b7ca:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800b7ce:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b7d2:	9a04      	ldr	r2, [sp, #16]
 800b7d4:	9705      	str	r7, [sp, #20]
 800b7d6:	2a00      	cmp	r2, #0
 800b7d8:	d07e      	beq.n	800b8d8 <D24_1CH_HTONS_VOL_HP+0x128>
 800b7da:	f1a1 0b02 	sub.w	fp, r1, #2
 800b7de:	2700      	movs	r7, #0
 800b7e0:	46a8      	mov	r8, r5
 800b7e2:	f8cd b004 	str.w	fp, [sp, #4]
 800b7e6:	4655      	mov	r5, sl
 800b7e8:	46e3      	mov	fp, ip
 800b7ea:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800b8e4 <D24_1CH_HTONS_VOL_HP+0x134>
 800b7ee:	46ba      	mov	sl, r7
 800b7f0:	469c      	mov	ip, r3
 800b7f2:	e055      	b.n	800b8a0 <D24_1CH_HTONS_VOL_HP+0xf0>
 800b7f4:	7802      	ldrb	r2, [r0, #0]
 800b7f6:	78c3      	ldrb	r3, [r0, #3]
 800b7f8:	7841      	ldrb	r1, [r0, #1]
 800b7fa:	0212      	lsls	r2, r2, #8
 800b7fc:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800b800:	440b      	add	r3, r1
 800b802:	3002      	adds	r0, #2
 800b804:	b2d9      	uxtb	r1, r3
 800b806:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b80a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800b80e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800b812:	0c1b      	lsrs	r3, r3, #16
 800b814:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b818:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800b81c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800b820:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800b824:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800b828:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800b82c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b830:	4a2a      	ldr	r2, [pc, #168]	; (800b8dc <D24_1CH_HTONS_VOL_HP+0x12c>)
 800b832:	fb23 b102 	smlad	r1, r3, r2, fp
 800b836:	4a2a      	ldr	r2, [pc, #168]	; (800b8e0 <D24_1CH_HTONS_VOL_HP+0x130>)
 800b838:	fb23 cb02 	smlad	fp, r3, r2, ip
 800b83c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800b840:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800b844:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800b848:	2201      	movs	r2, #1
 800b84a:	fb23 f702 	smuad	r7, r3, r2
 800b84e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800b852:	eb01 0208 	add.w	r2, r1, r8
 800b856:	1b12      	subs	r2, r2, r4
 800b858:	17d4      	asrs	r4, r2, #31
 800b85a:	fba2 2305 	umull	r2, r3, r2, r5
 800b85e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b862:	fb05 3304 	mla	r3, r5, r4, r3
 800b866:	f143 0300 	adc.w	r3, r3, #0
 800b86a:	9c05      	ldr	r4, [sp, #20]
 800b86c:	03da      	lsls	r2, r3, #15
 800b86e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b872:	f04f 0900 	mov.w	r9, #0
 800b876:	fbc4 8902 	smlal	r8, r9, r4, r2
 800b87a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b87e:	9a01      	ldr	r2, [sp, #4]
 800b880:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	109b      	asrs	r3, r3, #2
 800b888:	f303 030f 	ssat	r3, #16, r3
 800b88c:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b890:	9b04      	ldr	r3, [sp, #16]
 800b892:	9201      	str	r2, [sp, #4]
 800b894:	f10a 0a01 	add.w	sl, sl, #1
 800b898:	459a      	cmp	sl, r3
 800b89a:	44bc      	add	ip, r7
 800b89c:	460c      	mov	r4, r1
 800b89e:	d00b      	beq.n	800b8b8 <D24_1CH_HTONS_VOL_HP+0x108>
 800b8a0:	f01a 0f01 	tst.w	sl, #1
 800b8a4:	d0a6      	beq.n	800b7f4 <D24_1CH_HTONS_VOL_HP+0x44>
 800b8a6:	78c2      	ldrb	r2, [r0, #3]
 800b8a8:	7883      	ldrb	r3, [r0, #2]
 800b8aa:	f810 1b04 	ldrb.w	r1, [r0], #4
 800b8ae:	0212      	lsls	r2, r2, #8
 800b8b0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800b8b4:	440b      	add	r3, r1
 800b8b6:	e7a5      	b.n	800b804 <D24_1CH_HTONS_VOL_HP+0x54>
 800b8b8:	4663      	mov	r3, ip
 800b8ba:	4645      	mov	r5, r8
 800b8bc:	46dc      	mov	ip, fp
 800b8be:	9807      	ldr	r0, [sp, #28]
 800b8c0:	6141      	str	r1, [r0, #20]
 800b8c2:	9906      	ldr	r1, [sp, #24]
 800b8c4:	6083      	str	r3, [r0, #8]
 800b8c6:	f8c0 c00c 	str.w	ip, [r0, #12]
 800b8ca:	61c6      	str	r6, [r0, #28]
 800b8cc:	6105      	str	r5, [r0, #16]
 800b8ce:	6181      	str	r1, [r0, #24]
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	b009      	add	sp, #36	; 0x24
 800b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	4621      	mov	r1, r4
 800b8da:	e7f0      	b.n	800b8be <D24_1CH_HTONS_VOL_HP+0x10e>
 800b8dc:	00030001 	.word	0x00030001
 800b8e0:	00060007 	.word	0x00060007
 800b8e4:	20000000 	.word	0x20000000

0800b8e8 <D32_1CH_HTONS_VOL_HP>:
 800b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ec:	4692      	mov	sl, r2
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b8f2:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b8f6:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	f8da 4010 	ldr.w	r4, [sl, #16]
 800b900:	f8da 8014 	ldr.w	r8, [sl, #20]
 800b904:	f8da 601c 	ldr.w	r6, [sl, #28]
 800b908:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b90c:	f8da e00c 	ldr.w	lr, [sl, #12]
 800b910:	9501      	str	r5, [sp, #4]
 800b912:	f8da c020 	ldr.w	ip, [sl, #32]
 800b916:	2a00      	cmp	r2, #0
 800b918:	d07b      	beq.n	800ba12 <D32_1CH_HTONS_VOL_HP+0x12a>
 800b91a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b91e:	4f3e      	ldr	r7, [pc, #248]	; (800ba18 <D32_1CH_HTONS_VOL_HP+0x130>)
 800b920:	f8cd c00c 	str.w	ip, [sp, #12]
 800b924:	9202      	str	r2, [sp, #8]
 800b926:	460d      	mov	r5, r1
 800b928:	46a1      	mov	r9, r4
 800b92a:	4684      	mov	ip, r0
 800b92c:	f8cd a014 	str.w	sl, [sp, #20]
 800b930:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b934:	ba49      	rev16	r1, r1
 800b936:	b2c8      	uxtb	r0, r1
 800b938:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800b93c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800b940:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800b944:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b948:	0e09      	lsrs	r1, r1, #24
 800b94a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800b94e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800b952:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800b956:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800b95a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800b95e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800b962:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b966:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800b96a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b96e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b972:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800b976:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800b97a:	4a28      	ldr	r2, [pc, #160]	; (800ba1c <D32_1CH_HTONS_VOL_HP+0x134>)
 800b97c:	fb20 e202 	smlad	r2, r0, r2, lr
 800b980:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b984:	fb2a 2101 	smlad	r1, sl, r1, r2
 800b988:	4a25      	ldr	r2, [pc, #148]	; (800ba20 <D32_1CH_HTONS_VOL_HP+0x138>)
 800b98a:	fb20 3302 	smlad	r3, r0, r2, r3
 800b98e:	4a25      	ldr	r2, [pc, #148]	; (800ba24 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800b990:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800b994:	2301      	movs	r3, #1
 800b996:	fb20 f003 	smuad	r0, r0, r3
 800b99a:	4b23      	ldr	r3, [pc, #140]	; (800ba28 <D32_1CH_HTONS_VOL_HP+0x140>)
 800b99c:	fb2a 0303 	smlad	r3, sl, r3, r0
 800b9a0:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800b9a4:	9c03      	ldr	r4, [sp, #12]
 800b9a6:	eb02 0009 	add.w	r0, r2, r9
 800b9aa:	eba0 0008 	sub.w	r0, r0, r8
 800b9ae:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800b9b2:	fba0 0104 	umull	r0, r1, r0, r4
 800b9b6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b9ba:	fb04 110b 	mla	r1, r4, fp, r1
 800b9be:	f141 0100 	adc.w	r1, r1, #0
 800b9c2:	9c01      	ldr	r4, [sp, #4]
 800b9c4:	0388      	lsls	r0, r1, #14
 800b9c6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b9ca:	f04f 0900 	mov.w	r9, #0
 800b9ce:	fbc0 8904 	smlal	r8, r9, r0, r4
 800b9d2:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800b9d6:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800b9da:	f300 000f 	ssat	r0, #16, r0
 800b9de:	9902      	ldr	r1, [sp, #8]
 800b9e0:	f825 0b02 	strh.w	r0, [r5], #2
 800b9e4:	428d      	cmp	r5, r1
 800b9e6:	4690      	mov	r8, r2
 800b9e8:	d1a2      	bne.n	800b930 <D32_1CH_HTONS_VOL_HP+0x48>
 800b9ea:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b9ee:	464c      	mov	r4, r9
 800b9f0:	f8ca 3008 	str.w	r3, [sl, #8]
 800b9f4:	9b04      	ldr	r3, [sp, #16]
 800b9f6:	f8ca e00c 	str.w	lr, [sl, #12]
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	f8ca 601c 	str.w	r6, [sl, #28]
 800ba00:	f8ca 4010 	str.w	r4, [sl, #16]
 800ba04:	f8ca 2014 	str.w	r2, [sl, #20]
 800ba08:	f8ca 3018 	str.w	r3, [sl, #24]
 800ba0c:	b007      	add	sp, #28
 800ba0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba12:	4642      	mov	r2, r8
 800ba14:	e7ec      	b.n	800b9f0 <D32_1CH_HTONS_VOL_HP+0x108>
 800ba16:	bf00      	nop
 800ba18:	20000000 	.word	0x20000000
 800ba1c:	00060003 	.word	0x00060003
 800ba20:	000a000c 	.word	0x000a000c
 800ba24:	000c000a 	.word	0x000c000a
 800ba28:	00030006 	.word	0x00030006

0800ba2c <D48_1CH_HTONS_VOL_HP>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	4613      	mov	r3, r2
 800ba32:	461c      	mov	r4, r3
 800ba34:	b087      	sub	sp, #28
 800ba36:	4625      	mov	r5, r4
 800ba38:	4626      	mov	r6, r4
 800ba3a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800ba3c:	9205      	str	r2, [sp, #20]
 800ba3e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800ba40:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800ba44:	9501      	str	r5, [sp, #4]
 800ba46:	4680      	mov	r8, r0
 800ba48:	6a35      	ldr	r5, [r6, #32]
 800ba4a:	6918      	ldr	r0, [r3, #16]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	9304      	str	r3, [sp, #16]
 800ba50:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	9502      	str	r5, [sp, #8]
 800ba58:	68e4      	ldr	r4, [r4, #12]
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	f000 808c 	beq.w	800bb78 <D48_1CH_HTONS_VOL_HP+0x14c>
 800ba60:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ba64:	4d45      	ldr	r5, [pc, #276]	; (800bb7c <D48_1CH_HTONS_VOL_HP+0x150>)
 800ba66:	9203      	str	r2, [sp, #12]
 800ba68:	468c      	mov	ip, r1
 800ba6a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800ba6e:	f108 0806 	add.w	r8, r8, #6
 800ba72:	ba52      	rev16	r2, r2
 800ba74:	ba76      	rev16	r6, r6
 800ba76:	b2d7      	uxtb	r7, r2
 800ba78:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ba7c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800ba80:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800ba84:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800ba88:	0e12      	lsrs	r2, r2, #24
 800ba8a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800ba8e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800ba92:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ba96:	fa5f fb86 	uxtb.w	fp, r6
 800ba9a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800ba9e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800baa2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800baa6:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800baaa:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800baae:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800bab2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800bab6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800baba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800babe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bac2:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800bac6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800baca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bace:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bad2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800bad6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800bada:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800bade:	4a28      	ldr	r2, [pc, #160]	; (800bb80 <D48_1CH_HTONS_VOL_HP+0x154>)
 800bae0:	fb2a 4202 	smlad	r2, sl, r2, r4
 800bae4:	4927      	ldr	r1, [pc, #156]	; (800bb84 <D48_1CH_HTONS_VOL_HP+0x158>)
 800bae6:	fb27 2201 	smlad	r2, r7, r1, r2
 800baea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800baee:	fb26 2201 	smlad	r2, r6, r1, r2
 800baf2:	4925      	ldr	r1, [pc, #148]	; (800bb88 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800baf4:	fb2a 3401 	smlad	r4, sl, r1, r3
 800baf8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800bafc:	fb27 4403 	smlad	r4, r7, r3, r4
 800bb00:	4b22      	ldr	r3, [pc, #136]	; (800bb8c <D48_1CH_HTONS_VOL_HP+0x160>)
 800bb02:	fb26 4403 	smlad	r4, r6, r3, r4
 800bb06:	2101      	movs	r1, #1
 800bb08:	fb2a fa01 	smuad	sl, sl, r1
 800bb0c:	4b20      	ldr	r3, [pc, #128]	; (800bb90 <D48_1CH_HTONS_VOL_HP+0x164>)
 800bb0e:	fb27 a703 	smlad	r7, r7, r3, sl
 800bb12:	4b20      	ldr	r3, [pc, #128]	; (800bb94 <D48_1CH_HTONS_VOL_HP+0x168>)
 800bb14:	fb26 7303 	smlad	r3, r6, r3, r7
 800bb18:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800bb1c:	9e02      	ldr	r6, [sp, #8]
 800bb1e:	9f01      	ldr	r7, [sp, #4]
 800bb20:	4410      	add	r0, r2
 800bb22:	eba0 0009 	sub.w	r0, r0, r9
 800bb26:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800bb2a:	fba0 0106 	umull	r0, r1, r0, r6
 800bb2e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800bb32:	fb06 110a 	mla	r1, r6, sl, r1
 800bb36:	f141 0100 	adc.w	r1, r1, #0
 800bb3a:	0308      	lsls	r0, r1, #12
 800bb3c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800bb40:	f04f 0a00 	mov.w	sl, #0
 800bb44:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800bb48:	4657      	mov	r7, sl
 800bb4a:	10b8      	asrs	r0, r7, #2
 800bb4c:	f300 000f 	ssat	r0, #16, r0
 800bb50:	f82c 0b02 	strh.w	r0, [ip], #2
 800bb54:	0048      	lsls	r0, r1, #1
 800bb56:	9903      	ldr	r1, [sp, #12]
 800bb58:	458c      	cmp	ip, r1
 800bb5a:	4691      	mov	r9, r2
 800bb5c:	d185      	bne.n	800ba6a <D48_1CH_HTONS_VOL_HP+0x3e>
 800bb5e:	9d05      	ldr	r5, [sp, #20]
 800bb60:	616a      	str	r2, [r5, #20]
 800bb62:	9a04      	ldr	r2, [sp, #16]
 800bb64:	6128      	str	r0, [r5, #16]
 800bb66:	2000      	movs	r0, #0
 800bb68:	60ab      	str	r3, [r5, #8]
 800bb6a:	60ec      	str	r4, [r5, #12]
 800bb6c:	f8c5 e01c 	str.w	lr, [r5, #28]
 800bb70:	61aa      	str	r2, [r5, #24]
 800bb72:	b007      	add	sp, #28
 800bb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb78:	464a      	mov	r2, r9
 800bb7a:	e7f0      	b.n	800bb5e <D48_1CH_HTONS_VOL_HP+0x132>
 800bb7c:	20000000 	.word	0x20000000
 800bb80:	000f000a 	.word	0x000f000a
 800bb84:	00060003 	.word	0x00060003
 800bb88:	00150019 	.word	0x00150019
 800bb8c:	00190015 	.word	0x00190015
 800bb90:	00030006 	.word	0x00030006
 800bb94:	000a000f 	.word	0x000a000f

0800bb98 <D64_1CH_HTONS_VOL_HP>:
 800bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9c:	b089      	sub	sp, #36	; 0x24
 800bb9e:	4614      	mov	r4, r2
 800bba0:	9207      	str	r2, [sp, #28]
 800bba2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bba4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800bba8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800bbac:	6992      	ldr	r2, [r2, #24]
 800bbae:	9206      	str	r2, [sp, #24]
 800bbb0:	68e2      	ldr	r2, [r4, #12]
 800bbb2:	9201      	str	r2, [sp, #4]
 800bbb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bbb6:	9203      	str	r2, [sp, #12]
 800bbb8:	6a22      	ldr	r2, [r4, #32]
 800bbba:	69e5      	ldr	r5, [r4, #28]
 800bbbc:	68a6      	ldr	r6, [r4, #8]
 800bbbe:	9204      	str	r2, [sp, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 80b0 	beq.w	800bd26 <D64_1CH_HTONS_VOL_HP+0x18e>
 800bbc6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800bbca:	4f58      	ldr	r7, [pc, #352]	; (800bd2c <D64_1CH_HTONS_VOL_HP+0x194>)
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	9102      	str	r1, [sp, #8]
 800bbd0:	f850 2b08 	ldr.w	r2, [r0], #8
 800bbd4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bbd8:	ba52      	rev16	r2, r2
 800bbda:	fa93 f993 	rev16.w	r9, r3
 800bbde:	b2d4      	uxtb	r4, r2
 800bbe0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800bbe4:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800bbe8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bbec:	9901      	ldr	r1, [sp, #4]
 800bbee:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800bbf2:	0e12      	lsrs	r2, r2, #24
 800bbf4:	44ab      	add	fp, r5
 800bbf6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bbfa:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800bbfe:	fa5f f289 	uxtb.w	r2, r9
 800bc02:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800bc06:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800bc0a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800bc0e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bc12:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bc16:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800bc1a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800bc1e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800bc22:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800bc26:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800bc2a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800bc2e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800bc32:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800bc36:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800bc3a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bc3e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bc42:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bc46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc4a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bc4e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800bc52:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bc56:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800bc5a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bc5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800bc62:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800bc66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bc6a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800bc6e:	4b30      	ldr	r3, [pc, #192]	; (800bd30 <D64_1CH_HTONS_VOL_HP+0x198>)
 800bc70:	fb2b 1303 	smlad	r3, fp, r3, r1
 800bc74:	492f      	ldr	r1, [pc, #188]	; (800bd34 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800bc76:	fb24 3301 	smlad	r3, r4, r1, r3
 800bc7a:	492f      	ldr	r1, [pc, #188]	; (800bd38 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800bc7c:	fb22 3301 	smlad	r3, r2, r1, r3
 800bc80:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800bc84:	fb2e 390a 	smlad	r9, lr, sl, r3
 800bc88:	4b2c      	ldr	r3, [pc, #176]	; (800bd3c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800bc8a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800bc8e:	fb2e 6613 	smladx	r6, lr, r3, r6
 800bc92:	4b2b      	ldr	r3, [pc, #172]	; (800bd40 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800bc94:	fb24 6603 	smlad	r6, r4, r3, r6
 800bc98:	fb22 6313 	smladx	r3, r2, r3, r6
 800bc9c:	f04f 0a01 	mov.w	sl, #1
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	fb2b fb0a 	smuad	fp, fp, sl
 800bca6:	4b27      	ldr	r3, [pc, #156]	; (800bd44 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800bca8:	fb24 ba03 	smlad	sl, r4, r3, fp
 800bcac:	4b26      	ldr	r3, [pc, #152]	; (800bd48 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800bcae:	fb22 a203 	smlad	r2, r2, r3, sl
 800bcb2:	4b26      	ldr	r3, [pc, #152]	; (800bd4c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800bcb4:	fb2e 2603 	smlad	r6, lr, r3, r2
 800bcb8:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800bcbc:	eb0a 020c 	add.w	r2, sl, ip
 800bcc0:	9c04      	ldr	r4, [sp, #16]
 800bcc2:	9903      	ldr	r1, [sp, #12]
 800bcc4:	eba2 0208 	sub.w	r2, r2, r8
 800bcc8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bccc:	fba2 2304 	umull	r2, r3, r2, r4
 800bcd0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bcd4:	fb04 3309 	mla	r3, r4, r9, r3
 800bcd8:	f143 0300 	adc.w	r3, r3, #0
 800bcdc:	02da      	lsls	r2, r3, #11
 800bcde:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bce2:	f04f 0900 	mov.w	r9, #0
 800bce6:	fbc1 8902 	smlal	r8, r9, r1, r2
 800bcea:	9902      	ldr	r1, [sp, #8]
 800bcec:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800bcf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800bcf4:	f302 020f 	ssat	r2, #16, r2
 800bcf8:	9b05      	ldr	r3, [sp, #20]
 800bcfa:	f821 2b02 	strh.w	r2, [r1], #2
 800bcfe:	4299      	cmp	r1, r3
 800bd00:	9102      	str	r1, [sp, #8]
 800bd02:	46d0      	mov	r8, sl
 800bd04:	f47f af64 	bne.w	800bbd0 <D64_1CH_HTONS_VOL_HP+0x38>
 800bd08:	9a07      	ldr	r2, [sp, #28]
 800bd0a:	9901      	ldr	r1, [sp, #4]
 800bd0c:	60d1      	str	r1, [r2, #12]
 800bd0e:	9906      	ldr	r1, [sp, #24]
 800bd10:	6096      	str	r6, [r2, #8]
 800bd12:	2000      	movs	r0, #0
 800bd14:	61d5      	str	r5, [r2, #28]
 800bd16:	f8c2 c010 	str.w	ip, [r2, #16]
 800bd1a:	f8c2 a014 	str.w	sl, [r2, #20]
 800bd1e:	6191      	str	r1, [r2, #24]
 800bd20:	b009      	add	sp, #36	; 0x24
 800bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd26:	46c2      	mov	sl, r8
 800bd28:	4622      	mov	r2, r4
 800bd2a:	e7ee      	b.n	800bd0a <D64_1CH_HTONS_VOL_HP+0x172>
 800bd2c:	20000000 	.word	0x20000000
 800bd30:	001c0015 	.word	0x001c0015
 800bd34:	000f000a 	.word	0x000f000a
 800bd38:	00060003 	.word	0x00060003
 800bd3c:	0024002a 	.word	0x0024002a
 800bd40:	002e0030 	.word	0x002e0030
 800bd44:	00030006 	.word	0x00030006
 800bd48:	000a000f 	.word	0x000a000f
 800bd4c:	0015001c 	.word	0x0015001c

0800bd50 <D80_1CH_HTONS_VOL_HP>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	4613      	mov	r3, r2
 800bd56:	b089      	sub	sp, #36	; 0x24
 800bd58:	4686      	mov	lr, r0
 800bd5a:	6918      	ldr	r0, [r3, #16]
 800bd5c:	9000      	str	r0, [sp, #0]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	461c      	mov	r4, r3
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	9302      	str	r3, [sp, #8]
 800bd66:	6983      	ldr	r3, [r0, #24]
 800bd68:	9306      	str	r3, [sp, #24]
 800bd6a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800bd6e:	69c3      	ldr	r3, [r0, #28]
 800bd70:	68c0      	ldr	r0, [r0, #12]
 800bd72:	9207      	str	r2, [sp, #28]
 800bd74:	9001      	str	r0, [sp, #4]
 800bd76:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800bd78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bd7a:	9003      	str	r0, [sp, #12]
 800bd7c:	6a20      	ldr	r0, [r4, #32]
 800bd7e:	9004      	str	r0, [sp, #16]
 800bd80:	2a00      	cmp	r2, #0
 800bd82:	f000 80d2 	beq.w	800bf2a <D80_1CH_HTONS_VOL_HP+0x1da>
 800bd86:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bd8a:	4869      	ldr	r0, [pc, #420]	; (800bf30 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800bd8c:	9205      	str	r2, [sp, #20]
 800bd8e:	461c      	mov	r4, r3
 800bd90:	f8de 5000 	ldr.w	r5, [lr]
 800bd94:	f8de 2004 	ldr.w	r2, [lr, #4]
 800bd98:	f8de 3008 	ldr.w	r3, [lr, #8]
 800bd9c:	f10e 0e0a 	add.w	lr, lr, #10
 800bda0:	ba6d      	rev16	r5, r5
 800bda2:	ba52      	rev16	r2, r2
 800bda4:	fa93 fb93 	rev16.w	fp, r3
 800bda8:	b2ee      	uxtb	r6, r5
 800bdaa:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800bdae:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800bdb2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bdb6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800bdba:	eb04 0a07 	add.w	sl, r4, r7
 800bdbe:	0e2d      	lsrs	r5, r5, #24
 800bdc0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800bdc4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800bdc8:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800bdcc:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800bdd0:	b2d5      	uxtb	r5, r2
 800bdd2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800bdd6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800bdda:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800bdde:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800bde2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800bde6:	0e12      	lsrs	r2, r2, #24
 800bde8:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800bdec:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800bdf0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800bdf4:	fa5f f48b 	uxtb.w	r4, fp
 800bdf8:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800bdfc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800be00:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800be04:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800be08:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800be0c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800be10:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800be14:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800be18:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800be1c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800be20:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800be24:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800be28:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800be2c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800be30:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800be34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be38:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800be3c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800be40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800be44:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800be48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800be4c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800be50:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800be54:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800be58:	4d36      	ldr	r5, [pc, #216]	; (800bf34 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800be5a:	9f01      	ldr	r7, [sp, #4]
 800be5c:	fb23 7505 	smlad	r5, r3, r5, r7
 800be60:	4f35      	ldr	r7, [pc, #212]	; (800bf38 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800be62:	fb29 5507 	smlad	r5, r9, r7, r5
 800be66:	4f35      	ldr	r7, [pc, #212]	; (800bf3c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800be68:	fb28 5507 	smlad	r5, r8, r7, r5
 800be6c:	4f34      	ldr	r7, [pc, #208]	; (800bf40 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800be6e:	fb22 5507 	smlad	r5, r2, r7, r5
 800be72:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800be76:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800be7a:	4d32      	ldr	r5, [pc, #200]	; (800bf44 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800be7c:	fb23 cc05 	smlad	ip, r3, r5, ip
 800be80:	4d31      	ldr	r5, [pc, #196]	; (800bf48 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800be82:	fb29 cc05 	smlad	ip, r9, r5, ip
 800be86:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800be8a:	fb28 c505 	smlad	r5, r8, r5, ip
 800be8e:	4f2f      	ldr	r7, [pc, #188]	; (800bf4c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800be90:	fb22 5507 	smlad	r5, r2, r7, r5
 800be94:	4f2e      	ldr	r7, [pc, #184]	; (800bf50 <D80_1CH_HTONS_VOL_HP+0x200>)
 800be96:	fb26 5507 	smlad	r5, r6, r7, r5
 800be9a:	f04f 0a01 	mov.w	sl, #1
 800be9e:	9501      	str	r5, [sp, #4]
 800bea0:	fb23 fa0a 	smuad	sl, r3, sl
 800bea4:	4b2b      	ldr	r3, [pc, #172]	; (800bf54 <D80_1CH_HTONS_VOL_HP+0x204>)
 800bea6:	fb29 a903 	smlad	r9, r9, r3, sl
 800beaa:	4d2b      	ldr	r5, [pc, #172]	; (800bf58 <D80_1CH_HTONS_VOL_HP+0x208>)
 800beac:	fb28 9805 	smlad	r8, r8, r5, r9
 800beb0:	4d2a      	ldr	r5, [pc, #168]	; (800bf5c <D80_1CH_HTONS_VOL_HP+0x20c>)
 800beb2:	fb22 8205 	smlad	r2, r2, r5, r8
 800beb6:	4b2a      	ldr	r3, [pc, #168]	; (800bf60 <D80_1CH_HTONS_VOL_HP+0x210>)
 800beb8:	fb26 2c03 	smlad	ip, r6, r3, r2
 800bebc:	9b00      	ldr	r3, [sp, #0]
 800bebe:	9d04      	ldr	r5, [sp, #16]
 800bec0:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800bec4:	4453      	add	r3, sl
 800bec6:	461a      	mov	r2, r3
 800bec8:	9b02      	ldr	r3, [sp, #8]
 800beca:	f8cd a008 	str.w	sl, [sp, #8]
 800bece:	1ad2      	subs	r2, r2, r3
 800bed0:	17d7      	asrs	r7, r2, #31
 800bed2:	fba2 2305 	umull	r2, r3, r2, r5
 800bed6:	fb05 3307 	mla	r3, r5, r7, r3
 800beda:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bede:	f143 0300 	adc.w	r3, r3, #0
 800bee2:	9d03      	ldr	r5, [sp, #12]
 800bee4:	029a      	lsls	r2, r3, #10
 800bee6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800beea:	2700      	movs	r7, #0
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	fbc5 6702 	smlal	r6, r7, r5, r2
 800bef2:	10ba      	asrs	r2, r7, #2
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	f302 020f 	ssat	r2, #16, r2
 800befa:	9b05      	ldr	r3, [sp, #20]
 800befc:	f821 2b02 	strh.w	r2, [r1], #2
 800bf00:	4299      	cmp	r1, r3
 800bf02:	f47f af45 	bne.w	800bd90 <D80_1CH_HTONS_VOL_HP+0x40>
 800bf06:	4623      	mov	r3, r4
 800bf08:	9907      	ldr	r1, [sp, #28]
 800bf0a:	9801      	ldr	r0, [sp, #4]
 800bf0c:	60c8      	str	r0, [r1, #12]
 800bf0e:	9a00      	ldr	r2, [sp, #0]
 800bf10:	f8c1 c008 	str.w	ip, [r1, #8]
 800bf14:	4608      	mov	r0, r1
 800bf16:	61cb      	str	r3, [r1, #28]
 800bf18:	610a      	str	r2, [r1, #16]
 800bf1a:	f8c1 a014 	str.w	sl, [r1, #20]
 800bf1e:	9906      	ldr	r1, [sp, #24]
 800bf20:	6181      	str	r1, [r0, #24]
 800bf22:	2000      	movs	r0, #0
 800bf24:	b009      	add	sp, #36	; 0x24
 800bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800bf2e:	e7eb      	b.n	800bf08 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800bf30:	20000000 	.word	0x20000000
 800bf34:	002d0024 	.word	0x002d0024
 800bf38:	001c0015 	.word	0x001c0015
 800bf3c:	000f000a 	.word	0x000f000a
 800bf40:	00060003 	.word	0x00060003
 800bf44:	0037003f 	.word	0x0037003f
 800bf48:	00450049 	.word	0x00450049
 800bf4c:	00490045 	.word	0x00490045
 800bf50:	003f0037 	.word	0x003f0037
 800bf54:	00030006 	.word	0x00030006
 800bf58:	000a000f 	.word	0x000a000f
 800bf5c:	0015001c 	.word	0x0015001c
 800bf60:	0024002d 	.word	0x0024002d

0800bf64 <D128_1CH_HTONS_VOL_HP>:
 800bf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	b093      	sub	sp, #76	; 0x4c
 800bf6a:	4614      	mov	r4, r2
 800bf6c:	9211      	str	r2, [sp, #68]	; 0x44
 800bf6e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bf70:	6912      	ldr	r2, [r2, #16]
 800bf72:	9203      	str	r2, [sp, #12]
 800bf74:	4622      	mov	r2, r4
 800bf76:	4615      	mov	r5, r2
 800bf78:	6964      	ldr	r4, [r4, #20]
 800bf7a:	9406      	str	r4, [sp, #24]
 800bf7c:	4614      	mov	r4, r2
 800bf7e:	6992      	ldr	r2, [r2, #24]
 800bf80:	9210      	str	r2, [sp, #64]	; 0x40
 800bf82:	68ea      	ldr	r2, [r5, #12]
 800bf84:	9204      	str	r2, [sp, #16]
 800bf86:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800bf88:	69e6      	ldr	r6, [r4, #28]
 800bf8a:	920d      	str	r2, [sp, #52]	; 0x34
 800bf8c:	68a4      	ldr	r4, [r4, #8]
 800bf8e:	6a2a      	ldr	r2, [r5, #32]
 800bf90:	9405      	str	r4, [sp, #20]
 800bf92:	920e      	str	r2, [sp, #56]	; 0x38
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 8145 	beq.w	800c224 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800bf9a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800bf9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfa0:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800c280 <D128_1CH_HTONS_VOL_HP+0x31c>
 800bfa4:	9107      	str	r1, [sp, #28]
 800bfa6:	f100 0310 	add.w	r3, r0, #16
 800bfaa:	4699      	mov	r9, r3
 800bfac:	f1a9 0110 	sub.w	r1, r9, #16
 800bfb0:	c90e      	ldmia	r1, {r1, r2, r3}
 800bfb2:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800bfb6:	ba49      	rev16	r1, r1
 800bfb8:	ba52      	rev16	r2, r2
 800bfba:	ba5b      	rev16	r3, r3
 800bfbc:	fa90 fa90 	rev16.w	sl, r0
 800bfc0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800bfc4:	b2cc      	uxtb	r4, r1
 800bfc6:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800bfca:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800bfce:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800bfd2:	0e09      	lsrs	r1, r1, #24
 800bfd4:	4426      	add	r6, r4
 800bfd6:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800bfda:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800bfde:	b2d0      	uxtb	r0, r2
 800bfe0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800bfe4:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800bfe8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bfec:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800bff0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800bff4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800bff8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800bffc:	0e12      	lsrs	r2, r2, #24
 800bffe:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800c002:	9701      	str	r7, [sp, #4]
 800c004:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800c008:	4627      	mov	r7, r4
 800c00a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800c00e:	9702      	str	r7, [sp, #8]
 800c010:	b2da      	uxtb	r2, r3
 800c012:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800c016:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800c01a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800c01e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c022:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800c026:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c02a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800c02e:	0e1b      	lsrs	r3, r3, #24
 800c030:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800c034:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c038:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800c03c:	fa5f f38a 	uxtb.w	r3, sl
 800c040:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c044:	960a      	str	r6, [sp, #40]	; 0x28
 800c046:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800c04a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800c04e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c052:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800c056:	950b      	str	r5, [sp, #44]	; 0x2c
 800c058:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800c05c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800c060:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800c064:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c068:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800c06c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800c070:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800c074:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800c078:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800c07c:	9308      	str	r3, [sp, #32]
 800c07e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800c082:	9b01      	ldr	r3, [sp, #4]
 800c084:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800c088:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c08c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800c090:	9b02      	ldr	r3, [sp, #8]
 800c092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c096:	9302      	str	r3, [sp, #8]
 800c098:	9b08      	ldr	r3, [sp, #32]
 800c09a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c09e:	9308      	str	r3, [sp, #32]
 800c0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c0a6:	950c      	str	r5, [sp, #48]	; 0x30
 800c0a8:	461d      	mov	r5, r3
 800c0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c0b0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c0b4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800c0b8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	9b02      	ldr	r3, [sp, #8]
 800c0c0:	9202      	str	r2, [sp, #8]
 800c0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0c6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c0ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c0ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c0d2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c0d6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800c0da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c0de:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800c0e2:	9b08      	ldr	r3, [sp, #32]
 800c0e4:	9f01      	ldr	r7, [sp, #4]
 800c0e6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c0ea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c0ee:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c0f2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c0f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c0fa:	46be      	mov	lr, r7
 800c0fc:	0a96      	lsrs	r6, r2, #10
 800c0fe:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800c102:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c106:	4f49      	ldr	r7, [pc, #292]	; (800c22c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c108:	9a04      	ldr	r2, [sp, #16]
 800c10a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800c10e:	4a48      	ldr	r2, [pc, #288]	; (800c230 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800c110:	fb2a ee02 	smlad	lr, sl, r2, lr
 800c114:	4a47      	ldr	r2, [pc, #284]	; (800c234 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800c116:	fb21 ee02 	smlad	lr, r1, r2, lr
 800c11a:	4a47      	ldr	r2, [pc, #284]	; (800c238 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800c11c:	fb24 ee02 	smlad	lr, r4, r2, lr
 800c120:	4a46      	ldr	r2, [pc, #280]	; (800c23c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800c122:	9f02      	ldr	r7, [sp, #8]
 800c124:	fb27 ee02 	smlad	lr, r7, r2, lr
 800c128:	4a45      	ldr	r2, [pc, #276]	; (800c240 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800c12a:	fb20 ee02 	smlad	lr, r0, r2, lr
 800c12e:	4a45      	ldr	r2, [pc, #276]	; (800c244 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800c130:	fb23 e702 	smlad	r7, r3, r2, lr
 800c134:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800c138:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800c13c:	9f01      	ldr	r7, [sp, #4]
 800c13e:	4a42      	ldr	r2, [pc, #264]	; (800c248 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800c140:	46bc      	mov	ip, r7
 800c142:	9f05      	ldr	r7, [sp, #20]
 800c144:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800c148:	4a40      	ldr	r2, [pc, #256]	; (800c24c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800c14a:	fb2a cc02 	smlad	ip, sl, r2, ip
 800c14e:	4f40      	ldr	r7, [pc, #256]	; (800c250 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800c150:	fb21 cc07 	smlad	ip, r1, r7, ip
 800c154:	4f3f      	ldr	r7, [pc, #252]	; (800c254 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800c156:	fb24 cc07 	smlad	ip, r4, r7, ip
 800c15a:	4f3f      	ldr	r7, [pc, #252]	; (800c258 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800c15c:	9a02      	ldr	r2, [sp, #8]
 800c15e:	fb22 cc07 	smlad	ip, r2, r7, ip
 800c162:	4f3e      	ldr	r7, [pc, #248]	; (800c25c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800c164:	fb20 cc07 	smlad	ip, r0, r7, ip
 800c168:	4f3d      	ldr	r7, [pc, #244]	; (800c260 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800c16a:	fb23 c707 	smlad	r7, r3, r7, ip
 800c16e:	f8df c114 	ldr.w	ip, [pc, #276]	; 800c284 <D128_1CH_HTONS_VOL_HP+0x320>
 800c172:	fb25 720c 	smlad	r2, r5, ip, r7
 800c176:	f04f 0b01 	mov.w	fp, #1
 800c17a:	9204      	str	r2, [sp, #16]
 800c17c:	9f01      	ldr	r7, [sp, #4]
 800c17e:	fb27 fb0b 	smuad	fp, r7, fp
 800c182:	4f38      	ldr	r7, [pc, #224]	; (800c264 <D128_1CH_HTONS_VOL_HP+0x300>)
 800c184:	fb2a ba07 	smlad	sl, sl, r7, fp
 800c188:	4f37      	ldr	r7, [pc, #220]	; (800c268 <D128_1CH_HTONS_VOL_HP+0x304>)
 800c18a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800c18e:	4f37      	ldr	r7, [pc, #220]	; (800c26c <D128_1CH_HTONS_VOL_HP+0x308>)
 800c190:	fb24 aa07 	smlad	sl, r4, r7, sl
 800c194:	4f36      	ldr	r7, [pc, #216]	; (800c270 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800c196:	9a02      	ldr	r2, [sp, #8]
 800c198:	fb22 a707 	smlad	r7, r2, r7, sl
 800c19c:	4a35      	ldr	r2, [pc, #212]	; (800c274 <D128_1CH_HTONS_VOL_HP+0x310>)
 800c19e:	fb20 7702 	smlad	r7, r0, r2, r7
 800c1a2:	4a35      	ldr	r2, [pc, #212]	; (800c278 <D128_1CH_HTONS_VOL_HP+0x314>)
 800c1a4:	fb23 7702 	smlad	r7, r3, r2, r7
 800c1a8:	4b34      	ldr	r3, [pc, #208]	; (800c27c <D128_1CH_HTONS_VOL_HP+0x318>)
 800c1aa:	fb25 7303 	smlad	r3, r5, r3, r7
 800c1ae:	9305      	str	r3, [sp, #20]
 800c1b0:	9b03      	ldr	r3, [sp, #12]
 800c1b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c1b4:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800c1b8:	4473      	add	r3, lr
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	9b06      	ldr	r3, [sp, #24]
 800c1be:	f8cd e018 	str.w	lr, [sp, #24]
 800c1c2:	1ad2      	subs	r2, r2, r3
 800c1c4:	17d1      	asrs	r1, r2, #31
 800c1c6:	fba2 2304 	umull	r2, r3, r2, r4
 800c1ca:	fb04 3301 	mla	r3, r4, r1, r3
 800c1ce:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c1d2:	f143 0300 	adc.w	r3, r3, #0
 800c1d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c1d8:	021a      	lsls	r2, r3, #8
 800c1da:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c1de:	2100      	movs	r1, #0
 800c1e0:	fbc4 0102 	smlal	r0, r1, r4, r2
 800c1e4:	108a      	asrs	r2, r1, #2
 800c1e6:	9907      	ldr	r1, [sp, #28]
 800c1e8:	f302 020f 	ssat	r2, #16, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	f821 2b02 	strh.w	r2, [r1], #2
 800c1f2:	9303      	str	r3, [sp, #12]
 800c1f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1f6:	9107      	str	r1, [sp, #28]
 800c1f8:	4299      	cmp	r1, r3
 800c1fa:	f109 0910 	add.w	r9, r9, #16
 800c1fe:	f47f aed5 	bne.w	800bfac <D128_1CH_HTONS_VOL_HP+0x48>
 800c202:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c204:	9905      	ldr	r1, [sp, #20]
 800c206:	6091      	str	r1, [r2, #8]
 800c208:	9904      	ldr	r1, [sp, #16]
 800c20a:	60d1      	str	r1, [r2, #12]
 800c20c:	4613      	mov	r3, r2
 800c20e:	61d6      	str	r6, [r2, #28]
 800c210:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c212:	9a03      	ldr	r2, [sp, #12]
 800c214:	611a      	str	r2, [r3, #16]
 800c216:	2000      	movs	r0, #0
 800c218:	f8c3 e014 	str.w	lr, [r3, #20]
 800c21c:	6199      	str	r1, [r3, #24]
 800c21e:	b013      	add	sp, #76	; 0x4c
 800c220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c224:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c228:	e7eb      	b.n	800c202 <D128_1CH_HTONS_VOL_HP+0x29e>
 800c22a:	bf00      	nop
 800c22c:	00780069 	.word	0x00780069
 800c230:	005b004e 	.word	0x005b004e
 800c234:	00420037 	.word	0x00420037
 800c238:	002d0024 	.word	0x002d0024
 800c23c:	001c0015 	.word	0x001c0015
 800c240:	000f000a 	.word	0x000f000a
 800c244:	00060003 	.word	0x00060003
 800c248:	00880096 	.word	0x00880096
 800c24c:	00a200ac 	.word	0x00a200ac
 800c250:	00b400ba 	.word	0x00b400ba
 800c254:	00be00c0 	.word	0x00be00c0
 800c258:	00c000be 	.word	0x00c000be
 800c25c:	00ba00b4 	.word	0x00ba00b4
 800c260:	00ac00a2 	.word	0x00ac00a2
 800c264:	00030006 	.word	0x00030006
 800c268:	000a000f 	.word	0x000a000f
 800c26c:	0015001c 	.word	0x0015001c
 800c270:	0024002d 	.word	0x0024002d
 800c274:	00370042 	.word	0x00370042
 800c278:	004e005b 	.word	0x004e005b
 800c27c:	00690078 	.word	0x00690078
 800c280:	20000000 	.word	0x20000000
 800c284:	00960088 	.word	0x00960088

0800c288 <PDM_Filter_Init>:
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	2240      	movs	r2, #64	; 0x40
 800c28c:	4604      	mov	r4, r0
 800c28e:	2100      	movs	r1, #0
 800c290:	300c      	adds	r0, #12
 800c292:	f004 f937 	bl	8010504 <memset>
 800c296:	493b      	ldr	r1, [pc, #236]	; (800c384 <PDM_Filter_Init+0xfc>)
 800c298:	483b      	ldr	r0, [pc, #236]	; (800c388 <PDM_Filter_Init+0x100>)
 800c29a:	f000 f98d 	bl	800c5b8 <CRC_Lock>
 800c29e:	8822      	ldrh	r2, [r4, #0]
 800c2a0:	8963      	ldrh	r3, [r4, #10]
 800c2a2:	4938      	ldr	r1, [pc, #224]	; (800c384 <PDM_Filter_Init+0xfc>)
 800c2a4:	8925      	ldrh	r5, [r4, #8]
 800c2a6:	86a3      	strh	r3, [r4, #52]	; 0x34
 800c2a8:	2801      	cmp	r0, #1
 800c2aa:	f04f 0300 	mov.w	r3, #0
 800c2ae:	bf18      	it	ne
 800c2b0:	2100      	movne	r1, #0
 800c2b2:	2a01      	cmp	r2, #1
 800c2b4:	6461      	str	r1, [r4, #68]	; 0x44
 800c2b6:	86e5      	strh	r5, [r4, #54]	; 0x36
 800c2b8:	61a3      	str	r3, [r4, #24]
 800c2ba:	6123      	str	r3, [r4, #16]
 800c2bc:	6163      	str	r3, [r4, #20]
 800c2be:	60e3      	str	r3, [r4, #12]
 800c2c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c2c2:	61e3      	str	r3, [r4, #28]
 800c2c4:	6223      	str	r3, [r4, #32]
 800c2c6:	6423      	str	r3, [r4, #64]	; 0x40
 800c2c8:	d918      	bls.n	800c2fc <PDM_Filter_Init+0x74>
 800c2ca:	2003      	movs	r0, #3
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	8862      	ldrh	r2, [r4, #2]
 800c2d0:	2a01      	cmp	r2, #1
 800c2d2:	d91d      	bls.n	800c310 <PDM_Filter_Init+0x88>
 800c2d4:	2140      	movs	r1, #64	; 0x40
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c2da:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c2de:	6862      	ldr	r2, [r4, #4]
 800c2e0:	bf04      	itt	eq
 800c2e2:	6421      	streq	r1, [r4, #64]	; 0x40
 800c2e4:	460b      	moveq	r3, r1
 800c2e6:	b11a      	cbz	r2, 800c2f0 <PDM_Filter_Init+0x68>
 800c2e8:	f043 0310 	orr.w	r3, r3, #16
 800c2ec:	6423      	str	r3, [r4, #64]	; 0x40
 800c2ee:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	8722      	strh	r2, [r4, #56]	; 0x38
 800c2f4:	b908      	cbnz	r0, 800c2fa <PDM_Filter_Init+0x72>
 800c2f6:	3380      	adds	r3, #128	; 0x80
 800c2f8:	6423      	str	r3, [r4, #64]	; 0x40
 800c2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2fc:	4d23      	ldr	r5, [pc, #140]	; (800c38c <PDM_Filter_Init+0x104>)
 800c2fe:	d010      	beq.n	800c322 <PDM_Filter_Init+0x9a>
 800c300:	782a      	ldrb	r2, [r5, #0]
 800c302:	2a01      	cmp	r2, #1
 800c304:	d027      	beq.n	800c356 <PDM_Filter_Init+0xce>
 800c306:	8862      	ldrh	r2, [r4, #2]
 800c308:	2a01      	cmp	r2, #1
 800c30a:	f04f 0001 	mov.w	r0, #1
 800c30e:	d8e1      	bhi.n	800c2d4 <PDM_Filter_Init+0x4c>
 800c310:	d001      	beq.n	800c316 <PDM_Filter_Init+0x8e>
 800c312:	4618      	mov	r0, r3
 800c314:	e7de      	b.n	800c2d4 <PDM_Filter_Init+0x4c>
 800c316:	2220      	movs	r2, #32
 800c318:	4618      	mov	r0, r3
 800c31a:	6422      	str	r2, [r4, #64]	; 0x40
 800c31c:	4613      	mov	r3, r2
 800c31e:	2160      	movs	r1, #96	; 0x60
 800c320:	e7da      	b.n	800c2d8 <PDM_Filter_Init+0x50>
 800c322:	7829      	ldrb	r1, [r5, #0]
 800c324:	2900      	cmp	r1, #0
 800c326:	d1ee      	bne.n	800c306 <PDM_Filter_Init+0x7e>
 800c328:	4919      	ldr	r1, [pc, #100]	; (800c390 <PDM_Filter_Init+0x108>)
 800c32a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800c398 <PDM_Filter_Init+0x110>
 800c32e:	4f19      	ldr	r7, [pc, #100]	; (800c394 <PDM_Filter_Init+0x10c>)
 800c330:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800c334:	684a      	ldr	r2, [r1, #4]
 800c336:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800c33a:	ea02 0007 	and.w	r0, r2, r7
 800c33e:	4303      	orrs	r3, r0
 800c340:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c344:	4413      	add	r3, r2
 800c346:	f841 3f04 	str.w	r3, [r1, #4]!
 800c34a:	428e      	cmp	r6, r1
 800c34c:	d1f2      	bne.n	800c334 <PDM_Filter_Init+0xac>
 800c34e:	2001      	movs	r0, #1
 800c350:	7028      	strb	r0, [r5, #0]
 800c352:	2300      	movs	r3, #0
 800c354:	e7bb      	b.n	800c2ce <PDM_Filter_Init+0x46>
 800c356:	490e      	ldr	r1, [pc, #56]	; (800c390 <PDM_Filter_Init+0x108>)
 800c358:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800c398 <PDM_Filter_Init+0x110>
 800c35c:	4f0d      	ldr	r7, [pc, #52]	; (800c394 <PDM_Filter_Init+0x10c>)
 800c35e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800c362:	684a      	ldr	r2, [r1, #4]
 800c364:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800c368:	ea02 0007 	and.w	r0, r2, r7
 800c36c:	4303      	orrs	r3, r0
 800c36e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c372:	4413      	add	r3, r2
 800c374:	f841 3f04 	str.w	r3, [r1, #4]!
 800c378:	428e      	cmp	r6, r1
 800c37a:	d1f2      	bne.n	800c362 <PDM_Filter_Init+0xda>
 800c37c:	2300      	movs	r3, #0
 800c37e:	702b      	strb	r3, [r5, #0]
 800c380:	e7c1      	b.n	800c306 <PDM_Filter_Init+0x7e>
 800c382:	bf00      	nop
 800c384:	b5e8b5cd 	.word	0xb5e8b5cd
 800c388:	f407a5c2 	.word	0xf407a5c2
 800c38c:	200010d4 	.word	0x200010d4
 800c390:	1ffffffc 	.word	0x1ffffffc
 800c394:	000ffc00 	.word	0x000ffc00
 800c398:	3ff00000 	.word	0x3ff00000

0800c39c <PDM_Filter_setConfig>:
 800c39c:	4b66      	ldr	r3, [pc, #408]	; (800c538 <PDM_Filter_setConfig+0x19c>)
 800c39e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d001      	beq.n	800c3a8 <PDM_Filter_setConfig+0xc>
 800c3a4:	2004      	movs	r0, #4
 800c3a6:	4770      	bx	lr
 800c3a8:	b530      	push	{r4, r5, lr}
 800c3aa:	880a      	ldrh	r2, [r1, #0]
 800c3ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c3ae:	ed2d 8b04 	vpush	{d8-d9}
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	460d      	mov	r5, r1
 800c3b6:	1e51      	subs	r1, r2, #1
 800c3b8:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800c3bc:	2906      	cmp	r1, #6
 800c3be:	b083      	sub	sp, #12
 800c3c0:	6420      	str	r0, [r4, #64]	; 0x40
 800c3c2:	d91a      	bls.n	800c3fa <PDM_Filter_setConfig+0x5e>
 800c3c4:	2008      	movs	r0, #8
 800c3c6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800c3ca:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c3ce:	4299      	cmp	r1, r3
 800c3d0:	d07e      	beq.n	800c4d0 <PDM_Filter_setConfig+0x134>
 800c3d2:	f113 0f0c 	cmn.w	r3, #12
 800c3d6:	da2a      	bge.n	800c42e <PDM_Filter_setConfig+0x92>
 800c3d8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c3dc:	3040      	adds	r0, #64	; 0x40
 800c3de:	80ab      	strh	r3, [r5, #4]
 800c3e0:	8622      	strh	r2, [r4, #48]	; 0x30
 800c3e2:	886b      	ldrh	r3, [r5, #2]
 800c3e4:	8663      	strh	r3, [r4, #50]	; 0x32
 800c3e6:	b920      	cbnz	r0, 800c3f2 <PDM_Filter_setConfig+0x56>
 800c3e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3ee:	6423      	str	r3, [r4, #64]	; 0x40
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	b003      	add	sp, #12
 800c3f4:	ecbd 8b04 	vpop	{d8-d9}
 800c3f8:	bd30      	pop	{r4, r5, pc}
 800c3fa:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800c3fc:	4291      	cmp	r1, r2
 800c3fe:	d06c      	beq.n	800c4da <PDM_Filter_setConfig+0x13e>
 800c400:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800c404:	f023 0301 	bic.w	r3, r3, #1
 800c408:	4313      	orrs	r3, r2
 800c40a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800c40e:	6423      	str	r3, [r4, #64]	; 0x40
 800c410:	2970      	cmp	r1, #112	; 0x70
 800c412:	f003 030f 	and.w	r3, r3, #15
 800c416:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c41a:	d066      	beq.n	800c4ea <PDM_Filter_setConfig+0x14e>
 800c41c:	2b06      	cmp	r3, #6
 800c41e:	f200 8089 	bhi.w	800c534 <PDM_Filter_setConfig+0x198>
 800c422:	e8df f003 	tbb	[pc, r3]
 800c426:	4f52      	.short	0x4f52
 800c428:	3d43494c 	.word	0x3d43494c
 800c42c:	46          	.byte	0x46
 800c42d:	00          	.byte	0x00
 800c42e:	2b33      	cmp	r3, #51	; 0x33
 800c430:	dc32      	bgt.n	800c498 <PDM_Filter_setConfig+0xfc>
 800c432:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c434:	f002 020f 	and.w	r2, r2, #15
 800c438:	3a01      	subs	r2, #1
 800c43a:	2a06      	cmp	r2, #6
 800c43c:	d872      	bhi.n	800c524 <PDM_Filter_setConfig+0x188>
 800c43e:	493f      	ldr	r1, [pc, #252]	; (800c53c <PDM_Filter_setConfig+0x1a0>)
 800c440:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c444:	ed92 9a00 	vldr	s18, [r2]
 800c448:	ed92 8a07 	vldr	s16, [r2, #28]
 800c44c:	9001      	str	r0, [sp, #4]
 800c44e:	ee07 3a90 	vmov	s15, r3
 800c452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c456:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800c45a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800c45e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c462:	f008 fd91 	bl	8014f88 <powf>
 800c466:	eddf 0a36 	vldr	s1, [pc, #216]	; 800c540 <PDM_Filter_setConfig+0x1a4>
 800c46a:	eef0 8a40 	vmov.f32	s17, s0
 800c46e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800c472:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c476:	f008 fd87 	bl	8014f88 <powf>
 800c47a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c47e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c482:	f008 fc7d 	bl	8014d80 <roundf>
 800c486:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800c48a:	88ab      	ldrh	r3, [r5, #4]
 800c48c:	882a      	ldrh	r2, [r5, #0]
 800c48e:	9801      	ldr	r0, [sp, #4]
 800c490:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800c494:	8723      	strh	r3, [r4, #56]	; 0x38
 800c496:	e7a3      	b.n	800c3e0 <PDM_Filter_setConfig+0x44>
 800c498:	2333      	movs	r3, #51	; 0x33
 800c49a:	3040      	adds	r0, #64	; 0x40
 800c49c:	80ab      	strh	r3, [r5, #4]
 800c49e:	e79f      	b.n	800c3e0 <PDM_Filter_setConfig+0x44>
 800c4a0:	4b28      	ldr	r3, [pc, #160]	; (800c544 <PDM_Filter_setConfig+0x1a8>)
 800c4a2:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4a4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	e792      	b.n	800c3d2 <PDM_Filter_setConfig+0x36>
 800c4ac:	4b26      	ldr	r3, [pc, #152]	; (800c548 <PDM_Filter_setConfig+0x1ac>)
 800c4ae:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4b0:	e7f8      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c4b2:	4b26      	ldr	r3, [pc, #152]	; (800c54c <PDM_Filter_setConfig+0x1b0>)
 800c4b4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4b6:	e7f5      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c4b8:	4b25      	ldr	r3, [pc, #148]	; (800c550 <PDM_Filter_setConfig+0x1b4>)
 800c4ba:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4bc:	e7f2      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c4be:	4b25      	ldr	r3, [pc, #148]	; (800c554 <PDM_Filter_setConfig+0x1b8>)
 800c4c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4c2:	e7ef      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c4c4:	4b24      	ldr	r3, [pc, #144]	; (800c558 <PDM_Filter_setConfig+0x1bc>)
 800c4c6:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4c8:	e7ec      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c4ca:	4b24      	ldr	r3, [pc, #144]	; (800c55c <PDM_Filter_setConfig+0x1c0>)
 800c4cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4ce:	e7e9      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c4d0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800c4d2:	4291      	cmp	r1, r2
 800c4d4:	f47f af7d 	bne.w	800c3d2 <PDM_Filter_setConfig+0x36>
 800c4d8:	e783      	b.n	800c3e2 <PDM_Filter_setConfig+0x46>
 800c4da:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c4de:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800c4e2:	4299      	cmp	r1, r3
 800c4e4:	d023      	beq.n	800c52e <PDM_Filter_setConfig+0x192>
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	e773      	b.n	800c3d2 <PDM_Filter_setConfig+0x36>
 800c4ea:	2b06      	cmp	r3, #6
 800c4ec:	d822      	bhi.n	800c534 <PDM_Filter_setConfig+0x198>
 800c4ee:	e8df f003 	tbb	[pc, r3]
 800c4f2:	1316      	.short	0x1316
 800c4f4:	070a0d10 	.word	0x070a0d10
 800c4f8:	04          	.byte	0x04
 800c4f9:	00          	.byte	0x00
 800c4fa:	4b19      	ldr	r3, [pc, #100]	; (800c560 <PDM_Filter_setConfig+0x1c4>)
 800c4fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4fe:	e7d1      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c500:	4b18      	ldr	r3, [pc, #96]	; (800c564 <PDM_Filter_setConfig+0x1c8>)
 800c502:	64a3      	str	r3, [r4, #72]	; 0x48
 800c504:	e7ce      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c506:	4b18      	ldr	r3, [pc, #96]	; (800c568 <PDM_Filter_setConfig+0x1cc>)
 800c508:	64a3      	str	r3, [r4, #72]	; 0x48
 800c50a:	e7cb      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c50c:	4b17      	ldr	r3, [pc, #92]	; (800c56c <PDM_Filter_setConfig+0x1d0>)
 800c50e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c510:	e7c8      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c512:	4b17      	ldr	r3, [pc, #92]	; (800c570 <PDM_Filter_setConfig+0x1d4>)
 800c514:	64a3      	str	r3, [r4, #72]	; 0x48
 800c516:	e7c5      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c518:	4b16      	ldr	r3, [pc, #88]	; (800c574 <PDM_Filter_setConfig+0x1d8>)
 800c51a:	64a3      	str	r3, [r4, #72]	; 0x48
 800c51c:	e7c2      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c51e:	4b16      	ldr	r3, [pc, #88]	; (800c578 <PDM_Filter_setConfig+0x1dc>)
 800c520:	64a3      	str	r3, [r4, #72]	; 0x48
 800c522:	e7bf      	b.n	800c4a4 <PDM_Filter_setConfig+0x108>
 800c524:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800c57c <PDM_Filter_setConfig+0x1e0>
 800c528:	eeb0 9a48 	vmov.f32	s18, s16
 800c52c:	e78e      	b.n	800c44c <PDM_Filter_setConfig+0xb0>
 800c52e:	886b      	ldrh	r3, [r5, #2]
 800c530:	8663      	strh	r3, [r4, #50]	; 0x32
 800c532:	e759      	b.n	800c3e8 <PDM_Filter_setConfig+0x4c>
 800c534:	2000      	movs	r0, #0
 800c536:	e746      	b.n	800c3c6 <PDM_Filter_setConfig+0x2a>
 800c538:	b5e8b5cd 	.word	0xb5e8b5cd
 800c53c:	080170b0 	.word	0x080170b0
 800c540:	42000000 	.word	0x42000000
 800c544:	0800a909 	.word	0x0800a909
 800c548:	0800a7e9 	.word	0x0800a7e9
 800c54c:	0800aa99 	.word	0x0800aa99
 800c550:	0800b2dd 	.word	0x0800b2dd
 800c554:	0800b03d 	.word	0x0800b03d
 800c558:	0800ae1d 	.word	0x0800ae1d
 800c55c:	0800ac31 	.word	0x0800ac31
 800c560:	0800b8e9 	.word	0x0800b8e9
 800c564:	0800b7b1 	.word	0x0800b7b1
 800c568:	0800b6cd 	.word	0x0800b6cd
 800c56c:	0800bf65 	.word	0x0800bf65
 800c570:	0800bd51 	.word	0x0800bd51
 800c574:	0800bb99 	.word	0x0800bb99
 800c578:	0800ba2d 	.word	0x0800ba2d
 800c57c:	00000000 	.word	0x00000000

0800c580 <PDM_Filter>:
 800c580:	b410      	push	{r4}
 800c582:	4b0c      	ldr	r3, [pc, #48]	; (800c5b4 <PDM_Filter+0x34>)
 800c584:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800c586:	429c      	cmp	r4, r3
 800c588:	d003      	beq.n	800c592 <PDM_Filter+0x12>
 800c58a:	2004      	movs	r0, #4
 800c58c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c594:	05dc      	lsls	r4, r3, #23
 800c596:	d407      	bmi.n	800c5a8 <PDM_Filter+0x28>
 800c598:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c59c:	bf14      	ite	ne
 800c59e:	2020      	movne	r0, #32
 800c5a0:	2030      	moveq	r0, #48	; 0x30
 800c5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800c5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ae:	320c      	adds	r2, #12
 800c5b0:	4718      	bx	r3
 800c5b2:	bf00      	nop
 800c5b4:	b5e8b5cd 	.word	0xb5e8b5cd

0800c5b8 <CRC_Lock>:
 800c5b8:	4a17      	ldr	r2, [pc, #92]	; (800c618 <CRC_Lock+0x60>)
 800c5ba:	6813      	ldr	r3, [r2, #0]
 800c5bc:	b410      	push	{r4}
 800c5be:	f023 0301 	bic.w	r3, r3, #1
 800c5c2:	4c16      	ldr	r4, [pc, #88]	; (800c61c <CRC_Lock+0x64>)
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	b933      	cbnz	r3, 800c5d8 <CRC_Lock+0x20>
 800c5ca:	4b15      	ldr	r3, [pc, #84]	; (800c620 <CRC_Lock+0x68>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5d2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c5d6:	d00f      	beq.n	800c5f8 <CRC_Lock+0x40>
 800c5d8:	4a12      	ldr	r2, [pc, #72]	; (800c624 <CRC_Lock+0x6c>)
 800c5da:	2301      	movs	r3, #1
 800c5dc:	6013      	str	r3, [r2, #0]
 800c5de:	6813      	ldr	r3, [r2, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1fc      	bne.n	800c5de <CRC_Lock+0x26>
 800c5e4:	4b10      	ldr	r3, [pc, #64]	; (800c628 <CRC_Lock+0x70>)
 800c5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ea:	6018      	str	r0, [r3, #0]
 800c5ec:	6818      	ldr	r0, [r3, #0]
 800c5ee:	1a08      	subs	r0, r1, r0
 800c5f0:	fab0 f080 	clz	r0, r0
 800c5f4:	0940      	lsrs	r0, r0, #5
 800c5f6:	4770      	bx	lr
 800c5f8:	4a0c      	ldr	r2, [pc, #48]	; (800c62c <CRC_Lock+0x74>)
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	6813      	ldr	r3, [r2, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1fc      	bne.n	800c5fe <CRC_Lock+0x46>
 800c604:	4b0a      	ldr	r3, [pc, #40]	; (800c630 <CRC_Lock+0x78>)
 800c606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c60a:	6018      	str	r0, [r3, #0]
 800c60c:	6818      	ldr	r0, [r3, #0]
 800c60e:	1a40      	subs	r0, r0, r1
 800c610:	fab0 f080 	clz	r0, r0
 800c614:	0940      	lsrs	r0, r0, #5
 800c616:	4770      	bx	lr
 800c618:	e0002000 	.word	0xe0002000
 800c61c:	e0042000 	.word	0xe0042000
 800c620:	5c001000 	.word	0x5c001000
 800c624:	40023008 	.word	0x40023008
 800c628:	40023000 	.word	0x40023000
 800c62c:	58024c08 	.word	0x58024c08
 800c630:	58024c00 	.word	0x58024c00

0800c634 <_ai_platform_acquire_crc>:
 800c634:	2001      	movs	r0, #1
 800c636:	4770      	bx	lr

0800c638 <_ai_platform_release_crc>:
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop

0800c63c <ai_platform_get_weights_map>:
 800c63c:	b132      	cbz	r2, 800c64c <ai_platform_get_weights_map+0x10>
 800c63e:	6912      	ldr	r2, [r2, #16]
 800c640:	b122      	cbz	r2, 800c64c <ai_platform_get_weights_map+0x10>
 800c642:	b110      	cbz	r0, 800c64a <ai_platform_get_weights_map+0xe>
 800c644:	b921      	cbnz	r1, 800c650 <ai_platform_get_weights_map+0x14>
 800c646:	4608      	mov	r0, r1
 800c648:	4770      	bx	lr
 800c64a:	4770      	bx	lr
 800c64c:	4610      	mov	r0, r2
 800c64e:	4770      	bx	lr
 800c650:	b470      	push	{r4, r5, r6}
 800c652:	4b13      	ldr	r3, [pc, #76]	; (800c6a0 <ai_platform_get_weights_map+0x64>)
 800c654:	6815      	ldr	r5, [r2, #0]
 800c656:	429d      	cmp	r5, r3
 800c658:	d007      	beq.n	800c66a <ai_platform_get_weights_map+0x2e>
 800c65a:	6002      	str	r2, [r0, #0]
 800c65c:	f1a1 0001 	sub.w	r0, r1, #1
 800c660:	fab0 f080 	clz	r0, r0
 800c664:	0940      	lsrs	r0, r0, #5
 800c666:	bc70      	pop	{r4, r5, r6}
 800c668:	4770      	bx	lr
 800c66a:	6854      	ldr	r4, [r2, #4]
 800c66c:	42ac      	cmp	r4, r5
 800c66e:	f102 0204 	add.w	r2, r2, #4
 800c672:	d011      	beq.n	800c698 <ai_platform_get_weights_map+0x5c>
 800c674:	1f03      	subs	r3, r0, #4
 800c676:	4616      	mov	r6, r2
 800c678:	2000      	movs	r0, #0
 800c67a:	e003      	b.n	800c684 <ai_platform_get_weights_map+0x48>
 800c67c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800c680:	42ac      	cmp	r4, r5
 800c682:	d009      	beq.n	800c698 <ai_platform_get_weights_map+0x5c>
 800c684:	3001      	adds	r0, #1
 800c686:	4281      	cmp	r1, r0
 800c688:	f843 4f04 	str.w	r4, [r3, #4]!
 800c68c:	d1f6      	bne.n	800c67c <ai_platform_get_weights_map+0x40>
 800c68e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c692:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <ai_platform_get_weights_map+0x64>)
 800c694:	429a      	cmp	r2, r3
 800c696:	d001      	beq.n	800c69c <ai_platform_get_weights_map+0x60>
 800c698:	2000      	movs	r0, #0
 800c69a:	e7e4      	b.n	800c666 <ai_platform_get_weights_map+0x2a>
 800c69c:	2001      	movs	r0, #1
 800c69e:	e7e2      	b.n	800c666 <ai_platform_get_weights_map+0x2a>
 800c6a0:	a1facade 	.word	0xa1facade

0800c6a4 <ai_platform_get_activations_map>:
 800c6a4:	b132      	cbz	r2, 800c6b4 <ai_platform_get_activations_map+0x10>
 800c6a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c6a8:	b122      	cbz	r2, 800c6b4 <ai_platform_get_activations_map+0x10>
 800c6aa:	b110      	cbz	r0, 800c6b2 <ai_platform_get_activations_map+0xe>
 800c6ac:	b921      	cbnz	r1, 800c6b8 <ai_platform_get_activations_map+0x14>
 800c6ae:	4608      	mov	r0, r1
 800c6b0:	4770      	bx	lr
 800c6b2:	4770      	bx	lr
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4770      	bx	lr
 800c6b8:	b470      	push	{r4, r5, r6}
 800c6ba:	4b13      	ldr	r3, [pc, #76]	; (800c708 <ai_platform_get_activations_map+0x64>)
 800c6bc:	6815      	ldr	r5, [r2, #0]
 800c6be:	429d      	cmp	r5, r3
 800c6c0:	d007      	beq.n	800c6d2 <ai_platform_get_activations_map+0x2e>
 800c6c2:	6002      	str	r2, [r0, #0]
 800c6c4:	f1a1 0001 	sub.w	r0, r1, #1
 800c6c8:	fab0 f080 	clz	r0, r0
 800c6cc:	0940      	lsrs	r0, r0, #5
 800c6ce:	bc70      	pop	{r4, r5, r6}
 800c6d0:	4770      	bx	lr
 800c6d2:	6854      	ldr	r4, [r2, #4]
 800c6d4:	42ac      	cmp	r4, r5
 800c6d6:	f102 0204 	add.w	r2, r2, #4
 800c6da:	d011      	beq.n	800c700 <ai_platform_get_activations_map+0x5c>
 800c6dc:	1f03      	subs	r3, r0, #4
 800c6de:	4616      	mov	r6, r2
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	e003      	b.n	800c6ec <ai_platform_get_activations_map+0x48>
 800c6e4:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800c6e8:	42ac      	cmp	r4, r5
 800c6ea:	d009      	beq.n	800c700 <ai_platform_get_activations_map+0x5c>
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	4281      	cmp	r1, r0
 800c6f0:	f843 4f04 	str.w	r4, [r3, #4]!
 800c6f4:	d1f6      	bne.n	800c6e4 <ai_platform_get_activations_map+0x40>
 800c6f6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c6fa:	4b03      	ldr	r3, [pc, #12]	; (800c708 <ai_platform_get_activations_map+0x64>)
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d001      	beq.n	800c704 <ai_platform_get_activations_map+0x60>
 800c700:	2000      	movs	r0, #0
 800c702:	e7e4      	b.n	800c6ce <ai_platform_get_activations_map+0x2a>
 800c704:	2001      	movs	r0, #1
 800c706:	e7e2      	b.n	800c6ce <ai_platform_get_activations_map+0x2a>
 800c708:	a1facade 	.word	0xa1facade

0800c70c <ai_platform_network_create>:
 800c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c710:	b082      	sub	sp, #8
 800c712:	4607      	mov	r7, r0
 800c714:	4616      	mov	r6, r2
 800c716:	461d      	mov	r5, r3
 800c718:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800c71c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 800c720:	f7ff ff88 	bl	800c634 <_ai_platform_acquire_crc>
 800c724:	b178      	cbz	r0, 800c746 <ai_platform_network_create+0x3a>
 800c726:	4b5a      	ldr	r3, [pc, #360]	; (800c890 <ai_platform_network_create+0x184>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c72e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c732:	4602      	mov	r2, r0
 800c734:	d00c      	beq.n	800c750 <ai_platform_network_create+0x44>
 800c736:	4b57      	ldr	r3, [pc, #348]	; (800c894 <ai_platform_network_create+0x188>)
 800c738:	2118      	movs	r1, #24
 800c73a:	6019      	str	r1, [r3, #0]
 800c73c:	6819      	ldr	r1, [r3, #0]
 800c73e:	2918      	cmp	r1, #24
 800c740:	d034      	beq.n	800c7ac <ai_platform_network_create+0xa0>
 800c742:	f7ff ff79 	bl	800c638 <_ai_platform_release_crc>
 800c746:	f241 0033 	movw	r0, #4147	; 0x1033
 800c74a:	b002      	add	sp, #8
 800c74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c750:	4b51      	ldr	r3, [pc, #324]	; (800c898 <ai_platform_network_create+0x18c>)
 800c752:	2101      	movs	r1, #1
 800c754:	6019      	str	r1, [r3, #0]
 800c756:	2114      	movs	r1, #20
 800c758:	e001      	b.n	800c75e <ai_platform_network_create+0x52>
 800c75a:	3901      	subs	r1, #1
 800c75c:	d002      	beq.n	800c764 <ai_platform_network_create+0x58>
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	2800      	cmp	r0, #0
 800c762:	d1fa      	bne.n	800c75a <ai_platform_network_create+0x4e>
 800c764:	4b4c      	ldr	r3, [pc, #304]	; (800c898 <ai_platform_network_create+0x18c>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	b9f3      	cbnz	r3, 800c7a8 <ai_platform_network_create+0x9c>
 800c76a:	4610      	mov	r0, r2
 800c76c:	f7ff ff64 	bl	800c638 <_ai_platform_release_crc>
 800c770:	4a4a      	ldr	r2, [pc, #296]	; (800c89c <ai_platform_network_create+0x190>)
 800c772:	6813      	ldr	r3, [r2, #0]
 800c774:	f023 0301 	bic.w	r3, r3, #1
 800c778:	6013      	str	r3, [r2, #0]
 800c77a:	f7ff ff5b 	bl	800c634 <_ai_platform_acquire_crc>
 800c77e:	4b44      	ldr	r3, [pc, #272]	; (800c890 <ai_platform_network_create+0x184>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c78a:	d015      	beq.n	800c7b8 <ai_platform_network_create+0xac>
 800c78c:	4b41      	ldr	r3, [pc, #260]	; (800c894 <ai_platform_network_create+0x188>)
 800c78e:	2201      	movs	r2, #1
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	2a00      	cmp	r2, #0
 800c796:	d1fc      	bne.n	800c792 <ai_platform_network_create+0x86>
 800c798:	4b41      	ldr	r3, [pc, #260]	; (800c8a0 <ai_platform_network_create+0x194>)
 800c79a:	4a42      	ldr	r2, [pc, #264]	; (800c8a4 <ai_platform_network_create+0x198>)
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	4b41      	ldr	r3, [pc, #260]	; (800c8a8 <ai_platform_network_create+0x19c>)
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d016      	beq.n	800c7d4 <ai_platform_network_create+0xc8>
 800c7a6:	e7fe      	b.n	800c7a6 <ai_platform_network_create+0x9a>
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	e7ca      	b.n	800c742 <ai_platform_network_create+0x36>
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	6019      	str	r1, [r3, #0]
 800c7b0:	6819      	ldr	r1, [r3, #0]
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	d1fc      	bne.n	800c7b0 <ai_platform_network_create+0xa4>
 800c7b6:	e7d8      	b.n	800c76a <ai_platform_network_create+0x5e>
 800c7b8:	4b37      	ldr	r3, [pc, #220]	; (800c898 <ai_platform_network_create+0x18c>)
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	2a00      	cmp	r2, #0
 800c7c2:	d1fc      	bne.n	800c7be <ai_platform_network_create+0xb2>
 800c7c4:	4b39      	ldr	r3, [pc, #228]	; (800c8ac <ai_platform_network_create+0x1a0>)
 800c7c6:	4a37      	ldr	r2, [pc, #220]	; (800c8a4 <ai_platform_network_create+0x198>)
 800c7c8:	601a      	str	r2, [r3, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	4b36      	ldr	r3, [pc, #216]	; (800c8a8 <ai_platform_network_create+0x19c>)
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d000      	beq.n	800c7d4 <ai_platform_network_create+0xc8>
 800c7d2:	e7fe      	b.n	800c7d2 <ai_platform_network_create+0xc6>
 800c7d4:	f7ff ff30 	bl	800c638 <_ai_platform_release_crc>
 800c7d8:	b1af      	cbz	r7, 800c806 <ai_platform_network_create+0xfa>
 800c7da:	4b35      	ldr	r3, [pc, #212]	; (800c8b0 <ai_platform_network_create+0x1a4>)
 800c7dc:	6033      	str	r3, [r6, #0]
 800c7de:	603e      	str	r6, [r7, #0]
 800c7e0:	f000 fc8e 	bl	800d100 <core_init>
 800c7e4:	b990      	cbnz	r0, 800c80c <ai_platform_network_create+0x100>
 800c7e6:	062d      	lsls	r5, r5, #24
 800c7e8:	0424      	lsls	r4, r4, #16
 800c7ea:	2230      	movs	r2, #48	; 0x30
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	2110      	movs	r1, #16
 800c7f2:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	432b      	orrs	r3, r5
 800c7fa:	f362 0007 	bfi	r0, r2, #0, #8
 800c7fe:	6473      	str	r3, [r6, #68]	; 0x44
 800c800:	f361 201f 	bfi	r0, r1, #8, #24
 800c804:	e7a1      	b.n	800c74a <ai_platform_network_create+0x3e>
 800c806:	f241 0010 	movw	r0, #4112	; 0x1010
 800c80a:	e79e      	b.n	800c74a <ai_platform_network_create+0x3e>
 800c80c:	4a23      	ldr	r2, [pc, #140]	; (800c89c <ai_platform_network_create+0x190>)
 800c80e:	6813      	ldr	r3, [r2, #0]
 800c810:	f023 0301 	bic.w	r3, r3, #1
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	f7ff ff0d 	bl	800c634 <_ai_platform_acquire_crc>
 800c81a:	4b1d      	ldr	r3, [pc, #116]	; (800c890 <ai_platform_network_create+0x184>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c826:	d00d      	beq.n	800c844 <ai_platform_network_create+0x138>
 800c828:	4b1a      	ldr	r3, [pc, #104]	; (800c894 <ai_platform_network_create+0x188>)
 800c82a:	2201      	movs	r2, #1
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	2a00      	cmp	r2, #0
 800c832:	d1fc      	bne.n	800c82e <ai_platform_network_create+0x122>
 800c834:	4b1a      	ldr	r3, [pc, #104]	; (800c8a0 <ai_platform_network_create+0x194>)
 800c836:	4a1b      	ldr	r2, [pc, #108]	; (800c8a4 <ai_platform_network_create+0x198>)
 800c838:	601a      	str	r2, [r3, #0]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	4b1a      	ldr	r3, [pc, #104]	; (800c8a8 <ai_platform_network_create+0x19c>)
 800c83e:	429a      	cmp	r2, r3
 800c840:	d00e      	beq.n	800c860 <ai_platform_network_create+0x154>
 800c842:	e7fe      	b.n	800c842 <ai_platform_network_create+0x136>
 800c844:	4b14      	ldr	r3, [pc, #80]	; (800c898 <ai_platform_network_create+0x18c>)
 800c846:	2201      	movs	r2, #1
 800c848:	601a      	str	r2, [r3, #0]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	d1fc      	bne.n	800c84a <ai_platform_network_create+0x13e>
 800c850:	4b16      	ldr	r3, [pc, #88]	; (800c8ac <ai_platform_network_create+0x1a0>)
 800c852:	4a14      	ldr	r2, [pc, #80]	; (800c8a4 <ai_platform_network_create+0x198>)
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	4b13      	ldr	r3, [pc, #76]	; (800c8a8 <ai_platform_network_create+0x19c>)
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d000      	beq.n	800c860 <ai_platform_network_create+0x154>
 800c85e:	e7fe      	b.n	800c85e <ai_platform_network_create+0x152>
 800c860:	062d      	lsls	r5, r5, #24
 800c862:	0424      	lsls	r4, r4, #16
 800c864:	f7ff fee8 	bl	800c638 <_ai_platform_release_crc>
 800c868:	ea45 0304 	orr.w	r3, r5, r4
 800c86c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800c870:	d001      	beq.n	800c876 <ai_platform_network_create+0x16a>
 800c872:	2201      	movs	r2, #1
 800c874:	e7ba      	b.n	800c7ec <ai_platform_network_create+0xe0>
 800c876:	a802      	add	r0, sp, #8
 800c878:	4b0e      	ldr	r3, [pc, #56]	; (800c8b4 <ai_platform_network_create+0x1a8>)
 800c87a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c87e:	f003 fcb3 	bl	80101e8 <ai_check_custom_types>
 800c882:	b110      	cbz	r0, 800c88a <ai_platform_network_create+0x17e>
 800c884:	2100      	movs	r1, #0
 800c886:	460a      	mov	r2, r1
 800c888:	e7b3      	b.n	800c7f2 <ai_platform_network_create+0xe6>
 800c88a:	2202      	movs	r2, #2
 800c88c:	e7ae      	b.n	800c7ec <ai_platform_network_create+0xe0>
 800c88e:	bf00      	nop
 800c890:	e0042000 	.word	0xe0042000
 800c894:	58024c08 	.word	0x58024c08
 800c898:	40023008 	.word	0x40023008
 800c89c:	e0002000 	.word	0xe0002000
 800c8a0:	58024c00 	.word	0x58024c00
 800c8a4:	f407a5c2 	.word	0xf407a5c2
 800c8a8:	b5e8b5cd 	.word	0xb5e8b5cd
 800c8ac:	40023000 	.word	0x40023000
 800c8b0:	a1c00100 	.word	0xa1c00100
 800c8b4:	84048403 	.word	0x84048403

0800c8b8 <ai_platform_network_init>:
 800c8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d04d      	beq.n	800c95c <ai_platform_network_init+0xa4>
 800c8c0:	4b7c      	ldr	r3, [pc, #496]	; (800cab4 <ai_platform_network_init+0x1fc>)
 800c8c2:	6802      	ldr	r2, [r0, #0]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	d148      	bne.n	800c95c <ai_platform_network_init+0xa4>
 800c8ca:	4a7b      	ldr	r2, [pc, #492]	; (800cab8 <ai_platform_network_init+0x200>)
 800c8cc:	6813      	ldr	r3, [r2, #0]
 800c8ce:	f023 0301 	bic.w	r3, r3, #1
 800c8d2:	6013      	str	r3, [r2, #0]
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	f7ff fead 	bl	800c634 <_ai_platform_acquire_crc>
 800c8da:	4b78      	ldr	r3, [pc, #480]	; (800cabc <ai_platform_network_init+0x204>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8e6:	d00d      	beq.n	800c904 <ai_platform_network_init+0x4c>
 800c8e8:	4b75      	ldr	r3, [pc, #468]	; (800cac0 <ai_platform_network_init+0x208>)
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d1fc      	bne.n	800c8ee <ai_platform_network_init+0x36>
 800c8f4:	4b73      	ldr	r3, [pc, #460]	; (800cac4 <ai_platform_network_init+0x20c>)
 800c8f6:	4a74      	ldr	r2, [pc, #464]	; (800cac8 <ai_platform_network_init+0x210>)
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	4b73      	ldr	r3, [pc, #460]	; (800cacc <ai_platform_network_init+0x214>)
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d00d      	beq.n	800c91e <ai_platform_network_init+0x66>
 800c902:	e7fe      	b.n	800c902 <ai_platform_network_init+0x4a>
 800c904:	4b72      	ldr	r3, [pc, #456]	; (800cad0 <ai_platform_network_init+0x218>)
 800c906:	2201      	movs	r2, #1
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	2a00      	cmp	r2, #0
 800c90e:	d1fc      	bne.n	800c90a <ai_platform_network_init+0x52>
 800c910:	4b70      	ldr	r3, [pc, #448]	; (800cad4 <ai_platform_network_init+0x21c>)
 800c912:	4a6d      	ldr	r2, [pc, #436]	; (800cac8 <ai_platform_network_init+0x210>)
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	4b6c      	ldr	r3, [pc, #432]	; (800cacc <ai_platform_network_init+0x214>)
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d11d      	bne.n	800c95a <ai_platform_network_init+0xa2>
 800c91e:	f7ff fe8b 	bl	800c638 <_ai_platform_release_crc>
 800c922:	2d00      	cmp	r5, #0
 800c924:	d076      	beq.n	800ca14 <ai_platform_network_init+0x15c>
 800c926:	4b6c      	ldr	r3, [pc, #432]	; (800cad8 <ai_platform_network_init+0x220>)
 800c928:	682a      	ldr	r2, [r5, #0]
 800c92a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d030      	beq.n	800c994 <ai_platform_network_init+0xdc>
 800c932:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800c934:	46a9      	mov	r9, r5
 800c936:	f105 0118 	add.w	r1, r5, #24
 800c93a:	2e00      	cmp	r6, #0
 800c93c:	f000 8095 	beq.w	800ca6a <ai_platform_network_init+0x1b2>
 800c940:	f1bc 0f00 	cmp.w	ip, #0
 800c944:	f000 80a4 	beq.w	800ca90 <ai_platform_network_init+0x1d8>
 800c948:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800c94c:	f1b8 0f01 	cmp.w	r8, #1
 800c950:	d16a      	bne.n	800ca28 <ai_platform_network_init+0x170>
 800c952:	2700      	movs	r7, #0
 800c954:	468c      	mov	ip, r1
 800c956:	83a7      	strh	r7, [r4, #28]
 800c958:	e028      	b.n	800c9ac <ai_platform_network_init+0xf4>
 800c95a:	e7fe      	b.n	800c95a <ai_platform_network_init+0xa2>
 800c95c:	4a56      	ldr	r2, [pc, #344]	; (800cab8 <ai_platform_network_init+0x200>)
 800c95e:	6813      	ldr	r3, [r2, #0]
 800c960:	f023 0301 	bic.w	r3, r3, #1
 800c964:	6013      	str	r3, [r2, #0]
 800c966:	f7ff fe65 	bl	800c634 <_ai_platform_acquire_crc>
 800c96a:	4b54      	ldr	r3, [pc, #336]	; (800cabc <ai_platform_network_init+0x204>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c976:	d067      	beq.n	800ca48 <ai_platform_network_init+0x190>
 800c978:	4b51      	ldr	r3, [pc, #324]	; (800cac0 <ai_platform_network_init+0x208>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	2a00      	cmp	r2, #0
 800c982:	d1fc      	bne.n	800c97e <ai_platform_network_init+0xc6>
 800c984:	4b4f      	ldr	r3, [pc, #316]	; (800cac4 <ai_platform_network_init+0x20c>)
 800c986:	4a50      	ldr	r2, [pc, #320]	; (800cac8 <ai_platform_network_init+0x210>)
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	4b4f      	ldr	r3, [pc, #316]	; (800cacc <ai_platform_network_init+0x214>)
 800c98e:	429a      	cmp	r2, r3
 800c990:	d067      	beq.n	800ca62 <ai_platform_network_init+0x1aa>
 800c992:	e7fe      	b.n	800c992 <ai_platform_network_init+0xda>
 800c994:	8be1      	ldrh	r1, [r4, #30]
 800c996:	88eb      	ldrh	r3, [r5, #6]
 800c998:	89af      	ldrh	r7, [r5, #12]
 800c99a:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800c99e:	88aa      	ldrh	r2, [r5, #4]
 800c9a0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800c9a4:	428b      	cmp	r3, r1
 800c9a6:	d13f      	bne.n	800ca28 <ai_platform_network_init+0x170>
 800c9a8:	83a2      	strh	r2, [r4, #28]
 800c9aa:	b19b      	cbz	r3, 800c9d4 <ai_platform_network_init+0x11c>
 800c9ac:	f04f 0e00 	mov.w	lr, #0
 800c9b0:	46f2      	mov	sl, lr
 800c9b2:	eb09 060e 	add.w	r6, r9, lr
 800c9b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c9b8:	6a25      	ldr	r5, [r4, #32]
 800c9ba:	4475      	add	r5, lr
 800c9bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9be:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c9c2:	e885 0003 	stmia.w	r5, {r0, r1}
 800c9c6:	8be3      	ldrh	r3, [r4, #30]
 800c9c8:	f10a 0a01 	add.w	sl, sl, #1
 800c9cc:	459a      	cmp	sl, r3
 800c9ce:	f10e 0e18 	add.w	lr, lr, #24
 800c9d2:	d3ee      	bcc.n	800c9b2 <ai_platform_network_init+0xfa>
 800c9d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c9d6:	4598      	cmp	r8, r3
 800c9d8:	d12e      	bne.n	800ca38 <ai_platform_network_init+0x180>
 800c9da:	84a7      	strh	r7, [r4, #36]	; 0x24
 800c9dc:	f1b8 0f00 	cmp.w	r8, #0
 800c9e0:	d012      	beq.n	800ca08 <ai_platform_network_init+0x150>
 800c9e2:	2700      	movs	r7, #0
 800c9e4:	46be      	mov	lr, r7
 800c9e6:	eb0c 0607 	add.w	r6, ip, r7
 800c9ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c9ec:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c9ee:	443d      	add	r5, r7
 800c9f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c9f6:	e885 0003 	stmia.w	r5, {r0, r1}
 800c9fa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c9fc:	f10e 0e01 	add.w	lr, lr, #1
 800ca00:	459e      	cmp	lr, r3
 800ca02:	f107 0718 	add.w	r7, r7, #24
 800ca06:	d3ee      	bcc.n	800c9e6 <ai_platform_network_init+0x12e>
 800ca08:	2303      	movs	r3, #3
 800ca0a:	60e3      	str	r3, [r4, #12]
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f003 fc15 	bl	801023c <ai_layers_init_all>
 800ca12:	e006      	b.n	800ca22 <ai_platform_network_init+0x16a>
 800ca14:	f104 0010 	add.w	r0, r4, #16
 800ca18:	2211      	movs	r2, #17
 800ca1a:	2110      	movs	r1, #16
 800ca1c:	462c      	mov	r4, r5
 800ca1e:	f000 fb71 	bl	800d104 <core_set_error>
 800ca22:	4620      	mov	r0, r4
 800ca24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca28:	f104 0010 	add.w	r0, r4, #16
 800ca2c:	2212      	movs	r2, #18
 800ca2e:	2116      	movs	r1, #22
 800ca30:	f000 fb68 	bl	800d104 <core_set_error>
 800ca34:	2400      	movs	r4, #0
 800ca36:	e7f4      	b.n	800ca22 <ai_platform_network_init+0x16a>
 800ca38:	f104 0010 	add.w	r0, r4, #16
 800ca3c:	2213      	movs	r2, #19
 800ca3e:	2116      	movs	r1, #22
 800ca40:	f000 fb60 	bl	800d104 <core_set_error>
 800ca44:	2400      	movs	r4, #0
 800ca46:	e7ec      	b.n	800ca22 <ai_platform_network_init+0x16a>
 800ca48:	4b21      	ldr	r3, [pc, #132]	; (800cad0 <ai_platform_network_init+0x218>)
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	2a00      	cmp	r2, #0
 800ca52:	d1fc      	bne.n	800ca4e <ai_platform_network_init+0x196>
 800ca54:	4b1f      	ldr	r3, [pc, #124]	; (800cad4 <ai_platform_network_init+0x21c>)
 800ca56:	4a1c      	ldr	r2, [pc, #112]	; (800cac8 <ai_platform_network_init+0x210>)
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	4b1b      	ldr	r3, [pc, #108]	; (800cacc <ai_platform_network_init+0x214>)
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d115      	bne.n	800ca8e <ai_platform_network_init+0x1d6>
 800ca62:	f7ff fde9 	bl	800c638 <_ai_platform_release_crc>
 800ca66:	2400      	movs	r4, #0
 800ca68:	e7db      	b.n	800ca22 <ai_platform_network_init+0x16a>
 800ca6a:	8c28      	ldrh	r0, [r5, #32]
 800ca6c:	8bea      	ldrh	r2, [r5, #30]
 800ca6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca70:	fb02 f200 	mul.w	r2, r2, r0
 800ca74:	fb03 f302 	mul.w	r3, r3, r2
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f43f af61 	beq.w	800c940 <ai_platform_network_init+0x88>
 800ca7e:	f104 0010 	add.w	r0, r4, #16
 800ca82:	2213      	movs	r2, #19
 800ca84:	2110      	movs	r1, #16
 800ca86:	4634      	mov	r4, r6
 800ca88:	f000 fb3c 	bl	800d104 <core_set_error>
 800ca8c:	e7c9      	b.n	800ca22 <ai_platform_network_init+0x16a>
 800ca8e:	e7fe      	b.n	800ca8e <ai_platform_network_init+0x1d6>
 800ca90:	8928      	ldrh	r0, [r5, #8]
 800ca92:	88ea      	ldrh	r2, [r5, #6]
 800ca94:	68eb      	ldr	r3, [r5, #12]
 800ca96:	fb02 f200 	mul.w	r2, r2, r0
 800ca9a:	fb03 f302 	mul.w	r3, r3, r2
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f43f af52 	beq.w	800c948 <ai_platform_network_init+0x90>
 800caa4:	f104 0010 	add.w	r0, r4, #16
 800caa8:	2212      	movs	r2, #18
 800caaa:	2110      	movs	r1, #16
 800caac:	4664      	mov	r4, ip
 800caae:	f000 fb29 	bl	800d104 <core_set_error>
 800cab2:	e7b6      	b.n	800ca22 <ai_platform_network_init+0x16a>
 800cab4:	a1c00100 	.word	0xa1c00100
 800cab8:	e0002000 	.word	0xe0002000
 800cabc:	e0042000 	.word	0xe0042000
 800cac0:	58024c08 	.word	0x58024c08
 800cac4:	58024c00 	.word	0x58024c00
 800cac8:	f407a5c2 	.word	0xf407a5c2
 800cacc:	b5e8b5cd 	.word	0xb5e8b5cd
 800cad0:	40023008 	.word	0x40023008
 800cad4:	40023000 	.word	0x40023000
 800cad8:	a1facade 	.word	0xa1facade

0800cadc <ai_platform_network_post_init>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	b120      	cbz	r0, 800caea <ai_platform_network_post_init+0xe>
 800cae0:	4b3f      	ldr	r3, [pc, #252]	; (800cbe0 <ai_platform_network_post_init+0x104>)
 800cae2:	6802      	ldr	r2, [r0, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	4604      	mov	r4, r0
 800cae8:	d02d      	beq.n	800cb46 <ai_platform_network_post_init+0x6a>
 800caea:	4a3e      	ldr	r2, [pc, #248]	; (800cbe4 <ai_platform_network_post_init+0x108>)
 800caec:	6813      	ldr	r3, [r2, #0]
 800caee:	f023 0301 	bic.w	r3, r3, #1
 800caf2:	6013      	str	r3, [r2, #0]
 800caf4:	f7ff fd9e 	bl	800c634 <_ai_platform_acquire_crc>
 800caf8:	4b3b      	ldr	r3, [pc, #236]	; (800cbe8 <ai_platform_network_post_init+0x10c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb04:	d00d      	beq.n	800cb22 <ai_platform_network_post_init+0x46>
 800cb06:	4b39      	ldr	r3, [pc, #228]	; (800cbec <ai_platform_network_post_init+0x110>)
 800cb08:	2201      	movs	r2, #1
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	d1fc      	bne.n	800cb0c <ai_platform_network_post_init+0x30>
 800cb12:	4b37      	ldr	r3, [pc, #220]	; (800cbf0 <ai_platform_network_post_init+0x114>)
 800cb14:	4a37      	ldr	r2, [pc, #220]	; (800cbf4 <ai_platform_network_post_init+0x118>)
 800cb16:	601a      	str	r2, [r3, #0]
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	4b37      	ldr	r3, [pc, #220]	; (800cbf8 <ai_platform_network_post_init+0x11c>)
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d00d      	beq.n	800cb3c <ai_platform_network_post_init+0x60>
 800cb20:	e7fe      	b.n	800cb20 <ai_platform_network_post_init+0x44>
 800cb22:	4b36      	ldr	r3, [pc, #216]	; (800cbfc <ai_platform_network_post_init+0x120>)
 800cb24:	2201      	movs	r2, #1
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	2a00      	cmp	r2, #0
 800cb2c:	d1fc      	bne.n	800cb28 <ai_platform_network_post_init+0x4c>
 800cb2e:	4b34      	ldr	r3, [pc, #208]	; (800cc00 <ai_platform_network_post_init+0x124>)
 800cb30:	4a30      	ldr	r2, [pc, #192]	; (800cbf4 <ai_platform_network_post_init+0x118>)
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	4b30      	ldr	r3, [pc, #192]	; (800cbf8 <ai_platform_network_post_init+0x11c>)
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d103      	bne.n	800cb44 <ai_platform_network_post_init+0x68>
 800cb3c:	f7ff fd7c 	bl	800c638 <_ai_platform_release_crc>
 800cb40:	2000      	movs	r0, #0
 800cb42:	bd38      	pop	{r3, r4, r5, pc}
 800cb44:	e7fe      	b.n	800cb44 <ai_platform_network_post_init+0x68>
 800cb46:	4a27      	ldr	r2, [pc, #156]	; (800cbe4 <ai_platform_network_post_init+0x108>)
 800cb48:	6813      	ldr	r3, [r2, #0]
 800cb4a:	f023 0301 	bic.w	r3, r3, #1
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	f7ff fd70 	bl	800c634 <_ai_platform_acquire_crc>
 800cb54:	4b24      	ldr	r3, [pc, #144]	; (800cbe8 <ai_platform_network_post_init+0x10c>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb60:	d00d      	beq.n	800cb7e <ai_platform_network_post_init+0xa2>
 800cb62:	4b22      	ldr	r3, [pc, #136]	; (800cbec <ai_platform_network_post_init+0x110>)
 800cb64:	2201      	movs	r2, #1
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	d1fc      	bne.n	800cb68 <ai_platform_network_post_init+0x8c>
 800cb6e:	4b20      	ldr	r3, [pc, #128]	; (800cbf0 <ai_platform_network_post_init+0x114>)
 800cb70:	4a20      	ldr	r2, [pc, #128]	; (800cbf4 <ai_platform_network_post_init+0x118>)
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	4b20      	ldr	r3, [pc, #128]	; (800cbf8 <ai_platform_network_post_init+0x11c>)
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d00e      	beq.n	800cb9a <ai_platform_network_post_init+0xbe>
 800cb7c:	e7fe      	b.n	800cb7c <ai_platform_network_post_init+0xa0>
 800cb7e:	4b1f      	ldr	r3, [pc, #124]	; (800cbfc <ai_platform_network_post_init+0x120>)
 800cb80:	2201      	movs	r2, #1
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	d1fc      	bne.n	800cb84 <ai_platform_network_post_init+0xa8>
 800cb8a:	4b1d      	ldr	r3, [pc, #116]	; (800cc00 <ai_platform_network_post_init+0x124>)
 800cb8c:	4a19      	ldr	r2, [pc, #100]	; (800cbf4 <ai_platform_network_post_init+0x118>)
 800cb8e:	601a      	str	r2, [r3, #0]
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	4b19      	ldr	r3, [pc, #100]	; (800cbf8 <ai_platform_network_post_init+0x11c>)
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d000      	beq.n	800cb9a <ai_platform_network_post_init+0xbe>
 800cb98:	e7fe      	b.n	800cb98 <ai_platform_network_post_init+0xbc>
 800cb9a:	f7ff fd4d 	bl	800c638 <_ai_platform_release_crc>
 800cb9e:	68e3      	ldr	r3, [r4, #12]
 800cba0:	f013 0502 	ands.w	r5, r3, #2
 800cba4:	d011      	beq.n	800cbca <ai_platform_network_post_init+0xee>
 800cba6:	4620      	mov	r0, r4
 800cba8:	f003 fb5c 	bl	8010264 <ai_layers_post_init_all>
 800cbac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cbae:	b1a3      	cbz	r3, 800cbda <ai_platform_network_post_init+0xfe>
 800cbb0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800cbb2:	b195      	cbz	r5, 800cbda <ai_platform_network_post_init+0xfe>
 800cbb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	2000      	movs	r0, #0
 800cbba:	4798      	blx	r3
 800cbbc:	692b      	ldr	r3, [r5, #16]
 800cbbe:	42ab      	cmp	r3, r5
 800cbc0:	d00b      	beq.n	800cbda <ai_platform_network_post_init+0xfe>
 800cbc2:	461d      	mov	r5, r3
 800cbc4:	b14b      	cbz	r3, 800cbda <ai_platform_network_post_init+0xfe>
 800cbc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cbc8:	e7f4      	b.n	800cbb4 <ai_platform_network_post_init+0xd8>
 800cbca:	f104 0010 	add.w	r0, r4, #16
 800cbce:	2210      	movs	r2, #16
 800cbd0:	2111      	movs	r1, #17
 800cbd2:	f000 fa97 	bl	800d104 <core_set_error>
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	bd38      	pop	{r3, r4, r5, pc}
 800cbda:	2001      	movs	r0, #1
 800cbdc:	bd38      	pop	{r3, r4, r5, pc}
 800cbde:	bf00      	nop
 800cbe0:	a1c00100 	.word	0xa1c00100
 800cbe4:	e0002000 	.word	0xe0002000
 800cbe8:	e0042000 	.word	0xe0042000
 800cbec:	58024c08 	.word	0x58024c08
 800cbf0:	58024c00 	.word	0x58024c00
 800cbf4:	f407a5c2 	.word	0xf407a5c2
 800cbf8:	b5e8b5cd 	.word	0xb5e8b5cd
 800cbfc:	40023008 	.word	0x40023008
 800cc00:	40023000 	.word	0x40023000

0800cc04 <ai_platform_network_process>:
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	b085      	sub	sp, #20
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	9202      	str	r2, [sp, #8]
 800cc0e:	4604      	mov	r4, r0
 800cc10:	b120      	cbz	r0, 800cc1c <ai_platform_network_process+0x18>
 800cc12:	4b7b      	ldr	r3, [pc, #492]	; (800ce00 <ai_platform_network_process+0x1fc>)
 800cc14:	6802      	ldr	r2, [r0, #0]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	bf18      	it	ne
 800cc1a:	2400      	movne	r4, #0
 800cc1c:	4a79      	ldr	r2, [pc, #484]	; (800ce04 <ai_platform_network_process+0x200>)
 800cc1e:	6813      	ldr	r3, [r2, #0]
 800cc20:	f023 0301 	bic.w	r3, r3, #1
 800cc24:	6013      	str	r3, [r2, #0]
 800cc26:	f7ff fd05 	bl	800c634 <_ai_platform_acquire_crc>
 800cc2a:	4b77      	ldr	r3, [pc, #476]	; (800ce08 <ai_platform_network_process+0x204>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc36:	d00d      	beq.n	800cc54 <ai_platform_network_process+0x50>
 800cc38:	4b74      	ldr	r3, [pc, #464]	; (800ce0c <ai_platform_network_process+0x208>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	2a00      	cmp	r2, #0
 800cc42:	d1fc      	bne.n	800cc3e <ai_platform_network_process+0x3a>
 800cc44:	4b72      	ldr	r3, [pc, #456]	; (800ce10 <ai_platform_network_process+0x20c>)
 800cc46:	4a73      	ldr	r2, [pc, #460]	; (800ce14 <ai_platform_network_process+0x210>)
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	4b72      	ldr	r3, [pc, #456]	; (800ce18 <ai_platform_network_process+0x214>)
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d00e      	beq.n	800cc70 <ai_platform_network_process+0x6c>
 800cc52:	e7fe      	b.n	800cc52 <ai_platform_network_process+0x4e>
 800cc54:	4b71      	ldr	r3, [pc, #452]	; (800ce1c <ai_platform_network_process+0x218>)
 800cc56:	2201      	movs	r2, #1
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	2a00      	cmp	r2, #0
 800cc5e:	d1fc      	bne.n	800cc5a <ai_platform_network_process+0x56>
 800cc60:	4b6f      	ldr	r3, [pc, #444]	; (800ce20 <ai_platform_network_process+0x21c>)
 800cc62:	4a6c      	ldr	r2, [pc, #432]	; (800ce14 <ai_platform_network_process+0x210>)
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	4b6b      	ldr	r3, [pc, #428]	; (800ce18 <ai_platform_network_process+0x214>)
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d000      	beq.n	800cc70 <ai_platform_network_process+0x6c>
 800cc6e:	e7fe      	b.n	800cc6e <ai_platform_network_process+0x6a>
 800cc70:	f7ff fce2 	bl	800c638 <_ai_platform_release_crc>
 800cc74:	2c00      	cmp	r4, #0
 800cc76:	f000 808e 	beq.w	800cd96 <ai_platform_network_process+0x192>
 800cc7a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800cc7c:	2f00      	cmp	r7, #0
 800cc7e:	f040 823c 	bne.w	800d0fa <ai_platform_network_process+0x4f6>
 800cc82:	68e3      	ldr	r3, [r4, #12]
 800cc84:	f003 0303 	and.w	r3, r3, #3
 800cc88:	f04f 0b00 	mov.w	fp, #0
 800cc8c:	2b03      	cmp	r3, #3
 800cc8e:	f8c4 b014 	str.w	fp, [r4, #20]
 800cc92:	f040 822b 	bne.w	800d0ec <ai_platform_network_process+0x4e8>
 800cc96:	2d00      	cmp	r5, #0
 800cc98:	f000 80a8 	beq.w	800cdec <ai_platform_network_process+0x1e8>
 800cc9c:	2f00      	cmp	r7, #0
 800cc9e:	f000 80a5 	beq.w	800cdec <ai_platform_network_process+0x1e8>
 800cca2:	883b      	ldrh	r3, [r7, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f000 80a1 	beq.w	800cdec <ai_platform_network_process+0x1e8>
 800ccaa:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800ccae:	9401      	str	r4, [sp, #4]
 800ccb0:	46d8      	mov	r8, fp
 800ccb2:	4598      	cmp	r8, r3
 800ccb4:	f080 80b6 	bcs.w	800ce24 <ai_platform_network_process+0x220>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 80b2 	beq.w	800ce24 <ai_platform_network_process+0x220>
 800ccc0:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800ccc4:	2e00      	cmp	r6, #0
 800ccc6:	f000 80ad 	beq.w	800ce24 <ai_platform_network_process+0x220>
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	9303      	str	r3, [sp, #12]
 800ccd0:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800ccd4:	eb13 0a04 	adds.w	sl, r3, r4
 800ccd8:	f000 8087 	beq.w	800cdea <ai_platform_network_process+0x1e6>
 800ccdc:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800cce0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800cce4:	69b0      	ldr	r0, [r6, #24]
 800cce6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800ccea:	6841      	ldr	r1, [r0, #4]
 800ccec:	fb0b f30e 	mul.w	r3, fp, lr
 800ccf0:	fb0c f303 	mul.w	r3, ip, r3
 800ccf4:	4299      	cmp	r1, r3
 800ccf6:	d36e      	bcc.n	800cdd6 <ai_platform_network_process+0x1d2>
 800ccf8:	68f3      	ldr	r3, [r6, #12]
 800ccfa:	68da      	ldr	r2, [r3, #12]
 800ccfc:	455a      	cmp	r2, fp
 800ccfe:	d16a      	bne.n	800cdd6 <ai_platform_network_process+0x1d2>
 800cd00:	689a      	ldr	r2, [r3, #8]
 800cd02:	4572      	cmp	r2, lr
 800cd04:	d167      	bne.n	800cdd6 <ai_platform_network_process+0x1d2>
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	459c      	cmp	ip, r3
 800cd0a:	d164      	bne.n	800cdd6 <ai_platform_network_process+0x1d2>
 800cd0c:	6800      	ldr	r0, [r0, #0]
 800cd0e:	f003 fb67 	bl	80103e0 <ai_array_get_byte_size>
 800cd12:	68f2      	ldr	r2, [r6, #12]
 800cd14:	6973      	ldr	r3, [r6, #20]
 800cd16:	68d2      	ldr	r2, [r2, #12]
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	fb03 f302 	mul.w	r3, r3, r2
 800cd1e:	4298      	cmp	r0, r3
 800cd20:	d359      	bcc.n	800cdd6 <ai_platform_network_process+0x1d2>
 800cd22:	69b3      	ldr	r3, [r6, #24]
 800cd24:	6818      	ldr	r0, [r3, #0]
 800cd26:	f003 fb03 	bl	8010330 <ai_array_to_buffer_fmt>
 800cd2a:	682b      	ldr	r3, [r5, #0]
 800cd2c:	4043      	eors	r3, r0
 800cd2e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800cd32:	d146      	bne.n	800cdc2 <ai_platform_network_process+0x1be>
 800cd34:	692b      	ldr	r3, [r5, #16]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d03a      	beq.n	800cdb0 <ai_platform_network_process+0x1ac>
 800cd3a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800cd3e:	f1bb 0f00 	cmp.w	fp, #0
 800cd42:	d02d      	beq.n	800cda0 <ai_platform_network_process+0x19c>
 800cd44:	68f2      	ldr	r2, [r6, #12]
 800cd46:	6973      	ldr	r3, [r6, #20]
 800cd48:	68d1      	ldr	r1, [r2, #12]
 800cd4a:	68da      	ldr	r2, [r3, #12]
 800cd4c:	fb02 f201 	mul.w	r2, r2, r1
 800cd50:	f8ca 2008 	str.w	r2, [sl, #8]
 800cd54:	88ab      	ldrh	r3, [r5, #4]
 800cd56:	fb02 f203 	mul.w	r2, r2, r3
 800cd5a:	f8ca 200c 	str.w	r2, [sl, #12]
 800cd5e:	6929      	ldr	r1, [r5, #16]
 800cd60:	f8ca 1004 	str.w	r1, [sl, #4]
 800cd64:	692b      	ldr	r3, [r5, #16]
 800cd66:	4413      	add	r3, r2
 800cd68:	9a03      	ldr	r2, [sp, #12]
 800cd6a:	5113      	str	r3, [r2, r4]
 800cd6c:	69b0      	ldr	r0, [r6, #24]
 800cd6e:	6803      	ldr	r3, [r0, #0]
 800cd70:	45d9      	cmp	r9, fp
 800cd72:	bf38      	it	cc
 800cd74:	46d9      	movcc	r9, fp
 800cd76:	009a      	lsls	r2, r3, #2
 800cd78:	d408      	bmi.n	800cd8c <ai_platform_network_process+0x188>
 800cd7a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800cd7e:	1a9b      	subs	r3, r3, r2
 800cd80:	4419      	add	r1, r3
 800cd82:	6081      	str	r1, [r0, #8]
 800cd84:	69b3      	ldr	r3, [r6, #24]
 800cd86:	f8da 2004 	ldr.w	r2, [sl, #4]
 800cd8a:	60da      	str	r2, [r3, #12]
 800cd8c:	883b      	ldrh	r3, [r7, #0]
 800cd8e:	f108 0801 	add.w	r8, r8, #1
 800cd92:	3518      	adds	r5, #24
 800cd94:	e78d      	b.n	800ccb2 <ai_platform_network_process+0xae>
 800cd96:	46a3      	mov	fp, r4
 800cd98:	4658      	mov	r0, fp
 800cd9a:	b005      	add	sp, #20
 800cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda0:	9c01      	ldr	r4, [sp, #4]
 800cda2:	2221      	movs	r2, #33	; 0x21
 800cda4:	f104 0010 	add.w	r0, r4, #16
 800cda8:	2112      	movs	r1, #18
 800cdaa:	f000 f9ab 	bl	800d104 <core_set_error>
 800cdae:	e7f3      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cdb0:	9c01      	ldr	r4, [sp, #4]
 800cdb2:	2217      	movs	r2, #23
 800cdb4:	f104 0010 	add.w	r0, r4, #16
 800cdb8:	2112      	movs	r1, #18
 800cdba:	469b      	mov	fp, r3
 800cdbc:	f000 f9a2 	bl	800d104 <core_set_error>
 800cdc0:	e7ea      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cdc2:	9c01      	ldr	r4, [sp, #4]
 800cdc4:	2219      	movs	r2, #25
 800cdc6:	f104 0010 	add.w	r0, r4, #16
 800cdca:	2112      	movs	r1, #18
 800cdcc:	f000 f99a 	bl	800d104 <core_set_error>
 800cdd0:	f04f 0b00 	mov.w	fp, #0
 800cdd4:	e7e0      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cdd6:	9c01      	ldr	r4, [sp, #4]
 800cdd8:	2218      	movs	r2, #24
 800cdda:	f104 0010 	add.w	r0, r4, #16
 800cdde:	2112      	movs	r1, #18
 800cde0:	f000 f990 	bl	800d104 <core_set_error>
 800cde4:	f04f 0b00 	mov.w	fp, #0
 800cde8:	e7d6      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cdea:	9c01      	ldr	r4, [sp, #4]
 800cdec:	f104 0010 	add.w	r0, r4, #16
 800cdf0:	2217      	movs	r2, #23
 800cdf2:	2112      	movs	r1, #18
 800cdf4:	f000 f986 	bl	800d104 <core_set_error>
 800cdf8:	f04f 0b00 	mov.w	fp, #0
 800cdfc:	e7cc      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cdfe:	bf00      	nop
 800ce00:	a1c00100 	.word	0xa1c00100
 800ce04:	e0002000 	.word	0xe0002000
 800ce08:	e0042000 	.word	0xe0042000
 800ce0c:	58024c08 	.word	0x58024c08
 800ce10:	58024c00 	.word	0x58024c00
 800ce14:	f407a5c2 	.word	0xf407a5c2
 800ce18:	b5e8b5cd 	.word	0xb5e8b5cd
 800ce1c:	40023008 	.word	0x40023008
 800ce20:	40023000 	.word	0x40023000
 800ce24:	9c01      	ldr	r4, [sp, #4]
 800ce26:	9a02      	ldr	r2, [sp, #8]
 800ce28:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800ce2a:	2a00      	cmp	r2, #0
 800ce2c:	f000 80a9 	beq.w	800cf82 <ai_platform_network_process+0x37e>
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	f240 809b 	bls.w	800cf6c <ai_platform_network_process+0x368>
 800ce36:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800ce3a:	f11a 0f0c 	cmn.w	sl, #12
 800ce3e:	f000 8095 	beq.w	800cf6c <ai_platform_network_process+0x368>
 800ce42:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f000 8090 	beq.w	800cf6c <ai_platform_network_process+0x368>
 800ce4c:	9d02      	ldr	r5, [sp, #8]
 800ce4e:	9401      	str	r4, [sp, #4]
 800ce50:	f04f 0800 	mov.w	r8, #0
 800ce54:	4598      	cmp	r8, r3
 800ce56:	f080 8092 	bcs.w	800cf7e <ai_platform_network_process+0x37a>
 800ce5a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f000 808d 	beq.w	800cf7e <ai_platform_network_process+0x37a>
 800ce64:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800ce68:	2e00      	cmp	r6, #0
 800ce6a:	f000 8088 	beq.w	800cf7e <ai_platform_network_process+0x37a>
 800ce6e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	9302      	str	r3, [sp, #8]
 800ce76:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800ce7a:	191f      	adds	r7, r3, r4
 800ce7c:	f000 812d 	beq.w	800d0da <ai_platform_network_process+0x4d6>
 800ce80:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800ce84:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800ce88:	69b0      	ldr	r0, [r6, #24]
 800ce8a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800ce8e:	6841      	ldr	r1, [r0, #4]
 800ce90:	fb0b f30e 	mul.w	r3, fp, lr
 800ce94:	fb0c f303 	mul.w	r3, ip, r3
 800ce98:	4299      	cmp	r1, r3
 800ce9a:	d366      	bcc.n	800cf6a <ai_platform_network_process+0x366>
 800ce9c:	68f3      	ldr	r3, [r6, #12]
 800ce9e:	68da      	ldr	r2, [r3, #12]
 800cea0:	455a      	cmp	r2, fp
 800cea2:	d162      	bne.n	800cf6a <ai_platform_network_process+0x366>
 800cea4:	689a      	ldr	r2, [r3, #8]
 800cea6:	4572      	cmp	r2, lr
 800cea8:	d15f      	bne.n	800cf6a <ai_platform_network_process+0x366>
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	459c      	cmp	ip, r3
 800ceae:	d15c      	bne.n	800cf6a <ai_platform_network_process+0x366>
 800ceb0:	6800      	ldr	r0, [r0, #0]
 800ceb2:	f003 fa95 	bl	80103e0 <ai_array_get_byte_size>
 800ceb6:	68f2      	ldr	r2, [r6, #12]
 800ceb8:	6973      	ldr	r3, [r6, #20]
 800ceba:	68d2      	ldr	r2, [r2, #12]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	fb03 f302 	mul.w	r3, r3, r2
 800cec2:	4298      	cmp	r0, r3
 800cec4:	d351      	bcc.n	800cf6a <ai_platform_network_process+0x366>
 800cec6:	69b3      	ldr	r3, [r6, #24]
 800cec8:	6818      	ldr	r0, [r3, #0]
 800ceca:	f003 fa31 	bl	8010330 <ai_array_to_buffer_fmt>
 800cece:	682b      	ldr	r3, [r5, #0]
 800ced0:	4043      	eors	r3, r0
 800ced2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800ced6:	d13e      	bne.n	800cf56 <ai_platform_network_process+0x352>
 800ced8:	692b      	ldr	r3, [r5, #16]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d032      	beq.n	800cf44 <ai_platform_network_process+0x340>
 800cede:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800cee2:	f1bb 0f00 	cmp.w	fp, #0
 800cee6:	d025      	beq.n	800cf34 <ai_platform_network_process+0x330>
 800cee8:	68f2      	ldr	r2, [r6, #12]
 800ceea:	6973      	ldr	r3, [r6, #20]
 800ceec:	68d1      	ldr	r1, [r2, #12]
 800ceee:	68da      	ldr	r2, [r3, #12]
 800cef0:	fb02 f201 	mul.w	r2, r2, r1
 800cef4:	60ba      	str	r2, [r7, #8]
 800cef6:	88ab      	ldrh	r3, [r5, #4]
 800cef8:	fb02 f203 	mul.w	r2, r2, r3
 800cefc:	60fa      	str	r2, [r7, #12]
 800cefe:	6929      	ldr	r1, [r5, #16]
 800cf00:	6079      	str	r1, [r7, #4]
 800cf02:	692b      	ldr	r3, [r5, #16]
 800cf04:	4413      	add	r3, r2
 800cf06:	9a02      	ldr	r2, [sp, #8]
 800cf08:	5113      	str	r3, [r2, r4]
 800cf0a:	69b0      	ldr	r0, [r6, #24]
 800cf0c:	6803      	ldr	r3, [r0, #0]
 800cf0e:	45d9      	cmp	r9, fp
 800cf10:	bf38      	it	cc
 800cf12:	46d9      	movcc	r9, fp
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	d407      	bmi.n	800cf28 <ai_platform_network_process+0x324>
 800cf18:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800cf1c:	1a9b      	subs	r3, r3, r2
 800cf1e:	4419      	add	r1, r3
 800cf20:	6081      	str	r1, [r0, #8]
 800cf22:	69b3      	ldr	r3, [r6, #24]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	60da      	str	r2, [r3, #12]
 800cf28:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800cf2c:	f108 0801 	add.w	r8, r8, #1
 800cf30:	3518      	adds	r5, #24
 800cf32:	e78f      	b.n	800ce54 <ai_platform_network_process+0x250>
 800cf34:	9c01      	ldr	r4, [sp, #4]
 800cf36:	2221      	movs	r2, #33	; 0x21
 800cf38:	f104 0010 	add.w	r0, r4, #16
 800cf3c:	2113      	movs	r1, #19
 800cf3e:	f000 f8e1 	bl	800d104 <core_set_error>
 800cf42:	e729      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cf44:	9c01      	ldr	r4, [sp, #4]
 800cf46:	2217      	movs	r2, #23
 800cf48:	f104 0010 	add.w	r0, r4, #16
 800cf4c:	2113      	movs	r1, #19
 800cf4e:	469b      	mov	fp, r3
 800cf50:	f000 f8d8 	bl	800d104 <core_set_error>
 800cf54:	e720      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cf56:	9c01      	ldr	r4, [sp, #4]
 800cf58:	2219      	movs	r2, #25
 800cf5a:	f104 0010 	add.w	r0, r4, #16
 800cf5e:	2113      	movs	r1, #19
 800cf60:	f000 f8d0 	bl	800d104 <core_set_error>
 800cf64:	f04f 0b00 	mov.w	fp, #0
 800cf68:	e716      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cf6a:	9c01      	ldr	r4, [sp, #4]
 800cf6c:	f104 0010 	add.w	r0, r4, #16
 800cf70:	2218      	movs	r2, #24
 800cf72:	2113      	movs	r1, #19
 800cf74:	f000 f8c6 	bl	800d104 <core_set_error>
 800cf78:	f04f 0b00 	mov.w	fp, #0
 800cf7c:	e70c      	b.n	800cd98 <ai_platform_network_process+0x194>
 800cf7e:	9c01      	ldr	r4, [sp, #4]
 800cf80:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800cf82:	f8a4 9014 	strh.w	r9, [r4, #20]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 80a4 	beq.w	800d0d4 <ai_platform_network_process+0x4d0>
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800cf90:	f240 809e 	bls.w	800d0d0 <ai_platform_network_process+0x4cc>
 800cf94:	f105 070c 	add.w	r7, r5, #12
 800cf98:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800cf9c:	8aa3      	ldrh	r3, [r4, #20]
 800cf9e:	455b      	cmp	r3, fp
 800cfa0:	f67f aefa 	bls.w	800cd98 <ai_platform_network_process+0x194>
 800cfa4:	9401      	str	r4, [sp, #4]
 800cfa6:	2d00      	cmp	r5, #0
 800cfa8:	d036      	beq.n	800d018 <ai_platform_network_process+0x414>
 800cfaa:	882b      	ldrh	r3, [r5, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d033      	beq.n	800d018 <ai_platform_network_process+0x414>
 800cfb0:	686b      	ldr	r3, [r5, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d030      	beq.n	800d018 <ai_platform_network_process+0x414>
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f04f 0800 	mov.w	r8, #0
 800cfbc:	b9db      	cbnz	r3, 800cff6 <ai_platform_network_process+0x3f2>
 800cfbe:	e02b      	b.n	800d018 <ai_platform_network_process+0x414>
 800cfc0:	68d4      	ldr	r4, [r2, #12]
 800cfc2:	1b00      	subs	r0, r0, r4
 800cfc4:	4401      	add	r1, r0
 800cfc6:	6091      	str	r1, [r2, #8]
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	6872      	ldr	r2, [r6, #4]
 800cfcc:	60da      	str	r2, [r3, #12]
 800cfce:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800cfd2:	f85a 2009 	ldr.w	r2, [sl, r9]
 800cfd6:	440b      	add	r3, r1
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	bf24      	itt	cs
 800cfdc:	68f3      	ldrcs	r3, [r6, #12]
 800cfde:	1ad3      	subcs	r3, r2, r3
 800cfe0:	6073      	str	r3, [r6, #4]
 800cfe2:	882b      	ldrh	r3, [r5, #0]
 800cfe4:	f108 0801 	add.w	r8, r8, #1
 800cfe8:	4598      	cmp	r8, r3
 800cfea:	d215      	bcs.n	800d018 <ai_platform_network_process+0x414>
 800cfec:	686b      	ldr	r3, [r5, #4]
 800cfee:	b19b      	cbz	r3, 800d018 <ai_platform_network_process+0x414>
 800cff0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800cff4:	b183      	cbz	r3, 800d018 <ai_platform_network_process+0x414>
 800cff6:	68a9      	ldr	r1, [r5, #8]
 800cff8:	699a      	ldr	r2, [r3, #24]
 800cffa:	f8d1 a000 	ldr.w	sl, [r1]
 800cffe:	6814      	ldr	r4, [r2, #0]
 800d000:	6890      	ldr	r0, [r2, #8]
 800d002:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800d006:	eb0a 0609 	add.w	r6, sl, r9
 800d00a:	00a4      	lsls	r4, r4, #2
 800d00c:	6871      	ldr	r1, [r6, #4]
 800d00e:	d5d7      	bpl.n	800cfc0 <ai_platform_network_process+0x3bc>
 800d010:	68b2      	ldr	r2, [r6, #8]
 800d012:	f003 fa69 	bl	80104e8 <memcpy>
 800d016:	e7da      	b.n	800cfce <ai_platform_network_process+0x3ca>
 800d018:	9801      	ldr	r0, [sp, #4]
 800d01a:	f003 f93b 	bl	8010294 <ai_layers_forward_all>
 800d01e:	2f00      	cmp	r7, #0
 800d020:	d047      	beq.n	800d0b2 <ai_platform_network_process+0x4ae>
 800d022:	883b      	ldrh	r3, [r7, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d044      	beq.n	800d0b2 <ai_platform_network_process+0x4ae>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d041      	beq.n	800d0b2 <ai_platform_network_process+0x4ae>
 800d02e:	6818      	ldr	r0, [r3, #0]
 800d030:	2800      	cmp	r0, #0
 800d032:	d03e      	beq.n	800d0b2 <ai_platform_network_process+0x4ae>
 800d034:	f04f 0800 	mov.w	r8, #0
 800d038:	e019      	b.n	800d06e <ai_platform_network_process+0x46a>
 800d03a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800d03e:	4293      	cmp	r3, r2
 800d040:	bf24      	itt	cs
 800d042:	68f3      	ldrcs	r3, [r6, #12]
 800d044:	1ad3      	subcs	r3, r2, r3
 800d046:	6073      	str	r3, [r6, #4]
 800d048:	6981      	ldr	r1, [r0, #24]
 800d04a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800d04e:	1b12      	subs	r2, r2, r4
 800d050:	4413      	add	r3, r2
 800d052:	608b      	str	r3, [r1, #8]
 800d054:	6983      	ldr	r3, [r0, #24]
 800d056:	6872      	ldr	r2, [r6, #4]
 800d058:	60da      	str	r2, [r3, #12]
 800d05a:	883b      	ldrh	r3, [r7, #0]
 800d05c:	f108 0801 	add.w	r8, r8, #1
 800d060:	4598      	cmp	r8, r3
 800d062:	d226      	bcs.n	800d0b2 <ai_platform_network_process+0x4ae>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	b323      	cbz	r3, 800d0b2 <ai_platform_network_process+0x4ae>
 800d068:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d06c:	b308      	cbz	r0, 800d0b2 <ai_platform_network_process+0x4ae>
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6981      	ldr	r1, [r0, #24]
 800d072:	f8d3 a000 	ldr.w	sl, [r3]
 800d076:	680c      	ldr	r4, [r1, #0]
 800d078:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800d07c:	eb0a 0609 	add.w	r6, sl, r9
 800d080:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800d084:	00a4      	lsls	r4, r4, #2
 800d086:	eb0c 0302 	add.w	r3, ip, r2
 800d08a:	d5d6      	bpl.n	800d03a <ai_platform_network_process+0x436>
 800d08c:	6889      	ldr	r1, [r1, #8]
 800d08e:	4660      	mov	r0, ip
 800d090:	f003 fa2a 	bl	80104e8 <memcpy>
 800d094:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800d098:	f85a 2009 	ldr.w	r2, [sl, r9]
 800d09c:	440b      	add	r3, r1
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	bf24      	itt	cs
 800d0a2:	68f3      	ldrcs	r3, [r6, #12]
 800d0a4:	1ad3      	subcs	r3, r2, r3
 800d0a6:	6073      	str	r3, [r6, #4]
 800d0a8:	883b      	ldrh	r3, [r7, #0]
 800d0aa:	f108 0801 	add.w	r8, r8, #1
 800d0ae:	4598      	cmp	r8, r3
 800d0b0:	d3d8      	bcc.n	800d064 <ai_platform_network_process+0x460>
 800d0b2:	9b01      	ldr	r3, [sp, #4]
 800d0b4:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	f10b 0b01 	add.w	fp, fp, #1
 800d0be:	8a9b      	ldrh	r3, [r3, #20]
 800d0c0:	fa1f fb8b 	uxth.w	fp, fp
 800d0c4:	455b      	cmp	r3, fp
 800d0c6:	f8a2 b016 	strh.w	fp, [r2, #22]
 800d0ca:	f63f af6c 	bhi.w	800cfa6 <ai_platform_network_process+0x3a2>
 800d0ce:	e663      	b.n	800cd98 <ai_platform_network_process+0x194>
 800d0d0:	2700      	movs	r7, #0
 800d0d2:	e761      	b.n	800cf98 <ai_platform_network_process+0x394>
 800d0d4:	461d      	mov	r5, r3
 800d0d6:	461f      	mov	r7, r3
 800d0d8:	e75e      	b.n	800cf98 <ai_platform_network_process+0x394>
 800d0da:	9c01      	ldr	r4, [sp, #4]
 800d0dc:	2217      	movs	r2, #23
 800d0de:	f104 0010 	add.w	r0, r4, #16
 800d0e2:	2113      	movs	r1, #19
 800d0e4:	f000 f80e 	bl	800d104 <core_set_error>
 800d0e8:	46bb      	mov	fp, r7
 800d0ea:	e655      	b.n	800cd98 <ai_platform_network_process+0x194>
 800d0ec:	f104 0010 	add.w	r0, r4, #16
 800d0f0:	2230      	movs	r2, #48	; 0x30
 800d0f2:	2111      	movs	r1, #17
 800d0f4:	f000 f806 	bl	800d104 <core_set_error>
 800d0f8:	e64e      	b.n	800cd98 <ai_platform_network_process+0x194>
 800d0fa:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800d0fc:	e5c1      	b.n	800cc82 <ai_platform_network_process+0x7e>
 800d0fe:	bf00      	nop

0800d100 <core_init>:
 800d100:	2001      	movs	r0, #1
 800d102:	4770      	bx	lr

0800d104 <core_set_error>:
 800d104:	7803      	ldrb	r3, [r0, #0]
 800d106:	b933      	cbnz	r3, 800d116 <core_set_error+0x12>
 800d108:	7001      	strb	r1, [r0, #0]
 800d10a:	6803      	ldr	r3, [r0, #0]
 800d10c:	f362 231f 	bfi	r3, r2, #8, #24
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	2001      	movs	r0, #1
 800d114:	4770      	bx	lr
 800d116:	2000      	movs	r0, #0
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop

0800d11c <func_dummy>:
 800d11c:	4770      	bx	lr
 800d11e:	bf00      	nop

0800d120 <ai_dict8_dot_array_f32>:
 800d120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d124:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d128:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800d12c:	f000 80c0 	beq.w	800d2b0 <ai_dict8_dot_array_f32+0x190>
 800d130:	f101 0408 	add.w	r4, r1, #8
 800d134:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800d138:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800d2b8 <ai_dict8_dot_array_f32+0x198>
 800d13c:	eb04 0e09 	add.w	lr, r4, r9
 800d140:	f103 0520 	add.w	r5, r3, #32
 800d144:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800d148:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800d14c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800d150:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800d154:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800d158:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800d15c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800d160:	ed55 3a04 	vldr	s7, [r5, #-16]
 800d164:	ed55 4a03 	vldr	s9, [r5, #-12]
 800d168:	ed55 5a02 	vldr	s11, [r5, #-8]
 800d16c:	ed55 6a01 	vldr	s13, [r5, #-4]
 800d170:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d174:	edd6 7a00 	vldr	s15, [r6]
 800d178:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800d17c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d180:	ee67 7a83 	vmul.f32	s15, s15, s6
 800d184:	ed9a 3a00 	vldr	s6, [sl]
 800d188:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800d18c:	eee3 7a05 	vfma.f32	s15, s6, s10
 800d190:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d194:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d198:	ed97 3a00 	vldr	s6, [r7]
 800d19c:	ed96 5a00 	vldr	s10, [r6]
 800d1a0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800d1a4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800d1a8:	eee3 7a04 	vfma.f32	s15, s6, s8
 800d1ac:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d1b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d1b4:	ed9a 3a00 	vldr	s6, [sl]
 800d1b8:	ed96 4a00 	vldr	s8, [r6]
 800d1bc:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800d1c0:	eee5 7a06 	vfma.f32	s15, s10, s12
 800d1c4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d1c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d1cc:	ed97 5a00 	vldr	s10, [r7]
 800d1d0:	ed96 6a00 	vldr	s12, [r6]
 800d1d4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d1d8:	3408      	adds	r4, #8
 800d1da:	45a6      	cmp	lr, r4
 800d1dc:	f105 0520 	add.w	r5, r5, #32
 800d1e0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d1e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d1e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d1ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1f0:	d1a8      	bne.n	800d144 <ai_dict8_dot_array_f32+0x24>
 800d1f2:	4449      	add	r1, r9
 800d1f4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800d1f8:	f01c 0c07 	ands.w	ip, ip, #7
 800d1fc:	d050      	beq.n	800d2a0 <ai_dict8_dot_array_f32+0x180>
 800d1fe:	780c      	ldrb	r4, [r1, #0]
 800d200:	edd3 6a00 	vldr	s13, [r3]
 800d204:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d208:	edd4 7a00 	vldr	s15, [r4]
 800d20c:	f1bc 0f01 	cmp.w	ip, #1
 800d210:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d214:	d044      	beq.n	800d2a0 <ai_dict8_dot_array_f32+0x180>
 800d216:	784c      	ldrb	r4, [r1, #1]
 800d218:	edd3 6a01 	vldr	s13, [r3, #4]
 800d21c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d220:	edd4 7a00 	vldr	s15, [r4]
 800d224:	f1bc 0f02 	cmp.w	ip, #2
 800d228:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d22c:	d038      	beq.n	800d2a0 <ai_dict8_dot_array_f32+0x180>
 800d22e:	788c      	ldrb	r4, [r1, #2]
 800d230:	edd3 6a02 	vldr	s13, [r3, #8]
 800d234:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d238:	edd4 7a00 	vldr	s15, [r4]
 800d23c:	f1bc 0f03 	cmp.w	ip, #3
 800d240:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d244:	d02c      	beq.n	800d2a0 <ai_dict8_dot_array_f32+0x180>
 800d246:	78cc      	ldrb	r4, [r1, #3]
 800d248:	edd3 6a03 	vldr	s13, [r3, #12]
 800d24c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d250:	edd4 7a00 	vldr	s15, [r4]
 800d254:	f1bc 0f04 	cmp.w	ip, #4
 800d258:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d25c:	d020      	beq.n	800d2a0 <ai_dict8_dot_array_f32+0x180>
 800d25e:	790c      	ldrb	r4, [r1, #4]
 800d260:	edd3 6a04 	vldr	s13, [r3, #16]
 800d264:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d268:	edd4 7a00 	vldr	s15, [r4]
 800d26c:	f1bc 0f05 	cmp.w	ip, #5
 800d270:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d274:	d014      	beq.n	800d2a0 <ai_dict8_dot_array_f32+0x180>
 800d276:	794c      	ldrb	r4, [r1, #5]
 800d278:	edd3 6a05 	vldr	s13, [r3, #20]
 800d27c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d280:	edd4 7a00 	vldr	s15, [r4]
 800d284:	f1bc 0f06 	cmp.w	ip, #6
 800d288:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d28c:	d008      	beq.n	800d2a0 <ai_dict8_dot_array_f32+0x180>
 800d28e:	7989      	ldrb	r1, [r1, #6]
 800d290:	edd3 7a06 	vldr	s15, [r3, #24]
 800d294:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d298:	edd2 6a00 	vldr	s13, [r2]
 800d29c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d2a0:	edd0 7a00 	vldr	s15, [r0]
 800d2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2a8:	ed80 7a00 	vstr	s14, [r0]
 800d2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800d2b8 <ai_dict8_dot_array_f32+0x198>
 800d2b4:	e7a0      	b.n	800d1f8 <ai_dict8_dot_array_f32+0xd8>
 800d2b6:	bf00      	nop
 800d2b8:	00000000 	.word	0x00000000

0800d2bc <ai_dict4_dot_array_f32>:
 800d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d2c2:	f027 0c01 	bic.w	ip, r7, #1
 800d2c6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800d2ca:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800d2ce:	f000 80ae 	beq.w	800d42e <ai_dict4_dot_array_f32+0x172>
 800d2d2:	1d0d      	adds	r5, r1, #4
 800d2d4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800d2d8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800d434 <ai_dict4_dot_array_f32+0x178>
 800d2dc:	eb05 0e09 	add.w	lr, r5, r9
 800d2e0:	f103 0420 	add.w	r4, r3, #32
 800d2e4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800d2e8:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800d2ec:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800d2f0:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800d2f4:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800d2f8:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800d2fc:	ed14 5a04 	vldr	s10, [r4, #-16]
 800d300:	ed54 5a03 	vldr	s11, [r4, #-12]
 800d304:	ed14 6a02 	vldr	s12, [r4, #-8]
 800d308:	ed54 6a01 	vldr	s13, [r4, #-4]
 800d30c:	f006 0a0f 	and.w	sl, r6, #15
 800d310:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d314:	edda 7a00 	vldr	s15, [sl]
 800d318:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800d31c:	0936      	lsrs	r6, r6, #4
 800d31e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d322:	ee67 7a83 	vmul.f32	s15, s15, s6
 800d326:	ed96 3a00 	vldr	s6, [r6]
 800d32a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800d32e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d332:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d336:	f00b 0b0f 	and.w	fp, fp, #15
 800d33a:	edd6 3a00 	vldr	s7, [r6]
 800d33e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800d342:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d346:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800d34a:	3504      	adds	r5, #4
 800d34c:	ed9b 4a00 	vldr	s8, [fp]
 800d350:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800d354:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d358:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800d35c:	f00a 0a0f 	and.w	sl, sl, #15
 800d360:	eddb 4a00 	vldr	s9, [fp]
 800d364:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d368:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d36c:	45ae      	cmp	lr, r5
 800d36e:	ed9a 5a00 	vldr	s10, [sl]
 800d372:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800d376:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d37a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800d37e:	f006 060f 	and.w	r6, r6, #15
 800d382:	edda 5a00 	vldr	s11, [sl]
 800d386:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d38a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d38e:	f104 0420 	add.w	r4, r4, #32
 800d392:	ed96 6a00 	vldr	s12, [r6]
 800d396:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d39a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d39e:	d1a1      	bne.n	800d2e4 <ai_dict4_dot_array_f32+0x28>
 800d3a0:	4449      	add	r1, r9
 800d3a2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800d3a6:	459c      	cmp	ip, r3
 800d3a8:	d92d      	bls.n	800d406 <ai_dict4_dot_array_f32+0x14a>
 800d3aa:	f10c 0c07 	add.w	ip, ip, #7
 800d3ae:	f103 0508 	add.w	r5, r3, #8
 800d3b2:	ebac 0c05 	sub.w	ip, ip, r5
 800d3b6:	f02c 0407 	bic.w	r4, ip, #7
 800d3ba:	f103 0810 	add.w	r8, r3, #16
 800d3be:	44a0      	add	r8, r4
 800d3c0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800d3c4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800d3c8:	ed15 6a01 	vldr	s12, [r5, #-4]
 800d3cc:	ed55 6a02 	vldr	s13, [r5, #-8]
 800d3d0:	f004 060f 	and.w	r6, r4, #15
 800d3d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3d8:	0924      	lsrs	r4, r4, #4
 800d3da:	edd6 7a00 	vldr	s15, [r6]
 800d3de:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d3e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d3e6:	ed94 6a00 	vldr	s12, [r4]
 800d3ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d3ee:	3508      	adds	r5, #8
 800d3f0:	45a8      	cmp	r8, r5
 800d3f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3f6:	d1e5      	bne.n	800d3c4 <ai_dict4_dot_array_f32+0x108>
 800d3f8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800d3fc:	f10c 0c01 	add.w	ip, ip, #1
 800d400:	4461      	add	r1, ip
 800d402:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800d406:	07fc      	lsls	r4, r7, #31
 800d408:	d509      	bpl.n	800d41e <ai_dict4_dot_array_f32+0x162>
 800d40a:	7809      	ldrb	r1, [r1, #0]
 800d40c:	edd3 7a00 	vldr	s15, [r3]
 800d410:	090b      	lsrs	r3, r1, #4
 800d412:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d416:	edd2 6a00 	vldr	s13, [r2]
 800d41a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d41e:	edd0 7a00 	vldr	s15, [r0]
 800d422:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d426:	ed80 7a00 	vstr	s14, [r0]
 800d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800d434 <ai_dict4_dot_array_f32+0x178>
 800d432:	e7b8      	b.n	800d3a6 <ai_dict4_dot_array_f32+0xea>
 800d434:	00000000 	.word	0x00000000

0800d438 <ai_dict_decompress_f32>:
 800d438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d43c:	9f08      	ldr	r7, [sp, #32]
 800d43e:	2b04      	cmp	r3, #4
 800d440:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800d444:	d00e      	beq.n	800d464 <ai_dict_decompress_f32+0x2c>
 800d446:	2b08      	cmp	r3, #8
 800d448:	d10a      	bne.n	800d460 <ai_dict_decompress_f32+0x28>
 800d44a:	42b8      	cmp	r0, r7
 800d44c:	d208      	bcs.n	800d460 <ai_dict_decompress_f32+0x28>
 800d44e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d452:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f840 3b04 	str.w	r3, [r0], #4
 800d45c:	4287      	cmp	r7, r0
 800d45e:	d8f6      	bhi.n	800d44e <ai_dict_decompress_f32+0x16>
 800d460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d464:	9b07      	ldr	r3, [sp, #28]
 800d466:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800d46a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800d46e:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 800d472:	f003 0e01 	and.w	lr, r3, #1
 800d476:	42b8      	cmp	r0, r7
 800d478:	d2f2      	bcs.n	800d460 <ai_dict_decompress_f32+0x28>
 800d47a:	f1bc 0f00 	cmp.w	ip, #0
 800d47e:	d01a      	beq.n	800d4b6 <ai_dict_decompress_f32+0x7e>
 800d480:	f100 0508 	add.w	r5, r0, #8
 800d484:	1e4c      	subs	r4, r1, #1
 800d486:	eb01 0608 	add.w	r6, r1, r8
 800d48a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d48e:	091b      	lsrs	r3, r3, #4
 800d490:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d494:	42a6      	cmp	r6, r4
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f845 3c08 	str.w	r3, [r5, #-8]
 800d49c:	7823      	ldrb	r3, [r4, #0]
 800d49e:	f003 030f 	and.w	r3, r3, #15
 800d4a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4a6:	f105 0508 	add.w	r5, r5, #8
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f845 3c0c 	str.w	r3, [r5, #-12]
 800d4b0:	d1eb      	bne.n	800d48a <ai_dict_decompress_f32+0x52>
 800d4b2:	4461      	add	r1, ip
 800d4b4:	4448      	add	r0, r9
 800d4b6:	f1be 0f00 	cmp.w	lr, #0
 800d4ba:	d103      	bne.n	800d4c4 <ai_dict_decompress_f32+0x8c>
 800d4bc:	4287      	cmp	r7, r0
 800d4be:	d8dc      	bhi.n	800d47a <ai_dict_decompress_f32+0x42>
 800d4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4c4:	780b      	ldrb	r3, [r1, #0]
 800d4c6:	091b      	lsrs	r3, r3, #4
 800d4c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4cc:	3101      	adds	r1, #1
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6003      	str	r3, [r0, #0]
 800d4d2:	3004      	adds	r0, #4
 800d4d4:	e7cf      	b.n	800d476 <ai_dict_decompress_f32+0x3e>
 800d4d6:	bf00      	nop

0800d4d8 <forward_conv2d>:
 800d4d8:	6983      	ldr	r3, [r0, #24]
 800d4da:	881a      	ldrh	r2, [r3, #0]
 800d4dc:	2a00      	cmp	r2, #0
 800d4de:	f000 87c7 	beq.w	800e470 <forward_conv2d+0xf98>
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	6859      	ldr	r1, [r3, #4]
 800d4e6:	b101      	cbz	r1, 800d4ea <forward_conv2d+0x12>
 800d4e8:	6809      	ldr	r1, [r1, #0]
 800d4ea:	2a01      	cmp	r2, #1
 800d4ec:	f240 87bd 	bls.w	800e46a <forward_conv2d+0xf92>
 800d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	ed2d 8b10 	vpush	{d8-d15}
 800d4f8:	b0cb      	sub	sp, #300	; 0x12c
 800d4fa:	691c      	ldr	r4, [r3, #16]
 800d4fc:	af02      	add	r7, sp, #8
 800d4fe:	2c00      	cmp	r4, #0
 800d500:	f000 87af 	beq.w	800e462 <forward_conv2d+0xf8a>
 800d504:	6824      	ldr	r4, [r4, #0]
 800d506:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800d50a:	2a02      	cmp	r2, #2
 800d50c:	f000 87a4 	beq.w	800e458 <forward_conv2d+0xf80>
 800d510:	69dd      	ldr	r5, [r3, #28]
 800d512:	2d00      	cmp	r5, #0
 800d514:	f000 8799 	beq.w	800e44a <forward_conv2d+0xf72>
 800d518:	f113 0218 	adds.w	r2, r3, #24
 800d51c:	682c      	ldr	r4, [r5, #0]
 800d51e:	d004      	beq.n	800d52a <forward_conv2d+0x52>
 800d520:	8b1b      	ldrh	r3, [r3, #24]
 800d522:	2b01      	cmp	r3, #1
 800d524:	f240 87a6 	bls.w	800e474 <forward_conv2d+0xf9c>
 800d528:	686a      	ldr	r2, [r5, #4]
 800d52a:	68ab      	ldr	r3, [r5, #8]
 800d52c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800d530:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800d534:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800d538:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800d53c:	68ce      	ldr	r6, [r1, #12]
 800d53e:	69a1      	ldr	r1, [r4, #24]
 800d540:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800d544:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d548:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800d54c:	f8de 1004 	ldr.w	r1, [lr, #4]
 800d550:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800d554:	f8de 100c 	ldr.w	r1, [lr, #12]
 800d558:	6479      	str	r1, [r7, #68]	; 0x44
 800d55a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800d55e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800d562:	6871      	ldr	r1, [r6, #4]
 800d564:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800d568:	68f1      	ldr	r1, [r6, #12]
 800d56a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800d56e:	68b1      	ldr	r1, [r6, #8]
 800d570:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800d574:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d578:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800d57c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d580:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800d584:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800d588:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800d58a:	6889      	ldr	r1, [r1, #8]
 800d58c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800d590:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d592:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800d596:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800d59a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d59c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800d5a0:	69c1      	ldr	r1, [r0, #28]
 800d5a2:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800d5a6:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 800d5aa:	2a00      	cmp	r2, #0
 800d5ac:	f000 8749 	beq.w	800e442 <forward_conv2d+0xf6a>
 800d5b0:	6992      	ldr	r2, [r2, #24]
 800d5b2:	6892      	ldr	r2, [r2, #8]
 800d5b4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800d5b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d5bc:	6992      	ldr	r2, [r2, #24]
 800d5be:	6892      	ldr	r2, [r2, #8]
 800d5c0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	6a00      	ldr	r0, [r0, #32]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	f000 872c 	beq.w	800e426 <forward_conv2d+0xf4e>
 800d5ce:	699a      	ldr	r2, [r3, #24]
 800d5d0:	2a00      	cmp	r2, #0
 800d5d2:	f000 8594 	beq.w	800e0fe <forward_conv2d+0xc26>
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d5de:	e9d2 0100 	ldrd	r0, r1, [r2]
 800d5e2:	6893      	ldr	r3, [r2, #8]
 800d5e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d5e8:	f002 fefa 	bl	80103e0 <ai_array_get_byte_size>
 800d5ec:	69a3      	ldr	r3, [r4, #24]
 800d5ee:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800d5f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800d5fc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d5fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d602:	f3c3 5441 	ubfx	r4, r3, #21, #2
 800d606:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 800d60a:	fa1f f088 	uxth.w	r0, r8
 800d60e:	4125      	asrs	r5, r4
 800d610:	3801      	subs	r0, #1
 800d612:	1e4c      	subs	r4, r1, #1
 800d614:	fb04 1100 	mla	r1, r4, r0, r1
 800d618:	6439      	str	r1, [r7, #64]	; 0x40
 800d61a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800d61e:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800d9c0 <forward_conv2d+0x4e8>
 800d622:	fa1f f289 	uxth.w	r2, r9
 800d626:	3a01      	subs	r2, #1
 800d628:	1e48      	subs	r0, r1, #1
 800d62a:	fb00 1102 	mla	r1, r0, r2, r1
 800d62e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d632:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800d636:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800d63a:	4610      	mov	r0, r2
 800d63c:	2a00      	cmp	r2, #0
 800d63e:	bf08      	it	eq
 800d640:	4660      	moveq	r0, ip
 800d642:	2b04      	cmp	r3, #4
 800d644:	b2ad      	uxth	r5, r5
 800d646:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800d64a:	f000 8533 	beq.w	800e0b4 <forward_conv2d+0xbdc>
 800d64e:	2b08      	cmp	r3, #8
 800d650:	f000 8530 	beq.w	800e0b4 <forward_conv2d+0xbdc>
 800d654:	fa1f f38b 	uxth.w	r3, fp
 800d658:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d65c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d660:	425b      	negs	r3, r3
 800d662:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d666:	2900      	cmp	r1, #0
 800d668:	f000 8242 	beq.w	800daf0 <forward_conv2d+0x618>
 800d66c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800d670:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 800d674:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 800d9bc <forward_conv2d+0x4e4>
 800d678:	fb00 f305 	mul.w	r3, r0, r5
 800d67c:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 800d680:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800d684:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800d688:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 800d68c:	663d      	str	r5, [r7, #96]	; 0x60
 800d68e:	fa0f f288 	sxth.w	r2, r8
 800d692:	fb03 f400 	mul.w	r4, r3, r0
 800d696:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800d69a:	fa1f f18a 	uxth.w	r1, sl
 800d69e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d6a2:	67bc      	str	r4, [r7, #120]	; 0x78
 800d6a4:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800d6a8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800d6ac:	4249      	negs	r1, r1
 800d6ae:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800d6b2:	0092      	lsls	r2, r2, #2
 800d6b4:	0081      	lsls	r1, r0, #2
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800d6bc:	fb04 f200 	mul.w	r2, r4, r0
 800d6c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800d6c4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800d6c8:	fb01 fc00 	mul.w	ip, r1, r0
 800d6cc:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800d6d0:	fb01 fc03 	mul.w	ip, r1, r3
 800d6d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6d6:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d6e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6e4:	fa0f f689 	sxth.w	r6, r9
 800d6e8:	469c      	mov	ip, r3
 800d6ea:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800d6ee:	4633      	mov	r3, r6
 800d6f0:	fb0c f606 	mul.w	r6, ip, r6
 800d6f4:	677e      	str	r6, [r7, #116]	; 0x74
 800d6f6:	4666      	mov	r6, ip
 800d6f8:	fb04 f606 	mul.w	r6, r4, r6
 800d6fc:	4686      	mov	lr, r0
 800d6fe:	4620      	mov	r0, r4
 800d700:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800d704:	62be      	str	r6, [r7, #40]	; 0x28
 800d706:	fb01 f404 	mul.w	r4, r1, r4
 800d70a:	fb03 f605 	mul.w	r6, r3, r5
 800d70e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800d710:	66bc      	str	r4, [r7, #104]	; 0x68
 800d712:	460b      	mov	r3, r1
 800d714:	4604      	mov	r4, r0
 800d716:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800d71a:	627e      	str	r6, [r7, #36]	; 0x24
 800d71c:	fb05 f404 	mul.w	r4, r5, r4
 800d720:	617c      	str	r4, [r7, #20]
 800d722:	460c      	mov	r4, r1
 800d724:	fb04 f403 	mul.w	r4, r4, r3
 800d728:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800d72c:	65bc      	str	r4, [r7, #88]	; 0x58
 800d72e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800d732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d736:	fb01 f104 	mul.w	r1, r1, r4
 800d73a:	61b9      	str	r1, [r7, #24]
 800d73c:	0091      	lsls	r1, r2, #2
 800d73e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d742:	64b9      	str	r1, [r7, #72]	; 0x48
 800d744:	fb00 f202 	mul.w	r2, r0, r2
 800d748:	0081      	lsls	r1, r0, #2
 800d74a:	61f9      	str	r1, [r7, #28]
 800d74c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800d750:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800d754:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800d758:	011a      	lsls	r2, r3, #4
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d768:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800d76c:	2300      	movs	r3, #0
 800d76e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d770:	607a      	str	r2, [r7, #4]
 800d772:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d774:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800d778:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d77c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d77e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d780:	2900      	cmp	r1, #0
 800d782:	441a      	add	r2, r3
 800d784:	bfb4      	ite	lt
 800d786:	2100      	movlt	r1, #0
 800d788:	2300      	movge	r3, #0
 800d78a:	4282      	cmp	r2, r0
 800d78c:	bf28      	it	cs
 800d78e:	4602      	movcs	r2, r0
 800d790:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800d794:	2801      	cmp	r0, #1
 800d796:	f000 8320 	beq.w	800ddda <forward_conv2d+0x902>
 800d79a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800d79e:	4281      	cmp	r1, r0
 800d7a0:	f000 81c3 	beq.w	800db2a <forward_conv2d+0x652>
 800d7a4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800d7a8:	2900      	cmp	r1, #0
 800d7aa:	f000 8182 	beq.w	800dab2 <forward_conv2d+0x5da>
 800d7ae:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800d7b2:	fb93 f1f0 	sdiv	r1, r3, r0
 800d7b6:	fb00 3111 	mls	r1, r0, r1, r3
 800d7ba:	1a41      	subs	r1, r0, r1
 800d7bc:	1ad2      	subs	r2, r2, r3
 800d7be:	fb91 f5f0 	sdiv	r5, r1, r0
 800d7c2:	fb00 1515 	mls	r5, r0, r5, r1
 800d7c6:	1b52      	subs	r2, r2, r5
 800d7c8:	4601      	mov	r1, r0
 800d7ca:	4402      	add	r2, r0
 800d7cc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800d7d0:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 800d7d4:	f8c7 b020 	str.w	fp, [r7, #32]
 800d7d8:	4604      	mov	r4, r0
 800d7da:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800d7de:	fbb4 f4f0 	udiv	r4, r4, r0
 800d7e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7e4:	3a01      	subs	r2, #1
 800d7e6:	fb92 f8f1 	sdiv	r8, r2, r1
 800d7ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d7ee:	eba0 0c04 	sub.w	ip, r0, r4
 800d7f2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800d7f6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800d7fa:	4614      	mov	r4, r2
 800d7fc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800d800:	fbb4 f2f2 	udiv	r2, r4, r2
 800d804:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800d808:	657a      	str	r2, [r7, #84]	; 0x54
 800d80a:	441d      	add	r5, r3
 800d80c:	fb0e f000 	mul.w	r0, lr, r0
 800d810:	440b      	add	r3, r1
 800d812:	eba6 0608 	sub.w	r6, r6, r8
 800d816:	fb04 f505 	mul.w	r5, r4, r5
 800d81a:	3b01      	subs	r3, #1
 800d81c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800d820:	fb93 f3f4 	sdiv	r3, r3, r4
 800d824:	fb00 f406 	mul.w	r4, r0, r6
 800d828:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800d82c:	66fd      	str	r5, [r7, #108]	; 0x6c
 800d82e:	0091      	lsls	r1, r2, #2
 800d830:	fb00 f003 	mul.w	r0, r0, r3
 800d834:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800d838:	6538      	str	r0, [r7, #80]	; 0x50
 800d83a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d83e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800d842:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800d846:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800d84a:	1ac3      	subs	r3, r0, r3
 800d84c:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800d850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d854:	008b      	lsls	r3, r1, #2
 800d856:	637b      	str	r3, [r7, #52]	; 0x34
 800d858:	00d3      	lsls	r3, r2, #3
 800d85a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d85c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d864:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d86c:	2300      	movs	r3, #0
 800d86e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800d872:	673b      	str	r3, [r7, #112]	; 0x70
 800d874:	46c2      	mov	sl, r8
 800d876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d87a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d87e:	eb03 0c02 	add.w	ip, r3, r2
 800d882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d886:	2b00      	cmp	r3, #0
 800d888:	f2c0 813b 	blt.w	800db02 <forward_conv2d+0x62a>
 800d88c:	2000      	movs	r0, #0
 800d88e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800d890:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 800d894:	4605      	mov	r5, r0
 800d896:	4606      	mov	r6, r0
 800d898:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8a0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d8a4:	4413      	add	r3, r2
 800d8a6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d8aa:	440a      	add	r2, r1
 800d8ac:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d8b0:	428b      	cmp	r3, r1
 800d8b2:	bf94      	ite	ls
 800d8b4:	ebc6 0303 	rsbls	r3, r6, r3
 800d8b8:	ebc6 0301 	rsbhi	r3, r6, r1
 800d8bc:	4415      	add	r5, r2
 800d8be:	1a1b      	subs	r3, r3, r0
 800d8c0:	00a4      	lsls	r4, r4, #2
 800d8c2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800d8c6:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800d8ca:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d8ce:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	bf08      	it	eq
 800d8d6:	4662      	moveq	r2, ip
 800d8d8:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800d8dc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800d8e0:	fb91 f1f0 	sdiv	r1, r1, r0
 800d8e4:	4429      	add	r1, r5
 800d8e6:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800d8ea:	fb0e 5501 	mla	r5, lr, r1, r5
 800d8ee:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800d8f2:	4403      	add	r3, r0
 800d8f4:	fb01 6104 	mla	r1, r1, r4, r6
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	fb93 f6f0 	sdiv	r6, r3, r0
 800d8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d900:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800d904:	fb06 3110 	mls	r1, r6, r0, r3
 800d908:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d90c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800d910:	4562      	cmp	r2, ip
 800d912:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d916:	bf08      	it	eq
 800d918:	eeb0 6a48 	vmoveq.f32	s12, s16
 800d91c:	1b9b      	subs	r3, r3, r6
 800d91e:	2800      	cmp	r0, #0
 800d920:	d076      	beq.n	800da10 <forward_conv2d+0x538>
 800d922:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d926:	fb0e f803 	mul.w	r8, lr, r3
 800d92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d92c:	fb00 fb01 	mul.w	fp, r0, r1
 800d930:	2b00      	cmp	r3, #0
 800d932:	d06d      	beq.n	800da10 <forward_conv2d+0x538>
 800d934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d938:	18d3      	adds	r3, r2, r3
 800d93a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d93e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d942:	1a9b      	subs	r3, r3, r2
 800d944:	633b      	str	r3, [r7, #48]	; 0x30
 800d946:	2300      	movs	r3, #0
 800d948:	667b      	str	r3, [r7, #100]	; 0x64
 800d94a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d950:	4413      	add	r3, r2
 800d952:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d954:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95a:	4413      	add	r3, r2
 800d95c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d964:	ecf3 7a01 	vldmia	r3!, {s15}
 800d968:	f1ba 0f00 	cmp.w	sl, #0
 800d96c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d970:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d974:	f340 80c3 	ble.w	800dafe <forward_conv2d+0x626>
 800d978:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800d97c:	f04f 0c00 	mov.w	ip, #0
 800d980:	2e00      	cmp	r6, #0
 800d982:	dd1f      	ble.n	800d9c4 <forward_conv2d+0x4ec>
 800d984:	2100      	movs	r1, #0
 800d986:	eb00 040e 	add.w	r4, r0, lr
 800d98a:	4284      	cmp	r4, r0
 800d98c:	d910      	bls.n	800d9b0 <forward_conv2d+0x4d8>
 800d98e:	4603      	mov	r3, r0
 800d990:	462a      	mov	r2, r5
 800d992:	ecb3 7a01 	vldmia	r3!, {s14}
 800d996:	ecf2 6a01 	vldmia	r2!, {s13}
 800d99a:	429c      	cmp	r4, r3
 800d99c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d9a0:	d8f7      	bhi.n	800d992 <forward_conv2d+0x4ba>
 800d9a2:	43c3      	mvns	r3, r0
 800d9a4:	441c      	add	r4, r3
 800d9a6:	f024 0403 	bic.w	r4, r4, #3
 800d9aa:	3404      	adds	r4, #4
 800d9ac:	4425      	add	r5, r4
 800d9ae:	4420      	add	r0, r4
 800d9b0:	3101      	adds	r1, #1
 800d9b2:	428e      	cmp	r6, r1
 800d9b4:	4448      	add	r0, r9
 800d9b6:	d1e6      	bne.n	800d986 <forward_conv2d+0x4ae>
 800d9b8:	e004      	b.n	800d9c4 <forward_conv2d+0x4ec>
 800d9ba:	bf00      	nop
 800d9bc:	00000000 	.word	0x00000000
 800d9c0:	0800d11d 	.word	0x0800d11d
 800d9c4:	f10c 0c01 	add.w	ip, ip, #1
 800d9c8:	45e2      	cmp	sl, ip
 800d9ca:	4458      	add	r0, fp
 800d9cc:	4445      	add	r5, r8
 800d9ce:	d1d7      	bne.n	800d980 <forward_conv2d+0x4a8>
 800d9d0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d9d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d9d8:	441d      	add	r5, r3
 800d9da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d9de:	ece3 7a01 	vstmia	r3!, {s15}
 800d9e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d1b8      	bne.n	800d960 <forward_conv2d+0x488>
 800d9ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800d9f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9f6:	4472      	add	r2, lr
 800d9f8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d9fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d9fe:	1a52      	subs	r2, r2, r1
 800da00:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800da04:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800da08:	3301      	adds	r3, #1
 800da0a:	429a      	cmp	r2, r3
 800da0c:	667b      	str	r3, [r7, #100]	; 0x64
 800da0e:	d19c      	bne.n	800d94a <forward_conv2d+0x472>
 800da10:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800da14:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800da18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da1a:	4608      	mov	r0, r1
 800da1c:	4410      	add	r0, r2
 800da1e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800da22:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800da26:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800da2a:	4401      	add	r1, r0
 800da2c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800da30:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800da34:	1a8a      	subs	r2, r1, r2
 800da36:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800da3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800da3e:	3301      	adds	r3, #1
 800da40:	429a      	cmp	r2, r3
 800da42:	673b      	str	r3, [r7, #112]	; 0x70
 800da44:	f47f af17 	bne.w	800d876 <forward_conv2d+0x39e>
 800da48:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800da4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800da50:	b37b      	cbz	r3, 800dab2 <forward_conv2d+0x5da>
 800da52:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800da56:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800da5a:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 800da5e:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 800da62:	2500      	movs	r5, #0
 800da64:	46a2      	mov	sl, r4
 800da66:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800da6a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800da6e:	f8c2 a008 	str.w	sl, [r2, #8]
 800da72:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800da76:	4633      	mov	r3, r6
 800da78:	4641      	mov	r1, r8
 800da7a:	4416      	add	r6, r2
 800da7c:	4640      	mov	r0, r8
 800da7e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800da82:	47a0      	blx	r4
 800da84:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800da88:	4492      	add	sl, r2
 800da8a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800da8e:	eba6 0309 	sub.w	r3, r6, r9
 800da92:	4293      	cmp	r3, r2
 800da94:	bfa8      	it	ge
 800da96:	464e      	movge	r6, r9
 800da98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800da9c:	3501      	adds	r5, #1
 800da9e:	42ab      	cmp	r3, r5
 800daa0:	d1e1      	bne.n	800da66 <forward_conv2d+0x58e>
 800daa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daa6:	69ba      	ldr	r2, [r7, #24]
 800daa8:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 800daac:	4413      	add	r3, r2
 800daae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dab6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dab8:	699b      	ldr	r3, [r3, #24]
 800daba:	68da      	ldr	r2, [r3, #12]
 800dabc:	609a      	str	r2, [r3, #8]
 800dabe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dac4:	4610      	mov	r0, r2
 800dac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800daca:	4418      	add	r0, r3
 800dacc:	1ad3      	subs	r3, r2, r3
 800dace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dad8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800dadc:	4413      	add	r3, r2
 800dade:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dae6:	3101      	adds	r1, #1
 800dae8:	428b      	cmp	r3, r1
 800daea:	67f9      	str	r1, [r7, #124]	; 0x7c
 800daec:	f47f ae42 	bne.w	800d774 <forward_conv2d+0x29c>
 800daf0:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800daf4:	46bd      	mov	sp, r7
 800daf6:	ecbd 8b10 	vpop	{d8-d15}
 800dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafe:	461a      	mov	r2, r3
 800db00:	e768      	b.n	800d9d4 <forward_conv2d+0x4fc>
 800db02:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800db06:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800db0a:	fb90 f3f2 	sdiv	r3, r0, r2
 800db0e:	fb02 0313 	mls	r3, r2, r3, r0
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	4605      	mov	r5, r0
 800db16:	fb93 f0f2 	sdiv	r0, r3, r2
 800db1a:	fb02 3010 	mls	r0, r2, r0, r3
 800db1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db20:	462e      	mov	r6, r5
 800db22:	18c4      	adds	r4, r0, r3
 800db24:	eb02 0805 	add.w	r8, r2, r5
 800db28:	e6b6      	b.n	800d898 <forward_conv2d+0x3c0>
 800db2a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800db2c:	2901      	cmp	r1, #1
 800db2e:	f47f ae39 	bne.w	800d7a4 <forward_conv2d+0x2cc>
 800db32:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800db36:	2900      	cmp	r1, #0
 800db38:	d0bb      	beq.n	800dab2 <forward_conv2d+0x5da>
 800db3a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800db3e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800db42:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800db46:	fbb1 f5f0 	udiv	r5, r1, r0
 800db4a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800db4e:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800db52:	633d      	str	r5, [r7, #48]	; 0x30
 800db54:	1ad2      	subs	r2, r2, r3
 800db56:	1a8c      	subs	r4, r1, r2
 800db58:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800db5c:	00b2      	lsls	r2, r6, #2
 800db5e:	fb02 f204 	mul.w	r2, r2, r4
 800db62:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 800db66:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800db6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db6c:	0082      	lsls	r2, r0, #2
 800db6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800db70:	00ca      	lsls	r2, r1, #3
 800db72:	603a      	str	r2, [r7, #0]
 800db74:	00aa      	lsls	r2, r5, #2
 800db76:	60ba      	str	r2, [r7, #8]
 800db78:	fb03 f206 	mul.w	r2, r3, r6
 800db7c:	673a      	str	r2, [r7, #112]	; 0x70
 800db7e:	69fa      	ldr	r2, [r7, #28]
 800db80:	fb02 f303 	mul.w	r3, r2, r3
 800db84:	637b      	str	r3, [r7, #52]	; 0x34
 800db86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800db8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800db8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800db96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800db9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800db9e:	2300      	movs	r3, #0
 800dba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dba4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f2c0 8110 	blt.w	800ddce <forward_conv2d+0x8f6>
 800dbae:	2100      	movs	r1, #0
 800dbb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbb2:	460a      	mov	r2, r1
 800dbb4:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800dbb8:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800dbbc:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800dbc0:	4420      	add	r0, r4
 800dbc2:	4408      	add	r0, r1
 800dbc4:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800dbc8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800dbcc:	190c      	adds	r4, r1, r4
 800dbce:	42ac      	cmp	r4, r5
 800dbd0:	bf28      	it	cs
 800dbd2:	462c      	movcs	r4, r5
 800dbd4:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800dbd8:	0080      	lsls	r0, r0, #2
 800dbda:	1aa4      	subs	r4, r4, r2
 800dbdc:	2d00      	cmp	r5, #0
 800dbde:	f000 80e7 	beq.w	800ddb0 <forward_conv2d+0x8d8>
 800dbe2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800dbe6:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 800dbea:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800dbee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800dbf2:	42b5      	cmp	r5, r6
 800dbf4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800dbf8:	eba3 0204 	sub.w	r2, r3, r4
 800dbfc:	eba1 0104 	sub.w	r1, r1, r4
 800dc00:	bf08      	it	eq
 800dc02:	eef0 3a48 	vmoveq.f32	s7, s16
 800dc06:	462b      	mov	r3, r5
 800dc08:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800dc0a:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800dc0e:	4428      	add	r0, r5
 800dc10:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800dc14:	fb05 6e00 	mla	lr, r5, r0, r6
 800dc18:	eb0e 000b 	add.w	r0, lr, fp
 800dc1c:	4586      	cmp	lr, r0
 800dc1e:	6238      	str	r0, [r7, #32]
 800dc20:	f080 80a5 	bcs.w	800dd6e <forward_conv2d+0x896>
 800dc24:	0092      	lsls	r2, r2, #2
 800dc26:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dc2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc2c:	fb0b f101 	mul.w	r1, fp, r1
 800dc30:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800dc34:	f024 0803 	bic.w	r8, r4, #3
 800dc38:	2a00      	cmp	r2, #0
 800dc3a:	f000 8098 	beq.w	800dd6e <forward_conv2d+0x896>
 800dc3e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800dc42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dc44:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800dc48:	0892      	lsrs	r2, r2, #2
 800dc4a:	3201      	adds	r2, #1
 800dc4c:	4401      	add	r1, r0
 800dc4e:	fb02 f00a 	mul.w	r0, r2, sl
 800dc52:	6578      	str	r0, [r7, #84]	; 0x54
 800dc54:	0110      	lsls	r0, r2, #4
 800dc56:	0092      	lsls	r2, r2, #2
 800dc58:	653a      	str	r2, [r7, #80]	; 0x50
 800dc5a:	1aca      	subs	r2, r1, r3
 800dc5c:	613a      	str	r2, [r7, #16]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	6678      	str	r0, [r7, #100]	; 0x64
 800dc62:	4413      	add	r3, r2
 800dc64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dc68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc6e:	4413      	add	r3, r2
 800dc70:	60fb      	str	r3, [r7, #12]
 800dc72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	4413      	add	r3, r2
 800dc7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc80:	ecf3 6a01 	vldmia	r3!, {s13}
 800dc84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800dc92:	dd57      	ble.n	800dd44 <forward_conv2d+0x86c>
 800dc94:	4676      	mov	r6, lr
 800dc96:	f04f 0c00 	mov.w	ip, #0
 800dc9a:	f1b8 0f00 	cmp.w	r8, #0
 800dc9e:	f340 8085 	ble.w	800ddac <forward_conv2d+0x8d4>
 800dca2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dca6:	f109 0310 	add.w	r3, r9, #16
 800dcaa:	18b1      	adds	r1, r6, r2
 800dcac:	2000      	movs	r0, #0
 800dcae:	4632      	mov	r2, r6
 800dcb0:	eb02 050b 	add.w	r5, r2, fp
 800dcb4:	ed95 7a00 	vldr	s14, [r5]
 800dcb8:	ed53 7a03 	vldr	s15, [r3, #-12]
 800dcbc:	ed92 4a00 	vldr	s8, [r2]
 800dcc0:	ed53 4a04 	vldr	s9, [r3, #-16]
 800dcc4:	ed91 5a00 	vldr	s10, [r1]
 800dcc8:	ed53 5a02 	vldr	s11, [r3, #-8]
 800dccc:	ed13 6a01 	vldr	s12, [r3, #-4]
 800dcd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcd4:	eb01 050b 	add.w	r5, r1, fp
 800dcd8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800dcdc:	3004      	adds	r0, #4
 800dcde:	4540      	cmp	r0, r8
 800dce0:	ed95 7a00 	vldr	s14, [r5]
 800dce4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800dce8:	4452      	add	r2, sl
 800dcea:	4451      	add	r1, sl
 800dcec:	f103 0310 	add.w	r3, r3, #16
 800dcf0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800dcf4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dcf8:	dbda      	blt.n	800dcb0 <forward_conv2d+0x7d8>
 800dcfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcfc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dcfe:	441e      	add	r6, r3
 800dd00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd02:	4499      	add	r9, r3
 800dd04:	42a0      	cmp	r0, r4
 800dd06:	da11      	bge.n	800dd2c <forward_conv2d+0x854>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	4633      	mov	r3, r6
 800dd0c:	4649      	mov	r1, r9
 800dd0e:	edd3 7a00 	vldr	s15, [r3]
 800dd12:	ecb1 7a01 	vldmia	r1!, {s14}
 800dd16:	3201      	adds	r2, #1
 800dd18:	42a2      	cmp	r2, r4
 800dd1a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dd1e:	445b      	add	r3, fp
 800dd20:	d1f5      	bne.n	800dd0e <forward_conv2d+0x836>
 800dd22:	1a20      	subs	r0, r4, r0
 800dd24:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800dd28:	fb00 660b 	mla	r6, r0, fp, r6
 800dd2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd30:	441e      	add	r6, r3
 800dd32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dd36:	4499      	add	r9, r3
 800dd38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dd3c:	f10c 0c01 	add.w	ip, ip, #1
 800dd40:	4563      	cmp	r3, ip
 800dd42:	d1aa      	bne.n	800dc9a <forward_conv2d+0x7c2>
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	4499      	add	r9, r3
 800dd48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd4a:	ece3 6a01 	vstmia	r3!, {s13}
 800dd4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd50:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d191      	bne.n	800dc7c <forward_conv2d+0x7a4>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	1a9b      	subs	r3, r3, r2
 800dd5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	f10e 0e04 	add.w	lr, lr, #4
 800dd68:	459e      	cmp	lr, r3
 800dd6a:	f4ff af7d 	bcc.w	800dc68 <forward_conv2d+0x790>
 800dd6e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800dd72:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800dd76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd7a:	440a      	add	r2, r1
 800dd7c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800dd80:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800dd84:	4608      	mov	r0, r1
 800dd86:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800dd8a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800dd8e:	4410      	add	r0, r2
 800dd90:	1a8a      	subs	r2, r1, r2
 800dd92:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800dd96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800dd9a:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800dd9e:	3301      	adds	r3, #1
 800dda0:	429a      	cmp	r2, r3
 800dda2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dda6:	f47f aefd 	bne.w	800dba4 <forward_conv2d+0x6cc>
 800ddaa:	e64f      	b.n	800da4c <forward_conv2d+0x574>
 800ddac:	2000      	movs	r0, #0
 800ddae:	e7a9      	b.n	800dd04 <forward_conv2d+0x82c>
 800ddb0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800ddb4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800ddb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddbc:	1b19      	subs	r1, r3, r4
 800ddbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ddc2:	eef0 3a48 	vmov.f32	s7, s16
 800ddc6:	1b1a      	subs	r2, r3, r4
 800ddc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ddcc:	e71c      	b.n	800dc08 <forward_conv2d+0x730>
 800ddce:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800ddd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddd4:	460a      	mov	r2, r1
 800ddd6:	440b      	add	r3, r1
 800ddd8:	e6ec      	b.n	800dbb4 <forward_conv2d+0x6dc>
 800ddda:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800dddc:	2801      	cmp	r0, #1
 800ddde:	f47f ace1 	bne.w	800d7a4 <forward_conv2d+0x2cc>
 800dde2:	1ad2      	subs	r2, r2, r3
 800dde4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dde6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800ddea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800ddee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddf0:	fb00 4101 	mla	r1, r0, r1, r4
 800ddf4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800ddf8:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800ddfc:	f080 8191 	bcs.w	800e122 <forward_conv2d+0xc4a>
 800de00:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800de04:	2a00      	cmp	r2, #0
 800de06:	f43f ae21 	beq.w	800da4c <forward_conv2d+0x574>
 800de0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800de0c:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 800de10:	fb02 f303 	mul.w	r3, r2, r3
 800de14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de16:	667b      	str	r3, [r7, #100]	; 0x64
 800de18:	1a9b      	subs	r3, r3, r2
 800de1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de1c:	188b      	adds	r3, r1, r2
 800de1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800de28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800de30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800de38:	2300      	movs	r3, #0
 800de3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de42:	2b00      	cmp	r3, #0
 800de44:	f000 8133 	beq.w	800e0ae <forward_conv2d+0xbd6>
 800de48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de4c:	ed93 6a00 	vldr	s12, [r3]
 800de50:	3304      	adds	r3, #4
 800de52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800de56:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f000 8101 	beq.w	800e062 <forward_conv2d+0xb8a>
 800de60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800de68:	eb03 0802 	add.w	r8, r3, r2
 800de6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800de72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de7c:	673b      	str	r3, [r7, #112]	; 0x70
 800de7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800de82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de86:	f04f 0b00 	mov.w	fp, #0
 800de8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f2c0 8104 	blt.w	800e09c <forward_conv2d+0xbc4>
 800de94:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800de98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800de9a:	2300      	movs	r3, #0
 800de9c:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800dea0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800dea4:	eb02 0c04 	add.w	ip, r2, r4
 800dea8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800deac:	4540      	cmp	r0, r8
 800deae:	bf94      	ite	ls
 800deb0:	ebc3 0300 	rsbls	r3, r3, r0
 800deb4:	ebc3 0308 	rsbhi	r3, r3, r8
 800deb8:	eba2 0903 	sub.w	r9, r2, r3
 800debc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800dec0:	1ac4      	subs	r4, r0, r3
 800dec2:	fb03 f302 	mul.w	r3, r3, r2
 800dec6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800deca:	2a00      	cmp	r2, #0
 800decc:	f340 80e3 	ble.w	800e096 <forward_conv2d+0xbbe>
 800ded0:	f023 050f 	bic.w	r5, r3, #15
 800ded4:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800ded8:	1e68      	subs	r0, r5, #1
 800deda:	0900      	lsrs	r0, r0, #4
 800dedc:	3001      	adds	r0, #1
 800dede:	fb06 f204 	mul.w	r2, r6, r4
 800dee2:	657a      	str	r2, [r7, #84]	; 0x54
 800dee4:	0102      	lsls	r2, r0, #4
 800dee6:	653a      	str	r2, [r7, #80]	; 0x50
 800dee8:	fb06 f909 	mul.w	r9, r6, r9
 800deec:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800def0:	eef0 6a46 	vmov.f32	s13, s12
 800def4:	f04f 0e00 	mov.w	lr, #0
 800def8:	4662      	mov	r2, ip
 800defa:	2d00      	cmp	r5, #0
 800defc:	f340 80c9 	ble.w	800e092 <forward_conv2d+0xbba>
 800df00:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800df04:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800df08:	2600      	movs	r6, #0
 800df0a:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800df0e:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800df12:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800df16:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800df1a:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800df1e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800df22:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800df26:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800df2a:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800df2e:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800df32:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800df36:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800df3a:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800df3e:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800df42:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800df46:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800df4a:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800df4e:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800df52:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800df56:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800df5a:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800df5e:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800df62:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800df66:	ed50 3a04 	vldr	s7, [r0, #-16]
 800df6a:	ed14 4a04 	vldr	s8, [r4, #-16]
 800df6e:	ed50 4a03 	vldr	s9, [r0, #-12]
 800df72:	ed14 5a03 	vldr	s10, [r4, #-12]
 800df76:	ed50 5a02 	vldr	s11, [r0, #-8]
 800df7a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800df7e:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800df82:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800df86:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800df8a:	3610      	adds	r6, #16
 800df8c:	42ae      	cmp	r6, r5
 800df8e:	ed14 fa01 	vldr	s30, [r4, #-4]
 800df92:	ed50 ea01 	vldr	s29, [r0, #-4]
 800df96:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800df9a:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800df9e:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800dfa2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800dfa6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800dfaa:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800dfae:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800dfb2:	eee9 7a89 	vfma.f32	s15, s19, s18
 800dfb6:	eee8 7a80 	vfma.f32	s15, s17, s0
 800dfba:	eee0 7a81 	vfma.f32	s15, s1, s2
 800dfbe:	eee1 7a82 	vfma.f32	s15, s3, s4
 800dfc2:	eee2 7a83 	vfma.f32	s15, s5, s6
 800dfc6:	eee3 7a84 	vfma.f32	s15, s7, s8
 800dfca:	eee4 7a85 	vfma.f32	s15, s9, s10
 800dfce:	eee5 7a87 	vfma.f32	s15, s11, s14
 800dfd2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800dfd6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dfda:	db96      	blt.n	800df0a <forward_conv2d+0xa32>
 800dfdc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dfde:	4451      	add	r1, sl
 800dfe0:	4452      	add	r2, sl
 800dfe2:	4283      	cmp	r3, r0
 800dfe4:	dd0f      	ble.n	800e006 <forward_conv2d+0xb2e>
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	468c      	mov	ip, r1
 800dfea:	4616      	mov	r6, r2
 800dfec:	ecb6 7a01 	vldmia	r6!, {s14}
 800dff0:	ecfc 7a01 	vldmia	ip!, {s15}
 800dff4:	3401      	adds	r4, #1
 800dff6:	42a3      	cmp	r3, r4
 800dff8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dffc:	d1f6      	bne.n	800dfec <forward_conv2d+0xb14>
 800dffe:	1a18      	subs	r0, r3, r0
 800e000:	0080      	lsls	r0, r0, #2
 800e002:	4402      	add	r2, r0
 800e004:	4401      	add	r1, r0
 800e006:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e008:	4402      	add	r2, r0
 800e00a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800e00e:	f10e 0e01 	add.w	lr, lr, #1
 800e012:	4570      	cmp	r0, lr
 800e014:	4449      	add	r1, r9
 800e016:	f47f af70 	bne.w	800defa <forward_conv2d+0xa22>
 800e01a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800e01e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e020:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e024:	edc3 6a00 	vstr	s13, [r3]
 800e028:	4608      	mov	r0, r1
 800e02a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800e02e:	440b      	add	r3, r1
 800e030:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800e034:	673b      	str	r3, [r7, #112]	; 0x70
 800e036:	4410      	add	r0, r2
 800e038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e03a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800e03e:	4608      	mov	r0, r1
 800e040:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800e044:	4418      	add	r0, r3
 800e046:	1acb      	subs	r3, r1, r3
 800e048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e04c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e050:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800e054:	f10b 0b01 	add.w	fp, fp, #1
 800e058:	455b      	cmp	r3, fp
 800e05a:	eba8 0802 	sub.w	r8, r8, r2
 800e05e:	f47f af14 	bne.w	800de8a <forward_conv2d+0x9b2>
 800e062:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e06c:	440a      	add	r2, r1
 800e06e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e072:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e076:	3204      	adds	r2, #4
 800e078:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800e07c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e080:	3301      	adds	r3, #1
 800e082:	429a      	cmp	r2, r3
 800e084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e088:	f47f aed9 	bne.w	800de3e <forward_conv2d+0x966>
 800e08c:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 800e090:	e4dc      	b.n	800da4c <forward_conv2d+0x574>
 800e092:	2000      	movs	r0, #0
 800e094:	e7a5      	b.n	800dfe2 <forward_conv2d+0xb0a>
 800e096:	eef0 6a46 	vmov.f32	s13, s12
 800e09a:	e7be      	b.n	800e01a <forward_conv2d+0xb42>
 800e09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e0a4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800e0a8:	eba8 0303 	sub.w	r3, r8, r3
 800e0ac:	e6f6      	b.n	800de9c <forward_conv2d+0x9c4>
 800e0ae:	eeb0 6a48 	vmov.f32	s12, s16
 800e0b2:	e6d0      	b.n	800de56 <forward_conv2d+0x97e>
 800e0b4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800e0b8:	68ca      	ldr	r2, [r1, #12]
 800e0ba:	2a00      	cmp	r2, #0
 800e0bc:	f43f aaca 	beq.w	800d654 <forward_conv2d+0x17c>
 800e0c0:	69b3      	ldr	r3, [r6, #24]
 800e0c2:	8818      	ldrh	r0, [r3, #0]
 800e0c4:	2803      	cmp	r0, #3
 800e0c6:	f240 819f 	bls.w	800e408 <forward_conv2d+0xf30>
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ce:	b32b      	cbz	r3, 800e11c <forward_conv2d+0xc44>
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	b31b      	cbz	r3, 800e11c <forward_conv2d+0xc44>
 800e0d4:	699b      	ldr	r3, [r3, #24]
 800e0d6:	6889      	ldr	r1, [r1, #8]
 800e0d8:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800e0e2:	9000      	str	r0, [sp, #0]
 800e0e4:	462b      	mov	r3, r5
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f7ff f9a6 	bl	800d438 <ai_dict_decompress_f32>
 800e0ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0f0:	2c00      	cmp	r4, #0
 800e0f2:	bf18      	it	ne
 800e0f4:	4623      	movne	r3, r4
 800e0f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e0fa:	f7ff baab 	b.w	800d654 <forward_conv2d+0x17c>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f000 8185 	beq.w	800e40e <forward_conv2d+0xf36>
 800e104:	6883      	ldr	r3, [r0, #8]
 800e106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e10a:	2301      	movs	r3, #1
 800e10c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e110:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e114:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e118:	f7ff ba6d 	b.w	800d5f6 <forward_conv2d+0x11e>
 800e11c:	2300      	movs	r3, #0
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	deff      	udf	#255	; 0xff
 800e122:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e126:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 800e12a:	320a      	adds	r2, #10
 800e12c:	f022 0207 	bic.w	r2, r2, #7
 800e130:	ebad 0d02 	sub.w	sp, sp, r2
 800e134:	aa02      	add	r2, sp, #8
 800e136:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e13a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e13e:	2a00      	cmp	r2, #0
 800e140:	f000 814d 	beq.w	800e3de <forward_conv2d+0xf06>
 800e144:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e146:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800e14a:	fb02 f303 	mul.w	r3, r2, r3
 800e14e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e150:	657b      	str	r3, [r7, #84]	; 0x54
 800e152:	1a9b      	subs	r3, r3, r2
 800e154:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e156:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e15a:	4413      	add	r3, r2
 800e15c:	637b      	str	r3, [r7, #52]	; 0x34
 800e15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e16a:	673b      	str	r3, [r7, #112]	; 0x70
 800e16c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e170:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e174:	2300      	movs	r3, #0
 800e176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e17a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e17c:	b13b      	cbz	r3, 800e18e <forward_conv2d+0xcb6>
 800e17e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e182:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e186:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800e18a:	f002 f9ad 	bl	80104e8 <memcpy>
 800e18e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e192:	2b00      	cmp	r3, #0
 800e194:	f000 8135 	beq.w	800e402 <forward_conv2d+0xf2a>
 800e198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e19a:	ed93 6a00 	vldr	s12, [r3]
 800e19e:	3304      	adds	r3, #4
 800e1a0:	673b      	str	r3, [r7, #112]	; 0x70
 800e1a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f000 8101 	beq.w	800e3ae <forward_conv2d+0xed6>
 800e1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e1b4:	eb03 0802 	add.w	r8, r3, r2
 800e1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e1ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e1d2:	f04f 0b00 	mov.w	fp, #0
 800e1d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f2c0 8108 	blt.w	800e3f0 <forward_conv2d+0xf18>
 800e1e0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800e1e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800e1ec:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800e1f0:	eb02 0c04 	add.w	ip, r2, r4
 800e1f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800e1f8:	4540      	cmp	r0, r8
 800e1fa:	bf94      	ite	ls
 800e1fc:	ebc3 0300 	rsbls	r3, r3, r0
 800e200:	ebc3 0308 	rsbhi	r3, r3, r8
 800e204:	eba2 0903 	sub.w	r9, r2, r3
 800e208:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800e20c:	1ac4      	subs	r4, r0, r3
 800e20e:	fb03 f302 	mul.w	r3, r3, r2
 800e212:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800e216:	2a00      	cmp	r2, #0
 800e218:	f340 80e7 	ble.w	800e3ea <forward_conv2d+0xf12>
 800e21c:	f023 050f 	bic.w	r5, r3, #15
 800e220:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800e224:	1e68      	subs	r0, r5, #1
 800e226:	0900      	lsrs	r0, r0, #4
 800e228:	3001      	adds	r0, #1
 800e22a:	fb06 f204 	mul.w	r2, r6, r4
 800e22e:	653a      	str	r2, [r7, #80]	; 0x50
 800e230:	0102      	lsls	r2, r0, #4
 800e232:	633a      	str	r2, [r7, #48]	; 0x30
 800e234:	fb06 f909 	mul.w	r9, r6, r9
 800e238:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800e23c:	eef0 6a46 	vmov.f32	s13, s12
 800e240:	f04f 0e00 	mov.w	lr, #0
 800e244:	4662      	mov	r2, ip
 800e246:	2d00      	cmp	r5, #0
 800e248:	f340 80cd 	ble.w	800e3e6 <forward_conv2d+0xf0e>
 800e24c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800e250:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800e254:	2600      	movs	r6, #0
 800e256:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800e25a:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800e25e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800e262:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800e266:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800e26a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800e26e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800e272:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 800e276:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800e27a:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 800e27e:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 800e282:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800e286:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800e28a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800e28e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800e292:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800e296:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800e29a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800e29e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800e2a2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800e2a6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800e2aa:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800e2ae:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800e2b2:	ed54 3a04 	vldr	s7, [r4, #-16]
 800e2b6:	ed10 4a04 	vldr	s8, [r0, #-16]
 800e2ba:	ed50 4a03 	vldr	s9, [r0, #-12]
 800e2be:	ed14 5a03 	vldr	s10, [r4, #-12]
 800e2c2:	ed54 5a02 	vldr	s11, [r4, #-8]
 800e2c6:	ed10 7a02 	vldr	s14, [r0, #-8]
 800e2ca:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800e2ce:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800e2d2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800e2d6:	3610      	adds	r6, #16
 800e2d8:	42b5      	cmp	r5, r6
 800e2da:	ed14 fa01 	vldr	s30, [r4, #-4]
 800e2de:	ed50 ea01 	vldr	s29, [r0, #-4]
 800e2e2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800e2e6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800e2ea:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800e2ee:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800e2f2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e2f6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e2fa:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e2fe:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e302:	eee8 7a80 	vfma.f32	s15, s17, s0
 800e306:	eee0 7a81 	vfma.f32	s15, s1, s2
 800e30a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800e30e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800e312:	eee3 7a84 	vfma.f32	s15, s7, s8
 800e316:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e31a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e31e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800e322:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e326:	dc96      	bgt.n	800e256 <forward_conv2d+0xd7e>
 800e328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e32a:	4451      	add	r1, sl
 800e32c:	4452      	add	r2, sl
 800e32e:	4283      	cmp	r3, r0
 800e330:	dd0f      	ble.n	800e352 <forward_conv2d+0xe7a>
 800e332:	4604      	mov	r4, r0
 800e334:	468c      	mov	ip, r1
 800e336:	4616      	mov	r6, r2
 800e338:	ecb6 7a01 	vldmia	r6!, {s14}
 800e33c:	ecfc 7a01 	vldmia	ip!, {s15}
 800e340:	3401      	adds	r4, #1
 800e342:	42a3      	cmp	r3, r4
 800e344:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e348:	d1f6      	bne.n	800e338 <forward_conv2d+0xe60>
 800e34a:	1a18      	subs	r0, r3, r0
 800e34c:	0080      	lsls	r0, r0, #2
 800e34e:	4402      	add	r2, r0
 800e350:	4401      	add	r1, r0
 800e352:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e354:	4402      	add	r2, r0
 800e356:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800e35a:	f10e 0e01 	add.w	lr, lr, #1
 800e35e:	4570      	cmp	r0, lr
 800e360:	4449      	add	r1, r9
 800e362:	f47f af70 	bne.w	800e246 <forward_conv2d+0xd6e>
 800e366:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800e36a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e36c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e370:	edc3 6a00 	vstr	s13, [r3]
 800e374:	4608      	mov	r0, r1
 800e376:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800e37a:	440b      	add	r3, r1
 800e37c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800e380:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e382:	4410      	add	r0, r2
 800e384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e386:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800e38a:	4608      	mov	r0, r1
 800e38c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800e390:	4418      	add	r0, r3
 800e392:	1acb      	subs	r3, r1, r3
 800e394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e398:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e39c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800e3a0:	f10b 0b01 	add.w	fp, fp, #1
 800e3a4:	455b      	cmp	r3, fp
 800e3a6:	eba8 0802 	sub.w	r8, r8, r2
 800e3aa:	f47f af14 	bne.w	800e1d6 <forward_conv2d+0xcfe>
 800e3ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e3b2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800e3b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3ba:	440a      	add	r2, r1
 800e3bc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e3c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e3c4:	3204      	adds	r2, #4
 800e3c6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800e3ca:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e3d6:	f47f aed0 	bne.w	800e17a <forward_conv2d+0xca2>
 800e3da:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800e3de:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800e3e2:	f7ff bb33 	b.w	800da4c <forward_conv2d+0x574>
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	e7a1      	b.n	800e32e <forward_conv2d+0xe56>
 800e3ea:	eef0 6a46 	vmov.f32	s13, s12
 800e3ee:	e7ba      	b.n	800e366 <forward_conv2d+0xe8e>
 800e3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e3f8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800e3fc:	eba8 0303 	sub.w	r3, r8, r3
 800e400:	e6f2      	b.n	800e1e8 <forward_conv2d+0xd10>
 800e402:	eeb0 6a48 	vmov.f32	s12, s16
 800e406:	e6cc      	b.n	800e1a2 <forward_conv2d+0xcca>
 800e408:	2300      	movs	r3, #0
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	deff      	udf	#255	; 0xff
 800e40e:	4603      	mov	r3, r0
 800e410:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e414:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e418:	2301      	movs	r3, #1
 800e41a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e41e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e422:	f7ff b8e8 	b.w	800d5f6 <forward_conv2d+0x11e>
 800e426:	2800      	cmp	r0, #0
 800e428:	d0f2      	beq.n	800e410 <forward_conv2d+0xf38>
 800e42a:	6882      	ldr	r2, [r0, #8]
 800e42c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e430:	2301      	movs	r3, #1
 800e432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e436:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800e43a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e43e:	f7ff b8da 	b.w	800d5f6 <forward_conv2d+0x11e>
 800e442:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800e446:	f7ff b8b7 	b.w	800d5b8 <forward_conv2d+0xe0>
 800e44a:	3318      	adds	r3, #24
 800e44c:	d007      	beq.n	800e45e <forward_conv2d+0xf86>
 800e44e:	462a      	mov	r2, r5
 800e450:	462c      	mov	r4, r5
 800e452:	462b      	mov	r3, r5
 800e454:	f7ff b86a 	b.w	800d52c <forward_conv2d+0x54>
 800e458:	2300      	movs	r3, #0
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	deff      	udf	#255	; 0xff
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	deff      	udf	#255	; 0xff
 800e462:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800e466:	f7ff b850 	b.w	800d50a <forward_conv2d+0x32>
 800e46a:	2300      	movs	r3, #0
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	deff      	udf	#255	; 0xff
 800e470:	6853      	ldr	r3, [r2, #4]
 800e472:	deff      	udf	#255	; 0xff
 800e474:	2200      	movs	r2, #0
 800e476:	f7ff b858 	b.w	800d52a <forward_conv2d+0x52>
 800e47a:	bf00      	nop

0800e47c <forward_conv2d_nl_pool>:
 800e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e480:	ed2d 8b10 	vpush	{d8-d15}
 800e484:	b0e1      	sub	sp, #388	; 0x184
 800e486:	6983      	ldr	r3, [r0, #24]
 800e488:	881e      	ldrh	r6, [r3, #0]
 800e48a:	af0a      	add	r7, sp, #40	; 0x28
 800e48c:	2e00      	cmp	r6, #0
 800e48e:	f000 859b 	beq.w	800efc8 <forward_conv2d_nl_pool+0xb4c>
 800e492:	6859      	ldr	r1, [r3, #4]
 800e494:	684a      	ldr	r2, [r1, #4]
 800e496:	2a00      	cmp	r2, #0
 800e498:	f000 8593 	beq.w	800efc2 <forward_conv2d_nl_pool+0xb46>
 800e49c:	f8d2 c000 	ldr.w	ip, [r2]
 800e4a0:	2e01      	cmp	r6, #1
 800e4a2:	f240 858b 	bls.w	800efbc <forward_conv2d_nl_pool+0xb40>
 800e4a6:	690a      	ldr	r2, [r1, #16]
 800e4a8:	2a00      	cmp	r2, #0
 800e4aa:	f000 8582 	beq.w	800efb2 <forward_conv2d_nl_pool+0xb36>
 800e4ae:	f8d2 9000 	ldr.w	r9, [r2]
 800e4b2:	2e02      	cmp	r6, #2
 800e4b4:	f000 8582 	beq.w	800efbc <forward_conv2d_nl_pool+0xb40>
 800e4b8:	69cd      	ldr	r5, [r1, #28]
 800e4ba:	2d00      	cmp	r5, #0
 800e4bc:	f000 8571 	beq.w	800efa2 <forward_conv2d_nl_pool+0xb26>
 800e4c0:	682a      	ldr	r2, [r5, #0]
 800e4c2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800e4c6:	f111 0218 	adds.w	r2, r1, #24
 800e4ca:	d004      	beq.n	800e4d6 <forward_conv2d_nl_pool+0x5a>
 800e4cc:	8b0a      	ldrh	r2, [r1, #24]
 800e4ce:	2a01      	cmp	r2, #1
 800e4d0:	f240 857c 	bls.w	800efcc <forward_conv2d_nl_pool+0xb50>
 800e4d4:	686a      	ldr	r2, [r5, #4]
 800e4d6:	68a9      	ldr	r1, [r5, #8]
 800e4d8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e4da:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800e4de:	f8dc b018 	ldr.w	fp, [ip, #24]
 800e4e2:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800e4e6:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800e4ea:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800e4ee:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800e4f2:	f8db 4008 	ldr.w	r4, [fp, #8]
 800e4f6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800e4fa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e4fe:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800e502:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800e506:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800e50a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800e50e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e512:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800e516:	f8de 4004 	ldr.w	r4, [lr, #4]
 800e51a:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800e51e:	f8de 400c 	ldr.w	r4, [lr, #12]
 800e522:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800e526:	f8de 4008 	ldr.w	r4, [lr, #8]
 800e52a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800e52e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800e532:	6824      	ldr	r4, [r4, #0]
 800e534:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 800e538:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800e53c:	6864      	ldr	r4, [r4, #4]
 800e53e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800e542:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800e546:	68a5      	ldr	r5, [r4, #8]
 800e548:	f8da 4004 	ldr.w	r4, [sl, #4]
 800e54c:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800e550:	f8da 4008 	ldr.w	r4, [sl, #8]
 800e554:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800e558:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800e55a:	6824      	ldr	r4, [r4, #0]
 800e55c:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 800e560:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800e562:	6864      	ldr	r4, [r4, #4]
 800e564:	643c      	str	r4, [r7, #64]	; 0x40
 800e566:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800e56a:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800e56e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e570:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800e574:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e576:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800e57a:	69c4      	ldr	r4, [r0, #28]
 800e57c:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 800e580:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e582:	64bc      	str	r4, [r7, #72]	; 0x48
 800e584:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800e586:	647c      	str	r4, [r7, #68]	; 0x44
 800e588:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800e58a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800e58e:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 800e592:	2a00      	cmp	r2, #0
 800e594:	f000 84f8 	beq.w	800ef88 <forward_conv2d_nl_pool+0xb0c>
 800e598:	6992      	ldr	r2, [r2, #24]
 800e59a:	6892      	ldr	r2, [r2, #8]
 800e59c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800e5a0:	4680      	mov	r8, r0
 800e5a2:	6a00      	ldr	r0, [r0, #32]
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	f000 84e4 	beq.w	800ef72 <forward_conv2d_nl_pool+0xaf6>
 800e5aa:	698a      	ldr	r2, [r1, #24]
 800e5ac:	2a00      	cmp	r2, #0
 800e5ae:	f000 8533 	beq.w	800f018 <forward_conv2d_nl_pool+0xb9c>
 800e5b2:	694b      	ldr	r3, [r1, #20]
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e5ba:	e9d2 0100 	ldrd	r0, r1, [r2]
 800e5be:	6893      	ldr	r3, [r2, #8]
 800e5c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e5c4:	f001 ff0c 	bl	80103e0 <ai_array_get_byte_size>
 800e5c8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e5cc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800e5d0:	881e      	ldrh	r6, [r3, #0]
 800e5d2:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800e5d6:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800e5da:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800e5de:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e5e0:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800e5e4:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800e5e8:	fa11 f585 	uxtah	r5, r1, r5
 800e5ec:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800e5f0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e5f4:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800e5f8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800e5fc:	3901      	subs	r1, #1
 800e5fe:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800e602:	eb05 0e00 	add.w	lr, r5, r0
 800e606:	fa1f f28a 	uxth.w	r2, sl
 800e60a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800e60e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800e612:	f8dc 4000 	ldr.w	r4, [ip]
 800e616:	f8dc 1000 	ldr.w	r1, [ip]
 800e61a:	3a01      	subs	r2, #1
 800e61c:	fb00 5002 	mla	r0, r0, r2, r5
 800e620:	fa1f f28b 	uxth.w	r2, fp
 800e624:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 800e628:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800e62c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800e630:	1e50      	subs	r0, r2, #1
 800e632:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800e636:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800e63a:	fa44 f101 	asr.w	r1, r4, r1
 800e63e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800e642:	f8dc 4000 	ldr.w	r4, [ip]
 800e646:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800e64a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e64e:	f3c4 4543 	ubfx	r5, r4, #17, #4
 800e652:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800e656:	ebae 0202 	sub.w	r2, lr, r2
 800e65a:	fa1f fe81 	uxth.w	lr, r1
 800e65e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800e662:	fbb2 f2f1 	udiv	r2, r2, r1
 800e666:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800e66a:	3c01      	subs	r4, #1
 800e66c:	fb04 1100 	mla	r1, r4, r0, r1
 800e670:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800e674:	1c51      	adds	r1, r2, #1
 800e676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e67a:	487c      	ldr	r0, [pc, #496]	; (800e86c <forward_conv2d_nl_pool+0x3f0>)
 800e67c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800e680:	4611      	mov	r1, r2
 800e682:	2a00      	cmp	r2, #0
 800e684:	bf08      	it	eq
 800e686:	4601      	moveq	r1, r0
 800e688:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800e68c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800e690:	2d04      	cmp	r5, #4
 800e692:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800e696:	f000 849e 	beq.w	800efd6 <forward_conv2d_nl_pool+0xb5a>
 800e69a:	2d08      	cmp	r5, #8
 800e69c:	f000 849b 	beq.w	800efd6 <forward_conv2d_nl_pool+0xb5a>
 800e6a0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800e6a4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800e6a8:	2e03      	cmp	r6, #3
 800e6aa:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800e6ae:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800e6b2:	f240 8483 	bls.w	800efbc <forward_conv2d_nl_pool+0xb40>
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f000 8489 	beq.w	800efd2 <forward_conv2d_nl_pool+0xb56>
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800e6c6:	68da      	ldr	r2, [r3, #12]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e6ce:	6899      	ldr	r1, [r3, #8]
 800e6d0:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800e6d4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800e6d8:	6896      	ldr	r6, [r2, #8]
 800e6da:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800e6de:	4249      	negs	r1, r1
 800e6e0:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	f000 82dd 	beq.w	800eca4 <forward_conv2d_nl_pool+0x828>
 800e6ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e6ee:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e6f2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e6f6:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800e6fa:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800e870 <forward_conv2d_nl_pool+0x3f4>
 800e6fe:	fb03 f200 	mul.w	r2, r3, r0
 800e702:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e706:	008c      	lsls	r4, r1, #2
 800e708:	fb04 f000 	mul.w	r0, r4, r0
 800e70c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800e710:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800e714:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800e718:	fb01 fc02 	mul.w	ip, r1, r2
 800e71c:	00a2      	lsls	r2, r4, #2
 800e71e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800e722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e726:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800e72a:	00ab      	lsls	r3, r5, #2
 800e72c:	4694      	mov	ip, r2
 800e72e:	fb0c f204 	mul.w	r2, ip, r4
 800e732:	fb04 f303 	mul.w	r3, r4, r3
 800e736:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800e73a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800e73e:	00a4      	lsls	r4, r4, #2
 800e740:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800e744:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800e748:	f04f 0c00 	mov.w	ip, #0
 800e74c:	fa0f f58b 	sxth.w	r5, fp
 800e750:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 800e754:	46a4      	mov	ip, r4
 800e756:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800e75a:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 800e75e:	fa0f f58a 	sxth.w	r5, sl
 800e762:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800e766:	fb0c fc04 	mul.w	ip, ip, r4
 800e76a:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 800e76e:	fb06 fc03 	mul.w	ip, r6, r3
 800e772:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e776:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800e77a:	4240      	negs	r0, r0
 800e77c:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800e780:	469c      	mov	ip, r3
 800e782:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800e786:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e78a:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800e78e:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800e792:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 800e796:	fb00 f303 	mul.w	r3, r0, r3
 800e79a:	460d      	mov	r5, r1
 800e79c:	fb0c fc04 	mul.w	ip, ip, r4
 800e7a0:	627b      	str	r3, [r7, #36]	; 0x24
 800e7a2:	fb04 f305 	mul.w	r3, r4, r5
 800e7a6:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800e7aa:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800e7ae:	623b      	str	r3, [r7, #32]
 800e7b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7b4:	46a6      	mov	lr, r4
 800e7b6:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800e7ba:	fb05 f503 	mul.w	r5, r5, r3
 800e7be:	667d      	str	r5, [r7, #100]	; 0x64
 800e7c0:	4625      	mov	r5, r4
 800e7c2:	fb05 f503 	mul.w	r5, r5, r3
 800e7c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e7ca:	66bd      	str	r5, [r7, #104]	; 0x68
 800e7cc:	fb00 f101 	mul.w	r1, r0, r1
 800e7d0:	fb03 f306 	mul.w	r3, r3, r6
 800e7d4:	657b      	str	r3, [r7, #84]	; 0x54
 800e7d6:	008b      	lsls	r3, r1, #2
 800e7d8:	633b      	str	r3, [r7, #48]	; 0x30
 800e7da:	0093      	lsls	r3, r2, #2
 800e7dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7de:	0083      	lsls	r3, r0, #2
 800e7e0:	61bb      	str	r3, [r7, #24]
 800e7e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7e6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800e7ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800e7ee:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800e7f2:	2400      	movs	r4, #0
 800e7f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	fb03 f301 	mul.w	r3, r3, r1
 800e7fc:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 800e800:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800e804:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800e808:	00d1      	lsls	r1, r2, #3
 800e80a:	0113      	lsls	r3, r2, #4
 800e80c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800e810:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800e814:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800e818:	fb00 f004 	mul.w	r0, r0, r4
 800e81c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800e820:	66f8      	str	r0, [r7, #108]	; 0x6c
 800e822:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800e826:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800e82a:	469a      	mov	sl, r3
 800e82c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e830:	2b00      	cmp	r3, #0
 800e832:	f340 81d0 	ble.w	800ebd6 <forward_conv2d_nl_pool+0x75a>
 800e836:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800e83a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e83e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e842:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e846:	2900      	cmp	r1, #0
 800e848:	441a      	add	r2, r3
 800e84a:	bfb4      	ite	lt
 800e84c:	2100      	movlt	r1, #0
 800e84e:	2300      	movge	r3, #0
 800e850:	4282      	cmp	r2, r0
 800e852:	bf28      	it	cs
 800e854:	4602      	movcs	r2, r0
 800e856:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e85a:	2801      	cmp	r0, #1
 800e85c:	f000 83f6 	beq.w	800f04c <forward_conv2d_nl_pool+0xbd0>
 800e860:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e864:	4281      	cmp	r1, r0
 800e866:	f000 822a 	beq.w	800ecbe <forward_conv2d_nl_pool+0x842>
 800e86a:	e003      	b.n	800e874 <forward_conv2d_nl_pool+0x3f8>
 800e86c:	0800d11d 	.word	0x0800d11d
 800e870:	00000000 	.word	0x00000000
 800e874:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800e878:	2900      	cmp	r1, #0
 800e87a:	f000 819f 	beq.w	800ebbc <forward_conv2d_nl_pool+0x740>
 800e87e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800e882:	fb93 f1f0 	sdiv	r1, r3, r0
 800e886:	fb00 3111 	mls	r1, r0, r1, r3
 800e88a:	1a41      	subs	r1, r0, r1
 800e88c:	1ad2      	subs	r2, r2, r3
 800e88e:	fb91 f5f0 	sdiv	r5, r1, r0
 800e892:	fb00 1515 	mls	r5, r0, r5, r1
 800e896:	1b52      	subs	r2, r2, r5
 800e898:	4601      	mov	r1, r0
 800e89a:	4402      	add	r2, r0
 800e89c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800e8a0:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e8aa:	fbb4 f4f0 	udiv	r4, r4, r0
 800e8ae:	6a38      	ldr	r0, [r7, #32]
 800e8b0:	3a01      	subs	r2, #1
 800e8b2:	fb92 f8f1 	sdiv	r8, r2, r1
 800e8b6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e8ba:	eba0 0c04 	sub.w	ip, r0, r4
 800e8be:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e8c2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800e8c6:	4614      	mov	r4, r2
 800e8c8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800e8cc:	fbb4 f2f2 	udiv	r2, r4, r2
 800e8d0:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800e8d4:	663a      	str	r2, [r7, #96]	; 0x60
 800e8d6:	441d      	add	r5, r3
 800e8d8:	fb0e f000 	mul.w	r0, lr, r0
 800e8dc:	440b      	add	r3, r1
 800e8de:	eba6 0608 	sub.w	r6, r6, r8
 800e8e2:	fb04 f505 	mul.w	r5, r4, r5
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800e8ec:	fb93 f3f4 	sdiv	r3, r3, r4
 800e8f0:	fb00 f406 	mul.w	r4, r0, r6
 800e8f4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800e8f8:	677d      	str	r5, [r7, #116]	; 0x74
 800e8fa:	0091      	lsls	r1, r2, #2
 800e8fc:	fb00 f003 	mul.w	r0, r0, r3
 800e900:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800e904:	65f8      	str	r0, [r7, #92]	; 0x5c
 800e906:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e90a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800e90e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800e912:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800e916:	1ac3      	subs	r3, r0, r3
 800e918:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800e91c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e920:	008b      	lsls	r3, r1, #2
 800e922:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e924:	00d3      	lsls	r3, r2, #3
 800e926:	61fb      	str	r3, [r7, #28]
 800e928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e92c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e930:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e938:	2300      	movs	r3, #0
 800e93a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 800e93e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800e942:	67bb      	str	r3, [r7, #120]	; 0x78
 800e944:	46c2      	mov	sl, r8
 800e946:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e94a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e94e:	eb03 0c02 	add.w	ip, r3, r2
 800e952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e956:	2b00      	cmp	r3, #0
 800e958:	f2c0 811c 	blt.w	800eb94 <forward_conv2d_nl_pool+0x718>
 800e95c:	2000      	movs	r0, #0
 800e95e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800e960:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 800e964:	4605      	mov	r5, r0
 800e966:	4606      	mov	r6, r0
 800e968:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e96c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e970:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800e974:	4413      	add	r3, r2
 800e976:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e97a:	440a      	add	r2, r1
 800e97c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e980:	428b      	cmp	r3, r1
 800e982:	bf94      	ite	ls
 800e984:	ebc6 0303 	rsbls	r3, r6, r3
 800e988:	ebc6 0301 	rsbhi	r3, r6, r1
 800e98c:	4415      	add	r5, r2
 800e98e:	1a1b      	subs	r3, r3, r0
 800e990:	00a4      	lsls	r4, r4, #2
 800e992:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800e996:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800e99a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800e99e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	bf08      	it	eq
 800e9a6:	4662      	moveq	r2, ip
 800e9a8:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800e9ac:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800e9b0:	fb91 f1f0 	sdiv	r1, r1, r0
 800e9b4:	4429      	add	r1, r5
 800e9b6:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800e9ba:	fb0e 5501 	mla	r5, lr, r1, r5
 800e9be:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e9c2:	4403      	add	r3, r0
 800e9c4:	fb01 6104 	mla	r1, r1, r4, r6
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	fb93 f6f0 	sdiv	r6, r3, r0
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d0:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800e9d4:	fb06 3110 	mls	r1, r6, r0, r3
 800e9d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e9dc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e9e0:	4562      	cmp	r2, ip
 800e9e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e9e6:	bf08      	it	eq
 800e9e8:	eeb0 6a48 	vmoveq.f32	s12, s16
 800e9ec:	1b9b      	subs	r3, r3, r6
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d070      	beq.n	800ead4 <forward_conv2d_nl_pool+0x658>
 800e9f2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e9f6:	fb0e f803 	mul.w	r8, lr, r3
 800e9fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9fc:	fb00 fb01 	mul.w	fp, r0, r1
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d067      	beq.n	800ead4 <forward_conv2d_nl_pool+0x658>
 800ea04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea08:	18d3      	adds	r3, r2, r3
 800ea0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ea0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ea12:	1a9b      	subs	r3, r3, r2
 800ea14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea16:	2300      	movs	r3, #0
 800ea18:	673b      	str	r3, [r7, #112]	; 0x70
 800ea1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	4413      	add	r3, r2
 800ea22:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	4413      	add	r3, r2
 800ea2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ea30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ea34:	ecf3 7a01 	vldmia	r3!, {s15}
 800ea38:	f1ba 0f00 	cmp.w	sl, #0
 800ea3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ea40:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ea44:	f340 80a4 	ble.w	800eb90 <forward_conv2d_nl_pool+0x714>
 800ea48:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800ea4c:	f04f 0c00 	mov.w	ip, #0
 800ea50:	2e00      	cmp	r6, #0
 800ea52:	dd19      	ble.n	800ea88 <forward_conv2d_nl_pool+0x60c>
 800ea54:	2100      	movs	r1, #0
 800ea56:	eb00 040e 	add.w	r4, r0, lr
 800ea5a:	4284      	cmp	r4, r0
 800ea5c:	d910      	bls.n	800ea80 <forward_conv2d_nl_pool+0x604>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	462a      	mov	r2, r5
 800ea62:	ecb3 7a01 	vldmia	r3!, {s14}
 800ea66:	ecf2 6a01 	vldmia	r2!, {s13}
 800ea6a:	429c      	cmp	r4, r3
 800ea6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ea70:	d8f7      	bhi.n	800ea62 <forward_conv2d_nl_pool+0x5e6>
 800ea72:	43c3      	mvns	r3, r0
 800ea74:	441c      	add	r4, r3
 800ea76:	f024 0403 	bic.w	r4, r4, #3
 800ea7a:	3404      	adds	r4, #4
 800ea7c:	4425      	add	r5, r4
 800ea7e:	4420      	add	r0, r4
 800ea80:	3101      	adds	r1, #1
 800ea82:	428e      	cmp	r6, r1
 800ea84:	4448      	add	r0, r9
 800ea86:	d1e6      	bne.n	800ea56 <forward_conv2d_nl_pool+0x5da>
 800ea88:	f10c 0c01 	add.w	ip, ip, #1
 800ea8c:	45e2      	cmp	sl, ip
 800ea8e:	4458      	add	r0, fp
 800ea90:	4445      	add	r5, r8
 800ea92:	d1dd      	bne.n	800ea50 <forward_conv2d_nl_pool+0x5d4>
 800ea94:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ea98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea9c:	441d      	add	r5, r3
 800ea9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eaa2:	ece3 7a01 	vstmia	r3!, {s15}
 800eaa6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800eaaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d1be      	bne.n	800ea30 <forward_conv2d_nl_pool+0x5b4>
 800eab2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800eab6:	69f9      	ldr	r1, [r7, #28]
 800eab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eaba:	4472      	add	r2, lr
 800eabc:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800eac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eac2:	1a52      	subs	r2, r2, r1
 800eac4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800eac8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800eacc:	3301      	adds	r3, #1
 800eace:	429a      	cmp	r2, r3
 800ead0:	673b      	str	r3, [r7, #112]	; 0x70
 800ead2:	d1a2      	bne.n	800ea1a <forward_conv2d_nl_pool+0x59e>
 800ead4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ead8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800eadc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eade:	4608      	mov	r0, r1
 800eae0:	4410      	add	r0, r2
 800eae2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800eae6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800eaea:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800eaee:	4401      	add	r1, r0
 800eaf0:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800eaf4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800eaf8:	1a8a      	subs	r2, r1, r2
 800eafa:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800eafe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800eb02:	3301      	adds	r3, #1
 800eb04:	429a      	cmp	r2, r3
 800eb06:	67bb      	str	r3, [r7, #120]	; 0x78
 800eb08:	f47f af1d 	bne.w	800e946 <forward_conv2d_nl_pool+0x4ca>
 800eb0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800eb10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb14:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800eb18:	699b      	ldr	r3, [r3, #24]
 800eb1a:	2a00      	cmp	r2, #0
 800eb1c:	f000 8210 	beq.w	800ef40 <forward_conv2d_nl_pool+0xac4>
 800eb20:	2400      	movs	r4, #0
 800eb22:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800eb26:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800eb2a:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800eb2e:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 800eb32:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800eb36:	609e      	str	r6, [r3, #8]
 800eb38:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800eb3c:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 800eb40:	462b      	mov	r3, r5
 800eb42:	4641      	mov	r1, r8
 800eb44:	4640      	mov	r0, r8
 800eb46:	47a0      	blx	r4
 800eb48:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800eb4c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800eb50:	6859      	ldr	r1, [r3, #4]
 800eb52:	68da      	ldr	r2, [r3, #12]
 800eb54:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800eb58:	4405      	add	r5, r0
 800eb5a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800eb5e:	0089      	lsls	r1, r1, #2
 800eb60:	4406      	add	r6, r0
 800eb62:	eba5 0c09 	sub.w	ip, r5, r9
 800eb66:	1850      	adds	r0, r2, r1
 800eb68:	45a4      	cmp	ip, r4
 800eb6a:	bfa8      	it	ge
 800eb6c:	464d      	movge	r5, r9
 800eb6e:	4286      	cmp	r6, r0
 800eb70:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800eb74:	bf28      	it	cs
 800eb76:	1a76      	subcs	r6, r6, r1
 800eb78:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	4281      	cmp	r1, r0
 800eb80:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 800eb84:	d1d7      	bne.n	800eb36 <forward_conv2d_nl_pool+0x6ba>
 800eb86:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800eb8a:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800eb8e:	e019      	b.n	800ebc4 <forward_conv2d_nl_pool+0x748>
 800eb90:	461a      	mov	r2, r3
 800eb92:	e781      	b.n	800ea98 <forward_conv2d_nl_pool+0x61c>
 800eb94:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800eb98:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800eb9c:	fb90 f3f2 	sdiv	r3, r0, r2
 800eba0:	fb02 0313 	mls	r3, r2, r3, r0
 800eba4:	1ad3      	subs	r3, r2, r3
 800eba6:	4605      	mov	r5, r0
 800eba8:	fb93 f0f2 	sdiv	r0, r3, r2
 800ebac:	fb02 3010 	mls	r0, r2, r0, r3
 800ebb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebb2:	462e      	mov	r6, r5
 800ebb4:	18c4      	adds	r4, r0, r3
 800ebb6:	eb02 0805 	add.w	r8, r2, r5
 800ebba:	e6d5      	b.n	800e968 <forward_conv2d_nl_pool+0x4ec>
 800ebbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ebc0:	699b      	ldr	r3, [r3, #24]
 800ebc2:	68da      	ldr	r2, [r3, #12]
 800ebc4:	609a      	str	r2, [r3, #8]
 800ebc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ebca:	3301      	adds	r3, #1
 800ebcc:	b21b      	sxth	r3, r3
 800ebce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800ebd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ebdc:	f100 83bf 	bmi.w	800f35e <forward_conv2d_nl_pool+0xee2>
 800ebe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ebe4:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800ebe8:	42a3      	cmp	r3, r4
 800ebea:	f200 839d 	bhi.w	800f328 <forward_conv2d_nl_pool+0xeac>
 800ebee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	6990      	ldr	r0, [r2, #24]
 800ebf6:	9301      	str	r3, [sp, #4]
 800ebf8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ebfc:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 800ec00:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800ec04:	1a9b      	subs	r3, r3, r2
 800ec06:	fa1f f188 	uxth.w	r1, r8
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ec10:	9308      	str	r3, [sp, #32]
 800ec12:	9105      	str	r1, [sp, #20]
 800ec14:	2601      	movs	r6, #1
 800ec16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ec1a:	9607      	str	r6, [sp, #28]
 800ec1c:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 800ec20:	9506      	str	r5, [sp, #24]
 800ec22:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 800ec26:	9304      	str	r3, [sp, #16]
 800ec28:	1a64      	subs	r4, r4, r1
 800ec2a:	b2b1      	uxth	r1, r6
 800ec2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ec30:	9300      	str	r3, [sp, #0]
 800ec32:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800ec36:	b224      	sxth	r4, r4
 800ec38:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800ec3c:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800ec40:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800ec44:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800ec46:	47a0      	blx	r4
 800ec48:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ec4c:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800ec50:	688a      	ldr	r2, [r1, #8]
 800ec52:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800ec54:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800ec58:	fa0f f388 	sxth.w	r3, r8
 800ec5c:	1af3      	subs	r3, r6, r3
 800ec5e:	4422      	add	r2, r4
 800ec60:	462e      	mov	r6, r5
 800ec62:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800ec66:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800ec6a:	608a      	str	r2, [r1, #8]
 800ec6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ec70:	4426      	add	r6, r4
 800ec72:	b21b      	sxth	r3, r3
 800ec74:	1b2c      	subs	r4, r5, r4
 800ec76:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800ec7a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800ec7c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800ec80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ec84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ec88:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	442c      	add	r4, r5
 800ec90:	4283      	cmp	r3, r0
 800ec92:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 800ec96:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800ec9a:	f63f adc7 	bhi.w	800e82c <forward_conv2d_nl_pool+0x3b0>
 800ec9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eca2:	699b      	ldr	r3, [r3, #24]
 800eca4:	68da      	ldr	r2, [r3, #12]
 800eca6:	609a      	str	r2, [r3, #8]
 800eca8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ecac:	68d3      	ldr	r3, [r2, #12]
 800ecae:	6093      	str	r3, [r2, #8]
 800ecb0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	ecbd 8b10 	vpop	{d8-d15}
 800ecba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ecc0:	2901      	cmp	r1, #1
 800ecc2:	f47f add7 	bne.w	800e874 <forward_conv2d_nl_pool+0x3f8>
 800ecc6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800ecca:	2900      	cmp	r1, #0
 800eccc:	f43f af76 	beq.w	800ebbc <forward_conv2d_nl_pool+0x740>
 800ecd0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800ecd4:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800ecd8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800ecdc:	1ad2      	subs	r2, r2, r3
 800ecde:	1a8c      	subs	r4, r1, r2
 800ece0:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800ece4:	00b2      	lsls	r2, r6, #2
 800ece6:	fb02 f204 	mul.w	r2, r2, r4
 800ecea:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800ecee:	fbb1 f1f0 	udiv	r1, r1, r0
 800ecf2:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800ecf6:	460d      	mov	r5, r1
 800ecf8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ecfa:	62ba      	str	r2, [r7, #40]	; 0x28
 800ecfc:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800ed00:	0082      	lsls	r2, r0, #2
 800ed02:	65ba      	str	r2, [r7, #88]	; 0x58
 800ed04:	00ca      	lsls	r2, r1, #3
 800ed06:	607a      	str	r2, [r7, #4]
 800ed08:	00aa      	lsls	r2, r5, #2
 800ed0a:	60ba      	str	r2, [r7, #8]
 800ed0c:	fb03 f206 	mul.w	r2, r3, r6
 800ed10:	67ba      	str	r2, [r7, #120]	; 0x78
 800ed12:	69ba      	ldr	r2, [r7, #24]
 800ed14:	fb02 f303 	mul.w	r3, r2, r3
 800ed18:	617b      	str	r3, [r7, #20]
 800ed1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ed1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ed22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ed26:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ed2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ed2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ed32:	2300      	movs	r3, #0
 800ed34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ed38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f2c0 8112 	blt.w	800ef66 <forward_conv2d_nl_pool+0xaea>
 800ed42:	2100      	movs	r1, #0
 800ed44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed46:	460a      	mov	r2, r1
 800ed48:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800ed4c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800ed50:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800ed54:	4420      	add	r0, r4
 800ed56:	4408      	add	r0, r1
 800ed58:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800ed5c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800ed60:	190c      	adds	r4, r1, r4
 800ed62:	42ac      	cmp	r4, r5
 800ed64:	bf28      	it	cs
 800ed66:	462c      	movcs	r4, r5
 800ed68:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800ed6c:	0080      	lsls	r0, r0, #2
 800ed6e:	1aa4      	subs	r4, r4, r2
 800ed70:	2d00      	cmp	r5, #0
 800ed72:	f000 80e9 	beq.w	800ef48 <forward_conv2d_nl_pool+0xacc>
 800ed76:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ed7a:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800ed7e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800ed82:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ed86:	42b5      	cmp	r5, r6
 800ed88:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800ed8c:	eba3 0204 	sub.w	r2, r3, r4
 800ed90:	eba1 0104 	sub.w	r1, r1, r4
 800ed94:	bf08      	it	eq
 800ed96:	eef0 3a48 	vmoveq.f32	s7, s16
 800ed9a:	462b      	mov	r3, r5
 800ed9c:	697d      	ldr	r5, [r7, #20]
 800ed9e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800eda2:	4428      	add	r0, r5
 800eda4:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800eda8:	fb05 6e00 	mla	lr, r5, r0, r6
 800edac:	eb0e 000b 	add.w	r0, lr, fp
 800edb0:	4586      	cmp	lr, r0
 800edb2:	61f8      	str	r0, [r7, #28]
 800edb4:	f080 80a5 	bcs.w	800ef02 <forward_conv2d_nl_pool+0xa86>
 800edb8:	0092      	lsls	r2, r2, #2
 800edba:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800edbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edc0:	fb01 f10b 	mul.w	r1, r1, fp
 800edc4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800edc8:	f024 0803 	bic.w	r8, r4, #3
 800edcc:	2a00      	cmp	r2, #0
 800edce:	f000 8098 	beq.w	800ef02 <forward_conv2d_nl_pool+0xa86>
 800edd2:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800edd6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800edd8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800eddc:	0892      	lsrs	r2, r2, #2
 800edde:	3201      	adds	r2, #1
 800ede0:	4401      	add	r1, r0
 800ede2:	fb02 f00a 	mul.w	r0, r2, sl
 800ede6:	6638      	str	r0, [r7, #96]	; 0x60
 800ede8:	0110      	lsls	r0, r2, #4
 800edea:	0092      	lsls	r2, r2, #2
 800edec:	65fa      	str	r2, [r7, #92]	; 0x5c
 800edee:	1aca      	subs	r2, r1, r3
 800edf0:	613a      	str	r2, [r7, #16]
 800edf2:	68ba      	ldr	r2, [r7, #8]
 800edf4:	6738      	str	r0, [r7, #112]	; 0x70
 800edf6:	4413      	add	r3, r2
 800edf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800edfc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ee00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee02:	4413      	add	r3, r2
 800ee04:	60fb      	str	r3, [r7, #12]
 800ee06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	677b      	str	r3, [r7, #116]	; 0x74
 800ee10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ee14:	ecf3 6a01 	vldmia	r3!, {s13}
 800ee18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ee1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ee26:	dd57      	ble.n	800eed8 <forward_conv2d_nl_pool+0xa5c>
 800ee28:	4676      	mov	r6, lr
 800ee2a:	f04f 0c00 	mov.w	ip, #0
 800ee2e:	f1b8 0f00 	cmp.w	r8, #0
 800ee32:	f340 8087 	ble.w	800ef44 <forward_conv2d_nl_pool+0xac8>
 800ee36:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ee3a:	f109 0310 	add.w	r3, r9, #16
 800ee3e:	18b1      	adds	r1, r6, r2
 800ee40:	2000      	movs	r0, #0
 800ee42:	4632      	mov	r2, r6
 800ee44:	eb02 050b 	add.w	r5, r2, fp
 800ee48:	ed95 7a00 	vldr	s14, [r5]
 800ee4c:	ed53 7a03 	vldr	s15, [r3, #-12]
 800ee50:	ed92 4a00 	vldr	s8, [r2]
 800ee54:	ed53 4a04 	vldr	s9, [r3, #-16]
 800ee58:	ed91 5a00 	vldr	s10, [r1]
 800ee5c:	ed53 5a02 	vldr	s11, [r3, #-8]
 800ee60:	ed13 6a01 	vldr	s12, [r3, #-4]
 800ee64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee68:	eb01 050b 	add.w	r5, r1, fp
 800ee6c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ee70:	3004      	adds	r0, #4
 800ee72:	4540      	cmp	r0, r8
 800ee74:	ed95 7a00 	vldr	s14, [r5]
 800ee78:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ee7c:	4452      	add	r2, sl
 800ee7e:	4451      	add	r1, sl
 800ee80:	f103 0310 	add.w	r3, r3, #16
 800ee84:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ee88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ee8c:	dbda      	blt.n	800ee44 <forward_conv2d_nl_pool+0x9c8>
 800ee8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee90:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ee92:	441e      	add	r6, r3
 800ee94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee96:	4499      	add	r9, r3
 800ee98:	42a0      	cmp	r0, r4
 800ee9a:	da11      	bge.n	800eec0 <forward_conv2d_nl_pool+0xa44>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	4633      	mov	r3, r6
 800eea0:	4649      	mov	r1, r9
 800eea2:	edd3 7a00 	vldr	s15, [r3]
 800eea6:	ecb1 7a01 	vldmia	r1!, {s14}
 800eeaa:	3201      	adds	r2, #1
 800eeac:	42a2      	cmp	r2, r4
 800eeae:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eeb2:	445b      	add	r3, fp
 800eeb4:	d1f5      	bne.n	800eea2 <forward_conv2d_nl_pool+0xa26>
 800eeb6:	1a20      	subs	r0, r4, r0
 800eeb8:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800eebc:	fb00 660b 	mla	r6, r0, fp, r6
 800eec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eec4:	441e      	add	r6, r3
 800eec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eeca:	4499      	add	r9, r3
 800eecc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eed0:	f10c 0c01 	add.w	ip, ip, #1
 800eed4:	4563      	cmp	r3, ip
 800eed6:	d1aa      	bne.n	800ee2e <forward_conv2d_nl_pool+0x9b2>
 800eed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeda:	4499      	add	r9, r3
 800eedc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eede:	ece3 6a01 	vstmia	r3!, {s13}
 800eee2:	677b      	str	r3, [r7, #116]	; 0x74
 800eee4:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d191      	bne.n	800ee10 <forward_conv2d_nl_pool+0x994>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	1a9b      	subs	r3, r3, r2
 800eef2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	f10e 0e04 	add.w	lr, lr, #4
 800eefc:	459e      	cmp	lr, r3
 800eefe:	f4ff af7d 	bcc.w	800edfc <forward_conv2d_nl_pool+0x980>
 800ef02:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ef06:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800ef0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef0e:	440a      	add	r2, r1
 800ef10:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800ef14:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800ef18:	4608      	mov	r0, r1
 800ef1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ef1e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ef22:	4410      	add	r0, r2
 800ef24:	1a8a      	subs	r2, r1, r2
 800ef26:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800ef2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800ef2e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800ef32:	3301      	adds	r3, #1
 800ef34:	429a      	cmp	r2, r3
 800ef36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ef3a:	f47f aefd 	bne.w	800ed38 <forward_conv2d_nl_pool+0x8bc>
 800ef3e:	e5e7      	b.n	800eb10 <forward_conv2d_nl_pool+0x694>
 800ef40:	68da      	ldr	r2, [r3, #12]
 800ef42:	e63f      	b.n	800ebc4 <forward_conv2d_nl_pool+0x748>
 800ef44:	2000      	movs	r0, #0
 800ef46:	e7a7      	b.n	800ee98 <forward_conv2d_nl_pool+0xa1c>
 800ef48:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ef4c:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800ef50:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ef54:	1b19      	subs	r1, r3, r4
 800ef56:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ef5a:	eef0 3a48 	vmov.f32	s7, s16
 800ef5e:	1b1a      	subs	r2, r3, r4
 800ef60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ef64:	e71a      	b.n	800ed9c <forward_conv2d_nl_pool+0x920>
 800ef66:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ef6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef6c:	460a      	mov	r2, r1
 800ef6e:	440b      	add	r3, r1
 800ef70:	e6ea      	b.n	800ed48 <forward_conv2d_nl_pool+0x8cc>
 800ef72:	b168      	cbz	r0, 800ef90 <forward_conv2d_nl_pool+0xb14>
 800ef74:	6882      	ldr	r2, [r0, #8]
 800ef76:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800ef80:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800ef84:	f7ff bb29 	b.w	800e5da <forward_conv2d_nl_pool+0x15e>
 800ef88:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800ef8c:	f7ff bb08 	b.w	800e5a0 <forward_conv2d_nl_pool+0x124>
 800ef90:	2201      	movs	r2, #1
 800ef92:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800ef96:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800ef9a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800ef9e:	f7ff bb1c 	b.w	800e5da <forward_conv2d_nl_pool+0x15e>
 800efa2:	3118      	adds	r1, #24
 800efa4:	d008      	beq.n	800efb8 <forward_conv2d_nl_pool+0xb3c>
 800efa6:	462a      	mov	r2, r5
 800efa8:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 800efac:	4629      	mov	r1, r5
 800efae:	f7ff ba93 	b.w	800e4d8 <forward_conv2d_nl_pool+0x5c>
 800efb2:	4691      	mov	r9, r2
 800efb4:	f7ff ba7d 	b.w	800e4b2 <forward_conv2d_nl_pool+0x36>
 800efb8:	68cb      	ldr	r3, [r1, #12]
 800efba:	deff      	udf	#255	; 0xff
 800efbc:	2300      	movs	r3, #0
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	deff      	udf	#255	; 0xff
 800efc2:	4694      	mov	ip, r2
 800efc4:	f7ff ba6c 	b.w	800e4a0 <forward_conv2d_nl_pool+0x24>
 800efc8:	6873      	ldr	r3, [r6, #4]
 800efca:	deff      	udf	#255	; 0xff
 800efcc:	2200      	movs	r2, #0
 800efce:	f7ff ba82 	b.w	800e4d6 <forward_conv2d_nl_pool+0x5a>
 800efd2:	68db      	ldr	r3, [r3, #12]
 800efd4:	deff      	udf	#255	; 0xff
 800efd6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800efda:	2a00      	cmp	r2, #0
 800efdc:	f43f ab60 	beq.w	800e6a0 <forward_conv2d_nl_pool+0x224>
 800efe0:	2e03      	cmp	r6, #3
 800efe2:	d9eb      	bls.n	800efbc <forward_conv2d_nl_pool+0xb40>
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe8:	b323      	cbz	r3, 800f034 <forward_conv2d_nl_pool+0xbb8>
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	b313      	cbz	r3, 800f034 <forward_conv2d_nl_pool+0xbb8>
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800eff4:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800eff8:	9301      	str	r3, [sp, #4]
 800effa:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800effe:	9000      	str	r0, [sp, #0]
 800f000:	4673      	mov	r3, lr
 800f002:	4620      	mov	r0, r4
 800f004:	f7fe fa18 	bl	800d438 <ai_dict_decompress_f32>
 800f008:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f00c:	b17c      	cbz	r4, 800f02e <forward_conv2d_nl_pool+0xbb2>
 800f00e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800f012:	881e      	ldrh	r6, [r3, #0]
 800f014:	f7ff bb44 	b.w	800e6a0 <forward_conv2d_nl_pool+0x224>
 800f018:	b178      	cbz	r0, 800f03a <forward_conv2d_nl_pool+0xbbe>
 800f01a:	6881      	ldr	r1, [r0, #8]
 800f01c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f020:	2201      	movs	r2, #1
 800f022:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800f026:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f02a:	f7ff bad6 	b.w	800e5da <forward_conv2d_nl_pool+0x15e>
 800f02e:	881e      	ldrh	r6, [r3, #0]
 800f030:	f7ff bb36 	b.w	800e6a0 <forward_conv2d_nl_pool+0x224>
 800f034:	2300      	movs	r3, #0
 800f036:	699b      	ldr	r3, [r3, #24]
 800f038:	deff      	udf	#255	; 0xff
 800f03a:	2201      	movs	r2, #1
 800f03c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800f040:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800f044:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f048:	f7ff bac7 	b.w	800e5da <forward_conv2d_nl_pool+0x15e>
 800f04c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800f04e:	2801      	cmp	r0, #1
 800f050:	f47f ac10 	bne.w	800e874 <forward_conv2d_nl_pool+0x3f8>
 800f054:	1ad2      	subs	r2, r2, r3
 800f056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f058:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800f05c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800f060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f062:	fb00 4101 	mla	r1, r0, r1, r4
 800f066:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f06a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800f06e:	f080 81c4 	bcs.w	800f3fa <forward_conv2d_nl_pool+0xf7e>
 800f072:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f076:	2a00      	cmp	r2, #0
 800f078:	f43f ad4a 	beq.w	800eb10 <forward_conv2d_nl_pool+0x694>
 800f07c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f080:	fb02 f303 	mul.w	r3, r2, r3
 800f084:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f086:	677b      	str	r3, [r7, #116]	; 0x74
 800f088:	1a9b      	subs	r3, r3, r2
 800f08a:	663b      	str	r3, [r7, #96]	; 0x60
 800f08c:	188b      	adds	r3, r1, r2
 800f08e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f094:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f098:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f09c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f0a0:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 800f0a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f0a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f0b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	f000 8133 	beq.w	800f322 <forward_conv2d_nl_pool+0xea6>
 800f0bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f0c0:	ed93 6a00 	vldr	s12, [r3]
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f0ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f000 8101 	beq.w	800f2d6 <forward_conv2d_nl_pool+0xe5a>
 800f0d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0dc:	eb03 0802 	add.w	r8, r3, r2
 800f0e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f0e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800f0f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f0fa:	f04f 0b00 	mov.w	fp, #0
 800f0fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f102:	2b00      	cmp	r3, #0
 800f104:	f2c0 8104 	blt.w	800f310 <forward_conv2d_nl_pool+0xe94>
 800f108:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800f10c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f10e:	2300      	movs	r3, #0
 800f110:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800f114:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800f118:	eb02 0c04 	add.w	ip, r2, r4
 800f11c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f120:	4540      	cmp	r0, r8
 800f122:	bf94      	ite	ls
 800f124:	ebc3 0300 	rsbls	r3, r3, r0
 800f128:	ebc3 0308 	rsbhi	r3, r3, r8
 800f12c:	eba2 0903 	sub.w	r9, r2, r3
 800f130:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800f134:	1ac4      	subs	r4, r0, r3
 800f136:	fb03 f302 	mul.w	r3, r3, r2
 800f13a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800f13e:	2a00      	cmp	r2, #0
 800f140:	f340 80e3 	ble.w	800f30a <forward_conv2d_nl_pool+0xe8e>
 800f144:	f023 050f 	bic.w	r5, r3, #15
 800f148:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800f14c:	1e68      	subs	r0, r5, #1
 800f14e:	0900      	lsrs	r0, r0, #4
 800f150:	3001      	adds	r0, #1
 800f152:	fb06 f204 	mul.w	r2, r6, r4
 800f156:	673a      	str	r2, [r7, #112]	; 0x70
 800f158:	0102      	lsls	r2, r0, #4
 800f15a:	65ba      	str	r2, [r7, #88]	; 0x58
 800f15c:	fb06 f909 	mul.w	r9, r6, r9
 800f160:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800f164:	eef0 6a46 	vmov.f32	s13, s12
 800f168:	f04f 0e00 	mov.w	lr, #0
 800f16c:	4662      	mov	r2, ip
 800f16e:	2d00      	cmp	r5, #0
 800f170:	f340 80c9 	ble.w	800f306 <forward_conv2d_nl_pool+0xe8a>
 800f174:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800f178:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800f17c:	2600      	movs	r6, #0
 800f17e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800f182:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800f186:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800f18a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800f18e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800f192:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800f196:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800f19a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800f19e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800f1a2:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800f1a6:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800f1aa:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800f1ae:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800f1b2:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800f1b6:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800f1ba:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800f1be:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800f1c2:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800f1c6:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800f1ca:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800f1ce:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800f1d2:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800f1d6:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800f1da:	ed50 3a04 	vldr	s7, [r0, #-16]
 800f1de:	ed14 4a04 	vldr	s8, [r4, #-16]
 800f1e2:	ed50 4a03 	vldr	s9, [r0, #-12]
 800f1e6:	ed14 5a03 	vldr	s10, [r4, #-12]
 800f1ea:	ed50 5a02 	vldr	s11, [r0, #-8]
 800f1ee:	ed14 7a02 	vldr	s14, [r4, #-8]
 800f1f2:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800f1f6:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800f1fa:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800f1fe:	3610      	adds	r6, #16
 800f200:	42ae      	cmp	r6, r5
 800f202:	ed14 fa01 	vldr	s30, [r4, #-4]
 800f206:	ed50 ea01 	vldr	s29, [r0, #-4]
 800f20a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800f20e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800f212:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800f216:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800f21a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800f21e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800f222:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800f226:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f22a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800f22e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800f232:	eee1 7a82 	vfma.f32	s15, s3, s4
 800f236:	eee2 7a83 	vfma.f32	s15, s5, s6
 800f23a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f23e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f242:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f246:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800f24a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f24e:	db96      	blt.n	800f17e <forward_conv2d_nl_pool+0xd02>
 800f250:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f252:	4451      	add	r1, sl
 800f254:	4452      	add	r2, sl
 800f256:	4283      	cmp	r3, r0
 800f258:	dd0f      	ble.n	800f27a <forward_conv2d_nl_pool+0xdfe>
 800f25a:	4604      	mov	r4, r0
 800f25c:	468c      	mov	ip, r1
 800f25e:	4616      	mov	r6, r2
 800f260:	ecb6 7a01 	vldmia	r6!, {s14}
 800f264:	ecfc 7a01 	vldmia	ip!, {s15}
 800f268:	3401      	adds	r4, #1
 800f26a:	42a3      	cmp	r3, r4
 800f26c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f270:	d1f6      	bne.n	800f260 <forward_conv2d_nl_pool+0xde4>
 800f272:	1a18      	subs	r0, r3, r0
 800f274:	0080      	lsls	r0, r0, #2
 800f276:	4402      	add	r2, r0
 800f278:	4401      	add	r1, r0
 800f27a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f27c:	4402      	add	r2, r0
 800f27e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800f282:	f10e 0e01 	add.w	lr, lr, #1
 800f286:	4570      	cmp	r0, lr
 800f288:	4449      	add	r1, r9
 800f28a:	f47f af70 	bne.w	800f16e <forward_conv2d_nl_pool+0xcf2>
 800f28e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800f292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f294:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f298:	edc3 6a00 	vstr	s13, [r3]
 800f29c:	4608      	mov	r0, r1
 800f29e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800f2a2:	440b      	add	r3, r1
 800f2a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800f2a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800f2aa:	4410      	add	r0, r2
 800f2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2ae:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800f2b2:	4608      	mov	r0, r1
 800f2b4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800f2b8:	4418      	add	r0, r3
 800f2ba:	1acb      	subs	r3, r1, r3
 800f2bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f2c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f2c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800f2c8:	f10b 0b01 	add.w	fp, fp, #1
 800f2cc:	455b      	cmp	r3, fp
 800f2ce:	eba8 0802 	sub.w	r8, r8, r2
 800f2d2:	f47f af14 	bne.w	800f0fe <forward_conv2d_nl_pool+0xc82>
 800f2d6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800f2da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f2dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f2e0:	440a      	add	r2, r1
 800f2e2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800f2e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f2ea:	3204      	adds	r2, #4
 800f2ec:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800f2f0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f2fc:	f47f aed9 	bne.w	800f0b2 <forward_conv2d_nl_pool+0xc36>
 800f300:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800f304:	e404      	b.n	800eb10 <forward_conv2d_nl_pool+0x694>
 800f306:	2000      	movs	r0, #0
 800f308:	e7a5      	b.n	800f256 <forward_conv2d_nl_pool+0xdda>
 800f30a:	eef0 6a46 	vmov.f32	s13, s12
 800f30e:	e7be      	b.n	800f28e <forward_conv2d_nl_pool+0xe12>
 800f310:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f314:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f318:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800f31c:	eba8 0303 	sub.w	r3, r8, r3
 800f320:	e6f6      	b.n	800f110 <forward_conv2d_nl_pool+0xc94>
 800f322:	eeb0 6a48 	vmov.f32	s12, s16
 800f326:	e6d0      	b.n	800f0ca <forward_conv2d_nl_pool+0xc4e>
 800f328:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800f32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f330:	4611      	mov	r1, r2
 800f332:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f336:	4419      	add	r1, r3
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f33e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f344:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800f348:	4413      	add	r3, r2
 800f34a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f34e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f352:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f356:	4293      	cmp	r3, r2
 800f358:	f63f aa68 	bhi.w	800e82c <forward_conv2d_nl_pool+0x3b0>
 800f35c:	e49f      	b.n	800ec9e <forward_conv2d_nl_pool+0x822>
 800f35e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f362:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800f366:	699a      	ldr	r2, [r3, #24]
 800f368:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800f36c:	68d1      	ldr	r1, [r2, #12]
 800f36e:	6853      	ldr	r3, [r2, #4]
 800f370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f372:	fb00 4012 	mls	r0, r0, r2, r4
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	4281      	cmp	r1, r0
 800f37a:	bf88      	it	hi
 800f37c:	18c0      	addhi	r0, r0, r3
 800f37e:	4281      	cmp	r1, r0
 800f380:	eb01 0203 	add.w	r2, r1, r3
 800f384:	d216      	bcs.n	800f3b4 <forward_conv2d_nl_pool+0xf38>
 800f386:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800f38a:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800f38e:	42a1      	cmp	r1, r4
 800f390:	d010      	beq.n	800f3b4 <forward_conv2d_nl_pool+0xf38>
 800f392:	4290      	cmp	r0, r2
 800f394:	d20e      	bcs.n	800f3b4 <forward_conv2d_nl_pool+0xf38>
 800f396:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800f39a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800f39e:	f850 3b04 	ldr.w	r3, [r0], #4
 800f3a2:	f841 3b04 	str.w	r3, [r1], #4
 800f3a6:	69a2      	ldr	r2, [r4, #24]
 800f3a8:	6853      	ldr	r3, [r2, #4]
 800f3aa:	68d2      	ldr	r2, [r2, #12]
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	441a      	add	r2, r3
 800f3b0:	4282      	cmp	r2, r0
 800f3b2:	d8f4      	bhi.n	800f39e <forward_conv2d_nl_pool+0xf22>
 800f3b4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800f3b8:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800f3bc:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800f3c0:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800f3c2:	4420      	add	r0, r4
 800f3c4:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800f3c8:	1a40      	subs	r0, r0, r1
 800f3ca:	4421      	add	r1, r4
 800f3cc:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800f3d0:	442c      	add	r4, r5
 800f3d2:	b209      	sxth	r1, r1
 800f3d4:	b200      	sxth	r0, r0
 800f3d6:	4294      	cmp	r4, r2
 800f3d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800f3dc:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800f3e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	f4ff abfb 	bcc.w	800ebe0 <forward_conv2d_nl_pool+0x764>
 800f3ea:	425b      	negs	r3, r3
 800f3ec:	4419      	add	r1, r3
 800f3ee:	4291      	cmp	r1, r2
 800f3f0:	d2fc      	bcs.n	800f3ec <forward_conv2d_nl_pool+0xf70>
 800f3f2:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800f3f6:	f7ff bbf3 	b.w	800ebe0 <forward_conv2d_nl_pool+0x764>
 800f3fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f3fe:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800f402:	320a      	adds	r2, #10
 800f404:	f022 0207 	bic.w	r2, r2, #7
 800f408:	ebad 0d02 	sub.w	sp, sp, r2
 800f40c:	aa0a      	add	r2, sp, #40	; 0x28
 800f40e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f412:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f416:	2a00      	cmp	r2, #0
 800f418:	f000 8153 	beq.w	800f6c2 <forward_conv2d_nl_pool+0x1246>
 800f41c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f420:	f8c7 b01c 	str.w	fp, [r7, #28]
 800f424:	fb02 f303 	mul.w	r3, r2, r3
 800f428:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f42a:	663b      	str	r3, [r7, #96]	; 0x60
 800f42c:	1a9b      	subs	r3, r3, r2
 800f42e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f430:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f434:	f8c7 a014 	str.w	sl, [r7, #20]
 800f438:	4413      	add	r3, r2
 800f43a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f43c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f440:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f448:	67bb      	str	r3, [r7, #120]	; 0x78
 800f44a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f44e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f452:	2300      	movs	r3, #0
 800f454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f45c:	b13b      	cbz	r3, 800f46e <forward_conv2d_nl_pool+0xff2>
 800f45e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f462:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800f466:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800f46a:	f001 f83d 	bl	80104e8 <memcpy>
 800f46e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f472:	2b00      	cmp	r3, #0
 800f474:	f000 8137 	beq.w	800f6e6 <forward_conv2d_nl_pool+0x126a>
 800f478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f47a:	ed93 6a00 	vldr	s12, [r3]
 800f47e:	3304      	adds	r3, #4
 800f480:	67bb      	str	r3, [r7, #120]	; 0x78
 800f482:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f486:	2b00      	cmp	r3, #0
 800f488:	f000 8101 	beq.w	800f68e <forward_conv2d_nl_pool+0x1212>
 800f48c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f490:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f494:	eb03 0802 	add.w	r8, r3, r2
 800f498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f49a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4a8:	677b      	str	r3, [r7, #116]	; 0x74
 800f4aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f4ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f4b2:	f04f 0b00 	mov.w	fp, #0
 800f4b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f2c0 810a 	blt.w	800f6d4 <forward_conv2d_nl_pool+0x1258>
 800f4c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800f4c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800f4cc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800f4d0:	eb02 0c04 	add.w	ip, r2, r4
 800f4d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f4d8:	4540      	cmp	r0, r8
 800f4da:	bf94      	ite	ls
 800f4dc:	ebc3 0300 	rsbls	r3, r3, r0
 800f4e0:	ebc3 0308 	rsbhi	r3, r3, r8
 800f4e4:	eba2 0903 	sub.w	r9, r2, r3
 800f4e8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800f4ec:	1ac4      	subs	r4, r0, r3
 800f4ee:	fb03 f302 	mul.w	r3, r3, r2
 800f4f2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800f4f6:	2a00      	cmp	r2, #0
 800f4f8:	f340 80e9 	ble.w	800f6ce <forward_conv2d_nl_pool+0x1252>
 800f4fc:	f023 050f 	bic.w	r5, r3, #15
 800f500:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800f504:	1e68      	subs	r0, r5, #1
 800f506:	0900      	lsrs	r0, r0, #4
 800f508:	3001      	adds	r0, #1
 800f50a:	fb06 f204 	mul.w	r2, r6, r4
 800f50e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f510:	0102      	lsls	r2, r0, #4
 800f512:	62ba      	str	r2, [r7, #40]	; 0x28
 800f514:	fb06 f909 	mul.w	r9, r6, r9
 800f518:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800f51c:	eef0 6a46 	vmov.f32	s13, s12
 800f520:	f04f 0e00 	mov.w	lr, #0
 800f524:	4662      	mov	r2, ip
 800f526:	2d00      	cmp	r5, #0
 800f528:	f340 80cf 	ble.w	800f6ca <forward_conv2d_nl_pool+0x124e>
 800f52c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800f530:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800f534:	2600      	movs	r6, #0
 800f536:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800f53a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800f53e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800f542:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800f546:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800f54a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800f54e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800f552:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800f556:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800f55a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800f55e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800f562:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800f566:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800f56a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800f56e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800f572:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800f576:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800f57a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800f57e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800f582:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800f586:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800f58a:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800f58e:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800f592:	ed50 3a04 	vldr	s7, [r0, #-16]
 800f596:	ed14 4a04 	vldr	s8, [r4, #-16]
 800f59a:	ed54 4a03 	vldr	s9, [r4, #-12]
 800f59e:	ed10 5a03 	vldr	s10, [r0, #-12]
 800f5a2:	ed50 5a02 	vldr	s11, [r0, #-8]
 800f5a6:	ed14 7a02 	vldr	s14, [r4, #-8]
 800f5aa:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800f5ae:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800f5b2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800f5b6:	3610      	adds	r6, #16
 800f5b8:	42ae      	cmp	r6, r5
 800f5ba:	ed14 fa01 	vldr	s30, [r4, #-4]
 800f5be:	ed50 ea01 	vldr	s29, [r0, #-4]
 800f5c2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800f5c6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800f5ca:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800f5ce:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800f5d2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800f5d6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800f5da:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800f5de:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f5e2:	eee8 7a80 	vfma.f32	s15, s17, s0
 800f5e6:	eee0 7a81 	vfma.f32	s15, s1, s2
 800f5ea:	eee1 7a82 	vfma.f32	s15, s3, s4
 800f5ee:	eee2 7a83 	vfma.f32	s15, s5, s6
 800f5f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f5f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f5fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f5fe:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800f602:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f606:	db96      	blt.n	800f536 <forward_conv2d_nl_pool+0x10ba>
 800f608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f60a:	4451      	add	r1, sl
 800f60c:	4452      	add	r2, sl
 800f60e:	4283      	cmp	r3, r0
 800f610:	dd0f      	ble.n	800f632 <forward_conv2d_nl_pool+0x11b6>
 800f612:	4604      	mov	r4, r0
 800f614:	468c      	mov	ip, r1
 800f616:	4616      	mov	r6, r2
 800f618:	ecb6 7a01 	vldmia	r6!, {s14}
 800f61c:	ecfc 7a01 	vldmia	ip!, {s15}
 800f620:	3401      	adds	r4, #1
 800f622:	42a3      	cmp	r3, r4
 800f624:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f628:	d1f6      	bne.n	800f618 <forward_conv2d_nl_pool+0x119c>
 800f62a:	1a18      	subs	r0, r3, r0
 800f62c:	0080      	lsls	r0, r0, #2
 800f62e:	4402      	add	r2, r0
 800f630:	4401      	add	r1, r0
 800f632:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f634:	4402      	add	r2, r0
 800f636:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800f63a:	f10e 0e01 	add.w	lr, lr, #1
 800f63e:	4570      	cmp	r0, lr
 800f640:	4449      	add	r1, r9
 800f642:	f47f af70 	bne.w	800f526 <forward_conv2d_nl_pool+0x10aa>
 800f646:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800f64a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f64c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f650:	edc3 6a00 	vstr	s13, [r3]
 800f654:	4608      	mov	r0, r1
 800f656:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800f65a:	440b      	add	r3, r1
 800f65c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800f660:	677b      	str	r3, [r7, #116]	; 0x74
 800f662:	4410      	add	r0, r2
 800f664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f666:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800f66a:	4608      	mov	r0, r1
 800f66c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800f670:	4418      	add	r0, r3
 800f672:	1acb      	subs	r3, r1, r3
 800f674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f678:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f67c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800f680:	f10b 0b01 	add.w	fp, fp, #1
 800f684:	455b      	cmp	r3, fp
 800f686:	eba8 0802 	sub.w	r8, r8, r2
 800f68a:	f47f af14 	bne.w	800f4b6 <forward_conv2d_nl_pool+0x103a>
 800f68e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800f692:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800f696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f69a:	440a      	add	r2, r1
 800f69c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800f6a0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f6a4:	3204      	adds	r2, #4
 800f6a6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800f6aa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f6b6:	f47f aecf 	bne.w	800f458 <forward_conv2d_nl_pool+0xfdc>
 800f6ba:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800f6be:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800f6c2:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800f6c6:	f7ff ba23 	b.w	800eb10 <forward_conv2d_nl_pool+0x694>
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	e79f      	b.n	800f60e <forward_conv2d_nl_pool+0x1192>
 800f6ce:	eef0 6a46 	vmov.f32	s13, s12
 800f6d2:	e7b8      	b.n	800f646 <forward_conv2d_nl_pool+0x11ca>
 800f6d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6d8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f6dc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800f6e0:	eba8 0303 	sub.w	r3, r8, r3
 800f6e4:	e6f0      	b.n	800f4c8 <forward_conv2d_nl_pool+0x104c>
 800f6e6:	eeb0 6a48 	vmov.f32	s12, s16
 800f6ea:	e6ca      	b.n	800f482 <forward_conv2d_nl_pool+0x1006>

0800f6ec <forward_dense>:
 800f6ec:	6983      	ldr	r3, [r0, #24]
 800f6ee:	881a      	ldrh	r2, [r3, #0]
 800f6f0:	2a00      	cmp	r2, #0
 800f6f2:	f000 80b5 	beq.w	800f860 <forward_dense+0x174>
 800f6f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fa:	ed2d 8b10 	vpush	{d8-d15}
 800f6fe:	685f      	ldr	r7, [r3, #4]
 800f700:	687e      	ldr	r6, [r7, #4]
 800f702:	b091      	sub	sp, #68	; 0x44
 800f704:	b106      	cbz	r6, 800f708 <forward_dense+0x1c>
 800f706:	6836      	ldr	r6, [r6, #0]
 800f708:	2a01      	cmp	r2, #1
 800f70a:	f240 80a6 	bls.w	800f85a <forward_dense+0x16e>
 800f70e:	693d      	ldr	r5, [r7, #16]
 800f710:	b105      	cbz	r5, 800f714 <forward_dense+0x28>
 800f712:	682d      	ldr	r5, [r5, #0]
 800f714:	2a02      	cmp	r2, #2
 800f716:	f000 80a5 	beq.w	800f864 <forward_dense+0x178>
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 821b 	beq.w	800fb58 <forward_dense+0x46c>
 800f722:	6819      	ldr	r1, [r3, #0]
 800f724:	9106      	str	r1, [sp, #24]
 800f726:	f117 0118 	adds.w	r1, r7, #24
 800f72a:	f000 80c9 	beq.w	800f8c0 <forward_dense+0x1d4>
 800f72e:	8b39      	ldrh	r1, [r7, #24]
 800f730:	2901      	cmp	r1, #1
 800f732:	f240 820e 	bls.w	800fb52 <forward_dense+0x466>
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 80c4 	beq.w	800f8c4 <forward_dense+0x1d8>
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	9307      	str	r3, [sp, #28]
 800f740:	9b06      	ldr	r3, [sp, #24]
 800f742:	68ec      	ldr	r4, [r5, #12]
 800f744:	6998      	ldr	r0, [r3, #24]
 800f746:	68f1      	ldr	r1, [r6, #12]
 800f748:	6803      	ldr	r3, [r0, #0]
 800f74a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f74e:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800f752:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800f756:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800f75a:	fa49 f101 	asr.w	r1, r9, r1
 800f75e:	910b      	str	r1, [sp, #44]	; 0x2c
 800f760:	2a03      	cmp	r2, #3
 800f762:	fb0e f10c 	mul.w	r1, lr, ip
 800f766:	6864      	ldr	r4, [r4, #4]
 800f768:	9108      	str	r1, [sp, #32]
 800f76a:	f000 81de 	beq.w	800fb2a <forward_dense+0x43e>
 800f76e:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800f770:	b117      	cbz	r7, 800f778 <forward_dense+0x8c>
 800f772:	683f      	ldr	r7, [r7, #0]
 800f774:	b107      	cbz	r7, 800f778 <forward_dense+0x8c>
 800f776:	69bf      	ldr	r7, [r7, #24]
 800f778:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800f77c:	2b04      	cmp	r3, #4
 800f77e:	f000 81d7 	beq.w	800fb30 <forward_dense+0x444>
 800f782:	2b08      	cmp	r3, #8
 800f784:	f000 81d4 	beq.w	800fb30 <forward_dense+0x444>
 800f788:	f04f 0a00 	mov.w	sl, #0
 800f78c:	69ab      	ldr	r3, [r5, #24]
 800f78e:	69b2      	ldr	r2, [r6, #24]
 800f790:	6899      	ldr	r1, [r3, #8]
 800f792:	9b06      	ldr	r3, [sp, #24]
 800f794:	9104      	str	r1, [sp, #16]
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	6897      	ldr	r7, [r2, #8]
 800f79a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f79e:	00a3      	lsls	r3, r4, #2
 800f7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a2:	18ce      	adds	r6, r1, r3
 800f7a4:	9b08      	ldr	r3, [sp, #32]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d052      	beq.n	800f850 <forward_dense+0x164>
 800f7aa:	f1a8 0310 	sub.w	r3, r8, #16
 800f7ae:	091b      	lsrs	r3, r3, #4
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	019b      	lsls	r3, r3, #6
 800f7b4:	930c      	str	r3, [sp, #48]	; 0x30
 800f7b6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800f7ba:	930a      	str	r3, [sp, #40]	; 0x28
 800f7bc:	2300      	movs	r3, #0
 800f7be:	9305      	str	r3, [sp, #20]
 800f7c0:	eddf aace 	vldr	s21, [pc, #824]	; 800fafc <forward_dense+0x410>
 800f7c4:	f008 030f 	and.w	r3, r8, #15
 800f7c8:	930d      	str	r3, [sp, #52]	; 0x34
 800f7ca:	9b06      	ldr	r3, [sp, #24]
 800f7cc:	699b      	ldr	r3, [r3, #24]
 800f7ce:	689d      	ldr	r5, [r3, #8]
 800f7d0:	9b07      	ldr	r3, [sp, #28]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f000 818f 	beq.w	800faf6 <forward_dense+0x40a>
 800f7d8:	699b      	ldr	r3, [r3, #24]
 800f7da:	689c      	ldr	r4, [r3, #8]
 800f7dc:	9b04      	ldr	r3, [sp, #16]
 800f7de:	f1ba 0f00 	cmp.w	sl, #0
 800f7e2:	d071      	beq.n	800f8c8 <forward_dense+0x1dc>
 800f7e4:	42b3      	cmp	r3, r6
 800f7e6:	d229      	bcs.n	800f83c <forward_dense+0x150>
 800f7e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7ea:	469b      	mov	fp, r3
 800f7ec:	ab0f      	add	r3, sp, #60	; 0x3c
 800f7ee:	9303      	str	r3, [sp, #12]
 800f7f0:	2a04      	cmp	r2, #4
 800f7f2:	4633      	mov	r3, r6
 800f7f4:	4646      	mov	r6, r8
 800f7f6:	4698      	mov	r8, r3
 800f7f8:	d037      	beq.n	800f86a <forward_dense+0x17e>
 800f7fa:	2c00      	cmp	r4, #0
 800f7fc:	f000 8180 	beq.w	800fb00 <forward_dense+0x414>
 800f800:	f8d4 c000 	ldr.w	ip, [r4]
 800f804:	9803      	ldr	r0, [sp, #12]
 800f806:	9600      	str	r6, [sp, #0]
 800f808:	463b      	mov	r3, r7
 800f80a:	4629      	mov	r1, r5
 800f80c:	4652      	mov	r2, sl
 800f80e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f812:	f7fd fc85 	bl	800d120 <ai_dict8_dot_array_f32>
 800f816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f818:	f84b 3b04 	str.w	r3, [fp], #4
 800f81c:	45c3      	cmp	fp, r8
 800f81e:	f104 0404 	add.w	r4, r4, #4
 800f822:	444d      	add	r5, r9
 800f824:	d3e9      	bcc.n	800f7fa <forward_dense+0x10e>
 800f826:	4643      	mov	r3, r8
 800f828:	46b0      	mov	r8, r6
 800f82a:	461e      	mov	r6, r3
 800f82c:	9a04      	ldr	r2, [sp, #16]
 800f82e:	43d3      	mvns	r3, r2
 800f830:	4433      	add	r3, r6
 800f832:	f023 0303 	bic.w	r3, r3, #3
 800f836:	3304      	adds	r3, #4
 800f838:	18d3      	adds	r3, r2, r3
 800f83a:	9304      	str	r3, [sp, #16]
 800f83c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f83e:	9b05      	ldr	r3, [sp, #20]
 800f840:	4417      	add	r7, r2
 800f842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f844:	4416      	add	r6, r2
 800f846:	9a08      	ldr	r2, [sp, #32]
 800f848:	3301      	adds	r3, #1
 800f84a:	4293      	cmp	r3, r2
 800f84c:	9305      	str	r3, [sp, #20]
 800f84e:	d1bc      	bne.n	800f7ca <forward_dense+0xde>
 800f850:	b011      	add	sp, #68	; 0x44
 800f852:	ecbd 8b10 	vpop	{d8-d15}
 800f856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f85a:	2300      	movs	r3, #0
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	deff      	udf	#255	; 0xff
 800f860:	6853      	ldr	r3, [r2, #4]
 800f862:	deff      	udf	#255	; 0xff
 800f864:	2300      	movs	r3, #0
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	deff      	udf	#255	; 0xff
 800f86a:	b1a4      	cbz	r4, 800f896 <forward_dense+0x1aa>
 800f86c:	f8d4 c000 	ldr.w	ip, [r4]
 800f870:	9803      	ldr	r0, [sp, #12]
 800f872:	9600      	str	r6, [sp, #0]
 800f874:	463b      	mov	r3, r7
 800f876:	4629      	mov	r1, r5
 800f878:	4652      	mov	r2, sl
 800f87a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f87e:	f7fd fd1d 	bl	800d2bc <ai_dict4_dot_array_f32>
 800f882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f884:	f84b 3b04 	str.w	r3, [fp], #4
 800f888:	45c3      	cmp	fp, r8
 800f88a:	f104 0404 	add.w	r4, r4, #4
 800f88e:	444d      	add	r5, r9
 800f890:	d2c9      	bcs.n	800f826 <forward_dense+0x13a>
 800f892:	2c00      	cmp	r4, #0
 800f894:	d1ea      	bne.n	800f86c <forward_dense+0x180>
 800f896:	4634      	mov	r4, r6
 800f898:	4646      	mov	r6, r8
 800f89a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f89e:	9400      	str	r4, [sp, #0]
 800f8a0:	463b      	mov	r3, r7
 800f8a2:	4629      	mov	r1, r5
 800f8a4:	4652      	mov	r2, sl
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800f8ac:	f7fd fd06 	bl	800d2bc <ai_dict4_dot_array_f32>
 800f8b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8b2:	f84b 3b04 	str.w	r3, [fp], #4
 800f8b6:	45b3      	cmp	fp, r6
 800f8b8:	444d      	add	r5, r9
 800f8ba:	d3f0      	bcc.n	800f89e <forward_dense+0x1b2>
 800f8bc:	46a0      	mov	r8, r4
 800f8be:	e7b5      	b.n	800f82c <forward_dense+0x140>
 800f8c0:	9107      	str	r1, [sp, #28]
 800f8c2:	e73d      	b.n	800f740 <forward_dense+0x54>
 800f8c4:	9307      	str	r3, [sp, #28]
 800f8c6:	e73b      	b.n	800f740 <forward_dense+0x54>
 800f8c8:	42b3      	cmp	r3, r6
 800f8ca:	d2b7      	bcs.n	800f83c <forward_dense+0x150>
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8d0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800f8d4:	eb07 0c03 	add.w	ip, r7, r3
 800f8d8:	469e      	mov	lr, r3
 800f8da:	2c00      	cmp	r4, #0
 800f8dc:	f000 80ff 	beq.w	800fade <forward_dense+0x3f2>
 800f8e0:	f1b8 0f0f 	cmp.w	r8, #15
 800f8e4:	edd4 fa00 	vldr	s31, [r4]
 800f8e8:	eddf 6a84 	vldr	s13, [pc, #528]	; 800fafc <forward_dense+0x410>
 800f8ec:	f104 0404 	add.w	r4, r4, #4
 800f8f0:	f240 80fd 	bls.w	800faee <forward_dense+0x402>
 800f8f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f8f8:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800f8fc:	4641      	mov	r1, r8
 800f8fe:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800f902:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800f906:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800f90a:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800f90e:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800f912:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800f916:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800f91a:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800f91e:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800f922:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800f926:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800f92a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800f92e:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800f932:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800f936:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800f93a:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800f93e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800f942:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800f946:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800f94a:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800f94e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800f952:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800f956:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800f95a:	ed12 4a04 	vldr	s8, [r2, #-16]
 800f95e:	ed53 4a04 	vldr	s9, [r3, #-16]
 800f962:	ed13 5a03 	vldr	s10, [r3, #-12]
 800f966:	ed52 5a03 	vldr	s11, [r2, #-12]
 800f96a:	ed13 6a02 	vldr	s12, [r3, #-8]
 800f96e:	ed12 7a02 	vldr	s14, [r2, #-8]
 800f972:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800f976:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800f97a:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800f97e:	3910      	subs	r1, #16
 800f980:	290f      	cmp	r1, #15
 800f982:	ed52 ea01 	vldr	s29, [r2, #-4]
 800f986:	ed13 ea01 	vldr	s28, [r3, #-4]
 800f98a:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800f98e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800f992:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800f996:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800f99a:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800f99e:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800f9a2:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f9a6:	eee8 7a88 	vfma.f32	s15, s17, s16
 800f9aa:	eee0 7a20 	vfma.f32	s15, s0, s1
 800f9ae:	eee1 7a21 	vfma.f32	s15, s2, s3
 800f9b2:	eee2 7a22 	vfma.f32	s15, s4, s5
 800f9b6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f9ba:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f9be:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f9c2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f9c6:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800f9ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f9ce:	d896      	bhi.n	800f8fe <forward_dense+0x212>
 800f9d0:	eb05 010e 	add.w	r1, r5, lr
 800f9d4:	465b      	mov	r3, fp
 800f9d6:	4662      	mov	r2, ip
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d075      	beq.n	800fac8 <forward_dense+0x3dc>
 800f9dc:	ed91 7a00 	vldr	s14, [r1]
 800f9e0:	edd2 7a00 	vldr	s15, [r2]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f9ea:	d06d      	beq.n	800fac8 <forward_dense+0x3dc>
 800f9ec:	ed91 7a01 	vldr	s14, [r1, #4]
 800f9f0:	edd2 7a01 	vldr	s15, [r2, #4]
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f9fa:	d065      	beq.n	800fac8 <forward_dense+0x3dc>
 800f9fc:	ed91 7a02 	vldr	s14, [r1, #8]
 800fa00:	edd2 7a02 	vldr	s15, [r2, #8]
 800fa04:	2b03      	cmp	r3, #3
 800fa06:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa0a:	d05d      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa0c:	ed91 7a03 	vldr	s14, [r1, #12]
 800fa10:	edd2 7a03 	vldr	s15, [r2, #12]
 800fa14:	2b04      	cmp	r3, #4
 800fa16:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa1a:	d055      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa1c:	ed91 7a04 	vldr	s14, [r1, #16]
 800fa20:	edd2 7a04 	vldr	s15, [r2, #16]
 800fa24:	2b05      	cmp	r3, #5
 800fa26:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa2a:	d04d      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa2c:	ed91 7a05 	vldr	s14, [r1, #20]
 800fa30:	edd2 7a05 	vldr	s15, [r2, #20]
 800fa34:	2b06      	cmp	r3, #6
 800fa36:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa3a:	d045      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa3c:	ed91 7a06 	vldr	s14, [r1, #24]
 800fa40:	edd2 7a06 	vldr	s15, [r2, #24]
 800fa44:	2b07      	cmp	r3, #7
 800fa46:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa4a:	d03d      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa4c:	ed91 7a07 	vldr	s14, [r1, #28]
 800fa50:	edd2 7a07 	vldr	s15, [r2, #28]
 800fa54:	2b08      	cmp	r3, #8
 800fa56:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa5a:	d035      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa5c:	ed91 7a08 	vldr	s14, [r1, #32]
 800fa60:	edd2 7a08 	vldr	s15, [r2, #32]
 800fa64:	2b09      	cmp	r3, #9
 800fa66:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa6a:	d02d      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa6c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800fa70:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800fa74:	2b0a      	cmp	r3, #10
 800fa76:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa7a:	d025      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa7c:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800fa80:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800fa84:	2b0b      	cmp	r3, #11
 800fa86:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa8a:	d01d      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa8c:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800fa90:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800fa94:	2b0c      	cmp	r3, #12
 800fa96:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa9a:	d015      	beq.n	800fac8 <forward_dense+0x3dc>
 800fa9c:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800faa0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800faa4:	2b0d      	cmp	r3, #13
 800faa6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800faaa:	d00d      	beq.n	800fac8 <forward_dense+0x3dc>
 800faac:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800fab0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800fab4:	2b0e      	cmp	r3, #14
 800fab6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800faba:	d005      	beq.n	800fac8 <forward_dense+0x3dc>
 800fabc:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800fac0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800fac4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fac8:	444d      	add	r5, r9
 800faca:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800face:	ece0 6a01 	vstmia	r0!, {s13}
 800fad2:	42b0      	cmp	r0, r6
 800fad4:	f4bf aeaa 	bcs.w	800f82c <forward_dense+0x140>
 800fad8:	2c00      	cmp	r4, #0
 800fada:	f47f af01 	bne.w	800f8e0 <forward_dense+0x1f4>
 800fade:	f1b8 0f0f 	cmp.w	r8, #15
 800fae2:	eef0 fa6a 	vmov.f32	s31, s21
 800fae6:	eddf 6a05 	vldr	s13, [pc, #20]	; 800fafc <forward_dense+0x410>
 800faea:	f63f af03 	bhi.w	800f8f4 <forward_dense+0x208>
 800faee:	4643      	mov	r3, r8
 800faf0:	4629      	mov	r1, r5
 800faf2:	463a      	mov	r2, r7
 800faf4:	e770      	b.n	800f9d8 <forward_dense+0x2ec>
 800faf6:	461c      	mov	r4, r3
 800faf8:	e670      	b.n	800f7dc <forward_dense+0xf0>
 800fafa:	bf00      	nop
 800fafc:	00000000 	.word	0x00000000
 800fb00:	4634      	mov	r4, r6
 800fb02:	4646      	mov	r6, r8
 800fb04:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fb08:	9400      	str	r4, [sp, #0]
 800fb0a:	463b      	mov	r3, r7
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	4652      	mov	r2, sl
 800fb10:	4640      	mov	r0, r8
 800fb12:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800fb16:	f7fd fb03 	bl	800d120 <ai_dict8_dot_array_f32>
 800fb1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb1c:	f84b 3b04 	str.w	r3, [fp], #4
 800fb20:	455e      	cmp	r6, fp
 800fb22:	444d      	add	r5, r9
 800fb24:	d8f0      	bhi.n	800fb08 <forward_dense+0x41c>
 800fb26:	46a0      	mov	r8, r4
 800fb28:	e680      	b.n	800f82c <forward_dense+0x140>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	deff      	udf	#255	; 0xff
 800fb30:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800fb34:	2f00      	cmp	r7, #0
 800fb36:	f43f ae29 	beq.w	800f78c <forward_dense+0xa0>
 800fb3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fb3e:	f000 fc4f 	bl	80103e0 <ai_array_get_byte_size>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	4602      	mov	r2, r0
 800fb46:	4651      	mov	r1, sl
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f000 fccd 	bl	80104e8 <memcpy>
 800fb4e:	4682      	mov	sl, r0
 800fb50:	e61c      	b.n	800f78c <forward_dense+0xa0>
 800fb52:	2300      	movs	r3, #0
 800fb54:	9307      	str	r3, [sp, #28]
 800fb56:	e5f3      	b.n	800f740 <forward_dense+0x54>
 800fb58:	9306      	str	r3, [sp, #24]
 800fb5a:	e5e4      	b.n	800f726 <forward_dense+0x3a>

0800fb5c <nl_func_relu_array_f32>:
 800fb5c:	b410      	push	{r4}
 800fb5e:	698c      	ldr	r4, [r1, #24]
 800fb60:	6981      	ldr	r1, [r0, #24]
 800fb62:	68a3      	ldr	r3, [r4, #8]
 800fb64:	6889      	ldr	r1, [r1, #8]
 800fb66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800fb6a:	3a01      	subs	r2, #1
 800fb6c:	0092      	lsls	r2, r2, #2
 800fb6e:	189b      	adds	r3, r3, r2
 800fb70:	d216      	bcs.n	800fba0 <nl_func_relu_array_f32+0x44>
 800fb72:	3204      	adds	r2, #4
 800fb74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fba8 <nl_func_relu_array_f32+0x4c>
 800fb78:	4411      	add	r1, r2
 800fb7a:	3304      	adds	r3, #4
 800fb7c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fb80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb88:	bfb8      	it	lt
 800fb8a:	eef0 7a47 	vmovlt.f32	s15, s14
 800fb8e:	ed61 7a01 	vstmdb	r1!, {s15}
 800fb92:	68a0      	ldr	r0, [r4, #8]
 800fb94:	f1a3 0208 	sub.w	r2, r3, #8
 800fb98:	4290      	cmp	r0, r2
 800fb9a:	f1a3 0304 	sub.w	r3, r3, #4
 800fb9e:	d9ed      	bls.n	800fb7c <nl_func_relu_array_f32+0x20>
 800fba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
 800fba8:	00000000 	.word	0x00000000

0800fbac <nl_func_sm_array_f32>:
 800fbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb0:	ed2d 8b04 	vpush	{d8-d9}
 800fbb4:	b089      	sub	sp, #36	; 0x24
 800fbb6:	698f      	ldr	r7, [r1, #24]
 800fbb8:	6984      	ldr	r4, [r0, #24]
 800fbba:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800fbbe:	68bd      	ldr	r5, [r7, #8]
 800fbc0:	9402      	str	r4, [sp, #8]
 800fbc2:	4626      	mov	r6, r4
 800fbc4:	4696      	mov	lr, r2
 800fbc6:	eba2 020c 	sub.w	r2, r2, ip
 800fbca:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800fbce:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800fbd0:	68fa      	ldr	r2, [r7, #12]
 800fbd2:	68b6      	ldr	r6, [r6, #8]
 800fbd4:	ebae 0e04 	sub.w	lr, lr, r4
 800fbd8:	4295      	cmp	r5, r2
 800fbda:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800fbde:	d354      	bcc.n	800fc8a <nl_func_sm_array_f32+0xde>
 800fbe0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800fbe4:	f1cc 0200 	rsb	r2, ip, #0
 800fbe8:	00a4      	lsls	r4, r4, #2
 800fbea:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800fbee:	9303      	str	r3, [sp, #12]
 800fbf0:	9204      	str	r2, [sp, #16]
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	4262      	negs	r2, r4
 800fbf6:	9205      	str	r2, [sp, #20]
 800fbf8:	9301      	str	r3, [sp, #4]
 800fbfa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800fbfe:	9b02      	ldr	r3, [sp, #8]
 800fc00:	9a07      	ldr	r2, [sp, #28]
 800fc02:	60bd      	str	r5, [r7, #8]
 800fc04:	609e      	str	r6, [r3, #8]
 800fc06:	9b06      	ldr	r3, [sp, #24]
 800fc08:	6992      	ldr	r2, [r2, #24]
 800fc0a:	699b      	ldr	r3, [r3, #24]
 800fc0c:	6894      	ldr	r4, [r2, #8]
 800fc0e:	9a03      	ldr	r2, [sp, #12]
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	2a01      	cmp	r2, #1
 800fc14:	ed93 8a00 	vldr	s16, [r3]
 800fc18:	d940      	bls.n	800fc9c <nl_func_sm_array_f32+0xf0>
 800fc1a:	9901      	ldr	r1, [sp, #4]
 800fc1c:	1d1a      	adds	r2, r3, #4
 800fc1e:	eb03 0b01 	add.w	fp, r3, r1
 800fc22:	ecf2 7a01 	vldmia	r2!, {s15}
 800fc26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2e:	bfb8      	it	lt
 800fc30:	eeb0 8a67 	vmovlt.f32	s16, s15
 800fc34:	4593      	cmp	fp, r2
 800fc36:	d1f4      	bne.n	800fc22 <nl_func_sm_array_f32+0x76>
 800fc38:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800fca8 <nl_func_sm_array_f32+0xfc>
 800fc3c:	469a      	mov	sl, r3
 800fc3e:	46a1      	mov	r9, r4
 800fc40:	46a0      	mov	r8, r4
 800fc42:	ecba 0a01 	vldmia	sl!, {s0}
 800fc46:	ee30 0a48 	vsub.f32	s0, s0, s16
 800fc4a:	f005 f8f3 	bl	8014e34 <expf>
 800fc4e:	45d3      	cmp	fp, sl
 800fc50:	eca8 0a01 	vstmia	r8!, {s0}
 800fc54:	ee78 8a80 	vadd.f32	s17, s17, s0
 800fc58:	d1f3      	bne.n	800fc42 <nl_func_sm_array_f32+0x96>
 800fc5a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc62:	d00b      	beq.n	800fc7c <nl_func_sm_array_f32+0xd0>
 800fc64:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800fc68:	9b01      	ldr	r3, [sp, #4]
 800fc6a:	441c      	add	r4, r3
 800fc6c:	edd9 7a00 	vldr	s15, [r9]
 800fc70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc74:	ece9 7a01 	vstmia	r9!, {s15}
 800fc78:	454c      	cmp	r4, r9
 800fc7a:	d1f7      	bne.n	800fc6c <nl_func_sm_array_f32+0xc0>
 800fc7c:	9b04      	ldr	r3, [sp, #16]
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	441d      	add	r5, r3
 800fc82:	9b05      	ldr	r3, [sp, #20]
 800fc84:	42aa      	cmp	r2, r5
 800fc86:	441e      	add	r6, r3
 800fc88:	d9b9      	bls.n	800fbfe <nl_func_sm_array_f32+0x52>
 800fc8a:	60ba      	str	r2, [r7, #8]
 800fc8c:	9a02      	ldr	r2, [sp, #8]
 800fc8e:	68d3      	ldr	r3, [r2, #12]
 800fc90:	6093      	str	r3, [r2, #8]
 800fc92:	b009      	add	sp, #36	; 0x24
 800fc94:	ecbd 8b04 	vpop	{d8-d9}
 800fc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9c:	2a00      	cmp	r2, #0
 800fc9e:	d0ed      	beq.n	800fc7c <nl_func_sm_array_f32+0xd0>
 800fca0:	9a01      	ldr	r2, [sp, #4]
 800fca2:	eb03 0b02 	add.w	fp, r3, r2
 800fca6:	e7c7      	b.n	800fc38 <nl_func_sm_array_f32+0x8c>
 800fca8:	00000000 	.word	0x00000000

0800fcac <nl_func_relu_generic_array_f32>:
 800fcac:	b430      	push	{r4, r5}
 800fcae:	6989      	ldr	r1, [r1, #24]
 800fcb0:	6980      	ldr	r0, [r0, #24]
 800fcb2:	edd3 6a02 	vldr	s13, [r3, #8]
 800fcb6:	688c      	ldr	r4, [r1, #8]
 800fcb8:	6880      	ldr	r0, [r0, #8]
 800fcba:	ed93 7a00 	vldr	s14, [r3]
 800fcbe:	ed93 6a01 	vldr	s12, [r3, #4]
 800fcc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800fcc6:	3a01      	subs	r2, #1
 800fcc8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800fccc:	0092      	lsls	r2, r2, #2
 800fcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd2:	4410      	add	r0, r2
 800fcd4:	4422      	add	r2, r4
 800fcd6:	d421      	bmi.n	800fd1c <nl_func_relu_generic_array_f32+0x70>
 800fcd8:	4294      	cmp	r4, r2
 800fcda:	d83d      	bhi.n	800fd58 <nl_func_relu_generic_array_f32+0xac>
 800fcdc:	1d13      	adds	r3, r2, #4
 800fcde:	1d02      	adds	r2, r0, #4
 800fce0:	e010      	b.n	800fd04 <nl_func_relu_generic_array_f32+0x58>
 800fce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcea:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800fcee:	d501      	bpl.n	800fcf4 <nl_func_relu_generic_array_f32+0x48>
 800fcf0:	ee65 7a86 	vmul.f32	s15, s11, s12
 800fcf4:	ed62 7a01 	vstmdb	r2!, {s15}
 800fcf8:	6888      	ldr	r0, [r1, #8]
 800fcfa:	f1a3 0408 	sub.w	r4, r3, #8
 800fcfe:	4284      	cmp	r4, r0
 800fd00:	462b      	mov	r3, r5
 800fd02:	d329      	bcc.n	800fd58 <nl_func_relu_generic_array_f32+0xac>
 800fd04:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fd08:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd10:	f1a3 0504 	sub.w	r5, r3, #4
 800fd14:	d4e5      	bmi.n	800fce2 <nl_func_relu_generic_array_f32+0x36>
 800fd16:	eef0 7a66 	vmov.f32	s15, s13
 800fd1a:	e7eb      	b.n	800fcf4 <nl_func_relu_generic_array_f32+0x48>
 800fd1c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd24:	d01a      	beq.n	800fd5c <nl_func_relu_generic_array_f32+0xb0>
 800fd26:	4294      	cmp	r4, r2
 800fd28:	d816      	bhi.n	800fd58 <nl_func_relu_generic_array_f32+0xac>
 800fd2a:	1d13      	adds	r3, r2, #4
 800fd2c:	1d02      	adds	r2, r0, #4
 800fd2e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fd32:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800fd36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd3a:	f1a3 0408 	sub.w	r4, r3, #8
 800fd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd42:	f1a3 0004 	sub.w	r0, r3, #4
 800fd46:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fd4a:	4623      	mov	r3, r4
 800fd4c:	d51e      	bpl.n	800fd8c <nl_func_relu_generic_array_f32+0xe0>
 800fd4e:	ed62 6a01 	vstmdb	r2!, {s13}
 800fd52:	688b      	ldr	r3, [r1, #8]
 800fd54:	42a3      	cmp	r3, r4
 800fd56:	d91e      	bls.n	800fd96 <nl_func_relu_generic_array_f32+0xea>
 800fd58:	bc30      	pop	{r4, r5}
 800fd5a:	4770      	bx	lr
 800fd5c:	4294      	cmp	r4, r2
 800fd5e:	d8fb      	bhi.n	800fd58 <nl_func_relu_generic_array_f32+0xac>
 800fd60:	1d13      	adds	r3, r2, #4
 800fd62:	2500      	movs	r5, #0
 800fd64:	1d02      	adds	r2, r0, #4
 800fd66:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fd6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd6e:	f1a3 0408 	sub.w	r4, r3, #8
 800fd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd76:	f1a3 0004 	sub.w	r0, r3, #4
 800fd7a:	4623      	mov	r3, r4
 800fd7c:	db0d      	blt.n	800fd9a <nl_func_relu_generic_array_f32+0xee>
 800fd7e:	ed62 7a01 	vstmdb	r2!, {s15}
 800fd82:	688b      	ldr	r3, [r1, #8]
 800fd84:	42a3      	cmp	r3, r4
 800fd86:	d8e7      	bhi.n	800fd58 <nl_func_relu_generic_array_f32+0xac>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	e7ec      	b.n	800fd66 <nl_func_relu_generic_array_f32+0xba>
 800fd8c:	ed62 7a01 	vstmdb	r2!, {s15}
 800fd90:	688c      	ldr	r4, [r1, #8]
 800fd92:	429c      	cmp	r4, r3
 800fd94:	d8e0      	bhi.n	800fd58 <nl_func_relu_generic_array_f32+0xac>
 800fd96:	4603      	mov	r3, r0
 800fd98:	e7c9      	b.n	800fd2e <nl_func_relu_generic_array_f32+0x82>
 800fd9a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800fd9e:	688c      	ldr	r4, [r1, #8]
 800fda0:	429c      	cmp	r4, r3
 800fda2:	d8d9      	bhi.n	800fd58 <nl_func_relu_generic_array_f32+0xac>
 800fda4:	4603      	mov	r3, r0
 800fda6:	e7de      	b.n	800fd66 <nl_func_relu_generic_array_f32+0xba>

0800fda8 <forward_relu>:
 800fda8:	6982      	ldr	r2, [r0, #24]
 800fdaa:	8813      	ldrh	r3, [r2, #0]
 800fdac:	b333      	cbz	r3, 800fdfc <forward_relu+0x54>
 800fdae:	6852      	ldr	r2, [r2, #4]
 800fdb0:	6851      	ldr	r1, [r2, #4]
 800fdb2:	b101      	cbz	r1, 800fdb6 <forward_relu+0xe>
 800fdb4:	6809      	ldr	r1, [r1, #0]
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d91d      	bls.n	800fdf6 <forward_relu+0x4e>
 800fdba:	b4f0      	push	{r4, r5, r6, r7}
 800fdbc:	6917      	ldr	r7, [r2, #16]
 800fdbe:	b107      	cbz	r7, 800fdc2 <forward_relu+0x1a>
 800fdc0:	683f      	ldr	r7, [r7, #0]
 800fdc2:	688c      	ldr	r4, [r1, #8]
 800fdc4:	69c3      	ldr	r3, [r0, #28]
 800fdc6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d044      	beq.n	800fe58 <forward_relu+0xb0>
 800fdce:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800fdd2:	2d01      	cmp	r5, #1
 800fdd4:	d014      	beq.n	800fe00 <forward_relu+0x58>
 800fdd6:	2c00      	cmp	r4, #0
 800fdd8:	d074      	beq.n	800fec4 <forward_relu+0x11c>
 800fdda:	68ce      	ldr	r6, [r1, #12]
 800fddc:	2201      	movs	r2, #1
 800fdde:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800fde2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fde6:	42a6      	cmp	r6, r4
 800fde8:	fb05 f202 	mul.w	r2, r5, r2
 800fdec:	d1f9      	bne.n	800fde2 <forward_relu+0x3a>
 800fdee:	4638      	mov	r0, r7
 800fdf0:	bcf0      	pop	{r4, r5, r6, r7}
 800fdf2:	f7ff bf5b 	b.w	800fcac <nl_func_relu_generic_array_f32>
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	deff      	udf	#255	; 0xff
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	deff      	udf	#255	; 0xff
 800fe00:	69ba      	ldr	r2, [r7, #24]
 800fe02:	6988      	ldr	r0, [r1, #24]
 800fe04:	6896      	ldr	r6, [r2, #8]
 800fe06:	ed93 7a00 	vldr	s14, [r3]
 800fe0a:	6882      	ldr	r2, [r0, #8]
 800fe0c:	b184      	cbz	r4, 800fe30 <forward_relu+0x88>
 800fe0e:	68cf      	ldr	r7, [r1, #12]
 800fe10:	462b      	mov	r3, r5
 800fe12:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800fe16:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800fe1a:	42a7      	cmp	r7, r4
 800fe1c:	fb01 f303 	mul.w	r3, r1, r3
 800fe20:	d1f9      	bne.n	800fe16 <forward_relu+0x6e>
 800fe22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fe26:	3b01      	subs	r3, #1
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	18d2      	adds	r2, r2, r3
 800fe2c:	441e      	add	r6, r3
 800fe2e:	d23f      	bcs.n	800feb0 <forward_relu+0x108>
 800fe30:	1d13      	adds	r3, r2, #4
 800fe32:	2500      	movs	r5, #0
 800fe34:	1d32      	adds	r2, r6, #4
 800fe36:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fe3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe42:	f1a3 0104 	sub.w	r1, r3, #4
 800fe46:	d835      	bhi.n	800feb4 <forward_relu+0x10c>
 800fe48:	ed62 7a01 	vstmdb	r2!, {s15}
 800fe4c:	6884      	ldr	r4, [r0, #8]
 800fe4e:	3b08      	subs	r3, #8
 800fe50:	429c      	cmp	r4, r3
 800fe52:	d82d      	bhi.n	800feb0 <forward_relu+0x108>
 800fe54:	460b      	mov	r3, r1
 800fe56:	e7ee      	b.n	800fe36 <forward_relu+0x8e>
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	698d      	ldr	r5, [r1, #24]
 800fe5c:	6898      	ldr	r0, [r3, #8]
 800fe5e:	68ab      	ldr	r3, [r5, #8]
 800fe60:	b184      	cbz	r4, 800fe84 <forward_relu+0xdc>
 800fe62:	68ce      	ldr	r6, [r1, #12]
 800fe64:	2201      	movs	r2, #1
 800fe66:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800fe6a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800fe6e:	42a6      	cmp	r6, r4
 800fe70:	fb01 f202 	mul.w	r2, r1, r2
 800fe74:	d1f9      	bne.n	800fe6a <forward_relu+0xc2>
 800fe76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800fe7a:	3a01      	subs	r2, #1
 800fe7c:	0092      	lsls	r2, r2, #2
 800fe7e:	189b      	adds	r3, r3, r2
 800fe80:	4410      	add	r0, r2
 800fe82:	d215      	bcs.n	800feb0 <forward_relu+0x108>
 800fe84:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800fec8 <forward_relu+0x120>
 800fe88:	3304      	adds	r3, #4
 800fe8a:	1d01      	adds	r1, r0, #4
 800fe8c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fe90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe98:	bfb8      	it	lt
 800fe9a:	eef0 7a47 	vmovlt.f32	s15, s14
 800fe9e:	ed61 7a01 	vstmdb	r1!, {s15}
 800fea2:	68a8      	ldr	r0, [r5, #8]
 800fea4:	f1a3 0208 	sub.w	r2, r3, #8
 800fea8:	4290      	cmp	r0, r2
 800feaa:	f1a3 0304 	sub.w	r3, r3, #4
 800feae:	d9ed      	bls.n	800fe8c <forward_relu+0xe4>
 800feb0:	bcf0      	pop	{r4, r5, r6, r7}
 800feb2:	4770      	bx	lr
 800feb4:	f842 5d04 	str.w	r5, [r2, #-4]!
 800feb8:	6884      	ldr	r4, [r0, #8]
 800feba:	3b08      	subs	r3, #8
 800febc:	429c      	cmp	r4, r3
 800febe:	d8f7      	bhi.n	800feb0 <forward_relu+0x108>
 800fec0:	460b      	mov	r3, r1
 800fec2:	e7b8      	b.n	800fe36 <forward_relu+0x8e>
 800fec4:	2201      	movs	r2, #1
 800fec6:	e792      	b.n	800fdee <forward_relu+0x46>
 800fec8:	00000000 	.word	0x00000000

0800fecc <forward_sm>:
 800fecc:	6982      	ldr	r2, [r0, #24]
 800fece:	8813      	ldrh	r3, [r2, #0]
 800fed0:	b32b      	cbz	r3, 800ff1e <forward_sm+0x52>
 800fed2:	6852      	ldr	r2, [r2, #4]
 800fed4:	6851      	ldr	r1, [r2, #4]
 800fed6:	b101      	cbz	r1, 800feda <forward_sm+0xe>
 800fed8:	6809      	ldr	r1, [r1, #0]
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d91c      	bls.n	800ff18 <forward_sm+0x4c>
 800fede:	6913      	ldr	r3, [r2, #16]
 800fee0:	b1c3      	cbz	r3, 800ff14 <forward_sm+0x48>
 800fee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fee4:	6818      	ldr	r0, [r3, #0]
 800fee6:	688c      	ldr	r4, [r1, #8]
 800fee8:	68c3      	ldr	r3, [r0, #12]
 800feea:	68ce      	ldr	r6, [r1, #12]
 800feec:	685f      	ldr	r7, [r3, #4]
 800feee:	6873      	ldr	r3, [r6, #4]
 800fef0:	0a24      	lsrs	r4, r4, #8
 800fef2:	b083      	sub	sp, #12
 800fef4:	d015      	beq.n	800ff22 <forward_sm+0x56>
 800fef6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800fefa:	2201      	movs	r2, #1
 800fefc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ff00:	42a6      	cmp	r6, r4
 800ff02:	fb05 f202 	mul.w	r2, r5, r2
 800ff06:	d1f9      	bne.n	800fefc <forward_sm+0x30>
 800ff08:	e9cd 3700 	strd	r3, r7, [sp]
 800ff0c:	f7ff fe4e 	bl	800fbac <nl_func_sm_array_f32>
 800ff10:	b003      	add	sp, #12
 800ff12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	deff      	udf	#255	; 0xff
 800ff18:	2300      	movs	r3, #0
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	deff      	udf	#255	; 0xff
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	deff      	udf	#255	; 0xff
 800ff22:	2201      	movs	r2, #1
 800ff24:	e9cd 3700 	strd	r3, r7, [sp]
 800ff28:	f7ff fe40 	bl	800fbac <nl_func_sm_array_f32>
 800ff2c:	b003      	add	sp, #12
 800ff2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff30 <pool_func_mp_array_f32>:
 800ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff34:	b093      	sub	sp, #76	; 0x4c
 800ff36:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800ff3a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800ff3c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800ff40:	68a8      	ldr	r0, [r5, #8]
 800ff42:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800ff46:	9508      	str	r5, [sp, #32]
 800ff48:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800ff4c:	9002      	str	r0, [sp, #8]
 800ff4e:	950d      	str	r5, [sp, #52]	; 0x34
 800ff50:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800ff54:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800ff58:	9004      	str	r0, [sp, #16]
 800ff5a:	9506      	str	r5, [sp, #24]
 800ff5c:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800ff60:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800ff64:	9009      	str	r0, [sp, #36]	; 0x24
 800ff66:	950b      	str	r5, [sp, #44]	; 0x2c
 800ff68:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800ff6c:	9200      	str	r2, [sp, #0]
 800ff6e:	468a      	mov	sl, r1
 800ff70:	4699      	mov	r9, r3
 800ff72:	b95c      	cbnz	r4, 800ff8c <pool_func_mp_array_f32+0x5c>
 800ff74:	b950      	cbnz	r0, 800ff8c <pool_func_mp_array_f32+0x5c>
 800ff76:	9b04      	ldr	r3, [sp, #16]
 800ff78:	1a5a      	subs	r2, r3, r1
 800ff7a:	9b06      	ldr	r3, [sp, #24]
 800ff7c:	9908      	ldr	r1, [sp, #32]
 800ff7e:	3a01      	subs	r2, #1
 800ff80:	3b01      	subs	r3, #1
 800ff82:	fb13 2301 	smlabb	r3, r3, r1, r2
 800ff86:	041a      	lsls	r2, r3, #16
 800ff88:	f100 809b 	bmi.w	80100c2 <pool_func_mp_array_f32+0x192>
 800ff8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f000 808b 	beq.w	80100aa <pool_func_mp_array_f32+0x17a>
 800ff94:	9b06      	ldr	r3, [sp, #24]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f000 8087 	beq.w	80100aa <pool_func_mp_array_f32+0x17a>
 800ff9c:	f1b9 0f00 	cmp.w	r9, #0
 800ffa0:	f000 8083 	beq.w	80100aa <pool_func_mp_array_f32+0x17a>
 800ffa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa6:	1b1c      	subs	r4, r3, r4
 800ffa8:	9b04      	ldr	r3, [sp, #16]
 800ffaa:	1a1b      	subs	r3, r3, r0
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	4240      	negs	r0, r0
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	b2a1      	uxth	r1, r4
 800ffb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ffb6:	b283      	uxth	r3, r0
 800ffb8:	920e      	str	r2, [sp, #56]	; 0x38
 800ffba:	910c      	str	r1, [sp, #48]	; 0x30
 800ffbc:	9310      	str	r3, [sp, #64]	; 0x40
 800ffbe:	9c06      	ldr	r4, [sp, #24]
 800ffc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ffc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc4:	fb02 f204 	mul.w	r2, r2, r4
 800ffc8:	1acb      	subs	r3, r1, r3
 800ffca:	920a      	str	r2, [sp, #40]	; 0x28
 800ffcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ffce:	9205      	str	r2, [sp, #20]
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	b21b      	sxth	r3, r3
 800ffd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ffd6:	9303      	str	r3, [sp, #12]
 800ffd8:	9007      	str	r0, [sp, #28]
 800ffda:	4603      	mov	r3, r0
 800ffdc:	fa0f f881 	sxth.w	r8, r1
 800ffe0:	9204      	str	r2, [sp, #16]
 800ffe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffe4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800ffe8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800ffec:	4413      	add	r3, r2
 800ffee:	f04f 0e00 	mov.w	lr, #0
 800fff2:	fb09 f303 	mul.w	r3, r9, r3
 800fff6:	9301      	str	r3, [sp, #4]
 800fff8:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800fffc:	4675      	mov	r5, lr
 800fffe:	9903      	ldr	r1, [sp, #12]
 8010000:	eddf 7a78 	vldr	s15, [pc, #480]	; 80101e4 <pool_func_mp_array_f32+0x2b4>
 8010004:	4588      	cmp	r8, r1
 8010006:	dd24      	ble.n	8010052 <pool_func_mp_array_f32+0x122>
 8010008:	4564      	cmp	r4, ip
 801000a:	dd1e      	ble.n	801004a <pool_func_mp_array_f32+0x11a>
 801000c:	2900      	cmp	r1, #0
 801000e:	fb0a f601 	mul.w	r6, sl, r1
 8010012:	db1a      	blt.n	801004a <pool_func_mp_array_f32+0x11a>
 8010014:	9b00      	ldr	r3, [sp, #0]
 8010016:	4299      	cmp	r1, r3
 8010018:	da17      	bge.n	801004a <pool_func_mp_array_f32+0x11a>
 801001a:	f1bc 0f00 	cmp.w	ip, #0
 801001e:	4663      	mov	r3, ip
 8010020:	db46      	blt.n	80100b0 <pool_func_mp_array_f32+0x180>
 8010022:	18f2      	adds	r2, r6, r3
 8010024:	fb09 5202 	mla	r2, r9, r2, r5
 8010028:	1c58      	adds	r0, r3, #1
 801002a:	459a      	cmp	sl, r3
 801002c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8010030:	b203      	sxth	r3, r0
 8010032:	dd08      	ble.n	8010046 <pool_func_mp_array_f32+0x116>
 8010034:	ed92 7a00 	vldr	s14, [r2]
 8010038:	eef4 7ac7 	vcmpe.f32	s15, s14
 801003c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010040:	bfb8      	it	lt
 8010042:	eef0 7a47 	vmovlt.f32	s15, s14
 8010046:	429c      	cmp	r4, r3
 8010048:	dceb      	bgt.n	8010022 <pool_func_mp_array_f32+0xf2>
 801004a:	3101      	adds	r1, #1
 801004c:	b209      	sxth	r1, r1
 801004e:	4588      	cmp	r8, r1
 8010050:	dcda      	bgt.n	8010008 <pool_func_mp_array_f32+0xd8>
 8010052:	9b01      	ldr	r3, [sp, #4]
 8010054:	f10e 0e01 	add.w	lr, lr, #1
 8010058:	441d      	add	r5, r3
 801005a:	9b02      	ldr	r3, [sp, #8]
 801005c:	fa0f fe8e 	sxth.w	lr, lr
 8010060:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010064:	45ce      	cmp	lr, r9
 8010066:	edc5 7a00 	vstr	s15, [r5]
 801006a:	4675      	mov	r5, lr
 801006c:	dbc7      	blt.n	800fffe <pool_func_mp_array_f32+0xce>
 801006e:	9b07      	ldr	r3, [sp, #28]
 8010070:	9808      	ldr	r0, [sp, #32]
 8010072:	3301      	adds	r3, #1
 8010074:	b219      	sxth	r1, r3
 8010076:	9b05      	ldr	r3, [sp, #20]
 8010078:	9107      	str	r1, [sp, #28]
 801007a:	461a      	mov	r2, r3
 801007c:	4402      	add	r2, r0
 801007e:	9b04      	ldr	r3, [sp, #16]
 8010080:	b292      	uxth	r2, r2
 8010082:	9205      	str	r2, [sp, #20]
 8010084:	9a06      	ldr	r2, [sp, #24]
 8010086:	4403      	add	r3, r0
 8010088:	b29b      	uxth	r3, r3
 801008a:	428a      	cmp	r2, r1
 801008c:	9304      	str	r3, [sp, #16]
 801008e:	460b      	mov	r3, r1
 8010090:	dca7      	bgt.n	800ffe2 <pool_func_mp_array_f32+0xb2>
 8010092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010094:	3301      	adds	r3, #1
 8010096:	b21a      	sxth	r2, r3
 8010098:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 801009c:	440b      	add	r3, r1
 801009e:	b29b      	uxth	r3, r3
 80100a0:	930c      	str	r3, [sp, #48]	; 0x30
 80100a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100a4:	920e      	str	r2, [sp, #56]	; 0x38
 80100a6:	4293      	cmp	r3, r2
 80100a8:	dc89      	bgt.n	800ffbe <pool_func_mp_array_f32+0x8e>
 80100aa:	b013      	add	sp, #76	; 0x4c
 80100ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b0:	3301      	adds	r3, #1
 80100b2:	b21b      	sxth	r3, r3
 80100b4:	42bb      	cmp	r3, r7
 80100b6:	dac6      	bge.n	8010046 <pool_func_mp_array_f32+0x116>
 80100b8:	3301      	adds	r3, #1
 80100ba:	b21b      	sxth	r3, r3
 80100bc:	42bb      	cmp	r3, r7
 80100be:	dbf7      	blt.n	80100b0 <pool_func_mp_array_f32+0x180>
 80100c0:	e7c1      	b.n	8010046 <pool_func_mp_array_f32+0x116>
 80100c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100c4:	9a00      	ldr	r2, [sp, #0]
 80100c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80100c8:	1a9a      	subs	r2, r3, r2
 80100ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100cc:	3a01      	subs	r2, #1
 80100ce:	3b01      	subs	r3, #1
 80100d0:	fb13 2301 	smlabb	r3, r3, r1, r2
 80100d4:	041b      	lsls	r3, r3, #16
 80100d6:	f57f af59 	bpl.w	800ff8c <pool_func_mp_array_f32+0x5c>
 80100da:	fb0a f309 	mul.w	r3, sl, r9
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 80100e4:	930e      	str	r3, [sp, #56]	; 0x38
 80100e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100e8:	9001      	str	r0, [sp, #4]
 80100ea:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80100f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80100f6:	429a      	cmp	r2, r3
 80100f8:	ddd7      	ble.n	80100aa <pool_func_mp_array_f32+0x17a>
 80100fa:	9a00      	ldr	r2, [sp, #0]
 80100fc:	9906      	ldr	r1, [sp, #24]
 80100fe:	fa0f f882 	sxth.w	r8, r2
 8010102:	2900      	cmp	r1, #0
 8010104:	d062      	beq.n	80101cc <pool_func_mp_array_f32+0x29c>
 8010106:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010108:	fb01 f303 	mul.w	r3, r1, r3
 801010c:	1a12      	subs	r2, r2, r0
 801010e:	9305      	str	r3, [sp, #20]
 8010110:	b213      	sxth	r3, r2
 8010112:	9307      	str	r3, [sp, #28]
 8010114:	f1b9 0f00 	cmp.w	r9, #0
 8010118:	d058      	beq.n	80101cc <pool_func_mp_array_f32+0x29c>
 801011a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801011c:	fb02 f303 	mul.w	r3, r2, r3
 8010120:	2600      	movs	r6, #0
 8010122:	930c      	str	r3, [sp, #48]	; 0x30
 8010124:	9b04      	ldr	r3, [sp, #16]
 8010126:	9303      	str	r3, [sp, #12]
 8010128:	4637      	mov	r7, r6
 801012a:	46b2      	mov	sl, r6
 801012c:	9b05      	ldr	r3, [sp, #20]
 801012e:	9611      	str	r6, [sp, #68]	; 0x44
 8010130:	eb0a 0b03 	add.w	fp, sl, r3
 8010134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010136:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801013a:	b235      	sxth	r5, r6
 801013c:	18eb      	adds	r3, r5, r3
 801013e:	f04f 0a00 	mov.w	sl, #0
 8010142:	fb09 f303 	mul.w	r3, r9, r3
 8010146:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010148:	930a      	str	r3, [sp, #40]	; 0x28
 801014a:	fb09 fb0b 	mul.w	fp, r9, fp
 801014e:	46d6      	mov	lr, sl
 8010150:	9807      	ldr	r0, [sp, #28]
 8010152:	4580      	cmp	r8, r0
 8010154:	dd43      	ble.n	80101de <pool_func_mp_array_f32+0x2ae>
 8010156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010158:	eddf 7a22 	vldr	s15, [pc, #136]	; 80101e4 <pool_func_mp_array_f32+0x2b4>
 801015c:	eb0e 0403 	add.w	r4, lr, r3
 8010160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010162:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010166:	42a9      	cmp	r1, r5
 8010168:	dd0f      	ble.n	801018a <pool_func_mp_array_f32+0x25a>
 801016a:	4622      	mov	r2, r4
 801016c:	462b      	mov	r3, r5
 801016e:	ed92 7a00 	vldr	s14, [r2]
 8010172:	3301      	adds	r3, #1
 8010174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017c:	b21b      	sxth	r3, r3
 801017e:	bfb8      	it	lt
 8010180:	eef0 7a47 	vmovlt.f32	s15, s14
 8010184:	4299      	cmp	r1, r3
 8010186:	4462      	add	r2, ip
 8010188:	d1f1      	bne.n	801016e <pool_func_mp_array_f32+0x23e>
 801018a:	3001      	adds	r0, #1
 801018c:	b200      	sxth	r0, r0
 801018e:	4580      	cmp	r8, r0
 8010190:	4434      	add	r4, r6
 8010192:	d1e8      	bne.n	8010166 <pool_func_mp_array_f32+0x236>
 8010194:	f10a 0a01 	add.w	sl, sl, #1
 8010198:	9a02      	ldr	r2, [sp, #8]
 801019a:	eb0b 030e 	add.w	r3, fp, lr
 801019e:	fa0f fa8a 	sxth.w	sl, sl
 80101a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101a6:	45ca      	cmp	sl, r9
 80101a8:	edc3 7a00 	vstr	s15, [r3]
 80101ac:	46d6      	mov	lr, sl
 80101ae:	dbcf      	blt.n	8010150 <pool_func_mp_array_f32+0x220>
 80101b0:	9b03      	ldr	r3, [sp, #12]
 80101b2:	9a08      	ldr	r2, [sp, #32]
 80101b4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80101b6:	4413      	add	r3, r2
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	3701      	adds	r7, #1
 80101bc:	9303      	str	r3, [sp, #12]
 80101be:	9b06      	ldr	r3, [sp, #24]
 80101c0:	b23f      	sxth	r7, r7
 80101c2:	4416      	add	r6, r2
 80101c4:	42bb      	cmp	r3, r7
 80101c6:	b2b6      	uxth	r6, r6
 80101c8:	46ba      	mov	sl, r7
 80101ca:	dcaf      	bgt.n	801012c <pool_func_mp_array_f32+0x1fc>
 80101cc:	9b00      	ldr	r3, [sp, #0]
 80101ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101d0:	4413      	add	r3, r2
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	9300      	str	r3, [sp, #0]
 80101d6:	9b01      	ldr	r3, [sp, #4]
 80101d8:	3301      	adds	r3, #1
 80101da:	9301      	str	r3, [sp, #4]
 80101dc:	e788      	b.n	80100f0 <pool_func_mp_array_f32+0x1c0>
 80101de:	eddf 7a01 	vldr	s15, [pc, #4]	; 80101e4 <pool_func_mp_array_f32+0x2b4>
 80101e2:	e7d7      	b.n	8010194 <pool_func_mp_array_f32+0x264>
 80101e4:	cf000000 	.word	0xcf000000

080101e8 <ai_check_custom_types>:
 80101e8:	4b13      	ldr	r3, [pc, #76]	; (8010238 <ai_check_custom_types+0x50>)
 80101ea:	b082      	sub	sp, #8
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	b118      	cbz	r0, 80101fa <ai_check_custom_types+0x12>
 80101f2:	7803      	ldrb	r3, [r0, #0]
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	d002      	beq.n	80101fe <ai_check_custom_types+0x16>
 80101f8:	2000      	movs	r0, #0
 80101fa:	b002      	add	sp, #8
 80101fc:	4770      	bx	lr
 80101fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010202:	4293      	cmp	r3, r2
 8010204:	d004      	beq.n	8010210 <ai_check_custom_types+0x28>
 8010206:	2001      	movs	r0, #1
 8010208:	f080 0001 	eor.w	r0, r0, #1
 801020c:	b002      	add	sp, #8
 801020e:	4770      	bx	lr
 8010210:	7842      	ldrb	r2, [r0, #1]
 8010212:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010216:	429a      	cmp	r2, r3
 8010218:	f100 0001 	add.w	r0, r0, #1
 801021c:	d1f3      	bne.n	8010206 <ai_check_custom_types+0x1e>
 801021e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010222:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010226:	429a      	cmp	r2, r3
 8010228:	d1ed      	bne.n	8010206 <ai_check_custom_types+0x1e>
 801022a:	7842      	ldrb	r2, [r0, #1]
 801022c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010230:	429a      	cmp	r2, r3
 8010232:	d1e8      	bne.n	8010206 <ai_check_custom_types+0x1e>
 8010234:	2000      	movs	r0, #0
 8010236:	e7e7      	b.n	8010208 <ai_check_custom_types+0x20>
 8010238:	080170e8 	.word	0x080170e8

0801023c <ai_layers_init_all>:
 801023c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801023e:	b17a      	cbz	r2, 8010260 <ai_layers_init_all+0x24>
 8010240:	6913      	ldr	r3, [r2, #16]
 8010242:	60d0      	str	r0, [r2, #12]
 8010244:	429a      	cmp	r2, r3
 8010246:	f04f 0201 	mov.w	r2, #1
 801024a:	d009      	beq.n	8010260 <ai_layers_init_all+0x24>
 801024c:	b143      	cbz	r3, 8010260 <ai_layers_init_all+0x24>
 801024e:	6919      	ldr	r1, [r3, #16]
 8010250:	60d8      	str	r0, [r3, #12]
 8010252:	4299      	cmp	r1, r3
 8010254:	f102 0201 	add.w	r2, r2, #1
 8010258:	d002      	beq.n	8010260 <ai_layers_init_all+0x24>
 801025a:	460b      	mov	r3, r1
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1f6      	bne.n	801024e <ai_layers_init_all+0x12>
 8010260:	4610      	mov	r0, r2
 8010262:	4770      	bx	lr

08010264 <ai_layers_post_init_all>:
 8010264:	b538      	push	{r3, r4, r5, lr}
 8010266:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010268:	b18c      	cbz	r4, 801028e <ai_layers_post_init_all+0x2a>
 801026a:	2500      	movs	r5, #0
 801026c:	6863      	ldr	r3, [r4, #4]
 801026e:	f013 0f01 	tst.w	r3, #1
 8010272:	4620      	mov	r0, r4
 8010274:	d003      	beq.n	801027e <ai_layers_post_init_all+0x1a>
 8010276:	6a23      	ldr	r3, [r4, #32]
 8010278:	b10b      	cbz	r3, 801027e <ai_layers_post_init_all+0x1a>
 801027a:	4798      	blx	r3
 801027c:	3501      	adds	r5, #1
 801027e:	6923      	ldr	r3, [r4, #16]
 8010280:	42a3      	cmp	r3, r4
 8010282:	d002      	beq.n	801028a <ai_layers_post_init_all+0x26>
 8010284:	461c      	mov	r4, r3
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1f0      	bne.n	801026c <ai_layers_post_init_all+0x8>
 801028a:	4628      	mov	r0, r5
 801028c:	bd38      	pop	{r3, r4, r5, pc}
 801028e:	4625      	mov	r5, r4
 8010290:	e7fb      	b.n	801028a <ai_layers_post_init_all+0x26>
 8010292:	bf00      	nop

08010294 <ai_layers_forward_all>:
 8010294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010298:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 801029a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801029c:	4604      	mov	r4, r0
 801029e:	2f00      	cmp	r7, #0
 80102a0:	d02c      	beq.n	80102fc <ai_layers_forward_all+0x68>
 80102a2:	2d00      	cmp	r5, #0
 80102a4:	d03f      	beq.n	8010326 <ai_layers_forward_all+0x92>
 80102a6:	6385      	str	r5, [r0, #56]	; 0x38
 80102a8:	4629      	mov	r1, r5
 80102aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80102ac:	2001      	movs	r0, #1
 80102ae:	47b8      	blx	r7
 80102b0:	2600      	movs	r6, #0
 80102b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80102b4:	46b0      	mov	r8, r6
 80102b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80102b8:	2002      	movs	r0, #2
 80102ba:	47b8      	blx	r7
 80102bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80102be:	696b      	ldr	r3, [r5, #20]
 80102c0:	4628      	mov	r0, r5
 80102c2:	4798      	blx	r3
 80102c4:	692b      	ldr	r3, [r5, #16]
 80102c6:	429d      	cmp	r5, r3
 80102c8:	f04f 0003 	mov.w	r0, #3
 80102cc:	4619      	mov	r1, r3
 80102ce:	d009      	beq.n	80102e4 <ai_layers_forward_all+0x50>
 80102d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80102d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80102d4:	47b8      	blx	r7
 80102d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80102d8:	3601      	adds	r6, #1
 80102da:	2900      	cmp	r1, #0
 80102dc:	d1eb      	bne.n	80102b6 <ai_layers_forward_all+0x22>
 80102de:	4630      	mov	r0, r6
 80102e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e4:	2100      	movs	r1, #0
 80102e6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80102ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80102ec:	47b8      	blx	r7
 80102ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80102f0:	3601      	adds	r6, #1
 80102f2:	2900      	cmp	r1, #0
 80102f4:	d1df      	bne.n	80102b6 <ai_layers_forward_all+0x22>
 80102f6:	4630      	mov	r0, r6
 80102f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102fc:	b19d      	cbz	r5, 8010326 <ai_layers_forward_all+0x92>
 80102fe:	6385      	str	r5, [r0, #56]	; 0x38
 8010300:	463e      	mov	r6, r7
 8010302:	696b      	ldr	r3, [r5, #20]
 8010304:	4628      	mov	r0, r5
 8010306:	4798      	blx	r3
 8010308:	692b      	ldr	r3, [r5, #16]
 801030a:	42ab      	cmp	r3, r5
 801030c:	f106 0601 	add.w	r6, r6, #1
 8010310:	d004      	beq.n	801031c <ai_layers_forward_all+0x88>
 8010312:	63a3      	str	r3, [r4, #56]	; 0x38
 8010314:	461d      	mov	r5, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d1f3      	bne.n	8010302 <ai_layers_forward_all+0x6e>
 801031a:	e7e0      	b.n	80102de <ai_layers_forward_all+0x4a>
 801031c:	2300      	movs	r3, #0
 801031e:	63a3      	str	r3, [r4, #56]	; 0x38
 8010320:	4630      	mov	r0, r6
 8010322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010326:	462e      	mov	r6, r5
 8010328:	4630      	mov	r0, r6
 801032a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801032e:	bf00      	nop

08010330 <ai_array_to_buffer_fmt>:
 8010330:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8010334:	2b02      	cmp	r3, #2
 8010336:	d029      	beq.n	801038c <ai_array_to_buffer_fmt+0x5c>
 8010338:	4a22      	ldr	r2, [pc, #136]	; (80103c4 <ai_array_to_buffer_fmt+0x94>)
 801033a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801033e:	4293      	cmp	r3, r2
 8010340:	d010      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 8010342:	dd13      	ble.n	801036c <ai_array_to_buffer_fmt+0x3c>
 8010344:	4a20      	ldr	r2, [pc, #128]	; (80103c8 <ai_array_to_buffer_fmt+0x98>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d00c      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 801034a:	dc27      	bgt.n	801039c <ai_array_to_buffer_fmt+0x6c>
 801034c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8010350:	4293      	cmp	r3, r2
 8010352:	d007      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 8010354:	3207      	adds	r2, #7
 8010356:	4293      	cmp	r3, r2
 8010358:	d004      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 801035a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 801035e:	4293      	cmp	r3, r2
 8010360:	d000      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 8010362:	2340      	movs	r3, #64	; 0x40
 8010364:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010368:	4318      	orrs	r0, r3
 801036a:	4770      	bx	lr
 801036c:	4a17      	ldr	r2, [pc, #92]	; (80103cc <ai_array_to_buffer_fmt+0x9c>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d0f8      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 8010372:	dd1e      	ble.n	80103b2 <ai_array_to_buffer_fmt+0x82>
 8010374:	4a16      	ldr	r2, [pc, #88]	; (80103d0 <ai_array_to_buffer_fmt+0xa0>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d0f4      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 801037a:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 801037e:	4293      	cmp	r3, r2
 8010380:	d0f0      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 8010382:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8010386:	4293      	cmp	r3, r2
 8010388:	d1eb      	bne.n	8010362 <ai_array_to_buffer_fmt+0x32>
 801038a:	e7eb      	b.n	8010364 <ai_array_to_buffer_fmt+0x34>
 801038c:	4b11      	ldr	r3, [pc, #68]	; (80103d4 <ai_array_to_buffer_fmt+0xa4>)
 801038e:	4003      	ands	r3, r0
 8010390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010394:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010398:	4318      	orrs	r0, r3
 801039a:	4770      	bx	lr
 801039c:	4a0e      	ldr	r2, [pc, #56]	; (80103d8 <ai_array_to_buffer_fmt+0xa8>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d0e0      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 80103a2:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d0dc      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 80103aa:	4a0c      	ldr	r2, [pc, #48]	; (80103dc <ai_array_to_buffer_fmt+0xac>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d1d8      	bne.n	8010362 <ai_array_to_buffer_fmt+0x32>
 80103b0:	e7d8      	b.n	8010364 <ai_array_to_buffer_fmt+0x34>
 80103b2:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d0d4      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 80103ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80103be:	4293      	cmp	r3, r2
 80103c0:	d0d0      	beq.n	8010364 <ai_array_to_buffer_fmt+0x34>
 80103c2:	e7ce      	b.n	8010362 <ai_array_to_buffer_fmt+0x32>
 80103c4:	00060440 	.word	0x00060440
 80103c8:	00840840 	.word	0x00840840
 80103cc:	00040447 	.word	0x00040447
 80103d0:	0004084f 	.word	0x0004084f
 80103d4:	00803fff 	.word	0x00803fff
 80103d8:	00841040 	.word	0x00841040
 80103dc:	0084084f 	.word	0x0084084f

080103e0 <ai_array_get_byte_size>:
 80103e0:	b1c1      	cbz	r1, 8010414 <ai_array_get_byte_size+0x34>
 80103e2:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80103e6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80103ea:	4413      	add	r3, r2
 80103ec:	fb01 f103 	mul.w	r1, r1, r3
 80103f0:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80103f4:	3107      	adds	r1, #7
 80103f6:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80103fa:	f021 0107 	bic.w	r1, r1, #7
 80103fe:	2804      	cmp	r0, #4
 8010400:	fa21 f102 	lsr.w	r1, r1, r2
 8010404:	d008      	beq.n	8010418 <ai_array_get_byte_size+0x38>
 8010406:	2808      	cmp	r0, #8
 8010408:	d101      	bne.n	801040e <ai_array_get_byte_size+0x2e>
 801040a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801040e:	3107      	adds	r1, #7
 8010410:	08c8      	lsrs	r0, r1, #3
 8010412:	4770      	bx	lr
 8010414:	4608      	mov	r0, r1
 8010416:	4770      	bx	lr
 8010418:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801041c:	3107      	adds	r1, #7
 801041e:	08c8      	lsrs	r0, r1, #3
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop

08010424 <__assert_func>:
 8010424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010426:	4614      	mov	r4, r2
 8010428:	461a      	mov	r2, r3
 801042a:	4b09      	ldr	r3, [pc, #36]	; (8010450 <__assert_func+0x2c>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4605      	mov	r5, r0
 8010430:	68d8      	ldr	r0, [r3, #12]
 8010432:	b14c      	cbz	r4, 8010448 <__assert_func+0x24>
 8010434:	4b07      	ldr	r3, [pc, #28]	; (8010454 <__assert_func+0x30>)
 8010436:	9100      	str	r1, [sp, #0]
 8010438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801043c:	4906      	ldr	r1, [pc, #24]	; (8010458 <__assert_func+0x34>)
 801043e:	462b      	mov	r3, r5
 8010440:	f000 f814 	bl	801046c <fiprintf>
 8010444:	f002 f88e 	bl	8012564 <abort>
 8010448:	4b04      	ldr	r3, [pc, #16]	; (801045c <__assert_func+0x38>)
 801044a:	461c      	mov	r4, r3
 801044c:	e7f3      	b.n	8010436 <__assert_func+0x12>
 801044e:	bf00      	nop
 8010450:	20000ee0 	.word	0x20000ee0
 8010454:	0805fa04 	.word	0x0805fa04
 8010458:	0805fa11 	.word	0x0805fa11
 801045c:	0805fa3f 	.word	0x0805fa3f

08010460 <__errno>:
 8010460:	4b01      	ldr	r3, [pc, #4]	; (8010468 <__errno+0x8>)
 8010462:	6818      	ldr	r0, [r3, #0]
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	20000ee0 	.word	0x20000ee0

0801046c <fiprintf>:
 801046c:	b40e      	push	{r1, r2, r3}
 801046e:	b503      	push	{r0, r1, lr}
 8010470:	4601      	mov	r1, r0
 8010472:	ab03      	add	r3, sp, #12
 8010474:	4805      	ldr	r0, [pc, #20]	; (801048c <fiprintf+0x20>)
 8010476:	f853 2b04 	ldr.w	r2, [r3], #4
 801047a:	6800      	ldr	r0, [r0, #0]
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	f000 f91d 	bl	80106bc <_vfiprintf_r>
 8010482:	b002      	add	sp, #8
 8010484:	f85d eb04 	ldr.w	lr, [sp], #4
 8010488:	b003      	add	sp, #12
 801048a:	4770      	bx	lr
 801048c:	20000ee0 	.word	0x20000ee0

08010490 <__libc_init_array>:
 8010490:	b570      	push	{r4, r5, r6, lr}
 8010492:	4d0d      	ldr	r5, [pc, #52]	; (80104c8 <__libc_init_array+0x38>)
 8010494:	4c0d      	ldr	r4, [pc, #52]	; (80104cc <__libc_init_array+0x3c>)
 8010496:	1b64      	subs	r4, r4, r5
 8010498:	10a4      	asrs	r4, r4, #2
 801049a:	2600      	movs	r6, #0
 801049c:	42a6      	cmp	r6, r4
 801049e:	d109      	bne.n	80104b4 <__libc_init_array+0x24>
 80104a0:	4d0b      	ldr	r5, [pc, #44]	; (80104d0 <__libc_init_array+0x40>)
 80104a2:	4c0c      	ldr	r4, [pc, #48]	; (80104d4 <__libc_init_array+0x44>)
 80104a4:	f006 fcc4 	bl	8016e30 <_init>
 80104a8:	1b64      	subs	r4, r4, r5
 80104aa:	10a4      	asrs	r4, r4, #2
 80104ac:	2600      	movs	r6, #0
 80104ae:	42a6      	cmp	r6, r4
 80104b0:	d105      	bne.n	80104be <__libc_init_array+0x2e>
 80104b2:	bd70      	pop	{r4, r5, r6, pc}
 80104b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80104b8:	4798      	blx	r3
 80104ba:	3601      	adds	r6, #1
 80104bc:	e7ee      	b.n	801049c <__libc_init_array+0xc>
 80104be:	f855 3b04 	ldr.w	r3, [r5], #4
 80104c2:	4798      	blx	r3
 80104c4:	3601      	adds	r6, #1
 80104c6:	e7f2      	b.n	80104ae <__libc_init_array+0x1e>
 80104c8:	080600d0 	.word	0x080600d0
 80104cc:	080600d0 	.word	0x080600d0
 80104d0:	080600d0 	.word	0x080600d0
 80104d4:	080600d4 	.word	0x080600d4

080104d8 <malloc>:
 80104d8:	4b02      	ldr	r3, [pc, #8]	; (80104e4 <malloc+0xc>)
 80104da:	4601      	mov	r1, r0
 80104dc:	6818      	ldr	r0, [r3, #0]
 80104de:	f000 b869 	b.w	80105b4 <_malloc_r>
 80104e2:	bf00      	nop
 80104e4:	20000ee0 	.word	0x20000ee0

080104e8 <memcpy>:
 80104e8:	440a      	add	r2, r1
 80104ea:	4291      	cmp	r1, r2
 80104ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80104f0:	d100      	bne.n	80104f4 <memcpy+0xc>
 80104f2:	4770      	bx	lr
 80104f4:	b510      	push	{r4, lr}
 80104f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104fe:	4291      	cmp	r1, r2
 8010500:	d1f9      	bne.n	80104f6 <memcpy+0xe>
 8010502:	bd10      	pop	{r4, pc}

08010504 <memset>:
 8010504:	4402      	add	r2, r0
 8010506:	4603      	mov	r3, r0
 8010508:	4293      	cmp	r3, r2
 801050a:	d100      	bne.n	801050e <memset+0xa>
 801050c:	4770      	bx	lr
 801050e:	f803 1b01 	strb.w	r1, [r3], #1
 8010512:	e7f9      	b.n	8010508 <memset+0x4>

08010514 <_free_r>:
 8010514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010516:	2900      	cmp	r1, #0
 8010518:	d048      	beq.n	80105ac <_free_r+0x98>
 801051a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801051e:	9001      	str	r0, [sp, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	f1a1 0404 	sub.w	r4, r1, #4
 8010526:	bfb8      	it	lt
 8010528:	18e4      	addlt	r4, r4, r3
 801052a:	f003 fc57 	bl	8013ddc <__malloc_lock>
 801052e:	4a20      	ldr	r2, [pc, #128]	; (80105b0 <_free_r+0x9c>)
 8010530:	9801      	ldr	r0, [sp, #4]
 8010532:	6813      	ldr	r3, [r2, #0]
 8010534:	4615      	mov	r5, r2
 8010536:	b933      	cbnz	r3, 8010546 <_free_r+0x32>
 8010538:	6063      	str	r3, [r4, #4]
 801053a:	6014      	str	r4, [r2, #0]
 801053c:	b003      	add	sp, #12
 801053e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010542:	f003 bc51 	b.w	8013de8 <__malloc_unlock>
 8010546:	42a3      	cmp	r3, r4
 8010548:	d90b      	bls.n	8010562 <_free_r+0x4e>
 801054a:	6821      	ldr	r1, [r4, #0]
 801054c:	1862      	adds	r2, r4, r1
 801054e:	4293      	cmp	r3, r2
 8010550:	bf04      	itt	eq
 8010552:	681a      	ldreq	r2, [r3, #0]
 8010554:	685b      	ldreq	r3, [r3, #4]
 8010556:	6063      	str	r3, [r4, #4]
 8010558:	bf04      	itt	eq
 801055a:	1852      	addeq	r2, r2, r1
 801055c:	6022      	streq	r2, [r4, #0]
 801055e:	602c      	str	r4, [r5, #0]
 8010560:	e7ec      	b.n	801053c <_free_r+0x28>
 8010562:	461a      	mov	r2, r3
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	b10b      	cbz	r3, 801056c <_free_r+0x58>
 8010568:	42a3      	cmp	r3, r4
 801056a:	d9fa      	bls.n	8010562 <_free_r+0x4e>
 801056c:	6811      	ldr	r1, [r2, #0]
 801056e:	1855      	adds	r5, r2, r1
 8010570:	42a5      	cmp	r5, r4
 8010572:	d10b      	bne.n	801058c <_free_r+0x78>
 8010574:	6824      	ldr	r4, [r4, #0]
 8010576:	4421      	add	r1, r4
 8010578:	1854      	adds	r4, r2, r1
 801057a:	42a3      	cmp	r3, r4
 801057c:	6011      	str	r1, [r2, #0]
 801057e:	d1dd      	bne.n	801053c <_free_r+0x28>
 8010580:	681c      	ldr	r4, [r3, #0]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	6053      	str	r3, [r2, #4]
 8010586:	4421      	add	r1, r4
 8010588:	6011      	str	r1, [r2, #0]
 801058a:	e7d7      	b.n	801053c <_free_r+0x28>
 801058c:	d902      	bls.n	8010594 <_free_r+0x80>
 801058e:	230c      	movs	r3, #12
 8010590:	6003      	str	r3, [r0, #0]
 8010592:	e7d3      	b.n	801053c <_free_r+0x28>
 8010594:	6825      	ldr	r5, [r4, #0]
 8010596:	1961      	adds	r1, r4, r5
 8010598:	428b      	cmp	r3, r1
 801059a:	bf04      	itt	eq
 801059c:	6819      	ldreq	r1, [r3, #0]
 801059e:	685b      	ldreq	r3, [r3, #4]
 80105a0:	6063      	str	r3, [r4, #4]
 80105a2:	bf04      	itt	eq
 80105a4:	1949      	addeq	r1, r1, r5
 80105a6:	6021      	streq	r1, [r4, #0]
 80105a8:	6054      	str	r4, [r2, #4]
 80105aa:	e7c7      	b.n	801053c <_free_r+0x28>
 80105ac:	b003      	add	sp, #12
 80105ae:	bd30      	pop	{r4, r5, pc}
 80105b0:	20001324 	.word	0x20001324

080105b4 <_malloc_r>:
 80105b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105b6:	1ccd      	adds	r5, r1, #3
 80105b8:	f025 0503 	bic.w	r5, r5, #3
 80105bc:	3508      	adds	r5, #8
 80105be:	2d0c      	cmp	r5, #12
 80105c0:	bf38      	it	cc
 80105c2:	250c      	movcc	r5, #12
 80105c4:	2d00      	cmp	r5, #0
 80105c6:	4606      	mov	r6, r0
 80105c8:	db01      	blt.n	80105ce <_malloc_r+0x1a>
 80105ca:	42a9      	cmp	r1, r5
 80105cc:	d903      	bls.n	80105d6 <_malloc_r+0x22>
 80105ce:	230c      	movs	r3, #12
 80105d0:	6033      	str	r3, [r6, #0]
 80105d2:	2000      	movs	r0, #0
 80105d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105d6:	f003 fc01 	bl	8013ddc <__malloc_lock>
 80105da:	4921      	ldr	r1, [pc, #132]	; (8010660 <_malloc_r+0xac>)
 80105dc:	680a      	ldr	r2, [r1, #0]
 80105de:	4614      	mov	r4, r2
 80105e0:	b99c      	cbnz	r4, 801060a <_malloc_r+0x56>
 80105e2:	4f20      	ldr	r7, [pc, #128]	; (8010664 <_malloc_r+0xb0>)
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	b923      	cbnz	r3, 80105f2 <_malloc_r+0x3e>
 80105e8:	4621      	mov	r1, r4
 80105ea:	4630      	mov	r0, r6
 80105ec:	f001 f810 	bl	8011610 <_sbrk_r>
 80105f0:	6038      	str	r0, [r7, #0]
 80105f2:	4629      	mov	r1, r5
 80105f4:	4630      	mov	r0, r6
 80105f6:	f001 f80b 	bl	8011610 <_sbrk_r>
 80105fa:	1c43      	adds	r3, r0, #1
 80105fc:	d123      	bne.n	8010646 <_malloc_r+0x92>
 80105fe:	230c      	movs	r3, #12
 8010600:	6033      	str	r3, [r6, #0]
 8010602:	4630      	mov	r0, r6
 8010604:	f003 fbf0 	bl	8013de8 <__malloc_unlock>
 8010608:	e7e3      	b.n	80105d2 <_malloc_r+0x1e>
 801060a:	6823      	ldr	r3, [r4, #0]
 801060c:	1b5b      	subs	r3, r3, r5
 801060e:	d417      	bmi.n	8010640 <_malloc_r+0x8c>
 8010610:	2b0b      	cmp	r3, #11
 8010612:	d903      	bls.n	801061c <_malloc_r+0x68>
 8010614:	6023      	str	r3, [r4, #0]
 8010616:	441c      	add	r4, r3
 8010618:	6025      	str	r5, [r4, #0]
 801061a:	e004      	b.n	8010626 <_malloc_r+0x72>
 801061c:	6863      	ldr	r3, [r4, #4]
 801061e:	42a2      	cmp	r2, r4
 8010620:	bf0c      	ite	eq
 8010622:	600b      	streq	r3, [r1, #0]
 8010624:	6053      	strne	r3, [r2, #4]
 8010626:	4630      	mov	r0, r6
 8010628:	f003 fbde 	bl	8013de8 <__malloc_unlock>
 801062c:	f104 000b 	add.w	r0, r4, #11
 8010630:	1d23      	adds	r3, r4, #4
 8010632:	f020 0007 	bic.w	r0, r0, #7
 8010636:	1ac2      	subs	r2, r0, r3
 8010638:	d0cc      	beq.n	80105d4 <_malloc_r+0x20>
 801063a:	1a1b      	subs	r3, r3, r0
 801063c:	50a3      	str	r3, [r4, r2]
 801063e:	e7c9      	b.n	80105d4 <_malloc_r+0x20>
 8010640:	4622      	mov	r2, r4
 8010642:	6864      	ldr	r4, [r4, #4]
 8010644:	e7cc      	b.n	80105e0 <_malloc_r+0x2c>
 8010646:	1cc4      	adds	r4, r0, #3
 8010648:	f024 0403 	bic.w	r4, r4, #3
 801064c:	42a0      	cmp	r0, r4
 801064e:	d0e3      	beq.n	8010618 <_malloc_r+0x64>
 8010650:	1a21      	subs	r1, r4, r0
 8010652:	4630      	mov	r0, r6
 8010654:	f000 ffdc 	bl	8011610 <_sbrk_r>
 8010658:	3001      	adds	r0, #1
 801065a:	d1dd      	bne.n	8010618 <_malloc_r+0x64>
 801065c:	e7cf      	b.n	80105fe <_malloc_r+0x4a>
 801065e:	bf00      	nop
 8010660:	20001324 	.word	0x20001324
 8010664:	20001328 	.word	0x20001328

08010668 <__sfputc_r>:
 8010668:	6893      	ldr	r3, [r2, #8]
 801066a:	3b01      	subs	r3, #1
 801066c:	2b00      	cmp	r3, #0
 801066e:	b410      	push	{r4}
 8010670:	6093      	str	r3, [r2, #8]
 8010672:	da08      	bge.n	8010686 <__sfputc_r+0x1e>
 8010674:	6994      	ldr	r4, [r2, #24]
 8010676:	42a3      	cmp	r3, r4
 8010678:	db01      	blt.n	801067e <__sfputc_r+0x16>
 801067a:	290a      	cmp	r1, #10
 801067c:	d103      	bne.n	8010686 <__sfputc_r+0x1e>
 801067e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010682:	f001 beaf 	b.w	80123e4 <__swbuf_r>
 8010686:	6813      	ldr	r3, [r2, #0]
 8010688:	1c58      	adds	r0, r3, #1
 801068a:	6010      	str	r0, [r2, #0]
 801068c:	7019      	strb	r1, [r3, #0]
 801068e:	4608      	mov	r0, r1
 8010690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010694:	4770      	bx	lr

08010696 <__sfputs_r>:
 8010696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010698:	4606      	mov	r6, r0
 801069a:	460f      	mov	r7, r1
 801069c:	4614      	mov	r4, r2
 801069e:	18d5      	adds	r5, r2, r3
 80106a0:	42ac      	cmp	r4, r5
 80106a2:	d101      	bne.n	80106a8 <__sfputs_r+0x12>
 80106a4:	2000      	movs	r0, #0
 80106a6:	e007      	b.n	80106b8 <__sfputs_r+0x22>
 80106a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ac:	463a      	mov	r2, r7
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7ff ffda 	bl	8010668 <__sfputc_r>
 80106b4:	1c43      	adds	r3, r0, #1
 80106b6:	d1f3      	bne.n	80106a0 <__sfputs_r+0xa>
 80106b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106bc <_vfiprintf_r>:
 80106bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c0:	460d      	mov	r5, r1
 80106c2:	b09d      	sub	sp, #116	; 0x74
 80106c4:	4614      	mov	r4, r2
 80106c6:	4698      	mov	r8, r3
 80106c8:	4606      	mov	r6, r0
 80106ca:	b118      	cbz	r0, 80106d4 <_vfiprintf_r+0x18>
 80106cc:	6983      	ldr	r3, [r0, #24]
 80106ce:	b90b      	cbnz	r3, 80106d4 <_vfiprintf_r+0x18>
 80106d0:	f002 fee0 	bl	8013494 <__sinit>
 80106d4:	4b89      	ldr	r3, [pc, #548]	; (80108fc <_vfiprintf_r+0x240>)
 80106d6:	429d      	cmp	r5, r3
 80106d8:	d11b      	bne.n	8010712 <_vfiprintf_r+0x56>
 80106da:	6875      	ldr	r5, [r6, #4]
 80106dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106de:	07d9      	lsls	r1, r3, #31
 80106e0:	d405      	bmi.n	80106ee <_vfiprintf_r+0x32>
 80106e2:	89ab      	ldrh	r3, [r5, #12]
 80106e4:	059a      	lsls	r2, r3, #22
 80106e6:	d402      	bmi.n	80106ee <_vfiprintf_r+0x32>
 80106e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106ea:	f003 fae4 	bl	8013cb6 <__retarget_lock_acquire_recursive>
 80106ee:	89ab      	ldrh	r3, [r5, #12]
 80106f0:	071b      	lsls	r3, r3, #28
 80106f2:	d501      	bpl.n	80106f8 <_vfiprintf_r+0x3c>
 80106f4:	692b      	ldr	r3, [r5, #16]
 80106f6:	b9eb      	cbnz	r3, 8010734 <_vfiprintf_r+0x78>
 80106f8:	4629      	mov	r1, r5
 80106fa:	4630      	mov	r0, r6
 80106fc:	f001 fec4 	bl	8012488 <__swsetup_r>
 8010700:	b1c0      	cbz	r0, 8010734 <_vfiprintf_r+0x78>
 8010702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010704:	07dc      	lsls	r4, r3, #31
 8010706:	d50e      	bpl.n	8010726 <_vfiprintf_r+0x6a>
 8010708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801070c:	b01d      	add	sp, #116	; 0x74
 801070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010712:	4b7b      	ldr	r3, [pc, #492]	; (8010900 <_vfiprintf_r+0x244>)
 8010714:	429d      	cmp	r5, r3
 8010716:	d101      	bne.n	801071c <_vfiprintf_r+0x60>
 8010718:	68b5      	ldr	r5, [r6, #8]
 801071a:	e7df      	b.n	80106dc <_vfiprintf_r+0x20>
 801071c:	4b79      	ldr	r3, [pc, #484]	; (8010904 <_vfiprintf_r+0x248>)
 801071e:	429d      	cmp	r5, r3
 8010720:	bf08      	it	eq
 8010722:	68f5      	ldreq	r5, [r6, #12]
 8010724:	e7da      	b.n	80106dc <_vfiprintf_r+0x20>
 8010726:	89ab      	ldrh	r3, [r5, #12]
 8010728:	0598      	lsls	r0, r3, #22
 801072a:	d4ed      	bmi.n	8010708 <_vfiprintf_r+0x4c>
 801072c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801072e:	f003 fac3 	bl	8013cb8 <__retarget_lock_release_recursive>
 8010732:	e7e9      	b.n	8010708 <_vfiprintf_r+0x4c>
 8010734:	2300      	movs	r3, #0
 8010736:	9309      	str	r3, [sp, #36]	; 0x24
 8010738:	2320      	movs	r3, #32
 801073a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801073e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010742:	2330      	movs	r3, #48	; 0x30
 8010744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010908 <_vfiprintf_r+0x24c>
 8010748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801074c:	f04f 0901 	mov.w	r9, #1
 8010750:	4623      	mov	r3, r4
 8010752:	469a      	mov	sl, r3
 8010754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010758:	b10a      	cbz	r2, 801075e <_vfiprintf_r+0xa2>
 801075a:	2a25      	cmp	r2, #37	; 0x25
 801075c:	d1f9      	bne.n	8010752 <_vfiprintf_r+0x96>
 801075e:	ebba 0b04 	subs.w	fp, sl, r4
 8010762:	d00b      	beq.n	801077c <_vfiprintf_r+0xc0>
 8010764:	465b      	mov	r3, fp
 8010766:	4622      	mov	r2, r4
 8010768:	4629      	mov	r1, r5
 801076a:	4630      	mov	r0, r6
 801076c:	f7ff ff93 	bl	8010696 <__sfputs_r>
 8010770:	3001      	adds	r0, #1
 8010772:	f000 80aa 	beq.w	80108ca <_vfiprintf_r+0x20e>
 8010776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010778:	445a      	add	r2, fp
 801077a:	9209      	str	r2, [sp, #36]	; 0x24
 801077c:	f89a 3000 	ldrb.w	r3, [sl]
 8010780:	2b00      	cmp	r3, #0
 8010782:	f000 80a2 	beq.w	80108ca <_vfiprintf_r+0x20e>
 8010786:	2300      	movs	r3, #0
 8010788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801078c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010790:	f10a 0a01 	add.w	sl, sl, #1
 8010794:	9304      	str	r3, [sp, #16]
 8010796:	9307      	str	r3, [sp, #28]
 8010798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801079c:	931a      	str	r3, [sp, #104]	; 0x68
 801079e:	4654      	mov	r4, sl
 80107a0:	2205      	movs	r2, #5
 80107a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107a6:	4858      	ldr	r0, [pc, #352]	; (8010908 <_vfiprintf_r+0x24c>)
 80107a8:	f7ef fd2a 	bl	8000200 <memchr>
 80107ac:	9a04      	ldr	r2, [sp, #16]
 80107ae:	b9d8      	cbnz	r0, 80107e8 <_vfiprintf_r+0x12c>
 80107b0:	06d1      	lsls	r1, r2, #27
 80107b2:	bf44      	itt	mi
 80107b4:	2320      	movmi	r3, #32
 80107b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107ba:	0713      	lsls	r3, r2, #28
 80107bc:	bf44      	itt	mi
 80107be:	232b      	movmi	r3, #43	; 0x2b
 80107c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107c4:	f89a 3000 	ldrb.w	r3, [sl]
 80107c8:	2b2a      	cmp	r3, #42	; 0x2a
 80107ca:	d015      	beq.n	80107f8 <_vfiprintf_r+0x13c>
 80107cc:	9a07      	ldr	r2, [sp, #28]
 80107ce:	4654      	mov	r4, sl
 80107d0:	2000      	movs	r0, #0
 80107d2:	f04f 0c0a 	mov.w	ip, #10
 80107d6:	4621      	mov	r1, r4
 80107d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107dc:	3b30      	subs	r3, #48	; 0x30
 80107de:	2b09      	cmp	r3, #9
 80107e0:	d94e      	bls.n	8010880 <_vfiprintf_r+0x1c4>
 80107e2:	b1b0      	cbz	r0, 8010812 <_vfiprintf_r+0x156>
 80107e4:	9207      	str	r2, [sp, #28]
 80107e6:	e014      	b.n	8010812 <_vfiprintf_r+0x156>
 80107e8:	eba0 0308 	sub.w	r3, r0, r8
 80107ec:	fa09 f303 	lsl.w	r3, r9, r3
 80107f0:	4313      	orrs	r3, r2
 80107f2:	9304      	str	r3, [sp, #16]
 80107f4:	46a2      	mov	sl, r4
 80107f6:	e7d2      	b.n	801079e <_vfiprintf_r+0xe2>
 80107f8:	9b03      	ldr	r3, [sp, #12]
 80107fa:	1d19      	adds	r1, r3, #4
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	9103      	str	r1, [sp, #12]
 8010800:	2b00      	cmp	r3, #0
 8010802:	bfbb      	ittet	lt
 8010804:	425b      	neglt	r3, r3
 8010806:	f042 0202 	orrlt.w	r2, r2, #2
 801080a:	9307      	strge	r3, [sp, #28]
 801080c:	9307      	strlt	r3, [sp, #28]
 801080e:	bfb8      	it	lt
 8010810:	9204      	strlt	r2, [sp, #16]
 8010812:	7823      	ldrb	r3, [r4, #0]
 8010814:	2b2e      	cmp	r3, #46	; 0x2e
 8010816:	d10c      	bne.n	8010832 <_vfiprintf_r+0x176>
 8010818:	7863      	ldrb	r3, [r4, #1]
 801081a:	2b2a      	cmp	r3, #42	; 0x2a
 801081c:	d135      	bne.n	801088a <_vfiprintf_r+0x1ce>
 801081e:	9b03      	ldr	r3, [sp, #12]
 8010820:	1d1a      	adds	r2, r3, #4
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	9203      	str	r2, [sp, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	bfb8      	it	lt
 801082a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801082e:	3402      	adds	r4, #2
 8010830:	9305      	str	r3, [sp, #20]
 8010832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010918 <_vfiprintf_r+0x25c>
 8010836:	7821      	ldrb	r1, [r4, #0]
 8010838:	2203      	movs	r2, #3
 801083a:	4650      	mov	r0, sl
 801083c:	f7ef fce0 	bl	8000200 <memchr>
 8010840:	b140      	cbz	r0, 8010854 <_vfiprintf_r+0x198>
 8010842:	2340      	movs	r3, #64	; 0x40
 8010844:	eba0 000a 	sub.w	r0, r0, sl
 8010848:	fa03 f000 	lsl.w	r0, r3, r0
 801084c:	9b04      	ldr	r3, [sp, #16]
 801084e:	4303      	orrs	r3, r0
 8010850:	3401      	adds	r4, #1
 8010852:	9304      	str	r3, [sp, #16]
 8010854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010858:	482c      	ldr	r0, [pc, #176]	; (801090c <_vfiprintf_r+0x250>)
 801085a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801085e:	2206      	movs	r2, #6
 8010860:	f7ef fcce 	bl	8000200 <memchr>
 8010864:	2800      	cmp	r0, #0
 8010866:	d03f      	beq.n	80108e8 <_vfiprintf_r+0x22c>
 8010868:	4b29      	ldr	r3, [pc, #164]	; (8010910 <_vfiprintf_r+0x254>)
 801086a:	bb1b      	cbnz	r3, 80108b4 <_vfiprintf_r+0x1f8>
 801086c:	9b03      	ldr	r3, [sp, #12]
 801086e:	3307      	adds	r3, #7
 8010870:	f023 0307 	bic.w	r3, r3, #7
 8010874:	3308      	adds	r3, #8
 8010876:	9303      	str	r3, [sp, #12]
 8010878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801087a:	443b      	add	r3, r7
 801087c:	9309      	str	r3, [sp, #36]	; 0x24
 801087e:	e767      	b.n	8010750 <_vfiprintf_r+0x94>
 8010880:	fb0c 3202 	mla	r2, ip, r2, r3
 8010884:	460c      	mov	r4, r1
 8010886:	2001      	movs	r0, #1
 8010888:	e7a5      	b.n	80107d6 <_vfiprintf_r+0x11a>
 801088a:	2300      	movs	r3, #0
 801088c:	3401      	adds	r4, #1
 801088e:	9305      	str	r3, [sp, #20]
 8010890:	4619      	mov	r1, r3
 8010892:	f04f 0c0a 	mov.w	ip, #10
 8010896:	4620      	mov	r0, r4
 8010898:	f810 2b01 	ldrb.w	r2, [r0], #1
 801089c:	3a30      	subs	r2, #48	; 0x30
 801089e:	2a09      	cmp	r2, #9
 80108a0:	d903      	bls.n	80108aa <_vfiprintf_r+0x1ee>
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d0c5      	beq.n	8010832 <_vfiprintf_r+0x176>
 80108a6:	9105      	str	r1, [sp, #20]
 80108a8:	e7c3      	b.n	8010832 <_vfiprintf_r+0x176>
 80108aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80108ae:	4604      	mov	r4, r0
 80108b0:	2301      	movs	r3, #1
 80108b2:	e7f0      	b.n	8010896 <_vfiprintf_r+0x1da>
 80108b4:	ab03      	add	r3, sp, #12
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	462a      	mov	r2, r5
 80108ba:	4b16      	ldr	r3, [pc, #88]	; (8010914 <_vfiprintf_r+0x258>)
 80108bc:	a904      	add	r1, sp, #16
 80108be:	4630      	mov	r0, r6
 80108c0:	f000 f8cc 	bl	8010a5c <_printf_float>
 80108c4:	4607      	mov	r7, r0
 80108c6:	1c78      	adds	r0, r7, #1
 80108c8:	d1d6      	bne.n	8010878 <_vfiprintf_r+0x1bc>
 80108ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108cc:	07d9      	lsls	r1, r3, #31
 80108ce:	d405      	bmi.n	80108dc <_vfiprintf_r+0x220>
 80108d0:	89ab      	ldrh	r3, [r5, #12]
 80108d2:	059a      	lsls	r2, r3, #22
 80108d4:	d402      	bmi.n	80108dc <_vfiprintf_r+0x220>
 80108d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108d8:	f003 f9ee 	bl	8013cb8 <__retarget_lock_release_recursive>
 80108dc:	89ab      	ldrh	r3, [r5, #12]
 80108de:	065b      	lsls	r3, r3, #25
 80108e0:	f53f af12 	bmi.w	8010708 <_vfiprintf_r+0x4c>
 80108e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108e6:	e711      	b.n	801070c <_vfiprintf_r+0x50>
 80108e8:	ab03      	add	r3, sp, #12
 80108ea:	9300      	str	r3, [sp, #0]
 80108ec:	462a      	mov	r2, r5
 80108ee:	4b09      	ldr	r3, [pc, #36]	; (8010914 <_vfiprintf_r+0x258>)
 80108f0:	a904      	add	r1, sp, #16
 80108f2:	4630      	mov	r0, r6
 80108f4:	f000 fb56 	bl	8010fa4 <_printf_i>
 80108f8:	e7e4      	b.n	80108c4 <_vfiprintf_r+0x208>
 80108fa:	bf00      	nop
 80108fc:	0805fc98 	.word	0x0805fc98
 8010900:	0805fcb8 	.word	0x0805fcb8
 8010904:	0805fc78 	.word	0x0805fc78
 8010908:	0805fa44 	.word	0x0805fa44
 801090c:	0805fa4e 	.word	0x0805fa4e
 8010910:	08010a5d 	.word	0x08010a5d
 8010914:	08010697 	.word	0x08010697
 8010918:	0805fa4a 	.word	0x0805fa4a

0801091c <__cvt>:
 801091c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010920:	ec55 4b10 	vmov	r4, r5, d0
 8010924:	2d00      	cmp	r5, #0
 8010926:	460e      	mov	r6, r1
 8010928:	4619      	mov	r1, r3
 801092a:	462b      	mov	r3, r5
 801092c:	bfbb      	ittet	lt
 801092e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010932:	461d      	movlt	r5, r3
 8010934:	2300      	movge	r3, #0
 8010936:	232d      	movlt	r3, #45	; 0x2d
 8010938:	700b      	strb	r3, [r1, #0]
 801093a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801093c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010940:	4691      	mov	r9, r2
 8010942:	f023 0820 	bic.w	r8, r3, #32
 8010946:	bfbc      	itt	lt
 8010948:	4622      	movlt	r2, r4
 801094a:	4614      	movlt	r4, r2
 801094c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010950:	d005      	beq.n	801095e <__cvt+0x42>
 8010952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010956:	d100      	bne.n	801095a <__cvt+0x3e>
 8010958:	3601      	adds	r6, #1
 801095a:	2102      	movs	r1, #2
 801095c:	e000      	b.n	8010960 <__cvt+0x44>
 801095e:	2103      	movs	r1, #3
 8010960:	ab03      	add	r3, sp, #12
 8010962:	9301      	str	r3, [sp, #4]
 8010964:	ab02      	add	r3, sp, #8
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	ec45 4b10 	vmov	d0, r4, r5
 801096c:	4653      	mov	r3, sl
 801096e:	4632      	mov	r2, r6
 8010970:	f001 fe8a 	bl	8012688 <_dtoa_r>
 8010974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010978:	4607      	mov	r7, r0
 801097a:	d102      	bne.n	8010982 <__cvt+0x66>
 801097c:	f019 0f01 	tst.w	r9, #1
 8010980:	d022      	beq.n	80109c8 <__cvt+0xac>
 8010982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010986:	eb07 0906 	add.w	r9, r7, r6
 801098a:	d110      	bne.n	80109ae <__cvt+0x92>
 801098c:	783b      	ldrb	r3, [r7, #0]
 801098e:	2b30      	cmp	r3, #48	; 0x30
 8010990:	d10a      	bne.n	80109a8 <__cvt+0x8c>
 8010992:	2200      	movs	r2, #0
 8010994:	2300      	movs	r3, #0
 8010996:	4620      	mov	r0, r4
 8010998:	4629      	mov	r1, r5
 801099a:	f7f0 f8a5 	bl	8000ae8 <__aeabi_dcmpeq>
 801099e:	b918      	cbnz	r0, 80109a8 <__cvt+0x8c>
 80109a0:	f1c6 0601 	rsb	r6, r6, #1
 80109a4:	f8ca 6000 	str.w	r6, [sl]
 80109a8:	f8da 3000 	ldr.w	r3, [sl]
 80109ac:	4499      	add	r9, r3
 80109ae:	2200      	movs	r2, #0
 80109b0:	2300      	movs	r3, #0
 80109b2:	4620      	mov	r0, r4
 80109b4:	4629      	mov	r1, r5
 80109b6:	f7f0 f897 	bl	8000ae8 <__aeabi_dcmpeq>
 80109ba:	b108      	cbz	r0, 80109c0 <__cvt+0xa4>
 80109bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80109c0:	2230      	movs	r2, #48	; 0x30
 80109c2:	9b03      	ldr	r3, [sp, #12]
 80109c4:	454b      	cmp	r3, r9
 80109c6:	d307      	bcc.n	80109d8 <__cvt+0xbc>
 80109c8:	9b03      	ldr	r3, [sp, #12]
 80109ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109cc:	1bdb      	subs	r3, r3, r7
 80109ce:	4638      	mov	r0, r7
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	b004      	add	sp, #16
 80109d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109d8:	1c59      	adds	r1, r3, #1
 80109da:	9103      	str	r1, [sp, #12]
 80109dc:	701a      	strb	r2, [r3, #0]
 80109de:	e7f0      	b.n	80109c2 <__cvt+0xa6>

080109e0 <__exponent>:
 80109e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109e2:	4603      	mov	r3, r0
 80109e4:	2900      	cmp	r1, #0
 80109e6:	bfb8      	it	lt
 80109e8:	4249      	neglt	r1, r1
 80109ea:	f803 2b02 	strb.w	r2, [r3], #2
 80109ee:	bfb4      	ite	lt
 80109f0:	222d      	movlt	r2, #45	; 0x2d
 80109f2:	222b      	movge	r2, #43	; 0x2b
 80109f4:	2909      	cmp	r1, #9
 80109f6:	7042      	strb	r2, [r0, #1]
 80109f8:	dd2a      	ble.n	8010a50 <__exponent+0x70>
 80109fa:	f10d 0407 	add.w	r4, sp, #7
 80109fe:	46a4      	mov	ip, r4
 8010a00:	270a      	movs	r7, #10
 8010a02:	46a6      	mov	lr, r4
 8010a04:	460a      	mov	r2, r1
 8010a06:	fb91 f6f7 	sdiv	r6, r1, r7
 8010a0a:	fb07 1516 	mls	r5, r7, r6, r1
 8010a0e:	3530      	adds	r5, #48	; 0x30
 8010a10:	2a63      	cmp	r2, #99	; 0x63
 8010a12:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010a16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010a1a:	4631      	mov	r1, r6
 8010a1c:	dcf1      	bgt.n	8010a02 <__exponent+0x22>
 8010a1e:	3130      	adds	r1, #48	; 0x30
 8010a20:	f1ae 0502 	sub.w	r5, lr, #2
 8010a24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010a28:	1c44      	adds	r4, r0, #1
 8010a2a:	4629      	mov	r1, r5
 8010a2c:	4561      	cmp	r1, ip
 8010a2e:	d30a      	bcc.n	8010a46 <__exponent+0x66>
 8010a30:	f10d 0209 	add.w	r2, sp, #9
 8010a34:	eba2 020e 	sub.w	r2, r2, lr
 8010a38:	4565      	cmp	r5, ip
 8010a3a:	bf88      	it	hi
 8010a3c:	2200      	movhi	r2, #0
 8010a3e:	4413      	add	r3, r2
 8010a40:	1a18      	subs	r0, r3, r0
 8010a42:	b003      	add	sp, #12
 8010a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010a4e:	e7ed      	b.n	8010a2c <__exponent+0x4c>
 8010a50:	2330      	movs	r3, #48	; 0x30
 8010a52:	3130      	adds	r1, #48	; 0x30
 8010a54:	7083      	strb	r3, [r0, #2]
 8010a56:	70c1      	strb	r1, [r0, #3]
 8010a58:	1d03      	adds	r3, r0, #4
 8010a5a:	e7f1      	b.n	8010a40 <__exponent+0x60>

08010a5c <_printf_float>:
 8010a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a60:	ed2d 8b02 	vpush	{d8}
 8010a64:	b08d      	sub	sp, #52	; 0x34
 8010a66:	460c      	mov	r4, r1
 8010a68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010a6c:	4616      	mov	r6, r2
 8010a6e:	461f      	mov	r7, r3
 8010a70:	4605      	mov	r5, r0
 8010a72:	f003 f91b 	bl	8013cac <_localeconv_r>
 8010a76:	f8d0 a000 	ldr.w	sl, [r0]
 8010a7a:	4650      	mov	r0, sl
 8010a7c:	f7ef fbb2 	bl	80001e4 <strlen>
 8010a80:	2300      	movs	r3, #0
 8010a82:	930a      	str	r3, [sp, #40]	; 0x28
 8010a84:	6823      	ldr	r3, [r4, #0]
 8010a86:	9305      	str	r3, [sp, #20]
 8010a88:	f8d8 3000 	ldr.w	r3, [r8]
 8010a8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010a90:	3307      	adds	r3, #7
 8010a92:	f023 0307 	bic.w	r3, r3, #7
 8010a96:	f103 0208 	add.w	r2, r3, #8
 8010a9a:	f8c8 2000 	str.w	r2, [r8]
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010aa6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010aaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010aae:	9307      	str	r3, [sp, #28]
 8010ab0:	f8cd 8018 	str.w	r8, [sp, #24]
 8010ab4:	ee08 0a10 	vmov	s16, r0
 8010ab8:	4b9f      	ldr	r3, [pc, #636]	; (8010d38 <_printf_float+0x2dc>)
 8010aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ac2:	f7f0 f843 	bl	8000b4c <__aeabi_dcmpun>
 8010ac6:	bb88      	cbnz	r0, 8010b2c <_printf_float+0xd0>
 8010ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010acc:	4b9a      	ldr	r3, [pc, #616]	; (8010d38 <_printf_float+0x2dc>)
 8010ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ad2:	f7f0 f81d 	bl	8000b10 <__aeabi_dcmple>
 8010ad6:	bb48      	cbnz	r0, 8010b2c <_printf_float+0xd0>
 8010ad8:	2200      	movs	r2, #0
 8010ada:	2300      	movs	r3, #0
 8010adc:	4640      	mov	r0, r8
 8010ade:	4649      	mov	r1, r9
 8010ae0:	f7f0 f80c 	bl	8000afc <__aeabi_dcmplt>
 8010ae4:	b110      	cbz	r0, 8010aec <_printf_float+0x90>
 8010ae6:	232d      	movs	r3, #45	; 0x2d
 8010ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010aec:	4b93      	ldr	r3, [pc, #588]	; (8010d3c <_printf_float+0x2e0>)
 8010aee:	4894      	ldr	r0, [pc, #592]	; (8010d40 <_printf_float+0x2e4>)
 8010af0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010af4:	bf94      	ite	ls
 8010af6:	4698      	movls	r8, r3
 8010af8:	4680      	movhi	r8, r0
 8010afa:	2303      	movs	r3, #3
 8010afc:	6123      	str	r3, [r4, #16]
 8010afe:	9b05      	ldr	r3, [sp, #20]
 8010b00:	f023 0204 	bic.w	r2, r3, #4
 8010b04:	6022      	str	r2, [r4, #0]
 8010b06:	f04f 0900 	mov.w	r9, #0
 8010b0a:	9700      	str	r7, [sp, #0]
 8010b0c:	4633      	mov	r3, r6
 8010b0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010b10:	4621      	mov	r1, r4
 8010b12:	4628      	mov	r0, r5
 8010b14:	f000 f9d8 	bl	8010ec8 <_printf_common>
 8010b18:	3001      	adds	r0, #1
 8010b1a:	f040 8090 	bne.w	8010c3e <_printf_float+0x1e2>
 8010b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b22:	b00d      	add	sp, #52	; 0x34
 8010b24:	ecbd 8b02 	vpop	{d8}
 8010b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2c:	4642      	mov	r2, r8
 8010b2e:	464b      	mov	r3, r9
 8010b30:	4640      	mov	r0, r8
 8010b32:	4649      	mov	r1, r9
 8010b34:	f7f0 f80a 	bl	8000b4c <__aeabi_dcmpun>
 8010b38:	b140      	cbz	r0, 8010b4c <_printf_float+0xf0>
 8010b3a:	464b      	mov	r3, r9
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	bfbc      	itt	lt
 8010b40:	232d      	movlt	r3, #45	; 0x2d
 8010b42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010b46:	487f      	ldr	r0, [pc, #508]	; (8010d44 <_printf_float+0x2e8>)
 8010b48:	4b7f      	ldr	r3, [pc, #508]	; (8010d48 <_printf_float+0x2ec>)
 8010b4a:	e7d1      	b.n	8010af0 <_printf_float+0x94>
 8010b4c:	6863      	ldr	r3, [r4, #4]
 8010b4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010b52:	9206      	str	r2, [sp, #24]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	d13f      	bne.n	8010bd8 <_printf_float+0x17c>
 8010b58:	2306      	movs	r3, #6
 8010b5a:	6063      	str	r3, [r4, #4]
 8010b5c:	9b05      	ldr	r3, [sp, #20]
 8010b5e:	6861      	ldr	r1, [r4, #4]
 8010b60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010b64:	2300      	movs	r3, #0
 8010b66:	9303      	str	r3, [sp, #12]
 8010b68:	ab0a      	add	r3, sp, #40	; 0x28
 8010b6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010b6e:	ab09      	add	r3, sp, #36	; 0x24
 8010b70:	ec49 8b10 	vmov	d0, r8, r9
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	6022      	str	r2, [r4, #0]
 8010b78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f7ff fecd 	bl	801091c <__cvt>
 8010b82:	9b06      	ldr	r3, [sp, #24]
 8010b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b86:	2b47      	cmp	r3, #71	; 0x47
 8010b88:	4680      	mov	r8, r0
 8010b8a:	d108      	bne.n	8010b9e <_printf_float+0x142>
 8010b8c:	1cc8      	adds	r0, r1, #3
 8010b8e:	db02      	blt.n	8010b96 <_printf_float+0x13a>
 8010b90:	6863      	ldr	r3, [r4, #4]
 8010b92:	4299      	cmp	r1, r3
 8010b94:	dd41      	ble.n	8010c1a <_printf_float+0x1be>
 8010b96:	f1ab 0b02 	sub.w	fp, fp, #2
 8010b9a:	fa5f fb8b 	uxtb.w	fp, fp
 8010b9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010ba2:	d820      	bhi.n	8010be6 <_printf_float+0x18a>
 8010ba4:	3901      	subs	r1, #1
 8010ba6:	465a      	mov	r2, fp
 8010ba8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010bac:	9109      	str	r1, [sp, #36]	; 0x24
 8010bae:	f7ff ff17 	bl	80109e0 <__exponent>
 8010bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bb4:	1813      	adds	r3, r2, r0
 8010bb6:	2a01      	cmp	r2, #1
 8010bb8:	4681      	mov	r9, r0
 8010bba:	6123      	str	r3, [r4, #16]
 8010bbc:	dc02      	bgt.n	8010bc4 <_printf_float+0x168>
 8010bbe:	6822      	ldr	r2, [r4, #0]
 8010bc0:	07d2      	lsls	r2, r2, #31
 8010bc2:	d501      	bpl.n	8010bc8 <_printf_float+0x16c>
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	6123      	str	r3, [r4, #16]
 8010bc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d09c      	beq.n	8010b0a <_printf_float+0xae>
 8010bd0:	232d      	movs	r3, #45	; 0x2d
 8010bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bd6:	e798      	b.n	8010b0a <_printf_float+0xae>
 8010bd8:	9a06      	ldr	r2, [sp, #24]
 8010bda:	2a47      	cmp	r2, #71	; 0x47
 8010bdc:	d1be      	bne.n	8010b5c <_printf_float+0x100>
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d1bc      	bne.n	8010b5c <_printf_float+0x100>
 8010be2:	2301      	movs	r3, #1
 8010be4:	e7b9      	b.n	8010b5a <_printf_float+0xfe>
 8010be6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010bea:	d118      	bne.n	8010c1e <_printf_float+0x1c2>
 8010bec:	2900      	cmp	r1, #0
 8010bee:	6863      	ldr	r3, [r4, #4]
 8010bf0:	dd0b      	ble.n	8010c0a <_printf_float+0x1ae>
 8010bf2:	6121      	str	r1, [r4, #16]
 8010bf4:	b913      	cbnz	r3, 8010bfc <_printf_float+0x1a0>
 8010bf6:	6822      	ldr	r2, [r4, #0]
 8010bf8:	07d0      	lsls	r0, r2, #31
 8010bfa:	d502      	bpl.n	8010c02 <_printf_float+0x1a6>
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	440b      	add	r3, r1
 8010c00:	6123      	str	r3, [r4, #16]
 8010c02:	65a1      	str	r1, [r4, #88]	; 0x58
 8010c04:	f04f 0900 	mov.w	r9, #0
 8010c08:	e7de      	b.n	8010bc8 <_printf_float+0x16c>
 8010c0a:	b913      	cbnz	r3, 8010c12 <_printf_float+0x1b6>
 8010c0c:	6822      	ldr	r2, [r4, #0]
 8010c0e:	07d2      	lsls	r2, r2, #31
 8010c10:	d501      	bpl.n	8010c16 <_printf_float+0x1ba>
 8010c12:	3302      	adds	r3, #2
 8010c14:	e7f4      	b.n	8010c00 <_printf_float+0x1a4>
 8010c16:	2301      	movs	r3, #1
 8010c18:	e7f2      	b.n	8010c00 <_printf_float+0x1a4>
 8010c1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c20:	4299      	cmp	r1, r3
 8010c22:	db05      	blt.n	8010c30 <_printf_float+0x1d4>
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	6121      	str	r1, [r4, #16]
 8010c28:	07d8      	lsls	r0, r3, #31
 8010c2a:	d5ea      	bpl.n	8010c02 <_printf_float+0x1a6>
 8010c2c:	1c4b      	adds	r3, r1, #1
 8010c2e:	e7e7      	b.n	8010c00 <_printf_float+0x1a4>
 8010c30:	2900      	cmp	r1, #0
 8010c32:	bfd4      	ite	le
 8010c34:	f1c1 0202 	rsble	r2, r1, #2
 8010c38:	2201      	movgt	r2, #1
 8010c3a:	4413      	add	r3, r2
 8010c3c:	e7e0      	b.n	8010c00 <_printf_float+0x1a4>
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	055a      	lsls	r2, r3, #21
 8010c42:	d407      	bmi.n	8010c54 <_printf_float+0x1f8>
 8010c44:	6923      	ldr	r3, [r4, #16]
 8010c46:	4642      	mov	r2, r8
 8010c48:	4631      	mov	r1, r6
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	47b8      	blx	r7
 8010c4e:	3001      	adds	r0, #1
 8010c50:	d12c      	bne.n	8010cac <_printf_float+0x250>
 8010c52:	e764      	b.n	8010b1e <_printf_float+0xc2>
 8010c54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010c58:	f240 80e0 	bls.w	8010e1c <_printf_float+0x3c0>
 8010c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010c60:	2200      	movs	r2, #0
 8010c62:	2300      	movs	r3, #0
 8010c64:	f7ef ff40 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d034      	beq.n	8010cd6 <_printf_float+0x27a>
 8010c6c:	4a37      	ldr	r2, [pc, #220]	; (8010d4c <_printf_float+0x2f0>)
 8010c6e:	2301      	movs	r3, #1
 8010c70:	4631      	mov	r1, r6
 8010c72:	4628      	mov	r0, r5
 8010c74:	47b8      	blx	r7
 8010c76:	3001      	adds	r0, #1
 8010c78:	f43f af51 	beq.w	8010b1e <_printf_float+0xc2>
 8010c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c80:	429a      	cmp	r2, r3
 8010c82:	db02      	blt.n	8010c8a <_printf_float+0x22e>
 8010c84:	6823      	ldr	r3, [r4, #0]
 8010c86:	07d8      	lsls	r0, r3, #31
 8010c88:	d510      	bpl.n	8010cac <_printf_float+0x250>
 8010c8a:	ee18 3a10 	vmov	r3, s16
 8010c8e:	4652      	mov	r2, sl
 8010c90:	4631      	mov	r1, r6
 8010c92:	4628      	mov	r0, r5
 8010c94:	47b8      	blx	r7
 8010c96:	3001      	adds	r0, #1
 8010c98:	f43f af41 	beq.w	8010b1e <_printf_float+0xc2>
 8010c9c:	f04f 0800 	mov.w	r8, #0
 8010ca0:	f104 091a 	add.w	r9, r4, #26
 8010ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	4543      	cmp	r3, r8
 8010caa:	dc09      	bgt.n	8010cc0 <_printf_float+0x264>
 8010cac:	6823      	ldr	r3, [r4, #0]
 8010cae:	079b      	lsls	r3, r3, #30
 8010cb0:	f100 8105 	bmi.w	8010ebe <_printf_float+0x462>
 8010cb4:	68e0      	ldr	r0, [r4, #12]
 8010cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cb8:	4298      	cmp	r0, r3
 8010cba:	bfb8      	it	lt
 8010cbc:	4618      	movlt	r0, r3
 8010cbe:	e730      	b.n	8010b22 <_printf_float+0xc6>
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	464a      	mov	r2, r9
 8010cc4:	4631      	mov	r1, r6
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	47b8      	blx	r7
 8010cca:	3001      	adds	r0, #1
 8010ccc:	f43f af27 	beq.w	8010b1e <_printf_float+0xc2>
 8010cd0:	f108 0801 	add.w	r8, r8, #1
 8010cd4:	e7e6      	b.n	8010ca4 <_printf_float+0x248>
 8010cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	dc39      	bgt.n	8010d50 <_printf_float+0x2f4>
 8010cdc:	4a1b      	ldr	r2, [pc, #108]	; (8010d4c <_printf_float+0x2f0>)
 8010cde:	2301      	movs	r3, #1
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	47b8      	blx	r7
 8010ce6:	3001      	adds	r0, #1
 8010ce8:	f43f af19 	beq.w	8010b1e <_printf_float+0xc2>
 8010cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010cf0:	4313      	orrs	r3, r2
 8010cf2:	d102      	bne.n	8010cfa <_printf_float+0x29e>
 8010cf4:	6823      	ldr	r3, [r4, #0]
 8010cf6:	07d9      	lsls	r1, r3, #31
 8010cf8:	d5d8      	bpl.n	8010cac <_printf_float+0x250>
 8010cfa:	ee18 3a10 	vmov	r3, s16
 8010cfe:	4652      	mov	r2, sl
 8010d00:	4631      	mov	r1, r6
 8010d02:	4628      	mov	r0, r5
 8010d04:	47b8      	blx	r7
 8010d06:	3001      	adds	r0, #1
 8010d08:	f43f af09 	beq.w	8010b1e <_printf_float+0xc2>
 8010d0c:	f04f 0900 	mov.w	r9, #0
 8010d10:	f104 0a1a 	add.w	sl, r4, #26
 8010d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d16:	425b      	negs	r3, r3
 8010d18:	454b      	cmp	r3, r9
 8010d1a:	dc01      	bgt.n	8010d20 <_printf_float+0x2c4>
 8010d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d1e:	e792      	b.n	8010c46 <_printf_float+0x1ea>
 8010d20:	2301      	movs	r3, #1
 8010d22:	4652      	mov	r2, sl
 8010d24:	4631      	mov	r1, r6
 8010d26:	4628      	mov	r0, r5
 8010d28:	47b8      	blx	r7
 8010d2a:	3001      	adds	r0, #1
 8010d2c:	f43f aef7 	beq.w	8010b1e <_printf_float+0xc2>
 8010d30:	f109 0901 	add.w	r9, r9, #1
 8010d34:	e7ee      	b.n	8010d14 <_printf_float+0x2b8>
 8010d36:	bf00      	nop
 8010d38:	7fefffff 	.word	0x7fefffff
 8010d3c:	0805fa55 	.word	0x0805fa55
 8010d40:	0805fa59 	.word	0x0805fa59
 8010d44:	0805fa61 	.word	0x0805fa61
 8010d48:	0805fa5d 	.word	0x0805fa5d
 8010d4c:	0805fa65 	.word	0x0805fa65
 8010d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d54:	429a      	cmp	r2, r3
 8010d56:	bfa8      	it	ge
 8010d58:	461a      	movge	r2, r3
 8010d5a:	2a00      	cmp	r2, #0
 8010d5c:	4691      	mov	r9, r2
 8010d5e:	dc37      	bgt.n	8010dd0 <_printf_float+0x374>
 8010d60:	f04f 0b00 	mov.w	fp, #0
 8010d64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d68:	f104 021a 	add.w	r2, r4, #26
 8010d6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d6e:	9305      	str	r3, [sp, #20]
 8010d70:	eba3 0309 	sub.w	r3, r3, r9
 8010d74:	455b      	cmp	r3, fp
 8010d76:	dc33      	bgt.n	8010de0 <_printf_float+0x384>
 8010d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	db3b      	blt.n	8010df8 <_printf_float+0x39c>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	07da      	lsls	r2, r3, #31
 8010d84:	d438      	bmi.n	8010df8 <_printf_float+0x39c>
 8010d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d88:	9b05      	ldr	r3, [sp, #20]
 8010d8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	eba2 0901 	sub.w	r9, r2, r1
 8010d92:	4599      	cmp	r9, r3
 8010d94:	bfa8      	it	ge
 8010d96:	4699      	movge	r9, r3
 8010d98:	f1b9 0f00 	cmp.w	r9, #0
 8010d9c:	dc35      	bgt.n	8010e0a <_printf_float+0x3ae>
 8010d9e:	f04f 0800 	mov.w	r8, #0
 8010da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010da6:	f104 0a1a 	add.w	sl, r4, #26
 8010daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010dae:	1a9b      	subs	r3, r3, r2
 8010db0:	eba3 0309 	sub.w	r3, r3, r9
 8010db4:	4543      	cmp	r3, r8
 8010db6:	f77f af79 	ble.w	8010cac <_printf_float+0x250>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	4652      	mov	r2, sl
 8010dbe:	4631      	mov	r1, r6
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	47b8      	blx	r7
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	f43f aeaa 	beq.w	8010b1e <_printf_float+0xc2>
 8010dca:	f108 0801 	add.w	r8, r8, #1
 8010dce:	e7ec      	b.n	8010daa <_printf_float+0x34e>
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	4642      	mov	r2, r8
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	47b8      	blx	r7
 8010dda:	3001      	adds	r0, #1
 8010ddc:	d1c0      	bne.n	8010d60 <_printf_float+0x304>
 8010dde:	e69e      	b.n	8010b1e <_printf_float+0xc2>
 8010de0:	2301      	movs	r3, #1
 8010de2:	4631      	mov	r1, r6
 8010de4:	4628      	mov	r0, r5
 8010de6:	9205      	str	r2, [sp, #20]
 8010de8:	47b8      	blx	r7
 8010dea:	3001      	adds	r0, #1
 8010dec:	f43f ae97 	beq.w	8010b1e <_printf_float+0xc2>
 8010df0:	9a05      	ldr	r2, [sp, #20]
 8010df2:	f10b 0b01 	add.w	fp, fp, #1
 8010df6:	e7b9      	b.n	8010d6c <_printf_float+0x310>
 8010df8:	ee18 3a10 	vmov	r3, s16
 8010dfc:	4652      	mov	r2, sl
 8010dfe:	4631      	mov	r1, r6
 8010e00:	4628      	mov	r0, r5
 8010e02:	47b8      	blx	r7
 8010e04:	3001      	adds	r0, #1
 8010e06:	d1be      	bne.n	8010d86 <_printf_float+0x32a>
 8010e08:	e689      	b.n	8010b1e <_printf_float+0xc2>
 8010e0a:	9a05      	ldr	r2, [sp, #20]
 8010e0c:	464b      	mov	r3, r9
 8010e0e:	4442      	add	r2, r8
 8010e10:	4631      	mov	r1, r6
 8010e12:	4628      	mov	r0, r5
 8010e14:	47b8      	blx	r7
 8010e16:	3001      	adds	r0, #1
 8010e18:	d1c1      	bne.n	8010d9e <_printf_float+0x342>
 8010e1a:	e680      	b.n	8010b1e <_printf_float+0xc2>
 8010e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e1e:	2a01      	cmp	r2, #1
 8010e20:	dc01      	bgt.n	8010e26 <_printf_float+0x3ca>
 8010e22:	07db      	lsls	r3, r3, #31
 8010e24:	d538      	bpl.n	8010e98 <_printf_float+0x43c>
 8010e26:	2301      	movs	r3, #1
 8010e28:	4642      	mov	r2, r8
 8010e2a:	4631      	mov	r1, r6
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	47b8      	blx	r7
 8010e30:	3001      	adds	r0, #1
 8010e32:	f43f ae74 	beq.w	8010b1e <_printf_float+0xc2>
 8010e36:	ee18 3a10 	vmov	r3, s16
 8010e3a:	4652      	mov	r2, sl
 8010e3c:	4631      	mov	r1, r6
 8010e3e:	4628      	mov	r0, r5
 8010e40:	47b8      	blx	r7
 8010e42:	3001      	adds	r0, #1
 8010e44:	f43f ae6b 	beq.w	8010b1e <_printf_float+0xc2>
 8010e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	2300      	movs	r3, #0
 8010e50:	f7ef fe4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e54:	b9d8      	cbnz	r0, 8010e8e <_printf_float+0x432>
 8010e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e58:	f108 0201 	add.w	r2, r8, #1
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	4631      	mov	r1, r6
 8010e60:	4628      	mov	r0, r5
 8010e62:	47b8      	blx	r7
 8010e64:	3001      	adds	r0, #1
 8010e66:	d10e      	bne.n	8010e86 <_printf_float+0x42a>
 8010e68:	e659      	b.n	8010b1e <_printf_float+0xc2>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	4652      	mov	r2, sl
 8010e6e:	4631      	mov	r1, r6
 8010e70:	4628      	mov	r0, r5
 8010e72:	47b8      	blx	r7
 8010e74:	3001      	adds	r0, #1
 8010e76:	f43f ae52 	beq.w	8010b1e <_printf_float+0xc2>
 8010e7a:	f108 0801 	add.w	r8, r8, #1
 8010e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e80:	3b01      	subs	r3, #1
 8010e82:	4543      	cmp	r3, r8
 8010e84:	dcf1      	bgt.n	8010e6a <_printf_float+0x40e>
 8010e86:	464b      	mov	r3, r9
 8010e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010e8c:	e6dc      	b.n	8010c48 <_printf_float+0x1ec>
 8010e8e:	f04f 0800 	mov.w	r8, #0
 8010e92:	f104 0a1a 	add.w	sl, r4, #26
 8010e96:	e7f2      	b.n	8010e7e <_printf_float+0x422>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	4642      	mov	r2, r8
 8010e9c:	e7df      	b.n	8010e5e <_printf_float+0x402>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	464a      	mov	r2, r9
 8010ea2:	4631      	mov	r1, r6
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	47b8      	blx	r7
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	f43f ae38 	beq.w	8010b1e <_printf_float+0xc2>
 8010eae:	f108 0801 	add.w	r8, r8, #1
 8010eb2:	68e3      	ldr	r3, [r4, #12]
 8010eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010eb6:	1a5b      	subs	r3, r3, r1
 8010eb8:	4543      	cmp	r3, r8
 8010eba:	dcf0      	bgt.n	8010e9e <_printf_float+0x442>
 8010ebc:	e6fa      	b.n	8010cb4 <_printf_float+0x258>
 8010ebe:	f04f 0800 	mov.w	r8, #0
 8010ec2:	f104 0919 	add.w	r9, r4, #25
 8010ec6:	e7f4      	b.n	8010eb2 <_printf_float+0x456>

08010ec8 <_printf_common>:
 8010ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ecc:	4616      	mov	r6, r2
 8010ece:	4699      	mov	r9, r3
 8010ed0:	688a      	ldr	r2, [r1, #8]
 8010ed2:	690b      	ldr	r3, [r1, #16]
 8010ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	bfb8      	it	lt
 8010edc:	4613      	movlt	r3, r2
 8010ede:	6033      	str	r3, [r6, #0]
 8010ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ee4:	4607      	mov	r7, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	b10a      	cbz	r2, 8010eee <_printf_common+0x26>
 8010eea:	3301      	adds	r3, #1
 8010eec:	6033      	str	r3, [r6, #0]
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	0699      	lsls	r1, r3, #26
 8010ef2:	bf42      	ittt	mi
 8010ef4:	6833      	ldrmi	r3, [r6, #0]
 8010ef6:	3302      	addmi	r3, #2
 8010ef8:	6033      	strmi	r3, [r6, #0]
 8010efa:	6825      	ldr	r5, [r4, #0]
 8010efc:	f015 0506 	ands.w	r5, r5, #6
 8010f00:	d106      	bne.n	8010f10 <_printf_common+0x48>
 8010f02:	f104 0a19 	add.w	sl, r4, #25
 8010f06:	68e3      	ldr	r3, [r4, #12]
 8010f08:	6832      	ldr	r2, [r6, #0]
 8010f0a:	1a9b      	subs	r3, r3, r2
 8010f0c:	42ab      	cmp	r3, r5
 8010f0e:	dc26      	bgt.n	8010f5e <_printf_common+0x96>
 8010f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f14:	1e13      	subs	r3, r2, #0
 8010f16:	6822      	ldr	r2, [r4, #0]
 8010f18:	bf18      	it	ne
 8010f1a:	2301      	movne	r3, #1
 8010f1c:	0692      	lsls	r2, r2, #26
 8010f1e:	d42b      	bmi.n	8010f78 <_printf_common+0xb0>
 8010f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f24:	4649      	mov	r1, r9
 8010f26:	4638      	mov	r0, r7
 8010f28:	47c0      	blx	r8
 8010f2a:	3001      	adds	r0, #1
 8010f2c:	d01e      	beq.n	8010f6c <_printf_common+0xa4>
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	68e5      	ldr	r5, [r4, #12]
 8010f32:	6832      	ldr	r2, [r6, #0]
 8010f34:	f003 0306 	and.w	r3, r3, #6
 8010f38:	2b04      	cmp	r3, #4
 8010f3a:	bf08      	it	eq
 8010f3c:	1aad      	subeq	r5, r5, r2
 8010f3e:	68a3      	ldr	r3, [r4, #8]
 8010f40:	6922      	ldr	r2, [r4, #16]
 8010f42:	bf0c      	ite	eq
 8010f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f48:	2500      	movne	r5, #0
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	bfc4      	itt	gt
 8010f4e:	1a9b      	subgt	r3, r3, r2
 8010f50:	18ed      	addgt	r5, r5, r3
 8010f52:	2600      	movs	r6, #0
 8010f54:	341a      	adds	r4, #26
 8010f56:	42b5      	cmp	r5, r6
 8010f58:	d11a      	bne.n	8010f90 <_printf_common+0xc8>
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	e008      	b.n	8010f70 <_printf_common+0xa8>
 8010f5e:	2301      	movs	r3, #1
 8010f60:	4652      	mov	r2, sl
 8010f62:	4649      	mov	r1, r9
 8010f64:	4638      	mov	r0, r7
 8010f66:	47c0      	blx	r8
 8010f68:	3001      	adds	r0, #1
 8010f6a:	d103      	bne.n	8010f74 <_printf_common+0xac>
 8010f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f74:	3501      	adds	r5, #1
 8010f76:	e7c6      	b.n	8010f06 <_printf_common+0x3e>
 8010f78:	18e1      	adds	r1, r4, r3
 8010f7a:	1c5a      	adds	r2, r3, #1
 8010f7c:	2030      	movs	r0, #48	; 0x30
 8010f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f82:	4422      	add	r2, r4
 8010f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f8c:	3302      	adds	r3, #2
 8010f8e:	e7c7      	b.n	8010f20 <_printf_common+0x58>
 8010f90:	2301      	movs	r3, #1
 8010f92:	4622      	mov	r2, r4
 8010f94:	4649      	mov	r1, r9
 8010f96:	4638      	mov	r0, r7
 8010f98:	47c0      	blx	r8
 8010f9a:	3001      	adds	r0, #1
 8010f9c:	d0e6      	beq.n	8010f6c <_printf_common+0xa4>
 8010f9e:	3601      	adds	r6, #1
 8010fa0:	e7d9      	b.n	8010f56 <_printf_common+0x8e>
	...

08010fa4 <_printf_i>:
 8010fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa8:	460c      	mov	r4, r1
 8010faa:	4691      	mov	r9, r2
 8010fac:	7e27      	ldrb	r7, [r4, #24]
 8010fae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010fb0:	2f78      	cmp	r7, #120	; 0x78
 8010fb2:	4680      	mov	r8, r0
 8010fb4:	469a      	mov	sl, r3
 8010fb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010fba:	d807      	bhi.n	8010fcc <_printf_i+0x28>
 8010fbc:	2f62      	cmp	r7, #98	; 0x62
 8010fbe:	d80a      	bhi.n	8010fd6 <_printf_i+0x32>
 8010fc0:	2f00      	cmp	r7, #0
 8010fc2:	f000 80d8 	beq.w	8011176 <_printf_i+0x1d2>
 8010fc6:	2f58      	cmp	r7, #88	; 0x58
 8010fc8:	f000 80a3 	beq.w	8011112 <_printf_i+0x16e>
 8010fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fd4:	e03a      	b.n	801104c <_printf_i+0xa8>
 8010fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010fda:	2b15      	cmp	r3, #21
 8010fdc:	d8f6      	bhi.n	8010fcc <_printf_i+0x28>
 8010fde:	a001      	add	r0, pc, #4	; (adr r0, 8010fe4 <_printf_i+0x40>)
 8010fe0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010fe4:	0801103d 	.word	0x0801103d
 8010fe8:	08011051 	.word	0x08011051
 8010fec:	08010fcd 	.word	0x08010fcd
 8010ff0:	08010fcd 	.word	0x08010fcd
 8010ff4:	08010fcd 	.word	0x08010fcd
 8010ff8:	08010fcd 	.word	0x08010fcd
 8010ffc:	08011051 	.word	0x08011051
 8011000:	08010fcd 	.word	0x08010fcd
 8011004:	08010fcd 	.word	0x08010fcd
 8011008:	08010fcd 	.word	0x08010fcd
 801100c:	08010fcd 	.word	0x08010fcd
 8011010:	0801115d 	.word	0x0801115d
 8011014:	08011081 	.word	0x08011081
 8011018:	0801113f 	.word	0x0801113f
 801101c:	08010fcd 	.word	0x08010fcd
 8011020:	08010fcd 	.word	0x08010fcd
 8011024:	0801117f 	.word	0x0801117f
 8011028:	08010fcd 	.word	0x08010fcd
 801102c:	08011081 	.word	0x08011081
 8011030:	08010fcd 	.word	0x08010fcd
 8011034:	08010fcd 	.word	0x08010fcd
 8011038:	08011147 	.word	0x08011147
 801103c:	680b      	ldr	r3, [r1, #0]
 801103e:	1d1a      	adds	r2, r3, #4
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	600a      	str	r2, [r1, #0]
 8011044:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801104c:	2301      	movs	r3, #1
 801104e:	e0a3      	b.n	8011198 <_printf_i+0x1f4>
 8011050:	6825      	ldr	r5, [r4, #0]
 8011052:	6808      	ldr	r0, [r1, #0]
 8011054:	062e      	lsls	r6, r5, #24
 8011056:	f100 0304 	add.w	r3, r0, #4
 801105a:	d50a      	bpl.n	8011072 <_printf_i+0xce>
 801105c:	6805      	ldr	r5, [r0, #0]
 801105e:	600b      	str	r3, [r1, #0]
 8011060:	2d00      	cmp	r5, #0
 8011062:	da03      	bge.n	801106c <_printf_i+0xc8>
 8011064:	232d      	movs	r3, #45	; 0x2d
 8011066:	426d      	negs	r5, r5
 8011068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801106c:	485e      	ldr	r0, [pc, #376]	; (80111e8 <_printf_i+0x244>)
 801106e:	230a      	movs	r3, #10
 8011070:	e019      	b.n	80110a6 <_printf_i+0x102>
 8011072:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011076:	6805      	ldr	r5, [r0, #0]
 8011078:	600b      	str	r3, [r1, #0]
 801107a:	bf18      	it	ne
 801107c:	b22d      	sxthne	r5, r5
 801107e:	e7ef      	b.n	8011060 <_printf_i+0xbc>
 8011080:	680b      	ldr	r3, [r1, #0]
 8011082:	6825      	ldr	r5, [r4, #0]
 8011084:	1d18      	adds	r0, r3, #4
 8011086:	6008      	str	r0, [r1, #0]
 8011088:	0628      	lsls	r0, r5, #24
 801108a:	d501      	bpl.n	8011090 <_printf_i+0xec>
 801108c:	681d      	ldr	r5, [r3, #0]
 801108e:	e002      	b.n	8011096 <_printf_i+0xf2>
 8011090:	0669      	lsls	r1, r5, #25
 8011092:	d5fb      	bpl.n	801108c <_printf_i+0xe8>
 8011094:	881d      	ldrh	r5, [r3, #0]
 8011096:	4854      	ldr	r0, [pc, #336]	; (80111e8 <_printf_i+0x244>)
 8011098:	2f6f      	cmp	r7, #111	; 0x6f
 801109a:	bf0c      	ite	eq
 801109c:	2308      	moveq	r3, #8
 801109e:	230a      	movne	r3, #10
 80110a0:	2100      	movs	r1, #0
 80110a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80110a6:	6866      	ldr	r6, [r4, #4]
 80110a8:	60a6      	str	r6, [r4, #8]
 80110aa:	2e00      	cmp	r6, #0
 80110ac:	bfa2      	ittt	ge
 80110ae:	6821      	ldrge	r1, [r4, #0]
 80110b0:	f021 0104 	bicge.w	r1, r1, #4
 80110b4:	6021      	strge	r1, [r4, #0]
 80110b6:	b90d      	cbnz	r5, 80110bc <_printf_i+0x118>
 80110b8:	2e00      	cmp	r6, #0
 80110ba:	d04d      	beq.n	8011158 <_printf_i+0x1b4>
 80110bc:	4616      	mov	r6, r2
 80110be:	fbb5 f1f3 	udiv	r1, r5, r3
 80110c2:	fb03 5711 	mls	r7, r3, r1, r5
 80110c6:	5dc7      	ldrb	r7, [r0, r7]
 80110c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80110cc:	462f      	mov	r7, r5
 80110ce:	42bb      	cmp	r3, r7
 80110d0:	460d      	mov	r5, r1
 80110d2:	d9f4      	bls.n	80110be <_printf_i+0x11a>
 80110d4:	2b08      	cmp	r3, #8
 80110d6:	d10b      	bne.n	80110f0 <_printf_i+0x14c>
 80110d8:	6823      	ldr	r3, [r4, #0]
 80110da:	07df      	lsls	r7, r3, #31
 80110dc:	d508      	bpl.n	80110f0 <_printf_i+0x14c>
 80110de:	6923      	ldr	r3, [r4, #16]
 80110e0:	6861      	ldr	r1, [r4, #4]
 80110e2:	4299      	cmp	r1, r3
 80110e4:	bfde      	ittt	le
 80110e6:	2330      	movle	r3, #48	; 0x30
 80110e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80110ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80110f0:	1b92      	subs	r2, r2, r6
 80110f2:	6122      	str	r2, [r4, #16]
 80110f4:	f8cd a000 	str.w	sl, [sp]
 80110f8:	464b      	mov	r3, r9
 80110fa:	aa03      	add	r2, sp, #12
 80110fc:	4621      	mov	r1, r4
 80110fe:	4640      	mov	r0, r8
 8011100:	f7ff fee2 	bl	8010ec8 <_printf_common>
 8011104:	3001      	adds	r0, #1
 8011106:	d14c      	bne.n	80111a2 <_printf_i+0x1fe>
 8011108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801110c:	b004      	add	sp, #16
 801110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011112:	4835      	ldr	r0, [pc, #212]	; (80111e8 <_printf_i+0x244>)
 8011114:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011118:	6823      	ldr	r3, [r4, #0]
 801111a:	680e      	ldr	r6, [r1, #0]
 801111c:	061f      	lsls	r7, r3, #24
 801111e:	f856 5b04 	ldr.w	r5, [r6], #4
 8011122:	600e      	str	r6, [r1, #0]
 8011124:	d514      	bpl.n	8011150 <_printf_i+0x1ac>
 8011126:	07d9      	lsls	r1, r3, #31
 8011128:	bf44      	itt	mi
 801112a:	f043 0320 	orrmi.w	r3, r3, #32
 801112e:	6023      	strmi	r3, [r4, #0]
 8011130:	b91d      	cbnz	r5, 801113a <_printf_i+0x196>
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	f023 0320 	bic.w	r3, r3, #32
 8011138:	6023      	str	r3, [r4, #0]
 801113a:	2310      	movs	r3, #16
 801113c:	e7b0      	b.n	80110a0 <_printf_i+0xfc>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	f043 0320 	orr.w	r3, r3, #32
 8011144:	6023      	str	r3, [r4, #0]
 8011146:	2378      	movs	r3, #120	; 0x78
 8011148:	4828      	ldr	r0, [pc, #160]	; (80111ec <_printf_i+0x248>)
 801114a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801114e:	e7e3      	b.n	8011118 <_printf_i+0x174>
 8011150:	065e      	lsls	r6, r3, #25
 8011152:	bf48      	it	mi
 8011154:	b2ad      	uxthmi	r5, r5
 8011156:	e7e6      	b.n	8011126 <_printf_i+0x182>
 8011158:	4616      	mov	r6, r2
 801115a:	e7bb      	b.n	80110d4 <_printf_i+0x130>
 801115c:	680b      	ldr	r3, [r1, #0]
 801115e:	6826      	ldr	r6, [r4, #0]
 8011160:	6960      	ldr	r0, [r4, #20]
 8011162:	1d1d      	adds	r5, r3, #4
 8011164:	600d      	str	r5, [r1, #0]
 8011166:	0635      	lsls	r5, r6, #24
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	d501      	bpl.n	8011170 <_printf_i+0x1cc>
 801116c:	6018      	str	r0, [r3, #0]
 801116e:	e002      	b.n	8011176 <_printf_i+0x1d2>
 8011170:	0671      	lsls	r1, r6, #25
 8011172:	d5fb      	bpl.n	801116c <_printf_i+0x1c8>
 8011174:	8018      	strh	r0, [r3, #0]
 8011176:	2300      	movs	r3, #0
 8011178:	6123      	str	r3, [r4, #16]
 801117a:	4616      	mov	r6, r2
 801117c:	e7ba      	b.n	80110f4 <_printf_i+0x150>
 801117e:	680b      	ldr	r3, [r1, #0]
 8011180:	1d1a      	adds	r2, r3, #4
 8011182:	600a      	str	r2, [r1, #0]
 8011184:	681e      	ldr	r6, [r3, #0]
 8011186:	6862      	ldr	r2, [r4, #4]
 8011188:	2100      	movs	r1, #0
 801118a:	4630      	mov	r0, r6
 801118c:	f7ef f838 	bl	8000200 <memchr>
 8011190:	b108      	cbz	r0, 8011196 <_printf_i+0x1f2>
 8011192:	1b80      	subs	r0, r0, r6
 8011194:	6060      	str	r0, [r4, #4]
 8011196:	6863      	ldr	r3, [r4, #4]
 8011198:	6123      	str	r3, [r4, #16]
 801119a:	2300      	movs	r3, #0
 801119c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111a0:	e7a8      	b.n	80110f4 <_printf_i+0x150>
 80111a2:	6923      	ldr	r3, [r4, #16]
 80111a4:	4632      	mov	r2, r6
 80111a6:	4649      	mov	r1, r9
 80111a8:	4640      	mov	r0, r8
 80111aa:	47d0      	blx	sl
 80111ac:	3001      	adds	r0, #1
 80111ae:	d0ab      	beq.n	8011108 <_printf_i+0x164>
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	079b      	lsls	r3, r3, #30
 80111b4:	d413      	bmi.n	80111de <_printf_i+0x23a>
 80111b6:	68e0      	ldr	r0, [r4, #12]
 80111b8:	9b03      	ldr	r3, [sp, #12]
 80111ba:	4298      	cmp	r0, r3
 80111bc:	bfb8      	it	lt
 80111be:	4618      	movlt	r0, r3
 80111c0:	e7a4      	b.n	801110c <_printf_i+0x168>
 80111c2:	2301      	movs	r3, #1
 80111c4:	4632      	mov	r2, r6
 80111c6:	4649      	mov	r1, r9
 80111c8:	4640      	mov	r0, r8
 80111ca:	47d0      	blx	sl
 80111cc:	3001      	adds	r0, #1
 80111ce:	d09b      	beq.n	8011108 <_printf_i+0x164>
 80111d0:	3501      	adds	r5, #1
 80111d2:	68e3      	ldr	r3, [r4, #12]
 80111d4:	9903      	ldr	r1, [sp, #12]
 80111d6:	1a5b      	subs	r3, r3, r1
 80111d8:	42ab      	cmp	r3, r5
 80111da:	dcf2      	bgt.n	80111c2 <_printf_i+0x21e>
 80111dc:	e7eb      	b.n	80111b6 <_printf_i+0x212>
 80111de:	2500      	movs	r5, #0
 80111e0:	f104 0619 	add.w	r6, r4, #25
 80111e4:	e7f5      	b.n	80111d2 <_printf_i+0x22e>
 80111e6:	bf00      	nop
 80111e8:	0805fa67 	.word	0x0805fa67
 80111ec:	0805fa78 	.word	0x0805fa78

080111f0 <_scanf_float>:
 80111f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f4:	b087      	sub	sp, #28
 80111f6:	4617      	mov	r7, r2
 80111f8:	9303      	str	r3, [sp, #12]
 80111fa:	688b      	ldr	r3, [r1, #8]
 80111fc:	1e5a      	subs	r2, r3, #1
 80111fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011202:	bf83      	ittte	hi
 8011204:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011208:	195b      	addhi	r3, r3, r5
 801120a:	9302      	strhi	r3, [sp, #8]
 801120c:	2300      	movls	r3, #0
 801120e:	bf86      	itte	hi
 8011210:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011214:	608b      	strhi	r3, [r1, #8]
 8011216:	9302      	strls	r3, [sp, #8]
 8011218:	680b      	ldr	r3, [r1, #0]
 801121a:	468b      	mov	fp, r1
 801121c:	2500      	movs	r5, #0
 801121e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011222:	f84b 3b1c 	str.w	r3, [fp], #28
 8011226:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801122a:	4680      	mov	r8, r0
 801122c:	460c      	mov	r4, r1
 801122e:	465e      	mov	r6, fp
 8011230:	46aa      	mov	sl, r5
 8011232:	46a9      	mov	r9, r5
 8011234:	9501      	str	r5, [sp, #4]
 8011236:	68a2      	ldr	r2, [r4, #8]
 8011238:	b152      	cbz	r2, 8011250 <_scanf_float+0x60>
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	2b4e      	cmp	r3, #78	; 0x4e
 8011240:	d864      	bhi.n	801130c <_scanf_float+0x11c>
 8011242:	2b40      	cmp	r3, #64	; 0x40
 8011244:	d83c      	bhi.n	80112c0 <_scanf_float+0xd0>
 8011246:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801124a:	b2c8      	uxtb	r0, r1
 801124c:	280e      	cmp	r0, #14
 801124e:	d93a      	bls.n	80112c6 <_scanf_float+0xd6>
 8011250:	f1b9 0f00 	cmp.w	r9, #0
 8011254:	d003      	beq.n	801125e <_scanf_float+0x6e>
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801125c:	6023      	str	r3, [r4, #0]
 801125e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011262:	f1ba 0f01 	cmp.w	sl, #1
 8011266:	f200 8113 	bhi.w	8011490 <_scanf_float+0x2a0>
 801126a:	455e      	cmp	r6, fp
 801126c:	f200 8105 	bhi.w	801147a <_scanf_float+0x28a>
 8011270:	2501      	movs	r5, #1
 8011272:	4628      	mov	r0, r5
 8011274:	b007      	add	sp, #28
 8011276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801127e:	2a0d      	cmp	r2, #13
 8011280:	d8e6      	bhi.n	8011250 <_scanf_float+0x60>
 8011282:	a101      	add	r1, pc, #4	; (adr r1, 8011288 <_scanf_float+0x98>)
 8011284:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011288:	080113c7 	.word	0x080113c7
 801128c:	08011251 	.word	0x08011251
 8011290:	08011251 	.word	0x08011251
 8011294:	08011251 	.word	0x08011251
 8011298:	08011427 	.word	0x08011427
 801129c:	080113ff 	.word	0x080113ff
 80112a0:	08011251 	.word	0x08011251
 80112a4:	08011251 	.word	0x08011251
 80112a8:	080113d5 	.word	0x080113d5
 80112ac:	08011251 	.word	0x08011251
 80112b0:	08011251 	.word	0x08011251
 80112b4:	08011251 	.word	0x08011251
 80112b8:	08011251 	.word	0x08011251
 80112bc:	0801138d 	.word	0x0801138d
 80112c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80112c4:	e7db      	b.n	801127e <_scanf_float+0x8e>
 80112c6:	290e      	cmp	r1, #14
 80112c8:	d8c2      	bhi.n	8011250 <_scanf_float+0x60>
 80112ca:	a001      	add	r0, pc, #4	; (adr r0, 80112d0 <_scanf_float+0xe0>)
 80112cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80112d0:	0801137f 	.word	0x0801137f
 80112d4:	08011251 	.word	0x08011251
 80112d8:	0801137f 	.word	0x0801137f
 80112dc:	08011413 	.word	0x08011413
 80112e0:	08011251 	.word	0x08011251
 80112e4:	0801132d 	.word	0x0801132d
 80112e8:	08011369 	.word	0x08011369
 80112ec:	08011369 	.word	0x08011369
 80112f0:	08011369 	.word	0x08011369
 80112f4:	08011369 	.word	0x08011369
 80112f8:	08011369 	.word	0x08011369
 80112fc:	08011369 	.word	0x08011369
 8011300:	08011369 	.word	0x08011369
 8011304:	08011369 	.word	0x08011369
 8011308:	08011369 	.word	0x08011369
 801130c:	2b6e      	cmp	r3, #110	; 0x6e
 801130e:	d809      	bhi.n	8011324 <_scanf_float+0x134>
 8011310:	2b60      	cmp	r3, #96	; 0x60
 8011312:	d8b2      	bhi.n	801127a <_scanf_float+0x8a>
 8011314:	2b54      	cmp	r3, #84	; 0x54
 8011316:	d077      	beq.n	8011408 <_scanf_float+0x218>
 8011318:	2b59      	cmp	r3, #89	; 0x59
 801131a:	d199      	bne.n	8011250 <_scanf_float+0x60>
 801131c:	2d07      	cmp	r5, #7
 801131e:	d197      	bne.n	8011250 <_scanf_float+0x60>
 8011320:	2508      	movs	r5, #8
 8011322:	e029      	b.n	8011378 <_scanf_float+0x188>
 8011324:	2b74      	cmp	r3, #116	; 0x74
 8011326:	d06f      	beq.n	8011408 <_scanf_float+0x218>
 8011328:	2b79      	cmp	r3, #121	; 0x79
 801132a:	e7f6      	b.n	801131a <_scanf_float+0x12a>
 801132c:	6821      	ldr	r1, [r4, #0]
 801132e:	05c8      	lsls	r0, r1, #23
 8011330:	d51a      	bpl.n	8011368 <_scanf_float+0x178>
 8011332:	9b02      	ldr	r3, [sp, #8]
 8011334:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011338:	6021      	str	r1, [r4, #0]
 801133a:	f109 0901 	add.w	r9, r9, #1
 801133e:	b11b      	cbz	r3, 8011348 <_scanf_float+0x158>
 8011340:	3b01      	subs	r3, #1
 8011342:	3201      	adds	r2, #1
 8011344:	9302      	str	r3, [sp, #8]
 8011346:	60a2      	str	r2, [r4, #8]
 8011348:	68a3      	ldr	r3, [r4, #8]
 801134a:	3b01      	subs	r3, #1
 801134c:	60a3      	str	r3, [r4, #8]
 801134e:	6923      	ldr	r3, [r4, #16]
 8011350:	3301      	adds	r3, #1
 8011352:	6123      	str	r3, [r4, #16]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	3b01      	subs	r3, #1
 8011358:	2b00      	cmp	r3, #0
 801135a:	607b      	str	r3, [r7, #4]
 801135c:	f340 8084 	ble.w	8011468 <_scanf_float+0x278>
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	3301      	adds	r3, #1
 8011364:	603b      	str	r3, [r7, #0]
 8011366:	e766      	b.n	8011236 <_scanf_float+0x46>
 8011368:	eb1a 0f05 	cmn.w	sl, r5
 801136c:	f47f af70 	bne.w	8011250 <_scanf_float+0x60>
 8011370:	6822      	ldr	r2, [r4, #0]
 8011372:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011376:	6022      	str	r2, [r4, #0]
 8011378:	f806 3b01 	strb.w	r3, [r6], #1
 801137c:	e7e4      	b.n	8011348 <_scanf_float+0x158>
 801137e:	6822      	ldr	r2, [r4, #0]
 8011380:	0610      	lsls	r0, r2, #24
 8011382:	f57f af65 	bpl.w	8011250 <_scanf_float+0x60>
 8011386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801138a:	e7f4      	b.n	8011376 <_scanf_float+0x186>
 801138c:	f1ba 0f00 	cmp.w	sl, #0
 8011390:	d10e      	bne.n	80113b0 <_scanf_float+0x1c0>
 8011392:	f1b9 0f00 	cmp.w	r9, #0
 8011396:	d10e      	bne.n	80113b6 <_scanf_float+0x1c6>
 8011398:	6822      	ldr	r2, [r4, #0]
 801139a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801139e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80113a2:	d108      	bne.n	80113b6 <_scanf_float+0x1c6>
 80113a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80113a8:	6022      	str	r2, [r4, #0]
 80113aa:	f04f 0a01 	mov.w	sl, #1
 80113ae:	e7e3      	b.n	8011378 <_scanf_float+0x188>
 80113b0:	f1ba 0f02 	cmp.w	sl, #2
 80113b4:	d055      	beq.n	8011462 <_scanf_float+0x272>
 80113b6:	2d01      	cmp	r5, #1
 80113b8:	d002      	beq.n	80113c0 <_scanf_float+0x1d0>
 80113ba:	2d04      	cmp	r5, #4
 80113bc:	f47f af48 	bne.w	8011250 <_scanf_float+0x60>
 80113c0:	3501      	adds	r5, #1
 80113c2:	b2ed      	uxtb	r5, r5
 80113c4:	e7d8      	b.n	8011378 <_scanf_float+0x188>
 80113c6:	f1ba 0f01 	cmp.w	sl, #1
 80113ca:	f47f af41 	bne.w	8011250 <_scanf_float+0x60>
 80113ce:	f04f 0a02 	mov.w	sl, #2
 80113d2:	e7d1      	b.n	8011378 <_scanf_float+0x188>
 80113d4:	b97d      	cbnz	r5, 80113f6 <_scanf_float+0x206>
 80113d6:	f1b9 0f00 	cmp.w	r9, #0
 80113da:	f47f af3c 	bne.w	8011256 <_scanf_float+0x66>
 80113de:	6822      	ldr	r2, [r4, #0]
 80113e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80113e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80113e8:	f47f af39 	bne.w	801125e <_scanf_float+0x6e>
 80113ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80113f0:	6022      	str	r2, [r4, #0]
 80113f2:	2501      	movs	r5, #1
 80113f4:	e7c0      	b.n	8011378 <_scanf_float+0x188>
 80113f6:	2d03      	cmp	r5, #3
 80113f8:	d0e2      	beq.n	80113c0 <_scanf_float+0x1d0>
 80113fa:	2d05      	cmp	r5, #5
 80113fc:	e7de      	b.n	80113bc <_scanf_float+0x1cc>
 80113fe:	2d02      	cmp	r5, #2
 8011400:	f47f af26 	bne.w	8011250 <_scanf_float+0x60>
 8011404:	2503      	movs	r5, #3
 8011406:	e7b7      	b.n	8011378 <_scanf_float+0x188>
 8011408:	2d06      	cmp	r5, #6
 801140a:	f47f af21 	bne.w	8011250 <_scanf_float+0x60>
 801140e:	2507      	movs	r5, #7
 8011410:	e7b2      	b.n	8011378 <_scanf_float+0x188>
 8011412:	6822      	ldr	r2, [r4, #0]
 8011414:	0591      	lsls	r1, r2, #22
 8011416:	f57f af1b 	bpl.w	8011250 <_scanf_float+0x60>
 801141a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801141e:	6022      	str	r2, [r4, #0]
 8011420:	f8cd 9004 	str.w	r9, [sp, #4]
 8011424:	e7a8      	b.n	8011378 <_scanf_float+0x188>
 8011426:	6822      	ldr	r2, [r4, #0]
 8011428:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801142c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011430:	d006      	beq.n	8011440 <_scanf_float+0x250>
 8011432:	0550      	lsls	r0, r2, #21
 8011434:	f57f af0c 	bpl.w	8011250 <_scanf_float+0x60>
 8011438:	f1b9 0f00 	cmp.w	r9, #0
 801143c:	f43f af0f 	beq.w	801125e <_scanf_float+0x6e>
 8011440:	0591      	lsls	r1, r2, #22
 8011442:	bf58      	it	pl
 8011444:	9901      	ldrpl	r1, [sp, #4]
 8011446:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801144a:	bf58      	it	pl
 801144c:	eba9 0101 	subpl.w	r1, r9, r1
 8011450:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011454:	bf58      	it	pl
 8011456:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801145a:	6022      	str	r2, [r4, #0]
 801145c:	f04f 0900 	mov.w	r9, #0
 8011460:	e78a      	b.n	8011378 <_scanf_float+0x188>
 8011462:	f04f 0a03 	mov.w	sl, #3
 8011466:	e787      	b.n	8011378 <_scanf_float+0x188>
 8011468:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801146c:	4639      	mov	r1, r7
 801146e:	4640      	mov	r0, r8
 8011470:	4798      	blx	r3
 8011472:	2800      	cmp	r0, #0
 8011474:	f43f aedf 	beq.w	8011236 <_scanf_float+0x46>
 8011478:	e6ea      	b.n	8011250 <_scanf_float+0x60>
 801147a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801147e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011482:	463a      	mov	r2, r7
 8011484:	4640      	mov	r0, r8
 8011486:	4798      	blx	r3
 8011488:	6923      	ldr	r3, [r4, #16]
 801148a:	3b01      	subs	r3, #1
 801148c:	6123      	str	r3, [r4, #16]
 801148e:	e6ec      	b.n	801126a <_scanf_float+0x7a>
 8011490:	1e6b      	subs	r3, r5, #1
 8011492:	2b06      	cmp	r3, #6
 8011494:	d825      	bhi.n	80114e2 <_scanf_float+0x2f2>
 8011496:	2d02      	cmp	r5, #2
 8011498:	d836      	bhi.n	8011508 <_scanf_float+0x318>
 801149a:	455e      	cmp	r6, fp
 801149c:	f67f aee8 	bls.w	8011270 <_scanf_float+0x80>
 80114a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114a8:	463a      	mov	r2, r7
 80114aa:	4640      	mov	r0, r8
 80114ac:	4798      	blx	r3
 80114ae:	6923      	ldr	r3, [r4, #16]
 80114b0:	3b01      	subs	r3, #1
 80114b2:	6123      	str	r3, [r4, #16]
 80114b4:	e7f1      	b.n	801149a <_scanf_float+0x2aa>
 80114b6:	9802      	ldr	r0, [sp, #8]
 80114b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80114c0:	9002      	str	r0, [sp, #8]
 80114c2:	463a      	mov	r2, r7
 80114c4:	4640      	mov	r0, r8
 80114c6:	4798      	blx	r3
 80114c8:	6923      	ldr	r3, [r4, #16]
 80114ca:	3b01      	subs	r3, #1
 80114cc:	6123      	str	r3, [r4, #16]
 80114ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80114d2:	fa5f fa8a 	uxtb.w	sl, sl
 80114d6:	f1ba 0f02 	cmp.w	sl, #2
 80114da:	d1ec      	bne.n	80114b6 <_scanf_float+0x2c6>
 80114dc:	3d03      	subs	r5, #3
 80114de:	b2ed      	uxtb	r5, r5
 80114e0:	1b76      	subs	r6, r6, r5
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	05da      	lsls	r2, r3, #23
 80114e6:	d52f      	bpl.n	8011548 <_scanf_float+0x358>
 80114e8:	055b      	lsls	r3, r3, #21
 80114ea:	d510      	bpl.n	801150e <_scanf_float+0x31e>
 80114ec:	455e      	cmp	r6, fp
 80114ee:	f67f aebf 	bls.w	8011270 <_scanf_float+0x80>
 80114f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114fa:	463a      	mov	r2, r7
 80114fc:	4640      	mov	r0, r8
 80114fe:	4798      	blx	r3
 8011500:	6923      	ldr	r3, [r4, #16]
 8011502:	3b01      	subs	r3, #1
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	e7f1      	b.n	80114ec <_scanf_float+0x2fc>
 8011508:	46aa      	mov	sl, r5
 801150a:	9602      	str	r6, [sp, #8]
 801150c:	e7df      	b.n	80114ce <_scanf_float+0x2de>
 801150e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011512:	6923      	ldr	r3, [r4, #16]
 8011514:	2965      	cmp	r1, #101	; 0x65
 8011516:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801151a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801151e:	6123      	str	r3, [r4, #16]
 8011520:	d00c      	beq.n	801153c <_scanf_float+0x34c>
 8011522:	2945      	cmp	r1, #69	; 0x45
 8011524:	d00a      	beq.n	801153c <_scanf_float+0x34c>
 8011526:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801152a:	463a      	mov	r2, r7
 801152c:	4640      	mov	r0, r8
 801152e:	4798      	blx	r3
 8011530:	6923      	ldr	r3, [r4, #16]
 8011532:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011536:	3b01      	subs	r3, #1
 8011538:	1eb5      	subs	r5, r6, #2
 801153a:	6123      	str	r3, [r4, #16]
 801153c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011540:	463a      	mov	r2, r7
 8011542:	4640      	mov	r0, r8
 8011544:	4798      	blx	r3
 8011546:	462e      	mov	r6, r5
 8011548:	6825      	ldr	r5, [r4, #0]
 801154a:	f015 0510 	ands.w	r5, r5, #16
 801154e:	d158      	bne.n	8011602 <_scanf_float+0x412>
 8011550:	7035      	strb	r5, [r6, #0]
 8011552:	6823      	ldr	r3, [r4, #0]
 8011554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801155c:	d11c      	bne.n	8011598 <_scanf_float+0x3a8>
 801155e:	9b01      	ldr	r3, [sp, #4]
 8011560:	454b      	cmp	r3, r9
 8011562:	eba3 0209 	sub.w	r2, r3, r9
 8011566:	d124      	bne.n	80115b2 <_scanf_float+0x3c2>
 8011568:	2200      	movs	r2, #0
 801156a:	4659      	mov	r1, fp
 801156c:	4640      	mov	r0, r8
 801156e:	f000 fead 	bl	80122cc <_strtod_r>
 8011572:	9b03      	ldr	r3, [sp, #12]
 8011574:	6821      	ldr	r1, [r4, #0]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f011 0f02 	tst.w	r1, #2
 801157c:	ec57 6b10 	vmov	r6, r7, d0
 8011580:	f103 0204 	add.w	r2, r3, #4
 8011584:	d020      	beq.n	80115c8 <_scanf_float+0x3d8>
 8011586:	9903      	ldr	r1, [sp, #12]
 8011588:	600a      	str	r2, [r1, #0]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	e9c3 6700 	strd	r6, r7, [r3]
 8011590:	68e3      	ldr	r3, [r4, #12]
 8011592:	3301      	adds	r3, #1
 8011594:	60e3      	str	r3, [r4, #12]
 8011596:	e66c      	b.n	8011272 <_scanf_float+0x82>
 8011598:	9b04      	ldr	r3, [sp, #16]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d0e4      	beq.n	8011568 <_scanf_float+0x378>
 801159e:	9905      	ldr	r1, [sp, #20]
 80115a0:	230a      	movs	r3, #10
 80115a2:	462a      	mov	r2, r5
 80115a4:	3101      	adds	r1, #1
 80115a6:	4640      	mov	r0, r8
 80115a8:	f000 ff1a 	bl	80123e0 <_strtol_r>
 80115ac:	9b04      	ldr	r3, [sp, #16]
 80115ae:	9e05      	ldr	r6, [sp, #20]
 80115b0:	1ac2      	subs	r2, r0, r3
 80115b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80115b6:	429e      	cmp	r6, r3
 80115b8:	bf28      	it	cs
 80115ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80115be:	4912      	ldr	r1, [pc, #72]	; (8011608 <_scanf_float+0x418>)
 80115c0:	4630      	mov	r0, r6
 80115c2:	f000 f83b 	bl	801163c <siprintf>
 80115c6:	e7cf      	b.n	8011568 <_scanf_float+0x378>
 80115c8:	f011 0f04 	tst.w	r1, #4
 80115cc:	9903      	ldr	r1, [sp, #12]
 80115ce:	600a      	str	r2, [r1, #0]
 80115d0:	d1db      	bne.n	801158a <_scanf_float+0x39a>
 80115d2:	f8d3 8000 	ldr.w	r8, [r3]
 80115d6:	ee10 2a10 	vmov	r2, s0
 80115da:	ee10 0a10 	vmov	r0, s0
 80115de:	463b      	mov	r3, r7
 80115e0:	4639      	mov	r1, r7
 80115e2:	f7ef fab3 	bl	8000b4c <__aeabi_dcmpun>
 80115e6:	b128      	cbz	r0, 80115f4 <_scanf_float+0x404>
 80115e8:	4808      	ldr	r0, [pc, #32]	; (801160c <_scanf_float+0x41c>)
 80115ea:	f000 f821 	bl	8011630 <nanf>
 80115ee:	ed88 0a00 	vstr	s0, [r8]
 80115f2:	e7cd      	b.n	8011590 <_scanf_float+0x3a0>
 80115f4:	4630      	mov	r0, r6
 80115f6:	4639      	mov	r1, r7
 80115f8:	f7ef fb06 	bl	8000c08 <__aeabi_d2f>
 80115fc:	f8c8 0000 	str.w	r0, [r8]
 8011600:	e7c6      	b.n	8011590 <_scanf_float+0x3a0>
 8011602:	2500      	movs	r5, #0
 8011604:	e635      	b.n	8011272 <_scanf_float+0x82>
 8011606:	bf00      	nop
 8011608:	0805fa89 	.word	0x0805fa89
 801160c:	0805fa3f 	.word	0x0805fa3f

08011610 <_sbrk_r>:
 8011610:	b538      	push	{r3, r4, r5, lr}
 8011612:	4d06      	ldr	r5, [pc, #24]	; (801162c <_sbrk_r+0x1c>)
 8011614:	2300      	movs	r3, #0
 8011616:	4604      	mov	r4, r0
 8011618:	4608      	mov	r0, r1
 801161a:	602b      	str	r3, [r5, #0]
 801161c:	f7f0 ffac 	bl	8002578 <_sbrk>
 8011620:	1c43      	adds	r3, r0, #1
 8011622:	d102      	bne.n	801162a <_sbrk_r+0x1a>
 8011624:	682b      	ldr	r3, [r5, #0]
 8011626:	b103      	cbz	r3, 801162a <_sbrk_r+0x1a>
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	bd38      	pop	{r3, r4, r5, pc}
 801162c:	20013d2c 	.word	0x20013d2c

08011630 <nanf>:
 8011630:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011638 <nanf+0x8>
 8011634:	4770      	bx	lr
 8011636:	bf00      	nop
 8011638:	7fc00000 	.word	0x7fc00000

0801163c <siprintf>:
 801163c:	b40e      	push	{r1, r2, r3}
 801163e:	b500      	push	{lr}
 8011640:	b09c      	sub	sp, #112	; 0x70
 8011642:	ab1d      	add	r3, sp, #116	; 0x74
 8011644:	9002      	str	r0, [sp, #8]
 8011646:	9006      	str	r0, [sp, #24]
 8011648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801164c:	4809      	ldr	r0, [pc, #36]	; (8011674 <siprintf+0x38>)
 801164e:	9107      	str	r1, [sp, #28]
 8011650:	9104      	str	r1, [sp, #16]
 8011652:	4909      	ldr	r1, [pc, #36]	; (8011678 <siprintf+0x3c>)
 8011654:	f853 2b04 	ldr.w	r2, [r3], #4
 8011658:	9105      	str	r1, [sp, #20]
 801165a:	6800      	ldr	r0, [r0, #0]
 801165c:	9301      	str	r3, [sp, #4]
 801165e:	a902      	add	r1, sp, #8
 8011660:	f003 f914 	bl	801488c <_svfiprintf_r>
 8011664:	9b02      	ldr	r3, [sp, #8]
 8011666:	2200      	movs	r2, #0
 8011668:	701a      	strb	r2, [r3, #0]
 801166a:	b01c      	add	sp, #112	; 0x70
 801166c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011670:	b003      	add	sp, #12
 8011672:	4770      	bx	lr
 8011674:	20000ee0 	.word	0x20000ee0
 8011678:	ffff0208 	.word	0xffff0208

0801167c <sulp>:
 801167c:	b570      	push	{r4, r5, r6, lr}
 801167e:	4604      	mov	r4, r0
 8011680:	460d      	mov	r5, r1
 8011682:	ec45 4b10 	vmov	d0, r4, r5
 8011686:	4616      	mov	r6, r2
 8011688:	f002 ff20 	bl	80144cc <__ulp>
 801168c:	ec51 0b10 	vmov	r0, r1, d0
 8011690:	b17e      	cbz	r6, 80116b2 <sulp+0x36>
 8011692:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011696:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801169a:	2b00      	cmp	r3, #0
 801169c:	dd09      	ble.n	80116b2 <sulp+0x36>
 801169e:	051b      	lsls	r3, r3, #20
 80116a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80116a4:	2400      	movs	r4, #0
 80116a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80116aa:	4622      	mov	r2, r4
 80116ac:	462b      	mov	r3, r5
 80116ae:	f7ee ffb3 	bl	8000618 <__aeabi_dmul>
 80116b2:	bd70      	pop	{r4, r5, r6, pc}
 80116b4:	0000      	movs	r0, r0
	...

080116b8 <_strtod_l>:
 80116b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116bc:	b0a3      	sub	sp, #140	; 0x8c
 80116be:	461f      	mov	r7, r3
 80116c0:	2300      	movs	r3, #0
 80116c2:	931e      	str	r3, [sp, #120]	; 0x78
 80116c4:	4ba4      	ldr	r3, [pc, #656]	; (8011958 <_strtod_l+0x2a0>)
 80116c6:	9219      	str	r2, [sp, #100]	; 0x64
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	9307      	str	r3, [sp, #28]
 80116cc:	4604      	mov	r4, r0
 80116ce:	4618      	mov	r0, r3
 80116d0:	4688      	mov	r8, r1
 80116d2:	f7ee fd87 	bl	80001e4 <strlen>
 80116d6:	f04f 0a00 	mov.w	sl, #0
 80116da:	4605      	mov	r5, r0
 80116dc:	f04f 0b00 	mov.w	fp, #0
 80116e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80116e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80116e6:	781a      	ldrb	r2, [r3, #0]
 80116e8:	2a2b      	cmp	r2, #43	; 0x2b
 80116ea:	d04c      	beq.n	8011786 <_strtod_l+0xce>
 80116ec:	d839      	bhi.n	8011762 <_strtod_l+0xaa>
 80116ee:	2a0d      	cmp	r2, #13
 80116f0:	d832      	bhi.n	8011758 <_strtod_l+0xa0>
 80116f2:	2a08      	cmp	r2, #8
 80116f4:	d832      	bhi.n	801175c <_strtod_l+0xa4>
 80116f6:	2a00      	cmp	r2, #0
 80116f8:	d03c      	beq.n	8011774 <_strtod_l+0xbc>
 80116fa:	2300      	movs	r3, #0
 80116fc:	930e      	str	r3, [sp, #56]	; 0x38
 80116fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011700:	7833      	ldrb	r3, [r6, #0]
 8011702:	2b30      	cmp	r3, #48	; 0x30
 8011704:	f040 80b4 	bne.w	8011870 <_strtod_l+0x1b8>
 8011708:	7873      	ldrb	r3, [r6, #1]
 801170a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801170e:	2b58      	cmp	r3, #88	; 0x58
 8011710:	d16c      	bne.n	80117ec <_strtod_l+0x134>
 8011712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011714:	9301      	str	r3, [sp, #4]
 8011716:	ab1e      	add	r3, sp, #120	; 0x78
 8011718:	9702      	str	r7, [sp, #8]
 801171a:	9300      	str	r3, [sp, #0]
 801171c:	4a8f      	ldr	r2, [pc, #572]	; (801195c <_strtod_l+0x2a4>)
 801171e:	ab1f      	add	r3, sp, #124	; 0x7c
 8011720:	a91d      	add	r1, sp, #116	; 0x74
 8011722:	4620      	mov	r0, r4
 8011724:	f001 ffba 	bl	801369c <__gethex>
 8011728:	f010 0707 	ands.w	r7, r0, #7
 801172c:	4605      	mov	r5, r0
 801172e:	d005      	beq.n	801173c <_strtod_l+0x84>
 8011730:	2f06      	cmp	r7, #6
 8011732:	d12a      	bne.n	801178a <_strtod_l+0xd2>
 8011734:	3601      	adds	r6, #1
 8011736:	2300      	movs	r3, #0
 8011738:	961d      	str	r6, [sp, #116]	; 0x74
 801173a:	930e      	str	r3, [sp, #56]	; 0x38
 801173c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801173e:	2b00      	cmp	r3, #0
 8011740:	f040 8596 	bne.w	8012270 <_strtod_l+0xbb8>
 8011744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011746:	b1db      	cbz	r3, 8011780 <_strtod_l+0xc8>
 8011748:	4652      	mov	r2, sl
 801174a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801174e:	ec43 2b10 	vmov	d0, r2, r3
 8011752:	b023      	add	sp, #140	; 0x8c
 8011754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011758:	2a20      	cmp	r2, #32
 801175a:	d1ce      	bne.n	80116fa <_strtod_l+0x42>
 801175c:	3301      	adds	r3, #1
 801175e:	931d      	str	r3, [sp, #116]	; 0x74
 8011760:	e7c0      	b.n	80116e4 <_strtod_l+0x2c>
 8011762:	2a2d      	cmp	r2, #45	; 0x2d
 8011764:	d1c9      	bne.n	80116fa <_strtod_l+0x42>
 8011766:	2201      	movs	r2, #1
 8011768:	920e      	str	r2, [sp, #56]	; 0x38
 801176a:	1c5a      	adds	r2, r3, #1
 801176c:	921d      	str	r2, [sp, #116]	; 0x74
 801176e:	785b      	ldrb	r3, [r3, #1]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d1c4      	bne.n	80116fe <_strtod_l+0x46>
 8011774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011776:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801177a:	2b00      	cmp	r3, #0
 801177c:	f040 8576 	bne.w	801226c <_strtod_l+0xbb4>
 8011780:	4652      	mov	r2, sl
 8011782:	465b      	mov	r3, fp
 8011784:	e7e3      	b.n	801174e <_strtod_l+0x96>
 8011786:	2200      	movs	r2, #0
 8011788:	e7ee      	b.n	8011768 <_strtod_l+0xb0>
 801178a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801178c:	b13a      	cbz	r2, 801179e <_strtod_l+0xe6>
 801178e:	2135      	movs	r1, #53	; 0x35
 8011790:	a820      	add	r0, sp, #128	; 0x80
 8011792:	f002 ffa6 	bl	80146e2 <__copybits>
 8011796:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011798:	4620      	mov	r0, r4
 801179a:	f002 fb6b 	bl	8013e74 <_Bfree>
 801179e:	3f01      	subs	r7, #1
 80117a0:	2f05      	cmp	r7, #5
 80117a2:	d807      	bhi.n	80117b4 <_strtod_l+0xfc>
 80117a4:	e8df f007 	tbb	[pc, r7]
 80117a8:	1d180b0e 	.word	0x1d180b0e
 80117ac:	030e      	.short	0x030e
 80117ae:	f04f 0b00 	mov.w	fp, #0
 80117b2:	46da      	mov	sl, fp
 80117b4:	0728      	lsls	r0, r5, #28
 80117b6:	d5c1      	bpl.n	801173c <_strtod_l+0x84>
 80117b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80117bc:	e7be      	b.n	801173c <_strtod_l+0x84>
 80117be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80117c2:	e7f7      	b.n	80117b4 <_strtod_l+0xfc>
 80117c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80117c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80117ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80117ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80117d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80117d6:	e7ed      	b.n	80117b4 <_strtod_l+0xfc>
 80117d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011960 <_strtod_l+0x2a8>
 80117dc:	f04f 0a00 	mov.w	sl, #0
 80117e0:	e7e8      	b.n	80117b4 <_strtod_l+0xfc>
 80117e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80117e6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80117ea:	e7e3      	b.n	80117b4 <_strtod_l+0xfc>
 80117ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80117ee:	1c5a      	adds	r2, r3, #1
 80117f0:	921d      	str	r2, [sp, #116]	; 0x74
 80117f2:	785b      	ldrb	r3, [r3, #1]
 80117f4:	2b30      	cmp	r3, #48	; 0x30
 80117f6:	d0f9      	beq.n	80117ec <_strtod_l+0x134>
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d09f      	beq.n	801173c <_strtod_l+0x84>
 80117fc:	2301      	movs	r3, #1
 80117fe:	f04f 0900 	mov.w	r9, #0
 8011802:	9304      	str	r3, [sp, #16]
 8011804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011806:	930a      	str	r3, [sp, #40]	; 0x28
 8011808:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801180c:	464f      	mov	r7, r9
 801180e:	220a      	movs	r2, #10
 8011810:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011812:	7806      	ldrb	r6, [r0, #0]
 8011814:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011818:	b2d9      	uxtb	r1, r3
 801181a:	2909      	cmp	r1, #9
 801181c:	d92a      	bls.n	8011874 <_strtod_l+0x1bc>
 801181e:	9907      	ldr	r1, [sp, #28]
 8011820:	462a      	mov	r2, r5
 8011822:	f003 f9c4 	bl	8014bae <strncmp>
 8011826:	b398      	cbz	r0, 8011890 <_strtod_l+0x1d8>
 8011828:	2000      	movs	r0, #0
 801182a:	4633      	mov	r3, r6
 801182c:	463d      	mov	r5, r7
 801182e:	9007      	str	r0, [sp, #28]
 8011830:	4602      	mov	r2, r0
 8011832:	2b65      	cmp	r3, #101	; 0x65
 8011834:	d001      	beq.n	801183a <_strtod_l+0x182>
 8011836:	2b45      	cmp	r3, #69	; 0x45
 8011838:	d118      	bne.n	801186c <_strtod_l+0x1b4>
 801183a:	b91d      	cbnz	r5, 8011844 <_strtod_l+0x18c>
 801183c:	9b04      	ldr	r3, [sp, #16]
 801183e:	4303      	orrs	r3, r0
 8011840:	d098      	beq.n	8011774 <_strtod_l+0xbc>
 8011842:	2500      	movs	r5, #0
 8011844:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011848:	f108 0301 	add.w	r3, r8, #1
 801184c:	931d      	str	r3, [sp, #116]	; 0x74
 801184e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011852:	2b2b      	cmp	r3, #43	; 0x2b
 8011854:	d075      	beq.n	8011942 <_strtod_l+0x28a>
 8011856:	2b2d      	cmp	r3, #45	; 0x2d
 8011858:	d07b      	beq.n	8011952 <_strtod_l+0x29a>
 801185a:	f04f 0c00 	mov.w	ip, #0
 801185e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011862:	2909      	cmp	r1, #9
 8011864:	f240 8082 	bls.w	801196c <_strtod_l+0x2b4>
 8011868:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801186c:	2600      	movs	r6, #0
 801186e:	e09d      	b.n	80119ac <_strtod_l+0x2f4>
 8011870:	2300      	movs	r3, #0
 8011872:	e7c4      	b.n	80117fe <_strtod_l+0x146>
 8011874:	2f08      	cmp	r7, #8
 8011876:	bfd8      	it	le
 8011878:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801187a:	f100 0001 	add.w	r0, r0, #1
 801187e:	bfda      	itte	le
 8011880:	fb02 3301 	mlale	r3, r2, r1, r3
 8011884:	9309      	strle	r3, [sp, #36]	; 0x24
 8011886:	fb02 3909 	mlagt	r9, r2, r9, r3
 801188a:	3701      	adds	r7, #1
 801188c:	901d      	str	r0, [sp, #116]	; 0x74
 801188e:	e7bf      	b.n	8011810 <_strtod_l+0x158>
 8011890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011892:	195a      	adds	r2, r3, r5
 8011894:	921d      	str	r2, [sp, #116]	; 0x74
 8011896:	5d5b      	ldrb	r3, [r3, r5]
 8011898:	2f00      	cmp	r7, #0
 801189a:	d037      	beq.n	801190c <_strtod_l+0x254>
 801189c:	9007      	str	r0, [sp, #28]
 801189e:	463d      	mov	r5, r7
 80118a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80118a4:	2a09      	cmp	r2, #9
 80118a6:	d912      	bls.n	80118ce <_strtod_l+0x216>
 80118a8:	2201      	movs	r2, #1
 80118aa:	e7c2      	b.n	8011832 <_strtod_l+0x17a>
 80118ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118ae:	1c5a      	adds	r2, r3, #1
 80118b0:	921d      	str	r2, [sp, #116]	; 0x74
 80118b2:	785b      	ldrb	r3, [r3, #1]
 80118b4:	3001      	adds	r0, #1
 80118b6:	2b30      	cmp	r3, #48	; 0x30
 80118b8:	d0f8      	beq.n	80118ac <_strtod_l+0x1f4>
 80118ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80118be:	2a08      	cmp	r2, #8
 80118c0:	f200 84db 	bhi.w	801227a <_strtod_l+0xbc2>
 80118c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80118c6:	9007      	str	r0, [sp, #28]
 80118c8:	2000      	movs	r0, #0
 80118ca:	920a      	str	r2, [sp, #40]	; 0x28
 80118cc:	4605      	mov	r5, r0
 80118ce:	3b30      	subs	r3, #48	; 0x30
 80118d0:	f100 0201 	add.w	r2, r0, #1
 80118d4:	d014      	beq.n	8011900 <_strtod_l+0x248>
 80118d6:	9907      	ldr	r1, [sp, #28]
 80118d8:	4411      	add	r1, r2
 80118da:	9107      	str	r1, [sp, #28]
 80118dc:	462a      	mov	r2, r5
 80118de:	eb00 0e05 	add.w	lr, r0, r5
 80118e2:	210a      	movs	r1, #10
 80118e4:	4572      	cmp	r2, lr
 80118e6:	d113      	bne.n	8011910 <_strtod_l+0x258>
 80118e8:	182a      	adds	r2, r5, r0
 80118ea:	2a08      	cmp	r2, #8
 80118ec:	f105 0501 	add.w	r5, r5, #1
 80118f0:	4405      	add	r5, r0
 80118f2:	dc1c      	bgt.n	801192e <_strtod_l+0x276>
 80118f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118f6:	220a      	movs	r2, #10
 80118f8:	fb02 3301 	mla	r3, r2, r1, r3
 80118fc:	9309      	str	r3, [sp, #36]	; 0x24
 80118fe:	2200      	movs	r2, #0
 8011900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011902:	1c59      	adds	r1, r3, #1
 8011904:	911d      	str	r1, [sp, #116]	; 0x74
 8011906:	785b      	ldrb	r3, [r3, #1]
 8011908:	4610      	mov	r0, r2
 801190a:	e7c9      	b.n	80118a0 <_strtod_l+0x1e8>
 801190c:	4638      	mov	r0, r7
 801190e:	e7d2      	b.n	80118b6 <_strtod_l+0x1fe>
 8011910:	2a08      	cmp	r2, #8
 8011912:	dc04      	bgt.n	801191e <_strtod_l+0x266>
 8011914:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011916:	434e      	muls	r6, r1
 8011918:	9609      	str	r6, [sp, #36]	; 0x24
 801191a:	3201      	adds	r2, #1
 801191c:	e7e2      	b.n	80118e4 <_strtod_l+0x22c>
 801191e:	f102 0c01 	add.w	ip, r2, #1
 8011922:	f1bc 0f10 	cmp.w	ip, #16
 8011926:	bfd8      	it	le
 8011928:	fb01 f909 	mulle.w	r9, r1, r9
 801192c:	e7f5      	b.n	801191a <_strtod_l+0x262>
 801192e:	2d10      	cmp	r5, #16
 8011930:	bfdc      	itt	le
 8011932:	220a      	movle	r2, #10
 8011934:	fb02 3909 	mlale	r9, r2, r9, r3
 8011938:	e7e1      	b.n	80118fe <_strtod_l+0x246>
 801193a:	2300      	movs	r3, #0
 801193c:	9307      	str	r3, [sp, #28]
 801193e:	2201      	movs	r2, #1
 8011940:	e77c      	b.n	801183c <_strtod_l+0x184>
 8011942:	f04f 0c00 	mov.w	ip, #0
 8011946:	f108 0302 	add.w	r3, r8, #2
 801194a:	931d      	str	r3, [sp, #116]	; 0x74
 801194c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011950:	e785      	b.n	801185e <_strtod_l+0x1a6>
 8011952:	f04f 0c01 	mov.w	ip, #1
 8011956:	e7f6      	b.n	8011946 <_strtod_l+0x28e>
 8011958:	0805fd44 	.word	0x0805fd44
 801195c:	0805fa90 	.word	0x0805fa90
 8011960:	7ff00000 	.word	0x7ff00000
 8011964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011966:	1c59      	adds	r1, r3, #1
 8011968:	911d      	str	r1, [sp, #116]	; 0x74
 801196a:	785b      	ldrb	r3, [r3, #1]
 801196c:	2b30      	cmp	r3, #48	; 0x30
 801196e:	d0f9      	beq.n	8011964 <_strtod_l+0x2ac>
 8011970:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011974:	2908      	cmp	r1, #8
 8011976:	f63f af79 	bhi.w	801186c <_strtod_l+0x1b4>
 801197a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801197e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011980:	9308      	str	r3, [sp, #32]
 8011982:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011984:	1c59      	adds	r1, r3, #1
 8011986:	911d      	str	r1, [sp, #116]	; 0x74
 8011988:	785b      	ldrb	r3, [r3, #1]
 801198a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801198e:	2e09      	cmp	r6, #9
 8011990:	d937      	bls.n	8011a02 <_strtod_l+0x34a>
 8011992:	9e08      	ldr	r6, [sp, #32]
 8011994:	1b89      	subs	r1, r1, r6
 8011996:	2908      	cmp	r1, #8
 8011998:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801199c:	dc02      	bgt.n	80119a4 <_strtod_l+0x2ec>
 801199e:	4576      	cmp	r6, lr
 80119a0:	bfa8      	it	ge
 80119a2:	4676      	movge	r6, lr
 80119a4:	f1bc 0f00 	cmp.w	ip, #0
 80119a8:	d000      	beq.n	80119ac <_strtod_l+0x2f4>
 80119aa:	4276      	negs	r6, r6
 80119ac:	2d00      	cmp	r5, #0
 80119ae:	d14f      	bne.n	8011a50 <_strtod_l+0x398>
 80119b0:	9904      	ldr	r1, [sp, #16]
 80119b2:	4301      	orrs	r1, r0
 80119b4:	f47f aec2 	bne.w	801173c <_strtod_l+0x84>
 80119b8:	2a00      	cmp	r2, #0
 80119ba:	f47f aedb 	bne.w	8011774 <_strtod_l+0xbc>
 80119be:	2b69      	cmp	r3, #105	; 0x69
 80119c0:	d027      	beq.n	8011a12 <_strtod_l+0x35a>
 80119c2:	dc24      	bgt.n	8011a0e <_strtod_l+0x356>
 80119c4:	2b49      	cmp	r3, #73	; 0x49
 80119c6:	d024      	beq.n	8011a12 <_strtod_l+0x35a>
 80119c8:	2b4e      	cmp	r3, #78	; 0x4e
 80119ca:	f47f aed3 	bne.w	8011774 <_strtod_l+0xbc>
 80119ce:	499e      	ldr	r1, [pc, #632]	; (8011c48 <_strtod_l+0x590>)
 80119d0:	a81d      	add	r0, sp, #116	; 0x74
 80119d2:	f002 f8bb 	bl	8013b4c <__match>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	f43f aecc 	beq.w	8011774 <_strtod_l+0xbc>
 80119dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	2b28      	cmp	r3, #40	; 0x28
 80119e2:	d12d      	bne.n	8011a40 <_strtod_l+0x388>
 80119e4:	4999      	ldr	r1, [pc, #612]	; (8011c4c <_strtod_l+0x594>)
 80119e6:	aa20      	add	r2, sp, #128	; 0x80
 80119e8:	a81d      	add	r0, sp, #116	; 0x74
 80119ea:	f002 f8c3 	bl	8013b74 <__hexnan>
 80119ee:	2805      	cmp	r0, #5
 80119f0:	d126      	bne.n	8011a40 <_strtod_l+0x388>
 80119f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80119f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80119f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80119fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011a00:	e69c      	b.n	801173c <_strtod_l+0x84>
 8011a02:	210a      	movs	r1, #10
 8011a04:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011a08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011a0c:	e7b9      	b.n	8011982 <_strtod_l+0x2ca>
 8011a0e:	2b6e      	cmp	r3, #110	; 0x6e
 8011a10:	e7db      	b.n	80119ca <_strtod_l+0x312>
 8011a12:	498f      	ldr	r1, [pc, #572]	; (8011c50 <_strtod_l+0x598>)
 8011a14:	a81d      	add	r0, sp, #116	; 0x74
 8011a16:	f002 f899 	bl	8013b4c <__match>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	f43f aeaa 	beq.w	8011774 <_strtod_l+0xbc>
 8011a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a22:	498c      	ldr	r1, [pc, #560]	; (8011c54 <_strtod_l+0x59c>)
 8011a24:	3b01      	subs	r3, #1
 8011a26:	a81d      	add	r0, sp, #116	; 0x74
 8011a28:	931d      	str	r3, [sp, #116]	; 0x74
 8011a2a:	f002 f88f 	bl	8013b4c <__match>
 8011a2e:	b910      	cbnz	r0, 8011a36 <_strtod_l+0x37e>
 8011a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a32:	3301      	adds	r3, #1
 8011a34:	931d      	str	r3, [sp, #116]	; 0x74
 8011a36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011c64 <_strtod_l+0x5ac>
 8011a3a:	f04f 0a00 	mov.w	sl, #0
 8011a3e:	e67d      	b.n	801173c <_strtod_l+0x84>
 8011a40:	4885      	ldr	r0, [pc, #532]	; (8011c58 <_strtod_l+0x5a0>)
 8011a42:	f003 f825 	bl	8014a90 <nan>
 8011a46:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011a4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011a4e:	e675      	b.n	801173c <_strtod_l+0x84>
 8011a50:	9b07      	ldr	r3, [sp, #28]
 8011a52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a54:	1af3      	subs	r3, r6, r3
 8011a56:	2f00      	cmp	r7, #0
 8011a58:	bf08      	it	eq
 8011a5a:	462f      	moveq	r7, r5
 8011a5c:	2d10      	cmp	r5, #16
 8011a5e:	9308      	str	r3, [sp, #32]
 8011a60:	46a8      	mov	r8, r5
 8011a62:	bfa8      	it	ge
 8011a64:	f04f 0810 	movge.w	r8, #16
 8011a68:	f7ee fd5c 	bl	8000524 <__aeabi_ui2d>
 8011a6c:	2d09      	cmp	r5, #9
 8011a6e:	4682      	mov	sl, r0
 8011a70:	468b      	mov	fp, r1
 8011a72:	dd13      	ble.n	8011a9c <_strtod_l+0x3e4>
 8011a74:	4b79      	ldr	r3, [pc, #484]	; (8011c5c <_strtod_l+0x5a4>)
 8011a76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011a7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011a7e:	f7ee fdcb 	bl	8000618 <__aeabi_dmul>
 8011a82:	4682      	mov	sl, r0
 8011a84:	4648      	mov	r0, r9
 8011a86:	468b      	mov	fp, r1
 8011a88:	f7ee fd4c 	bl	8000524 <__aeabi_ui2d>
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	460b      	mov	r3, r1
 8011a90:	4650      	mov	r0, sl
 8011a92:	4659      	mov	r1, fp
 8011a94:	f7ee fc0a 	bl	80002ac <__adddf3>
 8011a98:	4682      	mov	sl, r0
 8011a9a:	468b      	mov	fp, r1
 8011a9c:	2d0f      	cmp	r5, #15
 8011a9e:	dc38      	bgt.n	8011b12 <_strtod_l+0x45a>
 8011aa0:	9b08      	ldr	r3, [sp, #32]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	f43f ae4a 	beq.w	801173c <_strtod_l+0x84>
 8011aa8:	dd24      	ble.n	8011af4 <_strtod_l+0x43c>
 8011aaa:	2b16      	cmp	r3, #22
 8011aac:	dc0b      	bgt.n	8011ac6 <_strtod_l+0x40e>
 8011aae:	4d6b      	ldr	r5, [pc, #428]	; (8011c5c <_strtod_l+0x5a4>)
 8011ab0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011ab4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011ab8:	4652      	mov	r2, sl
 8011aba:	465b      	mov	r3, fp
 8011abc:	f7ee fdac 	bl	8000618 <__aeabi_dmul>
 8011ac0:	4682      	mov	sl, r0
 8011ac2:	468b      	mov	fp, r1
 8011ac4:	e63a      	b.n	801173c <_strtod_l+0x84>
 8011ac6:	9a08      	ldr	r2, [sp, #32]
 8011ac8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011acc:	4293      	cmp	r3, r2
 8011ace:	db20      	blt.n	8011b12 <_strtod_l+0x45a>
 8011ad0:	4c62      	ldr	r4, [pc, #392]	; (8011c5c <_strtod_l+0x5a4>)
 8011ad2:	f1c5 050f 	rsb	r5, r5, #15
 8011ad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011ada:	4652      	mov	r2, sl
 8011adc:	465b      	mov	r3, fp
 8011ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ae2:	f7ee fd99 	bl	8000618 <__aeabi_dmul>
 8011ae6:	9b08      	ldr	r3, [sp, #32]
 8011ae8:	1b5d      	subs	r5, r3, r5
 8011aea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011aee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011af2:	e7e3      	b.n	8011abc <_strtod_l+0x404>
 8011af4:	9b08      	ldr	r3, [sp, #32]
 8011af6:	3316      	adds	r3, #22
 8011af8:	db0b      	blt.n	8011b12 <_strtod_l+0x45a>
 8011afa:	9b07      	ldr	r3, [sp, #28]
 8011afc:	4a57      	ldr	r2, [pc, #348]	; (8011c5c <_strtod_l+0x5a4>)
 8011afe:	1b9e      	subs	r6, r3, r6
 8011b00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011b04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011b08:	4650      	mov	r0, sl
 8011b0a:	4659      	mov	r1, fp
 8011b0c:	f7ee feae 	bl	800086c <__aeabi_ddiv>
 8011b10:	e7d6      	b.n	8011ac0 <_strtod_l+0x408>
 8011b12:	9b08      	ldr	r3, [sp, #32]
 8011b14:	eba5 0808 	sub.w	r8, r5, r8
 8011b18:	4498      	add	r8, r3
 8011b1a:	f1b8 0f00 	cmp.w	r8, #0
 8011b1e:	dd71      	ble.n	8011c04 <_strtod_l+0x54c>
 8011b20:	f018 030f 	ands.w	r3, r8, #15
 8011b24:	d00a      	beq.n	8011b3c <_strtod_l+0x484>
 8011b26:	494d      	ldr	r1, [pc, #308]	; (8011c5c <_strtod_l+0x5a4>)
 8011b28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b2c:	4652      	mov	r2, sl
 8011b2e:	465b      	mov	r3, fp
 8011b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b34:	f7ee fd70 	bl	8000618 <__aeabi_dmul>
 8011b38:	4682      	mov	sl, r0
 8011b3a:	468b      	mov	fp, r1
 8011b3c:	f038 080f 	bics.w	r8, r8, #15
 8011b40:	d04d      	beq.n	8011bde <_strtod_l+0x526>
 8011b42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011b46:	dd22      	ble.n	8011b8e <_strtod_l+0x4d6>
 8011b48:	2500      	movs	r5, #0
 8011b4a:	462e      	mov	r6, r5
 8011b4c:	9509      	str	r5, [sp, #36]	; 0x24
 8011b4e:	9507      	str	r5, [sp, #28]
 8011b50:	2322      	movs	r3, #34	; 0x22
 8011b52:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011c64 <_strtod_l+0x5ac>
 8011b56:	6023      	str	r3, [r4, #0]
 8011b58:	f04f 0a00 	mov.w	sl, #0
 8011b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f43f adec 	beq.w	801173c <_strtod_l+0x84>
 8011b64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011b66:	4620      	mov	r0, r4
 8011b68:	f002 f984 	bl	8013e74 <_Bfree>
 8011b6c:	9907      	ldr	r1, [sp, #28]
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f002 f980 	bl	8013e74 <_Bfree>
 8011b74:	4631      	mov	r1, r6
 8011b76:	4620      	mov	r0, r4
 8011b78:	f002 f97c 	bl	8013e74 <_Bfree>
 8011b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f002 f978 	bl	8013e74 <_Bfree>
 8011b84:	4629      	mov	r1, r5
 8011b86:	4620      	mov	r0, r4
 8011b88:	f002 f974 	bl	8013e74 <_Bfree>
 8011b8c:	e5d6      	b.n	801173c <_strtod_l+0x84>
 8011b8e:	2300      	movs	r3, #0
 8011b90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011b94:	4650      	mov	r0, sl
 8011b96:	4659      	mov	r1, fp
 8011b98:	4699      	mov	r9, r3
 8011b9a:	f1b8 0f01 	cmp.w	r8, #1
 8011b9e:	dc21      	bgt.n	8011be4 <_strtod_l+0x52c>
 8011ba0:	b10b      	cbz	r3, 8011ba6 <_strtod_l+0x4ee>
 8011ba2:	4682      	mov	sl, r0
 8011ba4:	468b      	mov	fp, r1
 8011ba6:	4b2e      	ldr	r3, [pc, #184]	; (8011c60 <_strtod_l+0x5a8>)
 8011ba8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011bac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011bb0:	4652      	mov	r2, sl
 8011bb2:	465b      	mov	r3, fp
 8011bb4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011bb8:	f7ee fd2e 	bl	8000618 <__aeabi_dmul>
 8011bbc:	4b29      	ldr	r3, [pc, #164]	; (8011c64 <_strtod_l+0x5ac>)
 8011bbe:	460a      	mov	r2, r1
 8011bc0:	400b      	ands	r3, r1
 8011bc2:	4929      	ldr	r1, [pc, #164]	; (8011c68 <_strtod_l+0x5b0>)
 8011bc4:	428b      	cmp	r3, r1
 8011bc6:	4682      	mov	sl, r0
 8011bc8:	d8be      	bhi.n	8011b48 <_strtod_l+0x490>
 8011bca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011bce:	428b      	cmp	r3, r1
 8011bd0:	bf86      	itte	hi
 8011bd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011c6c <_strtod_l+0x5b4>
 8011bd6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8011bda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011bde:	2300      	movs	r3, #0
 8011be0:	9304      	str	r3, [sp, #16]
 8011be2:	e081      	b.n	8011ce8 <_strtod_l+0x630>
 8011be4:	f018 0f01 	tst.w	r8, #1
 8011be8:	d007      	beq.n	8011bfa <_strtod_l+0x542>
 8011bea:	4b1d      	ldr	r3, [pc, #116]	; (8011c60 <_strtod_l+0x5a8>)
 8011bec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf4:	f7ee fd10 	bl	8000618 <__aeabi_dmul>
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	f109 0901 	add.w	r9, r9, #1
 8011bfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011c02:	e7ca      	b.n	8011b9a <_strtod_l+0x4e2>
 8011c04:	d0eb      	beq.n	8011bde <_strtod_l+0x526>
 8011c06:	f1c8 0800 	rsb	r8, r8, #0
 8011c0a:	f018 020f 	ands.w	r2, r8, #15
 8011c0e:	d00a      	beq.n	8011c26 <_strtod_l+0x56e>
 8011c10:	4b12      	ldr	r3, [pc, #72]	; (8011c5c <_strtod_l+0x5a4>)
 8011c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c16:	4650      	mov	r0, sl
 8011c18:	4659      	mov	r1, fp
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	f7ee fe25 	bl	800086c <__aeabi_ddiv>
 8011c22:	4682      	mov	sl, r0
 8011c24:	468b      	mov	fp, r1
 8011c26:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011c2a:	d0d8      	beq.n	8011bde <_strtod_l+0x526>
 8011c2c:	f1b8 0f1f 	cmp.w	r8, #31
 8011c30:	dd1e      	ble.n	8011c70 <_strtod_l+0x5b8>
 8011c32:	2500      	movs	r5, #0
 8011c34:	462e      	mov	r6, r5
 8011c36:	9509      	str	r5, [sp, #36]	; 0x24
 8011c38:	9507      	str	r5, [sp, #28]
 8011c3a:	2322      	movs	r3, #34	; 0x22
 8011c3c:	f04f 0a00 	mov.w	sl, #0
 8011c40:	f04f 0b00 	mov.w	fp, #0
 8011c44:	6023      	str	r3, [r4, #0]
 8011c46:	e789      	b.n	8011b5c <_strtod_l+0x4a4>
 8011c48:	0805fa62 	.word	0x0805fa62
 8011c4c:	0805faa4 	.word	0x0805faa4
 8011c50:	0805fa5a 	.word	0x0805fa5a
 8011c54:	0805fbe4 	.word	0x0805fbe4
 8011c58:	0805fa3f 	.word	0x0805fa3f
 8011c5c:	0805fde0 	.word	0x0805fde0
 8011c60:	0805fdb8 	.word	0x0805fdb8
 8011c64:	7ff00000 	.word	0x7ff00000
 8011c68:	7ca00000 	.word	0x7ca00000
 8011c6c:	7fefffff 	.word	0x7fefffff
 8011c70:	f018 0310 	ands.w	r3, r8, #16
 8011c74:	bf18      	it	ne
 8011c76:	236a      	movne	r3, #106	; 0x6a
 8011c78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012030 <_strtod_l+0x978>
 8011c7c:	9304      	str	r3, [sp, #16]
 8011c7e:	4650      	mov	r0, sl
 8011c80:	4659      	mov	r1, fp
 8011c82:	2300      	movs	r3, #0
 8011c84:	f018 0f01 	tst.w	r8, #1
 8011c88:	d004      	beq.n	8011c94 <_strtod_l+0x5dc>
 8011c8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011c8e:	f7ee fcc3 	bl	8000618 <__aeabi_dmul>
 8011c92:	2301      	movs	r3, #1
 8011c94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011c98:	f109 0908 	add.w	r9, r9, #8
 8011c9c:	d1f2      	bne.n	8011c84 <_strtod_l+0x5cc>
 8011c9e:	b10b      	cbz	r3, 8011ca4 <_strtod_l+0x5ec>
 8011ca0:	4682      	mov	sl, r0
 8011ca2:	468b      	mov	fp, r1
 8011ca4:	9b04      	ldr	r3, [sp, #16]
 8011ca6:	b1bb      	cbz	r3, 8011cd8 <_strtod_l+0x620>
 8011ca8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011cac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	4659      	mov	r1, fp
 8011cb4:	dd10      	ble.n	8011cd8 <_strtod_l+0x620>
 8011cb6:	2b1f      	cmp	r3, #31
 8011cb8:	f340 8128 	ble.w	8011f0c <_strtod_l+0x854>
 8011cbc:	2b34      	cmp	r3, #52	; 0x34
 8011cbe:	bfde      	ittt	le
 8011cc0:	3b20      	suble	r3, #32
 8011cc2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011cc6:	fa02 f303 	lslle.w	r3, r2, r3
 8011cca:	f04f 0a00 	mov.w	sl, #0
 8011cce:	bfcc      	ite	gt
 8011cd0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011cd4:	ea03 0b01 	andle.w	fp, r3, r1
 8011cd8:	2200      	movs	r2, #0
 8011cda:	2300      	movs	r3, #0
 8011cdc:	4650      	mov	r0, sl
 8011cde:	4659      	mov	r1, fp
 8011ce0:	f7ee ff02 	bl	8000ae8 <__aeabi_dcmpeq>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	d1a4      	bne.n	8011c32 <_strtod_l+0x57a>
 8011ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011cee:	462b      	mov	r3, r5
 8011cf0:	463a      	mov	r2, r7
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f002 f92a 	bl	8013f4c <__s2b>
 8011cf8:	9009      	str	r0, [sp, #36]	; 0x24
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	f43f af24 	beq.w	8011b48 <_strtod_l+0x490>
 8011d00:	9b07      	ldr	r3, [sp, #28]
 8011d02:	1b9e      	subs	r6, r3, r6
 8011d04:	9b08      	ldr	r3, [sp, #32]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	bfb4      	ite	lt
 8011d0a:	4633      	movlt	r3, r6
 8011d0c:	2300      	movge	r3, #0
 8011d0e:	9310      	str	r3, [sp, #64]	; 0x40
 8011d10:	9b08      	ldr	r3, [sp, #32]
 8011d12:	2500      	movs	r5, #0
 8011d14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011d18:	9318      	str	r3, [sp, #96]	; 0x60
 8011d1a:	462e      	mov	r6, r5
 8011d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d1e:	4620      	mov	r0, r4
 8011d20:	6859      	ldr	r1, [r3, #4]
 8011d22:	f002 f867 	bl	8013df4 <_Balloc>
 8011d26:	9007      	str	r0, [sp, #28]
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	f43f af11 	beq.w	8011b50 <_strtod_l+0x498>
 8011d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d30:	691a      	ldr	r2, [r3, #16]
 8011d32:	3202      	adds	r2, #2
 8011d34:	f103 010c 	add.w	r1, r3, #12
 8011d38:	0092      	lsls	r2, r2, #2
 8011d3a:	300c      	adds	r0, #12
 8011d3c:	f7fe fbd4 	bl	80104e8 <memcpy>
 8011d40:	ec4b ab10 	vmov	d0, sl, fp
 8011d44:	aa20      	add	r2, sp, #128	; 0x80
 8011d46:	a91f      	add	r1, sp, #124	; 0x7c
 8011d48:	4620      	mov	r0, r4
 8011d4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011d4e:	f002 fc39 	bl	80145c4 <__d2b>
 8011d52:	901e      	str	r0, [sp, #120]	; 0x78
 8011d54:	2800      	cmp	r0, #0
 8011d56:	f43f aefb 	beq.w	8011b50 <_strtod_l+0x498>
 8011d5a:	2101      	movs	r1, #1
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	f002 f98f 	bl	8014080 <__i2b>
 8011d62:	4606      	mov	r6, r0
 8011d64:	2800      	cmp	r0, #0
 8011d66:	f43f aef3 	beq.w	8011b50 <_strtod_l+0x498>
 8011d6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011d6c:	9904      	ldr	r1, [sp, #16]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	bfab      	itete	ge
 8011d72:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011d74:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011d76:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011d78:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8011d7c:	bfac      	ite	ge
 8011d7e:	eb03 0902 	addge.w	r9, r3, r2
 8011d82:	1ad7      	sublt	r7, r2, r3
 8011d84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011d86:	eba3 0801 	sub.w	r8, r3, r1
 8011d8a:	4490      	add	r8, r2
 8011d8c:	4ba3      	ldr	r3, [pc, #652]	; (801201c <_strtod_l+0x964>)
 8011d8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011d92:	4598      	cmp	r8, r3
 8011d94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011d98:	f280 80cc 	bge.w	8011f34 <_strtod_l+0x87c>
 8011d9c:	eba3 0308 	sub.w	r3, r3, r8
 8011da0:	2b1f      	cmp	r3, #31
 8011da2:	eba2 0203 	sub.w	r2, r2, r3
 8011da6:	f04f 0101 	mov.w	r1, #1
 8011daa:	f300 80b6 	bgt.w	8011f1a <_strtod_l+0x862>
 8011dae:	fa01 f303 	lsl.w	r3, r1, r3
 8011db2:	9311      	str	r3, [sp, #68]	; 0x44
 8011db4:	2300      	movs	r3, #0
 8011db6:	930c      	str	r3, [sp, #48]	; 0x30
 8011db8:	eb09 0802 	add.w	r8, r9, r2
 8011dbc:	9b04      	ldr	r3, [sp, #16]
 8011dbe:	45c1      	cmp	r9, r8
 8011dc0:	4417      	add	r7, r2
 8011dc2:	441f      	add	r7, r3
 8011dc4:	464b      	mov	r3, r9
 8011dc6:	bfa8      	it	ge
 8011dc8:	4643      	movge	r3, r8
 8011dca:	42bb      	cmp	r3, r7
 8011dcc:	bfa8      	it	ge
 8011dce:	463b      	movge	r3, r7
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	bfc2      	ittt	gt
 8011dd4:	eba8 0803 	subgt.w	r8, r8, r3
 8011dd8:	1aff      	subgt	r7, r7, r3
 8011dda:	eba9 0903 	subgt.w	r9, r9, r3
 8011dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	dd17      	ble.n	8011e14 <_strtod_l+0x75c>
 8011de4:	4631      	mov	r1, r6
 8011de6:	461a      	mov	r2, r3
 8011de8:	4620      	mov	r0, r4
 8011dea:	f002 fa05 	bl	80141f8 <__pow5mult>
 8011dee:	4606      	mov	r6, r0
 8011df0:	2800      	cmp	r0, #0
 8011df2:	f43f aead 	beq.w	8011b50 <_strtod_l+0x498>
 8011df6:	4601      	mov	r1, r0
 8011df8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f002 f956 	bl	80140ac <__multiply>
 8011e00:	900f      	str	r0, [sp, #60]	; 0x3c
 8011e02:	2800      	cmp	r0, #0
 8011e04:	f43f aea4 	beq.w	8011b50 <_strtod_l+0x498>
 8011e08:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f002 f832 	bl	8013e74 <_Bfree>
 8011e10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e12:	931e      	str	r3, [sp, #120]	; 0x78
 8011e14:	f1b8 0f00 	cmp.w	r8, #0
 8011e18:	f300 8091 	bgt.w	8011f3e <_strtod_l+0x886>
 8011e1c:	9b08      	ldr	r3, [sp, #32]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	dd08      	ble.n	8011e34 <_strtod_l+0x77c>
 8011e22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011e24:	9907      	ldr	r1, [sp, #28]
 8011e26:	4620      	mov	r0, r4
 8011e28:	f002 f9e6 	bl	80141f8 <__pow5mult>
 8011e2c:	9007      	str	r0, [sp, #28]
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	f43f ae8e 	beq.w	8011b50 <_strtod_l+0x498>
 8011e34:	2f00      	cmp	r7, #0
 8011e36:	dd08      	ble.n	8011e4a <_strtod_l+0x792>
 8011e38:	9907      	ldr	r1, [sp, #28]
 8011e3a:	463a      	mov	r2, r7
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f002 fa35 	bl	80142ac <__lshift>
 8011e42:	9007      	str	r0, [sp, #28]
 8011e44:	2800      	cmp	r0, #0
 8011e46:	f43f ae83 	beq.w	8011b50 <_strtod_l+0x498>
 8011e4a:	f1b9 0f00 	cmp.w	r9, #0
 8011e4e:	dd08      	ble.n	8011e62 <_strtod_l+0x7aa>
 8011e50:	4631      	mov	r1, r6
 8011e52:	464a      	mov	r2, r9
 8011e54:	4620      	mov	r0, r4
 8011e56:	f002 fa29 	bl	80142ac <__lshift>
 8011e5a:	4606      	mov	r6, r0
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	f43f ae77 	beq.w	8011b50 <_strtod_l+0x498>
 8011e62:	9a07      	ldr	r2, [sp, #28]
 8011e64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011e66:	4620      	mov	r0, r4
 8011e68:	f002 faa8 	bl	80143bc <__mdiff>
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	f43f ae6e 	beq.w	8011b50 <_strtod_l+0x498>
 8011e74:	68c3      	ldr	r3, [r0, #12]
 8011e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e78:	2300      	movs	r3, #0
 8011e7a:	60c3      	str	r3, [r0, #12]
 8011e7c:	4631      	mov	r1, r6
 8011e7e:	f002 fa81 	bl	8014384 <__mcmp>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	da65      	bge.n	8011f52 <_strtod_l+0x89a>
 8011e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e88:	ea53 030a 	orrs.w	r3, r3, sl
 8011e8c:	f040 8087 	bne.w	8011f9e <_strtod_l+0x8e6>
 8011e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f040 8082 	bne.w	8011f9e <_strtod_l+0x8e6>
 8011e9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e9e:	0d1b      	lsrs	r3, r3, #20
 8011ea0:	051b      	lsls	r3, r3, #20
 8011ea2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011ea6:	d97a      	bls.n	8011f9e <_strtod_l+0x8e6>
 8011ea8:	696b      	ldr	r3, [r5, #20]
 8011eaa:	b913      	cbnz	r3, 8011eb2 <_strtod_l+0x7fa>
 8011eac:	692b      	ldr	r3, [r5, #16]
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	dd75      	ble.n	8011f9e <_strtod_l+0x8e6>
 8011eb2:	4629      	mov	r1, r5
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f002 f9f8 	bl	80142ac <__lshift>
 8011ebc:	4631      	mov	r1, r6
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	f002 fa60 	bl	8014384 <__mcmp>
 8011ec4:	2800      	cmp	r0, #0
 8011ec6:	dd6a      	ble.n	8011f9e <_strtod_l+0x8e6>
 8011ec8:	9904      	ldr	r1, [sp, #16]
 8011eca:	4a55      	ldr	r2, [pc, #340]	; (8012020 <_strtod_l+0x968>)
 8011ecc:	465b      	mov	r3, fp
 8011ece:	2900      	cmp	r1, #0
 8011ed0:	f000 8085 	beq.w	8011fde <_strtod_l+0x926>
 8011ed4:	ea02 010b 	and.w	r1, r2, fp
 8011ed8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011edc:	dc7f      	bgt.n	8011fde <_strtod_l+0x926>
 8011ede:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011ee2:	f77f aeaa 	ble.w	8011c3a <_strtod_l+0x582>
 8011ee6:	4a4f      	ldr	r2, [pc, #316]	; (8012024 <_strtod_l+0x96c>)
 8011ee8:	2300      	movs	r3, #0
 8011eea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011eee:	4650      	mov	r0, sl
 8011ef0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011ef4:	4659      	mov	r1, fp
 8011ef6:	f7ee fb8f 	bl	8000618 <__aeabi_dmul>
 8011efa:	460b      	mov	r3, r1
 8011efc:	4303      	orrs	r3, r0
 8011efe:	bf08      	it	eq
 8011f00:	2322      	moveq	r3, #34	; 0x22
 8011f02:	4682      	mov	sl, r0
 8011f04:	468b      	mov	fp, r1
 8011f06:	bf08      	it	eq
 8011f08:	6023      	streq	r3, [r4, #0]
 8011f0a:	e62b      	b.n	8011b64 <_strtod_l+0x4ac>
 8011f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f10:	fa02 f303 	lsl.w	r3, r2, r3
 8011f14:	ea03 0a0a 	and.w	sl, r3, sl
 8011f18:	e6de      	b.n	8011cd8 <_strtod_l+0x620>
 8011f1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011f1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011f22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011f26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011f2a:	fa01 f308 	lsl.w	r3, r1, r8
 8011f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8011f30:	9111      	str	r1, [sp, #68]	; 0x44
 8011f32:	e741      	b.n	8011db8 <_strtod_l+0x700>
 8011f34:	2300      	movs	r3, #0
 8011f36:	930c      	str	r3, [sp, #48]	; 0x30
 8011f38:	2301      	movs	r3, #1
 8011f3a:	9311      	str	r3, [sp, #68]	; 0x44
 8011f3c:	e73c      	b.n	8011db8 <_strtod_l+0x700>
 8011f3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011f40:	4642      	mov	r2, r8
 8011f42:	4620      	mov	r0, r4
 8011f44:	f002 f9b2 	bl	80142ac <__lshift>
 8011f48:	901e      	str	r0, [sp, #120]	; 0x78
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	f47f af66 	bne.w	8011e1c <_strtod_l+0x764>
 8011f50:	e5fe      	b.n	8011b50 <_strtod_l+0x498>
 8011f52:	465f      	mov	r7, fp
 8011f54:	d16e      	bne.n	8012034 <_strtod_l+0x97c>
 8011f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f5c:	b342      	cbz	r2, 8011fb0 <_strtod_l+0x8f8>
 8011f5e:	4a32      	ldr	r2, [pc, #200]	; (8012028 <_strtod_l+0x970>)
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d128      	bne.n	8011fb6 <_strtod_l+0x8fe>
 8011f64:	9b04      	ldr	r3, [sp, #16]
 8011f66:	4650      	mov	r0, sl
 8011f68:	b1eb      	cbz	r3, 8011fa6 <_strtod_l+0x8ee>
 8011f6a:	4a2d      	ldr	r2, [pc, #180]	; (8012020 <_strtod_l+0x968>)
 8011f6c:	403a      	ands	r2, r7
 8011f6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011f72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011f76:	d819      	bhi.n	8011fac <_strtod_l+0x8f4>
 8011f78:	0d12      	lsrs	r2, r2, #20
 8011f7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8011f82:	4298      	cmp	r0, r3
 8011f84:	d117      	bne.n	8011fb6 <_strtod_l+0x8fe>
 8011f86:	4b29      	ldr	r3, [pc, #164]	; (801202c <_strtod_l+0x974>)
 8011f88:	429f      	cmp	r7, r3
 8011f8a:	d102      	bne.n	8011f92 <_strtod_l+0x8da>
 8011f8c:	3001      	adds	r0, #1
 8011f8e:	f43f addf 	beq.w	8011b50 <_strtod_l+0x498>
 8011f92:	4b23      	ldr	r3, [pc, #140]	; (8012020 <_strtod_l+0x968>)
 8011f94:	403b      	ands	r3, r7
 8011f96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011f9a:	f04f 0a00 	mov.w	sl, #0
 8011f9e:	9b04      	ldr	r3, [sp, #16]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d1a0      	bne.n	8011ee6 <_strtod_l+0x82e>
 8011fa4:	e5de      	b.n	8011b64 <_strtod_l+0x4ac>
 8011fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011faa:	e7ea      	b.n	8011f82 <_strtod_l+0x8ca>
 8011fac:	460b      	mov	r3, r1
 8011fae:	e7e8      	b.n	8011f82 <_strtod_l+0x8ca>
 8011fb0:	ea53 030a 	orrs.w	r3, r3, sl
 8011fb4:	d088      	beq.n	8011ec8 <_strtod_l+0x810>
 8011fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fb8:	b1db      	cbz	r3, 8011ff2 <_strtod_l+0x93a>
 8011fba:	423b      	tst	r3, r7
 8011fbc:	d0ef      	beq.n	8011f9e <_strtod_l+0x8e6>
 8011fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fc0:	9a04      	ldr	r2, [sp, #16]
 8011fc2:	4650      	mov	r0, sl
 8011fc4:	4659      	mov	r1, fp
 8011fc6:	b1c3      	cbz	r3, 8011ffa <_strtod_l+0x942>
 8011fc8:	f7ff fb58 	bl	801167c <sulp>
 8011fcc:	4602      	mov	r2, r0
 8011fce:	460b      	mov	r3, r1
 8011fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011fd4:	f7ee f96a 	bl	80002ac <__adddf3>
 8011fd8:	4682      	mov	sl, r0
 8011fda:	468b      	mov	fp, r1
 8011fdc:	e7df      	b.n	8011f9e <_strtod_l+0x8e6>
 8011fde:	4013      	ands	r3, r2
 8011fe0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011fe4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011fe8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011fec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011ff0:	e7d5      	b.n	8011f9e <_strtod_l+0x8e6>
 8011ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ff4:	ea13 0f0a 	tst.w	r3, sl
 8011ff8:	e7e0      	b.n	8011fbc <_strtod_l+0x904>
 8011ffa:	f7ff fb3f 	bl	801167c <sulp>
 8011ffe:	4602      	mov	r2, r0
 8012000:	460b      	mov	r3, r1
 8012002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012006:	f7ee f94f 	bl	80002a8 <__aeabi_dsub>
 801200a:	2200      	movs	r2, #0
 801200c:	2300      	movs	r3, #0
 801200e:	4682      	mov	sl, r0
 8012010:	468b      	mov	fp, r1
 8012012:	f7ee fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 8012016:	2800      	cmp	r0, #0
 8012018:	d0c1      	beq.n	8011f9e <_strtod_l+0x8e6>
 801201a:	e60e      	b.n	8011c3a <_strtod_l+0x582>
 801201c:	fffffc02 	.word	0xfffffc02
 8012020:	7ff00000 	.word	0x7ff00000
 8012024:	39500000 	.word	0x39500000
 8012028:	000fffff 	.word	0x000fffff
 801202c:	7fefffff 	.word	0x7fefffff
 8012030:	0805fab8 	.word	0x0805fab8
 8012034:	4631      	mov	r1, r6
 8012036:	4628      	mov	r0, r5
 8012038:	f002 fb20 	bl	801467c <__ratio>
 801203c:	ec59 8b10 	vmov	r8, r9, d0
 8012040:	ee10 0a10 	vmov	r0, s0
 8012044:	2200      	movs	r2, #0
 8012046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801204a:	4649      	mov	r1, r9
 801204c:	f7ee fd60 	bl	8000b10 <__aeabi_dcmple>
 8012050:	2800      	cmp	r0, #0
 8012052:	d07c      	beq.n	801214e <_strtod_l+0xa96>
 8012054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012056:	2b00      	cmp	r3, #0
 8012058:	d04c      	beq.n	80120f4 <_strtod_l+0xa3c>
 801205a:	4b95      	ldr	r3, [pc, #596]	; (80122b0 <_strtod_l+0xbf8>)
 801205c:	2200      	movs	r2, #0
 801205e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012062:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80122b0 <_strtod_l+0xbf8>
 8012066:	f04f 0800 	mov.w	r8, #0
 801206a:	4b92      	ldr	r3, [pc, #584]	; (80122b4 <_strtod_l+0xbfc>)
 801206c:	403b      	ands	r3, r7
 801206e:	9311      	str	r3, [sp, #68]	; 0x44
 8012070:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012072:	4b91      	ldr	r3, [pc, #580]	; (80122b8 <_strtod_l+0xc00>)
 8012074:	429a      	cmp	r2, r3
 8012076:	f040 80b2 	bne.w	80121de <_strtod_l+0xb26>
 801207a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801207e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012082:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012086:	ec4b ab10 	vmov	d0, sl, fp
 801208a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801208e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012092:	f002 fa1b 	bl	80144cc <__ulp>
 8012096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801209a:	ec53 2b10 	vmov	r2, r3, d0
 801209e:	f7ee fabb 	bl	8000618 <__aeabi_dmul>
 80120a2:	4652      	mov	r2, sl
 80120a4:	465b      	mov	r3, fp
 80120a6:	f7ee f901 	bl	80002ac <__adddf3>
 80120aa:	460b      	mov	r3, r1
 80120ac:	4981      	ldr	r1, [pc, #516]	; (80122b4 <_strtod_l+0xbfc>)
 80120ae:	4a83      	ldr	r2, [pc, #524]	; (80122bc <_strtod_l+0xc04>)
 80120b0:	4019      	ands	r1, r3
 80120b2:	4291      	cmp	r1, r2
 80120b4:	4682      	mov	sl, r0
 80120b6:	d95e      	bls.n	8012176 <_strtod_l+0xabe>
 80120b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80120be:	4293      	cmp	r3, r2
 80120c0:	d103      	bne.n	80120ca <_strtod_l+0xa12>
 80120c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120c4:	3301      	adds	r3, #1
 80120c6:	f43f ad43 	beq.w	8011b50 <_strtod_l+0x498>
 80120ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80122c8 <_strtod_l+0xc10>
 80120ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80120d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80120d4:	4620      	mov	r0, r4
 80120d6:	f001 fecd 	bl	8013e74 <_Bfree>
 80120da:	9907      	ldr	r1, [sp, #28]
 80120dc:	4620      	mov	r0, r4
 80120de:	f001 fec9 	bl	8013e74 <_Bfree>
 80120e2:	4631      	mov	r1, r6
 80120e4:	4620      	mov	r0, r4
 80120e6:	f001 fec5 	bl	8013e74 <_Bfree>
 80120ea:	4629      	mov	r1, r5
 80120ec:	4620      	mov	r0, r4
 80120ee:	f001 fec1 	bl	8013e74 <_Bfree>
 80120f2:	e613      	b.n	8011d1c <_strtod_l+0x664>
 80120f4:	f1ba 0f00 	cmp.w	sl, #0
 80120f8:	d11b      	bne.n	8012132 <_strtod_l+0xa7a>
 80120fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120fe:	b9f3      	cbnz	r3, 801213e <_strtod_l+0xa86>
 8012100:	4b6b      	ldr	r3, [pc, #428]	; (80122b0 <_strtod_l+0xbf8>)
 8012102:	2200      	movs	r2, #0
 8012104:	4640      	mov	r0, r8
 8012106:	4649      	mov	r1, r9
 8012108:	f7ee fcf8 	bl	8000afc <__aeabi_dcmplt>
 801210c:	b9d0      	cbnz	r0, 8012144 <_strtod_l+0xa8c>
 801210e:	4640      	mov	r0, r8
 8012110:	4649      	mov	r1, r9
 8012112:	4b6b      	ldr	r3, [pc, #428]	; (80122c0 <_strtod_l+0xc08>)
 8012114:	2200      	movs	r2, #0
 8012116:	f7ee fa7f 	bl	8000618 <__aeabi_dmul>
 801211a:	4680      	mov	r8, r0
 801211c:	4689      	mov	r9, r1
 801211e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012122:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012126:	931b      	str	r3, [sp, #108]	; 0x6c
 8012128:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801212c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012130:	e79b      	b.n	801206a <_strtod_l+0x9b2>
 8012132:	f1ba 0f01 	cmp.w	sl, #1
 8012136:	d102      	bne.n	801213e <_strtod_l+0xa86>
 8012138:	2f00      	cmp	r7, #0
 801213a:	f43f ad7e 	beq.w	8011c3a <_strtod_l+0x582>
 801213e:	4b61      	ldr	r3, [pc, #388]	; (80122c4 <_strtod_l+0xc0c>)
 8012140:	2200      	movs	r2, #0
 8012142:	e78c      	b.n	801205e <_strtod_l+0x9a6>
 8012144:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80122c0 <_strtod_l+0xc08>
 8012148:	f04f 0800 	mov.w	r8, #0
 801214c:	e7e7      	b.n	801211e <_strtod_l+0xa66>
 801214e:	4b5c      	ldr	r3, [pc, #368]	; (80122c0 <_strtod_l+0xc08>)
 8012150:	4640      	mov	r0, r8
 8012152:	4649      	mov	r1, r9
 8012154:	2200      	movs	r2, #0
 8012156:	f7ee fa5f 	bl	8000618 <__aeabi_dmul>
 801215a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801215c:	4680      	mov	r8, r0
 801215e:	4689      	mov	r9, r1
 8012160:	b933      	cbnz	r3, 8012170 <_strtod_l+0xab8>
 8012162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012166:	9012      	str	r0, [sp, #72]	; 0x48
 8012168:	9313      	str	r3, [sp, #76]	; 0x4c
 801216a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801216e:	e7dd      	b.n	801212c <_strtod_l+0xa74>
 8012170:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8012174:	e7f9      	b.n	801216a <_strtod_l+0xab2>
 8012176:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801217a:	9b04      	ldr	r3, [sp, #16]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d1a8      	bne.n	80120d2 <_strtod_l+0xa1a>
 8012180:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012184:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012186:	0d1b      	lsrs	r3, r3, #20
 8012188:	051b      	lsls	r3, r3, #20
 801218a:	429a      	cmp	r2, r3
 801218c:	d1a1      	bne.n	80120d2 <_strtod_l+0xa1a>
 801218e:	4640      	mov	r0, r8
 8012190:	4649      	mov	r1, r9
 8012192:	f7ee fda1 	bl	8000cd8 <__aeabi_d2lz>
 8012196:	f7ee fa11 	bl	80005bc <__aeabi_l2d>
 801219a:	4602      	mov	r2, r0
 801219c:	460b      	mov	r3, r1
 801219e:	4640      	mov	r0, r8
 80121a0:	4649      	mov	r1, r9
 80121a2:	f7ee f881 	bl	80002a8 <__aeabi_dsub>
 80121a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121ac:	ea43 030a 	orr.w	r3, r3, sl
 80121b0:	4313      	orrs	r3, r2
 80121b2:	4680      	mov	r8, r0
 80121b4:	4689      	mov	r9, r1
 80121b6:	d053      	beq.n	8012260 <_strtod_l+0xba8>
 80121b8:	a335      	add	r3, pc, #212	; (adr r3, 8012290 <_strtod_l+0xbd8>)
 80121ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121be:	f7ee fc9d 	bl	8000afc <__aeabi_dcmplt>
 80121c2:	2800      	cmp	r0, #0
 80121c4:	f47f acce 	bne.w	8011b64 <_strtod_l+0x4ac>
 80121c8:	a333      	add	r3, pc, #204	; (adr r3, 8012298 <_strtod_l+0xbe0>)
 80121ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ce:	4640      	mov	r0, r8
 80121d0:	4649      	mov	r1, r9
 80121d2:	f7ee fcb1 	bl	8000b38 <__aeabi_dcmpgt>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	f43f af7b 	beq.w	80120d2 <_strtod_l+0xa1a>
 80121dc:	e4c2      	b.n	8011b64 <_strtod_l+0x4ac>
 80121de:	9b04      	ldr	r3, [sp, #16]
 80121e0:	b333      	cbz	r3, 8012230 <_strtod_l+0xb78>
 80121e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80121e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80121e8:	d822      	bhi.n	8012230 <_strtod_l+0xb78>
 80121ea:	a32d      	add	r3, pc, #180	; (adr r3, 80122a0 <_strtod_l+0xbe8>)
 80121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f0:	4640      	mov	r0, r8
 80121f2:	4649      	mov	r1, r9
 80121f4:	f7ee fc8c 	bl	8000b10 <__aeabi_dcmple>
 80121f8:	b1a0      	cbz	r0, 8012224 <_strtod_l+0xb6c>
 80121fa:	4649      	mov	r1, r9
 80121fc:	4640      	mov	r0, r8
 80121fe:	f7ee fce3 	bl	8000bc8 <__aeabi_d2uiz>
 8012202:	2801      	cmp	r0, #1
 8012204:	bf38      	it	cc
 8012206:	2001      	movcc	r0, #1
 8012208:	f7ee f98c 	bl	8000524 <__aeabi_ui2d>
 801220c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801220e:	4680      	mov	r8, r0
 8012210:	4689      	mov	r9, r1
 8012212:	bb13      	cbnz	r3, 801225a <_strtod_l+0xba2>
 8012214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012218:	9014      	str	r0, [sp, #80]	; 0x50
 801221a:	9315      	str	r3, [sp, #84]	; 0x54
 801221c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012220:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012228:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801222c:	1a9b      	subs	r3, r3, r2
 801222e:	930d      	str	r3, [sp, #52]	; 0x34
 8012230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012234:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801223c:	f002 f946 	bl	80144cc <__ulp>
 8012240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012244:	ec53 2b10 	vmov	r2, r3, d0
 8012248:	f7ee f9e6 	bl	8000618 <__aeabi_dmul>
 801224c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012250:	f7ee f82c 	bl	80002ac <__adddf3>
 8012254:	4682      	mov	sl, r0
 8012256:	468b      	mov	fp, r1
 8012258:	e78f      	b.n	801217a <_strtod_l+0xac2>
 801225a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801225e:	e7dd      	b.n	801221c <_strtod_l+0xb64>
 8012260:	a311      	add	r3, pc, #68	; (adr r3, 80122a8 <_strtod_l+0xbf0>)
 8012262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012266:	f7ee fc49 	bl	8000afc <__aeabi_dcmplt>
 801226a:	e7b4      	b.n	80121d6 <_strtod_l+0xb1e>
 801226c:	2300      	movs	r3, #0
 801226e:	930e      	str	r3, [sp, #56]	; 0x38
 8012270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012272:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012274:	6013      	str	r3, [r2, #0]
 8012276:	f7ff ba65 	b.w	8011744 <_strtod_l+0x8c>
 801227a:	2b65      	cmp	r3, #101	; 0x65
 801227c:	f43f ab5d 	beq.w	801193a <_strtod_l+0x282>
 8012280:	2b45      	cmp	r3, #69	; 0x45
 8012282:	f43f ab5a 	beq.w	801193a <_strtod_l+0x282>
 8012286:	2201      	movs	r2, #1
 8012288:	f7ff bb92 	b.w	80119b0 <_strtod_l+0x2f8>
 801228c:	f3af 8000 	nop.w
 8012290:	94a03595 	.word	0x94a03595
 8012294:	3fdfffff 	.word	0x3fdfffff
 8012298:	35afe535 	.word	0x35afe535
 801229c:	3fe00000 	.word	0x3fe00000
 80122a0:	ffc00000 	.word	0xffc00000
 80122a4:	41dfffff 	.word	0x41dfffff
 80122a8:	94a03595 	.word	0x94a03595
 80122ac:	3fcfffff 	.word	0x3fcfffff
 80122b0:	3ff00000 	.word	0x3ff00000
 80122b4:	7ff00000 	.word	0x7ff00000
 80122b8:	7fe00000 	.word	0x7fe00000
 80122bc:	7c9fffff 	.word	0x7c9fffff
 80122c0:	3fe00000 	.word	0x3fe00000
 80122c4:	bff00000 	.word	0xbff00000
 80122c8:	7fefffff 	.word	0x7fefffff

080122cc <_strtod_r>:
 80122cc:	4b01      	ldr	r3, [pc, #4]	; (80122d4 <_strtod_r+0x8>)
 80122ce:	f7ff b9f3 	b.w	80116b8 <_strtod_l>
 80122d2:	bf00      	nop
 80122d4:	20000f48 	.word	0x20000f48

080122d8 <_strtol_l.isra.0>:
 80122d8:	2b01      	cmp	r3, #1
 80122da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122de:	d001      	beq.n	80122e4 <_strtol_l.isra.0+0xc>
 80122e0:	2b24      	cmp	r3, #36	; 0x24
 80122e2:	d906      	bls.n	80122f2 <_strtol_l.isra.0+0x1a>
 80122e4:	f7fe f8bc 	bl	8010460 <__errno>
 80122e8:	2316      	movs	r3, #22
 80122ea:	6003      	str	r3, [r0, #0]
 80122ec:	2000      	movs	r0, #0
 80122ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122f2:	4f3a      	ldr	r7, [pc, #232]	; (80123dc <_strtol_l.isra.0+0x104>)
 80122f4:	468e      	mov	lr, r1
 80122f6:	4676      	mov	r6, lr
 80122f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80122fc:	5de5      	ldrb	r5, [r4, r7]
 80122fe:	f015 0508 	ands.w	r5, r5, #8
 8012302:	d1f8      	bne.n	80122f6 <_strtol_l.isra.0+0x1e>
 8012304:	2c2d      	cmp	r4, #45	; 0x2d
 8012306:	d134      	bne.n	8012372 <_strtol_l.isra.0+0x9a>
 8012308:	f89e 4000 	ldrb.w	r4, [lr]
 801230c:	f04f 0801 	mov.w	r8, #1
 8012310:	f106 0e02 	add.w	lr, r6, #2
 8012314:	2b00      	cmp	r3, #0
 8012316:	d05c      	beq.n	80123d2 <_strtol_l.isra.0+0xfa>
 8012318:	2b10      	cmp	r3, #16
 801231a:	d10c      	bne.n	8012336 <_strtol_l.isra.0+0x5e>
 801231c:	2c30      	cmp	r4, #48	; 0x30
 801231e:	d10a      	bne.n	8012336 <_strtol_l.isra.0+0x5e>
 8012320:	f89e 4000 	ldrb.w	r4, [lr]
 8012324:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012328:	2c58      	cmp	r4, #88	; 0x58
 801232a:	d14d      	bne.n	80123c8 <_strtol_l.isra.0+0xf0>
 801232c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012330:	2310      	movs	r3, #16
 8012332:	f10e 0e02 	add.w	lr, lr, #2
 8012336:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801233a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801233e:	2600      	movs	r6, #0
 8012340:	fbbc f9f3 	udiv	r9, ip, r3
 8012344:	4635      	mov	r5, r6
 8012346:	fb03 ca19 	mls	sl, r3, r9, ip
 801234a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801234e:	2f09      	cmp	r7, #9
 8012350:	d818      	bhi.n	8012384 <_strtol_l.isra.0+0xac>
 8012352:	463c      	mov	r4, r7
 8012354:	42a3      	cmp	r3, r4
 8012356:	dd24      	ble.n	80123a2 <_strtol_l.isra.0+0xca>
 8012358:	2e00      	cmp	r6, #0
 801235a:	db1f      	blt.n	801239c <_strtol_l.isra.0+0xc4>
 801235c:	45a9      	cmp	r9, r5
 801235e:	d31d      	bcc.n	801239c <_strtol_l.isra.0+0xc4>
 8012360:	d101      	bne.n	8012366 <_strtol_l.isra.0+0x8e>
 8012362:	45a2      	cmp	sl, r4
 8012364:	db1a      	blt.n	801239c <_strtol_l.isra.0+0xc4>
 8012366:	fb05 4503 	mla	r5, r5, r3, r4
 801236a:	2601      	movs	r6, #1
 801236c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012370:	e7eb      	b.n	801234a <_strtol_l.isra.0+0x72>
 8012372:	2c2b      	cmp	r4, #43	; 0x2b
 8012374:	bf08      	it	eq
 8012376:	f89e 4000 	ldrbeq.w	r4, [lr]
 801237a:	46a8      	mov	r8, r5
 801237c:	bf08      	it	eq
 801237e:	f106 0e02 	addeq.w	lr, r6, #2
 8012382:	e7c7      	b.n	8012314 <_strtol_l.isra.0+0x3c>
 8012384:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012388:	2f19      	cmp	r7, #25
 801238a:	d801      	bhi.n	8012390 <_strtol_l.isra.0+0xb8>
 801238c:	3c37      	subs	r4, #55	; 0x37
 801238e:	e7e1      	b.n	8012354 <_strtol_l.isra.0+0x7c>
 8012390:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012394:	2f19      	cmp	r7, #25
 8012396:	d804      	bhi.n	80123a2 <_strtol_l.isra.0+0xca>
 8012398:	3c57      	subs	r4, #87	; 0x57
 801239a:	e7db      	b.n	8012354 <_strtol_l.isra.0+0x7c>
 801239c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80123a0:	e7e4      	b.n	801236c <_strtol_l.isra.0+0x94>
 80123a2:	2e00      	cmp	r6, #0
 80123a4:	da05      	bge.n	80123b2 <_strtol_l.isra.0+0xda>
 80123a6:	2322      	movs	r3, #34	; 0x22
 80123a8:	6003      	str	r3, [r0, #0]
 80123aa:	4665      	mov	r5, ip
 80123ac:	b942      	cbnz	r2, 80123c0 <_strtol_l.isra.0+0xe8>
 80123ae:	4628      	mov	r0, r5
 80123b0:	e79d      	b.n	80122ee <_strtol_l.isra.0+0x16>
 80123b2:	f1b8 0f00 	cmp.w	r8, #0
 80123b6:	d000      	beq.n	80123ba <_strtol_l.isra.0+0xe2>
 80123b8:	426d      	negs	r5, r5
 80123ba:	2a00      	cmp	r2, #0
 80123bc:	d0f7      	beq.n	80123ae <_strtol_l.isra.0+0xd6>
 80123be:	b10e      	cbz	r6, 80123c4 <_strtol_l.isra.0+0xec>
 80123c0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80123c4:	6011      	str	r1, [r2, #0]
 80123c6:	e7f2      	b.n	80123ae <_strtol_l.isra.0+0xd6>
 80123c8:	2430      	movs	r4, #48	; 0x30
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d1b3      	bne.n	8012336 <_strtol_l.isra.0+0x5e>
 80123ce:	2308      	movs	r3, #8
 80123d0:	e7b1      	b.n	8012336 <_strtol_l.isra.0+0x5e>
 80123d2:	2c30      	cmp	r4, #48	; 0x30
 80123d4:	d0a4      	beq.n	8012320 <_strtol_l.isra.0+0x48>
 80123d6:	230a      	movs	r3, #10
 80123d8:	e7ad      	b.n	8012336 <_strtol_l.isra.0+0x5e>
 80123da:	bf00      	nop
 80123dc:	0805fae1 	.word	0x0805fae1

080123e0 <_strtol_r>:
 80123e0:	f7ff bf7a 	b.w	80122d8 <_strtol_l.isra.0>

080123e4 <__swbuf_r>:
 80123e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123e6:	460e      	mov	r6, r1
 80123e8:	4614      	mov	r4, r2
 80123ea:	4605      	mov	r5, r0
 80123ec:	b118      	cbz	r0, 80123f6 <__swbuf_r+0x12>
 80123ee:	6983      	ldr	r3, [r0, #24]
 80123f0:	b90b      	cbnz	r3, 80123f6 <__swbuf_r+0x12>
 80123f2:	f001 f84f 	bl	8013494 <__sinit>
 80123f6:	4b21      	ldr	r3, [pc, #132]	; (801247c <__swbuf_r+0x98>)
 80123f8:	429c      	cmp	r4, r3
 80123fa:	d12b      	bne.n	8012454 <__swbuf_r+0x70>
 80123fc:	686c      	ldr	r4, [r5, #4]
 80123fe:	69a3      	ldr	r3, [r4, #24]
 8012400:	60a3      	str	r3, [r4, #8]
 8012402:	89a3      	ldrh	r3, [r4, #12]
 8012404:	071a      	lsls	r2, r3, #28
 8012406:	d52f      	bpl.n	8012468 <__swbuf_r+0x84>
 8012408:	6923      	ldr	r3, [r4, #16]
 801240a:	b36b      	cbz	r3, 8012468 <__swbuf_r+0x84>
 801240c:	6923      	ldr	r3, [r4, #16]
 801240e:	6820      	ldr	r0, [r4, #0]
 8012410:	1ac0      	subs	r0, r0, r3
 8012412:	6963      	ldr	r3, [r4, #20]
 8012414:	b2f6      	uxtb	r6, r6
 8012416:	4283      	cmp	r3, r0
 8012418:	4637      	mov	r7, r6
 801241a:	dc04      	bgt.n	8012426 <__swbuf_r+0x42>
 801241c:	4621      	mov	r1, r4
 801241e:	4628      	mov	r0, r5
 8012420:	f000 ffa4 	bl	801336c <_fflush_r>
 8012424:	bb30      	cbnz	r0, 8012474 <__swbuf_r+0x90>
 8012426:	68a3      	ldr	r3, [r4, #8]
 8012428:	3b01      	subs	r3, #1
 801242a:	60a3      	str	r3, [r4, #8]
 801242c:	6823      	ldr	r3, [r4, #0]
 801242e:	1c5a      	adds	r2, r3, #1
 8012430:	6022      	str	r2, [r4, #0]
 8012432:	701e      	strb	r6, [r3, #0]
 8012434:	6963      	ldr	r3, [r4, #20]
 8012436:	3001      	adds	r0, #1
 8012438:	4283      	cmp	r3, r0
 801243a:	d004      	beq.n	8012446 <__swbuf_r+0x62>
 801243c:	89a3      	ldrh	r3, [r4, #12]
 801243e:	07db      	lsls	r3, r3, #31
 8012440:	d506      	bpl.n	8012450 <__swbuf_r+0x6c>
 8012442:	2e0a      	cmp	r6, #10
 8012444:	d104      	bne.n	8012450 <__swbuf_r+0x6c>
 8012446:	4621      	mov	r1, r4
 8012448:	4628      	mov	r0, r5
 801244a:	f000 ff8f 	bl	801336c <_fflush_r>
 801244e:	b988      	cbnz	r0, 8012474 <__swbuf_r+0x90>
 8012450:	4638      	mov	r0, r7
 8012452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012454:	4b0a      	ldr	r3, [pc, #40]	; (8012480 <__swbuf_r+0x9c>)
 8012456:	429c      	cmp	r4, r3
 8012458:	d101      	bne.n	801245e <__swbuf_r+0x7a>
 801245a:	68ac      	ldr	r4, [r5, #8]
 801245c:	e7cf      	b.n	80123fe <__swbuf_r+0x1a>
 801245e:	4b09      	ldr	r3, [pc, #36]	; (8012484 <__swbuf_r+0xa0>)
 8012460:	429c      	cmp	r4, r3
 8012462:	bf08      	it	eq
 8012464:	68ec      	ldreq	r4, [r5, #12]
 8012466:	e7ca      	b.n	80123fe <__swbuf_r+0x1a>
 8012468:	4621      	mov	r1, r4
 801246a:	4628      	mov	r0, r5
 801246c:	f000 f80c 	bl	8012488 <__swsetup_r>
 8012470:	2800      	cmp	r0, #0
 8012472:	d0cb      	beq.n	801240c <__swbuf_r+0x28>
 8012474:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012478:	e7ea      	b.n	8012450 <__swbuf_r+0x6c>
 801247a:	bf00      	nop
 801247c:	0805fc98 	.word	0x0805fc98
 8012480:	0805fcb8 	.word	0x0805fcb8
 8012484:	0805fc78 	.word	0x0805fc78

08012488 <__swsetup_r>:
 8012488:	4b32      	ldr	r3, [pc, #200]	; (8012554 <__swsetup_r+0xcc>)
 801248a:	b570      	push	{r4, r5, r6, lr}
 801248c:	681d      	ldr	r5, [r3, #0]
 801248e:	4606      	mov	r6, r0
 8012490:	460c      	mov	r4, r1
 8012492:	b125      	cbz	r5, 801249e <__swsetup_r+0x16>
 8012494:	69ab      	ldr	r3, [r5, #24]
 8012496:	b913      	cbnz	r3, 801249e <__swsetup_r+0x16>
 8012498:	4628      	mov	r0, r5
 801249a:	f000 fffb 	bl	8013494 <__sinit>
 801249e:	4b2e      	ldr	r3, [pc, #184]	; (8012558 <__swsetup_r+0xd0>)
 80124a0:	429c      	cmp	r4, r3
 80124a2:	d10f      	bne.n	80124c4 <__swsetup_r+0x3c>
 80124a4:	686c      	ldr	r4, [r5, #4]
 80124a6:	89a3      	ldrh	r3, [r4, #12]
 80124a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124ac:	0719      	lsls	r1, r3, #28
 80124ae:	d42c      	bmi.n	801250a <__swsetup_r+0x82>
 80124b0:	06dd      	lsls	r5, r3, #27
 80124b2:	d411      	bmi.n	80124d8 <__swsetup_r+0x50>
 80124b4:	2309      	movs	r3, #9
 80124b6:	6033      	str	r3, [r6, #0]
 80124b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80124bc:	81a3      	strh	r3, [r4, #12]
 80124be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124c2:	e03e      	b.n	8012542 <__swsetup_r+0xba>
 80124c4:	4b25      	ldr	r3, [pc, #148]	; (801255c <__swsetup_r+0xd4>)
 80124c6:	429c      	cmp	r4, r3
 80124c8:	d101      	bne.n	80124ce <__swsetup_r+0x46>
 80124ca:	68ac      	ldr	r4, [r5, #8]
 80124cc:	e7eb      	b.n	80124a6 <__swsetup_r+0x1e>
 80124ce:	4b24      	ldr	r3, [pc, #144]	; (8012560 <__swsetup_r+0xd8>)
 80124d0:	429c      	cmp	r4, r3
 80124d2:	bf08      	it	eq
 80124d4:	68ec      	ldreq	r4, [r5, #12]
 80124d6:	e7e6      	b.n	80124a6 <__swsetup_r+0x1e>
 80124d8:	0758      	lsls	r0, r3, #29
 80124da:	d512      	bpl.n	8012502 <__swsetup_r+0x7a>
 80124dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124de:	b141      	cbz	r1, 80124f2 <__swsetup_r+0x6a>
 80124e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124e4:	4299      	cmp	r1, r3
 80124e6:	d002      	beq.n	80124ee <__swsetup_r+0x66>
 80124e8:	4630      	mov	r0, r6
 80124ea:	f7fe f813 	bl	8010514 <_free_r>
 80124ee:	2300      	movs	r3, #0
 80124f0:	6363      	str	r3, [r4, #52]	; 0x34
 80124f2:	89a3      	ldrh	r3, [r4, #12]
 80124f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80124f8:	81a3      	strh	r3, [r4, #12]
 80124fa:	2300      	movs	r3, #0
 80124fc:	6063      	str	r3, [r4, #4]
 80124fe:	6923      	ldr	r3, [r4, #16]
 8012500:	6023      	str	r3, [r4, #0]
 8012502:	89a3      	ldrh	r3, [r4, #12]
 8012504:	f043 0308 	orr.w	r3, r3, #8
 8012508:	81a3      	strh	r3, [r4, #12]
 801250a:	6923      	ldr	r3, [r4, #16]
 801250c:	b94b      	cbnz	r3, 8012522 <__swsetup_r+0x9a>
 801250e:	89a3      	ldrh	r3, [r4, #12]
 8012510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012518:	d003      	beq.n	8012522 <__swsetup_r+0x9a>
 801251a:	4621      	mov	r1, r4
 801251c:	4630      	mov	r0, r6
 801251e:	f001 fbf1 	bl	8013d04 <__smakebuf_r>
 8012522:	89a0      	ldrh	r0, [r4, #12]
 8012524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012528:	f010 0301 	ands.w	r3, r0, #1
 801252c:	d00a      	beq.n	8012544 <__swsetup_r+0xbc>
 801252e:	2300      	movs	r3, #0
 8012530:	60a3      	str	r3, [r4, #8]
 8012532:	6963      	ldr	r3, [r4, #20]
 8012534:	425b      	negs	r3, r3
 8012536:	61a3      	str	r3, [r4, #24]
 8012538:	6923      	ldr	r3, [r4, #16]
 801253a:	b943      	cbnz	r3, 801254e <__swsetup_r+0xc6>
 801253c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012540:	d1ba      	bne.n	80124b8 <__swsetup_r+0x30>
 8012542:	bd70      	pop	{r4, r5, r6, pc}
 8012544:	0781      	lsls	r1, r0, #30
 8012546:	bf58      	it	pl
 8012548:	6963      	ldrpl	r3, [r4, #20]
 801254a:	60a3      	str	r3, [r4, #8]
 801254c:	e7f4      	b.n	8012538 <__swsetup_r+0xb0>
 801254e:	2000      	movs	r0, #0
 8012550:	e7f7      	b.n	8012542 <__swsetup_r+0xba>
 8012552:	bf00      	nop
 8012554:	20000ee0 	.word	0x20000ee0
 8012558:	0805fc98 	.word	0x0805fc98
 801255c:	0805fcb8 	.word	0x0805fcb8
 8012560:	0805fc78 	.word	0x0805fc78

08012564 <abort>:
 8012564:	b508      	push	{r3, lr}
 8012566:	2006      	movs	r0, #6
 8012568:	f002 fac2 	bl	8014af0 <raise>
 801256c:	2001      	movs	r0, #1
 801256e:	f004 fc5d 	bl	8016e2c <_exit>

08012572 <quorem>:
 8012572:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012576:	6903      	ldr	r3, [r0, #16]
 8012578:	690c      	ldr	r4, [r1, #16]
 801257a:	42a3      	cmp	r3, r4
 801257c:	4607      	mov	r7, r0
 801257e:	f2c0 8081 	blt.w	8012684 <quorem+0x112>
 8012582:	3c01      	subs	r4, #1
 8012584:	f101 0814 	add.w	r8, r1, #20
 8012588:	f100 0514 	add.w	r5, r0, #20
 801258c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012590:	9301      	str	r3, [sp, #4]
 8012592:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801259a:	3301      	adds	r3, #1
 801259c:	429a      	cmp	r2, r3
 801259e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80125a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80125a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80125aa:	d331      	bcc.n	8012610 <quorem+0x9e>
 80125ac:	f04f 0e00 	mov.w	lr, #0
 80125b0:	4640      	mov	r0, r8
 80125b2:	46ac      	mov	ip, r5
 80125b4:	46f2      	mov	sl, lr
 80125b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80125ba:	b293      	uxth	r3, r2
 80125bc:	fb06 e303 	mla	r3, r6, r3, lr
 80125c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	ebaa 0303 	sub.w	r3, sl, r3
 80125ca:	0c12      	lsrs	r2, r2, #16
 80125cc:	f8dc a000 	ldr.w	sl, [ip]
 80125d0:	fb06 e202 	mla	r2, r6, r2, lr
 80125d4:	fa13 f38a 	uxtah	r3, r3, sl
 80125d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80125dc:	fa1f fa82 	uxth.w	sl, r2
 80125e0:	f8dc 2000 	ldr.w	r2, [ip]
 80125e4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80125e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125f2:	4581      	cmp	r9, r0
 80125f4:	f84c 3b04 	str.w	r3, [ip], #4
 80125f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80125fc:	d2db      	bcs.n	80125b6 <quorem+0x44>
 80125fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8012602:	b92b      	cbnz	r3, 8012610 <quorem+0x9e>
 8012604:	9b01      	ldr	r3, [sp, #4]
 8012606:	3b04      	subs	r3, #4
 8012608:	429d      	cmp	r5, r3
 801260a:	461a      	mov	r2, r3
 801260c:	d32e      	bcc.n	801266c <quorem+0xfa>
 801260e:	613c      	str	r4, [r7, #16]
 8012610:	4638      	mov	r0, r7
 8012612:	f001 feb7 	bl	8014384 <__mcmp>
 8012616:	2800      	cmp	r0, #0
 8012618:	db24      	blt.n	8012664 <quorem+0xf2>
 801261a:	3601      	adds	r6, #1
 801261c:	4628      	mov	r0, r5
 801261e:	f04f 0c00 	mov.w	ip, #0
 8012622:	f858 2b04 	ldr.w	r2, [r8], #4
 8012626:	f8d0 e000 	ldr.w	lr, [r0]
 801262a:	b293      	uxth	r3, r2
 801262c:	ebac 0303 	sub.w	r3, ip, r3
 8012630:	0c12      	lsrs	r2, r2, #16
 8012632:	fa13 f38e 	uxtah	r3, r3, lr
 8012636:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801263a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801263e:	b29b      	uxth	r3, r3
 8012640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012644:	45c1      	cmp	r9, r8
 8012646:	f840 3b04 	str.w	r3, [r0], #4
 801264a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801264e:	d2e8      	bcs.n	8012622 <quorem+0xb0>
 8012650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012658:	b922      	cbnz	r2, 8012664 <quorem+0xf2>
 801265a:	3b04      	subs	r3, #4
 801265c:	429d      	cmp	r5, r3
 801265e:	461a      	mov	r2, r3
 8012660:	d30a      	bcc.n	8012678 <quorem+0x106>
 8012662:	613c      	str	r4, [r7, #16]
 8012664:	4630      	mov	r0, r6
 8012666:	b003      	add	sp, #12
 8012668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801266c:	6812      	ldr	r2, [r2, #0]
 801266e:	3b04      	subs	r3, #4
 8012670:	2a00      	cmp	r2, #0
 8012672:	d1cc      	bne.n	801260e <quorem+0x9c>
 8012674:	3c01      	subs	r4, #1
 8012676:	e7c7      	b.n	8012608 <quorem+0x96>
 8012678:	6812      	ldr	r2, [r2, #0]
 801267a:	3b04      	subs	r3, #4
 801267c:	2a00      	cmp	r2, #0
 801267e:	d1f0      	bne.n	8012662 <quorem+0xf0>
 8012680:	3c01      	subs	r4, #1
 8012682:	e7eb      	b.n	801265c <quorem+0xea>
 8012684:	2000      	movs	r0, #0
 8012686:	e7ee      	b.n	8012666 <quorem+0xf4>

08012688 <_dtoa_r>:
 8012688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268c:	ed2d 8b02 	vpush	{d8}
 8012690:	ec57 6b10 	vmov	r6, r7, d0
 8012694:	b095      	sub	sp, #84	; 0x54
 8012696:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012698:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801269c:	9105      	str	r1, [sp, #20]
 801269e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80126a2:	4604      	mov	r4, r0
 80126a4:	9209      	str	r2, [sp, #36]	; 0x24
 80126a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80126a8:	b975      	cbnz	r5, 80126c8 <_dtoa_r+0x40>
 80126aa:	2010      	movs	r0, #16
 80126ac:	f7fd ff14 	bl	80104d8 <malloc>
 80126b0:	4602      	mov	r2, r0
 80126b2:	6260      	str	r0, [r4, #36]	; 0x24
 80126b4:	b920      	cbnz	r0, 80126c0 <_dtoa_r+0x38>
 80126b6:	4bb2      	ldr	r3, [pc, #712]	; (8012980 <_dtoa_r+0x2f8>)
 80126b8:	21ea      	movs	r1, #234	; 0xea
 80126ba:	48b2      	ldr	r0, [pc, #712]	; (8012984 <_dtoa_r+0x2fc>)
 80126bc:	f7fd feb2 	bl	8010424 <__assert_func>
 80126c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80126c4:	6005      	str	r5, [r0, #0]
 80126c6:	60c5      	str	r5, [r0, #12]
 80126c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126ca:	6819      	ldr	r1, [r3, #0]
 80126cc:	b151      	cbz	r1, 80126e4 <_dtoa_r+0x5c>
 80126ce:	685a      	ldr	r2, [r3, #4]
 80126d0:	604a      	str	r2, [r1, #4]
 80126d2:	2301      	movs	r3, #1
 80126d4:	4093      	lsls	r3, r2
 80126d6:	608b      	str	r3, [r1, #8]
 80126d8:	4620      	mov	r0, r4
 80126da:	f001 fbcb 	bl	8013e74 <_Bfree>
 80126de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126e0:	2200      	movs	r2, #0
 80126e2:	601a      	str	r2, [r3, #0]
 80126e4:	1e3b      	subs	r3, r7, #0
 80126e6:	bfb9      	ittee	lt
 80126e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80126ec:	9303      	strlt	r3, [sp, #12]
 80126ee:	2300      	movge	r3, #0
 80126f0:	f8c8 3000 	strge.w	r3, [r8]
 80126f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80126f8:	4ba3      	ldr	r3, [pc, #652]	; (8012988 <_dtoa_r+0x300>)
 80126fa:	bfbc      	itt	lt
 80126fc:	2201      	movlt	r2, #1
 80126fe:	f8c8 2000 	strlt.w	r2, [r8]
 8012702:	ea33 0309 	bics.w	r3, r3, r9
 8012706:	d11b      	bne.n	8012740 <_dtoa_r+0xb8>
 8012708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801270a:	f242 730f 	movw	r3, #9999	; 0x270f
 801270e:	6013      	str	r3, [r2, #0]
 8012710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012714:	4333      	orrs	r3, r6
 8012716:	f000 857a 	beq.w	801320e <_dtoa_r+0xb86>
 801271a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801271c:	b963      	cbnz	r3, 8012738 <_dtoa_r+0xb0>
 801271e:	4b9b      	ldr	r3, [pc, #620]	; (801298c <_dtoa_r+0x304>)
 8012720:	e024      	b.n	801276c <_dtoa_r+0xe4>
 8012722:	4b9b      	ldr	r3, [pc, #620]	; (8012990 <_dtoa_r+0x308>)
 8012724:	9300      	str	r3, [sp, #0]
 8012726:	3308      	adds	r3, #8
 8012728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801272a:	6013      	str	r3, [r2, #0]
 801272c:	9800      	ldr	r0, [sp, #0]
 801272e:	b015      	add	sp, #84	; 0x54
 8012730:	ecbd 8b02 	vpop	{d8}
 8012734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012738:	4b94      	ldr	r3, [pc, #592]	; (801298c <_dtoa_r+0x304>)
 801273a:	9300      	str	r3, [sp, #0]
 801273c:	3303      	adds	r3, #3
 801273e:	e7f3      	b.n	8012728 <_dtoa_r+0xa0>
 8012740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012744:	2200      	movs	r2, #0
 8012746:	ec51 0b17 	vmov	r0, r1, d7
 801274a:	2300      	movs	r3, #0
 801274c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012750:	f7ee f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8012754:	4680      	mov	r8, r0
 8012756:	b158      	cbz	r0, 8012770 <_dtoa_r+0xe8>
 8012758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801275a:	2301      	movs	r3, #1
 801275c:	6013      	str	r3, [r2, #0]
 801275e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012760:	2b00      	cmp	r3, #0
 8012762:	f000 8551 	beq.w	8013208 <_dtoa_r+0xb80>
 8012766:	488b      	ldr	r0, [pc, #556]	; (8012994 <_dtoa_r+0x30c>)
 8012768:	6018      	str	r0, [r3, #0]
 801276a:	1e43      	subs	r3, r0, #1
 801276c:	9300      	str	r3, [sp, #0]
 801276e:	e7dd      	b.n	801272c <_dtoa_r+0xa4>
 8012770:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012774:	aa12      	add	r2, sp, #72	; 0x48
 8012776:	a913      	add	r1, sp, #76	; 0x4c
 8012778:	4620      	mov	r0, r4
 801277a:	f001 ff23 	bl	80145c4 <__d2b>
 801277e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012782:	4683      	mov	fp, r0
 8012784:	2d00      	cmp	r5, #0
 8012786:	d07c      	beq.n	8012882 <_dtoa_r+0x1fa>
 8012788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801278a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801278e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012792:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012796:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801279a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801279e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80127a2:	4b7d      	ldr	r3, [pc, #500]	; (8012998 <_dtoa_r+0x310>)
 80127a4:	2200      	movs	r2, #0
 80127a6:	4630      	mov	r0, r6
 80127a8:	4639      	mov	r1, r7
 80127aa:	f7ed fd7d 	bl	80002a8 <__aeabi_dsub>
 80127ae:	a36e      	add	r3, pc, #440	; (adr r3, 8012968 <_dtoa_r+0x2e0>)
 80127b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b4:	f7ed ff30 	bl	8000618 <__aeabi_dmul>
 80127b8:	a36d      	add	r3, pc, #436	; (adr r3, 8012970 <_dtoa_r+0x2e8>)
 80127ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127be:	f7ed fd75 	bl	80002ac <__adddf3>
 80127c2:	4606      	mov	r6, r0
 80127c4:	4628      	mov	r0, r5
 80127c6:	460f      	mov	r7, r1
 80127c8:	f7ed febc 	bl	8000544 <__aeabi_i2d>
 80127cc:	a36a      	add	r3, pc, #424	; (adr r3, 8012978 <_dtoa_r+0x2f0>)
 80127ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d2:	f7ed ff21 	bl	8000618 <__aeabi_dmul>
 80127d6:	4602      	mov	r2, r0
 80127d8:	460b      	mov	r3, r1
 80127da:	4630      	mov	r0, r6
 80127dc:	4639      	mov	r1, r7
 80127de:	f7ed fd65 	bl	80002ac <__adddf3>
 80127e2:	4606      	mov	r6, r0
 80127e4:	460f      	mov	r7, r1
 80127e6:	f7ee f9c7 	bl	8000b78 <__aeabi_d2iz>
 80127ea:	2200      	movs	r2, #0
 80127ec:	4682      	mov	sl, r0
 80127ee:	2300      	movs	r3, #0
 80127f0:	4630      	mov	r0, r6
 80127f2:	4639      	mov	r1, r7
 80127f4:	f7ee f982 	bl	8000afc <__aeabi_dcmplt>
 80127f8:	b148      	cbz	r0, 801280e <_dtoa_r+0x186>
 80127fa:	4650      	mov	r0, sl
 80127fc:	f7ed fea2 	bl	8000544 <__aeabi_i2d>
 8012800:	4632      	mov	r2, r6
 8012802:	463b      	mov	r3, r7
 8012804:	f7ee f970 	bl	8000ae8 <__aeabi_dcmpeq>
 8012808:	b908      	cbnz	r0, 801280e <_dtoa_r+0x186>
 801280a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801280e:	f1ba 0f16 	cmp.w	sl, #22
 8012812:	d854      	bhi.n	80128be <_dtoa_r+0x236>
 8012814:	4b61      	ldr	r3, [pc, #388]	; (801299c <_dtoa_r+0x314>)
 8012816:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012822:	f7ee f96b 	bl	8000afc <__aeabi_dcmplt>
 8012826:	2800      	cmp	r0, #0
 8012828:	d04b      	beq.n	80128c2 <_dtoa_r+0x23a>
 801282a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801282e:	2300      	movs	r3, #0
 8012830:	930e      	str	r3, [sp, #56]	; 0x38
 8012832:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012834:	1b5d      	subs	r5, r3, r5
 8012836:	1e6b      	subs	r3, r5, #1
 8012838:	9304      	str	r3, [sp, #16]
 801283a:	bf43      	ittte	mi
 801283c:	2300      	movmi	r3, #0
 801283e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012842:	9304      	strmi	r3, [sp, #16]
 8012844:	f04f 0800 	movpl.w	r8, #0
 8012848:	f1ba 0f00 	cmp.w	sl, #0
 801284c:	db3b      	blt.n	80128c6 <_dtoa_r+0x23e>
 801284e:	9b04      	ldr	r3, [sp, #16]
 8012850:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012854:	4453      	add	r3, sl
 8012856:	9304      	str	r3, [sp, #16]
 8012858:	2300      	movs	r3, #0
 801285a:	9306      	str	r3, [sp, #24]
 801285c:	9b05      	ldr	r3, [sp, #20]
 801285e:	2b09      	cmp	r3, #9
 8012860:	d869      	bhi.n	8012936 <_dtoa_r+0x2ae>
 8012862:	2b05      	cmp	r3, #5
 8012864:	bfc4      	itt	gt
 8012866:	3b04      	subgt	r3, #4
 8012868:	9305      	strgt	r3, [sp, #20]
 801286a:	9b05      	ldr	r3, [sp, #20]
 801286c:	f1a3 0302 	sub.w	r3, r3, #2
 8012870:	bfcc      	ite	gt
 8012872:	2500      	movgt	r5, #0
 8012874:	2501      	movle	r5, #1
 8012876:	2b03      	cmp	r3, #3
 8012878:	d869      	bhi.n	801294e <_dtoa_r+0x2c6>
 801287a:	e8df f003 	tbb	[pc, r3]
 801287e:	4e2c      	.short	0x4e2c
 8012880:	5a4c      	.short	0x5a4c
 8012882:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012886:	441d      	add	r5, r3
 8012888:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801288c:	2b20      	cmp	r3, #32
 801288e:	bfc1      	itttt	gt
 8012890:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012894:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012898:	fa09 f303 	lslgt.w	r3, r9, r3
 801289c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80128a0:	bfda      	itte	le
 80128a2:	f1c3 0320 	rsble	r3, r3, #32
 80128a6:	fa06 f003 	lslle.w	r0, r6, r3
 80128aa:	4318      	orrgt	r0, r3
 80128ac:	f7ed fe3a 	bl	8000524 <__aeabi_ui2d>
 80128b0:	2301      	movs	r3, #1
 80128b2:	4606      	mov	r6, r0
 80128b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80128b8:	3d01      	subs	r5, #1
 80128ba:	9310      	str	r3, [sp, #64]	; 0x40
 80128bc:	e771      	b.n	80127a2 <_dtoa_r+0x11a>
 80128be:	2301      	movs	r3, #1
 80128c0:	e7b6      	b.n	8012830 <_dtoa_r+0x1a8>
 80128c2:	900e      	str	r0, [sp, #56]	; 0x38
 80128c4:	e7b5      	b.n	8012832 <_dtoa_r+0x1aa>
 80128c6:	f1ca 0300 	rsb	r3, sl, #0
 80128ca:	9306      	str	r3, [sp, #24]
 80128cc:	2300      	movs	r3, #0
 80128ce:	eba8 080a 	sub.w	r8, r8, sl
 80128d2:	930d      	str	r3, [sp, #52]	; 0x34
 80128d4:	e7c2      	b.n	801285c <_dtoa_r+0x1d4>
 80128d6:	2300      	movs	r3, #0
 80128d8:	9308      	str	r3, [sp, #32]
 80128da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128dc:	2b00      	cmp	r3, #0
 80128de:	dc39      	bgt.n	8012954 <_dtoa_r+0x2cc>
 80128e0:	f04f 0901 	mov.w	r9, #1
 80128e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80128e8:	464b      	mov	r3, r9
 80128ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80128ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80128f0:	2200      	movs	r2, #0
 80128f2:	6042      	str	r2, [r0, #4]
 80128f4:	2204      	movs	r2, #4
 80128f6:	f102 0614 	add.w	r6, r2, #20
 80128fa:	429e      	cmp	r6, r3
 80128fc:	6841      	ldr	r1, [r0, #4]
 80128fe:	d92f      	bls.n	8012960 <_dtoa_r+0x2d8>
 8012900:	4620      	mov	r0, r4
 8012902:	f001 fa77 	bl	8013df4 <_Balloc>
 8012906:	9000      	str	r0, [sp, #0]
 8012908:	2800      	cmp	r0, #0
 801290a:	d14b      	bne.n	80129a4 <_dtoa_r+0x31c>
 801290c:	4b24      	ldr	r3, [pc, #144]	; (80129a0 <_dtoa_r+0x318>)
 801290e:	4602      	mov	r2, r0
 8012910:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012914:	e6d1      	b.n	80126ba <_dtoa_r+0x32>
 8012916:	2301      	movs	r3, #1
 8012918:	e7de      	b.n	80128d8 <_dtoa_r+0x250>
 801291a:	2300      	movs	r3, #0
 801291c:	9308      	str	r3, [sp, #32]
 801291e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012920:	eb0a 0903 	add.w	r9, sl, r3
 8012924:	f109 0301 	add.w	r3, r9, #1
 8012928:	2b01      	cmp	r3, #1
 801292a:	9301      	str	r3, [sp, #4]
 801292c:	bfb8      	it	lt
 801292e:	2301      	movlt	r3, #1
 8012930:	e7dd      	b.n	80128ee <_dtoa_r+0x266>
 8012932:	2301      	movs	r3, #1
 8012934:	e7f2      	b.n	801291c <_dtoa_r+0x294>
 8012936:	2501      	movs	r5, #1
 8012938:	2300      	movs	r3, #0
 801293a:	9305      	str	r3, [sp, #20]
 801293c:	9508      	str	r5, [sp, #32]
 801293e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8012942:	2200      	movs	r2, #0
 8012944:	f8cd 9004 	str.w	r9, [sp, #4]
 8012948:	2312      	movs	r3, #18
 801294a:	9209      	str	r2, [sp, #36]	; 0x24
 801294c:	e7cf      	b.n	80128ee <_dtoa_r+0x266>
 801294e:	2301      	movs	r3, #1
 8012950:	9308      	str	r3, [sp, #32]
 8012952:	e7f4      	b.n	801293e <_dtoa_r+0x2b6>
 8012954:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012958:	f8cd 9004 	str.w	r9, [sp, #4]
 801295c:	464b      	mov	r3, r9
 801295e:	e7c6      	b.n	80128ee <_dtoa_r+0x266>
 8012960:	3101      	adds	r1, #1
 8012962:	6041      	str	r1, [r0, #4]
 8012964:	0052      	lsls	r2, r2, #1
 8012966:	e7c6      	b.n	80128f6 <_dtoa_r+0x26e>
 8012968:	636f4361 	.word	0x636f4361
 801296c:	3fd287a7 	.word	0x3fd287a7
 8012970:	8b60c8b3 	.word	0x8b60c8b3
 8012974:	3fc68a28 	.word	0x3fc68a28
 8012978:	509f79fb 	.word	0x509f79fb
 801297c:	3fd34413 	.word	0x3fd34413
 8012980:	0805fbee 	.word	0x0805fbee
 8012984:	0805fc05 	.word	0x0805fc05
 8012988:	7ff00000 	.word	0x7ff00000
 801298c:	0805fbea 	.word	0x0805fbea
 8012990:	0805fbe1 	.word	0x0805fbe1
 8012994:	0805fa66 	.word	0x0805fa66
 8012998:	3ff80000 	.word	0x3ff80000
 801299c:	0805fde0 	.word	0x0805fde0
 80129a0:	0805fc64 	.word	0x0805fc64
 80129a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129a6:	9a00      	ldr	r2, [sp, #0]
 80129a8:	601a      	str	r2, [r3, #0]
 80129aa:	9b01      	ldr	r3, [sp, #4]
 80129ac:	2b0e      	cmp	r3, #14
 80129ae:	f200 80ad 	bhi.w	8012b0c <_dtoa_r+0x484>
 80129b2:	2d00      	cmp	r5, #0
 80129b4:	f000 80aa 	beq.w	8012b0c <_dtoa_r+0x484>
 80129b8:	f1ba 0f00 	cmp.w	sl, #0
 80129bc:	dd36      	ble.n	8012a2c <_dtoa_r+0x3a4>
 80129be:	4ac3      	ldr	r2, [pc, #780]	; (8012ccc <_dtoa_r+0x644>)
 80129c0:	f00a 030f 	and.w	r3, sl, #15
 80129c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80129c8:	ed93 7b00 	vldr	d7, [r3]
 80129cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80129d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80129d4:	eeb0 8a47 	vmov.f32	s16, s14
 80129d8:	eef0 8a67 	vmov.f32	s17, s15
 80129dc:	d016      	beq.n	8012a0c <_dtoa_r+0x384>
 80129de:	4bbc      	ldr	r3, [pc, #752]	; (8012cd0 <_dtoa_r+0x648>)
 80129e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80129e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80129e8:	f7ed ff40 	bl	800086c <__aeabi_ddiv>
 80129ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129f0:	f007 070f 	and.w	r7, r7, #15
 80129f4:	2503      	movs	r5, #3
 80129f6:	4eb6      	ldr	r6, [pc, #728]	; (8012cd0 <_dtoa_r+0x648>)
 80129f8:	b957      	cbnz	r7, 8012a10 <_dtoa_r+0x388>
 80129fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129fe:	ec53 2b18 	vmov	r2, r3, d8
 8012a02:	f7ed ff33 	bl	800086c <__aeabi_ddiv>
 8012a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a0a:	e029      	b.n	8012a60 <_dtoa_r+0x3d8>
 8012a0c:	2502      	movs	r5, #2
 8012a0e:	e7f2      	b.n	80129f6 <_dtoa_r+0x36e>
 8012a10:	07f9      	lsls	r1, r7, #31
 8012a12:	d508      	bpl.n	8012a26 <_dtoa_r+0x39e>
 8012a14:	ec51 0b18 	vmov	r0, r1, d8
 8012a18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a1c:	f7ed fdfc 	bl	8000618 <__aeabi_dmul>
 8012a20:	ec41 0b18 	vmov	d8, r0, r1
 8012a24:	3501      	adds	r5, #1
 8012a26:	107f      	asrs	r7, r7, #1
 8012a28:	3608      	adds	r6, #8
 8012a2a:	e7e5      	b.n	80129f8 <_dtoa_r+0x370>
 8012a2c:	f000 80a6 	beq.w	8012b7c <_dtoa_r+0x4f4>
 8012a30:	f1ca 0600 	rsb	r6, sl, #0
 8012a34:	4ba5      	ldr	r3, [pc, #660]	; (8012ccc <_dtoa_r+0x644>)
 8012a36:	4fa6      	ldr	r7, [pc, #664]	; (8012cd0 <_dtoa_r+0x648>)
 8012a38:	f006 020f 	and.w	r2, r6, #15
 8012a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012a48:	f7ed fde6 	bl	8000618 <__aeabi_dmul>
 8012a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a50:	1136      	asrs	r6, r6, #4
 8012a52:	2300      	movs	r3, #0
 8012a54:	2502      	movs	r5, #2
 8012a56:	2e00      	cmp	r6, #0
 8012a58:	f040 8085 	bne.w	8012b66 <_dtoa_r+0x4de>
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d1d2      	bne.n	8012a06 <_dtoa_r+0x37e>
 8012a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f000 808c 	beq.w	8012b80 <_dtoa_r+0x4f8>
 8012a68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012a6c:	4b99      	ldr	r3, [pc, #612]	; (8012cd4 <_dtoa_r+0x64c>)
 8012a6e:	2200      	movs	r2, #0
 8012a70:	4630      	mov	r0, r6
 8012a72:	4639      	mov	r1, r7
 8012a74:	f7ee f842 	bl	8000afc <__aeabi_dcmplt>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	f000 8081 	beq.w	8012b80 <_dtoa_r+0x4f8>
 8012a7e:	9b01      	ldr	r3, [sp, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d07d      	beq.n	8012b80 <_dtoa_r+0x4f8>
 8012a84:	f1b9 0f00 	cmp.w	r9, #0
 8012a88:	dd3c      	ble.n	8012b04 <_dtoa_r+0x47c>
 8012a8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012a8e:	9307      	str	r3, [sp, #28]
 8012a90:	2200      	movs	r2, #0
 8012a92:	4b91      	ldr	r3, [pc, #580]	; (8012cd8 <_dtoa_r+0x650>)
 8012a94:	4630      	mov	r0, r6
 8012a96:	4639      	mov	r1, r7
 8012a98:	f7ed fdbe 	bl	8000618 <__aeabi_dmul>
 8012a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012aa0:	3501      	adds	r5, #1
 8012aa2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012aa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012aaa:	4628      	mov	r0, r5
 8012aac:	f7ed fd4a 	bl	8000544 <__aeabi_i2d>
 8012ab0:	4632      	mov	r2, r6
 8012ab2:	463b      	mov	r3, r7
 8012ab4:	f7ed fdb0 	bl	8000618 <__aeabi_dmul>
 8012ab8:	4b88      	ldr	r3, [pc, #544]	; (8012cdc <_dtoa_r+0x654>)
 8012aba:	2200      	movs	r2, #0
 8012abc:	f7ed fbf6 	bl	80002ac <__adddf3>
 8012ac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ac8:	9303      	str	r3, [sp, #12]
 8012aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d15c      	bne.n	8012b8a <_dtoa_r+0x502>
 8012ad0:	4b83      	ldr	r3, [pc, #524]	; (8012ce0 <_dtoa_r+0x658>)
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	4639      	mov	r1, r7
 8012ad8:	f7ed fbe6 	bl	80002a8 <__aeabi_dsub>
 8012adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ae0:	4606      	mov	r6, r0
 8012ae2:	460f      	mov	r7, r1
 8012ae4:	f7ee f828 	bl	8000b38 <__aeabi_dcmpgt>
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	f040 8296 	bne.w	801301a <_dtoa_r+0x992>
 8012aee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012af2:	4630      	mov	r0, r6
 8012af4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012af8:	4639      	mov	r1, r7
 8012afa:	f7ed ffff 	bl	8000afc <__aeabi_dcmplt>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	f040 8288 	bne.w	8013014 <_dtoa_r+0x98c>
 8012b04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012b08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	f2c0 8158 	blt.w	8012dc4 <_dtoa_r+0x73c>
 8012b14:	f1ba 0f0e 	cmp.w	sl, #14
 8012b18:	f300 8154 	bgt.w	8012dc4 <_dtoa_r+0x73c>
 8012b1c:	4b6b      	ldr	r3, [pc, #428]	; (8012ccc <_dtoa_r+0x644>)
 8012b1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	f280 80e3 	bge.w	8012cf4 <_dtoa_r+0x66c>
 8012b2e:	9b01      	ldr	r3, [sp, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	f300 80df 	bgt.w	8012cf4 <_dtoa_r+0x66c>
 8012b36:	f040 826d 	bne.w	8013014 <_dtoa_r+0x98c>
 8012b3a:	4b69      	ldr	r3, [pc, #420]	; (8012ce0 <_dtoa_r+0x658>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	4640      	mov	r0, r8
 8012b40:	4649      	mov	r1, r9
 8012b42:	f7ed fd69 	bl	8000618 <__aeabi_dmul>
 8012b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b4a:	f7ed ffeb 	bl	8000b24 <__aeabi_dcmpge>
 8012b4e:	9e01      	ldr	r6, [sp, #4]
 8012b50:	4637      	mov	r7, r6
 8012b52:	2800      	cmp	r0, #0
 8012b54:	f040 8243 	bne.w	8012fde <_dtoa_r+0x956>
 8012b58:	9d00      	ldr	r5, [sp, #0]
 8012b5a:	2331      	movs	r3, #49	; 0x31
 8012b5c:	f805 3b01 	strb.w	r3, [r5], #1
 8012b60:	f10a 0a01 	add.w	sl, sl, #1
 8012b64:	e23f      	b.n	8012fe6 <_dtoa_r+0x95e>
 8012b66:	07f2      	lsls	r2, r6, #31
 8012b68:	d505      	bpl.n	8012b76 <_dtoa_r+0x4ee>
 8012b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b6e:	f7ed fd53 	bl	8000618 <__aeabi_dmul>
 8012b72:	3501      	adds	r5, #1
 8012b74:	2301      	movs	r3, #1
 8012b76:	1076      	asrs	r6, r6, #1
 8012b78:	3708      	adds	r7, #8
 8012b7a:	e76c      	b.n	8012a56 <_dtoa_r+0x3ce>
 8012b7c:	2502      	movs	r5, #2
 8012b7e:	e76f      	b.n	8012a60 <_dtoa_r+0x3d8>
 8012b80:	9b01      	ldr	r3, [sp, #4]
 8012b82:	f8cd a01c 	str.w	sl, [sp, #28]
 8012b86:	930c      	str	r3, [sp, #48]	; 0x30
 8012b88:	e78d      	b.n	8012aa6 <_dtoa_r+0x41e>
 8012b8a:	9900      	ldr	r1, [sp, #0]
 8012b8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b90:	4b4e      	ldr	r3, [pc, #312]	; (8012ccc <_dtoa_r+0x644>)
 8012b92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b96:	4401      	add	r1, r0
 8012b98:	9102      	str	r1, [sp, #8]
 8012b9a:	9908      	ldr	r1, [sp, #32]
 8012b9c:	eeb0 8a47 	vmov.f32	s16, s14
 8012ba0:	eef0 8a67 	vmov.f32	s17, s15
 8012ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ba8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012bac:	2900      	cmp	r1, #0
 8012bae:	d045      	beq.n	8012c3c <_dtoa_r+0x5b4>
 8012bb0:	494c      	ldr	r1, [pc, #304]	; (8012ce4 <_dtoa_r+0x65c>)
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	f7ed fe5a 	bl	800086c <__aeabi_ddiv>
 8012bb8:	ec53 2b18 	vmov	r2, r3, d8
 8012bbc:	f7ed fb74 	bl	80002a8 <__aeabi_dsub>
 8012bc0:	9d00      	ldr	r5, [sp, #0]
 8012bc2:	ec41 0b18 	vmov	d8, r0, r1
 8012bc6:	4639      	mov	r1, r7
 8012bc8:	4630      	mov	r0, r6
 8012bca:	f7ed ffd5 	bl	8000b78 <__aeabi_d2iz>
 8012bce:	900c      	str	r0, [sp, #48]	; 0x30
 8012bd0:	f7ed fcb8 	bl	8000544 <__aeabi_i2d>
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	460b      	mov	r3, r1
 8012bd8:	4630      	mov	r0, r6
 8012bda:	4639      	mov	r1, r7
 8012bdc:	f7ed fb64 	bl	80002a8 <__aeabi_dsub>
 8012be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012be2:	3330      	adds	r3, #48	; 0x30
 8012be4:	f805 3b01 	strb.w	r3, [r5], #1
 8012be8:	ec53 2b18 	vmov	r2, r3, d8
 8012bec:	4606      	mov	r6, r0
 8012bee:	460f      	mov	r7, r1
 8012bf0:	f7ed ff84 	bl	8000afc <__aeabi_dcmplt>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	d165      	bne.n	8012cc4 <_dtoa_r+0x63c>
 8012bf8:	4632      	mov	r2, r6
 8012bfa:	463b      	mov	r3, r7
 8012bfc:	4935      	ldr	r1, [pc, #212]	; (8012cd4 <_dtoa_r+0x64c>)
 8012bfe:	2000      	movs	r0, #0
 8012c00:	f7ed fb52 	bl	80002a8 <__aeabi_dsub>
 8012c04:	ec53 2b18 	vmov	r2, r3, d8
 8012c08:	f7ed ff78 	bl	8000afc <__aeabi_dcmplt>
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	f040 80b9 	bne.w	8012d84 <_dtoa_r+0x6fc>
 8012c12:	9b02      	ldr	r3, [sp, #8]
 8012c14:	429d      	cmp	r5, r3
 8012c16:	f43f af75 	beq.w	8012b04 <_dtoa_r+0x47c>
 8012c1a:	4b2f      	ldr	r3, [pc, #188]	; (8012cd8 <_dtoa_r+0x650>)
 8012c1c:	ec51 0b18 	vmov	r0, r1, d8
 8012c20:	2200      	movs	r2, #0
 8012c22:	f7ed fcf9 	bl	8000618 <__aeabi_dmul>
 8012c26:	4b2c      	ldr	r3, [pc, #176]	; (8012cd8 <_dtoa_r+0x650>)
 8012c28:	ec41 0b18 	vmov	d8, r0, r1
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	4630      	mov	r0, r6
 8012c30:	4639      	mov	r1, r7
 8012c32:	f7ed fcf1 	bl	8000618 <__aeabi_dmul>
 8012c36:	4606      	mov	r6, r0
 8012c38:	460f      	mov	r7, r1
 8012c3a:	e7c4      	b.n	8012bc6 <_dtoa_r+0x53e>
 8012c3c:	ec51 0b17 	vmov	r0, r1, d7
 8012c40:	f7ed fcea 	bl	8000618 <__aeabi_dmul>
 8012c44:	9b02      	ldr	r3, [sp, #8]
 8012c46:	9d00      	ldr	r5, [sp, #0]
 8012c48:	930c      	str	r3, [sp, #48]	; 0x30
 8012c4a:	ec41 0b18 	vmov	d8, r0, r1
 8012c4e:	4639      	mov	r1, r7
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7ed ff91 	bl	8000b78 <__aeabi_d2iz>
 8012c56:	9011      	str	r0, [sp, #68]	; 0x44
 8012c58:	f7ed fc74 	bl	8000544 <__aeabi_i2d>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	4630      	mov	r0, r6
 8012c62:	4639      	mov	r1, r7
 8012c64:	f7ed fb20 	bl	80002a8 <__aeabi_dsub>
 8012c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c6a:	3330      	adds	r3, #48	; 0x30
 8012c6c:	f805 3b01 	strb.w	r3, [r5], #1
 8012c70:	9b02      	ldr	r3, [sp, #8]
 8012c72:	429d      	cmp	r5, r3
 8012c74:	4606      	mov	r6, r0
 8012c76:	460f      	mov	r7, r1
 8012c78:	f04f 0200 	mov.w	r2, #0
 8012c7c:	d134      	bne.n	8012ce8 <_dtoa_r+0x660>
 8012c7e:	4b19      	ldr	r3, [pc, #100]	; (8012ce4 <_dtoa_r+0x65c>)
 8012c80:	ec51 0b18 	vmov	r0, r1, d8
 8012c84:	f7ed fb12 	bl	80002ac <__adddf3>
 8012c88:	4602      	mov	r2, r0
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	4639      	mov	r1, r7
 8012c90:	f7ed ff52 	bl	8000b38 <__aeabi_dcmpgt>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d175      	bne.n	8012d84 <_dtoa_r+0x6fc>
 8012c98:	ec53 2b18 	vmov	r2, r3, d8
 8012c9c:	4911      	ldr	r1, [pc, #68]	; (8012ce4 <_dtoa_r+0x65c>)
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	f7ed fb02 	bl	80002a8 <__aeabi_dsub>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	460b      	mov	r3, r1
 8012ca8:	4630      	mov	r0, r6
 8012caa:	4639      	mov	r1, r7
 8012cac:	f7ed ff26 	bl	8000afc <__aeabi_dcmplt>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	f43f af27 	beq.w	8012b04 <_dtoa_r+0x47c>
 8012cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012cb8:	1e6b      	subs	r3, r5, #1
 8012cba:	930c      	str	r3, [sp, #48]	; 0x30
 8012cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012cc0:	2b30      	cmp	r3, #48	; 0x30
 8012cc2:	d0f8      	beq.n	8012cb6 <_dtoa_r+0x62e>
 8012cc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012cc8:	e04a      	b.n	8012d60 <_dtoa_r+0x6d8>
 8012cca:	bf00      	nop
 8012ccc:	0805fde0 	.word	0x0805fde0
 8012cd0:	0805fdb8 	.word	0x0805fdb8
 8012cd4:	3ff00000 	.word	0x3ff00000
 8012cd8:	40240000 	.word	0x40240000
 8012cdc:	401c0000 	.word	0x401c0000
 8012ce0:	40140000 	.word	0x40140000
 8012ce4:	3fe00000 	.word	0x3fe00000
 8012ce8:	4baf      	ldr	r3, [pc, #700]	; (8012fa8 <_dtoa_r+0x920>)
 8012cea:	f7ed fc95 	bl	8000618 <__aeabi_dmul>
 8012cee:	4606      	mov	r6, r0
 8012cf0:	460f      	mov	r7, r1
 8012cf2:	e7ac      	b.n	8012c4e <_dtoa_r+0x5c6>
 8012cf4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012cf8:	9d00      	ldr	r5, [sp, #0]
 8012cfa:	4642      	mov	r2, r8
 8012cfc:	464b      	mov	r3, r9
 8012cfe:	4630      	mov	r0, r6
 8012d00:	4639      	mov	r1, r7
 8012d02:	f7ed fdb3 	bl	800086c <__aeabi_ddiv>
 8012d06:	f7ed ff37 	bl	8000b78 <__aeabi_d2iz>
 8012d0a:	9002      	str	r0, [sp, #8]
 8012d0c:	f7ed fc1a 	bl	8000544 <__aeabi_i2d>
 8012d10:	4642      	mov	r2, r8
 8012d12:	464b      	mov	r3, r9
 8012d14:	f7ed fc80 	bl	8000618 <__aeabi_dmul>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	460b      	mov	r3, r1
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	4639      	mov	r1, r7
 8012d20:	f7ed fac2 	bl	80002a8 <__aeabi_dsub>
 8012d24:	9e02      	ldr	r6, [sp, #8]
 8012d26:	9f01      	ldr	r7, [sp, #4]
 8012d28:	3630      	adds	r6, #48	; 0x30
 8012d2a:	f805 6b01 	strb.w	r6, [r5], #1
 8012d2e:	9e00      	ldr	r6, [sp, #0]
 8012d30:	1bae      	subs	r6, r5, r6
 8012d32:	42b7      	cmp	r7, r6
 8012d34:	4602      	mov	r2, r0
 8012d36:	460b      	mov	r3, r1
 8012d38:	d137      	bne.n	8012daa <_dtoa_r+0x722>
 8012d3a:	f7ed fab7 	bl	80002ac <__adddf3>
 8012d3e:	4642      	mov	r2, r8
 8012d40:	464b      	mov	r3, r9
 8012d42:	4606      	mov	r6, r0
 8012d44:	460f      	mov	r7, r1
 8012d46:	f7ed fef7 	bl	8000b38 <__aeabi_dcmpgt>
 8012d4a:	b9c8      	cbnz	r0, 8012d80 <_dtoa_r+0x6f8>
 8012d4c:	4642      	mov	r2, r8
 8012d4e:	464b      	mov	r3, r9
 8012d50:	4630      	mov	r0, r6
 8012d52:	4639      	mov	r1, r7
 8012d54:	f7ed fec8 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d58:	b110      	cbz	r0, 8012d60 <_dtoa_r+0x6d8>
 8012d5a:	9b02      	ldr	r3, [sp, #8]
 8012d5c:	07d9      	lsls	r1, r3, #31
 8012d5e:	d40f      	bmi.n	8012d80 <_dtoa_r+0x6f8>
 8012d60:	4620      	mov	r0, r4
 8012d62:	4659      	mov	r1, fp
 8012d64:	f001 f886 	bl	8013e74 <_Bfree>
 8012d68:	2300      	movs	r3, #0
 8012d6a:	702b      	strb	r3, [r5, #0]
 8012d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d6e:	f10a 0001 	add.w	r0, sl, #1
 8012d72:	6018      	str	r0, [r3, #0]
 8012d74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	f43f acd8 	beq.w	801272c <_dtoa_r+0xa4>
 8012d7c:	601d      	str	r5, [r3, #0]
 8012d7e:	e4d5      	b.n	801272c <_dtoa_r+0xa4>
 8012d80:	f8cd a01c 	str.w	sl, [sp, #28]
 8012d84:	462b      	mov	r3, r5
 8012d86:	461d      	mov	r5, r3
 8012d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d8c:	2a39      	cmp	r2, #57	; 0x39
 8012d8e:	d108      	bne.n	8012da2 <_dtoa_r+0x71a>
 8012d90:	9a00      	ldr	r2, [sp, #0]
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d1f7      	bne.n	8012d86 <_dtoa_r+0x6fe>
 8012d96:	9a07      	ldr	r2, [sp, #28]
 8012d98:	9900      	ldr	r1, [sp, #0]
 8012d9a:	3201      	adds	r2, #1
 8012d9c:	9207      	str	r2, [sp, #28]
 8012d9e:	2230      	movs	r2, #48	; 0x30
 8012da0:	700a      	strb	r2, [r1, #0]
 8012da2:	781a      	ldrb	r2, [r3, #0]
 8012da4:	3201      	adds	r2, #1
 8012da6:	701a      	strb	r2, [r3, #0]
 8012da8:	e78c      	b.n	8012cc4 <_dtoa_r+0x63c>
 8012daa:	4b7f      	ldr	r3, [pc, #508]	; (8012fa8 <_dtoa_r+0x920>)
 8012dac:	2200      	movs	r2, #0
 8012dae:	f7ed fc33 	bl	8000618 <__aeabi_dmul>
 8012db2:	2200      	movs	r2, #0
 8012db4:	2300      	movs	r3, #0
 8012db6:	4606      	mov	r6, r0
 8012db8:	460f      	mov	r7, r1
 8012dba:	f7ed fe95 	bl	8000ae8 <__aeabi_dcmpeq>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d09b      	beq.n	8012cfa <_dtoa_r+0x672>
 8012dc2:	e7cd      	b.n	8012d60 <_dtoa_r+0x6d8>
 8012dc4:	9a08      	ldr	r2, [sp, #32]
 8012dc6:	2a00      	cmp	r2, #0
 8012dc8:	f000 80c4 	beq.w	8012f54 <_dtoa_r+0x8cc>
 8012dcc:	9a05      	ldr	r2, [sp, #20]
 8012dce:	2a01      	cmp	r2, #1
 8012dd0:	f300 80a8 	bgt.w	8012f24 <_dtoa_r+0x89c>
 8012dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012dd6:	2a00      	cmp	r2, #0
 8012dd8:	f000 80a0 	beq.w	8012f1c <_dtoa_r+0x894>
 8012ddc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012de0:	9e06      	ldr	r6, [sp, #24]
 8012de2:	4645      	mov	r5, r8
 8012de4:	9a04      	ldr	r2, [sp, #16]
 8012de6:	2101      	movs	r1, #1
 8012de8:	441a      	add	r2, r3
 8012dea:	4620      	mov	r0, r4
 8012dec:	4498      	add	r8, r3
 8012dee:	9204      	str	r2, [sp, #16]
 8012df0:	f001 f946 	bl	8014080 <__i2b>
 8012df4:	4607      	mov	r7, r0
 8012df6:	2d00      	cmp	r5, #0
 8012df8:	dd0b      	ble.n	8012e12 <_dtoa_r+0x78a>
 8012dfa:	9b04      	ldr	r3, [sp, #16]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	dd08      	ble.n	8012e12 <_dtoa_r+0x78a>
 8012e00:	42ab      	cmp	r3, r5
 8012e02:	9a04      	ldr	r2, [sp, #16]
 8012e04:	bfa8      	it	ge
 8012e06:	462b      	movge	r3, r5
 8012e08:	eba8 0803 	sub.w	r8, r8, r3
 8012e0c:	1aed      	subs	r5, r5, r3
 8012e0e:	1ad3      	subs	r3, r2, r3
 8012e10:	9304      	str	r3, [sp, #16]
 8012e12:	9b06      	ldr	r3, [sp, #24]
 8012e14:	b1fb      	cbz	r3, 8012e56 <_dtoa_r+0x7ce>
 8012e16:	9b08      	ldr	r3, [sp, #32]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f000 809f 	beq.w	8012f5c <_dtoa_r+0x8d4>
 8012e1e:	2e00      	cmp	r6, #0
 8012e20:	dd11      	ble.n	8012e46 <_dtoa_r+0x7be>
 8012e22:	4639      	mov	r1, r7
 8012e24:	4632      	mov	r2, r6
 8012e26:	4620      	mov	r0, r4
 8012e28:	f001 f9e6 	bl	80141f8 <__pow5mult>
 8012e2c:	465a      	mov	r2, fp
 8012e2e:	4601      	mov	r1, r0
 8012e30:	4607      	mov	r7, r0
 8012e32:	4620      	mov	r0, r4
 8012e34:	f001 f93a 	bl	80140ac <__multiply>
 8012e38:	4659      	mov	r1, fp
 8012e3a:	9007      	str	r0, [sp, #28]
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	f001 f819 	bl	8013e74 <_Bfree>
 8012e42:	9b07      	ldr	r3, [sp, #28]
 8012e44:	469b      	mov	fp, r3
 8012e46:	9b06      	ldr	r3, [sp, #24]
 8012e48:	1b9a      	subs	r2, r3, r6
 8012e4a:	d004      	beq.n	8012e56 <_dtoa_r+0x7ce>
 8012e4c:	4659      	mov	r1, fp
 8012e4e:	4620      	mov	r0, r4
 8012e50:	f001 f9d2 	bl	80141f8 <__pow5mult>
 8012e54:	4683      	mov	fp, r0
 8012e56:	2101      	movs	r1, #1
 8012e58:	4620      	mov	r0, r4
 8012e5a:	f001 f911 	bl	8014080 <__i2b>
 8012e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	4606      	mov	r6, r0
 8012e64:	dd7c      	ble.n	8012f60 <_dtoa_r+0x8d8>
 8012e66:	461a      	mov	r2, r3
 8012e68:	4601      	mov	r1, r0
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	f001 f9c4 	bl	80141f8 <__pow5mult>
 8012e70:	9b05      	ldr	r3, [sp, #20]
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	4606      	mov	r6, r0
 8012e76:	dd76      	ble.n	8012f66 <_dtoa_r+0x8de>
 8012e78:	2300      	movs	r3, #0
 8012e7a:	9306      	str	r3, [sp, #24]
 8012e7c:	6933      	ldr	r3, [r6, #16]
 8012e7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012e82:	6918      	ldr	r0, [r3, #16]
 8012e84:	f001 f8ac 	bl	8013fe0 <__hi0bits>
 8012e88:	f1c0 0020 	rsb	r0, r0, #32
 8012e8c:	9b04      	ldr	r3, [sp, #16]
 8012e8e:	4418      	add	r0, r3
 8012e90:	f010 001f 	ands.w	r0, r0, #31
 8012e94:	f000 8086 	beq.w	8012fa4 <_dtoa_r+0x91c>
 8012e98:	f1c0 0320 	rsb	r3, r0, #32
 8012e9c:	2b04      	cmp	r3, #4
 8012e9e:	dd7f      	ble.n	8012fa0 <_dtoa_r+0x918>
 8012ea0:	f1c0 001c 	rsb	r0, r0, #28
 8012ea4:	9b04      	ldr	r3, [sp, #16]
 8012ea6:	4403      	add	r3, r0
 8012ea8:	4480      	add	r8, r0
 8012eaa:	4405      	add	r5, r0
 8012eac:	9304      	str	r3, [sp, #16]
 8012eae:	f1b8 0f00 	cmp.w	r8, #0
 8012eb2:	dd05      	ble.n	8012ec0 <_dtoa_r+0x838>
 8012eb4:	4659      	mov	r1, fp
 8012eb6:	4642      	mov	r2, r8
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f001 f9f7 	bl	80142ac <__lshift>
 8012ebe:	4683      	mov	fp, r0
 8012ec0:	9b04      	ldr	r3, [sp, #16]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	dd05      	ble.n	8012ed2 <_dtoa_r+0x84a>
 8012ec6:	4631      	mov	r1, r6
 8012ec8:	461a      	mov	r2, r3
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f001 f9ee 	bl	80142ac <__lshift>
 8012ed0:	4606      	mov	r6, r0
 8012ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d069      	beq.n	8012fac <_dtoa_r+0x924>
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4658      	mov	r0, fp
 8012edc:	f001 fa52 	bl	8014384 <__mcmp>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	da63      	bge.n	8012fac <_dtoa_r+0x924>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	4659      	mov	r1, fp
 8012ee8:	220a      	movs	r2, #10
 8012eea:	4620      	mov	r0, r4
 8012eec:	f000 ffe4 	bl	8013eb8 <__multadd>
 8012ef0:	9b08      	ldr	r3, [sp, #32]
 8012ef2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012ef6:	4683      	mov	fp, r0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	f000 818f 	beq.w	801321c <_dtoa_r+0xb94>
 8012efe:	4639      	mov	r1, r7
 8012f00:	2300      	movs	r3, #0
 8012f02:	220a      	movs	r2, #10
 8012f04:	4620      	mov	r0, r4
 8012f06:	f000 ffd7 	bl	8013eb8 <__multadd>
 8012f0a:	f1b9 0f00 	cmp.w	r9, #0
 8012f0e:	4607      	mov	r7, r0
 8012f10:	f300 808e 	bgt.w	8013030 <_dtoa_r+0x9a8>
 8012f14:	9b05      	ldr	r3, [sp, #20]
 8012f16:	2b02      	cmp	r3, #2
 8012f18:	dc50      	bgt.n	8012fbc <_dtoa_r+0x934>
 8012f1a:	e089      	b.n	8013030 <_dtoa_r+0x9a8>
 8012f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012f22:	e75d      	b.n	8012de0 <_dtoa_r+0x758>
 8012f24:	9b01      	ldr	r3, [sp, #4]
 8012f26:	1e5e      	subs	r6, r3, #1
 8012f28:	9b06      	ldr	r3, [sp, #24]
 8012f2a:	42b3      	cmp	r3, r6
 8012f2c:	bfbf      	itttt	lt
 8012f2e:	9b06      	ldrlt	r3, [sp, #24]
 8012f30:	9606      	strlt	r6, [sp, #24]
 8012f32:	1af2      	sublt	r2, r6, r3
 8012f34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012f36:	bfb6      	itet	lt
 8012f38:	189b      	addlt	r3, r3, r2
 8012f3a:	1b9e      	subge	r6, r3, r6
 8012f3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012f3e:	9b01      	ldr	r3, [sp, #4]
 8012f40:	bfb8      	it	lt
 8012f42:	2600      	movlt	r6, #0
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	bfb5      	itete	lt
 8012f48:	eba8 0503 	sublt.w	r5, r8, r3
 8012f4c:	9b01      	ldrge	r3, [sp, #4]
 8012f4e:	2300      	movlt	r3, #0
 8012f50:	4645      	movge	r5, r8
 8012f52:	e747      	b.n	8012de4 <_dtoa_r+0x75c>
 8012f54:	9e06      	ldr	r6, [sp, #24]
 8012f56:	9f08      	ldr	r7, [sp, #32]
 8012f58:	4645      	mov	r5, r8
 8012f5a:	e74c      	b.n	8012df6 <_dtoa_r+0x76e>
 8012f5c:	9a06      	ldr	r2, [sp, #24]
 8012f5e:	e775      	b.n	8012e4c <_dtoa_r+0x7c4>
 8012f60:	9b05      	ldr	r3, [sp, #20]
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	dc18      	bgt.n	8012f98 <_dtoa_r+0x910>
 8012f66:	9b02      	ldr	r3, [sp, #8]
 8012f68:	b9b3      	cbnz	r3, 8012f98 <_dtoa_r+0x910>
 8012f6a:	9b03      	ldr	r3, [sp, #12]
 8012f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f70:	b9a3      	cbnz	r3, 8012f9c <_dtoa_r+0x914>
 8012f72:	9b03      	ldr	r3, [sp, #12]
 8012f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f78:	0d1b      	lsrs	r3, r3, #20
 8012f7a:	051b      	lsls	r3, r3, #20
 8012f7c:	b12b      	cbz	r3, 8012f8a <_dtoa_r+0x902>
 8012f7e:	9b04      	ldr	r3, [sp, #16]
 8012f80:	3301      	adds	r3, #1
 8012f82:	9304      	str	r3, [sp, #16]
 8012f84:	f108 0801 	add.w	r8, r8, #1
 8012f88:	2301      	movs	r3, #1
 8012f8a:	9306      	str	r3, [sp, #24]
 8012f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	f47f af74 	bne.w	8012e7c <_dtoa_r+0x7f4>
 8012f94:	2001      	movs	r0, #1
 8012f96:	e779      	b.n	8012e8c <_dtoa_r+0x804>
 8012f98:	2300      	movs	r3, #0
 8012f9a:	e7f6      	b.n	8012f8a <_dtoa_r+0x902>
 8012f9c:	9b02      	ldr	r3, [sp, #8]
 8012f9e:	e7f4      	b.n	8012f8a <_dtoa_r+0x902>
 8012fa0:	d085      	beq.n	8012eae <_dtoa_r+0x826>
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	301c      	adds	r0, #28
 8012fa6:	e77d      	b.n	8012ea4 <_dtoa_r+0x81c>
 8012fa8:	40240000 	.word	0x40240000
 8012fac:	9b01      	ldr	r3, [sp, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	dc38      	bgt.n	8013024 <_dtoa_r+0x99c>
 8012fb2:	9b05      	ldr	r3, [sp, #20]
 8012fb4:	2b02      	cmp	r3, #2
 8012fb6:	dd35      	ble.n	8013024 <_dtoa_r+0x99c>
 8012fb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012fbc:	f1b9 0f00 	cmp.w	r9, #0
 8012fc0:	d10d      	bne.n	8012fde <_dtoa_r+0x956>
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	464b      	mov	r3, r9
 8012fc6:	2205      	movs	r2, #5
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f000 ff75 	bl	8013eb8 <__multadd>
 8012fce:	4601      	mov	r1, r0
 8012fd0:	4606      	mov	r6, r0
 8012fd2:	4658      	mov	r0, fp
 8012fd4:	f001 f9d6 	bl	8014384 <__mcmp>
 8012fd8:	2800      	cmp	r0, #0
 8012fda:	f73f adbd 	bgt.w	8012b58 <_dtoa_r+0x4d0>
 8012fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fe0:	9d00      	ldr	r5, [sp, #0]
 8012fe2:	ea6f 0a03 	mvn.w	sl, r3
 8012fe6:	f04f 0800 	mov.w	r8, #0
 8012fea:	4631      	mov	r1, r6
 8012fec:	4620      	mov	r0, r4
 8012fee:	f000 ff41 	bl	8013e74 <_Bfree>
 8012ff2:	2f00      	cmp	r7, #0
 8012ff4:	f43f aeb4 	beq.w	8012d60 <_dtoa_r+0x6d8>
 8012ff8:	f1b8 0f00 	cmp.w	r8, #0
 8012ffc:	d005      	beq.n	801300a <_dtoa_r+0x982>
 8012ffe:	45b8      	cmp	r8, r7
 8013000:	d003      	beq.n	801300a <_dtoa_r+0x982>
 8013002:	4641      	mov	r1, r8
 8013004:	4620      	mov	r0, r4
 8013006:	f000 ff35 	bl	8013e74 <_Bfree>
 801300a:	4639      	mov	r1, r7
 801300c:	4620      	mov	r0, r4
 801300e:	f000 ff31 	bl	8013e74 <_Bfree>
 8013012:	e6a5      	b.n	8012d60 <_dtoa_r+0x6d8>
 8013014:	2600      	movs	r6, #0
 8013016:	4637      	mov	r7, r6
 8013018:	e7e1      	b.n	8012fde <_dtoa_r+0x956>
 801301a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801301c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013020:	4637      	mov	r7, r6
 8013022:	e599      	b.n	8012b58 <_dtoa_r+0x4d0>
 8013024:	9b08      	ldr	r3, [sp, #32]
 8013026:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801302a:	2b00      	cmp	r3, #0
 801302c:	f000 80fd 	beq.w	801322a <_dtoa_r+0xba2>
 8013030:	2d00      	cmp	r5, #0
 8013032:	dd05      	ble.n	8013040 <_dtoa_r+0x9b8>
 8013034:	4639      	mov	r1, r7
 8013036:	462a      	mov	r2, r5
 8013038:	4620      	mov	r0, r4
 801303a:	f001 f937 	bl	80142ac <__lshift>
 801303e:	4607      	mov	r7, r0
 8013040:	9b06      	ldr	r3, [sp, #24]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d05c      	beq.n	8013100 <_dtoa_r+0xa78>
 8013046:	6879      	ldr	r1, [r7, #4]
 8013048:	4620      	mov	r0, r4
 801304a:	f000 fed3 	bl	8013df4 <_Balloc>
 801304e:	4605      	mov	r5, r0
 8013050:	b928      	cbnz	r0, 801305e <_dtoa_r+0x9d6>
 8013052:	4b80      	ldr	r3, [pc, #512]	; (8013254 <_dtoa_r+0xbcc>)
 8013054:	4602      	mov	r2, r0
 8013056:	f240 21ea 	movw	r1, #746	; 0x2ea
 801305a:	f7ff bb2e 	b.w	80126ba <_dtoa_r+0x32>
 801305e:	693a      	ldr	r2, [r7, #16]
 8013060:	3202      	adds	r2, #2
 8013062:	0092      	lsls	r2, r2, #2
 8013064:	f107 010c 	add.w	r1, r7, #12
 8013068:	300c      	adds	r0, #12
 801306a:	f7fd fa3d 	bl	80104e8 <memcpy>
 801306e:	2201      	movs	r2, #1
 8013070:	4629      	mov	r1, r5
 8013072:	4620      	mov	r0, r4
 8013074:	f001 f91a 	bl	80142ac <__lshift>
 8013078:	9b00      	ldr	r3, [sp, #0]
 801307a:	3301      	adds	r3, #1
 801307c:	9301      	str	r3, [sp, #4]
 801307e:	9b00      	ldr	r3, [sp, #0]
 8013080:	444b      	add	r3, r9
 8013082:	9307      	str	r3, [sp, #28]
 8013084:	9b02      	ldr	r3, [sp, #8]
 8013086:	f003 0301 	and.w	r3, r3, #1
 801308a:	46b8      	mov	r8, r7
 801308c:	9306      	str	r3, [sp, #24]
 801308e:	4607      	mov	r7, r0
 8013090:	9b01      	ldr	r3, [sp, #4]
 8013092:	4631      	mov	r1, r6
 8013094:	3b01      	subs	r3, #1
 8013096:	4658      	mov	r0, fp
 8013098:	9302      	str	r3, [sp, #8]
 801309a:	f7ff fa6a 	bl	8012572 <quorem>
 801309e:	4603      	mov	r3, r0
 80130a0:	3330      	adds	r3, #48	; 0x30
 80130a2:	9004      	str	r0, [sp, #16]
 80130a4:	4641      	mov	r1, r8
 80130a6:	4658      	mov	r0, fp
 80130a8:	9308      	str	r3, [sp, #32]
 80130aa:	f001 f96b 	bl	8014384 <__mcmp>
 80130ae:	463a      	mov	r2, r7
 80130b0:	4681      	mov	r9, r0
 80130b2:	4631      	mov	r1, r6
 80130b4:	4620      	mov	r0, r4
 80130b6:	f001 f981 	bl	80143bc <__mdiff>
 80130ba:	68c2      	ldr	r2, [r0, #12]
 80130bc:	9b08      	ldr	r3, [sp, #32]
 80130be:	4605      	mov	r5, r0
 80130c0:	bb02      	cbnz	r2, 8013104 <_dtoa_r+0xa7c>
 80130c2:	4601      	mov	r1, r0
 80130c4:	4658      	mov	r0, fp
 80130c6:	f001 f95d 	bl	8014384 <__mcmp>
 80130ca:	9b08      	ldr	r3, [sp, #32]
 80130cc:	4602      	mov	r2, r0
 80130ce:	4629      	mov	r1, r5
 80130d0:	4620      	mov	r0, r4
 80130d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80130d6:	f000 fecd 	bl	8013e74 <_Bfree>
 80130da:	9b05      	ldr	r3, [sp, #20]
 80130dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130de:	9d01      	ldr	r5, [sp, #4]
 80130e0:	ea43 0102 	orr.w	r1, r3, r2
 80130e4:	9b06      	ldr	r3, [sp, #24]
 80130e6:	430b      	orrs	r3, r1
 80130e8:	9b08      	ldr	r3, [sp, #32]
 80130ea:	d10d      	bne.n	8013108 <_dtoa_r+0xa80>
 80130ec:	2b39      	cmp	r3, #57	; 0x39
 80130ee:	d029      	beq.n	8013144 <_dtoa_r+0xabc>
 80130f0:	f1b9 0f00 	cmp.w	r9, #0
 80130f4:	dd01      	ble.n	80130fa <_dtoa_r+0xa72>
 80130f6:	9b04      	ldr	r3, [sp, #16]
 80130f8:	3331      	adds	r3, #49	; 0x31
 80130fa:	9a02      	ldr	r2, [sp, #8]
 80130fc:	7013      	strb	r3, [r2, #0]
 80130fe:	e774      	b.n	8012fea <_dtoa_r+0x962>
 8013100:	4638      	mov	r0, r7
 8013102:	e7b9      	b.n	8013078 <_dtoa_r+0x9f0>
 8013104:	2201      	movs	r2, #1
 8013106:	e7e2      	b.n	80130ce <_dtoa_r+0xa46>
 8013108:	f1b9 0f00 	cmp.w	r9, #0
 801310c:	db06      	blt.n	801311c <_dtoa_r+0xa94>
 801310e:	9905      	ldr	r1, [sp, #20]
 8013110:	ea41 0909 	orr.w	r9, r1, r9
 8013114:	9906      	ldr	r1, [sp, #24]
 8013116:	ea59 0101 	orrs.w	r1, r9, r1
 801311a:	d120      	bne.n	801315e <_dtoa_r+0xad6>
 801311c:	2a00      	cmp	r2, #0
 801311e:	ddec      	ble.n	80130fa <_dtoa_r+0xa72>
 8013120:	4659      	mov	r1, fp
 8013122:	2201      	movs	r2, #1
 8013124:	4620      	mov	r0, r4
 8013126:	9301      	str	r3, [sp, #4]
 8013128:	f001 f8c0 	bl	80142ac <__lshift>
 801312c:	4631      	mov	r1, r6
 801312e:	4683      	mov	fp, r0
 8013130:	f001 f928 	bl	8014384 <__mcmp>
 8013134:	2800      	cmp	r0, #0
 8013136:	9b01      	ldr	r3, [sp, #4]
 8013138:	dc02      	bgt.n	8013140 <_dtoa_r+0xab8>
 801313a:	d1de      	bne.n	80130fa <_dtoa_r+0xa72>
 801313c:	07da      	lsls	r2, r3, #31
 801313e:	d5dc      	bpl.n	80130fa <_dtoa_r+0xa72>
 8013140:	2b39      	cmp	r3, #57	; 0x39
 8013142:	d1d8      	bne.n	80130f6 <_dtoa_r+0xa6e>
 8013144:	9a02      	ldr	r2, [sp, #8]
 8013146:	2339      	movs	r3, #57	; 0x39
 8013148:	7013      	strb	r3, [r2, #0]
 801314a:	462b      	mov	r3, r5
 801314c:	461d      	mov	r5, r3
 801314e:	3b01      	subs	r3, #1
 8013150:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013154:	2a39      	cmp	r2, #57	; 0x39
 8013156:	d050      	beq.n	80131fa <_dtoa_r+0xb72>
 8013158:	3201      	adds	r2, #1
 801315a:	701a      	strb	r2, [r3, #0]
 801315c:	e745      	b.n	8012fea <_dtoa_r+0x962>
 801315e:	2a00      	cmp	r2, #0
 8013160:	dd03      	ble.n	801316a <_dtoa_r+0xae2>
 8013162:	2b39      	cmp	r3, #57	; 0x39
 8013164:	d0ee      	beq.n	8013144 <_dtoa_r+0xabc>
 8013166:	3301      	adds	r3, #1
 8013168:	e7c7      	b.n	80130fa <_dtoa_r+0xa72>
 801316a:	9a01      	ldr	r2, [sp, #4]
 801316c:	9907      	ldr	r1, [sp, #28]
 801316e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013172:	428a      	cmp	r2, r1
 8013174:	d02a      	beq.n	80131cc <_dtoa_r+0xb44>
 8013176:	4659      	mov	r1, fp
 8013178:	2300      	movs	r3, #0
 801317a:	220a      	movs	r2, #10
 801317c:	4620      	mov	r0, r4
 801317e:	f000 fe9b 	bl	8013eb8 <__multadd>
 8013182:	45b8      	cmp	r8, r7
 8013184:	4683      	mov	fp, r0
 8013186:	f04f 0300 	mov.w	r3, #0
 801318a:	f04f 020a 	mov.w	r2, #10
 801318e:	4641      	mov	r1, r8
 8013190:	4620      	mov	r0, r4
 8013192:	d107      	bne.n	80131a4 <_dtoa_r+0xb1c>
 8013194:	f000 fe90 	bl	8013eb8 <__multadd>
 8013198:	4680      	mov	r8, r0
 801319a:	4607      	mov	r7, r0
 801319c:	9b01      	ldr	r3, [sp, #4]
 801319e:	3301      	adds	r3, #1
 80131a0:	9301      	str	r3, [sp, #4]
 80131a2:	e775      	b.n	8013090 <_dtoa_r+0xa08>
 80131a4:	f000 fe88 	bl	8013eb8 <__multadd>
 80131a8:	4639      	mov	r1, r7
 80131aa:	4680      	mov	r8, r0
 80131ac:	2300      	movs	r3, #0
 80131ae:	220a      	movs	r2, #10
 80131b0:	4620      	mov	r0, r4
 80131b2:	f000 fe81 	bl	8013eb8 <__multadd>
 80131b6:	4607      	mov	r7, r0
 80131b8:	e7f0      	b.n	801319c <_dtoa_r+0xb14>
 80131ba:	f1b9 0f00 	cmp.w	r9, #0
 80131be:	9a00      	ldr	r2, [sp, #0]
 80131c0:	bfcc      	ite	gt
 80131c2:	464d      	movgt	r5, r9
 80131c4:	2501      	movle	r5, #1
 80131c6:	4415      	add	r5, r2
 80131c8:	f04f 0800 	mov.w	r8, #0
 80131cc:	4659      	mov	r1, fp
 80131ce:	2201      	movs	r2, #1
 80131d0:	4620      	mov	r0, r4
 80131d2:	9301      	str	r3, [sp, #4]
 80131d4:	f001 f86a 	bl	80142ac <__lshift>
 80131d8:	4631      	mov	r1, r6
 80131da:	4683      	mov	fp, r0
 80131dc:	f001 f8d2 	bl	8014384 <__mcmp>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	dcb2      	bgt.n	801314a <_dtoa_r+0xac2>
 80131e4:	d102      	bne.n	80131ec <_dtoa_r+0xb64>
 80131e6:	9b01      	ldr	r3, [sp, #4]
 80131e8:	07db      	lsls	r3, r3, #31
 80131ea:	d4ae      	bmi.n	801314a <_dtoa_r+0xac2>
 80131ec:	462b      	mov	r3, r5
 80131ee:	461d      	mov	r5, r3
 80131f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131f4:	2a30      	cmp	r2, #48	; 0x30
 80131f6:	d0fa      	beq.n	80131ee <_dtoa_r+0xb66>
 80131f8:	e6f7      	b.n	8012fea <_dtoa_r+0x962>
 80131fa:	9a00      	ldr	r2, [sp, #0]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d1a5      	bne.n	801314c <_dtoa_r+0xac4>
 8013200:	f10a 0a01 	add.w	sl, sl, #1
 8013204:	2331      	movs	r3, #49	; 0x31
 8013206:	e779      	b.n	80130fc <_dtoa_r+0xa74>
 8013208:	4b13      	ldr	r3, [pc, #76]	; (8013258 <_dtoa_r+0xbd0>)
 801320a:	f7ff baaf 	b.w	801276c <_dtoa_r+0xe4>
 801320e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013210:	2b00      	cmp	r3, #0
 8013212:	f47f aa86 	bne.w	8012722 <_dtoa_r+0x9a>
 8013216:	4b11      	ldr	r3, [pc, #68]	; (801325c <_dtoa_r+0xbd4>)
 8013218:	f7ff baa8 	b.w	801276c <_dtoa_r+0xe4>
 801321c:	f1b9 0f00 	cmp.w	r9, #0
 8013220:	dc03      	bgt.n	801322a <_dtoa_r+0xba2>
 8013222:	9b05      	ldr	r3, [sp, #20]
 8013224:	2b02      	cmp	r3, #2
 8013226:	f73f aec9 	bgt.w	8012fbc <_dtoa_r+0x934>
 801322a:	9d00      	ldr	r5, [sp, #0]
 801322c:	4631      	mov	r1, r6
 801322e:	4658      	mov	r0, fp
 8013230:	f7ff f99f 	bl	8012572 <quorem>
 8013234:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013238:	f805 3b01 	strb.w	r3, [r5], #1
 801323c:	9a00      	ldr	r2, [sp, #0]
 801323e:	1aaa      	subs	r2, r5, r2
 8013240:	4591      	cmp	r9, r2
 8013242:	ddba      	ble.n	80131ba <_dtoa_r+0xb32>
 8013244:	4659      	mov	r1, fp
 8013246:	2300      	movs	r3, #0
 8013248:	220a      	movs	r2, #10
 801324a:	4620      	mov	r0, r4
 801324c:	f000 fe34 	bl	8013eb8 <__multadd>
 8013250:	4683      	mov	fp, r0
 8013252:	e7eb      	b.n	801322c <_dtoa_r+0xba4>
 8013254:	0805fc64 	.word	0x0805fc64
 8013258:	0805fa65 	.word	0x0805fa65
 801325c:	0805fbe1 	.word	0x0805fbe1

08013260 <__sflush_r>:
 8013260:	898a      	ldrh	r2, [r1, #12]
 8013262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013266:	4605      	mov	r5, r0
 8013268:	0710      	lsls	r0, r2, #28
 801326a:	460c      	mov	r4, r1
 801326c:	d458      	bmi.n	8013320 <__sflush_r+0xc0>
 801326e:	684b      	ldr	r3, [r1, #4]
 8013270:	2b00      	cmp	r3, #0
 8013272:	dc05      	bgt.n	8013280 <__sflush_r+0x20>
 8013274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013276:	2b00      	cmp	r3, #0
 8013278:	dc02      	bgt.n	8013280 <__sflush_r+0x20>
 801327a:	2000      	movs	r0, #0
 801327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013282:	2e00      	cmp	r6, #0
 8013284:	d0f9      	beq.n	801327a <__sflush_r+0x1a>
 8013286:	2300      	movs	r3, #0
 8013288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801328c:	682f      	ldr	r7, [r5, #0]
 801328e:	602b      	str	r3, [r5, #0]
 8013290:	d032      	beq.n	80132f8 <__sflush_r+0x98>
 8013292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013294:	89a3      	ldrh	r3, [r4, #12]
 8013296:	075a      	lsls	r2, r3, #29
 8013298:	d505      	bpl.n	80132a6 <__sflush_r+0x46>
 801329a:	6863      	ldr	r3, [r4, #4]
 801329c:	1ac0      	subs	r0, r0, r3
 801329e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132a0:	b10b      	cbz	r3, 80132a6 <__sflush_r+0x46>
 80132a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132a4:	1ac0      	subs	r0, r0, r3
 80132a6:	2300      	movs	r3, #0
 80132a8:	4602      	mov	r2, r0
 80132aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132ac:	6a21      	ldr	r1, [r4, #32]
 80132ae:	4628      	mov	r0, r5
 80132b0:	47b0      	blx	r6
 80132b2:	1c43      	adds	r3, r0, #1
 80132b4:	89a3      	ldrh	r3, [r4, #12]
 80132b6:	d106      	bne.n	80132c6 <__sflush_r+0x66>
 80132b8:	6829      	ldr	r1, [r5, #0]
 80132ba:	291d      	cmp	r1, #29
 80132bc:	d82c      	bhi.n	8013318 <__sflush_r+0xb8>
 80132be:	4a2a      	ldr	r2, [pc, #168]	; (8013368 <__sflush_r+0x108>)
 80132c0:	40ca      	lsrs	r2, r1
 80132c2:	07d6      	lsls	r6, r2, #31
 80132c4:	d528      	bpl.n	8013318 <__sflush_r+0xb8>
 80132c6:	2200      	movs	r2, #0
 80132c8:	6062      	str	r2, [r4, #4]
 80132ca:	04d9      	lsls	r1, r3, #19
 80132cc:	6922      	ldr	r2, [r4, #16]
 80132ce:	6022      	str	r2, [r4, #0]
 80132d0:	d504      	bpl.n	80132dc <__sflush_r+0x7c>
 80132d2:	1c42      	adds	r2, r0, #1
 80132d4:	d101      	bne.n	80132da <__sflush_r+0x7a>
 80132d6:	682b      	ldr	r3, [r5, #0]
 80132d8:	b903      	cbnz	r3, 80132dc <__sflush_r+0x7c>
 80132da:	6560      	str	r0, [r4, #84]	; 0x54
 80132dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132de:	602f      	str	r7, [r5, #0]
 80132e0:	2900      	cmp	r1, #0
 80132e2:	d0ca      	beq.n	801327a <__sflush_r+0x1a>
 80132e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132e8:	4299      	cmp	r1, r3
 80132ea:	d002      	beq.n	80132f2 <__sflush_r+0x92>
 80132ec:	4628      	mov	r0, r5
 80132ee:	f7fd f911 	bl	8010514 <_free_r>
 80132f2:	2000      	movs	r0, #0
 80132f4:	6360      	str	r0, [r4, #52]	; 0x34
 80132f6:	e7c1      	b.n	801327c <__sflush_r+0x1c>
 80132f8:	6a21      	ldr	r1, [r4, #32]
 80132fa:	2301      	movs	r3, #1
 80132fc:	4628      	mov	r0, r5
 80132fe:	47b0      	blx	r6
 8013300:	1c41      	adds	r1, r0, #1
 8013302:	d1c7      	bne.n	8013294 <__sflush_r+0x34>
 8013304:	682b      	ldr	r3, [r5, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d0c4      	beq.n	8013294 <__sflush_r+0x34>
 801330a:	2b1d      	cmp	r3, #29
 801330c:	d001      	beq.n	8013312 <__sflush_r+0xb2>
 801330e:	2b16      	cmp	r3, #22
 8013310:	d101      	bne.n	8013316 <__sflush_r+0xb6>
 8013312:	602f      	str	r7, [r5, #0]
 8013314:	e7b1      	b.n	801327a <__sflush_r+0x1a>
 8013316:	89a3      	ldrh	r3, [r4, #12]
 8013318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801331c:	81a3      	strh	r3, [r4, #12]
 801331e:	e7ad      	b.n	801327c <__sflush_r+0x1c>
 8013320:	690f      	ldr	r7, [r1, #16]
 8013322:	2f00      	cmp	r7, #0
 8013324:	d0a9      	beq.n	801327a <__sflush_r+0x1a>
 8013326:	0793      	lsls	r3, r2, #30
 8013328:	680e      	ldr	r6, [r1, #0]
 801332a:	bf08      	it	eq
 801332c:	694b      	ldreq	r3, [r1, #20]
 801332e:	600f      	str	r7, [r1, #0]
 8013330:	bf18      	it	ne
 8013332:	2300      	movne	r3, #0
 8013334:	eba6 0807 	sub.w	r8, r6, r7
 8013338:	608b      	str	r3, [r1, #8]
 801333a:	f1b8 0f00 	cmp.w	r8, #0
 801333e:	dd9c      	ble.n	801327a <__sflush_r+0x1a>
 8013340:	6a21      	ldr	r1, [r4, #32]
 8013342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013344:	4643      	mov	r3, r8
 8013346:	463a      	mov	r2, r7
 8013348:	4628      	mov	r0, r5
 801334a:	47b0      	blx	r6
 801334c:	2800      	cmp	r0, #0
 801334e:	dc06      	bgt.n	801335e <__sflush_r+0xfe>
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013356:	81a3      	strh	r3, [r4, #12]
 8013358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801335c:	e78e      	b.n	801327c <__sflush_r+0x1c>
 801335e:	4407      	add	r7, r0
 8013360:	eba8 0800 	sub.w	r8, r8, r0
 8013364:	e7e9      	b.n	801333a <__sflush_r+0xda>
 8013366:	bf00      	nop
 8013368:	20400001 	.word	0x20400001

0801336c <_fflush_r>:
 801336c:	b538      	push	{r3, r4, r5, lr}
 801336e:	690b      	ldr	r3, [r1, #16]
 8013370:	4605      	mov	r5, r0
 8013372:	460c      	mov	r4, r1
 8013374:	b913      	cbnz	r3, 801337c <_fflush_r+0x10>
 8013376:	2500      	movs	r5, #0
 8013378:	4628      	mov	r0, r5
 801337a:	bd38      	pop	{r3, r4, r5, pc}
 801337c:	b118      	cbz	r0, 8013386 <_fflush_r+0x1a>
 801337e:	6983      	ldr	r3, [r0, #24]
 8013380:	b90b      	cbnz	r3, 8013386 <_fflush_r+0x1a>
 8013382:	f000 f887 	bl	8013494 <__sinit>
 8013386:	4b14      	ldr	r3, [pc, #80]	; (80133d8 <_fflush_r+0x6c>)
 8013388:	429c      	cmp	r4, r3
 801338a:	d11b      	bne.n	80133c4 <_fflush_r+0x58>
 801338c:	686c      	ldr	r4, [r5, #4]
 801338e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d0ef      	beq.n	8013376 <_fflush_r+0xa>
 8013396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013398:	07d0      	lsls	r0, r2, #31
 801339a:	d404      	bmi.n	80133a6 <_fflush_r+0x3a>
 801339c:	0599      	lsls	r1, r3, #22
 801339e:	d402      	bmi.n	80133a6 <_fflush_r+0x3a>
 80133a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133a2:	f000 fc88 	bl	8013cb6 <__retarget_lock_acquire_recursive>
 80133a6:	4628      	mov	r0, r5
 80133a8:	4621      	mov	r1, r4
 80133aa:	f7ff ff59 	bl	8013260 <__sflush_r>
 80133ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133b0:	07da      	lsls	r2, r3, #31
 80133b2:	4605      	mov	r5, r0
 80133b4:	d4e0      	bmi.n	8013378 <_fflush_r+0xc>
 80133b6:	89a3      	ldrh	r3, [r4, #12]
 80133b8:	059b      	lsls	r3, r3, #22
 80133ba:	d4dd      	bmi.n	8013378 <_fflush_r+0xc>
 80133bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133be:	f000 fc7b 	bl	8013cb8 <__retarget_lock_release_recursive>
 80133c2:	e7d9      	b.n	8013378 <_fflush_r+0xc>
 80133c4:	4b05      	ldr	r3, [pc, #20]	; (80133dc <_fflush_r+0x70>)
 80133c6:	429c      	cmp	r4, r3
 80133c8:	d101      	bne.n	80133ce <_fflush_r+0x62>
 80133ca:	68ac      	ldr	r4, [r5, #8]
 80133cc:	e7df      	b.n	801338e <_fflush_r+0x22>
 80133ce:	4b04      	ldr	r3, [pc, #16]	; (80133e0 <_fflush_r+0x74>)
 80133d0:	429c      	cmp	r4, r3
 80133d2:	bf08      	it	eq
 80133d4:	68ec      	ldreq	r4, [r5, #12]
 80133d6:	e7da      	b.n	801338e <_fflush_r+0x22>
 80133d8:	0805fc98 	.word	0x0805fc98
 80133dc:	0805fcb8 	.word	0x0805fcb8
 80133e0:	0805fc78 	.word	0x0805fc78

080133e4 <std>:
 80133e4:	2300      	movs	r3, #0
 80133e6:	b510      	push	{r4, lr}
 80133e8:	4604      	mov	r4, r0
 80133ea:	e9c0 3300 	strd	r3, r3, [r0]
 80133ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80133f2:	6083      	str	r3, [r0, #8]
 80133f4:	8181      	strh	r1, [r0, #12]
 80133f6:	6643      	str	r3, [r0, #100]	; 0x64
 80133f8:	81c2      	strh	r2, [r0, #14]
 80133fa:	6183      	str	r3, [r0, #24]
 80133fc:	4619      	mov	r1, r3
 80133fe:	2208      	movs	r2, #8
 8013400:	305c      	adds	r0, #92	; 0x5c
 8013402:	f7fd f87f 	bl	8010504 <memset>
 8013406:	4b05      	ldr	r3, [pc, #20]	; (801341c <std+0x38>)
 8013408:	6263      	str	r3, [r4, #36]	; 0x24
 801340a:	4b05      	ldr	r3, [pc, #20]	; (8013420 <std+0x3c>)
 801340c:	62a3      	str	r3, [r4, #40]	; 0x28
 801340e:	4b05      	ldr	r3, [pc, #20]	; (8013424 <std+0x40>)
 8013410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013412:	4b05      	ldr	r3, [pc, #20]	; (8013428 <std+0x44>)
 8013414:	6224      	str	r4, [r4, #32]
 8013416:	6323      	str	r3, [r4, #48]	; 0x30
 8013418:	bd10      	pop	{r4, pc}
 801341a:	bf00      	nop
 801341c:	08014b29 	.word	0x08014b29
 8013420:	08014b4b 	.word	0x08014b4b
 8013424:	08014b83 	.word	0x08014b83
 8013428:	08014ba7 	.word	0x08014ba7

0801342c <_cleanup_r>:
 801342c:	4901      	ldr	r1, [pc, #4]	; (8013434 <_cleanup_r+0x8>)
 801342e:	f000 b8af 	b.w	8013590 <_fwalk_reent>
 8013432:	bf00      	nop
 8013434:	0801336d 	.word	0x0801336d

08013438 <__sfmoreglue>:
 8013438:	b570      	push	{r4, r5, r6, lr}
 801343a:	1e4a      	subs	r2, r1, #1
 801343c:	2568      	movs	r5, #104	; 0x68
 801343e:	4355      	muls	r5, r2
 8013440:	460e      	mov	r6, r1
 8013442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013446:	f7fd f8b5 	bl	80105b4 <_malloc_r>
 801344a:	4604      	mov	r4, r0
 801344c:	b140      	cbz	r0, 8013460 <__sfmoreglue+0x28>
 801344e:	2100      	movs	r1, #0
 8013450:	e9c0 1600 	strd	r1, r6, [r0]
 8013454:	300c      	adds	r0, #12
 8013456:	60a0      	str	r0, [r4, #8]
 8013458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801345c:	f7fd f852 	bl	8010504 <memset>
 8013460:	4620      	mov	r0, r4
 8013462:	bd70      	pop	{r4, r5, r6, pc}

08013464 <__sfp_lock_acquire>:
 8013464:	4801      	ldr	r0, [pc, #4]	; (801346c <__sfp_lock_acquire+0x8>)
 8013466:	f000 bc26 	b.w	8013cb6 <__retarget_lock_acquire_recursive>
 801346a:	bf00      	nop
 801346c:	20013d28 	.word	0x20013d28

08013470 <__sfp_lock_release>:
 8013470:	4801      	ldr	r0, [pc, #4]	; (8013478 <__sfp_lock_release+0x8>)
 8013472:	f000 bc21 	b.w	8013cb8 <__retarget_lock_release_recursive>
 8013476:	bf00      	nop
 8013478:	20013d28 	.word	0x20013d28

0801347c <__sinit_lock_acquire>:
 801347c:	4801      	ldr	r0, [pc, #4]	; (8013484 <__sinit_lock_acquire+0x8>)
 801347e:	f000 bc1a 	b.w	8013cb6 <__retarget_lock_acquire_recursive>
 8013482:	bf00      	nop
 8013484:	20013d23 	.word	0x20013d23

08013488 <__sinit_lock_release>:
 8013488:	4801      	ldr	r0, [pc, #4]	; (8013490 <__sinit_lock_release+0x8>)
 801348a:	f000 bc15 	b.w	8013cb8 <__retarget_lock_release_recursive>
 801348e:	bf00      	nop
 8013490:	20013d23 	.word	0x20013d23

08013494 <__sinit>:
 8013494:	b510      	push	{r4, lr}
 8013496:	4604      	mov	r4, r0
 8013498:	f7ff fff0 	bl	801347c <__sinit_lock_acquire>
 801349c:	69a3      	ldr	r3, [r4, #24]
 801349e:	b11b      	cbz	r3, 80134a8 <__sinit+0x14>
 80134a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134a4:	f7ff bff0 	b.w	8013488 <__sinit_lock_release>
 80134a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80134ac:	6523      	str	r3, [r4, #80]	; 0x50
 80134ae:	4b13      	ldr	r3, [pc, #76]	; (80134fc <__sinit+0x68>)
 80134b0:	4a13      	ldr	r2, [pc, #76]	; (8013500 <__sinit+0x6c>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80134b6:	42a3      	cmp	r3, r4
 80134b8:	bf04      	itt	eq
 80134ba:	2301      	moveq	r3, #1
 80134bc:	61a3      	streq	r3, [r4, #24]
 80134be:	4620      	mov	r0, r4
 80134c0:	f000 f820 	bl	8013504 <__sfp>
 80134c4:	6060      	str	r0, [r4, #4]
 80134c6:	4620      	mov	r0, r4
 80134c8:	f000 f81c 	bl	8013504 <__sfp>
 80134cc:	60a0      	str	r0, [r4, #8]
 80134ce:	4620      	mov	r0, r4
 80134d0:	f000 f818 	bl	8013504 <__sfp>
 80134d4:	2200      	movs	r2, #0
 80134d6:	60e0      	str	r0, [r4, #12]
 80134d8:	2104      	movs	r1, #4
 80134da:	6860      	ldr	r0, [r4, #4]
 80134dc:	f7ff ff82 	bl	80133e4 <std>
 80134e0:	68a0      	ldr	r0, [r4, #8]
 80134e2:	2201      	movs	r2, #1
 80134e4:	2109      	movs	r1, #9
 80134e6:	f7ff ff7d 	bl	80133e4 <std>
 80134ea:	68e0      	ldr	r0, [r4, #12]
 80134ec:	2202      	movs	r2, #2
 80134ee:	2112      	movs	r1, #18
 80134f0:	f7ff ff78 	bl	80133e4 <std>
 80134f4:	2301      	movs	r3, #1
 80134f6:	61a3      	str	r3, [r4, #24]
 80134f8:	e7d2      	b.n	80134a0 <__sinit+0xc>
 80134fa:	bf00      	nop
 80134fc:	0805fa40 	.word	0x0805fa40
 8013500:	0801342d 	.word	0x0801342d

08013504 <__sfp>:
 8013504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013506:	4607      	mov	r7, r0
 8013508:	f7ff ffac 	bl	8013464 <__sfp_lock_acquire>
 801350c:	4b1e      	ldr	r3, [pc, #120]	; (8013588 <__sfp+0x84>)
 801350e:	681e      	ldr	r6, [r3, #0]
 8013510:	69b3      	ldr	r3, [r6, #24]
 8013512:	b913      	cbnz	r3, 801351a <__sfp+0x16>
 8013514:	4630      	mov	r0, r6
 8013516:	f7ff ffbd 	bl	8013494 <__sinit>
 801351a:	3648      	adds	r6, #72	; 0x48
 801351c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013520:	3b01      	subs	r3, #1
 8013522:	d503      	bpl.n	801352c <__sfp+0x28>
 8013524:	6833      	ldr	r3, [r6, #0]
 8013526:	b30b      	cbz	r3, 801356c <__sfp+0x68>
 8013528:	6836      	ldr	r6, [r6, #0]
 801352a:	e7f7      	b.n	801351c <__sfp+0x18>
 801352c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013530:	b9d5      	cbnz	r5, 8013568 <__sfp+0x64>
 8013532:	4b16      	ldr	r3, [pc, #88]	; (801358c <__sfp+0x88>)
 8013534:	60e3      	str	r3, [r4, #12]
 8013536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801353a:	6665      	str	r5, [r4, #100]	; 0x64
 801353c:	f000 fbba 	bl	8013cb4 <__retarget_lock_init_recursive>
 8013540:	f7ff ff96 	bl	8013470 <__sfp_lock_release>
 8013544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801354c:	6025      	str	r5, [r4, #0]
 801354e:	61a5      	str	r5, [r4, #24]
 8013550:	2208      	movs	r2, #8
 8013552:	4629      	mov	r1, r5
 8013554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013558:	f7fc ffd4 	bl	8010504 <memset>
 801355c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013564:	4620      	mov	r0, r4
 8013566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013568:	3468      	adds	r4, #104	; 0x68
 801356a:	e7d9      	b.n	8013520 <__sfp+0x1c>
 801356c:	2104      	movs	r1, #4
 801356e:	4638      	mov	r0, r7
 8013570:	f7ff ff62 	bl	8013438 <__sfmoreglue>
 8013574:	4604      	mov	r4, r0
 8013576:	6030      	str	r0, [r6, #0]
 8013578:	2800      	cmp	r0, #0
 801357a:	d1d5      	bne.n	8013528 <__sfp+0x24>
 801357c:	f7ff ff78 	bl	8013470 <__sfp_lock_release>
 8013580:	230c      	movs	r3, #12
 8013582:	603b      	str	r3, [r7, #0]
 8013584:	e7ee      	b.n	8013564 <__sfp+0x60>
 8013586:	bf00      	nop
 8013588:	0805fa40 	.word	0x0805fa40
 801358c:	ffff0001 	.word	0xffff0001

08013590 <_fwalk_reent>:
 8013590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013594:	4606      	mov	r6, r0
 8013596:	4688      	mov	r8, r1
 8013598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801359c:	2700      	movs	r7, #0
 801359e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80135a2:	f1b9 0901 	subs.w	r9, r9, #1
 80135a6:	d505      	bpl.n	80135b4 <_fwalk_reent+0x24>
 80135a8:	6824      	ldr	r4, [r4, #0]
 80135aa:	2c00      	cmp	r4, #0
 80135ac:	d1f7      	bne.n	801359e <_fwalk_reent+0xe>
 80135ae:	4638      	mov	r0, r7
 80135b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135b4:	89ab      	ldrh	r3, [r5, #12]
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d907      	bls.n	80135ca <_fwalk_reent+0x3a>
 80135ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80135be:	3301      	adds	r3, #1
 80135c0:	d003      	beq.n	80135ca <_fwalk_reent+0x3a>
 80135c2:	4629      	mov	r1, r5
 80135c4:	4630      	mov	r0, r6
 80135c6:	47c0      	blx	r8
 80135c8:	4307      	orrs	r7, r0
 80135ca:	3568      	adds	r5, #104	; 0x68
 80135cc:	e7e9      	b.n	80135a2 <_fwalk_reent+0x12>

080135ce <rshift>:
 80135ce:	6903      	ldr	r3, [r0, #16]
 80135d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80135d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80135dc:	f100 0414 	add.w	r4, r0, #20
 80135e0:	dd45      	ble.n	801366e <rshift+0xa0>
 80135e2:	f011 011f 	ands.w	r1, r1, #31
 80135e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80135ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80135ee:	d10c      	bne.n	801360a <rshift+0x3c>
 80135f0:	f100 0710 	add.w	r7, r0, #16
 80135f4:	4629      	mov	r1, r5
 80135f6:	42b1      	cmp	r1, r6
 80135f8:	d334      	bcc.n	8013664 <rshift+0x96>
 80135fa:	1a9b      	subs	r3, r3, r2
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	1eea      	subs	r2, r5, #3
 8013600:	4296      	cmp	r6, r2
 8013602:	bf38      	it	cc
 8013604:	2300      	movcc	r3, #0
 8013606:	4423      	add	r3, r4
 8013608:	e015      	b.n	8013636 <rshift+0x68>
 801360a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801360e:	f1c1 0820 	rsb	r8, r1, #32
 8013612:	40cf      	lsrs	r7, r1
 8013614:	f105 0e04 	add.w	lr, r5, #4
 8013618:	46a1      	mov	r9, r4
 801361a:	4576      	cmp	r6, lr
 801361c:	46f4      	mov	ip, lr
 801361e:	d815      	bhi.n	801364c <rshift+0x7e>
 8013620:	1a9b      	subs	r3, r3, r2
 8013622:	009a      	lsls	r2, r3, #2
 8013624:	3a04      	subs	r2, #4
 8013626:	3501      	adds	r5, #1
 8013628:	42ae      	cmp	r6, r5
 801362a:	bf38      	it	cc
 801362c:	2200      	movcc	r2, #0
 801362e:	18a3      	adds	r3, r4, r2
 8013630:	50a7      	str	r7, [r4, r2]
 8013632:	b107      	cbz	r7, 8013636 <rshift+0x68>
 8013634:	3304      	adds	r3, #4
 8013636:	1b1a      	subs	r2, r3, r4
 8013638:	42a3      	cmp	r3, r4
 801363a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801363e:	bf08      	it	eq
 8013640:	2300      	moveq	r3, #0
 8013642:	6102      	str	r2, [r0, #16]
 8013644:	bf08      	it	eq
 8013646:	6143      	streq	r3, [r0, #20]
 8013648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801364c:	f8dc c000 	ldr.w	ip, [ip]
 8013650:	fa0c fc08 	lsl.w	ip, ip, r8
 8013654:	ea4c 0707 	orr.w	r7, ip, r7
 8013658:	f849 7b04 	str.w	r7, [r9], #4
 801365c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013660:	40cf      	lsrs	r7, r1
 8013662:	e7da      	b.n	801361a <rshift+0x4c>
 8013664:	f851 cb04 	ldr.w	ip, [r1], #4
 8013668:	f847 cf04 	str.w	ip, [r7, #4]!
 801366c:	e7c3      	b.n	80135f6 <rshift+0x28>
 801366e:	4623      	mov	r3, r4
 8013670:	e7e1      	b.n	8013636 <rshift+0x68>

08013672 <__hexdig_fun>:
 8013672:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013676:	2b09      	cmp	r3, #9
 8013678:	d802      	bhi.n	8013680 <__hexdig_fun+0xe>
 801367a:	3820      	subs	r0, #32
 801367c:	b2c0      	uxtb	r0, r0
 801367e:	4770      	bx	lr
 8013680:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013684:	2b05      	cmp	r3, #5
 8013686:	d801      	bhi.n	801368c <__hexdig_fun+0x1a>
 8013688:	3847      	subs	r0, #71	; 0x47
 801368a:	e7f7      	b.n	801367c <__hexdig_fun+0xa>
 801368c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013690:	2b05      	cmp	r3, #5
 8013692:	d801      	bhi.n	8013698 <__hexdig_fun+0x26>
 8013694:	3827      	subs	r0, #39	; 0x27
 8013696:	e7f1      	b.n	801367c <__hexdig_fun+0xa>
 8013698:	2000      	movs	r0, #0
 801369a:	4770      	bx	lr

0801369c <__gethex>:
 801369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a0:	ed2d 8b02 	vpush	{d8}
 80136a4:	b089      	sub	sp, #36	; 0x24
 80136a6:	ee08 0a10 	vmov	s16, r0
 80136aa:	9304      	str	r3, [sp, #16]
 80136ac:	4bbc      	ldr	r3, [pc, #752]	; (80139a0 <__gethex+0x304>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	9301      	str	r3, [sp, #4]
 80136b2:	4618      	mov	r0, r3
 80136b4:	468b      	mov	fp, r1
 80136b6:	4690      	mov	r8, r2
 80136b8:	f7ec fd94 	bl	80001e4 <strlen>
 80136bc:	9b01      	ldr	r3, [sp, #4]
 80136be:	f8db 2000 	ldr.w	r2, [fp]
 80136c2:	4403      	add	r3, r0
 80136c4:	4682      	mov	sl, r0
 80136c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80136ca:	9305      	str	r3, [sp, #20]
 80136cc:	1c93      	adds	r3, r2, #2
 80136ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80136d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80136d6:	32fe      	adds	r2, #254	; 0xfe
 80136d8:	18d1      	adds	r1, r2, r3
 80136da:	461f      	mov	r7, r3
 80136dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80136e0:	9100      	str	r1, [sp, #0]
 80136e2:	2830      	cmp	r0, #48	; 0x30
 80136e4:	d0f8      	beq.n	80136d8 <__gethex+0x3c>
 80136e6:	f7ff ffc4 	bl	8013672 <__hexdig_fun>
 80136ea:	4604      	mov	r4, r0
 80136ec:	2800      	cmp	r0, #0
 80136ee:	d13a      	bne.n	8013766 <__gethex+0xca>
 80136f0:	9901      	ldr	r1, [sp, #4]
 80136f2:	4652      	mov	r2, sl
 80136f4:	4638      	mov	r0, r7
 80136f6:	f001 fa5a 	bl	8014bae <strncmp>
 80136fa:	4605      	mov	r5, r0
 80136fc:	2800      	cmp	r0, #0
 80136fe:	d168      	bne.n	80137d2 <__gethex+0x136>
 8013700:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013704:	eb07 060a 	add.w	r6, r7, sl
 8013708:	f7ff ffb3 	bl	8013672 <__hexdig_fun>
 801370c:	2800      	cmp	r0, #0
 801370e:	d062      	beq.n	80137d6 <__gethex+0x13a>
 8013710:	4633      	mov	r3, r6
 8013712:	7818      	ldrb	r0, [r3, #0]
 8013714:	2830      	cmp	r0, #48	; 0x30
 8013716:	461f      	mov	r7, r3
 8013718:	f103 0301 	add.w	r3, r3, #1
 801371c:	d0f9      	beq.n	8013712 <__gethex+0x76>
 801371e:	f7ff ffa8 	bl	8013672 <__hexdig_fun>
 8013722:	2301      	movs	r3, #1
 8013724:	fab0 f480 	clz	r4, r0
 8013728:	0964      	lsrs	r4, r4, #5
 801372a:	4635      	mov	r5, r6
 801372c:	9300      	str	r3, [sp, #0]
 801372e:	463a      	mov	r2, r7
 8013730:	4616      	mov	r6, r2
 8013732:	3201      	adds	r2, #1
 8013734:	7830      	ldrb	r0, [r6, #0]
 8013736:	f7ff ff9c 	bl	8013672 <__hexdig_fun>
 801373a:	2800      	cmp	r0, #0
 801373c:	d1f8      	bne.n	8013730 <__gethex+0x94>
 801373e:	9901      	ldr	r1, [sp, #4]
 8013740:	4652      	mov	r2, sl
 8013742:	4630      	mov	r0, r6
 8013744:	f001 fa33 	bl	8014bae <strncmp>
 8013748:	b980      	cbnz	r0, 801376c <__gethex+0xd0>
 801374a:	b94d      	cbnz	r5, 8013760 <__gethex+0xc4>
 801374c:	eb06 050a 	add.w	r5, r6, sl
 8013750:	462a      	mov	r2, r5
 8013752:	4616      	mov	r6, r2
 8013754:	3201      	adds	r2, #1
 8013756:	7830      	ldrb	r0, [r6, #0]
 8013758:	f7ff ff8b 	bl	8013672 <__hexdig_fun>
 801375c:	2800      	cmp	r0, #0
 801375e:	d1f8      	bne.n	8013752 <__gethex+0xb6>
 8013760:	1bad      	subs	r5, r5, r6
 8013762:	00ad      	lsls	r5, r5, #2
 8013764:	e004      	b.n	8013770 <__gethex+0xd4>
 8013766:	2400      	movs	r4, #0
 8013768:	4625      	mov	r5, r4
 801376a:	e7e0      	b.n	801372e <__gethex+0x92>
 801376c:	2d00      	cmp	r5, #0
 801376e:	d1f7      	bne.n	8013760 <__gethex+0xc4>
 8013770:	7833      	ldrb	r3, [r6, #0]
 8013772:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013776:	2b50      	cmp	r3, #80	; 0x50
 8013778:	d13b      	bne.n	80137f2 <__gethex+0x156>
 801377a:	7873      	ldrb	r3, [r6, #1]
 801377c:	2b2b      	cmp	r3, #43	; 0x2b
 801377e:	d02c      	beq.n	80137da <__gethex+0x13e>
 8013780:	2b2d      	cmp	r3, #45	; 0x2d
 8013782:	d02e      	beq.n	80137e2 <__gethex+0x146>
 8013784:	1c71      	adds	r1, r6, #1
 8013786:	f04f 0900 	mov.w	r9, #0
 801378a:	7808      	ldrb	r0, [r1, #0]
 801378c:	f7ff ff71 	bl	8013672 <__hexdig_fun>
 8013790:	1e43      	subs	r3, r0, #1
 8013792:	b2db      	uxtb	r3, r3
 8013794:	2b18      	cmp	r3, #24
 8013796:	d82c      	bhi.n	80137f2 <__gethex+0x156>
 8013798:	f1a0 0210 	sub.w	r2, r0, #16
 801379c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80137a0:	f7ff ff67 	bl	8013672 <__hexdig_fun>
 80137a4:	1e43      	subs	r3, r0, #1
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	2b18      	cmp	r3, #24
 80137aa:	d91d      	bls.n	80137e8 <__gethex+0x14c>
 80137ac:	f1b9 0f00 	cmp.w	r9, #0
 80137b0:	d000      	beq.n	80137b4 <__gethex+0x118>
 80137b2:	4252      	negs	r2, r2
 80137b4:	4415      	add	r5, r2
 80137b6:	f8cb 1000 	str.w	r1, [fp]
 80137ba:	b1e4      	cbz	r4, 80137f6 <__gethex+0x15a>
 80137bc:	9b00      	ldr	r3, [sp, #0]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	bf14      	ite	ne
 80137c2:	2700      	movne	r7, #0
 80137c4:	2706      	moveq	r7, #6
 80137c6:	4638      	mov	r0, r7
 80137c8:	b009      	add	sp, #36	; 0x24
 80137ca:	ecbd 8b02 	vpop	{d8}
 80137ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d2:	463e      	mov	r6, r7
 80137d4:	4625      	mov	r5, r4
 80137d6:	2401      	movs	r4, #1
 80137d8:	e7ca      	b.n	8013770 <__gethex+0xd4>
 80137da:	f04f 0900 	mov.w	r9, #0
 80137de:	1cb1      	adds	r1, r6, #2
 80137e0:	e7d3      	b.n	801378a <__gethex+0xee>
 80137e2:	f04f 0901 	mov.w	r9, #1
 80137e6:	e7fa      	b.n	80137de <__gethex+0x142>
 80137e8:	230a      	movs	r3, #10
 80137ea:	fb03 0202 	mla	r2, r3, r2, r0
 80137ee:	3a10      	subs	r2, #16
 80137f0:	e7d4      	b.n	801379c <__gethex+0x100>
 80137f2:	4631      	mov	r1, r6
 80137f4:	e7df      	b.n	80137b6 <__gethex+0x11a>
 80137f6:	1bf3      	subs	r3, r6, r7
 80137f8:	3b01      	subs	r3, #1
 80137fa:	4621      	mov	r1, r4
 80137fc:	2b07      	cmp	r3, #7
 80137fe:	dc0b      	bgt.n	8013818 <__gethex+0x17c>
 8013800:	ee18 0a10 	vmov	r0, s16
 8013804:	f000 faf6 	bl	8013df4 <_Balloc>
 8013808:	4604      	mov	r4, r0
 801380a:	b940      	cbnz	r0, 801381e <__gethex+0x182>
 801380c:	4b65      	ldr	r3, [pc, #404]	; (80139a4 <__gethex+0x308>)
 801380e:	4602      	mov	r2, r0
 8013810:	21de      	movs	r1, #222	; 0xde
 8013812:	4865      	ldr	r0, [pc, #404]	; (80139a8 <__gethex+0x30c>)
 8013814:	f7fc fe06 	bl	8010424 <__assert_func>
 8013818:	3101      	adds	r1, #1
 801381a:	105b      	asrs	r3, r3, #1
 801381c:	e7ee      	b.n	80137fc <__gethex+0x160>
 801381e:	f100 0914 	add.w	r9, r0, #20
 8013822:	f04f 0b00 	mov.w	fp, #0
 8013826:	f1ca 0301 	rsb	r3, sl, #1
 801382a:	f8cd 9008 	str.w	r9, [sp, #8]
 801382e:	f8cd b000 	str.w	fp, [sp]
 8013832:	9306      	str	r3, [sp, #24]
 8013834:	42b7      	cmp	r7, r6
 8013836:	d340      	bcc.n	80138ba <__gethex+0x21e>
 8013838:	9802      	ldr	r0, [sp, #8]
 801383a:	9b00      	ldr	r3, [sp, #0]
 801383c:	f840 3b04 	str.w	r3, [r0], #4
 8013840:	eba0 0009 	sub.w	r0, r0, r9
 8013844:	1080      	asrs	r0, r0, #2
 8013846:	0146      	lsls	r6, r0, #5
 8013848:	6120      	str	r0, [r4, #16]
 801384a:	4618      	mov	r0, r3
 801384c:	f000 fbc8 	bl	8013fe0 <__hi0bits>
 8013850:	1a30      	subs	r0, r6, r0
 8013852:	f8d8 6000 	ldr.w	r6, [r8]
 8013856:	42b0      	cmp	r0, r6
 8013858:	dd63      	ble.n	8013922 <__gethex+0x286>
 801385a:	1b87      	subs	r7, r0, r6
 801385c:	4639      	mov	r1, r7
 801385e:	4620      	mov	r0, r4
 8013860:	f000 ff62 	bl	8014728 <__any_on>
 8013864:	4682      	mov	sl, r0
 8013866:	b1a8      	cbz	r0, 8013894 <__gethex+0x1f8>
 8013868:	1e7b      	subs	r3, r7, #1
 801386a:	1159      	asrs	r1, r3, #5
 801386c:	f003 021f 	and.w	r2, r3, #31
 8013870:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013874:	f04f 0a01 	mov.w	sl, #1
 8013878:	fa0a f202 	lsl.w	r2, sl, r2
 801387c:	420a      	tst	r2, r1
 801387e:	d009      	beq.n	8013894 <__gethex+0x1f8>
 8013880:	4553      	cmp	r3, sl
 8013882:	dd05      	ble.n	8013890 <__gethex+0x1f4>
 8013884:	1eb9      	subs	r1, r7, #2
 8013886:	4620      	mov	r0, r4
 8013888:	f000 ff4e 	bl	8014728 <__any_on>
 801388c:	2800      	cmp	r0, #0
 801388e:	d145      	bne.n	801391c <__gethex+0x280>
 8013890:	f04f 0a02 	mov.w	sl, #2
 8013894:	4639      	mov	r1, r7
 8013896:	4620      	mov	r0, r4
 8013898:	f7ff fe99 	bl	80135ce <rshift>
 801389c:	443d      	add	r5, r7
 801389e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138a2:	42ab      	cmp	r3, r5
 80138a4:	da4c      	bge.n	8013940 <__gethex+0x2a4>
 80138a6:	ee18 0a10 	vmov	r0, s16
 80138aa:	4621      	mov	r1, r4
 80138ac:	f000 fae2 	bl	8013e74 <_Bfree>
 80138b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80138b2:	2300      	movs	r3, #0
 80138b4:	6013      	str	r3, [r2, #0]
 80138b6:	27a3      	movs	r7, #163	; 0xa3
 80138b8:	e785      	b.n	80137c6 <__gethex+0x12a>
 80138ba:	1e73      	subs	r3, r6, #1
 80138bc:	9a05      	ldr	r2, [sp, #20]
 80138be:	9303      	str	r3, [sp, #12]
 80138c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80138c4:	4293      	cmp	r3, r2
 80138c6:	d019      	beq.n	80138fc <__gethex+0x260>
 80138c8:	f1bb 0f20 	cmp.w	fp, #32
 80138cc:	d107      	bne.n	80138de <__gethex+0x242>
 80138ce:	9b02      	ldr	r3, [sp, #8]
 80138d0:	9a00      	ldr	r2, [sp, #0]
 80138d2:	f843 2b04 	str.w	r2, [r3], #4
 80138d6:	9302      	str	r3, [sp, #8]
 80138d8:	2300      	movs	r3, #0
 80138da:	9300      	str	r3, [sp, #0]
 80138dc:	469b      	mov	fp, r3
 80138de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80138e2:	f7ff fec6 	bl	8013672 <__hexdig_fun>
 80138e6:	9b00      	ldr	r3, [sp, #0]
 80138e8:	f000 000f 	and.w	r0, r0, #15
 80138ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80138f0:	4303      	orrs	r3, r0
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	f10b 0b04 	add.w	fp, fp, #4
 80138f8:	9b03      	ldr	r3, [sp, #12]
 80138fa:	e00d      	b.n	8013918 <__gethex+0x27c>
 80138fc:	9b03      	ldr	r3, [sp, #12]
 80138fe:	9a06      	ldr	r2, [sp, #24]
 8013900:	4413      	add	r3, r2
 8013902:	42bb      	cmp	r3, r7
 8013904:	d3e0      	bcc.n	80138c8 <__gethex+0x22c>
 8013906:	4618      	mov	r0, r3
 8013908:	9901      	ldr	r1, [sp, #4]
 801390a:	9307      	str	r3, [sp, #28]
 801390c:	4652      	mov	r2, sl
 801390e:	f001 f94e 	bl	8014bae <strncmp>
 8013912:	9b07      	ldr	r3, [sp, #28]
 8013914:	2800      	cmp	r0, #0
 8013916:	d1d7      	bne.n	80138c8 <__gethex+0x22c>
 8013918:	461e      	mov	r6, r3
 801391a:	e78b      	b.n	8013834 <__gethex+0x198>
 801391c:	f04f 0a03 	mov.w	sl, #3
 8013920:	e7b8      	b.n	8013894 <__gethex+0x1f8>
 8013922:	da0a      	bge.n	801393a <__gethex+0x29e>
 8013924:	1a37      	subs	r7, r6, r0
 8013926:	4621      	mov	r1, r4
 8013928:	ee18 0a10 	vmov	r0, s16
 801392c:	463a      	mov	r2, r7
 801392e:	f000 fcbd 	bl	80142ac <__lshift>
 8013932:	1bed      	subs	r5, r5, r7
 8013934:	4604      	mov	r4, r0
 8013936:	f100 0914 	add.w	r9, r0, #20
 801393a:	f04f 0a00 	mov.w	sl, #0
 801393e:	e7ae      	b.n	801389e <__gethex+0x202>
 8013940:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013944:	42a8      	cmp	r0, r5
 8013946:	dd72      	ble.n	8013a2e <__gethex+0x392>
 8013948:	1b45      	subs	r5, r0, r5
 801394a:	42ae      	cmp	r6, r5
 801394c:	dc36      	bgt.n	80139bc <__gethex+0x320>
 801394e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013952:	2b02      	cmp	r3, #2
 8013954:	d02a      	beq.n	80139ac <__gethex+0x310>
 8013956:	2b03      	cmp	r3, #3
 8013958:	d02c      	beq.n	80139b4 <__gethex+0x318>
 801395a:	2b01      	cmp	r3, #1
 801395c:	d115      	bne.n	801398a <__gethex+0x2ee>
 801395e:	42ae      	cmp	r6, r5
 8013960:	d113      	bne.n	801398a <__gethex+0x2ee>
 8013962:	2e01      	cmp	r6, #1
 8013964:	d10b      	bne.n	801397e <__gethex+0x2e2>
 8013966:	9a04      	ldr	r2, [sp, #16]
 8013968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801396c:	6013      	str	r3, [r2, #0]
 801396e:	2301      	movs	r3, #1
 8013970:	6123      	str	r3, [r4, #16]
 8013972:	f8c9 3000 	str.w	r3, [r9]
 8013976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013978:	2762      	movs	r7, #98	; 0x62
 801397a:	601c      	str	r4, [r3, #0]
 801397c:	e723      	b.n	80137c6 <__gethex+0x12a>
 801397e:	1e71      	subs	r1, r6, #1
 8013980:	4620      	mov	r0, r4
 8013982:	f000 fed1 	bl	8014728 <__any_on>
 8013986:	2800      	cmp	r0, #0
 8013988:	d1ed      	bne.n	8013966 <__gethex+0x2ca>
 801398a:	ee18 0a10 	vmov	r0, s16
 801398e:	4621      	mov	r1, r4
 8013990:	f000 fa70 	bl	8013e74 <_Bfree>
 8013994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013996:	2300      	movs	r3, #0
 8013998:	6013      	str	r3, [r2, #0]
 801399a:	2750      	movs	r7, #80	; 0x50
 801399c:	e713      	b.n	80137c6 <__gethex+0x12a>
 801399e:	bf00      	nop
 80139a0:	0805fd44 	.word	0x0805fd44
 80139a4:	0805fc64 	.word	0x0805fc64
 80139a8:	0805fcd8 	.word	0x0805fcd8
 80139ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d1eb      	bne.n	801398a <__gethex+0x2ee>
 80139b2:	e7d8      	b.n	8013966 <__gethex+0x2ca>
 80139b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d1d5      	bne.n	8013966 <__gethex+0x2ca>
 80139ba:	e7e6      	b.n	801398a <__gethex+0x2ee>
 80139bc:	1e6f      	subs	r7, r5, #1
 80139be:	f1ba 0f00 	cmp.w	sl, #0
 80139c2:	d131      	bne.n	8013a28 <__gethex+0x38c>
 80139c4:	b127      	cbz	r7, 80139d0 <__gethex+0x334>
 80139c6:	4639      	mov	r1, r7
 80139c8:	4620      	mov	r0, r4
 80139ca:	f000 fead 	bl	8014728 <__any_on>
 80139ce:	4682      	mov	sl, r0
 80139d0:	117b      	asrs	r3, r7, #5
 80139d2:	2101      	movs	r1, #1
 80139d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80139d8:	f007 071f 	and.w	r7, r7, #31
 80139dc:	fa01 f707 	lsl.w	r7, r1, r7
 80139e0:	421f      	tst	r7, r3
 80139e2:	4629      	mov	r1, r5
 80139e4:	4620      	mov	r0, r4
 80139e6:	bf18      	it	ne
 80139e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80139ec:	1b76      	subs	r6, r6, r5
 80139ee:	f7ff fdee 	bl	80135ce <rshift>
 80139f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80139f6:	2702      	movs	r7, #2
 80139f8:	f1ba 0f00 	cmp.w	sl, #0
 80139fc:	d048      	beq.n	8013a90 <__gethex+0x3f4>
 80139fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013a02:	2b02      	cmp	r3, #2
 8013a04:	d015      	beq.n	8013a32 <__gethex+0x396>
 8013a06:	2b03      	cmp	r3, #3
 8013a08:	d017      	beq.n	8013a3a <__gethex+0x39e>
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	d109      	bne.n	8013a22 <__gethex+0x386>
 8013a0e:	f01a 0f02 	tst.w	sl, #2
 8013a12:	d006      	beq.n	8013a22 <__gethex+0x386>
 8013a14:	f8d9 0000 	ldr.w	r0, [r9]
 8013a18:	ea4a 0a00 	orr.w	sl, sl, r0
 8013a1c:	f01a 0f01 	tst.w	sl, #1
 8013a20:	d10e      	bne.n	8013a40 <__gethex+0x3a4>
 8013a22:	f047 0710 	orr.w	r7, r7, #16
 8013a26:	e033      	b.n	8013a90 <__gethex+0x3f4>
 8013a28:	f04f 0a01 	mov.w	sl, #1
 8013a2c:	e7d0      	b.n	80139d0 <__gethex+0x334>
 8013a2e:	2701      	movs	r7, #1
 8013a30:	e7e2      	b.n	80139f8 <__gethex+0x35c>
 8013a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a34:	f1c3 0301 	rsb	r3, r3, #1
 8013a38:	9315      	str	r3, [sp, #84]	; 0x54
 8013a3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d0f0      	beq.n	8013a22 <__gethex+0x386>
 8013a40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013a44:	f104 0314 	add.w	r3, r4, #20
 8013a48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013a4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013a50:	f04f 0c00 	mov.w	ip, #0
 8013a54:	4618      	mov	r0, r3
 8013a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a5a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8013a5e:	d01c      	beq.n	8013a9a <__gethex+0x3fe>
 8013a60:	3201      	adds	r2, #1
 8013a62:	6002      	str	r2, [r0, #0]
 8013a64:	2f02      	cmp	r7, #2
 8013a66:	f104 0314 	add.w	r3, r4, #20
 8013a6a:	d13f      	bne.n	8013aec <__gethex+0x450>
 8013a6c:	f8d8 2000 	ldr.w	r2, [r8]
 8013a70:	3a01      	subs	r2, #1
 8013a72:	42b2      	cmp	r2, r6
 8013a74:	d10a      	bne.n	8013a8c <__gethex+0x3f0>
 8013a76:	1171      	asrs	r1, r6, #5
 8013a78:	2201      	movs	r2, #1
 8013a7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a7e:	f006 061f 	and.w	r6, r6, #31
 8013a82:	fa02 f606 	lsl.w	r6, r2, r6
 8013a86:	421e      	tst	r6, r3
 8013a88:	bf18      	it	ne
 8013a8a:	4617      	movne	r7, r2
 8013a8c:	f047 0720 	orr.w	r7, r7, #32
 8013a90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013a92:	601c      	str	r4, [r3, #0]
 8013a94:	9b04      	ldr	r3, [sp, #16]
 8013a96:	601d      	str	r5, [r3, #0]
 8013a98:	e695      	b.n	80137c6 <__gethex+0x12a>
 8013a9a:	4299      	cmp	r1, r3
 8013a9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013aa0:	d8d8      	bhi.n	8013a54 <__gethex+0x3b8>
 8013aa2:	68a3      	ldr	r3, [r4, #8]
 8013aa4:	459b      	cmp	fp, r3
 8013aa6:	db19      	blt.n	8013adc <__gethex+0x440>
 8013aa8:	6861      	ldr	r1, [r4, #4]
 8013aaa:	ee18 0a10 	vmov	r0, s16
 8013aae:	3101      	adds	r1, #1
 8013ab0:	f000 f9a0 	bl	8013df4 <_Balloc>
 8013ab4:	4681      	mov	r9, r0
 8013ab6:	b918      	cbnz	r0, 8013ac0 <__gethex+0x424>
 8013ab8:	4b1a      	ldr	r3, [pc, #104]	; (8013b24 <__gethex+0x488>)
 8013aba:	4602      	mov	r2, r0
 8013abc:	2184      	movs	r1, #132	; 0x84
 8013abe:	e6a8      	b.n	8013812 <__gethex+0x176>
 8013ac0:	6922      	ldr	r2, [r4, #16]
 8013ac2:	3202      	adds	r2, #2
 8013ac4:	f104 010c 	add.w	r1, r4, #12
 8013ac8:	0092      	lsls	r2, r2, #2
 8013aca:	300c      	adds	r0, #12
 8013acc:	f7fc fd0c 	bl	80104e8 <memcpy>
 8013ad0:	4621      	mov	r1, r4
 8013ad2:	ee18 0a10 	vmov	r0, s16
 8013ad6:	f000 f9cd 	bl	8013e74 <_Bfree>
 8013ada:	464c      	mov	r4, r9
 8013adc:	6923      	ldr	r3, [r4, #16]
 8013ade:	1c5a      	adds	r2, r3, #1
 8013ae0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ae4:	6122      	str	r2, [r4, #16]
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	615a      	str	r2, [r3, #20]
 8013aea:	e7bb      	b.n	8013a64 <__gethex+0x3c8>
 8013aec:	6922      	ldr	r2, [r4, #16]
 8013aee:	455a      	cmp	r2, fp
 8013af0:	dd0b      	ble.n	8013b0a <__gethex+0x46e>
 8013af2:	2101      	movs	r1, #1
 8013af4:	4620      	mov	r0, r4
 8013af6:	f7ff fd6a 	bl	80135ce <rshift>
 8013afa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013afe:	3501      	adds	r5, #1
 8013b00:	42ab      	cmp	r3, r5
 8013b02:	f6ff aed0 	blt.w	80138a6 <__gethex+0x20a>
 8013b06:	2701      	movs	r7, #1
 8013b08:	e7c0      	b.n	8013a8c <__gethex+0x3f0>
 8013b0a:	f016 061f 	ands.w	r6, r6, #31
 8013b0e:	d0fa      	beq.n	8013b06 <__gethex+0x46a>
 8013b10:	449a      	add	sl, r3
 8013b12:	f1c6 0620 	rsb	r6, r6, #32
 8013b16:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013b1a:	f000 fa61 	bl	8013fe0 <__hi0bits>
 8013b1e:	42b0      	cmp	r0, r6
 8013b20:	dbe7      	blt.n	8013af2 <__gethex+0x456>
 8013b22:	e7f0      	b.n	8013b06 <__gethex+0x46a>
 8013b24:	0805fc64 	.word	0x0805fc64

08013b28 <L_shift>:
 8013b28:	f1c2 0208 	rsb	r2, r2, #8
 8013b2c:	0092      	lsls	r2, r2, #2
 8013b2e:	b570      	push	{r4, r5, r6, lr}
 8013b30:	f1c2 0620 	rsb	r6, r2, #32
 8013b34:	6843      	ldr	r3, [r0, #4]
 8013b36:	6804      	ldr	r4, [r0, #0]
 8013b38:	fa03 f506 	lsl.w	r5, r3, r6
 8013b3c:	432c      	orrs	r4, r5
 8013b3e:	40d3      	lsrs	r3, r2
 8013b40:	6004      	str	r4, [r0, #0]
 8013b42:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b46:	4288      	cmp	r0, r1
 8013b48:	d3f4      	bcc.n	8013b34 <L_shift+0xc>
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}

08013b4c <__match>:
 8013b4c:	b530      	push	{r4, r5, lr}
 8013b4e:	6803      	ldr	r3, [r0, #0]
 8013b50:	3301      	adds	r3, #1
 8013b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b56:	b914      	cbnz	r4, 8013b5e <__match+0x12>
 8013b58:	6003      	str	r3, [r0, #0]
 8013b5a:	2001      	movs	r0, #1
 8013b5c:	bd30      	pop	{r4, r5, pc}
 8013b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013b66:	2d19      	cmp	r5, #25
 8013b68:	bf98      	it	ls
 8013b6a:	3220      	addls	r2, #32
 8013b6c:	42a2      	cmp	r2, r4
 8013b6e:	d0f0      	beq.n	8013b52 <__match+0x6>
 8013b70:	2000      	movs	r0, #0
 8013b72:	e7f3      	b.n	8013b5c <__match+0x10>

08013b74 <__hexnan>:
 8013b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b78:	680b      	ldr	r3, [r1, #0]
 8013b7a:	6801      	ldr	r1, [r0, #0]
 8013b7c:	115e      	asrs	r6, r3, #5
 8013b7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013b82:	f013 031f 	ands.w	r3, r3, #31
 8013b86:	b087      	sub	sp, #28
 8013b88:	bf18      	it	ne
 8013b8a:	3604      	addne	r6, #4
 8013b8c:	2500      	movs	r5, #0
 8013b8e:	1f37      	subs	r7, r6, #4
 8013b90:	4682      	mov	sl, r0
 8013b92:	4690      	mov	r8, r2
 8013b94:	9301      	str	r3, [sp, #4]
 8013b96:	f846 5c04 	str.w	r5, [r6, #-4]
 8013b9a:	46b9      	mov	r9, r7
 8013b9c:	463c      	mov	r4, r7
 8013b9e:	9502      	str	r5, [sp, #8]
 8013ba0:	46ab      	mov	fp, r5
 8013ba2:	784a      	ldrb	r2, [r1, #1]
 8013ba4:	1c4b      	adds	r3, r1, #1
 8013ba6:	9303      	str	r3, [sp, #12]
 8013ba8:	b342      	cbz	r2, 8013bfc <__hexnan+0x88>
 8013baa:	4610      	mov	r0, r2
 8013bac:	9105      	str	r1, [sp, #20]
 8013bae:	9204      	str	r2, [sp, #16]
 8013bb0:	f7ff fd5f 	bl	8013672 <__hexdig_fun>
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	d14f      	bne.n	8013c58 <__hexnan+0xe4>
 8013bb8:	9a04      	ldr	r2, [sp, #16]
 8013bba:	9905      	ldr	r1, [sp, #20]
 8013bbc:	2a20      	cmp	r2, #32
 8013bbe:	d818      	bhi.n	8013bf2 <__hexnan+0x7e>
 8013bc0:	9b02      	ldr	r3, [sp, #8]
 8013bc2:	459b      	cmp	fp, r3
 8013bc4:	dd13      	ble.n	8013bee <__hexnan+0x7a>
 8013bc6:	454c      	cmp	r4, r9
 8013bc8:	d206      	bcs.n	8013bd8 <__hexnan+0x64>
 8013bca:	2d07      	cmp	r5, #7
 8013bcc:	dc04      	bgt.n	8013bd8 <__hexnan+0x64>
 8013bce:	462a      	mov	r2, r5
 8013bd0:	4649      	mov	r1, r9
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f7ff ffa8 	bl	8013b28 <L_shift>
 8013bd8:	4544      	cmp	r4, r8
 8013bda:	d950      	bls.n	8013c7e <__hexnan+0x10a>
 8013bdc:	2300      	movs	r3, #0
 8013bde:	f1a4 0904 	sub.w	r9, r4, #4
 8013be2:	f844 3c04 	str.w	r3, [r4, #-4]
 8013be6:	f8cd b008 	str.w	fp, [sp, #8]
 8013bea:	464c      	mov	r4, r9
 8013bec:	461d      	mov	r5, r3
 8013bee:	9903      	ldr	r1, [sp, #12]
 8013bf0:	e7d7      	b.n	8013ba2 <__hexnan+0x2e>
 8013bf2:	2a29      	cmp	r2, #41	; 0x29
 8013bf4:	d156      	bne.n	8013ca4 <__hexnan+0x130>
 8013bf6:	3102      	adds	r1, #2
 8013bf8:	f8ca 1000 	str.w	r1, [sl]
 8013bfc:	f1bb 0f00 	cmp.w	fp, #0
 8013c00:	d050      	beq.n	8013ca4 <__hexnan+0x130>
 8013c02:	454c      	cmp	r4, r9
 8013c04:	d206      	bcs.n	8013c14 <__hexnan+0xa0>
 8013c06:	2d07      	cmp	r5, #7
 8013c08:	dc04      	bgt.n	8013c14 <__hexnan+0xa0>
 8013c0a:	462a      	mov	r2, r5
 8013c0c:	4649      	mov	r1, r9
 8013c0e:	4620      	mov	r0, r4
 8013c10:	f7ff ff8a 	bl	8013b28 <L_shift>
 8013c14:	4544      	cmp	r4, r8
 8013c16:	d934      	bls.n	8013c82 <__hexnan+0x10e>
 8013c18:	f1a8 0204 	sub.w	r2, r8, #4
 8013c1c:	4623      	mov	r3, r4
 8013c1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013c22:	f842 1f04 	str.w	r1, [r2, #4]!
 8013c26:	429f      	cmp	r7, r3
 8013c28:	d2f9      	bcs.n	8013c1e <__hexnan+0xaa>
 8013c2a:	1b3b      	subs	r3, r7, r4
 8013c2c:	f023 0303 	bic.w	r3, r3, #3
 8013c30:	3304      	adds	r3, #4
 8013c32:	3401      	adds	r4, #1
 8013c34:	3e03      	subs	r6, #3
 8013c36:	42b4      	cmp	r4, r6
 8013c38:	bf88      	it	hi
 8013c3a:	2304      	movhi	r3, #4
 8013c3c:	4443      	add	r3, r8
 8013c3e:	2200      	movs	r2, #0
 8013c40:	f843 2b04 	str.w	r2, [r3], #4
 8013c44:	429f      	cmp	r7, r3
 8013c46:	d2fb      	bcs.n	8013c40 <__hexnan+0xcc>
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	b91b      	cbnz	r3, 8013c54 <__hexnan+0xe0>
 8013c4c:	4547      	cmp	r7, r8
 8013c4e:	d127      	bne.n	8013ca0 <__hexnan+0x12c>
 8013c50:	2301      	movs	r3, #1
 8013c52:	603b      	str	r3, [r7, #0]
 8013c54:	2005      	movs	r0, #5
 8013c56:	e026      	b.n	8013ca6 <__hexnan+0x132>
 8013c58:	3501      	adds	r5, #1
 8013c5a:	2d08      	cmp	r5, #8
 8013c5c:	f10b 0b01 	add.w	fp, fp, #1
 8013c60:	dd06      	ble.n	8013c70 <__hexnan+0xfc>
 8013c62:	4544      	cmp	r4, r8
 8013c64:	d9c3      	bls.n	8013bee <__hexnan+0x7a>
 8013c66:	2300      	movs	r3, #0
 8013c68:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c6c:	2501      	movs	r5, #1
 8013c6e:	3c04      	subs	r4, #4
 8013c70:	6822      	ldr	r2, [r4, #0]
 8013c72:	f000 000f 	and.w	r0, r0, #15
 8013c76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013c7a:	6022      	str	r2, [r4, #0]
 8013c7c:	e7b7      	b.n	8013bee <__hexnan+0x7a>
 8013c7e:	2508      	movs	r5, #8
 8013c80:	e7b5      	b.n	8013bee <__hexnan+0x7a>
 8013c82:	9b01      	ldr	r3, [sp, #4]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d0df      	beq.n	8013c48 <__hexnan+0xd4>
 8013c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c8c:	f1c3 0320 	rsb	r3, r3, #32
 8013c90:	fa22 f303 	lsr.w	r3, r2, r3
 8013c94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013c98:	401a      	ands	r2, r3
 8013c9a:	f846 2c04 	str.w	r2, [r6, #-4]
 8013c9e:	e7d3      	b.n	8013c48 <__hexnan+0xd4>
 8013ca0:	3f04      	subs	r7, #4
 8013ca2:	e7d1      	b.n	8013c48 <__hexnan+0xd4>
 8013ca4:	2004      	movs	r0, #4
 8013ca6:	b007      	add	sp, #28
 8013ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cac <_localeconv_r>:
 8013cac:	4800      	ldr	r0, [pc, #0]	; (8013cb0 <_localeconv_r+0x4>)
 8013cae:	4770      	bx	lr
 8013cb0:	20001038 	.word	0x20001038

08013cb4 <__retarget_lock_init_recursive>:
 8013cb4:	4770      	bx	lr

08013cb6 <__retarget_lock_acquire_recursive>:
 8013cb6:	4770      	bx	lr

08013cb8 <__retarget_lock_release_recursive>:
 8013cb8:	4770      	bx	lr

08013cba <__swhatbuf_r>:
 8013cba:	b570      	push	{r4, r5, r6, lr}
 8013cbc:	460e      	mov	r6, r1
 8013cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cc2:	2900      	cmp	r1, #0
 8013cc4:	b096      	sub	sp, #88	; 0x58
 8013cc6:	4614      	mov	r4, r2
 8013cc8:	461d      	mov	r5, r3
 8013cca:	da07      	bge.n	8013cdc <__swhatbuf_r+0x22>
 8013ccc:	2300      	movs	r3, #0
 8013cce:	602b      	str	r3, [r5, #0]
 8013cd0:	89b3      	ldrh	r3, [r6, #12]
 8013cd2:	061a      	lsls	r2, r3, #24
 8013cd4:	d410      	bmi.n	8013cf8 <__swhatbuf_r+0x3e>
 8013cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cda:	e00e      	b.n	8013cfa <__swhatbuf_r+0x40>
 8013cdc:	466a      	mov	r2, sp
 8013cde:	f000 ffa7 	bl	8014c30 <_fstat_r>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	dbf2      	blt.n	8013ccc <__swhatbuf_r+0x12>
 8013ce6:	9a01      	ldr	r2, [sp, #4]
 8013ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013cf0:	425a      	negs	r2, r3
 8013cf2:	415a      	adcs	r2, r3
 8013cf4:	602a      	str	r2, [r5, #0]
 8013cf6:	e7ee      	b.n	8013cd6 <__swhatbuf_r+0x1c>
 8013cf8:	2340      	movs	r3, #64	; 0x40
 8013cfa:	2000      	movs	r0, #0
 8013cfc:	6023      	str	r3, [r4, #0]
 8013cfe:	b016      	add	sp, #88	; 0x58
 8013d00:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d04 <__smakebuf_r>:
 8013d04:	898b      	ldrh	r3, [r1, #12]
 8013d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d08:	079d      	lsls	r5, r3, #30
 8013d0a:	4606      	mov	r6, r0
 8013d0c:	460c      	mov	r4, r1
 8013d0e:	d507      	bpl.n	8013d20 <__smakebuf_r+0x1c>
 8013d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d14:	6023      	str	r3, [r4, #0]
 8013d16:	6123      	str	r3, [r4, #16]
 8013d18:	2301      	movs	r3, #1
 8013d1a:	6163      	str	r3, [r4, #20]
 8013d1c:	b002      	add	sp, #8
 8013d1e:	bd70      	pop	{r4, r5, r6, pc}
 8013d20:	ab01      	add	r3, sp, #4
 8013d22:	466a      	mov	r2, sp
 8013d24:	f7ff ffc9 	bl	8013cba <__swhatbuf_r>
 8013d28:	9900      	ldr	r1, [sp, #0]
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	f7fc fc41 	bl	80105b4 <_malloc_r>
 8013d32:	b948      	cbnz	r0, 8013d48 <__smakebuf_r+0x44>
 8013d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d38:	059a      	lsls	r2, r3, #22
 8013d3a:	d4ef      	bmi.n	8013d1c <__smakebuf_r+0x18>
 8013d3c:	f023 0303 	bic.w	r3, r3, #3
 8013d40:	f043 0302 	orr.w	r3, r3, #2
 8013d44:	81a3      	strh	r3, [r4, #12]
 8013d46:	e7e3      	b.n	8013d10 <__smakebuf_r+0xc>
 8013d48:	4b0d      	ldr	r3, [pc, #52]	; (8013d80 <__smakebuf_r+0x7c>)
 8013d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d4c:	89a3      	ldrh	r3, [r4, #12]
 8013d4e:	6020      	str	r0, [r4, #0]
 8013d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d54:	81a3      	strh	r3, [r4, #12]
 8013d56:	9b00      	ldr	r3, [sp, #0]
 8013d58:	6163      	str	r3, [r4, #20]
 8013d5a:	9b01      	ldr	r3, [sp, #4]
 8013d5c:	6120      	str	r0, [r4, #16]
 8013d5e:	b15b      	cbz	r3, 8013d78 <__smakebuf_r+0x74>
 8013d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d64:	4630      	mov	r0, r6
 8013d66:	f000 ff75 	bl	8014c54 <_isatty_r>
 8013d6a:	b128      	cbz	r0, 8013d78 <__smakebuf_r+0x74>
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	f023 0303 	bic.w	r3, r3, #3
 8013d72:	f043 0301 	orr.w	r3, r3, #1
 8013d76:	81a3      	strh	r3, [r4, #12]
 8013d78:	89a0      	ldrh	r0, [r4, #12]
 8013d7a:	4305      	orrs	r5, r0
 8013d7c:	81a5      	strh	r5, [r4, #12]
 8013d7e:	e7cd      	b.n	8013d1c <__smakebuf_r+0x18>
 8013d80:	0801342d 	.word	0x0801342d

08013d84 <__ascii_mbtowc>:
 8013d84:	b082      	sub	sp, #8
 8013d86:	b901      	cbnz	r1, 8013d8a <__ascii_mbtowc+0x6>
 8013d88:	a901      	add	r1, sp, #4
 8013d8a:	b142      	cbz	r2, 8013d9e <__ascii_mbtowc+0x1a>
 8013d8c:	b14b      	cbz	r3, 8013da2 <__ascii_mbtowc+0x1e>
 8013d8e:	7813      	ldrb	r3, [r2, #0]
 8013d90:	600b      	str	r3, [r1, #0]
 8013d92:	7812      	ldrb	r2, [r2, #0]
 8013d94:	1e10      	subs	r0, r2, #0
 8013d96:	bf18      	it	ne
 8013d98:	2001      	movne	r0, #1
 8013d9a:	b002      	add	sp, #8
 8013d9c:	4770      	bx	lr
 8013d9e:	4610      	mov	r0, r2
 8013da0:	e7fb      	b.n	8013d9a <__ascii_mbtowc+0x16>
 8013da2:	f06f 0001 	mvn.w	r0, #1
 8013da6:	e7f8      	b.n	8013d9a <__ascii_mbtowc+0x16>

08013da8 <memmove>:
 8013da8:	4288      	cmp	r0, r1
 8013daa:	b510      	push	{r4, lr}
 8013dac:	eb01 0402 	add.w	r4, r1, r2
 8013db0:	d902      	bls.n	8013db8 <memmove+0x10>
 8013db2:	4284      	cmp	r4, r0
 8013db4:	4623      	mov	r3, r4
 8013db6:	d807      	bhi.n	8013dc8 <memmove+0x20>
 8013db8:	1e43      	subs	r3, r0, #1
 8013dba:	42a1      	cmp	r1, r4
 8013dbc:	d008      	beq.n	8013dd0 <memmove+0x28>
 8013dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013dc6:	e7f8      	b.n	8013dba <memmove+0x12>
 8013dc8:	4402      	add	r2, r0
 8013dca:	4601      	mov	r1, r0
 8013dcc:	428a      	cmp	r2, r1
 8013dce:	d100      	bne.n	8013dd2 <memmove+0x2a>
 8013dd0:	bd10      	pop	{r4, pc}
 8013dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013dda:	e7f7      	b.n	8013dcc <memmove+0x24>

08013ddc <__malloc_lock>:
 8013ddc:	4801      	ldr	r0, [pc, #4]	; (8013de4 <__malloc_lock+0x8>)
 8013dde:	f7ff bf6a 	b.w	8013cb6 <__retarget_lock_acquire_recursive>
 8013de2:	bf00      	nop
 8013de4:	20013d24 	.word	0x20013d24

08013de8 <__malloc_unlock>:
 8013de8:	4801      	ldr	r0, [pc, #4]	; (8013df0 <__malloc_unlock+0x8>)
 8013dea:	f7ff bf65 	b.w	8013cb8 <__retarget_lock_release_recursive>
 8013dee:	bf00      	nop
 8013df0:	20013d24 	.word	0x20013d24

08013df4 <_Balloc>:
 8013df4:	b570      	push	{r4, r5, r6, lr}
 8013df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013df8:	4604      	mov	r4, r0
 8013dfa:	460d      	mov	r5, r1
 8013dfc:	b976      	cbnz	r6, 8013e1c <_Balloc+0x28>
 8013dfe:	2010      	movs	r0, #16
 8013e00:	f7fc fb6a 	bl	80104d8 <malloc>
 8013e04:	4602      	mov	r2, r0
 8013e06:	6260      	str	r0, [r4, #36]	; 0x24
 8013e08:	b920      	cbnz	r0, 8013e14 <_Balloc+0x20>
 8013e0a:	4b18      	ldr	r3, [pc, #96]	; (8013e6c <_Balloc+0x78>)
 8013e0c:	4818      	ldr	r0, [pc, #96]	; (8013e70 <_Balloc+0x7c>)
 8013e0e:	2166      	movs	r1, #102	; 0x66
 8013e10:	f7fc fb08 	bl	8010424 <__assert_func>
 8013e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e18:	6006      	str	r6, [r0, #0]
 8013e1a:	60c6      	str	r6, [r0, #12]
 8013e1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013e1e:	68f3      	ldr	r3, [r6, #12]
 8013e20:	b183      	cbz	r3, 8013e44 <_Balloc+0x50>
 8013e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e24:	68db      	ldr	r3, [r3, #12]
 8013e26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013e2a:	b9b8      	cbnz	r0, 8013e5c <_Balloc+0x68>
 8013e2c:	2101      	movs	r1, #1
 8013e2e:	fa01 f605 	lsl.w	r6, r1, r5
 8013e32:	1d72      	adds	r2, r6, #5
 8013e34:	0092      	lsls	r2, r2, #2
 8013e36:	4620      	mov	r0, r4
 8013e38:	f000 fc97 	bl	801476a <_calloc_r>
 8013e3c:	b160      	cbz	r0, 8013e58 <_Balloc+0x64>
 8013e3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013e42:	e00e      	b.n	8013e62 <_Balloc+0x6e>
 8013e44:	2221      	movs	r2, #33	; 0x21
 8013e46:	2104      	movs	r1, #4
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f000 fc8e 	bl	801476a <_calloc_r>
 8013e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e50:	60f0      	str	r0, [r6, #12]
 8013e52:	68db      	ldr	r3, [r3, #12]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d1e4      	bne.n	8013e22 <_Balloc+0x2e>
 8013e58:	2000      	movs	r0, #0
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}
 8013e5c:	6802      	ldr	r2, [r0, #0]
 8013e5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e62:	2300      	movs	r3, #0
 8013e64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e68:	e7f7      	b.n	8013e5a <_Balloc+0x66>
 8013e6a:	bf00      	nop
 8013e6c:	0805fbee 	.word	0x0805fbee
 8013e70:	0805fd58 	.word	0x0805fd58

08013e74 <_Bfree>:
 8013e74:	b570      	push	{r4, r5, r6, lr}
 8013e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013e78:	4605      	mov	r5, r0
 8013e7a:	460c      	mov	r4, r1
 8013e7c:	b976      	cbnz	r6, 8013e9c <_Bfree+0x28>
 8013e7e:	2010      	movs	r0, #16
 8013e80:	f7fc fb2a 	bl	80104d8 <malloc>
 8013e84:	4602      	mov	r2, r0
 8013e86:	6268      	str	r0, [r5, #36]	; 0x24
 8013e88:	b920      	cbnz	r0, 8013e94 <_Bfree+0x20>
 8013e8a:	4b09      	ldr	r3, [pc, #36]	; (8013eb0 <_Bfree+0x3c>)
 8013e8c:	4809      	ldr	r0, [pc, #36]	; (8013eb4 <_Bfree+0x40>)
 8013e8e:	218a      	movs	r1, #138	; 0x8a
 8013e90:	f7fc fac8 	bl	8010424 <__assert_func>
 8013e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e98:	6006      	str	r6, [r0, #0]
 8013e9a:	60c6      	str	r6, [r0, #12]
 8013e9c:	b13c      	cbz	r4, 8013eae <_Bfree+0x3a>
 8013e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013ea0:	6862      	ldr	r2, [r4, #4]
 8013ea2:	68db      	ldr	r3, [r3, #12]
 8013ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ea8:	6021      	str	r1, [r4, #0]
 8013eaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013eae:	bd70      	pop	{r4, r5, r6, pc}
 8013eb0:	0805fbee 	.word	0x0805fbee
 8013eb4:	0805fd58 	.word	0x0805fd58

08013eb8 <__multadd>:
 8013eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ebc:	690e      	ldr	r6, [r1, #16]
 8013ebe:	4607      	mov	r7, r0
 8013ec0:	4698      	mov	r8, r3
 8013ec2:	460c      	mov	r4, r1
 8013ec4:	f101 0014 	add.w	r0, r1, #20
 8013ec8:	2300      	movs	r3, #0
 8013eca:	6805      	ldr	r5, [r0, #0]
 8013ecc:	b2a9      	uxth	r1, r5
 8013ece:	fb02 8101 	mla	r1, r2, r1, r8
 8013ed2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013ed6:	0c2d      	lsrs	r5, r5, #16
 8013ed8:	fb02 c505 	mla	r5, r2, r5, ip
 8013edc:	b289      	uxth	r1, r1
 8013ede:	3301      	adds	r3, #1
 8013ee0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013ee4:	429e      	cmp	r6, r3
 8013ee6:	f840 1b04 	str.w	r1, [r0], #4
 8013eea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013eee:	dcec      	bgt.n	8013eca <__multadd+0x12>
 8013ef0:	f1b8 0f00 	cmp.w	r8, #0
 8013ef4:	d022      	beq.n	8013f3c <__multadd+0x84>
 8013ef6:	68a3      	ldr	r3, [r4, #8]
 8013ef8:	42b3      	cmp	r3, r6
 8013efa:	dc19      	bgt.n	8013f30 <__multadd+0x78>
 8013efc:	6861      	ldr	r1, [r4, #4]
 8013efe:	4638      	mov	r0, r7
 8013f00:	3101      	adds	r1, #1
 8013f02:	f7ff ff77 	bl	8013df4 <_Balloc>
 8013f06:	4605      	mov	r5, r0
 8013f08:	b928      	cbnz	r0, 8013f16 <__multadd+0x5e>
 8013f0a:	4602      	mov	r2, r0
 8013f0c:	4b0d      	ldr	r3, [pc, #52]	; (8013f44 <__multadd+0x8c>)
 8013f0e:	480e      	ldr	r0, [pc, #56]	; (8013f48 <__multadd+0x90>)
 8013f10:	21b5      	movs	r1, #181	; 0xb5
 8013f12:	f7fc fa87 	bl	8010424 <__assert_func>
 8013f16:	6922      	ldr	r2, [r4, #16]
 8013f18:	3202      	adds	r2, #2
 8013f1a:	f104 010c 	add.w	r1, r4, #12
 8013f1e:	0092      	lsls	r2, r2, #2
 8013f20:	300c      	adds	r0, #12
 8013f22:	f7fc fae1 	bl	80104e8 <memcpy>
 8013f26:	4621      	mov	r1, r4
 8013f28:	4638      	mov	r0, r7
 8013f2a:	f7ff ffa3 	bl	8013e74 <_Bfree>
 8013f2e:	462c      	mov	r4, r5
 8013f30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013f34:	3601      	adds	r6, #1
 8013f36:	f8c3 8014 	str.w	r8, [r3, #20]
 8013f3a:	6126      	str	r6, [r4, #16]
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f42:	bf00      	nop
 8013f44:	0805fc64 	.word	0x0805fc64
 8013f48:	0805fd58 	.word	0x0805fd58

08013f4c <__s2b>:
 8013f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f50:	460c      	mov	r4, r1
 8013f52:	4615      	mov	r5, r2
 8013f54:	461f      	mov	r7, r3
 8013f56:	2209      	movs	r2, #9
 8013f58:	3308      	adds	r3, #8
 8013f5a:	4606      	mov	r6, r0
 8013f5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f60:	2100      	movs	r1, #0
 8013f62:	2201      	movs	r2, #1
 8013f64:	429a      	cmp	r2, r3
 8013f66:	db09      	blt.n	8013f7c <__s2b+0x30>
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f7ff ff43 	bl	8013df4 <_Balloc>
 8013f6e:	b940      	cbnz	r0, 8013f82 <__s2b+0x36>
 8013f70:	4602      	mov	r2, r0
 8013f72:	4b19      	ldr	r3, [pc, #100]	; (8013fd8 <__s2b+0x8c>)
 8013f74:	4819      	ldr	r0, [pc, #100]	; (8013fdc <__s2b+0x90>)
 8013f76:	21ce      	movs	r1, #206	; 0xce
 8013f78:	f7fc fa54 	bl	8010424 <__assert_func>
 8013f7c:	0052      	lsls	r2, r2, #1
 8013f7e:	3101      	adds	r1, #1
 8013f80:	e7f0      	b.n	8013f64 <__s2b+0x18>
 8013f82:	9b08      	ldr	r3, [sp, #32]
 8013f84:	6143      	str	r3, [r0, #20]
 8013f86:	2d09      	cmp	r5, #9
 8013f88:	f04f 0301 	mov.w	r3, #1
 8013f8c:	6103      	str	r3, [r0, #16]
 8013f8e:	dd16      	ble.n	8013fbe <__s2b+0x72>
 8013f90:	f104 0909 	add.w	r9, r4, #9
 8013f94:	46c8      	mov	r8, r9
 8013f96:	442c      	add	r4, r5
 8013f98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013f9c:	4601      	mov	r1, r0
 8013f9e:	3b30      	subs	r3, #48	; 0x30
 8013fa0:	220a      	movs	r2, #10
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	f7ff ff88 	bl	8013eb8 <__multadd>
 8013fa8:	45a0      	cmp	r8, r4
 8013faa:	d1f5      	bne.n	8013f98 <__s2b+0x4c>
 8013fac:	f1a5 0408 	sub.w	r4, r5, #8
 8013fb0:	444c      	add	r4, r9
 8013fb2:	1b2d      	subs	r5, r5, r4
 8013fb4:	1963      	adds	r3, r4, r5
 8013fb6:	42bb      	cmp	r3, r7
 8013fb8:	db04      	blt.n	8013fc4 <__s2b+0x78>
 8013fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fbe:	340a      	adds	r4, #10
 8013fc0:	2509      	movs	r5, #9
 8013fc2:	e7f6      	b.n	8013fb2 <__s2b+0x66>
 8013fc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013fc8:	4601      	mov	r1, r0
 8013fca:	3b30      	subs	r3, #48	; 0x30
 8013fcc:	220a      	movs	r2, #10
 8013fce:	4630      	mov	r0, r6
 8013fd0:	f7ff ff72 	bl	8013eb8 <__multadd>
 8013fd4:	e7ee      	b.n	8013fb4 <__s2b+0x68>
 8013fd6:	bf00      	nop
 8013fd8:	0805fc64 	.word	0x0805fc64
 8013fdc:	0805fd58 	.word	0x0805fd58

08013fe0 <__hi0bits>:
 8013fe0:	0c03      	lsrs	r3, r0, #16
 8013fe2:	041b      	lsls	r3, r3, #16
 8013fe4:	b9d3      	cbnz	r3, 801401c <__hi0bits+0x3c>
 8013fe6:	0400      	lsls	r0, r0, #16
 8013fe8:	2310      	movs	r3, #16
 8013fea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013fee:	bf04      	itt	eq
 8013ff0:	0200      	lsleq	r0, r0, #8
 8013ff2:	3308      	addeq	r3, #8
 8013ff4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013ff8:	bf04      	itt	eq
 8013ffa:	0100      	lsleq	r0, r0, #4
 8013ffc:	3304      	addeq	r3, #4
 8013ffe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014002:	bf04      	itt	eq
 8014004:	0080      	lsleq	r0, r0, #2
 8014006:	3302      	addeq	r3, #2
 8014008:	2800      	cmp	r0, #0
 801400a:	db05      	blt.n	8014018 <__hi0bits+0x38>
 801400c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014010:	f103 0301 	add.w	r3, r3, #1
 8014014:	bf08      	it	eq
 8014016:	2320      	moveq	r3, #32
 8014018:	4618      	mov	r0, r3
 801401a:	4770      	bx	lr
 801401c:	2300      	movs	r3, #0
 801401e:	e7e4      	b.n	8013fea <__hi0bits+0xa>

08014020 <__lo0bits>:
 8014020:	6803      	ldr	r3, [r0, #0]
 8014022:	f013 0207 	ands.w	r2, r3, #7
 8014026:	4601      	mov	r1, r0
 8014028:	d00b      	beq.n	8014042 <__lo0bits+0x22>
 801402a:	07da      	lsls	r2, r3, #31
 801402c:	d424      	bmi.n	8014078 <__lo0bits+0x58>
 801402e:	0798      	lsls	r0, r3, #30
 8014030:	bf49      	itett	mi
 8014032:	085b      	lsrmi	r3, r3, #1
 8014034:	089b      	lsrpl	r3, r3, #2
 8014036:	2001      	movmi	r0, #1
 8014038:	600b      	strmi	r3, [r1, #0]
 801403a:	bf5c      	itt	pl
 801403c:	600b      	strpl	r3, [r1, #0]
 801403e:	2002      	movpl	r0, #2
 8014040:	4770      	bx	lr
 8014042:	b298      	uxth	r0, r3
 8014044:	b9b0      	cbnz	r0, 8014074 <__lo0bits+0x54>
 8014046:	0c1b      	lsrs	r3, r3, #16
 8014048:	2010      	movs	r0, #16
 801404a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801404e:	bf04      	itt	eq
 8014050:	0a1b      	lsreq	r3, r3, #8
 8014052:	3008      	addeq	r0, #8
 8014054:	071a      	lsls	r2, r3, #28
 8014056:	bf04      	itt	eq
 8014058:	091b      	lsreq	r3, r3, #4
 801405a:	3004      	addeq	r0, #4
 801405c:	079a      	lsls	r2, r3, #30
 801405e:	bf04      	itt	eq
 8014060:	089b      	lsreq	r3, r3, #2
 8014062:	3002      	addeq	r0, #2
 8014064:	07da      	lsls	r2, r3, #31
 8014066:	d403      	bmi.n	8014070 <__lo0bits+0x50>
 8014068:	085b      	lsrs	r3, r3, #1
 801406a:	f100 0001 	add.w	r0, r0, #1
 801406e:	d005      	beq.n	801407c <__lo0bits+0x5c>
 8014070:	600b      	str	r3, [r1, #0]
 8014072:	4770      	bx	lr
 8014074:	4610      	mov	r0, r2
 8014076:	e7e8      	b.n	801404a <__lo0bits+0x2a>
 8014078:	2000      	movs	r0, #0
 801407a:	4770      	bx	lr
 801407c:	2020      	movs	r0, #32
 801407e:	4770      	bx	lr

08014080 <__i2b>:
 8014080:	b510      	push	{r4, lr}
 8014082:	460c      	mov	r4, r1
 8014084:	2101      	movs	r1, #1
 8014086:	f7ff feb5 	bl	8013df4 <_Balloc>
 801408a:	4602      	mov	r2, r0
 801408c:	b928      	cbnz	r0, 801409a <__i2b+0x1a>
 801408e:	4b05      	ldr	r3, [pc, #20]	; (80140a4 <__i2b+0x24>)
 8014090:	4805      	ldr	r0, [pc, #20]	; (80140a8 <__i2b+0x28>)
 8014092:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014096:	f7fc f9c5 	bl	8010424 <__assert_func>
 801409a:	2301      	movs	r3, #1
 801409c:	6144      	str	r4, [r0, #20]
 801409e:	6103      	str	r3, [r0, #16]
 80140a0:	bd10      	pop	{r4, pc}
 80140a2:	bf00      	nop
 80140a4:	0805fc64 	.word	0x0805fc64
 80140a8:	0805fd58 	.word	0x0805fd58

080140ac <__multiply>:
 80140ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140b0:	4614      	mov	r4, r2
 80140b2:	690a      	ldr	r2, [r1, #16]
 80140b4:	6923      	ldr	r3, [r4, #16]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	bfb8      	it	lt
 80140ba:	460b      	movlt	r3, r1
 80140bc:	460d      	mov	r5, r1
 80140be:	bfbc      	itt	lt
 80140c0:	4625      	movlt	r5, r4
 80140c2:	461c      	movlt	r4, r3
 80140c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80140c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80140cc:	68ab      	ldr	r3, [r5, #8]
 80140ce:	6869      	ldr	r1, [r5, #4]
 80140d0:	eb0a 0709 	add.w	r7, sl, r9
 80140d4:	42bb      	cmp	r3, r7
 80140d6:	b085      	sub	sp, #20
 80140d8:	bfb8      	it	lt
 80140da:	3101      	addlt	r1, #1
 80140dc:	f7ff fe8a 	bl	8013df4 <_Balloc>
 80140e0:	b930      	cbnz	r0, 80140f0 <__multiply+0x44>
 80140e2:	4602      	mov	r2, r0
 80140e4:	4b42      	ldr	r3, [pc, #264]	; (80141f0 <__multiply+0x144>)
 80140e6:	4843      	ldr	r0, [pc, #268]	; (80141f4 <__multiply+0x148>)
 80140e8:	f240 115d 	movw	r1, #349	; 0x15d
 80140ec:	f7fc f99a 	bl	8010424 <__assert_func>
 80140f0:	f100 0614 	add.w	r6, r0, #20
 80140f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80140f8:	4633      	mov	r3, r6
 80140fa:	2200      	movs	r2, #0
 80140fc:	4543      	cmp	r3, r8
 80140fe:	d31e      	bcc.n	801413e <__multiply+0x92>
 8014100:	f105 0c14 	add.w	ip, r5, #20
 8014104:	f104 0314 	add.w	r3, r4, #20
 8014108:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801410c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014110:	9202      	str	r2, [sp, #8]
 8014112:	ebac 0205 	sub.w	r2, ip, r5
 8014116:	3a15      	subs	r2, #21
 8014118:	f022 0203 	bic.w	r2, r2, #3
 801411c:	3204      	adds	r2, #4
 801411e:	f105 0115 	add.w	r1, r5, #21
 8014122:	458c      	cmp	ip, r1
 8014124:	bf38      	it	cc
 8014126:	2204      	movcc	r2, #4
 8014128:	9201      	str	r2, [sp, #4]
 801412a:	9a02      	ldr	r2, [sp, #8]
 801412c:	9303      	str	r3, [sp, #12]
 801412e:	429a      	cmp	r2, r3
 8014130:	d808      	bhi.n	8014144 <__multiply+0x98>
 8014132:	2f00      	cmp	r7, #0
 8014134:	dc55      	bgt.n	80141e2 <__multiply+0x136>
 8014136:	6107      	str	r7, [r0, #16]
 8014138:	b005      	add	sp, #20
 801413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801413e:	f843 2b04 	str.w	r2, [r3], #4
 8014142:	e7db      	b.n	80140fc <__multiply+0x50>
 8014144:	f8b3 a000 	ldrh.w	sl, [r3]
 8014148:	f1ba 0f00 	cmp.w	sl, #0
 801414c:	d020      	beq.n	8014190 <__multiply+0xe4>
 801414e:	f105 0e14 	add.w	lr, r5, #20
 8014152:	46b1      	mov	r9, r6
 8014154:	2200      	movs	r2, #0
 8014156:	f85e 4b04 	ldr.w	r4, [lr], #4
 801415a:	f8d9 b000 	ldr.w	fp, [r9]
 801415e:	b2a1      	uxth	r1, r4
 8014160:	fa1f fb8b 	uxth.w	fp, fp
 8014164:	fb0a b101 	mla	r1, sl, r1, fp
 8014168:	4411      	add	r1, r2
 801416a:	f8d9 2000 	ldr.w	r2, [r9]
 801416e:	0c24      	lsrs	r4, r4, #16
 8014170:	0c12      	lsrs	r2, r2, #16
 8014172:	fb0a 2404 	mla	r4, sl, r4, r2
 8014176:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801417a:	b289      	uxth	r1, r1
 801417c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014180:	45f4      	cmp	ip, lr
 8014182:	f849 1b04 	str.w	r1, [r9], #4
 8014186:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801418a:	d8e4      	bhi.n	8014156 <__multiply+0xaa>
 801418c:	9901      	ldr	r1, [sp, #4]
 801418e:	5072      	str	r2, [r6, r1]
 8014190:	9a03      	ldr	r2, [sp, #12]
 8014192:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014196:	3304      	adds	r3, #4
 8014198:	f1b9 0f00 	cmp.w	r9, #0
 801419c:	d01f      	beq.n	80141de <__multiply+0x132>
 801419e:	6834      	ldr	r4, [r6, #0]
 80141a0:	f105 0114 	add.w	r1, r5, #20
 80141a4:	46b6      	mov	lr, r6
 80141a6:	f04f 0a00 	mov.w	sl, #0
 80141aa:	880a      	ldrh	r2, [r1, #0]
 80141ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80141b0:	fb09 b202 	mla	r2, r9, r2, fp
 80141b4:	4492      	add	sl, r2
 80141b6:	b2a4      	uxth	r4, r4
 80141b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80141bc:	f84e 4b04 	str.w	r4, [lr], #4
 80141c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80141c4:	f8be 2000 	ldrh.w	r2, [lr]
 80141c8:	0c24      	lsrs	r4, r4, #16
 80141ca:	fb09 2404 	mla	r4, r9, r4, r2
 80141ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80141d2:	458c      	cmp	ip, r1
 80141d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80141d8:	d8e7      	bhi.n	80141aa <__multiply+0xfe>
 80141da:	9a01      	ldr	r2, [sp, #4]
 80141dc:	50b4      	str	r4, [r6, r2]
 80141de:	3604      	adds	r6, #4
 80141e0:	e7a3      	b.n	801412a <__multiply+0x7e>
 80141e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d1a5      	bne.n	8014136 <__multiply+0x8a>
 80141ea:	3f01      	subs	r7, #1
 80141ec:	e7a1      	b.n	8014132 <__multiply+0x86>
 80141ee:	bf00      	nop
 80141f0:	0805fc64 	.word	0x0805fc64
 80141f4:	0805fd58 	.word	0x0805fd58

080141f8 <__pow5mult>:
 80141f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141fc:	4615      	mov	r5, r2
 80141fe:	f012 0203 	ands.w	r2, r2, #3
 8014202:	4606      	mov	r6, r0
 8014204:	460f      	mov	r7, r1
 8014206:	d007      	beq.n	8014218 <__pow5mult+0x20>
 8014208:	4c25      	ldr	r4, [pc, #148]	; (80142a0 <__pow5mult+0xa8>)
 801420a:	3a01      	subs	r2, #1
 801420c:	2300      	movs	r3, #0
 801420e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014212:	f7ff fe51 	bl	8013eb8 <__multadd>
 8014216:	4607      	mov	r7, r0
 8014218:	10ad      	asrs	r5, r5, #2
 801421a:	d03d      	beq.n	8014298 <__pow5mult+0xa0>
 801421c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801421e:	b97c      	cbnz	r4, 8014240 <__pow5mult+0x48>
 8014220:	2010      	movs	r0, #16
 8014222:	f7fc f959 	bl	80104d8 <malloc>
 8014226:	4602      	mov	r2, r0
 8014228:	6270      	str	r0, [r6, #36]	; 0x24
 801422a:	b928      	cbnz	r0, 8014238 <__pow5mult+0x40>
 801422c:	4b1d      	ldr	r3, [pc, #116]	; (80142a4 <__pow5mult+0xac>)
 801422e:	481e      	ldr	r0, [pc, #120]	; (80142a8 <__pow5mult+0xb0>)
 8014230:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014234:	f7fc f8f6 	bl	8010424 <__assert_func>
 8014238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801423c:	6004      	str	r4, [r0, #0]
 801423e:	60c4      	str	r4, [r0, #12]
 8014240:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014248:	b94c      	cbnz	r4, 801425e <__pow5mult+0x66>
 801424a:	f240 2171 	movw	r1, #625	; 0x271
 801424e:	4630      	mov	r0, r6
 8014250:	f7ff ff16 	bl	8014080 <__i2b>
 8014254:	2300      	movs	r3, #0
 8014256:	f8c8 0008 	str.w	r0, [r8, #8]
 801425a:	4604      	mov	r4, r0
 801425c:	6003      	str	r3, [r0, #0]
 801425e:	f04f 0900 	mov.w	r9, #0
 8014262:	07eb      	lsls	r3, r5, #31
 8014264:	d50a      	bpl.n	801427c <__pow5mult+0x84>
 8014266:	4639      	mov	r1, r7
 8014268:	4622      	mov	r2, r4
 801426a:	4630      	mov	r0, r6
 801426c:	f7ff ff1e 	bl	80140ac <__multiply>
 8014270:	4639      	mov	r1, r7
 8014272:	4680      	mov	r8, r0
 8014274:	4630      	mov	r0, r6
 8014276:	f7ff fdfd 	bl	8013e74 <_Bfree>
 801427a:	4647      	mov	r7, r8
 801427c:	106d      	asrs	r5, r5, #1
 801427e:	d00b      	beq.n	8014298 <__pow5mult+0xa0>
 8014280:	6820      	ldr	r0, [r4, #0]
 8014282:	b938      	cbnz	r0, 8014294 <__pow5mult+0x9c>
 8014284:	4622      	mov	r2, r4
 8014286:	4621      	mov	r1, r4
 8014288:	4630      	mov	r0, r6
 801428a:	f7ff ff0f 	bl	80140ac <__multiply>
 801428e:	6020      	str	r0, [r4, #0]
 8014290:	f8c0 9000 	str.w	r9, [r0]
 8014294:	4604      	mov	r4, r0
 8014296:	e7e4      	b.n	8014262 <__pow5mult+0x6a>
 8014298:	4638      	mov	r0, r7
 801429a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801429e:	bf00      	nop
 80142a0:	0805fea8 	.word	0x0805fea8
 80142a4:	0805fbee 	.word	0x0805fbee
 80142a8:	0805fd58 	.word	0x0805fd58

080142ac <__lshift>:
 80142ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142b0:	460c      	mov	r4, r1
 80142b2:	6849      	ldr	r1, [r1, #4]
 80142b4:	6923      	ldr	r3, [r4, #16]
 80142b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80142ba:	68a3      	ldr	r3, [r4, #8]
 80142bc:	4607      	mov	r7, r0
 80142be:	4691      	mov	r9, r2
 80142c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80142c4:	f108 0601 	add.w	r6, r8, #1
 80142c8:	42b3      	cmp	r3, r6
 80142ca:	db0b      	blt.n	80142e4 <__lshift+0x38>
 80142cc:	4638      	mov	r0, r7
 80142ce:	f7ff fd91 	bl	8013df4 <_Balloc>
 80142d2:	4605      	mov	r5, r0
 80142d4:	b948      	cbnz	r0, 80142ea <__lshift+0x3e>
 80142d6:	4602      	mov	r2, r0
 80142d8:	4b28      	ldr	r3, [pc, #160]	; (801437c <__lshift+0xd0>)
 80142da:	4829      	ldr	r0, [pc, #164]	; (8014380 <__lshift+0xd4>)
 80142dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80142e0:	f7fc f8a0 	bl	8010424 <__assert_func>
 80142e4:	3101      	adds	r1, #1
 80142e6:	005b      	lsls	r3, r3, #1
 80142e8:	e7ee      	b.n	80142c8 <__lshift+0x1c>
 80142ea:	2300      	movs	r3, #0
 80142ec:	f100 0114 	add.w	r1, r0, #20
 80142f0:	f100 0210 	add.w	r2, r0, #16
 80142f4:	4618      	mov	r0, r3
 80142f6:	4553      	cmp	r3, sl
 80142f8:	db33      	blt.n	8014362 <__lshift+0xb6>
 80142fa:	6920      	ldr	r0, [r4, #16]
 80142fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014300:	f104 0314 	add.w	r3, r4, #20
 8014304:	f019 091f 	ands.w	r9, r9, #31
 8014308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801430c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014310:	d02b      	beq.n	801436a <__lshift+0xbe>
 8014312:	f1c9 0e20 	rsb	lr, r9, #32
 8014316:	468a      	mov	sl, r1
 8014318:	2200      	movs	r2, #0
 801431a:	6818      	ldr	r0, [r3, #0]
 801431c:	fa00 f009 	lsl.w	r0, r0, r9
 8014320:	4302      	orrs	r2, r0
 8014322:	f84a 2b04 	str.w	r2, [sl], #4
 8014326:	f853 2b04 	ldr.w	r2, [r3], #4
 801432a:	459c      	cmp	ip, r3
 801432c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014330:	d8f3      	bhi.n	801431a <__lshift+0x6e>
 8014332:	ebac 0304 	sub.w	r3, ip, r4
 8014336:	3b15      	subs	r3, #21
 8014338:	f023 0303 	bic.w	r3, r3, #3
 801433c:	3304      	adds	r3, #4
 801433e:	f104 0015 	add.w	r0, r4, #21
 8014342:	4584      	cmp	ip, r0
 8014344:	bf38      	it	cc
 8014346:	2304      	movcc	r3, #4
 8014348:	50ca      	str	r2, [r1, r3]
 801434a:	b10a      	cbz	r2, 8014350 <__lshift+0xa4>
 801434c:	f108 0602 	add.w	r6, r8, #2
 8014350:	3e01      	subs	r6, #1
 8014352:	4638      	mov	r0, r7
 8014354:	612e      	str	r6, [r5, #16]
 8014356:	4621      	mov	r1, r4
 8014358:	f7ff fd8c 	bl	8013e74 <_Bfree>
 801435c:	4628      	mov	r0, r5
 801435e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014362:	f842 0f04 	str.w	r0, [r2, #4]!
 8014366:	3301      	adds	r3, #1
 8014368:	e7c5      	b.n	80142f6 <__lshift+0x4a>
 801436a:	3904      	subs	r1, #4
 801436c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014370:	f841 2f04 	str.w	r2, [r1, #4]!
 8014374:	459c      	cmp	ip, r3
 8014376:	d8f9      	bhi.n	801436c <__lshift+0xc0>
 8014378:	e7ea      	b.n	8014350 <__lshift+0xa4>
 801437a:	bf00      	nop
 801437c:	0805fc64 	.word	0x0805fc64
 8014380:	0805fd58 	.word	0x0805fd58

08014384 <__mcmp>:
 8014384:	b530      	push	{r4, r5, lr}
 8014386:	6902      	ldr	r2, [r0, #16]
 8014388:	690c      	ldr	r4, [r1, #16]
 801438a:	1b12      	subs	r2, r2, r4
 801438c:	d10e      	bne.n	80143ac <__mcmp+0x28>
 801438e:	f100 0314 	add.w	r3, r0, #20
 8014392:	3114      	adds	r1, #20
 8014394:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014398:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801439c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80143a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80143a4:	42a5      	cmp	r5, r4
 80143a6:	d003      	beq.n	80143b0 <__mcmp+0x2c>
 80143a8:	d305      	bcc.n	80143b6 <__mcmp+0x32>
 80143aa:	2201      	movs	r2, #1
 80143ac:	4610      	mov	r0, r2
 80143ae:	bd30      	pop	{r4, r5, pc}
 80143b0:	4283      	cmp	r3, r0
 80143b2:	d3f3      	bcc.n	801439c <__mcmp+0x18>
 80143b4:	e7fa      	b.n	80143ac <__mcmp+0x28>
 80143b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143ba:	e7f7      	b.n	80143ac <__mcmp+0x28>

080143bc <__mdiff>:
 80143bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c0:	460c      	mov	r4, r1
 80143c2:	4606      	mov	r6, r0
 80143c4:	4611      	mov	r1, r2
 80143c6:	4620      	mov	r0, r4
 80143c8:	4617      	mov	r7, r2
 80143ca:	f7ff ffdb 	bl	8014384 <__mcmp>
 80143ce:	1e05      	subs	r5, r0, #0
 80143d0:	d110      	bne.n	80143f4 <__mdiff+0x38>
 80143d2:	4629      	mov	r1, r5
 80143d4:	4630      	mov	r0, r6
 80143d6:	f7ff fd0d 	bl	8013df4 <_Balloc>
 80143da:	b930      	cbnz	r0, 80143ea <__mdiff+0x2e>
 80143dc:	4b39      	ldr	r3, [pc, #228]	; (80144c4 <__mdiff+0x108>)
 80143de:	4602      	mov	r2, r0
 80143e0:	f240 2132 	movw	r1, #562	; 0x232
 80143e4:	4838      	ldr	r0, [pc, #224]	; (80144c8 <__mdiff+0x10c>)
 80143e6:	f7fc f81d 	bl	8010424 <__assert_func>
 80143ea:	2301      	movs	r3, #1
 80143ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80143f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f4:	bfa4      	itt	ge
 80143f6:	463b      	movge	r3, r7
 80143f8:	4627      	movge	r7, r4
 80143fa:	4630      	mov	r0, r6
 80143fc:	6879      	ldr	r1, [r7, #4]
 80143fe:	bfa6      	itte	ge
 8014400:	461c      	movge	r4, r3
 8014402:	2500      	movge	r5, #0
 8014404:	2501      	movlt	r5, #1
 8014406:	f7ff fcf5 	bl	8013df4 <_Balloc>
 801440a:	b920      	cbnz	r0, 8014416 <__mdiff+0x5a>
 801440c:	4b2d      	ldr	r3, [pc, #180]	; (80144c4 <__mdiff+0x108>)
 801440e:	4602      	mov	r2, r0
 8014410:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014414:	e7e6      	b.n	80143e4 <__mdiff+0x28>
 8014416:	693e      	ldr	r6, [r7, #16]
 8014418:	60c5      	str	r5, [r0, #12]
 801441a:	6925      	ldr	r5, [r4, #16]
 801441c:	f107 0114 	add.w	r1, r7, #20
 8014420:	f104 0914 	add.w	r9, r4, #20
 8014424:	f100 0e14 	add.w	lr, r0, #20
 8014428:	f107 0210 	add.w	r2, r7, #16
 801442c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014430:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014434:	46f2      	mov	sl, lr
 8014436:	2700      	movs	r7, #0
 8014438:	f859 3b04 	ldr.w	r3, [r9], #4
 801443c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014440:	fa1f f883 	uxth.w	r8, r3
 8014444:	fa17 f78b 	uxtah	r7, r7, fp
 8014448:	0c1b      	lsrs	r3, r3, #16
 801444a:	eba7 0808 	sub.w	r8, r7, r8
 801444e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014452:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014456:	fa1f f888 	uxth.w	r8, r8
 801445a:	141f      	asrs	r7, r3, #16
 801445c:	454d      	cmp	r5, r9
 801445e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014462:	f84a 3b04 	str.w	r3, [sl], #4
 8014466:	d8e7      	bhi.n	8014438 <__mdiff+0x7c>
 8014468:	1b2b      	subs	r3, r5, r4
 801446a:	3b15      	subs	r3, #21
 801446c:	f023 0303 	bic.w	r3, r3, #3
 8014470:	3304      	adds	r3, #4
 8014472:	3415      	adds	r4, #21
 8014474:	42a5      	cmp	r5, r4
 8014476:	bf38      	it	cc
 8014478:	2304      	movcc	r3, #4
 801447a:	4419      	add	r1, r3
 801447c:	4473      	add	r3, lr
 801447e:	469e      	mov	lr, r3
 8014480:	460d      	mov	r5, r1
 8014482:	4565      	cmp	r5, ip
 8014484:	d30e      	bcc.n	80144a4 <__mdiff+0xe8>
 8014486:	f10c 0203 	add.w	r2, ip, #3
 801448a:	1a52      	subs	r2, r2, r1
 801448c:	f022 0203 	bic.w	r2, r2, #3
 8014490:	3903      	subs	r1, #3
 8014492:	458c      	cmp	ip, r1
 8014494:	bf38      	it	cc
 8014496:	2200      	movcc	r2, #0
 8014498:	441a      	add	r2, r3
 801449a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801449e:	b17b      	cbz	r3, 80144c0 <__mdiff+0x104>
 80144a0:	6106      	str	r6, [r0, #16]
 80144a2:	e7a5      	b.n	80143f0 <__mdiff+0x34>
 80144a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80144a8:	fa17 f488 	uxtah	r4, r7, r8
 80144ac:	1422      	asrs	r2, r4, #16
 80144ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80144b2:	b2a4      	uxth	r4, r4
 80144b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80144b8:	f84e 4b04 	str.w	r4, [lr], #4
 80144bc:	1417      	asrs	r7, r2, #16
 80144be:	e7e0      	b.n	8014482 <__mdiff+0xc6>
 80144c0:	3e01      	subs	r6, #1
 80144c2:	e7ea      	b.n	801449a <__mdiff+0xde>
 80144c4:	0805fc64 	.word	0x0805fc64
 80144c8:	0805fd58 	.word	0x0805fd58

080144cc <__ulp>:
 80144cc:	b082      	sub	sp, #8
 80144ce:	ed8d 0b00 	vstr	d0, [sp]
 80144d2:	9b01      	ldr	r3, [sp, #4]
 80144d4:	4912      	ldr	r1, [pc, #72]	; (8014520 <__ulp+0x54>)
 80144d6:	4019      	ands	r1, r3
 80144d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80144dc:	2900      	cmp	r1, #0
 80144de:	dd05      	ble.n	80144ec <__ulp+0x20>
 80144e0:	2200      	movs	r2, #0
 80144e2:	460b      	mov	r3, r1
 80144e4:	ec43 2b10 	vmov	d0, r2, r3
 80144e8:	b002      	add	sp, #8
 80144ea:	4770      	bx	lr
 80144ec:	4249      	negs	r1, r1
 80144ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80144f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80144f6:	f04f 0200 	mov.w	r2, #0
 80144fa:	f04f 0300 	mov.w	r3, #0
 80144fe:	da04      	bge.n	801450a <__ulp+0x3e>
 8014500:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014504:	fa41 f300 	asr.w	r3, r1, r0
 8014508:	e7ec      	b.n	80144e4 <__ulp+0x18>
 801450a:	f1a0 0114 	sub.w	r1, r0, #20
 801450e:	291e      	cmp	r1, #30
 8014510:	bfda      	itte	le
 8014512:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014516:	fa20 f101 	lsrle.w	r1, r0, r1
 801451a:	2101      	movgt	r1, #1
 801451c:	460a      	mov	r2, r1
 801451e:	e7e1      	b.n	80144e4 <__ulp+0x18>
 8014520:	7ff00000 	.word	0x7ff00000

08014524 <__b2d>:
 8014524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014526:	6905      	ldr	r5, [r0, #16]
 8014528:	f100 0714 	add.w	r7, r0, #20
 801452c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014530:	1f2e      	subs	r6, r5, #4
 8014532:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014536:	4620      	mov	r0, r4
 8014538:	f7ff fd52 	bl	8013fe0 <__hi0bits>
 801453c:	f1c0 0320 	rsb	r3, r0, #32
 8014540:	280a      	cmp	r0, #10
 8014542:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80145c0 <__b2d+0x9c>
 8014546:	600b      	str	r3, [r1, #0]
 8014548:	dc14      	bgt.n	8014574 <__b2d+0x50>
 801454a:	f1c0 0e0b 	rsb	lr, r0, #11
 801454e:	fa24 f10e 	lsr.w	r1, r4, lr
 8014552:	42b7      	cmp	r7, r6
 8014554:	ea41 030c 	orr.w	r3, r1, ip
 8014558:	bf34      	ite	cc
 801455a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801455e:	2100      	movcs	r1, #0
 8014560:	3015      	adds	r0, #21
 8014562:	fa04 f000 	lsl.w	r0, r4, r0
 8014566:	fa21 f10e 	lsr.w	r1, r1, lr
 801456a:	ea40 0201 	orr.w	r2, r0, r1
 801456e:	ec43 2b10 	vmov	d0, r2, r3
 8014572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014574:	42b7      	cmp	r7, r6
 8014576:	bf3a      	itte	cc
 8014578:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801457c:	f1a5 0608 	subcc.w	r6, r5, #8
 8014580:	2100      	movcs	r1, #0
 8014582:	380b      	subs	r0, #11
 8014584:	d017      	beq.n	80145b6 <__b2d+0x92>
 8014586:	f1c0 0c20 	rsb	ip, r0, #32
 801458a:	fa04 f500 	lsl.w	r5, r4, r0
 801458e:	42be      	cmp	r6, r7
 8014590:	fa21 f40c 	lsr.w	r4, r1, ip
 8014594:	ea45 0504 	orr.w	r5, r5, r4
 8014598:	bf8c      	ite	hi
 801459a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801459e:	2400      	movls	r4, #0
 80145a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80145a4:	fa01 f000 	lsl.w	r0, r1, r0
 80145a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80145ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80145b0:	ea40 0204 	orr.w	r2, r0, r4
 80145b4:	e7db      	b.n	801456e <__b2d+0x4a>
 80145b6:	ea44 030c 	orr.w	r3, r4, ip
 80145ba:	460a      	mov	r2, r1
 80145bc:	e7d7      	b.n	801456e <__b2d+0x4a>
 80145be:	bf00      	nop
 80145c0:	3ff00000 	.word	0x3ff00000

080145c4 <__d2b>:
 80145c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80145c8:	4689      	mov	r9, r1
 80145ca:	2101      	movs	r1, #1
 80145cc:	ec57 6b10 	vmov	r6, r7, d0
 80145d0:	4690      	mov	r8, r2
 80145d2:	f7ff fc0f 	bl	8013df4 <_Balloc>
 80145d6:	4604      	mov	r4, r0
 80145d8:	b930      	cbnz	r0, 80145e8 <__d2b+0x24>
 80145da:	4602      	mov	r2, r0
 80145dc:	4b25      	ldr	r3, [pc, #148]	; (8014674 <__d2b+0xb0>)
 80145de:	4826      	ldr	r0, [pc, #152]	; (8014678 <__d2b+0xb4>)
 80145e0:	f240 310a 	movw	r1, #778	; 0x30a
 80145e4:	f7fb ff1e 	bl	8010424 <__assert_func>
 80145e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80145ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80145f0:	bb35      	cbnz	r5, 8014640 <__d2b+0x7c>
 80145f2:	2e00      	cmp	r6, #0
 80145f4:	9301      	str	r3, [sp, #4]
 80145f6:	d028      	beq.n	801464a <__d2b+0x86>
 80145f8:	4668      	mov	r0, sp
 80145fa:	9600      	str	r6, [sp, #0]
 80145fc:	f7ff fd10 	bl	8014020 <__lo0bits>
 8014600:	9900      	ldr	r1, [sp, #0]
 8014602:	b300      	cbz	r0, 8014646 <__d2b+0x82>
 8014604:	9a01      	ldr	r2, [sp, #4]
 8014606:	f1c0 0320 	rsb	r3, r0, #32
 801460a:	fa02 f303 	lsl.w	r3, r2, r3
 801460e:	430b      	orrs	r3, r1
 8014610:	40c2      	lsrs	r2, r0
 8014612:	6163      	str	r3, [r4, #20]
 8014614:	9201      	str	r2, [sp, #4]
 8014616:	9b01      	ldr	r3, [sp, #4]
 8014618:	61a3      	str	r3, [r4, #24]
 801461a:	2b00      	cmp	r3, #0
 801461c:	bf14      	ite	ne
 801461e:	2202      	movne	r2, #2
 8014620:	2201      	moveq	r2, #1
 8014622:	6122      	str	r2, [r4, #16]
 8014624:	b1d5      	cbz	r5, 801465c <__d2b+0x98>
 8014626:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801462a:	4405      	add	r5, r0
 801462c:	f8c9 5000 	str.w	r5, [r9]
 8014630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014634:	f8c8 0000 	str.w	r0, [r8]
 8014638:	4620      	mov	r0, r4
 801463a:	b003      	add	sp, #12
 801463c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014644:	e7d5      	b.n	80145f2 <__d2b+0x2e>
 8014646:	6161      	str	r1, [r4, #20]
 8014648:	e7e5      	b.n	8014616 <__d2b+0x52>
 801464a:	a801      	add	r0, sp, #4
 801464c:	f7ff fce8 	bl	8014020 <__lo0bits>
 8014650:	9b01      	ldr	r3, [sp, #4]
 8014652:	6163      	str	r3, [r4, #20]
 8014654:	2201      	movs	r2, #1
 8014656:	6122      	str	r2, [r4, #16]
 8014658:	3020      	adds	r0, #32
 801465a:	e7e3      	b.n	8014624 <__d2b+0x60>
 801465c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014660:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014664:	f8c9 0000 	str.w	r0, [r9]
 8014668:	6918      	ldr	r0, [r3, #16]
 801466a:	f7ff fcb9 	bl	8013fe0 <__hi0bits>
 801466e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014672:	e7df      	b.n	8014634 <__d2b+0x70>
 8014674:	0805fc64 	.word	0x0805fc64
 8014678:	0805fd58 	.word	0x0805fd58

0801467c <__ratio>:
 801467c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014680:	4688      	mov	r8, r1
 8014682:	4669      	mov	r1, sp
 8014684:	4681      	mov	r9, r0
 8014686:	f7ff ff4d 	bl	8014524 <__b2d>
 801468a:	a901      	add	r1, sp, #4
 801468c:	4640      	mov	r0, r8
 801468e:	ec55 4b10 	vmov	r4, r5, d0
 8014692:	f7ff ff47 	bl	8014524 <__b2d>
 8014696:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801469a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801469e:	eba3 0c02 	sub.w	ip, r3, r2
 80146a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80146a6:	1a9b      	subs	r3, r3, r2
 80146a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80146ac:	ec51 0b10 	vmov	r0, r1, d0
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	bfd6      	itet	le
 80146b4:	460a      	movle	r2, r1
 80146b6:	462a      	movgt	r2, r5
 80146b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80146bc:	468b      	mov	fp, r1
 80146be:	462f      	mov	r7, r5
 80146c0:	bfd4      	ite	le
 80146c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80146c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80146ca:	4620      	mov	r0, r4
 80146cc:	ee10 2a10 	vmov	r2, s0
 80146d0:	465b      	mov	r3, fp
 80146d2:	4639      	mov	r1, r7
 80146d4:	f7ec f8ca 	bl	800086c <__aeabi_ddiv>
 80146d8:	ec41 0b10 	vmov	d0, r0, r1
 80146dc:	b003      	add	sp, #12
 80146de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080146e2 <__copybits>:
 80146e2:	3901      	subs	r1, #1
 80146e4:	b570      	push	{r4, r5, r6, lr}
 80146e6:	1149      	asrs	r1, r1, #5
 80146e8:	6914      	ldr	r4, [r2, #16]
 80146ea:	3101      	adds	r1, #1
 80146ec:	f102 0314 	add.w	r3, r2, #20
 80146f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80146f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80146f8:	1f05      	subs	r5, r0, #4
 80146fa:	42a3      	cmp	r3, r4
 80146fc:	d30c      	bcc.n	8014718 <__copybits+0x36>
 80146fe:	1aa3      	subs	r3, r4, r2
 8014700:	3b11      	subs	r3, #17
 8014702:	f023 0303 	bic.w	r3, r3, #3
 8014706:	3211      	adds	r2, #17
 8014708:	42a2      	cmp	r2, r4
 801470a:	bf88      	it	hi
 801470c:	2300      	movhi	r3, #0
 801470e:	4418      	add	r0, r3
 8014710:	2300      	movs	r3, #0
 8014712:	4288      	cmp	r0, r1
 8014714:	d305      	bcc.n	8014722 <__copybits+0x40>
 8014716:	bd70      	pop	{r4, r5, r6, pc}
 8014718:	f853 6b04 	ldr.w	r6, [r3], #4
 801471c:	f845 6f04 	str.w	r6, [r5, #4]!
 8014720:	e7eb      	b.n	80146fa <__copybits+0x18>
 8014722:	f840 3b04 	str.w	r3, [r0], #4
 8014726:	e7f4      	b.n	8014712 <__copybits+0x30>

08014728 <__any_on>:
 8014728:	f100 0214 	add.w	r2, r0, #20
 801472c:	6900      	ldr	r0, [r0, #16]
 801472e:	114b      	asrs	r3, r1, #5
 8014730:	4298      	cmp	r0, r3
 8014732:	b510      	push	{r4, lr}
 8014734:	db11      	blt.n	801475a <__any_on+0x32>
 8014736:	dd0a      	ble.n	801474e <__any_on+0x26>
 8014738:	f011 011f 	ands.w	r1, r1, #31
 801473c:	d007      	beq.n	801474e <__any_on+0x26>
 801473e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014742:	fa24 f001 	lsr.w	r0, r4, r1
 8014746:	fa00 f101 	lsl.w	r1, r0, r1
 801474a:	428c      	cmp	r4, r1
 801474c:	d10b      	bne.n	8014766 <__any_on+0x3e>
 801474e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014752:	4293      	cmp	r3, r2
 8014754:	d803      	bhi.n	801475e <__any_on+0x36>
 8014756:	2000      	movs	r0, #0
 8014758:	bd10      	pop	{r4, pc}
 801475a:	4603      	mov	r3, r0
 801475c:	e7f7      	b.n	801474e <__any_on+0x26>
 801475e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014762:	2900      	cmp	r1, #0
 8014764:	d0f5      	beq.n	8014752 <__any_on+0x2a>
 8014766:	2001      	movs	r0, #1
 8014768:	e7f6      	b.n	8014758 <__any_on+0x30>

0801476a <_calloc_r>:
 801476a:	b513      	push	{r0, r1, r4, lr}
 801476c:	434a      	muls	r2, r1
 801476e:	4611      	mov	r1, r2
 8014770:	9201      	str	r2, [sp, #4]
 8014772:	f7fb ff1f 	bl	80105b4 <_malloc_r>
 8014776:	4604      	mov	r4, r0
 8014778:	b118      	cbz	r0, 8014782 <_calloc_r+0x18>
 801477a:	9a01      	ldr	r2, [sp, #4]
 801477c:	2100      	movs	r1, #0
 801477e:	f7fb fec1 	bl	8010504 <memset>
 8014782:	4620      	mov	r0, r4
 8014784:	b002      	add	sp, #8
 8014786:	bd10      	pop	{r4, pc}

08014788 <_realloc_r>:
 8014788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801478a:	4607      	mov	r7, r0
 801478c:	4614      	mov	r4, r2
 801478e:	460e      	mov	r6, r1
 8014790:	b921      	cbnz	r1, 801479c <_realloc_r+0x14>
 8014792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014796:	4611      	mov	r1, r2
 8014798:	f7fb bf0c 	b.w	80105b4 <_malloc_r>
 801479c:	b922      	cbnz	r2, 80147a8 <_realloc_r+0x20>
 801479e:	f7fb feb9 	bl	8010514 <_free_r>
 80147a2:	4625      	mov	r5, r4
 80147a4:	4628      	mov	r0, r5
 80147a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147a8:	f000 fa76 	bl	8014c98 <_malloc_usable_size_r>
 80147ac:	42a0      	cmp	r0, r4
 80147ae:	d20f      	bcs.n	80147d0 <_realloc_r+0x48>
 80147b0:	4621      	mov	r1, r4
 80147b2:	4638      	mov	r0, r7
 80147b4:	f7fb fefe 	bl	80105b4 <_malloc_r>
 80147b8:	4605      	mov	r5, r0
 80147ba:	2800      	cmp	r0, #0
 80147bc:	d0f2      	beq.n	80147a4 <_realloc_r+0x1c>
 80147be:	4631      	mov	r1, r6
 80147c0:	4622      	mov	r2, r4
 80147c2:	f7fb fe91 	bl	80104e8 <memcpy>
 80147c6:	4631      	mov	r1, r6
 80147c8:	4638      	mov	r0, r7
 80147ca:	f7fb fea3 	bl	8010514 <_free_r>
 80147ce:	e7e9      	b.n	80147a4 <_realloc_r+0x1c>
 80147d0:	4635      	mov	r5, r6
 80147d2:	e7e7      	b.n	80147a4 <_realloc_r+0x1c>

080147d4 <__ssputs_r>:
 80147d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147d8:	688e      	ldr	r6, [r1, #8]
 80147da:	429e      	cmp	r6, r3
 80147dc:	4682      	mov	sl, r0
 80147de:	460c      	mov	r4, r1
 80147e0:	4690      	mov	r8, r2
 80147e2:	461f      	mov	r7, r3
 80147e4:	d838      	bhi.n	8014858 <__ssputs_r+0x84>
 80147e6:	898a      	ldrh	r2, [r1, #12]
 80147e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80147ec:	d032      	beq.n	8014854 <__ssputs_r+0x80>
 80147ee:	6825      	ldr	r5, [r4, #0]
 80147f0:	6909      	ldr	r1, [r1, #16]
 80147f2:	eba5 0901 	sub.w	r9, r5, r1
 80147f6:	6965      	ldr	r5, [r4, #20]
 80147f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014800:	3301      	adds	r3, #1
 8014802:	444b      	add	r3, r9
 8014804:	106d      	asrs	r5, r5, #1
 8014806:	429d      	cmp	r5, r3
 8014808:	bf38      	it	cc
 801480a:	461d      	movcc	r5, r3
 801480c:	0553      	lsls	r3, r2, #21
 801480e:	d531      	bpl.n	8014874 <__ssputs_r+0xa0>
 8014810:	4629      	mov	r1, r5
 8014812:	f7fb fecf 	bl	80105b4 <_malloc_r>
 8014816:	4606      	mov	r6, r0
 8014818:	b950      	cbnz	r0, 8014830 <__ssputs_r+0x5c>
 801481a:	230c      	movs	r3, #12
 801481c:	f8ca 3000 	str.w	r3, [sl]
 8014820:	89a3      	ldrh	r3, [r4, #12]
 8014822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014826:	81a3      	strh	r3, [r4, #12]
 8014828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801482c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014830:	6921      	ldr	r1, [r4, #16]
 8014832:	464a      	mov	r2, r9
 8014834:	f7fb fe58 	bl	80104e8 <memcpy>
 8014838:	89a3      	ldrh	r3, [r4, #12]
 801483a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801483e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014842:	81a3      	strh	r3, [r4, #12]
 8014844:	6126      	str	r6, [r4, #16]
 8014846:	6165      	str	r5, [r4, #20]
 8014848:	444e      	add	r6, r9
 801484a:	eba5 0509 	sub.w	r5, r5, r9
 801484e:	6026      	str	r6, [r4, #0]
 8014850:	60a5      	str	r5, [r4, #8]
 8014852:	463e      	mov	r6, r7
 8014854:	42be      	cmp	r6, r7
 8014856:	d900      	bls.n	801485a <__ssputs_r+0x86>
 8014858:	463e      	mov	r6, r7
 801485a:	4632      	mov	r2, r6
 801485c:	6820      	ldr	r0, [r4, #0]
 801485e:	4641      	mov	r1, r8
 8014860:	f7ff faa2 	bl	8013da8 <memmove>
 8014864:	68a3      	ldr	r3, [r4, #8]
 8014866:	6822      	ldr	r2, [r4, #0]
 8014868:	1b9b      	subs	r3, r3, r6
 801486a:	4432      	add	r2, r6
 801486c:	60a3      	str	r3, [r4, #8]
 801486e:	6022      	str	r2, [r4, #0]
 8014870:	2000      	movs	r0, #0
 8014872:	e7db      	b.n	801482c <__ssputs_r+0x58>
 8014874:	462a      	mov	r2, r5
 8014876:	f7ff ff87 	bl	8014788 <_realloc_r>
 801487a:	4606      	mov	r6, r0
 801487c:	2800      	cmp	r0, #0
 801487e:	d1e1      	bne.n	8014844 <__ssputs_r+0x70>
 8014880:	6921      	ldr	r1, [r4, #16]
 8014882:	4650      	mov	r0, sl
 8014884:	f7fb fe46 	bl	8010514 <_free_r>
 8014888:	e7c7      	b.n	801481a <__ssputs_r+0x46>
	...

0801488c <_svfiprintf_r>:
 801488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014890:	4698      	mov	r8, r3
 8014892:	898b      	ldrh	r3, [r1, #12]
 8014894:	061b      	lsls	r3, r3, #24
 8014896:	b09d      	sub	sp, #116	; 0x74
 8014898:	4607      	mov	r7, r0
 801489a:	460d      	mov	r5, r1
 801489c:	4614      	mov	r4, r2
 801489e:	d50e      	bpl.n	80148be <_svfiprintf_r+0x32>
 80148a0:	690b      	ldr	r3, [r1, #16]
 80148a2:	b963      	cbnz	r3, 80148be <_svfiprintf_r+0x32>
 80148a4:	2140      	movs	r1, #64	; 0x40
 80148a6:	f7fb fe85 	bl	80105b4 <_malloc_r>
 80148aa:	6028      	str	r0, [r5, #0]
 80148ac:	6128      	str	r0, [r5, #16]
 80148ae:	b920      	cbnz	r0, 80148ba <_svfiprintf_r+0x2e>
 80148b0:	230c      	movs	r3, #12
 80148b2:	603b      	str	r3, [r7, #0]
 80148b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148b8:	e0d1      	b.n	8014a5e <_svfiprintf_r+0x1d2>
 80148ba:	2340      	movs	r3, #64	; 0x40
 80148bc:	616b      	str	r3, [r5, #20]
 80148be:	2300      	movs	r3, #0
 80148c0:	9309      	str	r3, [sp, #36]	; 0x24
 80148c2:	2320      	movs	r3, #32
 80148c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80148cc:	2330      	movs	r3, #48	; 0x30
 80148ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014a78 <_svfiprintf_r+0x1ec>
 80148d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148d6:	f04f 0901 	mov.w	r9, #1
 80148da:	4623      	mov	r3, r4
 80148dc:	469a      	mov	sl, r3
 80148de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148e2:	b10a      	cbz	r2, 80148e8 <_svfiprintf_r+0x5c>
 80148e4:	2a25      	cmp	r2, #37	; 0x25
 80148e6:	d1f9      	bne.n	80148dc <_svfiprintf_r+0x50>
 80148e8:	ebba 0b04 	subs.w	fp, sl, r4
 80148ec:	d00b      	beq.n	8014906 <_svfiprintf_r+0x7a>
 80148ee:	465b      	mov	r3, fp
 80148f0:	4622      	mov	r2, r4
 80148f2:	4629      	mov	r1, r5
 80148f4:	4638      	mov	r0, r7
 80148f6:	f7ff ff6d 	bl	80147d4 <__ssputs_r>
 80148fa:	3001      	adds	r0, #1
 80148fc:	f000 80aa 	beq.w	8014a54 <_svfiprintf_r+0x1c8>
 8014900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014902:	445a      	add	r2, fp
 8014904:	9209      	str	r2, [sp, #36]	; 0x24
 8014906:	f89a 3000 	ldrb.w	r3, [sl]
 801490a:	2b00      	cmp	r3, #0
 801490c:	f000 80a2 	beq.w	8014a54 <_svfiprintf_r+0x1c8>
 8014910:	2300      	movs	r3, #0
 8014912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801491a:	f10a 0a01 	add.w	sl, sl, #1
 801491e:	9304      	str	r3, [sp, #16]
 8014920:	9307      	str	r3, [sp, #28]
 8014922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014926:	931a      	str	r3, [sp, #104]	; 0x68
 8014928:	4654      	mov	r4, sl
 801492a:	2205      	movs	r2, #5
 801492c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014930:	4851      	ldr	r0, [pc, #324]	; (8014a78 <_svfiprintf_r+0x1ec>)
 8014932:	f7eb fc65 	bl	8000200 <memchr>
 8014936:	9a04      	ldr	r2, [sp, #16]
 8014938:	b9d8      	cbnz	r0, 8014972 <_svfiprintf_r+0xe6>
 801493a:	06d0      	lsls	r0, r2, #27
 801493c:	bf44      	itt	mi
 801493e:	2320      	movmi	r3, #32
 8014940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014944:	0711      	lsls	r1, r2, #28
 8014946:	bf44      	itt	mi
 8014948:	232b      	movmi	r3, #43	; 0x2b
 801494a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801494e:	f89a 3000 	ldrb.w	r3, [sl]
 8014952:	2b2a      	cmp	r3, #42	; 0x2a
 8014954:	d015      	beq.n	8014982 <_svfiprintf_r+0xf6>
 8014956:	9a07      	ldr	r2, [sp, #28]
 8014958:	4654      	mov	r4, sl
 801495a:	2000      	movs	r0, #0
 801495c:	f04f 0c0a 	mov.w	ip, #10
 8014960:	4621      	mov	r1, r4
 8014962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014966:	3b30      	subs	r3, #48	; 0x30
 8014968:	2b09      	cmp	r3, #9
 801496a:	d94e      	bls.n	8014a0a <_svfiprintf_r+0x17e>
 801496c:	b1b0      	cbz	r0, 801499c <_svfiprintf_r+0x110>
 801496e:	9207      	str	r2, [sp, #28]
 8014970:	e014      	b.n	801499c <_svfiprintf_r+0x110>
 8014972:	eba0 0308 	sub.w	r3, r0, r8
 8014976:	fa09 f303 	lsl.w	r3, r9, r3
 801497a:	4313      	orrs	r3, r2
 801497c:	9304      	str	r3, [sp, #16]
 801497e:	46a2      	mov	sl, r4
 8014980:	e7d2      	b.n	8014928 <_svfiprintf_r+0x9c>
 8014982:	9b03      	ldr	r3, [sp, #12]
 8014984:	1d19      	adds	r1, r3, #4
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	9103      	str	r1, [sp, #12]
 801498a:	2b00      	cmp	r3, #0
 801498c:	bfbb      	ittet	lt
 801498e:	425b      	neglt	r3, r3
 8014990:	f042 0202 	orrlt.w	r2, r2, #2
 8014994:	9307      	strge	r3, [sp, #28]
 8014996:	9307      	strlt	r3, [sp, #28]
 8014998:	bfb8      	it	lt
 801499a:	9204      	strlt	r2, [sp, #16]
 801499c:	7823      	ldrb	r3, [r4, #0]
 801499e:	2b2e      	cmp	r3, #46	; 0x2e
 80149a0:	d10c      	bne.n	80149bc <_svfiprintf_r+0x130>
 80149a2:	7863      	ldrb	r3, [r4, #1]
 80149a4:	2b2a      	cmp	r3, #42	; 0x2a
 80149a6:	d135      	bne.n	8014a14 <_svfiprintf_r+0x188>
 80149a8:	9b03      	ldr	r3, [sp, #12]
 80149aa:	1d1a      	adds	r2, r3, #4
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	9203      	str	r2, [sp, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	bfb8      	it	lt
 80149b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80149b8:	3402      	adds	r4, #2
 80149ba:	9305      	str	r3, [sp, #20]
 80149bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014a88 <_svfiprintf_r+0x1fc>
 80149c0:	7821      	ldrb	r1, [r4, #0]
 80149c2:	2203      	movs	r2, #3
 80149c4:	4650      	mov	r0, sl
 80149c6:	f7eb fc1b 	bl	8000200 <memchr>
 80149ca:	b140      	cbz	r0, 80149de <_svfiprintf_r+0x152>
 80149cc:	2340      	movs	r3, #64	; 0x40
 80149ce:	eba0 000a 	sub.w	r0, r0, sl
 80149d2:	fa03 f000 	lsl.w	r0, r3, r0
 80149d6:	9b04      	ldr	r3, [sp, #16]
 80149d8:	4303      	orrs	r3, r0
 80149da:	3401      	adds	r4, #1
 80149dc:	9304      	str	r3, [sp, #16]
 80149de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149e2:	4826      	ldr	r0, [pc, #152]	; (8014a7c <_svfiprintf_r+0x1f0>)
 80149e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149e8:	2206      	movs	r2, #6
 80149ea:	f7eb fc09 	bl	8000200 <memchr>
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d038      	beq.n	8014a64 <_svfiprintf_r+0x1d8>
 80149f2:	4b23      	ldr	r3, [pc, #140]	; (8014a80 <_svfiprintf_r+0x1f4>)
 80149f4:	bb1b      	cbnz	r3, 8014a3e <_svfiprintf_r+0x1b2>
 80149f6:	9b03      	ldr	r3, [sp, #12]
 80149f8:	3307      	adds	r3, #7
 80149fa:	f023 0307 	bic.w	r3, r3, #7
 80149fe:	3308      	adds	r3, #8
 8014a00:	9303      	str	r3, [sp, #12]
 8014a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a04:	4433      	add	r3, r6
 8014a06:	9309      	str	r3, [sp, #36]	; 0x24
 8014a08:	e767      	b.n	80148da <_svfiprintf_r+0x4e>
 8014a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a0e:	460c      	mov	r4, r1
 8014a10:	2001      	movs	r0, #1
 8014a12:	e7a5      	b.n	8014960 <_svfiprintf_r+0xd4>
 8014a14:	2300      	movs	r3, #0
 8014a16:	3401      	adds	r4, #1
 8014a18:	9305      	str	r3, [sp, #20]
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	f04f 0c0a 	mov.w	ip, #10
 8014a20:	4620      	mov	r0, r4
 8014a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a26:	3a30      	subs	r2, #48	; 0x30
 8014a28:	2a09      	cmp	r2, #9
 8014a2a:	d903      	bls.n	8014a34 <_svfiprintf_r+0x1a8>
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d0c5      	beq.n	80149bc <_svfiprintf_r+0x130>
 8014a30:	9105      	str	r1, [sp, #20]
 8014a32:	e7c3      	b.n	80149bc <_svfiprintf_r+0x130>
 8014a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a38:	4604      	mov	r4, r0
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	e7f0      	b.n	8014a20 <_svfiprintf_r+0x194>
 8014a3e:	ab03      	add	r3, sp, #12
 8014a40:	9300      	str	r3, [sp, #0]
 8014a42:	462a      	mov	r2, r5
 8014a44:	4b0f      	ldr	r3, [pc, #60]	; (8014a84 <_svfiprintf_r+0x1f8>)
 8014a46:	a904      	add	r1, sp, #16
 8014a48:	4638      	mov	r0, r7
 8014a4a:	f7fc f807 	bl	8010a5c <_printf_float>
 8014a4e:	1c42      	adds	r2, r0, #1
 8014a50:	4606      	mov	r6, r0
 8014a52:	d1d6      	bne.n	8014a02 <_svfiprintf_r+0x176>
 8014a54:	89ab      	ldrh	r3, [r5, #12]
 8014a56:	065b      	lsls	r3, r3, #25
 8014a58:	f53f af2c 	bmi.w	80148b4 <_svfiprintf_r+0x28>
 8014a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a5e:	b01d      	add	sp, #116	; 0x74
 8014a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a64:	ab03      	add	r3, sp, #12
 8014a66:	9300      	str	r3, [sp, #0]
 8014a68:	462a      	mov	r2, r5
 8014a6a:	4b06      	ldr	r3, [pc, #24]	; (8014a84 <_svfiprintf_r+0x1f8>)
 8014a6c:	a904      	add	r1, sp, #16
 8014a6e:	4638      	mov	r0, r7
 8014a70:	f7fc fa98 	bl	8010fa4 <_printf_i>
 8014a74:	e7eb      	b.n	8014a4e <_svfiprintf_r+0x1c2>
 8014a76:	bf00      	nop
 8014a78:	0805fa44 	.word	0x0805fa44
 8014a7c:	0805fa4e 	.word	0x0805fa4e
 8014a80:	08010a5d 	.word	0x08010a5d
 8014a84:	080147d5 	.word	0x080147d5
 8014a88:	0805fa4a 	.word	0x0805fa4a
 8014a8c:	00000000 	.word	0x00000000

08014a90 <nan>:
 8014a90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014a98 <nan+0x8>
 8014a94:	4770      	bx	lr
 8014a96:	bf00      	nop
 8014a98:	00000000 	.word	0x00000000
 8014a9c:	7ff80000 	.word	0x7ff80000

08014aa0 <_raise_r>:
 8014aa0:	291f      	cmp	r1, #31
 8014aa2:	b538      	push	{r3, r4, r5, lr}
 8014aa4:	4604      	mov	r4, r0
 8014aa6:	460d      	mov	r5, r1
 8014aa8:	d904      	bls.n	8014ab4 <_raise_r+0x14>
 8014aaa:	2316      	movs	r3, #22
 8014aac:	6003      	str	r3, [r0, #0]
 8014aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ab2:	bd38      	pop	{r3, r4, r5, pc}
 8014ab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014ab6:	b112      	cbz	r2, 8014abe <_raise_r+0x1e>
 8014ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014abc:	b94b      	cbnz	r3, 8014ad2 <_raise_r+0x32>
 8014abe:	4620      	mov	r0, r4
 8014ac0:	f000 f830 	bl	8014b24 <_getpid_r>
 8014ac4:	462a      	mov	r2, r5
 8014ac6:	4601      	mov	r1, r0
 8014ac8:	4620      	mov	r0, r4
 8014aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ace:	f000 b817 	b.w	8014b00 <_kill_r>
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d00a      	beq.n	8014aec <_raise_r+0x4c>
 8014ad6:	1c59      	adds	r1, r3, #1
 8014ad8:	d103      	bne.n	8014ae2 <_raise_r+0x42>
 8014ada:	2316      	movs	r3, #22
 8014adc:	6003      	str	r3, [r0, #0]
 8014ade:	2001      	movs	r0, #1
 8014ae0:	e7e7      	b.n	8014ab2 <_raise_r+0x12>
 8014ae2:	2400      	movs	r4, #0
 8014ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ae8:	4628      	mov	r0, r5
 8014aea:	4798      	blx	r3
 8014aec:	2000      	movs	r0, #0
 8014aee:	e7e0      	b.n	8014ab2 <_raise_r+0x12>

08014af0 <raise>:
 8014af0:	4b02      	ldr	r3, [pc, #8]	; (8014afc <raise+0xc>)
 8014af2:	4601      	mov	r1, r0
 8014af4:	6818      	ldr	r0, [r3, #0]
 8014af6:	f7ff bfd3 	b.w	8014aa0 <_raise_r>
 8014afa:	bf00      	nop
 8014afc:	20000ee0 	.word	0x20000ee0

08014b00 <_kill_r>:
 8014b00:	b538      	push	{r3, r4, r5, lr}
 8014b02:	4d07      	ldr	r5, [pc, #28]	; (8014b20 <_kill_r+0x20>)
 8014b04:	2300      	movs	r3, #0
 8014b06:	4604      	mov	r4, r0
 8014b08:	4608      	mov	r0, r1
 8014b0a:	4611      	mov	r1, r2
 8014b0c:	602b      	str	r3, [r5, #0]
 8014b0e:	f002 f96d 	bl	8016dec <_kill>
 8014b12:	1c43      	adds	r3, r0, #1
 8014b14:	d102      	bne.n	8014b1c <_kill_r+0x1c>
 8014b16:	682b      	ldr	r3, [r5, #0]
 8014b18:	b103      	cbz	r3, 8014b1c <_kill_r+0x1c>
 8014b1a:	6023      	str	r3, [r4, #0]
 8014b1c:	bd38      	pop	{r3, r4, r5, pc}
 8014b1e:	bf00      	nop
 8014b20:	20013d2c 	.word	0x20013d2c

08014b24 <_getpid_r>:
 8014b24:	f002 b952 	b.w	8016dcc <_getpid>

08014b28 <__sread>:
 8014b28:	b510      	push	{r4, lr}
 8014b2a:	460c      	mov	r4, r1
 8014b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b30:	f000 f8ba 	bl	8014ca8 <_read_r>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	bfab      	itete	ge
 8014b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8014b3c:	181b      	addge	r3, r3, r0
 8014b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b42:	bfac      	ite	ge
 8014b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b46:	81a3      	strhlt	r3, [r4, #12]
 8014b48:	bd10      	pop	{r4, pc}

08014b4a <__swrite>:
 8014b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b4e:	461f      	mov	r7, r3
 8014b50:	898b      	ldrh	r3, [r1, #12]
 8014b52:	05db      	lsls	r3, r3, #23
 8014b54:	4605      	mov	r5, r0
 8014b56:	460c      	mov	r4, r1
 8014b58:	4616      	mov	r6, r2
 8014b5a:	d505      	bpl.n	8014b68 <__swrite+0x1e>
 8014b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b60:	2302      	movs	r3, #2
 8014b62:	2200      	movs	r2, #0
 8014b64:	f000 f886 	bl	8014c74 <_lseek_r>
 8014b68:	89a3      	ldrh	r3, [r4, #12]
 8014b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b72:	81a3      	strh	r3, [r4, #12]
 8014b74:	4632      	mov	r2, r6
 8014b76:	463b      	mov	r3, r7
 8014b78:	4628      	mov	r0, r5
 8014b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b7e:	f000 b835 	b.w	8014bec <_write_r>

08014b82 <__sseek>:
 8014b82:	b510      	push	{r4, lr}
 8014b84:	460c      	mov	r4, r1
 8014b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b8a:	f000 f873 	bl	8014c74 <_lseek_r>
 8014b8e:	1c43      	adds	r3, r0, #1
 8014b90:	89a3      	ldrh	r3, [r4, #12]
 8014b92:	bf15      	itete	ne
 8014b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b9e:	81a3      	strheq	r3, [r4, #12]
 8014ba0:	bf18      	it	ne
 8014ba2:	81a3      	strhne	r3, [r4, #12]
 8014ba4:	bd10      	pop	{r4, pc}

08014ba6 <__sclose>:
 8014ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014baa:	f000 b831 	b.w	8014c10 <_close_r>

08014bae <strncmp>:
 8014bae:	b510      	push	{r4, lr}
 8014bb0:	b16a      	cbz	r2, 8014bce <strncmp+0x20>
 8014bb2:	3901      	subs	r1, #1
 8014bb4:	1884      	adds	r4, r0, r2
 8014bb6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014bba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014bbe:	4293      	cmp	r3, r2
 8014bc0:	d103      	bne.n	8014bca <strncmp+0x1c>
 8014bc2:	42a0      	cmp	r0, r4
 8014bc4:	d001      	beq.n	8014bca <strncmp+0x1c>
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d1f5      	bne.n	8014bb6 <strncmp+0x8>
 8014bca:	1a98      	subs	r0, r3, r2
 8014bcc:	bd10      	pop	{r4, pc}
 8014bce:	4610      	mov	r0, r2
 8014bd0:	e7fc      	b.n	8014bcc <strncmp+0x1e>

08014bd2 <__ascii_wctomb>:
 8014bd2:	b149      	cbz	r1, 8014be8 <__ascii_wctomb+0x16>
 8014bd4:	2aff      	cmp	r2, #255	; 0xff
 8014bd6:	bf85      	ittet	hi
 8014bd8:	238a      	movhi	r3, #138	; 0x8a
 8014bda:	6003      	strhi	r3, [r0, #0]
 8014bdc:	700a      	strbls	r2, [r1, #0]
 8014bde:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014be2:	bf98      	it	ls
 8014be4:	2001      	movls	r0, #1
 8014be6:	4770      	bx	lr
 8014be8:	4608      	mov	r0, r1
 8014bea:	4770      	bx	lr

08014bec <_write_r>:
 8014bec:	b538      	push	{r3, r4, r5, lr}
 8014bee:	4d07      	ldr	r5, [pc, #28]	; (8014c0c <_write_r+0x20>)
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	4608      	mov	r0, r1
 8014bf4:	4611      	mov	r1, r2
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	602a      	str	r2, [r5, #0]
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	f002 f90e 	bl	8016e1c <_write>
 8014c00:	1c43      	adds	r3, r0, #1
 8014c02:	d102      	bne.n	8014c0a <_write_r+0x1e>
 8014c04:	682b      	ldr	r3, [r5, #0]
 8014c06:	b103      	cbz	r3, 8014c0a <_write_r+0x1e>
 8014c08:	6023      	str	r3, [r4, #0]
 8014c0a:	bd38      	pop	{r3, r4, r5, pc}
 8014c0c:	20013d2c 	.word	0x20013d2c

08014c10 <_close_r>:
 8014c10:	b538      	push	{r3, r4, r5, lr}
 8014c12:	4d06      	ldr	r5, [pc, #24]	; (8014c2c <_close_r+0x1c>)
 8014c14:	2300      	movs	r3, #0
 8014c16:	4604      	mov	r4, r0
 8014c18:	4608      	mov	r0, r1
 8014c1a:	602b      	str	r3, [r5, #0]
 8014c1c:	f002 f8c6 	bl	8016dac <_close>
 8014c20:	1c43      	adds	r3, r0, #1
 8014c22:	d102      	bne.n	8014c2a <_close_r+0x1a>
 8014c24:	682b      	ldr	r3, [r5, #0]
 8014c26:	b103      	cbz	r3, 8014c2a <_close_r+0x1a>
 8014c28:	6023      	str	r3, [r4, #0]
 8014c2a:	bd38      	pop	{r3, r4, r5, pc}
 8014c2c:	20013d2c 	.word	0x20013d2c

08014c30 <_fstat_r>:
 8014c30:	b538      	push	{r3, r4, r5, lr}
 8014c32:	4d07      	ldr	r5, [pc, #28]	; (8014c50 <_fstat_r+0x20>)
 8014c34:	2300      	movs	r3, #0
 8014c36:	4604      	mov	r4, r0
 8014c38:	4608      	mov	r0, r1
 8014c3a:	4611      	mov	r1, r2
 8014c3c:	602b      	str	r3, [r5, #0]
 8014c3e:	f002 f8bd 	bl	8016dbc <_fstat>
 8014c42:	1c43      	adds	r3, r0, #1
 8014c44:	d102      	bne.n	8014c4c <_fstat_r+0x1c>
 8014c46:	682b      	ldr	r3, [r5, #0]
 8014c48:	b103      	cbz	r3, 8014c4c <_fstat_r+0x1c>
 8014c4a:	6023      	str	r3, [r4, #0]
 8014c4c:	bd38      	pop	{r3, r4, r5, pc}
 8014c4e:	bf00      	nop
 8014c50:	20013d2c 	.word	0x20013d2c

08014c54 <_isatty_r>:
 8014c54:	b538      	push	{r3, r4, r5, lr}
 8014c56:	4d06      	ldr	r5, [pc, #24]	; (8014c70 <_isatty_r+0x1c>)
 8014c58:	2300      	movs	r3, #0
 8014c5a:	4604      	mov	r4, r0
 8014c5c:	4608      	mov	r0, r1
 8014c5e:	602b      	str	r3, [r5, #0]
 8014c60:	f002 f8bc 	bl	8016ddc <_isatty>
 8014c64:	1c43      	adds	r3, r0, #1
 8014c66:	d102      	bne.n	8014c6e <_isatty_r+0x1a>
 8014c68:	682b      	ldr	r3, [r5, #0]
 8014c6a:	b103      	cbz	r3, 8014c6e <_isatty_r+0x1a>
 8014c6c:	6023      	str	r3, [r4, #0]
 8014c6e:	bd38      	pop	{r3, r4, r5, pc}
 8014c70:	20013d2c 	.word	0x20013d2c

08014c74 <_lseek_r>:
 8014c74:	b538      	push	{r3, r4, r5, lr}
 8014c76:	4d07      	ldr	r5, [pc, #28]	; (8014c94 <_lseek_r+0x20>)
 8014c78:	4604      	mov	r4, r0
 8014c7a:	4608      	mov	r0, r1
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	2200      	movs	r2, #0
 8014c80:	602a      	str	r2, [r5, #0]
 8014c82:	461a      	mov	r2, r3
 8014c84:	f002 f8ba 	bl	8016dfc <_lseek>
 8014c88:	1c43      	adds	r3, r0, #1
 8014c8a:	d102      	bne.n	8014c92 <_lseek_r+0x1e>
 8014c8c:	682b      	ldr	r3, [r5, #0]
 8014c8e:	b103      	cbz	r3, 8014c92 <_lseek_r+0x1e>
 8014c90:	6023      	str	r3, [r4, #0]
 8014c92:	bd38      	pop	{r3, r4, r5, pc}
 8014c94:	20013d2c 	.word	0x20013d2c

08014c98 <_malloc_usable_size_r>:
 8014c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c9c:	1f18      	subs	r0, r3, #4
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	bfbc      	itt	lt
 8014ca2:	580b      	ldrlt	r3, [r1, r0]
 8014ca4:	18c0      	addlt	r0, r0, r3
 8014ca6:	4770      	bx	lr

08014ca8 <_read_r>:
 8014ca8:	b538      	push	{r3, r4, r5, lr}
 8014caa:	4d07      	ldr	r5, [pc, #28]	; (8014cc8 <_read_r+0x20>)
 8014cac:	4604      	mov	r4, r0
 8014cae:	4608      	mov	r0, r1
 8014cb0:	4611      	mov	r1, r2
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	602a      	str	r2, [r5, #0]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	f002 f8a8 	bl	8016e0c <_read>
 8014cbc:	1c43      	adds	r3, r0, #1
 8014cbe:	d102      	bne.n	8014cc6 <_read_r+0x1e>
 8014cc0:	682b      	ldr	r3, [r5, #0]
 8014cc2:	b103      	cbz	r3, 8014cc6 <_read_r+0x1e>
 8014cc4:	6023      	str	r3, [r4, #0]
 8014cc6:	bd38      	pop	{r3, r4, r5, pc}
 8014cc8:	20013d2c 	.word	0x20013d2c
 8014ccc:	00000000 	.word	0x00000000

08014cd0 <cos>:
 8014cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014cd2:	ec53 2b10 	vmov	r2, r3, d0
 8014cd6:	4824      	ldr	r0, [pc, #144]	; (8014d68 <cos+0x98>)
 8014cd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014cdc:	4281      	cmp	r1, r0
 8014cde:	dc06      	bgt.n	8014cee <cos+0x1e>
 8014ce0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8014d60 <cos+0x90>
 8014ce4:	f001 f9b0 	bl	8016048 <__kernel_cos>
 8014ce8:	ec51 0b10 	vmov	r0, r1, d0
 8014cec:	e007      	b.n	8014cfe <cos+0x2e>
 8014cee:	481f      	ldr	r0, [pc, #124]	; (8014d6c <cos+0x9c>)
 8014cf0:	4281      	cmp	r1, r0
 8014cf2:	dd09      	ble.n	8014d08 <cos+0x38>
 8014cf4:	ee10 0a10 	vmov	r0, s0
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	f7eb fad5 	bl	80002a8 <__aeabi_dsub>
 8014cfe:	ec41 0b10 	vmov	d0, r0, r1
 8014d02:	b005      	add	sp, #20
 8014d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d08:	4668      	mov	r0, sp
 8014d0a:	f000 f9fd 	bl	8015108 <__ieee754_rem_pio2>
 8014d0e:	f000 0003 	and.w	r0, r0, #3
 8014d12:	2801      	cmp	r0, #1
 8014d14:	d007      	beq.n	8014d26 <cos+0x56>
 8014d16:	2802      	cmp	r0, #2
 8014d18:	d012      	beq.n	8014d40 <cos+0x70>
 8014d1a:	b9c0      	cbnz	r0, 8014d4e <cos+0x7e>
 8014d1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014d20:	ed9d 0b00 	vldr	d0, [sp]
 8014d24:	e7de      	b.n	8014ce4 <cos+0x14>
 8014d26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014d2a:	ed9d 0b00 	vldr	d0, [sp]
 8014d2e:	f001 fd93 	bl	8016858 <__kernel_sin>
 8014d32:	ec53 2b10 	vmov	r2, r3, d0
 8014d36:	ee10 0a10 	vmov	r0, s0
 8014d3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014d3e:	e7de      	b.n	8014cfe <cos+0x2e>
 8014d40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014d44:	ed9d 0b00 	vldr	d0, [sp]
 8014d48:	f001 f97e 	bl	8016048 <__kernel_cos>
 8014d4c:	e7f1      	b.n	8014d32 <cos+0x62>
 8014d4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014d52:	ed9d 0b00 	vldr	d0, [sp]
 8014d56:	2001      	movs	r0, #1
 8014d58:	f001 fd7e 	bl	8016858 <__kernel_sin>
 8014d5c:	e7c4      	b.n	8014ce8 <cos+0x18>
 8014d5e:	bf00      	nop
	...
 8014d68:	3fe921fb 	.word	0x3fe921fb
 8014d6c:	7fefffff 	.word	0x7fefffff

08014d70 <fabsf>:
 8014d70:	ee10 3a10 	vmov	r3, s0
 8014d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d78:	ee00 3a10 	vmov	s0, r3
 8014d7c:	4770      	bx	lr
	...

08014d80 <roundf>:
 8014d80:	ee10 0a10 	vmov	r0, s0
 8014d84:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014d88:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8014d8c:	2a16      	cmp	r2, #22
 8014d8e:	dc15      	bgt.n	8014dbc <roundf+0x3c>
 8014d90:	2a00      	cmp	r2, #0
 8014d92:	da08      	bge.n	8014da6 <roundf+0x26>
 8014d94:	3201      	adds	r2, #1
 8014d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8014d9a:	d101      	bne.n	8014da0 <roundf+0x20>
 8014d9c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8014da0:	ee00 3a10 	vmov	s0, r3
 8014da4:	4770      	bx	lr
 8014da6:	4908      	ldr	r1, [pc, #32]	; (8014dc8 <roundf+0x48>)
 8014da8:	4111      	asrs	r1, r2
 8014daa:	4208      	tst	r0, r1
 8014dac:	d0fa      	beq.n	8014da4 <roundf+0x24>
 8014dae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014db2:	4113      	asrs	r3, r2
 8014db4:	4403      	add	r3, r0
 8014db6:	ea23 0301 	bic.w	r3, r3, r1
 8014dba:	e7f1      	b.n	8014da0 <roundf+0x20>
 8014dbc:	2a80      	cmp	r2, #128	; 0x80
 8014dbe:	d1f1      	bne.n	8014da4 <roundf+0x24>
 8014dc0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop
 8014dc8:	007fffff 	.word	0x007fffff

08014dcc <sqrt>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	ed2d 8b02 	vpush	{d8}
 8014dd2:	ec55 4b10 	vmov	r4, r5, d0
 8014dd6:	f000 fba1 	bl	801551c <__ieee754_sqrt>
 8014dda:	4b15      	ldr	r3, [pc, #84]	; (8014e30 <sqrt+0x64>)
 8014ddc:	eeb0 8a40 	vmov.f32	s16, s0
 8014de0:	eef0 8a60 	vmov.f32	s17, s1
 8014de4:	f993 3000 	ldrsb.w	r3, [r3]
 8014de8:	3301      	adds	r3, #1
 8014dea:	d019      	beq.n	8014e20 <sqrt+0x54>
 8014dec:	4622      	mov	r2, r4
 8014dee:	462b      	mov	r3, r5
 8014df0:	4620      	mov	r0, r4
 8014df2:	4629      	mov	r1, r5
 8014df4:	f7eb feaa 	bl	8000b4c <__aeabi_dcmpun>
 8014df8:	b990      	cbnz	r0, 8014e20 <sqrt+0x54>
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	4620      	mov	r0, r4
 8014e00:	4629      	mov	r1, r5
 8014e02:	f7eb fe7b 	bl	8000afc <__aeabi_dcmplt>
 8014e06:	b158      	cbz	r0, 8014e20 <sqrt+0x54>
 8014e08:	f7fb fb2a 	bl	8010460 <__errno>
 8014e0c:	2321      	movs	r3, #33	; 0x21
 8014e0e:	6003      	str	r3, [r0, #0]
 8014e10:	2200      	movs	r2, #0
 8014e12:	2300      	movs	r3, #0
 8014e14:	4610      	mov	r0, r2
 8014e16:	4619      	mov	r1, r3
 8014e18:	f7eb fd28 	bl	800086c <__aeabi_ddiv>
 8014e1c:	ec41 0b18 	vmov	d8, r0, r1
 8014e20:	eeb0 0a48 	vmov.f32	s0, s16
 8014e24:	eef0 0a68 	vmov.f32	s1, s17
 8014e28:	ecbd 8b02 	vpop	{d8}
 8014e2c:	bd38      	pop	{r3, r4, r5, pc}
 8014e2e:	bf00      	nop
 8014e30:	200010b4 	.word	0x200010b4

08014e34 <expf>:
 8014e34:	b508      	push	{r3, lr}
 8014e36:	ed2d 8b02 	vpush	{d8}
 8014e3a:	eef0 8a40 	vmov.f32	s17, s0
 8014e3e:	f000 fc21 	bl	8015684 <__ieee754_expf>
 8014e42:	4b16      	ldr	r3, [pc, #88]	; (8014e9c <expf+0x68>)
 8014e44:	f993 3000 	ldrsb.w	r3, [r3]
 8014e48:	3301      	adds	r3, #1
 8014e4a:	eeb0 8a40 	vmov.f32	s16, s0
 8014e4e:	d011      	beq.n	8014e74 <expf+0x40>
 8014e50:	eeb0 0a68 	vmov.f32	s0, s17
 8014e54:	f001 fece 	bl	8016bf4 <finitef>
 8014e58:	b160      	cbz	r0, 8014e74 <expf+0x40>
 8014e5a:	eddf 7a11 	vldr	s15, [pc, #68]	; 8014ea0 <expf+0x6c>
 8014e5e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e66:	dd0a      	ble.n	8014e7e <expf+0x4a>
 8014e68:	f7fb fafa 	bl	8010460 <__errno>
 8014e6c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8014ea4 <expf+0x70>
 8014e70:	2322      	movs	r3, #34	; 0x22
 8014e72:	6003      	str	r3, [r0, #0]
 8014e74:	eeb0 0a48 	vmov.f32	s0, s16
 8014e78:	ecbd 8b02 	vpop	{d8}
 8014e7c:	bd08      	pop	{r3, pc}
 8014e7e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014ea8 <expf+0x74>
 8014e82:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e8a:	d5f3      	bpl.n	8014e74 <expf+0x40>
 8014e8c:	f7fb fae8 	bl	8010460 <__errno>
 8014e90:	2322      	movs	r3, #34	; 0x22
 8014e92:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8014eac <expf+0x78>
 8014e96:	6003      	str	r3, [r0, #0]
 8014e98:	e7ec      	b.n	8014e74 <expf+0x40>
 8014e9a:	bf00      	nop
 8014e9c:	200010b4 	.word	0x200010b4
 8014ea0:	42b17180 	.word	0x42b17180
 8014ea4:	7f800000 	.word	0x7f800000
 8014ea8:	c2cff1b5 	.word	0xc2cff1b5
 8014eac:	00000000 	.word	0x00000000

08014eb0 <logf>:
 8014eb0:	b508      	push	{r3, lr}
 8014eb2:	ed2d 8b02 	vpush	{d8}
 8014eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8014eba:	f000 fcb7 	bl	801582c <__ieee754_logf>
 8014ebe:	4b14      	ldr	r3, [pc, #80]	; (8014f10 <logf+0x60>)
 8014ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8014ec4:	3301      	adds	r3, #1
 8014ec6:	d014      	beq.n	8014ef2 <logf+0x42>
 8014ec8:	eeb4 8a48 	vcmp.f32	s16, s16
 8014ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed0:	d60f      	bvs.n	8014ef2 <logf+0x42>
 8014ed2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eda:	dc0a      	bgt.n	8014ef2 <logf+0x42>
 8014edc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ee4:	d108      	bne.n	8014ef8 <logf+0x48>
 8014ee6:	f7fb fabb 	bl	8010460 <__errno>
 8014eea:	2322      	movs	r3, #34	; 0x22
 8014eec:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014f14 <logf+0x64>
 8014ef0:	6003      	str	r3, [r0, #0]
 8014ef2:	ecbd 8b02 	vpop	{d8}
 8014ef6:	bd08      	pop	{r3, pc}
 8014ef8:	f7fb fab2 	bl	8010460 <__errno>
 8014efc:	ecbd 8b02 	vpop	{d8}
 8014f00:	2321      	movs	r3, #33	; 0x21
 8014f02:	6003      	str	r3, [r0, #0]
 8014f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f08:	4803      	ldr	r0, [pc, #12]	; (8014f18 <logf+0x68>)
 8014f0a:	f7fc bb91 	b.w	8011630 <nanf>
 8014f0e:	bf00      	nop
 8014f10:	200010b4 	.word	0x200010b4
 8014f14:	ff800000 	.word	0xff800000
 8014f18:	0805fa3f 	.word	0x0805fa3f

08014f1c <log10f>:
 8014f1c:	b508      	push	{r3, lr}
 8014f1e:	ed2d 8b02 	vpush	{d8}
 8014f22:	eeb0 8a40 	vmov.f32	s16, s0
 8014f26:	f000 fd71 	bl	8015a0c <__ieee754_log10f>
 8014f2a:	4b14      	ldr	r3, [pc, #80]	; (8014f7c <log10f+0x60>)
 8014f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8014f30:	3301      	adds	r3, #1
 8014f32:	d014      	beq.n	8014f5e <log10f+0x42>
 8014f34:	eeb4 8a48 	vcmp.f32	s16, s16
 8014f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f3c:	d60f      	bvs.n	8014f5e <log10f+0x42>
 8014f3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f46:	d80a      	bhi.n	8014f5e <log10f+0x42>
 8014f48:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f50:	d108      	bne.n	8014f64 <log10f+0x48>
 8014f52:	f7fb fa85 	bl	8010460 <__errno>
 8014f56:	2322      	movs	r3, #34	; 0x22
 8014f58:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014f80 <log10f+0x64>
 8014f5c:	6003      	str	r3, [r0, #0]
 8014f5e:	ecbd 8b02 	vpop	{d8}
 8014f62:	bd08      	pop	{r3, pc}
 8014f64:	f7fb fa7c 	bl	8010460 <__errno>
 8014f68:	ecbd 8b02 	vpop	{d8}
 8014f6c:	2321      	movs	r3, #33	; 0x21
 8014f6e:	6003      	str	r3, [r0, #0]
 8014f70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f74:	4803      	ldr	r0, [pc, #12]	; (8014f84 <log10f+0x68>)
 8014f76:	f7fc bb5b 	b.w	8011630 <nanf>
 8014f7a:	bf00      	nop
 8014f7c:	200010b4 	.word	0x200010b4
 8014f80:	ff800000 	.word	0xff800000
 8014f84:	0805fa3f 	.word	0x0805fa3f

08014f88 <powf>:
 8014f88:	b508      	push	{r3, lr}
 8014f8a:	ed2d 8b04 	vpush	{d8-d9}
 8014f8e:	eeb0 9a40 	vmov.f32	s18, s0
 8014f92:	eef0 8a60 	vmov.f32	s17, s1
 8014f96:	f000 fd91 	bl	8015abc <__ieee754_powf>
 8014f9a:	4b43      	ldr	r3, [pc, #268]	; (80150a8 <powf+0x120>)
 8014f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	eeb0 8a40 	vmov.f32	s16, s0
 8014fa6:	d012      	beq.n	8014fce <powf+0x46>
 8014fa8:	eef4 8a68 	vcmp.f32	s17, s17
 8014fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb0:	d60d      	bvs.n	8014fce <powf+0x46>
 8014fb2:	eeb4 9a49 	vcmp.f32	s18, s18
 8014fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fba:	d70d      	bvc.n	8014fd8 <powf+0x50>
 8014fbc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014fc8:	bf08      	it	eq
 8014fca:	eeb0 8a67 	vmoveq.f32	s16, s15
 8014fce:	eeb0 0a48 	vmov.f32	s0, s16
 8014fd2:	ecbd 8b04 	vpop	{d8-d9}
 8014fd6:	bd08      	pop	{r3, pc}
 8014fd8:	eddf 9a34 	vldr	s19, [pc, #208]	; 80150ac <powf+0x124>
 8014fdc:	eeb4 9a69 	vcmp.f32	s18, s19
 8014fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe4:	d116      	bne.n	8015014 <powf+0x8c>
 8014fe6:	eef4 8a69 	vcmp.f32	s17, s19
 8014fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fee:	d057      	beq.n	80150a0 <powf+0x118>
 8014ff0:	eeb0 0a68 	vmov.f32	s0, s17
 8014ff4:	f001 fdfe 	bl	8016bf4 <finitef>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d0e8      	beq.n	8014fce <powf+0x46>
 8014ffc:	eef4 8ae9 	vcmpe.f32	s17, s19
 8015000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015004:	d5e3      	bpl.n	8014fce <powf+0x46>
 8015006:	f7fb fa2b 	bl	8010460 <__errno>
 801500a:	2321      	movs	r3, #33	; 0x21
 801500c:	6003      	str	r3, [r0, #0]
 801500e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80150b0 <powf+0x128>
 8015012:	e7dc      	b.n	8014fce <powf+0x46>
 8015014:	f001 fdee 	bl	8016bf4 <finitef>
 8015018:	bb50      	cbnz	r0, 8015070 <powf+0xe8>
 801501a:	eeb0 0a49 	vmov.f32	s0, s18
 801501e:	f001 fde9 	bl	8016bf4 <finitef>
 8015022:	b328      	cbz	r0, 8015070 <powf+0xe8>
 8015024:	eeb0 0a68 	vmov.f32	s0, s17
 8015028:	f001 fde4 	bl	8016bf4 <finitef>
 801502c:	b300      	cbz	r0, 8015070 <powf+0xe8>
 801502e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015036:	d706      	bvc.n	8015046 <powf+0xbe>
 8015038:	f7fb fa12 	bl	8010460 <__errno>
 801503c:	2321      	movs	r3, #33	; 0x21
 801503e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8015042:	6003      	str	r3, [r0, #0]
 8015044:	e7c3      	b.n	8014fce <powf+0x46>
 8015046:	f7fb fa0b 	bl	8010460 <__errno>
 801504a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801504e:	2322      	movs	r3, #34	; 0x22
 8015050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015054:	6003      	str	r3, [r0, #0]
 8015056:	d508      	bpl.n	801506a <powf+0xe2>
 8015058:	eeb0 0a68 	vmov.f32	s0, s17
 801505c:	f001 fdd8 	bl	8016c10 <rintf>
 8015060:	eeb4 0a68 	vcmp.f32	s0, s17
 8015064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015068:	d1d1      	bne.n	801500e <powf+0x86>
 801506a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80150b4 <powf+0x12c>
 801506e:	e7ae      	b.n	8014fce <powf+0x46>
 8015070:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015078:	d1a9      	bne.n	8014fce <powf+0x46>
 801507a:	eeb0 0a49 	vmov.f32	s0, s18
 801507e:	f001 fdb9 	bl	8016bf4 <finitef>
 8015082:	2800      	cmp	r0, #0
 8015084:	d0a3      	beq.n	8014fce <powf+0x46>
 8015086:	eeb0 0a68 	vmov.f32	s0, s17
 801508a:	f001 fdb3 	bl	8016bf4 <finitef>
 801508e:	2800      	cmp	r0, #0
 8015090:	d09d      	beq.n	8014fce <powf+0x46>
 8015092:	f7fb f9e5 	bl	8010460 <__errno>
 8015096:	2322      	movs	r3, #34	; 0x22
 8015098:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80150ac <powf+0x124>
 801509c:	6003      	str	r3, [r0, #0]
 801509e:	e796      	b.n	8014fce <powf+0x46>
 80150a0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80150a4:	e793      	b.n	8014fce <powf+0x46>
 80150a6:	bf00      	nop
 80150a8:	200010b4 	.word	0x200010b4
 80150ac:	00000000 	.word	0x00000000
 80150b0:	ff800000 	.word	0xff800000
 80150b4:	7f800000 	.word	0x7f800000

080150b8 <sqrtf>:
 80150b8:	b508      	push	{r3, lr}
 80150ba:	ed2d 8b02 	vpush	{d8}
 80150be:	eeb0 8a40 	vmov.f32	s16, s0
 80150c2:	f000 ffbb 	bl	801603c <__ieee754_sqrtf>
 80150c6:	4b0d      	ldr	r3, [pc, #52]	; (80150fc <sqrtf+0x44>)
 80150c8:	f993 3000 	ldrsb.w	r3, [r3]
 80150cc:	3301      	adds	r3, #1
 80150ce:	d011      	beq.n	80150f4 <sqrtf+0x3c>
 80150d0:	eeb4 8a48 	vcmp.f32	s16, s16
 80150d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150d8:	d60c      	bvs.n	80150f4 <sqrtf+0x3c>
 80150da:	eddf 8a09 	vldr	s17, [pc, #36]	; 8015100 <sqrtf+0x48>
 80150de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80150e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150e6:	d505      	bpl.n	80150f4 <sqrtf+0x3c>
 80150e8:	f7fb f9ba 	bl	8010460 <__errno>
 80150ec:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80150f0:	2321      	movs	r3, #33	; 0x21
 80150f2:	6003      	str	r3, [r0, #0]
 80150f4:	ecbd 8b02 	vpop	{d8}
 80150f8:	bd08      	pop	{r3, pc}
 80150fa:	bf00      	nop
 80150fc:	200010b4 	.word	0x200010b4
	...

08015108 <__ieee754_rem_pio2>:
 8015108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801510c:	ed2d 8b02 	vpush	{d8}
 8015110:	ec55 4b10 	vmov	r4, r5, d0
 8015114:	4bca      	ldr	r3, [pc, #808]	; (8015440 <__ieee754_rem_pio2+0x338>)
 8015116:	b08b      	sub	sp, #44	; 0x2c
 8015118:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801511c:	4598      	cmp	r8, r3
 801511e:	4682      	mov	sl, r0
 8015120:	9502      	str	r5, [sp, #8]
 8015122:	dc08      	bgt.n	8015136 <__ieee754_rem_pio2+0x2e>
 8015124:	2200      	movs	r2, #0
 8015126:	2300      	movs	r3, #0
 8015128:	ed80 0b00 	vstr	d0, [r0]
 801512c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015130:	f04f 0b00 	mov.w	fp, #0
 8015134:	e028      	b.n	8015188 <__ieee754_rem_pio2+0x80>
 8015136:	4bc3      	ldr	r3, [pc, #780]	; (8015444 <__ieee754_rem_pio2+0x33c>)
 8015138:	4598      	cmp	r8, r3
 801513a:	dc78      	bgt.n	801522e <__ieee754_rem_pio2+0x126>
 801513c:	9b02      	ldr	r3, [sp, #8]
 801513e:	4ec2      	ldr	r6, [pc, #776]	; (8015448 <__ieee754_rem_pio2+0x340>)
 8015140:	2b00      	cmp	r3, #0
 8015142:	ee10 0a10 	vmov	r0, s0
 8015146:	a3b0      	add	r3, pc, #704	; (adr r3, 8015408 <__ieee754_rem_pio2+0x300>)
 8015148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801514c:	4629      	mov	r1, r5
 801514e:	dd39      	ble.n	80151c4 <__ieee754_rem_pio2+0xbc>
 8015150:	f7eb f8aa 	bl	80002a8 <__aeabi_dsub>
 8015154:	45b0      	cmp	r8, r6
 8015156:	4604      	mov	r4, r0
 8015158:	460d      	mov	r5, r1
 801515a:	d01b      	beq.n	8015194 <__ieee754_rem_pio2+0x8c>
 801515c:	a3ac      	add	r3, pc, #688	; (adr r3, 8015410 <__ieee754_rem_pio2+0x308>)
 801515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015162:	f7eb f8a1 	bl	80002a8 <__aeabi_dsub>
 8015166:	4602      	mov	r2, r0
 8015168:	460b      	mov	r3, r1
 801516a:	e9ca 2300 	strd	r2, r3, [sl]
 801516e:	4620      	mov	r0, r4
 8015170:	4629      	mov	r1, r5
 8015172:	f7eb f899 	bl	80002a8 <__aeabi_dsub>
 8015176:	a3a6      	add	r3, pc, #664	; (adr r3, 8015410 <__ieee754_rem_pio2+0x308>)
 8015178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517c:	f7eb f894 	bl	80002a8 <__aeabi_dsub>
 8015180:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015184:	f04f 0b01 	mov.w	fp, #1
 8015188:	4658      	mov	r0, fp
 801518a:	b00b      	add	sp, #44	; 0x2c
 801518c:	ecbd 8b02 	vpop	{d8}
 8015190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015194:	a3a0      	add	r3, pc, #640	; (adr r3, 8015418 <__ieee754_rem_pio2+0x310>)
 8015196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519a:	f7eb f885 	bl	80002a8 <__aeabi_dsub>
 801519e:	a3a0      	add	r3, pc, #640	; (adr r3, 8015420 <__ieee754_rem_pio2+0x318>)
 80151a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a4:	4604      	mov	r4, r0
 80151a6:	460d      	mov	r5, r1
 80151a8:	f7eb f87e 	bl	80002a8 <__aeabi_dsub>
 80151ac:	4602      	mov	r2, r0
 80151ae:	460b      	mov	r3, r1
 80151b0:	e9ca 2300 	strd	r2, r3, [sl]
 80151b4:	4620      	mov	r0, r4
 80151b6:	4629      	mov	r1, r5
 80151b8:	f7eb f876 	bl	80002a8 <__aeabi_dsub>
 80151bc:	a398      	add	r3, pc, #608	; (adr r3, 8015420 <__ieee754_rem_pio2+0x318>)
 80151be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c2:	e7db      	b.n	801517c <__ieee754_rem_pio2+0x74>
 80151c4:	f7eb f872 	bl	80002ac <__adddf3>
 80151c8:	45b0      	cmp	r8, r6
 80151ca:	4604      	mov	r4, r0
 80151cc:	460d      	mov	r5, r1
 80151ce:	d016      	beq.n	80151fe <__ieee754_rem_pio2+0xf6>
 80151d0:	a38f      	add	r3, pc, #572	; (adr r3, 8015410 <__ieee754_rem_pio2+0x308>)
 80151d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d6:	f7eb f869 	bl	80002ac <__adddf3>
 80151da:	4602      	mov	r2, r0
 80151dc:	460b      	mov	r3, r1
 80151de:	e9ca 2300 	strd	r2, r3, [sl]
 80151e2:	4620      	mov	r0, r4
 80151e4:	4629      	mov	r1, r5
 80151e6:	f7eb f85f 	bl	80002a8 <__aeabi_dsub>
 80151ea:	a389      	add	r3, pc, #548	; (adr r3, 8015410 <__ieee754_rem_pio2+0x308>)
 80151ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f0:	f7eb f85c 	bl	80002ac <__adddf3>
 80151f4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80151f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80151fc:	e7c4      	b.n	8015188 <__ieee754_rem_pio2+0x80>
 80151fe:	a386      	add	r3, pc, #536	; (adr r3, 8015418 <__ieee754_rem_pio2+0x310>)
 8015200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015204:	f7eb f852 	bl	80002ac <__adddf3>
 8015208:	a385      	add	r3, pc, #532	; (adr r3, 8015420 <__ieee754_rem_pio2+0x318>)
 801520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520e:	4604      	mov	r4, r0
 8015210:	460d      	mov	r5, r1
 8015212:	f7eb f84b 	bl	80002ac <__adddf3>
 8015216:	4602      	mov	r2, r0
 8015218:	460b      	mov	r3, r1
 801521a:	e9ca 2300 	strd	r2, r3, [sl]
 801521e:	4620      	mov	r0, r4
 8015220:	4629      	mov	r1, r5
 8015222:	f7eb f841 	bl	80002a8 <__aeabi_dsub>
 8015226:	a37e      	add	r3, pc, #504	; (adr r3, 8015420 <__ieee754_rem_pio2+0x318>)
 8015228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801522c:	e7e0      	b.n	80151f0 <__ieee754_rem_pio2+0xe8>
 801522e:	4b87      	ldr	r3, [pc, #540]	; (801544c <__ieee754_rem_pio2+0x344>)
 8015230:	4598      	cmp	r8, r3
 8015232:	f300 80d9 	bgt.w	80153e8 <__ieee754_rem_pio2+0x2e0>
 8015236:	f001 fbcd 	bl	80169d4 <fabs>
 801523a:	ec55 4b10 	vmov	r4, r5, d0
 801523e:	ee10 0a10 	vmov	r0, s0
 8015242:	a379      	add	r3, pc, #484	; (adr r3, 8015428 <__ieee754_rem_pio2+0x320>)
 8015244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015248:	4629      	mov	r1, r5
 801524a:	f7eb f9e5 	bl	8000618 <__aeabi_dmul>
 801524e:	4b80      	ldr	r3, [pc, #512]	; (8015450 <__ieee754_rem_pio2+0x348>)
 8015250:	2200      	movs	r2, #0
 8015252:	f7eb f82b 	bl	80002ac <__adddf3>
 8015256:	f7eb fc8f 	bl	8000b78 <__aeabi_d2iz>
 801525a:	4683      	mov	fp, r0
 801525c:	f7eb f972 	bl	8000544 <__aeabi_i2d>
 8015260:	4602      	mov	r2, r0
 8015262:	460b      	mov	r3, r1
 8015264:	ec43 2b18 	vmov	d8, r2, r3
 8015268:	a367      	add	r3, pc, #412	; (adr r3, 8015408 <__ieee754_rem_pio2+0x300>)
 801526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526e:	f7eb f9d3 	bl	8000618 <__aeabi_dmul>
 8015272:	4602      	mov	r2, r0
 8015274:	460b      	mov	r3, r1
 8015276:	4620      	mov	r0, r4
 8015278:	4629      	mov	r1, r5
 801527a:	f7eb f815 	bl	80002a8 <__aeabi_dsub>
 801527e:	a364      	add	r3, pc, #400	; (adr r3, 8015410 <__ieee754_rem_pio2+0x308>)
 8015280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015284:	4606      	mov	r6, r0
 8015286:	460f      	mov	r7, r1
 8015288:	ec51 0b18 	vmov	r0, r1, d8
 801528c:	f7eb f9c4 	bl	8000618 <__aeabi_dmul>
 8015290:	f1bb 0f1f 	cmp.w	fp, #31
 8015294:	4604      	mov	r4, r0
 8015296:	460d      	mov	r5, r1
 8015298:	dc0d      	bgt.n	80152b6 <__ieee754_rem_pio2+0x1ae>
 801529a:	4b6e      	ldr	r3, [pc, #440]	; (8015454 <__ieee754_rem_pio2+0x34c>)
 801529c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80152a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152a4:	4543      	cmp	r3, r8
 80152a6:	d006      	beq.n	80152b6 <__ieee754_rem_pio2+0x1ae>
 80152a8:	4622      	mov	r2, r4
 80152aa:	462b      	mov	r3, r5
 80152ac:	4630      	mov	r0, r6
 80152ae:	4639      	mov	r1, r7
 80152b0:	f7ea fffa 	bl	80002a8 <__aeabi_dsub>
 80152b4:	e00f      	b.n	80152d6 <__ieee754_rem_pio2+0x1ce>
 80152b6:	462b      	mov	r3, r5
 80152b8:	4622      	mov	r2, r4
 80152ba:	4630      	mov	r0, r6
 80152bc:	4639      	mov	r1, r7
 80152be:	f7ea fff3 	bl	80002a8 <__aeabi_dsub>
 80152c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80152c6:	9303      	str	r3, [sp, #12]
 80152c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80152cc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80152d0:	f1b8 0f10 	cmp.w	r8, #16
 80152d4:	dc02      	bgt.n	80152dc <__ieee754_rem_pio2+0x1d4>
 80152d6:	e9ca 0100 	strd	r0, r1, [sl]
 80152da:	e039      	b.n	8015350 <__ieee754_rem_pio2+0x248>
 80152dc:	a34e      	add	r3, pc, #312	; (adr r3, 8015418 <__ieee754_rem_pio2+0x310>)
 80152de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e2:	ec51 0b18 	vmov	r0, r1, d8
 80152e6:	f7eb f997 	bl	8000618 <__aeabi_dmul>
 80152ea:	4604      	mov	r4, r0
 80152ec:	460d      	mov	r5, r1
 80152ee:	4602      	mov	r2, r0
 80152f0:	460b      	mov	r3, r1
 80152f2:	4630      	mov	r0, r6
 80152f4:	4639      	mov	r1, r7
 80152f6:	f7ea ffd7 	bl	80002a8 <__aeabi_dsub>
 80152fa:	4602      	mov	r2, r0
 80152fc:	460b      	mov	r3, r1
 80152fe:	4680      	mov	r8, r0
 8015300:	4689      	mov	r9, r1
 8015302:	4630      	mov	r0, r6
 8015304:	4639      	mov	r1, r7
 8015306:	f7ea ffcf 	bl	80002a8 <__aeabi_dsub>
 801530a:	4622      	mov	r2, r4
 801530c:	462b      	mov	r3, r5
 801530e:	f7ea ffcb 	bl	80002a8 <__aeabi_dsub>
 8015312:	a343      	add	r3, pc, #268	; (adr r3, 8015420 <__ieee754_rem_pio2+0x318>)
 8015314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015318:	4604      	mov	r4, r0
 801531a:	460d      	mov	r5, r1
 801531c:	ec51 0b18 	vmov	r0, r1, d8
 8015320:	f7eb f97a 	bl	8000618 <__aeabi_dmul>
 8015324:	4622      	mov	r2, r4
 8015326:	462b      	mov	r3, r5
 8015328:	f7ea ffbe 	bl	80002a8 <__aeabi_dsub>
 801532c:	4602      	mov	r2, r0
 801532e:	460b      	mov	r3, r1
 8015330:	4604      	mov	r4, r0
 8015332:	460d      	mov	r5, r1
 8015334:	4640      	mov	r0, r8
 8015336:	4649      	mov	r1, r9
 8015338:	f7ea ffb6 	bl	80002a8 <__aeabi_dsub>
 801533c:	9a03      	ldr	r2, [sp, #12]
 801533e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015342:	1ad3      	subs	r3, r2, r3
 8015344:	2b31      	cmp	r3, #49	; 0x31
 8015346:	dc24      	bgt.n	8015392 <__ieee754_rem_pio2+0x28a>
 8015348:	e9ca 0100 	strd	r0, r1, [sl]
 801534c:	4646      	mov	r6, r8
 801534e:	464f      	mov	r7, r9
 8015350:	e9da 8900 	ldrd	r8, r9, [sl]
 8015354:	4630      	mov	r0, r6
 8015356:	4642      	mov	r2, r8
 8015358:	464b      	mov	r3, r9
 801535a:	4639      	mov	r1, r7
 801535c:	f7ea ffa4 	bl	80002a8 <__aeabi_dsub>
 8015360:	462b      	mov	r3, r5
 8015362:	4622      	mov	r2, r4
 8015364:	f7ea ffa0 	bl	80002a8 <__aeabi_dsub>
 8015368:	9b02      	ldr	r3, [sp, #8]
 801536a:	2b00      	cmp	r3, #0
 801536c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015370:	f6bf af0a 	bge.w	8015188 <__ieee754_rem_pio2+0x80>
 8015374:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015378:	f8ca 3004 	str.w	r3, [sl, #4]
 801537c:	f8ca 8000 	str.w	r8, [sl]
 8015380:	f8ca 0008 	str.w	r0, [sl, #8]
 8015384:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015388:	f8ca 300c 	str.w	r3, [sl, #12]
 801538c:	f1cb 0b00 	rsb	fp, fp, #0
 8015390:	e6fa      	b.n	8015188 <__ieee754_rem_pio2+0x80>
 8015392:	a327      	add	r3, pc, #156	; (adr r3, 8015430 <__ieee754_rem_pio2+0x328>)
 8015394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015398:	ec51 0b18 	vmov	r0, r1, d8
 801539c:	f7eb f93c 	bl	8000618 <__aeabi_dmul>
 80153a0:	4604      	mov	r4, r0
 80153a2:	460d      	mov	r5, r1
 80153a4:	4602      	mov	r2, r0
 80153a6:	460b      	mov	r3, r1
 80153a8:	4640      	mov	r0, r8
 80153aa:	4649      	mov	r1, r9
 80153ac:	f7ea ff7c 	bl	80002a8 <__aeabi_dsub>
 80153b0:	4602      	mov	r2, r0
 80153b2:	460b      	mov	r3, r1
 80153b4:	4606      	mov	r6, r0
 80153b6:	460f      	mov	r7, r1
 80153b8:	4640      	mov	r0, r8
 80153ba:	4649      	mov	r1, r9
 80153bc:	f7ea ff74 	bl	80002a8 <__aeabi_dsub>
 80153c0:	4622      	mov	r2, r4
 80153c2:	462b      	mov	r3, r5
 80153c4:	f7ea ff70 	bl	80002a8 <__aeabi_dsub>
 80153c8:	a31b      	add	r3, pc, #108	; (adr r3, 8015438 <__ieee754_rem_pio2+0x330>)
 80153ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ce:	4604      	mov	r4, r0
 80153d0:	460d      	mov	r5, r1
 80153d2:	ec51 0b18 	vmov	r0, r1, d8
 80153d6:	f7eb f91f 	bl	8000618 <__aeabi_dmul>
 80153da:	4622      	mov	r2, r4
 80153dc:	462b      	mov	r3, r5
 80153de:	f7ea ff63 	bl	80002a8 <__aeabi_dsub>
 80153e2:	4604      	mov	r4, r0
 80153e4:	460d      	mov	r5, r1
 80153e6:	e75f      	b.n	80152a8 <__ieee754_rem_pio2+0x1a0>
 80153e8:	4b1b      	ldr	r3, [pc, #108]	; (8015458 <__ieee754_rem_pio2+0x350>)
 80153ea:	4598      	cmp	r8, r3
 80153ec:	dd36      	ble.n	801545c <__ieee754_rem_pio2+0x354>
 80153ee:	ee10 2a10 	vmov	r2, s0
 80153f2:	462b      	mov	r3, r5
 80153f4:	4620      	mov	r0, r4
 80153f6:	4629      	mov	r1, r5
 80153f8:	f7ea ff56 	bl	80002a8 <__aeabi_dsub>
 80153fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015400:	e9ca 0100 	strd	r0, r1, [sl]
 8015404:	e694      	b.n	8015130 <__ieee754_rem_pio2+0x28>
 8015406:	bf00      	nop
 8015408:	54400000 	.word	0x54400000
 801540c:	3ff921fb 	.word	0x3ff921fb
 8015410:	1a626331 	.word	0x1a626331
 8015414:	3dd0b461 	.word	0x3dd0b461
 8015418:	1a600000 	.word	0x1a600000
 801541c:	3dd0b461 	.word	0x3dd0b461
 8015420:	2e037073 	.word	0x2e037073
 8015424:	3ba3198a 	.word	0x3ba3198a
 8015428:	6dc9c883 	.word	0x6dc9c883
 801542c:	3fe45f30 	.word	0x3fe45f30
 8015430:	2e000000 	.word	0x2e000000
 8015434:	3ba3198a 	.word	0x3ba3198a
 8015438:	252049c1 	.word	0x252049c1
 801543c:	397b839a 	.word	0x397b839a
 8015440:	3fe921fb 	.word	0x3fe921fb
 8015444:	4002d97b 	.word	0x4002d97b
 8015448:	3ff921fb 	.word	0x3ff921fb
 801544c:	413921fb 	.word	0x413921fb
 8015450:	3fe00000 	.word	0x3fe00000
 8015454:	0805feb4 	.word	0x0805feb4
 8015458:	7fefffff 	.word	0x7fefffff
 801545c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8015460:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8015464:	ee10 0a10 	vmov	r0, s0
 8015468:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801546c:	ee10 6a10 	vmov	r6, s0
 8015470:	460f      	mov	r7, r1
 8015472:	f7eb fb81 	bl	8000b78 <__aeabi_d2iz>
 8015476:	f7eb f865 	bl	8000544 <__aeabi_i2d>
 801547a:	4602      	mov	r2, r0
 801547c:	460b      	mov	r3, r1
 801547e:	4630      	mov	r0, r6
 8015480:	4639      	mov	r1, r7
 8015482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015486:	f7ea ff0f 	bl	80002a8 <__aeabi_dsub>
 801548a:	4b22      	ldr	r3, [pc, #136]	; (8015514 <__ieee754_rem_pio2+0x40c>)
 801548c:	2200      	movs	r2, #0
 801548e:	f7eb f8c3 	bl	8000618 <__aeabi_dmul>
 8015492:	460f      	mov	r7, r1
 8015494:	4606      	mov	r6, r0
 8015496:	f7eb fb6f 	bl	8000b78 <__aeabi_d2iz>
 801549a:	f7eb f853 	bl	8000544 <__aeabi_i2d>
 801549e:	4602      	mov	r2, r0
 80154a0:	460b      	mov	r3, r1
 80154a2:	4630      	mov	r0, r6
 80154a4:	4639      	mov	r1, r7
 80154a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80154aa:	f7ea fefd 	bl	80002a8 <__aeabi_dsub>
 80154ae:	4b19      	ldr	r3, [pc, #100]	; (8015514 <__ieee754_rem_pio2+0x40c>)
 80154b0:	2200      	movs	r2, #0
 80154b2:	f7eb f8b1 	bl	8000618 <__aeabi_dmul>
 80154b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80154ba:	ad04      	add	r5, sp, #16
 80154bc:	f04f 0803 	mov.w	r8, #3
 80154c0:	46a9      	mov	r9, r5
 80154c2:	2600      	movs	r6, #0
 80154c4:	2700      	movs	r7, #0
 80154c6:	4632      	mov	r2, r6
 80154c8:	463b      	mov	r3, r7
 80154ca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80154ce:	46c3      	mov	fp, r8
 80154d0:	3d08      	subs	r5, #8
 80154d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80154d6:	f7eb fb07 	bl	8000ae8 <__aeabi_dcmpeq>
 80154da:	2800      	cmp	r0, #0
 80154dc:	d1f3      	bne.n	80154c6 <__ieee754_rem_pio2+0x3be>
 80154de:	4b0e      	ldr	r3, [pc, #56]	; (8015518 <__ieee754_rem_pio2+0x410>)
 80154e0:	9301      	str	r3, [sp, #4]
 80154e2:	2302      	movs	r3, #2
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	4622      	mov	r2, r4
 80154e8:	465b      	mov	r3, fp
 80154ea:	4651      	mov	r1, sl
 80154ec:	4648      	mov	r0, r9
 80154ee:	f000 fe73 	bl	80161d8 <__kernel_rem_pio2>
 80154f2:	9b02      	ldr	r3, [sp, #8]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	4683      	mov	fp, r0
 80154f8:	f6bf ae46 	bge.w	8015188 <__ieee754_rem_pio2+0x80>
 80154fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015500:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015504:	f8ca 3004 	str.w	r3, [sl, #4]
 8015508:	f8da 300c 	ldr.w	r3, [sl, #12]
 801550c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015510:	e73a      	b.n	8015388 <__ieee754_rem_pio2+0x280>
 8015512:	bf00      	nop
 8015514:	41700000 	.word	0x41700000
 8015518:	0805ff34 	.word	0x0805ff34

0801551c <__ieee754_sqrt>:
 801551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015520:	ec55 4b10 	vmov	r4, r5, d0
 8015524:	4e56      	ldr	r6, [pc, #344]	; (8015680 <__ieee754_sqrt+0x164>)
 8015526:	43ae      	bics	r6, r5
 8015528:	ee10 0a10 	vmov	r0, s0
 801552c:	ee10 3a10 	vmov	r3, s0
 8015530:	4629      	mov	r1, r5
 8015532:	462a      	mov	r2, r5
 8015534:	d110      	bne.n	8015558 <__ieee754_sqrt+0x3c>
 8015536:	ee10 2a10 	vmov	r2, s0
 801553a:	462b      	mov	r3, r5
 801553c:	f7eb f86c 	bl	8000618 <__aeabi_dmul>
 8015540:	4602      	mov	r2, r0
 8015542:	460b      	mov	r3, r1
 8015544:	4620      	mov	r0, r4
 8015546:	4629      	mov	r1, r5
 8015548:	f7ea feb0 	bl	80002ac <__adddf3>
 801554c:	4604      	mov	r4, r0
 801554e:	460d      	mov	r5, r1
 8015550:	ec45 4b10 	vmov	d0, r4, r5
 8015554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015558:	2d00      	cmp	r5, #0
 801555a:	dc10      	bgt.n	801557e <__ieee754_sqrt+0x62>
 801555c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015560:	4330      	orrs	r0, r6
 8015562:	d0f5      	beq.n	8015550 <__ieee754_sqrt+0x34>
 8015564:	b15d      	cbz	r5, 801557e <__ieee754_sqrt+0x62>
 8015566:	ee10 2a10 	vmov	r2, s0
 801556a:	462b      	mov	r3, r5
 801556c:	ee10 0a10 	vmov	r0, s0
 8015570:	f7ea fe9a 	bl	80002a8 <__aeabi_dsub>
 8015574:	4602      	mov	r2, r0
 8015576:	460b      	mov	r3, r1
 8015578:	f7eb f978 	bl	800086c <__aeabi_ddiv>
 801557c:	e7e6      	b.n	801554c <__ieee754_sqrt+0x30>
 801557e:	1509      	asrs	r1, r1, #20
 8015580:	d076      	beq.n	8015670 <__ieee754_sqrt+0x154>
 8015582:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015586:	07ce      	lsls	r6, r1, #31
 8015588:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801558c:	bf5e      	ittt	pl
 801558e:	0fda      	lsrpl	r2, r3, #31
 8015590:	005b      	lslpl	r3, r3, #1
 8015592:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015596:	0fda      	lsrs	r2, r3, #31
 8015598:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801559c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80155a0:	2000      	movs	r0, #0
 80155a2:	106d      	asrs	r5, r5, #1
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	f04f 0e16 	mov.w	lr, #22
 80155aa:	4684      	mov	ip, r0
 80155ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80155b0:	eb0c 0401 	add.w	r4, ip, r1
 80155b4:	4294      	cmp	r4, r2
 80155b6:	bfde      	ittt	le
 80155b8:	1b12      	suble	r2, r2, r4
 80155ba:	eb04 0c01 	addle.w	ip, r4, r1
 80155be:	1840      	addle	r0, r0, r1
 80155c0:	0052      	lsls	r2, r2, #1
 80155c2:	f1be 0e01 	subs.w	lr, lr, #1
 80155c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80155ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80155ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80155d2:	d1ed      	bne.n	80155b0 <__ieee754_sqrt+0x94>
 80155d4:	4671      	mov	r1, lr
 80155d6:	2720      	movs	r7, #32
 80155d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80155dc:	4562      	cmp	r2, ip
 80155de:	eb04 060e 	add.w	r6, r4, lr
 80155e2:	dc02      	bgt.n	80155ea <__ieee754_sqrt+0xce>
 80155e4:	d113      	bne.n	801560e <__ieee754_sqrt+0xf2>
 80155e6:	429e      	cmp	r6, r3
 80155e8:	d811      	bhi.n	801560e <__ieee754_sqrt+0xf2>
 80155ea:	2e00      	cmp	r6, #0
 80155ec:	eb06 0e04 	add.w	lr, r6, r4
 80155f0:	da43      	bge.n	801567a <__ieee754_sqrt+0x15e>
 80155f2:	f1be 0f00 	cmp.w	lr, #0
 80155f6:	db40      	blt.n	801567a <__ieee754_sqrt+0x15e>
 80155f8:	f10c 0801 	add.w	r8, ip, #1
 80155fc:	eba2 020c 	sub.w	r2, r2, ip
 8015600:	429e      	cmp	r6, r3
 8015602:	bf88      	it	hi
 8015604:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8015608:	1b9b      	subs	r3, r3, r6
 801560a:	4421      	add	r1, r4
 801560c:	46c4      	mov	ip, r8
 801560e:	0052      	lsls	r2, r2, #1
 8015610:	3f01      	subs	r7, #1
 8015612:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015616:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801561a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801561e:	d1dd      	bne.n	80155dc <__ieee754_sqrt+0xc0>
 8015620:	4313      	orrs	r3, r2
 8015622:	d006      	beq.n	8015632 <__ieee754_sqrt+0x116>
 8015624:	1c4c      	adds	r4, r1, #1
 8015626:	bf13      	iteet	ne
 8015628:	3101      	addne	r1, #1
 801562a:	3001      	addeq	r0, #1
 801562c:	4639      	moveq	r1, r7
 801562e:	f021 0101 	bicne.w	r1, r1, #1
 8015632:	1043      	asrs	r3, r0, #1
 8015634:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015638:	0849      	lsrs	r1, r1, #1
 801563a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801563e:	07c2      	lsls	r2, r0, #31
 8015640:	bf48      	it	mi
 8015642:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015646:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801564a:	460c      	mov	r4, r1
 801564c:	463d      	mov	r5, r7
 801564e:	e77f      	b.n	8015550 <__ieee754_sqrt+0x34>
 8015650:	0ada      	lsrs	r2, r3, #11
 8015652:	3815      	subs	r0, #21
 8015654:	055b      	lsls	r3, r3, #21
 8015656:	2a00      	cmp	r2, #0
 8015658:	d0fa      	beq.n	8015650 <__ieee754_sqrt+0x134>
 801565a:	02d7      	lsls	r7, r2, #11
 801565c:	d50a      	bpl.n	8015674 <__ieee754_sqrt+0x158>
 801565e:	f1c1 0420 	rsb	r4, r1, #32
 8015662:	fa23 f404 	lsr.w	r4, r3, r4
 8015666:	1e4d      	subs	r5, r1, #1
 8015668:	408b      	lsls	r3, r1
 801566a:	4322      	orrs	r2, r4
 801566c:	1b41      	subs	r1, r0, r5
 801566e:	e788      	b.n	8015582 <__ieee754_sqrt+0x66>
 8015670:	4608      	mov	r0, r1
 8015672:	e7f0      	b.n	8015656 <__ieee754_sqrt+0x13a>
 8015674:	0052      	lsls	r2, r2, #1
 8015676:	3101      	adds	r1, #1
 8015678:	e7ef      	b.n	801565a <__ieee754_sqrt+0x13e>
 801567a:	46e0      	mov	r8, ip
 801567c:	e7be      	b.n	80155fc <__ieee754_sqrt+0xe0>
 801567e:	bf00      	nop
 8015680:	7ff00000 	.word	0x7ff00000

08015684 <__ieee754_expf>:
 8015684:	ee10 2a10 	vmov	r2, s0
 8015688:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801568c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015690:	d902      	bls.n	8015698 <__ieee754_expf+0x14>
 8015692:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015696:	4770      	bx	lr
 8015698:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801569c:	d106      	bne.n	80156ac <__ieee754_expf+0x28>
 801569e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80157e4 <__ieee754_expf+0x160>
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	bf18      	it	ne
 80156a6:	eeb0 0a67 	vmovne.f32	s0, s15
 80156aa:	4770      	bx	lr
 80156ac:	484e      	ldr	r0, [pc, #312]	; (80157e8 <__ieee754_expf+0x164>)
 80156ae:	4282      	cmp	r2, r0
 80156b0:	dd04      	ble.n	80156bc <__ieee754_expf+0x38>
 80156b2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80157ec <__ieee754_expf+0x168>
 80156b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80156ba:	4770      	bx	lr
 80156bc:	2a00      	cmp	r2, #0
 80156be:	da03      	bge.n	80156c8 <__ieee754_expf+0x44>
 80156c0:	4a4b      	ldr	r2, [pc, #300]	; (80157f0 <__ieee754_expf+0x16c>)
 80156c2:	4291      	cmp	r1, r2
 80156c4:	f200 808a 	bhi.w	80157dc <__ieee754_expf+0x158>
 80156c8:	4a4a      	ldr	r2, [pc, #296]	; (80157f4 <__ieee754_expf+0x170>)
 80156ca:	4291      	cmp	r1, r2
 80156cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80156d0:	d954      	bls.n	801577c <__ieee754_expf+0xf8>
 80156d2:	4a49      	ldr	r2, [pc, #292]	; (80157f8 <__ieee754_expf+0x174>)
 80156d4:	4291      	cmp	r1, r2
 80156d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80156da:	d836      	bhi.n	801574a <__ieee754_expf+0xc6>
 80156dc:	4947      	ldr	r1, [pc, #284]	; (80157fc <__ieee754_expf+0x178>)
 80156de:	4411      	add	r1, r2
 80156e0:	ed91 7a00 	vldr	s14, [r1]
 80156e4:	4946      	ldr	r1, [pc, #280]	; (8015800 <__ieee754_expf+0x17c>)
 80156e6:	440a      	add	r2, r1
 80156e8:	edd2 7a00 	vldr	s15, [r2]
 80156ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 80156f0:	f1c3 0201 	rsb	r2, r3, #1
 80156f4:	1ad2      	subs	r2, r2, r3
 80156f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80156fa:	ee60 6a00 	vmul.f32	s13, s0, s0
 80156fe:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015804 <__ieee754_expf+0x180>
 8015702:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8015808 <__ieee754_expf+0x184>
 8015706:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801570a:	eddf 5a40 	vldr	s11, [pc, #256]	; 801580c <__ieee754_expf+0x188>
 801570e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015712:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8015810 <__ieee754_expf+0x18c>
 8015716:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801571a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015814 <__ieee754_expf+0x190>
 801571e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015722:	eeb0 5a40 	vmov.f32	s10, s0
 8015726:	eea5 5ae6 	vfms.f32	s10, s11, s13
 801572a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801572e:	eef0 6a45 	vmov.f32	s13, s10
 8015732:	ee20 5a05 	vmul.f32	s10, s0, s10
 8015736:	bb92      	cbnz	r2, 801579e <__ieee754_expf+0x11a>
 8015738:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801573c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8015740:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015744:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015748:	4770      	bx	lr
 801574a:	4b33      	ldr	r3, [pc, #204]	; (8015818 <__ieee754_expf+0x194>)
 801574c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801581c <__ieee754_expf+0x198>
 8015750:	4413      	add	r3, r2
 8015752:	edd3 7a00 	vldr	s15, [r3]
 8015756:	eee0 7a07 	vfma.f32	s15, s0, s14
 801575a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015820 <__ieee754_expf+0x19c>
 801575e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015762:	ee17 2a90 	vmov	r2, s15
 8015766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801576a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801576e:	eeb0 7a40 	vmov.f32	s14, s0
 8015772:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015824 <__ieee754_expf+0x1a0>
 8015776:	ee67 7a80 	vmul.f32	s15, s15, s0
 801577a:	e7bc      	b.n	80156f6 <__ieee754_expf+0x72>
 801577c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8015780:	d20b      	bcs.n	801579a <__ieee754_expf+0x116>
 8015782:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80157ec <__ieee754_expf+0x168>
 8015786:	ee70 6a26 	vadd.f32	s13, s0, s13
 801578a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801578e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015792:	dd02      	ble.n	801579a <__ieee754_expf+0x116>
 8015794:	ee30 0a06 	vadd.f32	s0, s0, s12
 8015798:	4770      	bx	lr
 801579a:	2200      	movs	r2, #0
 801579c:	e7ad      	b.n	80156fa <__ieee754_expf+0x76>
 801579e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80157a2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80157a6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80157aa:	bfb8      	it	lt
 80157ac:	3264      	addlt	r2, #100	; 0x64
 80157ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80157b2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80157b6:	ee76 7a40 	vsub.f32	s15, s12, s0
 80157ba:	ee17 3a90 	vmov	r3, s15
 80157be:	bfab      	itete	ge
 80157c0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80157c4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80157c8:	ee00 3a10 	vmovge	s0, r3
 80157cc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8015828 <__ieee754_expf+0x1a4>
 80157d0:	bfbc      	itt	lt
 80157d2:	ee00 3a10 	vmovlt	s0, r3
 80157d6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80157da:	4770      	bx	lr
 80157dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80157e4 <__ieee754_expf+0x160>
 80157e0:	4770      	bx	lr
 80157e2:	bf00      	nop
 80157e4:	00000000 	.word	0x00000000
 80157e8:	42b17217 	.word	0x42b17217
 80157ec:	7149f2ca 	.word	0x7149f2ca
 80157f0:	42cff1b5 	.word	0x42cff1b5
 80157f4:	3eb17218 	.word	0x3eb17218
 80157f8:	3f851591 	.word	0x3f851591
 80157fc:	08060044 	.word	0x08060044
 8015800:	0806004c 	.word	0x0806004c
 8015804:	3331bb4c 	.word	0x3331bb4c
 8015808:	b5ddea0e 	.word	0xb5ddea0e
 801580c:	388ab355 	.word	0x388ab355
 8015810:	bb360b61 	.word	0xbb360b61
 8015814:	3e2aaaab 	.word	0x3e2aaaab
 8015818:	0806003c 	.word	0x0806003c
 801581c:	3fb8aa3b 	.word	0x3fb8aa3b
 8015820:	3f317180 	.word	0x3f317180
 8015824:	3717f7d1 	.word	0x3717f7d1
 8015828:	0d800000 	.word	0x0d800000

0801582c <__ieee754_logf>:
 801582c:	ee10 3a10 	vmov	r3, s0
 8015830:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015834:	d106      	bne.n	8015844 <__ieee754_logf+0x18>
 8015836:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80159cc <__ieee754_logf+0x1a0>
 801583a:	eddf 7a65 	vldr	s15, [pc, #404]	; 80159d0 <__ieee754_logf+0x1a4>
 801583e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015842:	4770      	bx	lr
 8015844:	2b00      	cmp	r3, #0
 8015846:	da02      	bge.n	801584e <__ieee754_logf+0x22>
 8015848:	ee30 7a40 	vsub.f32	s14, s0, s0
 801584c:	e7f5      	b.n	801583a <__ieee754_logf+0xe>
 801584e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015852:	db02      	blt.n	801585a <__ieee754_logf+0x2e>
 8015854:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015858:	4770      	bx	lr
 801585a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801585e:	bfb8      	it	lt
 8015860:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80159d4 <__ieee754_logf+0x1a8>
 8015864:	485c      	ldr	r0, [pc, #368]	; (80159d8 <__ieee754_logf+0x1ac>)
 8015866:	bfbe      	ittt	lt
 8015868:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801586c:	f06f 0118 	mvnlt.w	r1, #24
 8015870:	ee17 3a90 	vmovlt	r3, s15
 8015874:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8015878:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801587c:	4418      	add	r0, r3
 801587e:	bfa8      	it	ge
 8015880:	2100      	movge	r1, #0
 8015882:	3a7f      	subs	r2, #127	; 0x7f
 8015884:	440a      	add	r2, r1
 8015886:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801588a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801588e:	4319      	orrs	r1, r3
 8015890:	ee00 1a10 	vmov	s0, r1
 8015894:	4951      	ldr	r1, [pc, #324]	; (80159dc <__ieee754_logf+0x1b0>)
 8015896:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801589a:	f103 000f 	add.w	r0, r3, #15
 801589e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80158a2:	4001      	ands	r1, r0
 80158a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80158a8:	bb89      	cbnz	r1, 801590e <__ieee754_logf+0xe2>
 80158aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80158ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158b2:	d10f      	bne.n	80158d4 <__ieee754_logf+0xa8>
 80158b4:	2a00      	cmp	r2, #0
 80158b6:	f000 8085 	beq.w	80159c4 <__ieee754_logf+0x198>
 80158ba:	ee07 2a90 	vmov	s15, r2
 80158be:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80159e0 <__ieee754_logf+0x1b4>
 80158c2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80159e4 <__ieee754_logf+0x1b8>
 80158c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80158ce:	eea7 0a87 	vfma.f32	s0, s15, s14
 80158d2:	4770      	bx	lr
 80158d4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80159e8 <__ieee754_logf+0x1bc>
 80158d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80158dc:	eee0 7a66 	vfms.f32	s15, s0, s13
 80158e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80158e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80158e8:	b912      	cbnz	r2, 80158f0 <__ieee754_logf+0xc4>
 80158ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80158ee:	4770      	bx	lr
 80158f0:	ee07 2a90 	vmov	s15, r2
 80158f4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80159e0 <__ieee754_logf+0x1b4>
 80158f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158fc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8015900:	ee37 0a40 	vsub.f32	s0, s14, s0
 8015904:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80159e4 <__ieee754_logf+0x1b8>
 8015908:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801590c:	4770      	bx	lr
 801590e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015912:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015916:	eddf 5a35 	vldr	s11, [pc, #212]	; 80159ec <__ieee754_logf+0x1c0>
 801591a:	eddf 4a35 	vldr	s9, [pc, #212]	; 80159f0 <__ieee754_logf+0x1c4>
 801591e:	4935      	ldr	r1, [pc, #212]	; (80159f4 <__ieee754_logf+0x1c8>)
 8015920:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8015924:	4419      	add	r1, r3
 8015926:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801592a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801592e:	430b      	orrs	r3, r1
 8015930:	2b00      	cmp	r3, #0
 8015932:	ee07 2a90 	vmov	s15, r2
 8015936:	ee26 5a06 	vmul.f32	s10, s12, s12
 801593a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801593e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8015942:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80159f8 <__ieee754_logf+0x1cc>
 8015946:	eee7 7a25 	vfma.f32	s15, s14, s11
 801594a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80159fc <__ieee754_logf+0x1d0>
 801594e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8015952:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015a00 <__ieee754_logf+0x1d4>
 8015956:	eee7 7a24 	vfma.f32	s15, s14, s9
 801595a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8015a04 <__ieee754_logf+0x1d8>
 801595e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8015962:	eddf 7a29 	vldr	s15, [pc, #164]	; 8015a08 <__ieee754_logf+0x1dc>
 8015966:	eee4 7a87 	vfma.f32	s15, s9, s14
 801596a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801596e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8015972:	dd1c      	ble.n	80159ae <__ieee754_logf+0x182>
 8015974:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015978:	ee20 7a07 	vmul.f32	s14, s0, s14
 801597c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8015980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015984:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015988:	b922      	cbnz	r2, 8015994 <__ieee754_logf+0x168>
 801598a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801598e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015992:	4770      	bx	lr
 8015994:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80159e0 <__ieee754_logf+0x1b4>
 8015998:	eee6 7a86 	vfma.f32	s15, s13, s12
 801599c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80159a4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80159e4 <__ieee754_logf+0x1b8>
 80159a8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80159ac:	4770      	bx	lr
 80159ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 80159b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80159b6:	2a00      	cmp	r2, #0
 80159b8:	d0e9      	beq.n	801598e <__ieee754_logf+0x162>
 80159ba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80159e0 <__ieee754_logf+0x1b4>
 80159be:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80159c2:	e7ed      	b.n	80159a0 <__ieee754_logf+0x174>
 80159c4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80159d0 <__ieee754_logf+0x1a4>
 80159c8:	4770      	bx	lr
 80159ca:	bf00      	nop
 80159cc:	cc000000 	.word	0xcc000000
 80159d0:	00000000 	.word	0x00000000
 80159d4:	4c000000 	.word	0x4c000000
 80159d8:	004afb20 	.word	0x004afb20
 80159dc:	007ffff0 	.word	0x007ffff0
 80159e0:	3717f7d1 	.word	0x3717f7d1
 80159e4:	3f317180 	.word	0x3f317180
 80159e8:	3eaaaaab 	.word	0x3eaaaaab
 80159ec:	3e1cd04f 	.word	0x3e1cd04f
 80159f0:	3e178897 	.word	0x3e178897
 80159f4:	ffcf5c30 	.word	0xffcf5c30
 80159f8:	3e638e29 	.word	0x3e638e29
 80159fc:	3ecccccd 	.word	0x3ecccccd
 8015a00:	3e3a3325 	.word	0x3e3a3325
 8015a04:	3e924925 	.word	0x3e924925
 8015a08:	3f2aaaab 	.word	0x3f2aaaab

08015a0c <__ieee754_log10f>:
 8015a0c:	b508      	push	{r3, lr}
 8015a0e:	ee10 2a10 	vmov	r2, s0
 8015a12:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8015a16:	ed2d 8b02 	vpush	{d8}
 8015a1a:	d108      	bne.n	8015a2e <__ieee754_log10f+0x22>
 8015a1c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8015aa4 <__ieee754_log10f+0x98>
 8015a20:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015aa8 <__ieee754_log10f+0x9c>
 8015a24:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015a28:	ecbd 8b02 	vpop	{d8}
 8015a2c:	bd08      	pop	{r3, pc}
 8015a2e:	2a00      	cmp	r2, #0
 8015a30:	da02      	bge.n	8015a38 <__ieee754_log10f+0x2c>
 8015a32:	ee30 7a40 	vsub.f32	s14, s0, s0
 8015a36:	e7f3      	b.n	8015a20 <__ieee754_log10f+0x14>
 8015a38:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015a3c:	db02      	blt.n	8015a44 <__ieee754_log10f+0x38>
 8015a3e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015a42:	e7f1      	b.n	8015a28 <__ieee754_log10f+0x1c>
 8015a44:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8015a48:	bfbf      	itttt	lt
 8015a4a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8015aac <__ieee754_log10f+0xa0>
 8015a4e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8015a52:	f06f 0118 	mvnlt.w	r1, #24
 8015a56:	ee17 2a90 	vmovlt	r2, s15
 8015a5a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8015a5e:	bfa8      	it	ge
 8015a60:	2100      	movge	r1, #0
 8015a62:	3b7f      	subs	r3, #127	; 0x7f
 8015a64:	440b      	add	r3, r1
 8015a66:	0fd9      	lsrs	r1, r3, #31
 8015a68:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015a6c:	ee07 3a90 	vmov	s15, r3
 8015a70:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015a74:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8015a78:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015a7c:	ee00 3a10 	vmov	s0, r3
 8015a80:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8015a84:	f7ff fed2 	bl	801582c <__ieee754_logf>
 8015a88:	eddf 7a09 	vldr	s15, [pc, #36]	; 8015ab0 <__ieee754_log10f+0xa4>
 8015a8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015a90:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015ab4 <__ieee754_log10f+0xa8>
 8015a94:	eea8 0a27 	vfma.f32	s0, s16, s15
 8015a98:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015ab8 <__ieee754_log10f+0xac>
 8015a9c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8015aa0:	e7c2      	b.n	8015a28 <__ieee754_log10f+0x1c>
 8015aa2:	bf00      	nop
 8015aa4:	cc000000 	.word	0xcc000000
 8015aa8:	00000000 	.word	0x00000000
 8015aac:	4c000000 	.word	0x4c000000
 8015ab0:	3ede5bd9 	.word	0x3ede5bd9
 8015ab4:	355427db 	.word	0x355427db
 8015ab8:	3e9a2080 	.word	0x3e9a2080

08015abc <__ieee754_powf>:
 8015abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac0:	ee10 5a90 	vmov	r5, s1
 8015ac4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8015ac8:	ed2d 8b02 	vpush	{d8}
 8015acc:	eeb0 8a40 	vmov.f32	s16, s0
 8015ad0:	eef0 8a60 	vmov.f32	s17, s1
 8015ad4:	f000 8291 	beq.w	8015ffa <__ieee754_powf+0x53e>
 8015ad8:	ee10 8a10 	vmov	r8, s0
 8015adc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8015ae0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015ae4:	dc06      	bgt.n	8015af4 <__ieee754_powf+0x38>
 8015ae6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015aea:	dd0a      	ble.n	8015b02 <__ieee754_powf+0x46>
 8015aec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015af0:	f000 8283 	beq.w	8015ffa <__ieee754_powf+0x53e>
 8015af4:	ecbd 8b02 	vpop	{d8}
 8015af8:	48d8      	ldr	r0, [pc, #864]	; (8015e5c <__ieee754_powf+0x3a0>)
 8015afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015afe:	f7fb bd97 	b.w	8011630 <nanf>
 8015b02:	f1b8 0f00 	cmp.w	r8, #0
 8015b06:	da1f      	bge.n	8015b48 <__ieee754_powf+0x8c>
 8015b08:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8015b0c:	da2e      	bge.n	8015b6c <__ieee754_powf+0xb0>
 8015b0e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015b12:	f2c0 827b 	blt.w	801600c <__ieee754_powf+0x550>
 8015b16:	15fb      	asrs	r3, r7, #23
 8015b18:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8015b1c:	fa47 f603 	asr.w	r6, r7, r3
 8015b20:	fa06 f303 	lsl.w	r3, r6, r3
 8015b24:	42bb      	cmp	r3, r7
 8015b26:	f040 8271 	bne.w	801600c <__ieee754_powf+0x550>
 8015b2a:	f006 0601 	and.w	r6, r6, #1
 8015b2e:	f1c6 0602 	rsb	r6, r6, #2
 8015b32:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015b36:	d120      	bne.n	8015b7a <__ieee754_powf+0xbe>
 8015b38:	2d00      	cmp	r5, #0
 8015b3a:	f280 8264 	bge.w	8016006 <__ieee754_powf+0x54a>
 8015b3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b42:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015b46:	e00d      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015b48:	2600      	movs	r6, #0
 8015b4a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015b4e:	d1f0      	bne.n	8015b32 <__ieee754_powf+0x76>
 8015b50:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015b54:	f000 8251 	beq.w	8015ffa <__ieee754_powf+0x53e>
 8015b58:	dd0a      	ble.n	8015b70 <__ieee754_powf+0xb4>
 8015b5a:	2d00      	cmp	r5, #0
 8015b5c:	f280 8250 	bge.w	8016000 <__ieee754_powf+0x544>
 8015b60:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8015e60 <__ieee754_powf+0x3a4>
 8015b64:	ecbd 8b02 	vpop	{d8}
 8015b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b6c:	2602      	movs	r6, #2
 8015b6e:	e7ec      	b.n	8015b4a <__ieee754_powf+0x8e>
 8015b70:	2d00      	cmp	r5, #0
 8015b72:	daf5      	bge.n	8015b60 <__ieee754_powf+0xa4>
 8015b74:	eeb1 0a68 	vneg.f32	s0, s17
 8015b78:	e7f4      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015b7a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8015b7e:	d102      	bne.n	8015b86 <__ieee754_powf+0xca>
 8015b80:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015b84:	e7ee      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015b86:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8015b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8015b8e:	d108      	bne.n	8015ba2 <__ieee754_powf+0xe6>
 8015b90:	f1b8 0f00 	cmp.w	r8, #0
 8015b94:	db05      	blt.n	8015ba2 <__ieee754_powf+0xe6>
 8015b96:	ecbd 8b02 	vpop	{d8}
 8015b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b9e:	f000 ba4d 	b.w	801603c <__ieee754_sqrtf>
 8015ba2:	f7ff f8e5 	bl	8014d70 <fabsf>
 8015ba6:	b124      	cbz	r4, 8015bb2 <__ieee754_powf+0xf6>
 8015ba8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8015bac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015bb0:	d117      	bne.n	8015be2 <__ieee754_powf+0x126>
 8015bb2:	2d00      	cmp	r5, #0
 8015bb4:	bfbc      	itt	lt
 8015bb6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8015bba:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8015bbe:	f1b8 0f00 	cmp.w	r8, #0
 8015bc2:	dacf      	bge.n	8015b64 <__ieee754_powf+0xa8>
 8015bc4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8015bc8:	ea54 0306 	orrs.w	r3, r4, r6
 8015bcc:	d104      	bne.n	8015bd8 <__ieee754_powf+0x11c>
 8015bce:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015bd2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015bd6:	e7c5      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015bd8:	2e01      	cmp	r6, #1
 8015bda:	d1c3      	bne.n	8015b64 <__ieee754_powf+0xa8>
 8015bdc:	eeb1 0a40 	vneg.f32	s0, s0
 8015be0:	e7c0      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015be2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8015be6:	3801      	subs	r0, #1
 8015be8:	ea56 0300 	orrs.w	r3, r6, r0
 8015bec:	d104      	bne.n	8015bf8 <__ieee754_powf+0x13c>
 8015bee:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015bf2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015bf6:	e7b5      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015bf8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8015bfc:	dd6b      	ble.n	8015cd6 <__ieee754_powf+0x21a>
 8015bfe:	4b99      	ldr	r3, [pc, #612]	; (8015e64 <__ieee754_powf+0x3a8>)
 8015c00:	429c      	cmp	r4, r3
 8015c02:	dc06      	bgt.n	8015c12 <__ieee754_powf+0x156>
 8015c04:	2d00      	cmp	r5, #0
 8015c06:	daab      	bge.n	8015b60 <__ieee754_powf+0xa4>
 8015c08:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015e68 <__ieee754_powf+0x3ac>
 8015c0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015c10:	e7a8      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015c12:	4b96      	ldr	r3, [pc, #600]	; (8015e6c <__ieee754_powf+0x3b0>)
 8015c14:	429c      	cmp	r4, r3
 8015c16:	dd02      	ble.n	8015c1e <__ieee754_powf+0x162>
 8015c18:	2d00      	cmp	r5, #0
 8015c1a:	dcf5      	bgt.n	8015c08 <__ieee754_powf+0x14c>
 8015c1c:	e7a0      	b.n	8015b60 <__ieee754_powf+0xa4>
 8015c1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015c22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015c26:	eddf 6a92 	vldr	s13, [pc, #584]	; 8015e70 <__ieee754_powf+0x3b4>
 8015c2a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015c2e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8015c32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015c36:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8015c3a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015c42:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8015e74 <__ieee754_powf+0x3b8>
 8015c46:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8015c4a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8015e78 <__ieee754_powf+0x3bc>
 8015c4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015c52:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8015e7c <__ieee754_powf+0x3c0>
 8015c56:	eef0 6a67 	vmov.f32	s13, s15
 8015c5a:	eee0 6a07 	vfma.f32	s13, s0, s14
 8015c5e:	ee16 3a90 	vmov	r3, s13
 8015c62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015c66:	f023 030f 	bic.w	r3, r3, #15
 8015c6a:	ee00 3a90 	vmov	s1, r3
 8015c6e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8015c72:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015c76:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8015c7a:	f025 050f 	bic.w	r5, r5, #15
 8015c7e:	ee07 5a10 	vmov	s14, r5
 8015c82:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8015c86:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8015c8a:	ee07 3a90 	vmov	s15, r3
 8015c8e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8015c92:	3e01      	subs	r6, #1
 8015c94:	ea56 0200 	orrs.w	r2, r6, r0
 8015c98:	ee07 5a10 	vmov	s14, r5
 8015c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015ca0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015ca4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8015ca8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015cac:	ee17 4a10 	vmov	r4, s14
 8015cb0:	bf08      	it	eq
 8015cb2:	eeb0 8a40 	vmoveq.f32	s16, s0
 8015cb6:	2c00      	cmp	r4, #0
 8015cb8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015cbc:	f340 8184 	ble.w	8015fc8 <__ieee754_powf+0x50c>
 8015cc0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015cc4:	f340 80fc 	ble.w	8015ec0 <__ieee754_powf+0x404>
 8015cc8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8015e68 <__ieee754_powf+0x3ac>
 8015ccc:	ee28 0a27 	vmul.f32	s0, s16, s15
 8015cd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015cd4:	e746      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015cd6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8015cda:	bf01      	itttt	eq
 8015cdc:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8015e80 <__ieee754_powf+0x3c4>
 8015ce0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8015ce4:	f06f 0217 	mvneq.w	r2, #23
 8015ce8:	ee17 4a90 	vmoveq	r4, s15
 8015cec:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8015cf0:	bf18      	it	ne
 8015cf2:	2200      	movne	r2, #0
 8015cf4:	3b7f      	subs	r3, #127	; 0x7f
 8015cf6:	4413      	add	r3, r2
 8015cf8:	4a62      	ldr	r2, [pc, #392]	; (8015e84 <__ieee754_powf+0x3c8>)
 8015cfa:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8015cfe:	4294      	cmp	r4, r2
 8015d00:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8015d04:	dd06      	ble.n	8015d14 <__ieee754_powf+0x258>
 8015d06:	4a60      	ldr	r2, [pc, #384]	; (8015e88 <__ieee754_powf+0x3cc>)
 8015d08:	4294      	cmp	r4, r2
 8015d0a:	f340 80a4 	ble.w	8015e56 <__ieee754_powf+0x39a>
 8015d0e:	3301      	adds	r3, #1
 8015d10:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8015d14:	2400      	movs	r4, #0
 8015d16:	4a5d      	ldr	r2, [pc, #372]	; (8015e8c <__ieee754_powf+0x3d0>)
 8015d18:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8015d1c:	ee07 1a90 	vmov	s15, r1
 8015d20:	ed92 7a00 	vldr	s14, [r2]
 8015d24:	4a5a      	ldr	r2, [pc, #360]	; (8015e90 <__ieee754_powf+0x3d4>)
 8015d26:	ee37 6a27 	vadd.f32	s12, s14, s15
 8015d2a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015d2e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8015d32:	1049      	asrs	r1, r1, #1
 8015d34:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8015d38:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8015d3c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8015d40:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8015d44:	ee06 1a10 	vmov	s12, r1
 8015d48:	ee65 4a26 	vmul.f32	s9, s10, s13
 8015d4c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8015d50:	ee14 7a90 	vmov	r7, s9
 8015d54:	4017      	ands	r7, r2
 8015d56:	ee05 7a90 	vmov	s11, r7
 8015d5a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8015d5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d62:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8015e94 <__ieee754_powf+0x3d8>
 8015d66:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8015d6a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8015d6e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8015d72:	eddf 6a49 	vldr	s13, [pc, #292]	; 8015e98 <__ieee754_powf+0x3dc>
 8015d76:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015d7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8015e9c <__ieee754_powf+0x3e0>
 8015d7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015d82:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8015e70 <__ieee754_powf+0x3b4>
 8015d86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015d8a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8015ea0 <__ieee754_powf+0x3e4>
 8015d8e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015d92:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015ea4 <__ieee754_powf+0x3e8>
 8015d96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015d9a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8015d9e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8015da2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015da6:	eee5 6a07 	vfma.f32	s13, s10, s14
 8015daa:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8015dae:	eef0 7a45 	vmov.f32	s15, s10
 8015db2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015dba:	ee17 1a90 	vmov	r1, s15
 8015dbe:	4011      	ands	r1, r2
 8015dc0:	ee07 1a90 	vmov	s15, r1
 8015dc4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8015dc8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8015dcc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015dd0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015dd4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015dd8:	eeb0 6a47 	vmov.f32	s12, s14
 8015ddc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015de0:	ee16 1a10 	vmov	r1, s12
 8015de4:	4011      	ands	r1, r2
 8015de6:	ee06 1a90 	vmov	s13, r1
 8015dea:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8015dee:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8015ea8 <__ieee754_powf+0x3ec>
 8015df2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8015eac <__ieee754_powf+0x3f0>
 8015df6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015dfa:	ee06 1a10 	vmov	s12, r1
 8015dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015eb0 <__ieee754_powf+0x3f4>
 8015e06:	492b      	ldr	r1, [pc, #172]	; (8015eb4 <__ieee754_powf+0x3f8>)
 8015e08:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015e0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015e10:	edd1 7a00 	vldr	s15, [r1]
 8015e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015e18:	ee07 3a90 	vmov	s15, r3
 8015e1c:	4b26      	ldr	r3, [pc, #152]	; (8015eb8 <__ieee754_powf+0x3fc>)
 8015e1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015e22:	eef0 7a47 	vmov.f32	s15, s14
 8015e26:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015e2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015e2e:	edd4 0a00 	vldr	s1, [r4]
 8015e32:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015e3a:	ee17 3a90 	vmov	r3, s15
 8015e3e:	4013      	ands	r3, r2
 8015e40:	ee07 3a90 	vmov	s15, r3
 8015e44:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015e48:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8015e4c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8015e50:	ee77 7a66 	vsub.f32	s15, s14, s13
 8015e54:	e70f      	b.n	8015c76 <__ieee754_powf+0x1ba>
 8015e56:	2401      	movs	r4, #1
 8015e58:	e75d      	b.n	8015d16 <__ieee754_powf+0x25a>
 8015e5a:	bf00      	nop
 8015e5c:	0805fa3f 	.word	0x0805fa3f
 8015e60:	00000000 	.word	0x00000000
 8015e64:	3f7ffff7 	.word	0x3f7ffff7
 8015e68:	7149f2ca 	.word	0x7149f2ca
 8015e6c:	3f800007 	.word	0x3f800007
 8015e70:	3eaaaaab 	.word	0x3eaaaaab
 8015e74:	3fb8aa3b 	.word	0x3fb8aa3b
 8015e78:	36eca570 	.word	0x36eca570
 8015e7c:	3fb8aa00 	.word	0x3fb8aa00
 8015e80:	4b800000 	.word	0x4b800000
 8015e84:	001cc471 	.word	0x001cc471
 8015e88:	005db3d6 	.word	0x005db3d6
 8015e8c:	08060054 	.word	0x08060054
 8015e90:	fffff000 	.word	0xfffff000
 8015e94:	3e6c3255 	.word	0x3e6c3255
 8015e98:	3e53f142 	.word	0x3e53f142
 8015e9c:	3e8ba305 	.word	0x3e8ba305
 8015ea0:	3edb6db7 	.word	0x3edb6db7
 8015ea4:	3f19999a 	.word	0x3f19999a
 8015ea8:	3f76384f 	.word	0x3f76384f
 8015eac:	3f763800 	.word	0x3f763800
 8015eb0:	369dc3a0 	.word	0x369dc3a0
 8015eb4:	08060064 	.word	0x08060064
 8015eb8:	0806005c 	.word	0x0806005c
 8015ebc:	3338aa3c 	.word	0x3338aa3c
 8015ec0:	f040 8092 	bne.w	8015fe8 <__ieee754_powf+0x52c>
 8015ec4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8015ebc <__ieee754_powf+0x400>
 8015ec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015ecc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8015ed0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed8:	f73f aef6 	bgt.w	8015cc8 <__ieee754_powf+0x20c>
 8015edc:	15db      	asrs	r3, r3, #23
 8015ede:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8015ee2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015ee6:	4103      	asrs	r3, r0
 8015ee8:	4423      	add	r3, r4
 8015eea:	4949      	ldr	r1, [pc, #292]	; (8016010 <__ieee754_powf+0x554>)
 8015eec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015ef0:	3a7f      	subs	r2, #127	; 0x7f
 8015ef2:	4111      	asrs	r1, r2
 8015ef4:	ea23 0101 	bic.w	r1, r3, r1
 8015ef8:	ee07 1a10 	vmov	s14, r1
 8015efc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015f04:	f1c2 0217 	rsb	r2, r2, #23
 8015f08:	4110      	asrs	r0, r2
 8015f0a:	2c00      	cmp	r4, #0
 8015f0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015f10:	bfb8      	it	lt
 8015f12:	4240      	neglt	r0, r0
 8015f14:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8015f18:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8016014 <__ieee754_powf+0x558>
 8015f1c:	ee17 3a10 	vmov	r3, s14
 8015f20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015f24:	f023 030f 	bic.w	r3, r3, #15
 8015f28:	ee07 3a10 	vmov	s14, r3
 8015f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015f30:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015f34:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016018 <__ieee754_powf+0x55c>
 8015f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f3c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8015f40:	eddf 6a36 	vldr	s13, [pc, #216]	; 801601c <__ieee754_powf+0x560>
 8015f44:	eeb0 0a67 	vmov.f32	s0, s15
 8015f48:	eea7 0a26 	vfma.f32	s0, s14, s13
 8015f4c:	eeb0 6a40 	vmov.f32	s12, s0
 8015f50:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015f54:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015f58:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015f5c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8016020 <__ieee754_powf+0x564>
 8015f60:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8016024 <__ieee754_powf+0x568>
 8015f64:	eea7 6a26 	vfma.f32	s12, s14, s13
 8015f68:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8016028 <__ieee754_powf+0x56c>
 8015f6c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015f70:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801602c <__ieee754_powf+0x570>
 8015f74:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015f78:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8016030 <__ieee754_powf+0x574>
 8015f7c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015f80:	eeb0 6a40 	vmov.f32	s12, s0
 8015f84:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8015f88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015f8c:	eeb0 7a46 	vmov.f32	s14, s12
 8015f90:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015f94:	ee20 6a06 	vmul.f32	s12, s0, s12
 8015f98:	eee0 7a27 	vfma.f32	s15, s0, s15
 8015f9c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fa4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015fa8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015fac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015fb0:	ee10 3a10 	vmov	r3, s0
 8015fb4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015fbc:	da1a      	bge.n	8015ff4 <__ieee754_powf+0x538>
 8015fbe:	f000 fe83 	bl	8016cc8 <scalbnf>
 8015fc2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015fc6:	e5cd      	b.n	8015b64 <__ieee754_powf+0xa8>
 8015fc8:	4a1a      	ldr	r2, [pc, #104]	; (8016034 <__ieee754_powf+0x578>)
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	dd02      	ble.n	8015fd4 <__ieee754_powf+0x518>
 8015fce:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8016038 <__ieee754_powf+0x57c>
 8015fd2:	e67b      	b.n	8015ccc <__ieee754_powf+0x210>
 8015fd4:	d108      	bne.n	8015fe8 <__ieee754_powf+0x52c>
 8015fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015fda:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8015fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe2:	f6ff af7b 	blt.w	8015edc <__ieee754_powf+0x420>
 8015fe6:	e7f2      	b.n	8015fce <__ieee754_powf+0x512>
 8015fe8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8015fec:	f73f af76 	bgt.w	8015edc <__ieee754_powf+0x420>
 8015ff0:	2000      	movs	r0, #0
 8015ff2:	e78f      	b.n	8015f14 <__ieee754_powf+0x458>
 8015ff4:	ee00 3a10 	vmov	s0, r3
 8015ff8:	e7e3      	b.n	8015fc2 <__ieee754_powf+0x506>
 8015ffa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015ffe:	e5b1      	b.n	8015b64 <__ieee754_powf+0xa8>
 8016000:	eeb0 0a68 	vmov.f32	s0, s17
 8016004:	e5ae      	b.n	8015b64 <__ieee754_powf+0xa8>
 8016006:	eeb0 0a48 	vmov.f32	s0, s16
 801600a:	e5ab      	b.n	8015b64 <__ieee754_powf+0xa8>
 801600c:	2600      	movs	r6, #0
 801600e:	e590      	b.n	8015b32 <__ieee754_powf+0x76>
 8016010:	007fffff 	.word	0x007fffff
 8016014:	3f317218 	.word	0x3f317218
 8016018:	35bfbe8c 	.word	0x35bfbe8c
 801601c:	3f317200 	.word	0x3f317200
 8016020:	3331bb4c 	.word	0x3331bb4c
 8016024:	b5ddea0e 	.word	0xb5ddea0e
 8016028:	388ab355 	.word	0x388ab355
 801602c:	bb360b61 	.word	0xbb360b61
 8016030:	3e2aaaab 	.word	0x3e2aaaab
 8016034:	43160000 	.word	0x43160000
 8016038:	0da24260 	.word	0x0da24260

0801603c <__ieee754_sqrtf>:
 801603c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016040:	4770      	bx	lr
 8016042:	0000      	movs	r0, r0
 8016044:	0000      	movs	r0, r0
	...

08016048 <__kernel_cos>:
 8016048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801604c:	ec57 6b10 	vmov	r6, r7, d0
 8016050:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8016054:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8016058:	ed8d 1b00 	vstr	d1, [sp]
 801605c:	da07      	bge.n	801606e <__kernel_cos+0x26>
 801605e:	ee10 0a10 	vmov	r0, s0
 8016062:	4639      	mov	r1, r7
 8016064:	f7ea fd88 	bl	8000b78 <__aeabi_d2iz>
 8016068:	2800      	cmp	r0, #0
 801606a:	f000 8088 	beq.w	801617e <__kernel_cos+0x136>
 801606e:	4632      	mov	r2, r6
 8016070:	463b      	mov	r3, r7
 8016072:	4630      	mov	r0, r6
 8016074:	4639      	mov	r1, r7
 8016076:	f7ea facf 	bl	8000618 <__aeabi_dmul>
 801607a:	4b51      	ldr	r3, [pc, #324]	; (80161c0 <__kernel_cos+0x178>)
 801607c:	2200      	movs	r2, #0
 801607e:	4604      	mov	r4, r0
 8016080:	460d      	mov	r5, r1
 8016082:	f7ea fac9 	bl	8000618 <__aeabi_dmul>
 8016086:	a340      	add	r3, pc, #256	; (adr r3, 8016188 <__kernel_cos+0x140>)
 8016088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608c:	4682      	mov	sl, r0
 801608e:	468b      	mov	fp, r1
 8016090:	4620      	mov	r0, r4
 8016092:	4629      	mov	r1, r5
 8016094:	f7ea fac0 	bl	8000618 <__aeabi_dmul>
 8016098:	a33d      	add	r3, pc, #244	; (adr r3, 8016190 <__kernel_cos+0x148>)
 801609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801609e:	f7ea f905 	bl	80002ac <__adddf3>
 80160a2:	4622      	mov	r2, r4
 80160a4:	462b      	mov	r3, r5
 80160a6:	f7ea fab7 	bl	8000618 <__aeabi_dmul>
 80160aa:	a33b      	add	r3, pc, #236	; (adr r3, 8016198 <__kernel_cos+0x150>)
 80160ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b0:	f7ea f8fa 	bl	80002a8 <__aeabi_dsub>
 80160b4:	4622      	mov	r2, r4
 80160b6:	462b      	mov	r3, r5
 80160b8:	f7ea faae 	bl	8000618 <__aeabi_dmul>
 80160bc:	a338      	add	r3, pc, #224	; (adr r3, 80161a0 <__kernel_cos+0x158>)
 80160be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c2:	f7ea f8f3 	bl	80002ac <__adddf3>
 80160c6:	4622      	mov	r2, r4
 80160c8:	462b      	mov	r3, r5
 80160ca:	f7ea faa5 	bl	8000618 <__aeabi_dmul>
 80160ce:	a336      	add	r3, pc, #216	; (adr r3, 80161a8 <__kernel_cos+0x160>)
 80160d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d4:	f7ea f8e8 	bl	80002a8 <__aeabi_dsub>
 80160d8:	4622      	mov	r2, r4
 80160da:	462b      	mov	r3, r5
 80160dc:	f7ea fa9c 	bl	8000618 <__aeabi_dmul>
 80160e0:	a333      	add	r3, pc, #204	; (adr r3, 80161b0 <__kernel_cos+0x168>)
 80160e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e6:	f7ea f8e1 	bl	80002ac <__adddf3>
 80160ea:	4622      	mov	r2, r4
 80160ec:	462b      	mov	r3, r5
 80160ee:	f7ea fa93 	bl	8000618 <__aeabi_dmul>
 80160f2:	4622      	mov	r2, r4
 80160f4:	462b      	mov	r3, r5
 80160f6:	f7ea fa8f 	bl	8000618 <__aeabi_dmul>
 80160fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80160fe:	4604      	mov	r4, r0
 8016100:	460d      	mov	r5, r1
 8016102:	4630      	mov	r0, r6
 8016104:	4639      	mov	r1, r7
 8016106:	f7ea fa87 	bl	8000618 <__aeabi_dmul>
 801610a:	460b      	mov	r3, r1
 801610c:	4602      	mov	r2, r0
 801610e:	4629      	mov	r1, r5
 8016110:	4620      	mov	r0, r4
 8016112:	f7ea f8c9 	bl	80002a8 <__aeabi_dsub>
 8016116:	4b2b      	ldr	r3, [pc, #172]	; (80161c4 <__kernel_cos+0x17c>)
 8016118:	4598      	cmp	r8, r3
 801611a:	4606      	mov	r6, r0
 801611c:	460f      	mov	r7, r1
 801611e:	dc10      	bgt.n	8016142 <__kernel_cos+0xfa>
 8016120:	4602      	mov	r2, r0
 8016122:	460b      	mov	r3, r1
 8016124:	4650      	mov	r0, sl
 8016126:	4659      	mov	r1, fp
 8016128:	f7ea f8be 	bl	80002a8 <__aeabi_dsub>
 801612c:	460b      	mov	r3, r1
 801612e:	4926      	ldr	r1, [pc, #152]	; (80161c8 <__kernel_cos+0x180>)
 8016130:	4602      	mov	r2, r0
 8016132:	2000      	movs	r0, #0
 8016134:	f7ea f8b8 	bl	80002a8 <__aeabi_dsub>
 8016138:	ec41 0b10 	vmov	d0, r0, r1
 801613c:	b003      	add	sp, #12
 801613e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016142:	4b22      	ldr	r3, [pc, #136]	; (80161cc <__kernel_cos+0x184>)
 8016144:	4920      	ldr	r1, [pc, #128]	; (80161c8 <__kernel_cos+0x180>)
 8016146:	4598      	cmp	r8, r3
 8016148:	bfcc      	ite	gt
 801614a:	4d21      	ldrgt	r5, [pc, #132]	; (80161d0 <__kernel_cos+0x188>)
 801614c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8016150:	2400      	movs	r4, #0
 8016152:	4622      	mov	r2, r4
 8016154:	462b      	mov	r3, r5
 8016156:	2000      	movs	r0, #0
 8016158:	f7ea f8a6 	bl	80002a8 <__aeabi_dsub>
 801615c:	4622      	mov	r2, r4
 801615e:	4680      	mov	r8, r0
 8016160:	4689      	mov	r9, r1
 8016162:	462b      	mov	r3, r5
 8016164:	4650      	mov	r0, sl
 8016166:	4659      	mov	r1, fp
 8016168:	f7ea f89e 	bl	80002a8 <__aeabi_dsub>
 801616c:	4632      	mov	r2, r6
 801616e:	463b      	mov	r3, r7
 8016170:	f7ea f89a 	bl	80002a8 <__aeabi_dsub>
 8016174:	4602      	mov	r2, r0
 8016176:	460b      	mov	r3, r1
 8016178:	4640      	mov	r0, r8
 801617a:	4649      	mov	r1, r9
 801617c:	e7da      	b.n	8016134 <__kernel_cos+0xec>
 801617e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80161b8 <__kernel_cos+0x170>
 8016182:	e7db      	b.n	801613c <__kernel_cos+0xf4>
 8016184:	f3af 8000 	nop.w
 8016188:	be8838d4 	.word	0xbe8838d4
 801618c:	bda8fae9 	.word	0xbda8fae9
 8016190:	bdb4b1c4 	.word	0xbdb4b1c4
 8016194:	3e21ee9e 	.word	0x3e21ee9e
 8016198:	809c52ad 	.word	0x809c52ad
 801619c:	3e927e4f 	.word	0x3e927e4f
 80161a0:	19cb1590 	.word	0x19cb1590
 80161a4:	3efa01a0 	.word	0x3efa01a0
 80161a8:	16c15177 	.word	0x16c15177
 80161ac:	3f56c16c 	.word	0x3f56c16c
 80161b0:	5555554c 	.word	0x5555554c
 80161b4:	3fa55555 	.word	0x3fa55555
 80161b8:	00000000 	.word	0x00000000
 80161bc:	3ff00000 	.word	0x3ff00000
 80161c0:	3fe00000 	.word	0x3fe00000
 80161c4:	3fd33332 	.word	0x3fd33332
 80161c8:	3ff00000 	.word	0x3ff00000
 80161cc:	3fe90000 	.word	0x3fe90000
 80161d0:	3fd20000 	.word	0x3fd20000
 80161d4:	00000000 	.word	0x00000000

080161d8 <__kernel_rem_pio2>:
 80161d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161dc:	ed2d 8b02 	vpush	{d8}
 80161e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80161e4:	f112 0f14 	cmn.w	r2, #20
 80161e8:	9308      	str	r3, [sp, #32]
 80161ea:	9101      	str	r1, [sp, #4]
 80161ec:	4bc6      	ldr	r3, [pc, #792]	; (8016508 <__kernel_rem_pio2+0x330>)
 80161ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80161f0:	9009      	str	r0, [sp, #36]	; 0x24
 80161f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80161f6:	9304      	str	r3, [sp, #16]
 80161f8:	9b08      	ldr	r3, [sp, #32]
 80161fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80161fe:	bfa8      	it	ge
 8016200:	1ed4      	subge	r4, r2, #3
 8016202:	9306      	str	r3, [sp, #24]
 8016204:	bfb2      	itee	lt
 8016206:	2400      	movlt	r4, #0
 8016208:	2318      	movge	r3, #24
 801620a:	fb94 f4f3 	sdivge	r4, r4, r3
 801620e:	f06f 0317 	mvn.w	r3, #23
 8016212:	fb04 3303 	mla	r3, r4, r3, r3
 8016216:	eb03 0a02 	add.w	sl, r3, r2
 801621a:	9b04      	ldr	r3, [sp, #16]
 801621c:	9a06      	ldr	r2, [sp, #24]
 801621e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80164f8 <__kernel_rem_pio2+0x320>
 8016222:	eb03 0802 	add.w	r8, r3, r2
 8016226:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016228:	1aa7      	subs	r7, r4, r2
 801622a:	ae20      	add	r6, sp, #128	; 0x80
 801622c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016230:	2500      	movs	r5, #0
 8016232:	4545      	cmp	r5, r8
 8016234:	dd18      	ble.n	8016268 <__kernel_rem_pio2+0x90>
 8016236:	9b08      	ldr	r3, [sp, #32]
 8016238:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801623c:	aa20      	add	r2, sp, #128	; 0x80
 801623e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80164f8 <__kernel_rem_pio2+0x320>
 8016242:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8016246:	f1c3 0301 	rsb	r3, r3, #1
 801624a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801624e:	9307      	str	r3, [sp, #28]
 8016250:	9b07      	ldr	r3, [sp, #28]
 8016252:	9a04      	ldr	r2, [sp, #16]
 8016254:	4443      	add	r3, r8
 8016256:	429a      	cmp	r2, r3
 8016258:	db2f      	blt.n	80162ba <__kernel_rem_pio2+0xe2>
 801625a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801625e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016262:	462f      	mov	r7, r5
 8016264:	2600      	movs	r6, #0
 8016266:	e01b      	b.n	80162a0 <__kernel_rem_pio2+0xc8>
 8016268:	42ef      	cmn	r7, r5
 801626a:	d407      	bmi.n	801627c <__kernel_rem_pio2+0xa4>
 801626c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016270:	f7ea f968 	bl	8000544 <__aeabi_i2d>
 8016274:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016278:	3501      	adds	r5, #1
 801627a:	e7da      	b.n	8016232 <__kernel_rem_pio2+0x5a>
 801627c:	ec51 0b18 	vmov	r0, r1, d8
 8016280:	e7f8      	b.n	8016274 <__kernel_rem_pio2+0x9c>
 8016282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016286:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801628a:	f7ea f9c5 	bl	8000618 <__aeabi_dmul>
 801628e:	4602      	mov	r2, r0
 8016290:	460b      	mov	r3, r1
 8016292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016296:	f7ea f809 	bl	80002ac <__adddf3>
 801629a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801629e:	3601      	adds	r6, #1
 80162a0:	9b06      	ldr	r3, [sp, #24]
 80162a2:	429e      	cmp	r6, r3
 80162a4:	f1a7 0708 	sub.w	r7, r7, #8
 80162a8:	ddeb      	ble.n	8016282 <__kernel_rem_pio2+0xaa>
 80162aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80162ae:	3508      	adds	r5, #8
 80162b0:	ecab 7b02 	vstmia	fp!, {d7}
 80162b4:	f108 0801 	add.w	r8, r8, #1
 80162b8:	e7ca      	b.n	8016250 <__kernel_rem_pio2+0x78>
 80162ba:	9b04      	ldr	r3, [sp, #16]
 80162bc:	aa0c      	add	r2, sp, #48	; 0x30
 80162be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80162c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80162c4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80162c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80162ca:	9c04      	ldr	r4, [sp, #16]
 80162cc:	930a      	str	r3, [sp, #40]	; 0x28
 80162ce:	ab98      	add	r3, sp, #608	; 0x260
 80162d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80162d4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80162d8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80162dc:	f8cd b008 	str.w	fp, [sp, #8]
 80162e0:	4625      	mov	r5, r4
 80162e2:	2d00      	cmp	r5, #0
 80162e4:	dc78      	bgt.n	80163d8 <__kernel_rem_pio2+0x200>
 80162e6:	ec47 6b10 	vmov	d0, r6, r7
 80162ea:	4650      	mov	r0, sl
 80162ec:	f000 fbfc 	bl	8016ae8 <scalbn>
 80162f0:	ec57 6b10 	vmov	r6, r7, d0
 80162f4:	2200      	movs	r2, #0
 80162f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80162fa:	ee10 0a10 	vmov	r0, s0
 80162fe:	4639      	mov	r1, r7
 8016300:	f7ea f98a 	bl	8000618 <__aeabi_dmul>
 8016304:	ec41 0b10 	vmov	d0, r0, r1
 8016308:	f000 fb6e 	bl	80169e8 <floor>
 801630c:	4b7f      	ldr	r3, [pc, #508]	; (801650c <__kernel_rem_pio2+0x334>)
 801630e:	ec51 0b10 	vmov	r0, r1, d0
 8016312:	2200      	movs	r2, #0
 8016314:	f7ea f980 	bl	8000618 <__aeabi_dmul>
 8016318:	4602      	mov	r2, r0
 801631a:	460b      	mov	r3, r1
 801631c:	4630      	mov	r0, r6
 801631e:	4639      	mov	r1, r7
 8016320:	f7e9 ffc2 	bl	80002a8 <__aeabi_dsub>
 8016324:	460f      	mov	r7, r1
 8016326:	4606      	mov	r6, r0
 8016328:	f7ea fc26 	bl	8000b78 <__aeabi_d2iz>
 801632c:	9007      	str	r0, [sp, #28]
 801632e:	f7ea f909 	bl	8000544 <__aeabi_i2d>
 8016332:	4602      	mov	r2, r0
 8016334:	460b      	mov	r3, r1
 8016336:	4630      	mov	r0, r6
 8016338:	4639      	mov	r1, r7
 801633a:	f7e9 ffb5 	bl	80002a8 <__aeabi_dsub>
 801633e:	f1ba 0f00 	cmp.w	sl, #0
 8016342:	4606      	mov	r6, r0
 8016344:	460f      	mov	r7, r1
 8016346:	dd70      	ble.n	801642a <__kernel_rem_pio2+0x252>
 8016348:	1e62      	subs	r2, r4, #1
 801634a:	ab0c      	add	r3, sp, #48	; 0x30
 801634c:	9d07      	ldr	r5, [sp, #28]
 801634e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016352:	f1ca 0118 	rsb	r1, sl, #24
 8016356:	fa40 f301 	asr.w	r3, r0, r1
 801635a:	441d      	add	r5, r3
 801635c:	408b      	lsls	r3, r1
 801635e:	1ac0      	subs	r0, r0, r3
 8016360:	ab0c      	add	r3, sp, #48	; 0x30
 8016362:	9507      	str	r5, [sp, #28]
 8016364:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016368:	f1ca 0317 	rsb	r3, sl, #23
 801636c:	fa40 f303 	asr.w	r3, r0, r3
 8016370:	9302      	str	r3, [sp, #8]
 8016372:	9b02      	ldr	r3, [sp, #8]
 8016374:	2b00      	cmp	r3, #0
 8016376:	dd66      	ble.n	8016446 <__kernel_rem_pio2+0x26e>
 8016378:	9b07      	ldr	r3, [sp, #28]
 801637a:	2200      	movs	r2, #0
 801637c:	3301      	adds	r3, #1
 801637e:	9307      	str	r3, [sp, #28]
 8016380:	4615      	mov	r5, r2
 8016382:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016386:	4294      	cmp	r4, r2
 8016388:	f300 8099 	bgt.w	80164be <__kernel_rem_pio2+0x2e6>
 801638c:	f1ba 0f00 	cmp.w	sl, #0
 8016390:	dd07      	ble.n	80163a2 <__kernel_rem_pio2+0x1ca>
 8016392:	f1ba 0f01 	cmp.w	sl, #1
 8016396:	f000 80a5 	beq.w	80164e4 <__kernel_rem_pio2+0x30c>
 801639a:	f1ba 0f02 	cmp.w	sl, #2
 801639e:	f000 80c1 	beq.w	8016524 <__kernel_rem_pio2+0x34c>
 80163a2:	9b02      	ldr	r3, [sp, #8]
 80163a4:	2b02      	cmp	r3, #2
 80163a6:	d14e      	bne.n	8016446 <__kernel_rem_pio2+0x26e>
 80163a8:	4632      	mov	r2, r6
 80163aa:	463b      	mov	r3, r7
 80163ac:	4958      	ldr	r1, [pc, #352]	; (8016510 <__kernel_rem_pio2+0x338>)
 80163ae:	2000      	movs	r0, #0
 80163b0:	f7e9 ff7a 	bl	80002a8 <__aeabi_dsub>
 80163b4:	4606      	mov	r6, r0
 80163b6:	460f      	mov	r7, r1
 80163b8:	2d00      	cmp	r5, #0
 80163ba:	d044      	beq.n	8016446 <__kernel_rem_pio2+0x26e>
 80163bc:	4650      	mov	r0, sl
 80163be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8016500 <__kernel_rem_pio2+0x328>
 80163c2:	f000 fb91 	bl	8016ae8 <scalbn>
 80163c6:	4630      	mov	r0, r6
 80163c8:	4639      	mov	r1, r7
 80163ca:	ec53 2b10 	vmov	r2, r3, d0
 80163ce:	f7e9 ff6b 	bl	80002a8 <__aeabi_dsub>
 80163d2:	4606      	mov	r6, r0
 80163d4:	460f      	mov	r7, r1
 80163d6:	e036      	b.n	8016446 <__kernel_rem_pio2+0x26e>
 80163d8:	4b4e      	ldr	r3, [pc, #312]	; (8016514 <__kernel_rem_pio2+0x33c>)
 80163da:	2200      	movs	r2, #0
 80163dc:	4630      	mov	r0, r6
 80163de:	4639      	mov	r1, r7
 80163e0:	f7ea f91a 	bl	8000618 <__aeabi_dmul>
 80163e4:	f7ea fbc8 	bl	8000b78 <__aeabi_d2iz>
 80163e8:	f7ea f8ac 	bl	8000544 <__aeabi_i2d>
 80163ec:	4b4a      	ldr	r3, [pc, #296]	; (8016518 <__kernel_rem_pio2+0x340>)
 80163ee:	2200      	movs	r2, #0
 80163f0:	4680      	mov	r8, r0
 80163f2:	4689      	mov	r9, r1
 80163f4:	f7ea f910 	bl	8000618 <__aeabi_dmul>
 80163f8:	4602      	mov	r2, r0
 80163fa:	460b      	mov	r3, r1
 80163fc:	4630      	mov	r0, r6
 80163fe:	4639      	mov	r1, r7
 8016400:	f7e9 ff52 	bl	80002a8 <__aeabi_dsub>
 8016404:	f7ea fbb8 	bl	8000b78 <__aeabi_d2iz>
 8016408:	9b02      	ldr	r3, [sp, #8]
 801640a:	f843 0b04 	str.w	r0, [r3], #4
 801640e:	3d01      	subs	r5, #1
 8016410:	9302      	str	r3, [sp, #8]
 8016412:	ab70      	add	r3, sp, #448	; 0x1c0
 8016414:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801641c:	4640      	mov	r0, r8
 801641e:	4649      	mov	r1, r9
 8016420:	f7e9 ff44 	bl	80002ac <__adddf3>
 8016424:	4606      	mov	r6, r0
 8016426:	460f      	mov	r7, r1
 8016428:	e75b      	b.n	80162e2 <__kernel_rem_pio2+0x10a>
 801642a:	d105      	bne.n	8016438 <__kernel_rem_pio2+0x260>
 801642c:	1e63      	subs	r3, r4, #1
 801642e:	aa0c      	add	r2, sp, #48	; 0x30
 8016430:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016434:	15c3      	asrs	r3, r0, #23
 8016436:	e79b      	b.n	8016370 <__kernel_rem_pio2+0x198>
 8016438:	4b38      	ldr	r3, [pc, #224]	; (801651c <__kernel_rem_pio2+0x344>)
 801643a:	2200      	movs	r2, #0
 801643c:	f7ea fb72 	bl	8000b24 <__aeabi_dcmpge>
 8016440:	2800      	cmp	r0, #0
 8016442:	d139      	bne.n	80164b8 <__kernel_rem_pio2+0x2e0>
 8016444:	9002      	str	r0, [sp, #8]
 8016446:	2200      	movs	r2, #0
 8016448:	2300      	movs	r3, #0
 801644a:	4630      	mov	r0, r6
 801644c:	4639      	mov	r1, r7
 801644e:	f7ea fb4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8016452:	2800      	cmp	r0, #0
 8016454:	f000 80b4 	beq.w	80165c0 <__kernel_rem_pio2+0x3e8>
 8016458:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 801645c:	465b      	mov	r3, fp
 801645e:	2200      	movs	r2, #0
 8016460:	9904      	ldr	r1, [sp, #16]
 8016462:	428b      	cmp	r3, r1
 8016464:	da65      	bge.n	8016532 <__kernel_rem_pio2+0x35a>
 8016466:	2a00      	cmp	r2, #0
 8016468:	d07b      	beq.n	8016562 <__kernel_rem_pio2+0x38a>
 801646a:	ab0c      	add	r3, sp, #48	; 0x30
 801646c:	f1aa 0a18 	sub.w	sl, sl, #24
 8016470:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8016474:	2b00      	cmp	r3, #0
 8016476:	f000 80a0 	beq.w	80165ba <__kernel_rem_pio2+0x3e2>
 801647a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8016500 <__kernel_rem_pio2+0x328>
 801647e:	4650      	mov	r0, sl
 8016480:	f000 fb32 	bl	8016ae8 <scalbn>
 8016484:	4f23      	ldr	r7, [pc, #140]	; (8016514 <__kernel_rem_pio2+0x33c>)
 8016486:	ec55 4b10 	vmov	r4, r5, d0
 801648a:	46d8      	mov	r8, fp
 801648c:	2600      	movs	r6, #0
 801648e:	f1b8 0f00 	cmp.w	r8, #0
 8016492:	f280 80cf 	bge.w	8016634 <__kernel_rem_pio2+0x45c>
 8016496:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80164f8 <__kernel_rem_pio2+0x320>
 801649a:	465f      	mov	r7, fp
 801649c:	f04f 0800 	mov.w	r8, #0
 80164a0:	2f00      	cmp	r7, #0
 80164a2:	f2c0 80fd 	blt.w	80166a0 <__kernel_rem_pio2+0x4c8>
 80164a6:	ab70      	add	r3, sp, #448	; 0x1c0
 80164a8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8016520 <__kernel_rem_pio2+0x348>
 80164ac:	ec55 4b18 	vmov	r4, r5, d8
 80164b0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80164b4:	2600      	movs	r6, #0
 80164b6:	e0e5      	b.n	8016684 <__kernel_rem_pio2+0x4ac>
 80164b8:	2302      	movs	r3, #2
 80164ba:	9302      	str	r3, [sp, #8]
 80164bc:	e75c      	b.n	8016378 <__kernel_rem_pio2+0x1a0>
 80164be:	f8db 3000 	ldr.w	r3, [fp]
 80164c2:	b955      	cbnz	r5, 80164da <__kernel_rem_pio2+0x302>
 80164c4:	b123      	cbz	r3, 80164d0 <__kernel_rem_pio2+0x2f8>
 80164c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80164ca:	f8cb 3000 	str.w	r3, [fp]
 80164ce:	2301      	movs	r3, #1
 80164d0:	3201      	adds	r2, #1
 80164d2:	f10b 0b04 	add.w	fp, fp, #4
 80164d6:	461d      	mov	r5, r3
 80164d8:	e755      	b.n	8016386 <__kernel_rem_pio2+0x1ae>
 80164da:	1acb      	subs	r3, r1, r3
 80164dc:	f8cb 3000 	str.w	r3, [fp]
 80164e0:	462b      	mov	r3, r5
 80164e2:	e7f5      	b.n	80164d0 <__kernel_rem_pio2+0x2f8>
 80164e4:	1e62      	subs	r2, r4, #1
 80164e6:	ab0c      	add	r3, sp, #48	; 0x30
 80164e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80164f0:	a90c      	add	r1, sp, #48	; 0x30
 80164f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80164f6:	e754      	b.n	80163a2 <__kernel_rem_pio2+0x1ca>
	...
 8016504:	3ff00000 	.word	0x3ff00000
 8016508:	080600b0 	.word	0x080600b0
 801650c:	40200000 	.word	0x40200000
 8016510:	3ff00000 	.word	0x3ff00000
 8016514:	3e700000 	.word	0x3e700000
 8016518:	41700000 	.word	0x41700000
 801651c:	3fe00000 	.word	0x3fe00000
 8016520:	08060070 	.word	0x08060070
 8016524:	1e62      	subs	r2, r4, #1
 8016526:	ab0c      	add	r3, sp, #48	; 0x30
 8016528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801652c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016530:	e7de      	b.n	80164f0 <__kernel_rem_pio2+0x318>
 8016532:	a90c      	add	r1, sp, #48	; 0x30
 8016534:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016538:	3b01      	subs	r3, #1
 801653a:	430a      	orrs	r2, r1
 801653c:	e790      	b.n	8016460 <__kernel_rem_pio2+0x288>
 801653e:	3301      	adds	r3, #1
 8016540:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016544:	2900      	cmp	r1, #0
 8016546:	d0fa      	beq.n	801653e <__kernel_rem_pio2+0x366>
 8016548:	9a08      	ldr	r2, [sp, #32]
 801654a:	18e3      	adds	r3, r4, r3
 801654c:	18a6      	adds	r6, r4, r2
 801654e:	aa20      	add	r2, sp, #128	; 0x80
 8016550:	1c65      	adds	r5, r4, #1
 8016552:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8016556:	9302      	str	r3, [sp, #8]
 8016558:	9b02      	ldr	r3, [sp, #8]
 801655a:	42ab      	cmp	r3, r5
 801655c:	da04      	bge.n	8016568 <__kernel_rem_pio2+0x390>
 801655e:	461c      	mov	r4, r3
 8016560:	e6b5      	b.n	80162ce <__kernel_rem_pio2+0xf6>
 8016562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016564:	2301      	movs	r3, #1
 8016566:	e7eb      	b.n	8016540 <__kernel_rem_pio2+0x368>
 8016568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801656a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801656e:	f7e9 ffe9 	bl	8000544 <__aeabi_i2d>
 8016572:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016578:	46b3      	mov	fp, r6
 801657a:	461c      	mov	r4, r3
 801657c:	2700      	movs	r7, #0
 801657e:	f04f 0800 	mov.w	r8, #0
 8016582:	f04f 0900 	mov.w	r9, #0
 8016586:	9b06      	ldr	r3, [sp, #24]
 8016588:	429f      	cmp	r7, r3
 801658a:	dd06      	ble.n	801659a <__kernel_rem_pio2+0x3c2>
 801658c:	ab70      	add	r3, sp, #448	; 0x1c0
 801658e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016592:	e9c3 8900 	strd	r8, r9, [r3]
 8016596:	3501      	adds	r5, #1
 8016598:	e7de      	b.n	8016558 <__kernel_rem_pio2+0x380>
 801659a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801659e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80165a2:	f7ea f839 	bl	8000618 <__aeabi_dmul>
 80165a6:	4602      	mov	r2, r0
 80165a8:	460b      	mov	r3, r1
 80165aa:	4640      	mov	r0, r8
 80165ac:	4649      	mov	r1, r9
 80165ae:	f7e9 fe7d 	bl	80002ac <__adddf3>
 80165b2:	3701      	adds	r7, #1
 80165b4:	4680      	mov	r8, r0
 80165b6:	4689      	mov	r9, r1
 80165b8:	e7e5      	b.n	8016586 <__kernel_rem_pio2+0x3ae>
 80165ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80165be:	e754      	b.n	801646a <__kernel_rem_pio2+0x292>
 80165c0:	ec47 6b10 	vmov	d0, r6, r7
 80165c4:	f1ca 0000 	rsb	r0, sl, #0
 80165c8:	f000 fa8e 	bl	8016ae8 <scalbn>
 80165cc:	ec57 6b10 	vmov	r6, r7, d0
 80165d0:	4b9f      	ldr	r3, [pc, #636]	; (8016850 <__kernel_rem_pio2+0x678>)
 80165d2:	ee10 0a10 	vmov	r0, s0
 80165d6:	2200      	movs	r2, #0
 80165d8:	4639      	mov	r1, r7
 80165da:	f7ea faa3 	bl	8000b24 <__aeabi_dcmpge>
 80165de:	b300      	cbz	r0, 8016622 <__kernel_rem_pio2+0x44a>
 80165e0:	4b9c      	ldr	r3, [pc, #624]	; (8016854 <__kernel_rem_pio2+0x67c>)
 80165e2:	2200      	movs	r2, #0
 80165e4:	4630      	mov	r0, r6
 80165e6:	4639      	mov	r1, r7
 80165e8:	f7ea f816 	bl	8000618 <__aeabi_dmul>
 80165ec:	f7ea fac4 	bl	8000b78 <__aeabi_d2iz>
 80165f0:	4605      	mov	r5, r0
 80165f2:	f7e9 ffa7 	bl	8000544 <__aeabi_i2d>
 80165f6:	4b96      	ldr	r3, [pc, #600]	; (8016850 <__kernel_rem_pio2+0x678>)
 80165f8:	2200      	movs	r2, #0
 80165fa:	f7ea f80d 	bl	8000618 <__aeabi_dmul>
 80165fe:	460b      	mov	r3, r1
 8016600:	4602      	mov	r2, r0
 8016602:	4639      	mov	r1, r7
 8016604:	4630      	mov	r0, r6
 8016606:	f7e9 fe4f 	bl	80002a8 <__aeabi_dsub>
 801660a:	f7ea fab5 	bl	8000b78 <__aeabi_d2iz>
 801660e:	f104 0b01 	add.w	fp, r4, #1
 8016612:	ab0c      	add	r3, sp, #48	; 0x30
 8016614:	f10a 0a18 	add.w	sl, sl, #24
 8016618:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801661c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8016620:	e72b      	b.n	801647a <__kernel_rem_pio2+0x2a2>
 8016622:	4630      	mov	r0, r6
 8016624:	4639      	mov	r1, r7
 8016626:	f7ea faa7 	bl	8000b78 <__aeabi_d2iz>
 801662a:	ab0c      	add	r3, sp, #48	; 0x30
 801662c:	46a3      	mov	fp, r4
 801662e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016632:	e722      	b.n	801647a <__kernel_rem_pio2+0x2a2>
 8016634:	ab70      	add	r3, sp, #448	; 0x1c0
 8016636:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801663a:	ab0c      	add	r3, sp, #48	; 0x30
 801663c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016640:	f7e9 ff80 	bl	8000544 <__aeabi_i2d>
 8016644:	4622      	mov	r2, r4
 8016646:	462b      	mov	r3, r5
 8016648:	f7e9 ffe6 	bl	8000618 <__aeabi_dmul>
 801664c:	4632      	mov	r2, r6
 801664e:	e9c9 0100 	strd	r0, r1, [r9]
 8016652:	463b      	mov	r3, r7
 8016654:	4620      	mov	r0, r4
 8016656:	4629      	mov	r1, r5
 8016658:	f7e9 ffde 	bl	8000618 <__aeabi_dmul>
 801665c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8016660:	4604      	mov	r4, r0
 8016662:	460d      	mov	r5, r1
 8016664:	e713      	b.n	801648e <__kernel_rem_pio2+0x2b6>
 8016666:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801666a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801666e:	f7e9 ffd3 	bl	8000618 <__aeabi_dmul>
 8016672:	4602      	mov	r2, r0
 8016674:	460b      	mov	r3, r1
 8016676:	4620      	mov	r0, r4
 8016678:	4629      	mov	r1, r5
 801667a:	f7e9 fe17 	bl	80002ac <__adddf3>
 801667e:	3601      	adds	r6, #1
 8016680:	4604      	mov	r4, r0
 8016682:	460d      	mov	r5, r1
 8016684:	9b04      	ldr	r3, [sp, #16]
 8016686:	429e      	cmp	r6, r3
 8016688:	dc01      	bgt.n	801668e <__kernel_rem_pio2+0x4b6>
 801668a:	45b0      	cmp	r8, r6
 801668c:	daeb      	bge.n	8016666 <__kernel_rem_pio2+0x48e>
 801668e:	ab48      	add	r3, sp, #288	; 0x120
 8016690:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016694:	e9c3 4500 	strd	r4, r5, [r3]
 8016698:	3f01      	subs	r7, #1
 801669a:	f108 0801 	add.w	r8, r8, #1
 801669e:	e6ff      	b.n	80164a0 <__kernel_rem_pio2+0x2c8>
 80166a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80166a2:	2b02      	cmp	r3, #2
 80166a4:	dc0b      	bgt.n	80166be <__kernel_rem_pio2+0x4e6>
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	dc6e      	bgt.n	8016788 <__kernel_rem_pio2+0x5b0>
 80166aa:	d045      	beq.n	8016738 <__kernel_rem_pio2+0x560>
 80166ac:	9b07      	ldr	r3, [sp, #28]
 80166ae:	f003 0007 	and.w	r0, r3, #7
 80166b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80166b6:	ecbd 8b02 	vpop	{d8}
 80166ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80166c0:	2b03      	cmp	r3, #3
 80166c2:	d1f3      	bne.n	80166ac <__kernel_rem_pio2+0x4d4>
 80166c4:	ab48      	add	r3, sp, #288	; 0x120
 80166c6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80166ca:	46d0      	mov	r8, sl
 80166cc:	46d9      	mov	r9, fp
 80166ce:	f1b9 0f00 	cmp.w	r9, #0
 80166d2:	f1a8 0808 	sub.w	r8, r8, #8
 80166d6:	dc64      	bgt.n	80167a2 <__kernel_rem_pio2+0x5ca>
 80166d8:	465c      	mov	r4, fp
 80166da:	2c01      	cmp	r4, #1
 80166dc:	f1aa 0a08 	sub.w	sl, sl, #8
 80166e0:	dc7e      	bgt.n	80167e0 <__kernel_rem_pio2+0x608>
 80166e2:	2000      	movs	r0, #0
 80166e4:	2100      	movs	r1, #0
 80166e6:	f1bb 0f01 	cmp.w	fp, #1
 80166ea:	f300 8097 	bgt.w	801681c <__kernel_rem_pio2+0x644>
 80166ee:	9b02      	ldr	r3, [sp, #8]
 80166f0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80166f4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	f040 8099 	bne.w	8016830 <__kernel_rem_pio2+0x658>
 80166fe:	9b01      	ldr	r3, [sp, #4]
 8016700:	e9c3 5600 	strd	r5, r6, [r3]
 8016704:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8016708:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801670c:	e7ce      	b.n	80166ac <__kernel_rem_pio2+0x4d4>
 801670e:	ab48      	add	r3, sp, #288	; 0x120
 8016710:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016718:	f7e9 fdc8 	bl	80002ac <__adddf3>
 801671c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016720:	f1bb 0f00 	cmp.w	fp, #0
 8016724:	daf3      	bge.n	801670e <__kernel_rem_pio2+0x536>
 8016726:	9b02      	ldr	r3, [sp, #8]
 8016728:	b113      	cbz	r3, 8016730 <__kernel_rem_pio2+0x558>
 801672a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801672e:	4619      	mov	r1, r3
 8016730:	9b01      	ldr	r3, [sp, #4]
 8016732:	e9c3 0100 	strd	r0, r1, [r3]
 8016736:	e7b9      	b.n	80166ac <__kernel_rem_pio2+0x4d4>
 8016738:	2000      	movs	r0, #0
 801673a:	2100      	movs	r1, #0
 801673c:	e7f0      	b.n	8016720 <__kernel_rem_pio2+0x548>
 801673e:	ab48      	add	r3, sp, #288	; 0x120
 8016740:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016748:	f7e9 fdb0 	bl	80002ac <__adddf3>
 801674c:	3c01      	subs	r4, #1
 801674e:	2c00      	cmp	r4, #0
 8016750:	daf5      	bge.n	801673e <__kernel_rem_pio2+0x566>
 8016752:	9b02      	ldr	r3, [sp, #8]
 8016754:	b1e3      	cbz	r3, 8016790 <__kernel_rem_pio2+0x5b8>
 8016756:	4602      	mov	r2, r0
 8016758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801675c:	9c01      	ldr	r4, [sp, #4]
 801675e:	e9c4 2300 	strd	r2, r3, [r4]
 8016762:	4602      	mov	r2, r0
 8016764:	460b      	mov	r3, r1
 8016766:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801676a:	f7e9 fd9d 	bl	80002a8 <__aeabi_dsub>
 801676e:	ad4a      	add	r5, sp, #296	; 0x128
 8016770:	2401      	movs	r4, #1
 8016772:	45a3      	cmp	fp, r4
 8016774:	da0f      	bge.n	8016796 <__kernel_rem_pio2+0x5be>
 8016776:	9b02      	ldr	r3, [sp, #8]
 8016778:	b113      	cbz	r3, 8016780 <__kernel_rem_pio2+0x5a8>
 801677a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801677e:	4619      	mov	r1, r3
 8016780:	9b01      	ldr	r3, [sp, #4]
 8016782:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016786:	e791      	b.n	80166ac <__kernel_rem_pio2+0x4d4>
 8016788:	465c      	mov	r4, fp
 801678a:	2000      	movs	r0, #0
 801678c:	2100      	movs	r1, #0
 801678e:	e7de      	b.n	801674e <__kernel_rem_pio2+0x576>
 8016790:	4602      	mov	r2, r0
 8016792:	460b      	mov	r3, r1
 8016794:	e7e2      	b.n	801675c <__kernel_rem_pio2+0x584>
 8016796:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801679a:	f7e9 fd87 	bl	80002ac <__adddf3>
 801679e:	3401      	adds	r4, #1
 80167a0:	e7e7      	b.n	8016772 <__kernel_rem_pio2+0x59a>
 80167a2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80167a6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80167aa:	4620      	mov	r0, r4
 80167ac:	4632      	mov	r2, r6
 80167ae:	463b      	mov	r3, r7
 80167b0:	4629      	mov	r1, r5
 80167b2:	f7e9 fd7b 	bl	80002ac <__adddf3>
 80167b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80167ba:	4602      	mov	r2, r0
 80167bc:	460b      	mov	r3, r1
 80167be:	4620      	mov	r0, r4
 80167c0:	4629      	mov	r1, r5
 80167c2:	f7e9 fd71 	bl	80002a8 <__aeabi_dsub>
 80167c6:	4632      	mov	r2, r6
 80167c8:	463b      	mov	r3, r7
 80167ca:	f7e9 fd6f 	bl	80002ac <__adddf3>
 80167ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80167d2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80167d6:	ed88 7b00 	vstr	d7, [r8]
 80167da:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80167de:	e776      	b.n	80166ce <__kernel_rem_pio2+0x4f6>
 80167e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80167e4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80167e8:	4640      	mov	r0, r8
 80167ea:	4632      	mov	r2, r6
 80167ec:	463b      	mov	r3, r7
 80167ee:	4649      	mov	r1, r9
 80167f0:	f7e9 fd5c 	bl	80002ac <__adddf3>
 80167f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80167f8:	4602      	mov	r2, r0
 80167fa:	460b      	mov	r3, r1
 80167fc:	4640      	mov	r0, r8
 80167fe:	4649      	mov	r1, r9
 8016800:	f7e9 fd52 	bl	80002a8 <__aeabi_dsub>
 8016804:	4632      	mov	r2, r6
 8016806:	463b      	mov	r3, r7
 8016808:	f7e9 fd50 	bl	80002ac <__adddf3>
 801680c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8016810:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016814:	ed8a 7b00 	vstr	d7, [sl]
 8016818:	3c01      	subs	r4, #1
 801681a:	e75e      	b.n	80166da <__kernel_rem_pio2+0x502>
 801681c:	ab48      	add	r3, sp, #288	; 0x120
 801681e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016826:	f7e9 fd41 	bl	80002ac <__adddf3>
 801682a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801682e:	e75a      	b.n	80166e6 <__kernel_rem_pio2+0x50e>
 8016830:	9b01      	ldr	r3, [sp, #4]
 8016832:	9a01      	ldr	r2, [sp, #4]
 8016834:	601d      	str	r5, [r3, #0]
 8016836:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801683a:	605c      	str	r4, [r3, #4]
 801683c:	609f      	str	r7, [r3, #8]
 801683e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8016842:	60d3      	str	r3, [r2, #12]
 8016844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016848:	6110      	str	r0, [r2, #16]
 801684a:	6153      	str	r3, [r2, #20]
 801684c:	e72e      	b.n	80166ac <__kernel_rem_pio2+0x4d4>
 801684e:	bf00      	nop
 8016850:	41700000 	.word	0x41700000
 8016854:	3e700000 	.word	0x3e700000

08016858 <__kernel_sin>:
 8016858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801685c:	ed2d 8b04 	vpush	{d8-d9}
 8016860:	eeb0 8a41 	vmov.f32	s16, s2
 8016864:	eef0 8a61 	vmov.f32	s17, s3
 8016868:	ec55 4b10 	vmov	r4, r5, d0
 801686c:	b083      	sub	sp, #12
 801686e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016872:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8016876:	9001      	str	r0, [sp, #4]
 8016878:	da06      	bge.n	8016888 <__kernel_sin+0x30>
 801687a:	ee10 0a10 	vmov	r0, s0
 801687e:	4629      	mov	r1, r5
 8016880:	f7ea f97a 	bl	8000b78 <__aeabi_d2iz>
 8016884:	2800      	cmp	r0, #0
 8016886:	d051      	beq.n	801692c <__kernel_sin+0xd4>
 8016888:	4622      	mov	r2, r4
 801688a:	462b      	mov	r3, r5
 801688c:	4620      	mov	r0, r4
 801688e:	4629      	mov	r1, r5
 8016890:	f7e9 fec2 	bl	8000618 <__aeabi_dmul>
 8016894:	4682      	mov	sl, r0
 8016896:	468b      	mov	fp, r1
 8016898:	4602      	mov	r2, r0
 801689a:	460b      	mov	r3, r1
 801689c:	4620      	mov	r0, r4
 801689e:	4629      	mov	r1, r5
 80168a0:	f7e9 feba 	bl	8000618 <__aeabi_dmul>
 80168a4:	a341      	add	r3, pc, #260	; (adr r3, 80169ac <__kernel_sin+0x154>)
 80168a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168aa:	4680      	mov	r8, r0
 80168ac:	4689      	mov	r9, r1
 80168ae:	4650      	mov	r0, sl
 80168b0:	4659      	mov	r1, fp
 80168b2:	f7e9 feb1 	bl	8000618 <__aeabi_dmul>
 80168b6:	a33f      	add	r3, pc, #252	; (adr r3, 80169b4 <__kernel_sin+0x15c>)
 80168b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168bc:	f7e9 fcf4 	bl	80002a8 <__aeabi_dsub>
 80168c0:	4652      	mov	r2, sl
 80168c2:	465b      	mov	r3, fp
 80168c4:	f7e9 fea8 	bl	8000618 <__aeabi_dmul>
 80168c8:	a33c      	add	r3, pc, #240	; (adr r3, 80169bc <__kernel_sin+0x164>)
 80168ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ce:	f7e9 fced 	bl	80002ac <__adddf3>
 80168d2:	4652      	mov	r2, sl
 80168d4:	465b      	mov	r3, fp
 80168d6:	f7e9 fe9f 	bl	8000618 <__aeabi_dmul>
 80168da:	a33a      	add	r3, pc, #232	; (adr r3, 80169c4 <__kernel_sin+0x16c>)
 80168dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e0:	f7e9 fce2 	bl	80002a8 <__aeabi_dsub>
 80168e4:	4652      	mov	r2, sl
 80168e6:	465b      	mov	r3, fp
 80168e8:	f7e9 fe96 	bl	8000618 <__aeabi_dmul>
 80168ec:	a337      	add	r3, pc, #220	; (adr r3, 80169cc <__kernel_sin+0x174>)
 80168ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f2:	f7e9 fcdb 	bl	80002ac <__adddf3>
 80168f6:	9b01      	ldr	r3, [sp, #4]
 80168f8:	4606      	mov	r6, r0
 80168fa:	460f      	mov	r7, r1
 80168fc:	b9eb      	cbnz	r3, 801693a <__kernel_sin+0xe2>
 80168fe:	4602      	mov	r2, r0
 8016900:	460b      	mov	r3, r1
 8016902:	4650      	mov	r0, sl
 8016904:	4659      	mov	r1, fp
 8016906:	f7e9 fe87 	bl	8000618 <__aeabi_dmul>
 801690a:	a325      	add	r3, pc, #148	; (adr r3, 80169a0 <__kernel_sin+0x148>)
 801690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016910:	f7e9 fcca 	bl	80002a8 <__aeabi_dsub>
 8016914:	4642      	mov	r2, r8
 8016916:	464b      	mov	r3, r9
 8016918:	f7e9 fe7e 	bl	8000618 <__aeabi_dmul>
 801691c:	4602      	mov	r2, r0
 801691e:	460b      	mov	r3, r1
 8016920:	4620      	mov	r0, r4
 8016922:	4629      	mov	r1, r5
 8016924:	f7e9 fcc2 	bl	80002ac <__adddf3>
 8016928:	4604      	mov	r4, r0
 801692a:	460d      	mov	r5, r1
 801692c:	ec45 4b10 	vmov	d0, r4, r5
 8016930:	b003      	add	sp, #12
 8016932:	ecbd 8b04 	vpop	{d8-d9}
 8016936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801693a:	4b1b      	ldr	r3, [pc, #108]	; (80169a8 <__kernel_sin+0x150>)
 801693c:	ec51 0b18 	vmov	r0, r1, d8
 8016940:	2200      	movs	r2, #0
 8016942:	f7e9 fe69 	bl	8000618 <__aeabi_dmul>
 8016946:	4632      	mov	r2, r6
 8016948:	ec41 0b19 	vmov	d9, r0, r1
 801694c:	463b      	mov	r3, r7
 801694e:	4640      	mov	r0, r8
 8016950:	4649      	mov	r1, r9
 8016952:	f7e9 fe61 	bl	8000618 <__aeabi_dmul>
 8016956:	4602      	mov	r2, r0
 8016958:	460b      	mov	r3, r1
 801695a:	ec51 0b19 	vmov	r0, r1, d9
 801695e:	f7e9 fca3 	bl	80002a8 <__aeabi_dsub>
 8016962:	4652      	mov	r2, sl
 8016964:	465b      	mov	r3, fp
 8016966:	f7e9 fe57 	bl	8000618 <__aeabi_dmul>
 801696a:	ec53 2b18 	vmov	r2, r3, d8
 801696e:	f7e9 fc9b 	bl	80002a8 <__aeabi_dsub>
 8016972:	a30b      	add	r3, pc, #44	; (adr r3, 80169a0 <__kernel_sin+0x148>)
 8016974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016978:	4606      	mov	r6, r0
 801697a:	460f      	mov	r7, r1
 801697c:	4640      	mov	r0, r8
 801697e:	4649      	mov	r1, r9
 8016980:	f7e9 fe4a 	bl	8000618 <__aeabi_dmul>
 8016984:	4602      	mov	r2, r0
 8016986:	460b      	mov	r3, r1
 8016988:	4630      	mov	r0, r6
 801698a:	4639      	mov	r1, r7
 801698c:	f7e9 fc8e 	bl	80002ac <__adddf3>
 8016990:	4602      	mov	r2, r0
 8016992:	460b      	mov	r3, r1
 8016994:	4620      	mov	r0, r4
 8016996:	4629      	mov	r1, r5
 8016998:	f7e9 fc86 	bl	80002a8 <__aeabi_dsub>
 801699c:	e7c4      	b.n	8016928 <__kernel_sin+0xd0>
 801699e:	bf00      	nop
 80169a0:	55555549 	.word	0x55555549
 80169a4:	3fc55555 	.word	0x3fc55555
 80169a8:	3fe00000 	.word	0x3fe00000
 80169ac:	5acfd57c 	.word	0x5acfd57c
 80169b0:	3de5d93a 	.word	0x3de5d93a
 80169b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80169b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80169bc:	57b1fe7d 	.word	0x57b1fe7d
 80169c0:	3ec71de3 	.word	0x3ec71de3
 80169c4:	19c161d5 	.word	0x19c161d5
 80169c8:	3f2a01a0 	.word	0x3f2a01a0
 80169cc:	1110f8a6 	.word	0x1110f8a6
 80169d0:	3f811111 	.word	0x3f811111

080169d4 <fabs>:
 80169d4:	ec51 0b10 	vmov	r0, r1, d0
 80169d8:	ee10 2a10 	vmov	r2, s0
 80169dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80169e0:	ec43 2b10 	vmov	d0, r2, r3
 80169e4:	4770      	bx	lr
	...

080169e8 <floor>:
 80169e8:	ec51 0b10 	vmov	r0, r1, d0
 80169ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80169f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80169f8:	2e13      	cmp	r6, #19
 80169fa:	ee10 5a10 	vmov	r5, s0
 80169fe:	ee10 8a10 	vmov	r8, s0
 8016a02:	460c      	mov	r4, r1
 8016a04:	dc32      	bgt.n	8016a6c <floor+0x84>
 8016a06:	2e00      	cmp	r6, #0
 8016a08:	da14      	bge.n	8016a34 <floor+0x4c>
 8016a0a:	a333      	add	r3, pc, #204	; (adr r3, 8016ad8 <floor+0xf0>)
 8016a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a10:	f7e9 fc4c 	bl	80002ac <__adddf3>
 8016a14:	2200      	movs	r2, #0
 8016a16:	2300      	movs	r3, #0
 8016a18:	f7ea f88e 	bl	8000b38 <__aeabi_dcmpgt>
 8016a1c:	b138      	cbz	r0, 8016a2e <floor+0x46>
 8016a1e:	2c00      	cmp	r4, #0
 8016a20:	da57      	bge.n	8016ad2 <floor+0xea>
 8016a22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016a26:	431d      	orrs	r5, r3
 8016a28:	d001      	beq.n	8016a2e <floor+0x46>
 8016a2a:	4c2d      	ldr	r4, [pc, #180]	; (8016ae0 <floor+0xf8>)
 8016a2c:	2500      	movs	r5, #0
 8016a2e:	4621      	mov	r1, r4
 8016a30:	4628      	mov	r0, r5
 8016a32:	e025      	b.n	8016a80 <floor+0x98>
 8016a34:	4f2b      	ldr	r7, [pc, #172]	; (8016ae4 <floor+0xfc>)
 8016a36:	4137      	asrs	r7, r6
 8016a38:	ea01 0307 	and.w	r3, r1, r7
 8016a3c:	4303      	orrs	r3, r0
 8016a3e:	d01f      	beq.n	8016a80 <floor+0x98>
 8016a40:	a325      	add	r3, pc, #148	; (adr r3, 8016ad8 <floor+0xf0>)
 8016a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a46:	f7e9 fc31 	bl	80002ac <__adddf3>
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	f7ea f873 	bl	8000b38 <__aeabi_dcmpgt>
 8016a52:	2800      	cmp	r0, #0
 8016a54:	d0eb      	beq.n	8016a2e <floor+0x46>
 8016a56:	2c00      	cmp	r4, #0
 8016a58:	bfbe      	ittt	lt
 8016a5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016a5e:	fa43 f606 	asrlt.w	r6, r3, r6
 8016a62:	19a4      	addlt	r4, r4, r6
 8016a64:	ea24 0407 	bic.w	r4, r4, r7
 8016a68:	2500      	movs	r5, #0
 8016a6a:	e7e0      	b.n	8016a2e <floor+0x46>
 8016a6c:	2e33      	cmp	r6, #51	; 0x33
 8016a6e:	dd0b      	ble.n	8016a88 <floor+0xa0>
 8016a70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016a74:	d104      	bne.n	8016a80 <floor+0x98>
 8016a76:	ee10 2a10 	vmov	r2, s0
 8016a7a:	460b      	mov	r3, r1
 8016a7c:	f7e9 fc16 	bl	80002ac <__adddf3>
 8016a80:	ec41 0b10 	vmov	d0, r0, r1
 8016a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a90:	fa23 f707 	lsr.w	r7, r3, r7
 8016a94:	4207      	tst	r7, r0
 8016a96:	d0f3      	beq.n	8016a80 <floor+0x98>
 8016a98:	a30f      	add	r3, pc, #60	; (adr r3, 8016ad8 <floor+0xf0>)
 8016a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a9e:	f7e9 fc05 	bl	80002ac <__adddf3>
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	f7ea f847 	bl	8000b38 <__aeabi_dcmpgt>
 8016aaa:	2800      	cmp	r0, #0
 8016aac:	d0bf      	beq.n	8016a2e <floor+0x46>
 8016aae:	2c00      	cmp	r4, #0
 8016ab0:	da02      	bge.n	8016ab8 <floor+0xd0>
 8016ab2:	2e14      	cmp	r6, #20
 8016ab4:	d103      	bne.n	8016abe <floor+0xd6>
 8016ab6:	3401      	adds	r4, #1
 8016ab8:	ea25 0507 	bic.w	r5, r5, r7
 8016abc:	e7b7      	b.n	8016a2e <floor+0x46>
 8016abe:	2301      	movs	r3, #1
 8016ac0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016ac4:	fa03 f606 	lsl.w	r6, r3, r6
 8016ac8:	4435      	add	r5, r6
 8016aca:	4545      	cmp	r5, r8
 8016acc:	bf38      	it	cc
 8016ace:	18e4      	addcc	r4, r4, r3
 8016ad0:	e7f2      	b.n	8016ab8 <floor+0xd0>
 8016ad2:	2500      	movs	r5, #0
 8016ad4:	462c      	mov	r4, r5
 8016ad6:	e7aa      	b.n	8016a2e <floor+0x46>
 8016ad8:	8800759c 	.word	0x8800759c
 8016adc:	7e37e43c 	.word	0x7e37e43c
 8016ae0:	bff00000 	.word	0xbff00000
 8016ae4:	000fffff 	.word	0x000fffff

08016ae8 <scalbn>:
 8016ae8:	b570      	push	{r4, r5, r6, lr}
 8016aea:	ec55 4b10 	vmov	r4, r5, d0
 8016aee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016af2:	4606      	mov	r6, r0
 8016af4:	462b      	mov	r3, r5
 8016af6:	b99a      	cbnz	r2, 8016b20 <scalbn+0x38>
 8016af8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016afc:	4323      	orrs	r3, r4
 8016afe:	d036      	beq.n	8016b6e <scalbn+0x86>
 8016b00:	4b39      	ldr	r3, [pc, #228]	; (8016be8 <scalbn+0x100>)
 8016b02:	4629      	mov	r1, r5
 8016b04:	ee10 0a10 	vmov	r0, s0
 8016b08:	2200      	movs	r2, #0
 8016b0a:	f7e9 fd85 	bl	8000618 <__aeabi_dmul>
 8016b0e:	4b37      	ldr	r3, [pc, #220]	; (8016bec <scalbn+0x104>)
 8016b10:	429e      	cmp	r6, r3
 8016b12:	4604      	mov	r4, r0
 8016b14:	460d      	mov	r5, r1
 8016b16:	da10      	bge.n	8016b3a <scalbn+0x52>
 8016b18:	a32b      	add	r3, pc, #172	; (adr r3, 8016bc8 <scalbn+0xe0>)
 8016b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b1e:	e03a      	b.n	8016b96 <scalbn+0xae>
 8016b20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016b24:	428a      	cmp	r2, r1
 8016b26:	d10c      	bne.n	8016b42 <scalbn+0x5a>
 8016b28:	ee10 2a10 	vmov	r2, s0
 8016b2c:	4620      	mov	r0, r4
 8016b2e:	4629      	mov	r1, r5
 8016b30:	f7e9 fbbc 	bl	80002ac <__adddf3>
 8016b34:	4604      	mov	r4, r0
 8016b36:	460d      	mov	r5, r1
 8016b38:	e019      	b.n	8016b6e <scalbn+0x86>
 8016b3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016b3e:	460b      	mov	r3, r1
 8016b40:	3a36      	subs	r2, #54	; 0x36
 8016b42:	4432      	add	r2, r6
 8016b44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016b48:	428a      	cmp	r2, r1
 8016b4a:	dd08      	ble.n	8016b5e <scalbn+0x76>
 8016b4c:	2d00      	cmp	r5, #0
 8016b4e:	a120      	add	r1, pc, #128	; (adr r1, 8016bd0 <scalbn+0xe8>)
 8016b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b54:	da1c      	bge.n	8016b90 <scalbn+0xa8>
 8016b56:	a120      	add	r1, pc, #128	; (adr r1, 8016bd8 <scalbn+0xf0>)
 8016b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b5c:	e018      	b.n	8016b90 <scalbn+0xa8>
 8016b5e:	2a00      	cmp	r2, #0
 8016b60:	dd08      	ble.n	8016b74 <scalbn+0x8c>
 8016b62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016b66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016b6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016b6e:	ec45 4b10 	vmov	d0, r4, r5
 8016b72:	bd70      	pop	{r4, r5, r6, pc}
 8016b74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016b78:	da19      	bge.n	8016bae <scalbn+0xc6>
 8016b7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016b7e:	429e      	cmp	r6, r3
 8016b80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8016b84:	dd0a      	ble.n	8016b9c <scalbn+0xb4>
 8016b86:	a112      	add	r1, pc, #72	; (adr r1, 8016bd0 <scalbn+0xe8>)
 8016b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d1e2      	bne.n	8016b56 <scalbn+0x6e>
 8016b90:	a30f      	add	r3, pc, #60	; (adr r3, 8016bd0 <scalbn+0xe8>)
 8016b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b96:	f7e9 fd3f 	bl	8000618 <__aeabi_dmul>
 8016b9a:	e7cb      	b.n	8016b34 <scalbn+0x4c>
 8016b9c:	a10a      	add	r1, pc, #40	; (adr r1, 8016bc8 <scalbn+0xe0>)
 8016b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d0b8      	beq.n	8016b18 <scalbn+0x30>
 8016ba6:	a10e      	add	r1, pc, #56	; (adr r1, 8016be0 <scalbn+0xf8>)
 8016ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bac:	e7b4      	b.n	8016b18 <scalbn+0x30>
 8016bae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016bb2:	3236      	adds	r2, #54	; 0x36
 8016bb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016bb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	4b0c      	ldr	r3, [pc, #48]	; (8016bf0 <scalbn+0x108>)
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	e7e8      	b.n	8016b96 <scalbn+0xae>
 8016bc4:	f3af 8000 	nop.w
 8016bc8:	c2f8f359 	.word	0xc2f8f359
 8016bcc:	01a56e1f 	.word	0x01a56e1f
 8016bd0:	8800759c 	.word	0x8800759c
 8016bd4:	7e37e43c 	.word	0x7e37e43c
 8016bd8:	8800759c 	.word	0x8800759c
 8016bdc:	fe37e43c 	.word	0xfe37e43c
 8016be0:	c2f8f359 	.word	0xc2f8f359
 8016be4:	81a56e1f 	.word	0x81a56e1f
 8016be8:	43500000 	.word	0x43500000
 8016bec:	ffff3cb0 	.word	0xffff3cb0
 8016bf0:	3c900000 	.word	0x3c900000

08016bf4 <finitef>:
 8016bf4:	b082      	sub	sp, #8
 8016bf6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016bfa:	9801      	ldr	r0, [sp, #4]
 8016bfc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016c00:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016c04:	bfac      	ite	ge
 8016c06:	2000      	movge	r0, #0
 8016c08:	2001      	movlt	r0, #1
 8016c0a:	b002      	add	sp, #8
 8016c0c:	4770      	bx	lr
	...

08016c10 <rintf>:
 8016c10:	ee10 2a10 	vmov	r2, s0
 8016c14:	b513      	push	{r0, r1, r4, lr}
 8016c16:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016c1a:	397f      	subs	r1, #127	; 0x7f
 8016c1c:	2916      	cmp	r1, #22
 8016c1e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016c22:	dc47      	bgt.n	8016cb4 <rintf+0xa4>
 8016c24:	b32b      	cbz	r3, 8016c72 <rintf+0x62>
 8016c26:	2900      	cmp	r1, #0
 8016c28:	ee10 3a10 	vmov	r3, s0
 8016c2c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8016c30:	da21      	bge.n	8016c76 <rintf+0x66>
 8016c32:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8016c36:	425b      	negs	r3, r3
 8016c38:	4921      	ldr	r1, [pc, #132]	; (8016cc0 <rintf+0xb0>)
 8016c3a:	0a5b      	lsrs	r3, r3, #9
 8016c3c:	0d12      	lsrs	r2, r2, #20
 8016c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016c42:	0512      	lsls	r2, r2, #20
 8016c44:	4313      	orrs	r3, r2
 8016c46:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8016c4a:	ee07 3a90 	vmov	s15, r3
 8016c4e:	edd1 6a00 	vldr	s13, [r1]
 8016c52:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8016c56:	ed8d 7a01 	vstr	s14, [sp, #4]
 8016c5a:	eddd 7a01 	vldr	s15, [sp, #4]
 8016c5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016c62:	ee17 3a90 	vmov	r3, s15
 8016c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016c6a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8016c6e:	ee00 3a10 	vmov	s0, r3
 8016c72:	b002      	add	sp, #8
 8016c74:	bd10      	pop	{r4, pc}
 8016c76:	4a13      	ldr	r2, [pc, #76]	; (8016cc4 <rintf+0xb4>)
 8016c78:	410a      	asrs	r2, r1
 8016c7a:	4213      	tst	r3, r2
 8016c7c:	d0f9      	beq.n	8016c72 <rintf+0x62>
 8016c7e:	0854      	lsrs	r4, r2, #1
 8016c80:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8016c84:	d006      	beq.n	8016c94 <rintf+0x84>
 8016c86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016c8a:	ea23 0304 	bic.w	r3, r3, r4
 8016c8e:	fa42 f101 	asr.w	r1, r2, r1
 8016c92:	430b      	orrs	r3, r1
 8016c94:	4a0a      	ldr	r2, [pc, #40]	; (8016cc0 <rintf+0xb0>)
 8016c96:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8016c9a:	ed90 7a00 	vldr	s14, [r0]
 8016c9e:	ee07 3a90 	vmov	s15, r3
 8016ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ca6:	edcd 7a01 	vstr	s15, [sp, #4]
 8016caa:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016cae:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016cb2:	e7de      	b.n	8016c72 <rintf+0x62>
 8016cb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016cb8:	d3db      	bcc.n	8016c72 <rintf+0x62>
 8016cba:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016cbe:	e7d8      	b.n	8016c72 <rintf+0x62>
 8016cc0:	080600c0 	.word	0x080600c0
 8016cc4:	007fffff 	.word	0x007fffff

08016cc8 <scalbnf>:
 8016cc8:	ee10 3a10 	vmov	r3, s0
 8016ccc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016cd0:	d025      	beq.n	8016d1e <scalbnf+0x56>
 8016cd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016cd6:	d302      	bcc.n	8016cde <scalbnf+0x16>
 8016cd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016cdc:	4770      	bx	lr
 8016cde:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016ce2:	d122      	bne.n	8016d2a <scalbnf+0x62>
 8016ce4:	4b2a      	ldr	r3, [pc, #168]	; (8016d90 <scalbnf+0xc8>)
 8016ce6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016d94 <scalbnf+0xcc>
 8016cea:	4298      	cmp	r0, r3
 8016cec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016cf0:	db16      	blt.n	8016d20 <scalbnf+0x58>
 8016cf2:	ee10 3a10 	vmov	r3, s0
 8016cf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016cfa:	3a19      	subs	r2, #25
 8016cfc:	4402      	add	r2, r0
 8016cfe:	2afe      	cmp	r2, #254	; 0xfe
 8016d00:	dd15      	ble.n	8016d2e <scalbnf+0x66>
 8016d02:	ee10 3a10 	vmov	r3, s0
 8016d06:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016d98 <scalbnf+0xd0>
 8016d0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8016d9c <scalbnf+0xd4>
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	eeb0 7a67 	vmov.f32	s14, s15
 8016d14:	bfb8      	it	lt
 8016d16:	eef0 7a66 	vmovlt.f32	s15, s13
 8016d1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8016d1e:	4770      	bx	lr
 8016d20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016da0 <scalbnf+0xd8>
 8016d24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016d28:	4770      	bx	lr
 8016d2a:	0dd2      	lsrs	r2, r2, #23
 8016d2c:	e7e6      	b.n	8016cfc <scalbnf+0x34>
 8016d2e:	2a00      	cmp	r2, #0
 8016d30:	dd06      	ble.n	8016d40 <scalbnf+0x78>
 8016d32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016d3a:	ee00 3a10 	vmov	s0, r3
 8016d3e:	4770      	bx	lr
 8016d40:	f112 0f16 	cmn.w	r2, #22
 8016d44:	da1a      	bge.n	8016d7c <scalbnf+0xb4>
 8016d46:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016d4a:	4298      	cmp	r0, r3
 8016d4c:	ee10 3a10 	vmov	r3, s0
 8016d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016d54:	dd0a      	ble.n	8016d6c <scalbnf+0xa4>
 8016d56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016d98 <scalbnf+0xd0>
 8016d5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8016d9c <scalbnf+0xd4>
 8016d5e:	eef0 7a40 	vmov.f32	s15, s0
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	bf18      	it	ne
 8016d66:	eeb0 0a47 	vmovne.f32	s0, s14
 8016d6a:	e7db      	b.n	8016d24 <scalbnf+0x5c>
 8016d6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8016da0 <scalbnf+0xd8>
 8016d70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016da4 <scalbnf+0xdc>
 8016d74:	eef0 7a40 	vmov.f32	s15, s0
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	e7f3      	b.n	8016d64 <scalbnf+0x9c>
 8016d7c:	3219      	adds	r2, #25
 8016d7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016d86:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016da8 <scalbnf+0xe0>
 8016d8a:	ee07 3a10 	vmov	s14, r3
 8016d8e:	e7c4      	b.n	8016d1a <scalbnf+0x52>
 8016d90:	ffff3cb0 	.word	0xffff3cb0
 8016d94:	4c000000 	.word	0x4c000000
 8016d98:	7149f2ca 	.word	0x7149f2ca
 8016d9c:	f149f2ca 	.word	0xf149f2ca
 8016da0:	0da24260 	.word	0x0da24260
 8016da4:	8da24260 	.word	0x8da24260
 8016da8:	33000000 	.word	0x33000000

08016dac <_close>:
 8016dac:	4b02      	ldr	r3, [pc, #8]	; (8016db8 <_close+0xc>)
 8016dae:	2258      	movs	r2, #88	; 0x58
 8016db0:	601a      	str	r2, [r3, #0]
 8016db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016db6:	4770      	bx	lr
 8016db8:	20013d2c 	.word	0x20013d2c

08016dbc <_fstat>:
 8016dbc:	4b02      	ldr	r3, [pc, #8]	; (8016dc8 <_fstat+0xc>)
 8016dbe:	2258      	movs	r2, #88	; 0x58
 8016dc0:	601a      	str	r2, [r3, #0]
 8016dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016dc6:	4770      	bx	lr
 8016dc8:	20013d2c 	.word	0x20013d2c

08016dcc <_getpid>:
 8016dcc:	4b02      	ldr	r3, [pc, #8]	; (8016dd8 <_getpid+0xc>)
 8016dce:	2258      	movs	r2, #88	; 0x58
 8016dd0:	601a      	str	r2, [r3, #0]
 8016dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016dd6:	4770      	bx	lr
 8016dd8:	20013d2c 	.word	0x20013d2c

08016ddc <_isatty>:
 8016ddc:	4b02      	ldr	r3, [pc, #8]	; (8016de8 <_isatty+0xc>)
 8016dde:	2258      	movs	r2, #88	; 0x58
 8016de0:	601a      	str	r2, [r3, #0]
 8016de2:	2000      	movs	r0, #0
 8016de4:	4770      	bx	lr
 8016de6:	bf00      	nop
 8016de8:	20013d2c 	.word	0x20013d2c

08016dec <_kill>:
 8016dec:	4b02      	ldr	r3, [pc, #8]	; (8016df8 <_kill+0xc>)
 8016dee:	2258      	movs	r2, #88	; 0x58
 8016df0:	601a      	str	r2, [r3, #0]
 8016df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016df6:	4770      	bx	lr
 8016df8:	20013d2c 	.word	0x20013d2c

08016dfc <_lseek>:
 8016dfc:	4b02      	ldr	r3, [pc, #8]	; (8016e08 <_lseek+0xc>)
 8016dfe:	2258      	movs	r2, #88	; 0x58
 8016e00:	601a      	str	r2, [r3, #0]
 8016e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e06:	4770      	bx	lr
 8016e08:	20013d2c 	.word	0x20013d2c

08016e0c <_read>:
 8016e0c:	4b02      	ldr	r3, [pc, #8]	; (8016e18 <_read+0xc>)
 8016e0e:	2258      	movs	r2, #88	; 0x58
 8016e10:	601a      	str	r2, [r3, #0]
 8016e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e16:	4770      	bx	lr
 8016e18:	20013d2c 	.word	0x20013d2c

08016e1c <_write>:
 8016e1c:	4b02      	ldr	r3, [pc, #8]	; (8016e28 <_write+0xc>)
 8016e1e:	2258      	movs	r2, #88	; 0x58
 8016e20:	601a      	str	r2, [r3, #0]
 8016e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e26:	4770      	bx	lr
 8016e28:	20013d2c 	.word	0x20013d2c

08016e2c <_exit>:
 8016e2c:	e7fe      	b.n	8016e2c <_exit>
	...

08016e30 <_init>:
 8016e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e32:	bf00      	nop
 8016e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e36:	bc08      	pop	{r3}
 8016e38:	469e      	mov	lr, r3
 8016e3a:	4770      	bx	lr

08016e3c <_fini>:
 8016e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e3e:	bf00      	nop
 8016e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e42:	bc08      	pop	{r3}
 8016e44:	469e      	mov	lr, r3
 8016e46:	4770      	bx	lr
